
Automotive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af0c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  0800b04c  0800b04c  0001b04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b40c  0800b40c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800b40c  0800b40c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b40c  0800b40c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b40c  0800b40c  0001b40c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b410  0800b410  0001b410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800b414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003894  20000010  0800b424  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200038a4  0800b424  000238a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cf01  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005727  00000000  00000000  0004cf3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a60  00000000  00000000  00052668  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017e0  00000000  00000000  000540c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e957  00000000  00000000  000558a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f869  00000000  00000000  000741ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aad64  00000000  00000000  00093a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013e7cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a6c  00000000  00000000  0013e848  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b034 	.word	0x0800b034

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	0800b034 	.word	0x0800b034

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__gedf2>:
 80004f8:	f04f 3cff 	mov.w	ip, #4294967295
 80004fc:	e006      	b.n	800050c <__cmpdf2+0x4>
 80004fe:	bf00      	nop

08000500 <__ledf2>:
 8000500:	f04f 0c01 	mov.w	ip, #1
 8000504:	e002      	b.n	800050c <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__cmpdf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000510:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000514:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000518:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800051c:	bf18      	it	ne
 800051e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000522:	d01b      	beq.n	800055c <__cmpdf2+0x54>
 8000524:	b001      	add	sp, #4
 8000526:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800052a:	bf0c      	ite	eq
 800052c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000530:	ea91 0f03 	teqne	r1, r3
 8000534:	bf02      	ittt	eq
 8000536:	ea90 0f02 	teqeq	r0, r2
 800053a:	2000      	moveq	r0, #0
 800053c:	4770      	bxeq	lr
 800053e:	f110 0f00 	cmn.w	r0, #0
 8000542:	ea91 0f03 	teq	r1, r3
 8000546:	bf58      	it	pl
 8000548:	4299      	cmppl	r1, r3
 800054a:	bf08      	it	eq
 800054c:	4290      	cmpeq	r0, r2
 800054e:	bf2c      	ite	cs
 8000550:	17d8      	asrcs	r0, r3, #31
 8000552:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000556:	f040 0001 	orr.w	r0, r0, #1
 800055a:	4770      	bx	lr
 800055c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000560:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000564:	d102      	bne.n	800056c <__cmpdf2+0x64>
 8000566:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800056a:	d107      	bne.n	800057c <__cmpdf2+0x74>
 800056c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000570:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000574:	d1d6      	bne.n	8000524 <__cmpdf2+0x1c>
 8000576:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800057a:	d0d3      	beq.n	8000524 <__cmpdf2+0x1c>
 800057c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <__aeabi_cdrcmple>:
 8000584:	4684      	mov	ip, r0
 8000586:	4610      	mov	r0, r2
 8000588:	4662      	mov	r2, ip
 800058a:	468c      	mov	ip, r1
 800058c:	4619      	mov	r1, r3
 800058e:	4663      	mov	r3, ip
 8000590:	e000      	b.n	8000594 <__aeabi_cdcmpeq>
 8000592:	bf00      	nop

08000594 <__aeabi_cdcmpeq>:
 8000594:	b501      	push	{r0, lr}
 8000596:	f7ff ffb7 	bl	8000508 <__cmpdf2>
 800059a:	2800      	cmp	r0, #0
 800059c:	bf48      	it	mi
 800059e:	f110 0f00 	cmnmi.w	r0, #0
 80005a2:	bd01      	pop	{r0, pc}

080005a4 <__aeabi_dcmpeq>:
 80005a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a8:	f7ff fff4 	bl	8000594 <__aeabi_cdcmpeq>
 80005ac:	bf0c      	ite	eq
 80005ae:	2001      	moveq	r0, #1
 80005b0:	2000      	movne	r0, #0
 80005b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005b6:	bf00      	nop

080005b8 <__aeabi_dcmplt>:
 80005b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005bc:	f7ff ffea 	bl	8000594 <__aeabi_cdcmpeq>
 80005c0:	bf34      	ite	cc
 80005c2:	2001      	movcc	r0, #1
 80005c4:	2000      	movcs	r0, #0
 80005c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ca:	bf00      	nop

080005cc <__aeabi_dcmple>:
 80005cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d0:	f7ff ffe0 	bl	8000594 <__aeabi_cdcmpeq>
 80005d4:	bf94      	ite	ls
 80005d6:	2001      	movls	r0, #1
 80005d8:	2000      	movhi	r0, #0
 80005da:	f85d fb08 	ldr.w	pc, [sp], #8
 80005de:	bf00      	nop

080005e0 <__aeabi_dcmpge>:
 80005e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005e4:	f7ff ffce 	bl	8000584 <__aeabi_cdrcmple>
 80005e8:	bf94      	ite	ls
 80005ea:	2001      	movls	r0, #1
 80005ec:	2000      	movhi	r0, #0
 80005ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80005f2:	bf00      	nop

080005f4 <__aeabi_dcmpgt>:
 80005f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f8:	f7ff ffc4 	bl	8000584 <__aeabi_cdrcmple>
 80005fc:	bf34      	ite	cc
 80005fe:	2001      	movcc	r0, #1
 8000600:	2000      	movcs	r0, #0
 8000602:	f85d fb08 	ldr.w	pc, [sp], #8
 8000606:	bf00      	nop

08000608 <h_bridge_init>:
	evgroup_drive_evbit_permitted,
	evgroup_drive_evbit_N,

} drive_evgroup_bits_t;

bool h_bridge_init(void) {
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800060c:	2108      	movs	r1, #8
 800060e:	4808      	ldr	r0, [pc, #32]	; (8000630 <h_bridge_init+0x28>)
 8000610:	f005 fdd4 	bl	80061bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000614:	2100      	movs	r1, #0
 8000616:	4807      	ldr	r0, [pc, #28]	; (8000634 <h_bridge_init+0x2c>)
 8000618:	f005 fdd0 	bl	80061bc <HAL_TIM_PWM_Start>

	h_bridge_set_left_duty(0);
 800061c:	2000      	movs	r0, #0
 800061e:	f000 f80b 	bl	8000638 <h_bridge_set_left_duty>
	h_bridge_set_right_duty(0);
 8000622:	2000      	movs	r0, #0
 8000624:	f000 f82e 	bl	8000684 <h_bridge_set_right_duty>

	return true;
 8000628:	2301      	movs	r3, #1
}
 800062a:	4618      	mov	r0, r3
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	200036e4 	.word	0x200036e4
 8000634:	2000375c 	.word	0x2000375c

08000638 <h_bridge_set_left_duty>:

void h_bridge_set_left_duty(int percent) {
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	if (percent > 100)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b64      	cmp	r3, #100	; 0x64
 8000644:	dd01      	ble.n	800064a <h_bridge_set_left_duty+0x12>
		percent = 100;
 8000646:	2364      	movs	r3, #100	; 0x64
 8000648:	607b      	str	r3, [r7, #4]

	if (percent < 1)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b00      	cmp	r3, #0
 800064e:	dc01      	bgt.n	8000654 <h_bridge_set_left_duty+0x1c>
		percent = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]

	uint32_t value = percent * htim2.Init.Period / 100;
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <h_bridge_set_left_duty+0x44>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	fb02 f303 	mul.w	r3, r2, r3
 800065e:	4a08      	ldr	r2, [pc, #32]	; (8000680 <h_bridge_set_left_duty+0x48>)
 8000660:	fba2 2303 	umull	r2, r3, r2, r3
 8000664:	095b      	lsrs	r3, r3, #5
 8000666:	60fb      	str	r3, [r7, #12]
//	htim2.Instance->CCR1 = value;
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, value);
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <h_bridge_set_left_duty+0x44>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	68fa      	ldr	r2, [r7, #12]
 800066e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	2000375c 	.word	0x2000375c
 8000680:	51eb851f 	.word	0x51eb851f

08000684 <h_bridge_set_right_duty>:

void h_bridge_set_right_duty(int percent) {
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	if (percent > 100)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2b64      	cmp	r3, #100	; 0x64
 8000690:	dd01      	ble.n	8000696 <h_bridge_set_right_duty+0x12>
		percent = 100;
 8000692:	2364      	movs	r3, #100	; 0x64
 8000694:	607b      	str	r3, [r7, #4]

	if (percent < 1)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b00      	cmp	r3, #0
 800069a:	dc01      	bgt.n	80006a0 <h_bridge_set_right_duty+0x1c>
		percent = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]

	uint32_t value = percent * htim3.Init.Period / 100;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <h_bridge_set_right_duty+0x44>)
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	fb02 f303 	mul.w	r3, r2, r3
 80006aa:	4a08      	ldr	r2, [pc, #32]	; (80006cc <h_bridge_set_right_duty+0x48>)
 80006ac:	fba2 2303 	umull	r2, r3, r2, r3
 80006b0:	095b      	lsrs	r3, r3, #5
 80006b2:	60fb      	str	r3, [r7, #12]
//	htim3.Instance->CCR3 = value;
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, value);
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <h_bridge_set_right_duty+0x44>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80006bc:	bf00      	nop
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	200036e4 	.word	0x200036e4
 80006cc:	51eb851f 	.word	0x51eb851f

080006d0 <h_bridge_cw_left>:

void h_bridge_cw_left(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 80006d4:	2201      	movs	r2, #1
 80006d6:	2102      	movs	r1, #2
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <h_bridge_cw_left+0x1c>)
 80006da:	f003 fb35 	bl	8003d48 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 80006de:	2200      	movs	r2, #0
 80006e0:	2104      	movs	r1, #4
 80006e2:	4802      	ldr	r0, [pc, #8]	; (80006ec <h_bridge_cw_left+0x1c>)
 80006e4:	f003 fb30 	bl	8003d48 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40020800 	.word	0x40020800

080006f0 <h_bridge_cw_right>:

void h_bridge_cw_right(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 80006f4:	2201      	movs	r2, #1
 80006f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <h_bridge_cw_right+0x20>)
 80006fc:	f003 fb24 	bl	8003d48 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000706:	4803      	ldr	r0, [pc, #12]	; (8000714 <h_bridge_cw_right+0x24>)
 8000708:	f003 fb1e 	bl	8003d48 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40020000 	.word	0x40020000
 8000714:	40020800 	.word	0x40020800

08000718 <h_bridge_ccw_left>:

void h_bridge_ccw_left(void) {
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 800071c:	2200      	movs	r2, #0
 800071e:	2102      	movs	r1, #2
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <h_bridge_ccw_left+0x1c>)
 8000722:	f003 fb11 	bl	8003d48 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 8000726:	2201      	movs	r2, #1
 8000728:	2104      	movs	r1, #4
 800072a:	4802      	ldr	r0, [pc, #8]	; (8000734 <h_bridge_ccw_left+0x1c>)
 800072c:	f003 fb0c 	bl	8003d48 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40020800 	.word	0x40020800

08000738 <h_bridge_ccw_right>:

void h_bridge_ccw_right(void) {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <h_bridge_ccw_right+0x20>)
 8000744:	f003 fb00 	bl	8003d48 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 8000748:	2201      	movs	r2, #1
 800074a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800074e:	4803      	ldr	r0, [pc, #12]	; (800075c <h_bridge_ccw_right+0x24>)
 8000750:	f003 fafa 	bl	8003d48 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40020000 	.word	0x40020000
 800075c:	40020800 	.word	0x40020800

08000760 <h_bridge_coast>:

/// Lets the motor coast
void h_bridge_coast(void) {
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 8000764:	2200      	movs	r2, #0
 8000766:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076a:	480a      	ldr	r0, [pc, #40]	; (8000794 <h_bridge_coast+0x34>)
 800076c:	f003 faec 	bl	8003d48 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000776:	4808      	ldr	r0, [pc, #32]	; (8000798 <h_bridge_coast+0x38>)
 8000778:	f003 fae6 	bl	8003d48 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 800077c:	2200      	movs	r2, #0
 800077e:	2102      	movs	r1, #2
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <h_bridge_coast+0x38>)
 8000782:	f003 fae1 	bl	8003d48 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 8000786:	2200      	movs	r2, #0
 8000788:	2104      	movs	r1, #4
 800078a:	4803      	ldr	r0, [pc, #12]	; (8000798 <h_bridge_coast+0x38>)
 800078c:	f003 fadc 	bl	8003d48 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40020000 	.word	0x40020000
 8000798:	40020800 	.word	0x40020800

0800079c <QMC5883L_Read_Reg>:
	uint16_t buf = ((buff[1] << 8) | buff[0]);	// U2
	buf = (~buf) + 1; // decimal
	return (int) buf / 100; // our value
}

uint8_t QMC5883L_Read_Reg(uint8_t reg) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af04      	add	r7, sp, #16
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[1];
	HAL_I2C_Mem_Read(QMC5883L_I2C_PORT, QMC5883L_ADDRESS, reg, 1, Buffer, 1,
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	230a      	movs	r3, #10
 80007ac:	9302      	str	r3, [sp, #8]
 80007ae:	2301      	movs	r3, #1
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	2301      	movs	r3, #1
 80007ba:	213c      	movs	r1, #60	; 0x3c
 80007bc:	4803      	ldr	r0, [pc, #12]	; (80007cc <QMC5883L_Read_Reg+0x30>)
 80007be:	f003 fdb5 	bl	800432c <HAL_I2C_Mem_Read>
			10);
	return Buffer[0];
 80007c2:	7b3b      	ldrb	r3, [r7, #12]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200035dc 	.word	0x200035dc

080007d0 <QMC5883L_Write_Reg>:

void QMC5883L_Write_Reg(uint8_t reg, uint8_t data) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af02      	add	r7, sp, #8
 80007d6:	4603      	mov	r3, r0
 80007d8:	460a      	mov	r2, r1
 80007da:	71fb      	strb	r3, [r7, #7]
 80007dc:	4613      	mov	r3, r2
 80007de:	71bb      	strb	r3, [r7, #6]
	uint8_t Buffer[2] = { reg, data };
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	733b      	strb	r3, [r7, #12]
 80007e4:	79bb      	ldrb	r3, [r7, #6]
 80007e6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(QMC5883L_I2C_PORT, QMC5883L_ADDRESS, Buffer, 2, 10);
 80007e8:	f107 020c 	add.w	r2, r7, #12
 80007ec:	230a      	movs	r3, #10
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2302      	movs	r3, #2
 80007f2:	213c      	movs	r1, #60	; 0x3c
 80007f4:	4803      	ldr	r0, [pc, #12]	; (8000804 <QMC5883L_Write_Reg+0x34>)
 80007f6:	f003 fc9b 	bl	8004130 <HAL_I2C_Master_Transmit>
}
 80007fa:	bf00      	nop
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200035dc 	.word	0x200035dc

08000808 <QMC5883L_Read_Data>:

void QMC5883L_Read_Data(int16_t *MagX, int16_t *MagY, int16_t *MagZ) // (-32768 / +32768)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
	*MagX = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_X_LSB)
 8000814:	2004      	movs	r0, #4
 8000816:	f7ff ffc1 	bl	800079c <QMC5883L_Read_Reg>
 800081a:	4603      	mov	r3, r0
 800081c:	b21c      	sxth	r4, r3
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_X_MSB)) << 8));
 800081e:	2003      	movs	r0, #3
 8000820:	f7ff ffbc 	bl	800079c <QMC5883L_Read_Reg>
 8000824:	4603      	mov	r3, r0
 8000826:	021b      	lsls	r3, r3, #8
 8000828:	b21b      	sxth	r3, r3
 800082a:	4323      	orrs	r3, r4
 800082c:	b21a      	sxth	r2, r3
	*MagX = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_X_LSB)
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	801a      	strh	r2, [r3, #0]
	*MagY = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Y_LSB)
 8000832:	2008      	movs	r0, #8
 8000834:	f7ff ffb2 	bl	800079c <QMC5883L_Read_Reg>
 8000838:	4603      	mov	r3, r0
 800083a:	b21c      	sxth	r4, r3
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Y_MSB)) << 8));
 800083c:	2007      	movs	r0, #7
 800083e:	f7ff ffad 	bl	800079c <QMC5883L_Read_Reg>
 8000842:	4603      	mov	r3, r0
 8000844:	021b      	lsls	r3, r3, #8
 8000846:	b21b      	sxth	r3, r3
 8000848:	4323      	orrs	r3, r4
 800084a:	b21a      	sxth	r2, r3
	*MagY = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Y_LSB)
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	801a      	strh	r2, [r3, #0]
	*MagZ = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Z_LSB)
 8000850:	2006      	movs	r0, #6
 8000852:	f7ff ffa3 	bl	800079c <QMC5883L_Read_Reg>
 8000856:	4603      	mov	r3, r0
 8000858:	b21c      	sxth	r4, r3
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Z_MSB)) << 8));
 800085a:	2005      	movs	r0, #5
 800085c:	f7ff ff9e 	bl	800079c <QMC5883L_Read_Reg>
 8000860:	4603      	mov	r3, r0
 8000862:	021b      	lsls	r3, r3, #8
 8000864:	b21b      	sxth	r3, r3
 8000866:	4323      	orrs	r3, r4
 8000868:	b21a      	sxth	r2, r3
	*MagZ = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Z_LSB)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	801a      	strh	r2, [r3, #0]
}
 800086e:	bf00      	nop
 8000870:	3714      	adds	r7, #20
 8000872:	46bd      	mov	sp, r7
 8000874:	bd90      	pop	{r4, r7, pc}

08000876 <QMC5883L_Initialize>:
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_TEMP_READ_MSB)) << 8))
			/ 100;
}

void QMC5883L_Initialize(_qmc5883l_MODE MODE, _qmc5883l_ODR ODR,
		_qmc5883l_RNG RNG, _qmc5883l_OSR OSR) {
 8000876:	b590      	push	{r4, r7, lr}
 8000878:	b083      	sub	sp, #12
 800087a:	af00      	add	r7, sp, #0
 800087c:	4604      	mov	r4, r0
 800087e:	4608      	mov	r0, r1
 8000880:	4611      	mov	r1, r2
 8000882:	461a      	mov	r2, r3
 8000884:	4623      	mov	r3, r4
 8000886:	71fb      	strb	r3, [r7, #7]
 8000888:	4603      	mov	r3, r0
 800088a:	71bb      	strb	r3, [r7, #6]
 800088c:	460b      	mov	r3, r1
 800088e:	717b      	strb	r3, [r7, #5]
 8000890:	4613      	mov	r3, r2
 8000892:	713b      	strb	r3, [r7, #4]
	QMC5883L_Write_Reg(QMC5883L_CONFIG_3, 0x01);
 8000894:	2101      	movs	r1, #1
 8000896:	200b      	movs	r0, #11
 8000898:	f7ff ff9a 	bl	80007d0 <QMC5883L_Write_Reg>
	QMC5883L_Write_Reg(QMC5883L_CONFIG_1, MODE | ODR | RNG | OSR);
 800089c:	79fa      	ldrb	r2, [r7, #7]
 800089e:	79bb      	ldrb	r3, [r7, #6]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	797b      	ldrb	r3, [r7, #5]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	793b      	ldrb	r3, [r7, #4]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	4619      	mov	r1, r3
 80008b2:	2009      	movs	r0, #9
 80008b4:	f7ff ff8c 	bl	80007d0 <QMC5883L_Write_Reg>
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd90      	pop	{r4, r7, pc}

080008c0 <QMC5883L_InterruptConfig>:

void QMC5883L_Reset() {
	QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x81);
}

void QMC5883L_InterruptConfig(_qmc5883l_INT INT) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
	if (INT == INTERRUPT_ENABLE) {
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d104      	bne.n	80008da <QMC5883L_InterruptConfig+0x1a>
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x00);
 80008d0:	2100      	movs	r1, #0
 80008d2:	200a      	movs	r0, #10
 80008d4:	f7ff ff7c 	bl	80007d0 <QMC5883L_Write_Reg>
	} else {
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x01);
	}
}
 80008d8:	e003      	b.n	80008e2 <QMC5883L_InterruptConfig+0x22>
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x01);
 80008da:	2101      	movs	r1, #1
 80008dc:	200a      	movs	r0, #10
 80008de:	f7ff ff77 	bl	80007d0 <QMC5883L_Write_Reg>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <device_init>:

#include "device_init.h"
#include "stdint.h"


void device_init(void) {
 80008ea:	b480      	push	{r7}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0

	uint16_t successCnt = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	80fb      	strh	r3, [r7, #6]
	uint16_t modsToInit = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < /*mod_N*/mod_0; i++) {
 80008f8:	2300      	movs	r3, #0
 80008fa:	807b      	strh	r3, [r7, #2]
 80008fc:	bf00      	nop
		}

		modsToInit++;
	}

	if (modsToInit != successCnt) {
 80008fe:	88ba      	ldrh	r2, [r7, #4]
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	429a      	cmp	r2, r3
 8000904:	d000      	beq.n	8000908 <device_init+0x1e>
		// some kind of error
		while (1)
 8000906:	e7fe      	b.n	8000906 <device_init+0x1c>
			; //TODO: call some error handler
	}

}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
	...

08000914 <rt_init>:
TaskHandle_t rt_tasks[rt_task_N];
QueueHandle_t rt_queues[rt_queue_N];
EventGroupHandle_t rt_evgroups[rt_evgroup_N];
TimerHandle_t rt_timers[rt_timer_N];

void rt_init(void) {
 8000914:	b5b0      	push	{r4, r5, r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af02      	add	r7, sp, #8

	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 800091a:	2300      	movs	r3, #0
 800091c:	77fb      	strb	r3, [r7, #31]
 800091e:	e02c      	b.n	800097a <rt_init+0x66>
		rt_task_def_t const *def = rt_task_def + task;
 8000920:	7ffa      	ldrb	r2, [r7, #31]
 8000922:	4613      	mov	r3, r2
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	4413      	add	r3, r2
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	461a      	mov	r2, r3
 800092c:	4b47      	ldr	r3, [pc, #284]	; (8000a4c <rt_init+0x138>)
 800092e:	4413      	add	r3, r2
 8000930:	607b      	str	r3, [r7, #4]
		TaskHandle_t *handle = rt_tasks + task;
 8000932:	7ffb      	ldrb	r3, [r7, #31]
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	4a46      	ldr	r2, [pc, #280]	; (8000a50 <rt_init+0x13c>)
 8000938:	4413      	add	r3, r2
 800093a:	603b      	str	r3, [r7, #0]
		if (def->active) {
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	7c9b      	ldrb	r3, [r3, #18]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d014      	beq.n	800096e <rt_init+0x5a>
			if (xTaskCreate(def->pvTaskCode, def->pcName, def->usStackDepth,
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6818      	ldr	r0, [r3, #0]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6859      	ldr	r1, [r3, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	8a1c      	ldrh	r4, [r3, #16]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	689d      	ldr	r5, [r3, #8]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	683a      	ldr	r2, [r7, #0]
 800095a:	9201      	str	r2, [sp, #4]
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	462b      	mov	r3, r5
 8000960:	4622      	mov	r2, r4
 8000962:	f008 fb84 	bl	800906e <xTaskCreate>
 8000966:	4603      	mov	r3, r0
 8000968:	2b01      	cmp	r3, #1
 800096a:	d003      	beq.n	8000974 <rt_init+0x60>
					def->pvParameters, def->uxPriority, handle) != pdPASS) {
//				error :-(
				while (1)
 800096c:	e7fe      	b.n	800096c <rt_init+0x58>
					;
			}
		} else {
			*handle = 0;
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 8000974:	7ffb      	ldrb	r3, [r7, #31]
 8000976:	3301      	adds	r3, #1
 8000978:	77fb      	strb	r3, [r7, #31]
 800097a:	7ffb      	ldrb	r3, [r7, #31]
 800097c:	2b04      	cmp	r3, #4
 800097e:	d9cf      	bls.n	8000920 <rt_init+0xc>
		}
	}

	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 8000980:	2300      	movs	r3, #0
 8000982:	77bb      	strb	r3, [r7, #30]
 8000984:	e01c      	b.n	80009c0 <rt_init+0xac>
		rt_queue_def_t const *def = rt_queue_def + queue;
 8000986:	7fbb      	ldrb	r3, [r7, #30]
 8000988:	011b      	lsls	r3, r3, #4
 800098a:	4a32      	ldr	r2, [pc, #200]	; (8000a54 <rt_init+0x140>)
 800098c:	4413      	add	r3, r2
 800098e:	60fb      	str	r3, [r7, #12]
		QueueHandle_t *handle = rt_queues + queue;
 8000990:	7fbb      	ldrb	r3, [r7, #30]
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	4a30      	ldr	r2, [pc, #192]	; (8000a58 <rt_init+0x144>)
 8000996:	4413      	add	r3, r2
 8000998:	60bb      	str	r3, [r7, #8]

		if ((*handle = xQueueCreate(def->uxQueueLength, def->uxItemSize))
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	6818      	ldr	r0, [r3, #0]
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	2200      	movs	r2, #0
 80009a4:	4619      	mov	r1, r3
 80009a6:	f007 fed3 	bl	8008750 <xQueueGenericCreate>
 80009aa:	4602      	mov	r2, r0
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d100      	bne.n	80009ba <rt_init+0xa6>
				== 0) {
			while (1)
 80009b8:	e7fe      	b.n	80009b8 <rt_init+0xa4>
	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 80009ba:	7fbb      	ldrb	r3, [r7, #30]
 80009bc:	3301      	adds	r3, #1
 80009be:	77bb      	strb	r3, [r7, #30]
 80009c0:	7fbb      	ldrb	r3, [r7, #30]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d9df      	bls.n	8000986 <rt_init+0x72>
				;
		}
	}

	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 80009c6:	2300      	movs	r3, #0
 80009c8:	777b      	strb	r3, [r7, #29]
 80009ca:	e020      	b.n	8000a0e <rt_init+0xfa>
		rt_timer_def_t const *def = rt_timer_def + timer;
 80009cc:	7f7b      	ldrb	r3, [r7, #29]
 80009ce:	011b      	lsls	r3, r3, #4
 80009d0:	4a22      	ldr	r2, [pc, #136]	; (8000a5c <rt_init+0x148>)
 80009d2:	4413      	add	r3, r2
 80009d4:	617b      	str	r3, [r7, #20]
		TimerHandle_t *handle = rt_timers + timer;
 80009d6:	7f7b      	ldrb	r3, [r7, #29]
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4a21      	ldr	r2, [pc, #132]	; (8000a60 <rt_init+0x14c>)
 80009dc:	4413      	add	r3, r2
 80009de:	613b      	str	r3, [r7, #16]

		if ((*handle = xTimerCreate(def->pcTimerName, def->xTimerPeriodInTicks,
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	6818      	ldr	r0, [r3, #0]
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	6859      	ldr	r1, [r3, #4]
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	689a      	ldr	r2, [r3, #8]
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	2300      	movs	r3, #0
 80009f4:	f009 fbf8 	bl	800a1e8 <xTimerCreate>
 80009f8:	4602      	mov	r2, r0
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d100      	bne.n	8000a08 <rt_init+0xf4>
				def->uxAutoReload, NULL, def->pxCallbackFunction)) == 0)
			while (1)
 8000a06:	e7fe      	b.n	8000a06 <rt_init+0xf2>
	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 8000a08:	7f7b      	ldrb	r3, [r7, #29]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	777b      	strb	r3, [r7, #29]
 8000a0e:	7f7b      	ldrb	r3, [r7, #29]
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d9db      	bls.n	80009cc <rt_init+0xb8>
				;
	}

	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 8000a14:	2300      	movs	r3, #0
 8000a16:	773b      	strb	r3, [r7, #28]
 8000a18:	e011      	b.n	8000a3e <rt_init+0x12a>
			evgroup++) {
		EventGroupHandle_t *handle = rt_evgroups + evgroup;
 8000a1a:	7f3b      	ldrb	r3, [r7, #28]
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	4a11      	ldr	r2, [pc, #68]	; (8000a64 <rt_init+0x150>)
 8000a20:	4413      	add	r3, r2
 8000a22:	61bb      	str	r3, [r7, #24]

		if ((*handle = xEventGroupCreate()) == 0) {
 8000a24:	f007 fb04 	bl	8008030 <xEventGroupCreate>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d100      	bne.n	8000a38 <rt_init+0x124>
			while (1)
 8000a36:	e7fe      	b.n	8000a36 <rt_init+0x122>
			evgroup++) {
 8000a38:	7f3b      	ldrb	r3, [r7, #28]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	773b      	strb	r3, [r7, #28]
	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 8000a3e:	7f3b      	ldrb	r3, [r7, #28]
 8000a40:	2b03      	cmp	r3, #3
 8000a42:	d9ea      	bls.n	8000a1a <rt_init+0x106>
				;
		}
	}

}
 8000a44:	bf00      	nop
 8000a46:	3720      	adds	r7, #32
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a4c:	0800b310 	.word	0x0800b310
 8000a50:	2000353c 	.word	0x2000353c
 8000a54:	0800b374 	.word	0x0800b374
 8000a58:	2000356c 	.word	0x2000356c
 8000a5c:	0800b394 	.word	0x0800b394
 8000a60:	20003550 	.word	0x20003550
 8000a64:	2000355c 	.word	0x2000355c

08000a68 <rt_evbitwait_any>:

uint32_t rt_evbitwait_any(rt_evgroup_t Ev) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af02      	add	r7, sp, #8
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	4a09      	ldr	r2, [pc, #36]	; (8000a9c <rt_evbitwait_any+0x34>)
 8000a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7a:	60fb      	str	r3, [r7, #12]

	return xEventGroupWaitBits(Evh, 0x00FFFFFFu, pdTRUE, pdFALSE, portMAX_DELAY);
 8000a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	2300      	movs	r3, #0
 8000a84:	2201      	movs	r2, #1
 8000a86:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000a8a:	68f8      	ldr	r0, [r7, #12]
 8000a8c:	f007 faea 	bl	8008064 <xEventGroupWaitBits>
 8000a90:	4603      	mov	r3, r0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	2000355c 	.word	0x2000355c

08000aa0 <rt_evbit_check_any>:

uint32_t rt_evbit_check_any(rt_evgroup_t Ev) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af02      	add	r7, sp, #8
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <rt_evbit_check_any+0x30>)
 8000aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab2:	60fb      	str	r3, [r7, #12]

	return xEventGroupWaitBits(Evh, 0x00FFFFFFu, pdFALSE, pdFALSE, 0);
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	2300      	movs	r3, #0
 8000aba:	2200      	movs	r2, #0
 8000abc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000ac0:	68f8      	ldr	r0, [r7, #12]
 8000ac2:	f007 facf 	bl	8008064 <xEventGroupWaitBits>
 8000ac6:	4603      	mov	r3, r0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	2000355c 	.word	0x2000355c

08000ad4 <rt_evbit_clear_ISR>:

	return xEventGroupClearBits(Evh, // The event group being updated.
			bits_to_clear);	// The bits being cleared.
}

BaseType_t rt_evbit_clear_ISR( rt_evgroup_t Ev, uint32_t bits_to_clear) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	71fb      	strb	r3, [r7, #7]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	4a06      	ldr	r2, [pc, #24]	; (8000afc <rt_evbit_clear_ISR+0x28>)
 8000ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae8:	60fb      	str	r3, [r7, #12]


	return xEventGroupClearBitsFromISR(Evh, // The event group being updated.
 8000aea:	6839      	ldr	r1, [r7, #0]
 8000aec:	68f8      	ldr	r0, [r7, #12]
 8000aee:	f007 fbb9 	bl	8008264 <xEventGroupClearBitsFromISR>
 8000af2:	4603      	mov	r3, r0
			bits_to_clear);	// The bits being cleared.
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2000355c 	.word	0x2000355c

08000b00 <rt_evbit_set>:

void rt_evbit_set(rt_evgroup_t Ev, uint32_t bit) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	6039      	str	r1, [r7, #0]
 8000b0a:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <rt_evbit_set+0x30>)
 8000b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1e:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBits(Evh, msk);
 8000b20:	68f9      	ldr	r1, [r7, #12]
 8000b22:	68b8      	ldr	r0, [r7, #8]
 8000b24:	f007 fbb2 	bl	800828c <xEventGroupSetBits>
}
 8000b28:	bf00      	nop
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	2000355c 	.word	0x2000355c

08000b34 <rt_evbit_set_ISR>:

void rt_evbit_set_ISR(rt_evgroup_t Ev, uint32_t bit) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 8000b40:	2201      	movs	r2, #1
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <rt_evbit_set_ISR+0x34>)
 8000b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b52:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBitsFromISR(Evh, msk, pdFALSE);
 8000b54:	2200      	movs	r2, #0
 8000b56:	68f9      	ldr	r1, [r7, #12]
 8000b58:	68b8      	ldr	r0, [r7, #8]
 8000b5a:	f007 fc5b 	bl	8008414 <xEventGroupSetBitsFromISR>
//	portYIELD_FROM_ISR(pdFALSE);
}
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	2000355c 	.word	0x2000355c

08000b6c <rt_enqueue_ISR>:
	}

	return false;
}

bool rt_enqueue_ISR(rt_queue_t Q, void const *bf) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
//  assert(Q < rt_queue_N);

	QueueHandle_t Qh = rt_queues[Q];
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <rt_enqueue_ISR+0x3c>)
 8000b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b80:	60fb      	str	r3, [r7, #12]
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
	if (xQueueSendToBackFromISR(Qh, bf, &xHigherPriorityTaskWoken) == pdPASS) {
 8000b86:	f107 0208 	add.w	r2, r7, #8
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	6839      	ldr	r1, [r7, #0]
 8000b8e:	68f8      	ldr	r0, [r7, #12]
 8000b90:	f007 ff38 	bl	8008a04 <xQueueGenericSendFromISR>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d101      	bne.n	8000b9e <rt_enqueue_ISR+0x32>
		return true;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e000      	b.n	8000ba0 <rt_enqueue_ISR+0x34>
	}

	return false;
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	2000356c 	.word	0x2000356c

08000bac <rt_dequeue>:

bool rt_dequeue(rt_queue_t Q, void *bf) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	71fb      	strb	r3, [r7, #7]
//  assert(Q < rt_queue_N);

	QueueHandle_t Qh = rt_queues[Q];
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <rt_dequeue+0x44>)
 8000bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc0:	60fb      	str	r3, [r7, #12]
	TickType_t to = rt_queue_def[Q].timeout_deq;
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <rt_dequeue+0x48>)
 8000bc6:	011b      	lsls	r3, r3, #4
 8000bc8:	4413      	add	r3, r2
 8000bca:	330c      	adds	r3, #12
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	60bb      	str	r3, [r7, #8]

	if (xQueueReceive(Qh, bf, to) == pdPASS) {
 8000bd0:	68ba      	ldr	r2, [r7, #8]
 8000bd2:	6839      	ldr	r1, [r7, #0]
 8000bd4:	68f8      	ldr	r0, [r7, #12]
 8000bd6:	f007 ffa9 	bl	8008b2c <xQueueReceive>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d101      	bne.n	8000be4 <rt_dequeue+0x38>
		return true;
 8000be0:	2301      	movs	r3, #1
 8000be2:	e000      	b.n	8000be6 <rt_dequeue+0x3a>
	}

	return false;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	2000356c 	.word	0x2000356c
 8000bf4:	0800b374 	.word	0x0800b374

08000bf8 <rt_timer_start>:
	}

	return false;
}

bool rt_timer_start(rt_timer_t t, uint32_t timeout) {
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af02      	add	r7, sp, #8
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
	return xTimerStart(rt_timers[t], timeout);
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <rt_timer_start+0x3c>)
 8000c08:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000c0c:	f008 fdb8 	bl	8009780 <xTaskGetTickCount>
 8000c10:	4602      	mov	r2, r0
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	2300      	movs	r3, #0
 8000c18:	2101      	movs	r1, #1
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	f009 fb36 	bl	800a28c <xTimerGenericCommand>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	bf14      	ite	ne
 8000c26:	2301      	movne	r3, #1
 8000c28:	2300      	moveq	r3, #0
 8000c2a:	b2db      	uxtb	r3, r3
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd90      	pop	{r4, r7, pc}
 8000c34:	20003550 	.word	0x20003550

08000c38 <rt_timer_start_ISR>:

bool rt_timer_start_ISR(rt_timer_t t, BaseType_t *pxHigherPriorityTaskWoken) {
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af02      	add	r7, sp, #8
 8000c3e:	4603      	mov	r3, r0
 8000c40:	6039      	str	r1, [r7, #0]
 8000c42:	71fb      	strb	r3, [r7, #7]
	return xTimerStartFromISR(rt_timers[t], pxHigherPriorityTaskWoken);
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <rt_timer_start_ISR+0x3c>)
 8000c48:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000c4c:	f008 fda6 	bl	800979c <xTaskGetTickCountFromISR>
 8000c50:	4602      	mov	r2, r0
 8000c52:	2300      	movs	r3, #0
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	2106      	movs	r1, #6
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	f009 fb16 	bl	800a28c <xTimerGenericCommand>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	bf14      	ite	ne
 8000c66:	2301      	movne	r3, #1
 8000c68:	2300      	moveq	r3, #0
 8000c6a:	b2db      	uxtb	r3, r3
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd90      	pop	{r4, r7, pc}
 8000c74:	20003550 	.word	0x20003550

08000c78 <timer_BLE>:
// working all the time, checking if something is received or sending data to android device

/* ************************************************************************** */
// callback
/* ************************************************************************** */
void timer_BLE(TimerHandle_t xTimer) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, (uint8_t*) ble_pData, BLE_MAX_SIZE);
 8000c80:	2203      	movs	r2, #3
 8000c82:	4904      	ldr	r1, [pc, #16]	; (8000c94 <timer_BLE+0x1c>)
 8000c84:	4804      	ldr	r0, [pc, #16]	; (8000c98 <timer_BLE+0x20>)
 8000c86:	f006 fd09 	bl	800769c <HAL_UART_Receive_DMA>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20003578 	.word	0x20003578
 8000c98:	200037dc 	.word	0x200037dc

08000c9c <HAL_UART_RxCpltCallback>:

void HAL_UART_TxHalfCallback(UART_HandleTypeDef *huart) {
	__NOP();
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
//	__NOP();
//	char ble_pData[BLE_MAX_SIZE];
//	memset(ble_pData, 1, BLE_MAX_SIZE);
//	ble_receive_data(ble_pData);
	xQueueBleData ble_queue = { 0 };
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]

	ble_queue.info = ble_received;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	733b      	strb	r3, [r7, #12]

	memcpy(&ble_queue.command, ble_pData, 1);
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_UART_RxCpltCallback+0x38>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	737b      	strb	r3, [r7, #13]
	memcpy(&ble_queue.valueReg1, ble_pData + 1, 1);
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <HAL_UART_RxCpltCallback+0x3c>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	73bb      	strb	r3, [r7, #14]
	memcpy(&ble_queue.valueReg2, ble_pData + 2, 1);
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <HAL_UART_RxCpltCallback+0x40>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	73fb      	strb	r3, [r7, #15]

	rt_enqueue_ISR(rt_queue_ble, &ble_queue);
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f7ff ff51 	bl	8000b6c <rt_enqueue_ISR>

}
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20003578 	.word	0x20003578
 8000cd8:	20003579 	.word	0x20003579
 8000cdc:	2000357a 	.word	0x2000357a

08000ce0 <HAL_UART_ErrorCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart);/* {
 __NOP();
 }*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	__NOP();
 8000ce8:	bf00      	nop
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <task_ble>:

/* ************************************************************************** */
// task
/* ************************************************************************** */
void task_ble(void *pvParameters) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	(void*) pvParameters;

	bool status;
	xQueueBleData receivedBleData = { 0 };
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]

	for (;;) {

//		vTaskDelay(xDelay1000ms);

		status = rt_dequeue(rt_queue_ble, &receivedBleData);
 8000d00:	f107 0308 	add.w	r3, r7, #8
 8000d04:	4619      	mov	r1, r3
 8000d06:	2000      	movs	r0, #0
 8000d08:	f7ff ff50 	bl	8000bac <rt_dequeue>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	75fb      	strb	r3, [r7, #23]

		if (status) {
 8000d10:	7dfb      	ldrb	r3, [r7, #23]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d0f4      	beq.n	8000d00 <task_ble+0xc>
			if (receivedBleData.info == ble_received) {
 8000d16:	7a3b      	ldrb	r3, [r7, #8]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d156      	bne.n	8000dca <task_ble+0xd6>
//				memcpy(ble_pData, receivedBleData.value, BLE_MAX_SIZE);

				switch (receivedBleData.command) {
 8000d1c:	7a7b      	ldrb	r3, [r7, #9]
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d008      	beq.n	8000d34 <task_ble+0x40>
 8000d22:	2b03      	cmp	r3, #3
 8000d24:	d00b      	beq.n	8000d3e <task_ble+0x4a>
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d148      	bne.n	8000dbc <task_ble+0xc8>
				case BLE_RECEIVED_DO_NOTHING:
					rt_evbit_set(rt_evgroup_state_machine,
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f7ff fee7 	bl	8000b00 <rt_evbit_set>
							evgroup_state_m_do_nothing);
					break;
 8000d32:	e04d      	b.n	8000dd0 <task_ble+0xdc>
				case BLE_RECEIVED_AUTO_MANUAL:
					rt_evbit_set(rt_evgroup_state_machine,
 8000d34:	2101      	movs	r1, #1
 8000d36:	2001      	movs	r0, #1
 8000d38:	f7ff fee2 	bl	8000b00 <rt_evbit_set>
							evgroup_state_m_auto_manual);
					break;
 8000d3c:	e048      	b.n	8000dd0 <task_ble+0xdc>
				case BLE_RECEIVED_MOVEMENT:
//					rt_evbit_set(rt_evgroup_state_machine,
//							evgroup_state_m_movement);

					left_engine = receivedBleData.valueReg1;
 8000d3e:	7abb      	ldrb	r3, [r7, #10]
 8000d40:	75bb      	strb	r3, [r7, #22]
					right_engine = receivedBleData.valueReg2;
 8000d42:	7afb      	ldrb	r3, [r7, #11]
 8000d44:	757b      	strb	r3, [r7, #21]
					// 0	1	1	0	0	1	0	0
					// ^
					// ccw
					// --- |        PERCENTAGE       |

					int left = u2_to_decimal(left_engine);
 8000d46:	7dbb      	ldrb	r3, [r7, #22]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 fa9f 	bl	800128c <u2_to_decimal>
 8000d4e:	6138      	str	r0, [r7, #16]
					int right = u2_to_decimal(right_engine);
 8000d50:	7d7b      	ldrb	r3, [r7, #21]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 fa9a 	bl	800128c <u2_to_decimal>
 8000d58:	60f8      	str	r0, [r7, #12]

					// left engine
					if (left < 0) {
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	da07      	bge.n	8000d70 <task_ble+0x7c>
						h_bridge_ccw_left();
 8000d60:	f7ff fcda 	bl	8000718 <h_bridge_ccw_left>
						h_bridge_set_left_duty(-left);
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	425b      	negs	r3, r3
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fc65 	bl	8000638 <h_bridge_set_left_duty>
 8000d6e:	e00c      	b.n	8000d8a <task_ble+0x96>
					} else {
						// allowed to drive forward?
						if (!(rt_evbit_check_any(rt_evgroup_ultrasound)
 8000d70:	2003      	movs	r0, #3
 8000d72:	f7ff fe95 	bl	8000aa0 <rt_evbit_check_any>
 8000d76:	4603      	mov	r3, r0
								& (1 << evgroup_ultrasound_evbit_move))) {
 8000d78:	f003 0302 	and.w	r3, r3, #2
						if (!(rt_evbit_check_any(rt_evgroup_ultrasound)
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d104      	bne.n	8000d8a <task_ble+0x96>
							// yes
							h_bridge_cw_left();
 8000d80:	f7ff fca6 	bl	80006d0 <h_bridge_cw_left>
							h_bridge_set_left_duty(left);
 8000d84:	6938      	ldr	r0, [r7, #16]
 8000d86:	f7ff fc57 	bl	8000638 <h_bridge_set_left_duty>
						}

					}

					// right engine
					if (right < 0) {
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	da07      	bge.n	8000da0 <task_ble+0xac>
						h_bridge_ccw_right();
 8000d90:	f7ff fcd2 	bl	8000738 <h_bridge_ccw_right>
						h_bridge_set_right_duty(-right);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	425b      	negs	r3, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fc73 	bl	8000684 <h_bridge_set_right_duty>
							h_bridge_cw_right();
							h_bridge_set_right_duty(right);
						}
					}

					break;
 8000d9e:	e016      	b.n	8000dce <task_ble+0xda>
						if (!(rt_evbit_check_any(rt_evgroup_ultrasound)
 8000da0:	2003      	movs	r0, #3
 8000da2:	f7ff fe7d 	bl	8000aa0 <rt_evbit_check_any>
 8000da6:	4603      	mov	r3, r0
								& (1 << evgroup_ultrasound_evbit_move))) {
 8000da8:	f003 0302 	and.w	r3, r3, #2
						if (!(rt_evbit_check_any(rt_evgroup_ultrasound)
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d10e      	bne.n	8000dce <task_ble+0xda>
							h_bridge_cw_right();
 8000db0:	f7ff fc9e 	bl	80006f0 <h_bridge_cw_right>
							h_bridge_set_right_duty(right);
 8000db4:	68f8      	ldr	r0, [r7, #12]
 8000db6:	f7ff fc65 	bl	8000684 <h_bridge_set_right_duty>
					break;
 8000dba:	e008      	b.n	8000dce <task_ble+0xda>
				default:
					// unknow -> free
					rt_dequeue(rt_queue_ble, &receivedBleData);
 8000dbc:	f107 0308 	add.w	r3, r7, #8
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f7ff fef2 	bl	8000bac <rt_dequeue>
					break;
 8000dc8:	e002      	b.n	8000dd0 <task_ble+0xdc>
				}

			}
 8000dca:	bf00      	nop
 8000dcc:	e000      	b.n	8000dd0 <task_ble+0xdc>
					break;
 8000dce:	bf00      	nop

			if (receivedBleData.info == ble_transmit) {
 8000dd0:	7a3b      	ldrb	r3, [r7, #8]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d194      	bne.n	8000d00 <task_ble+0xc>

				memcpy(ble_pDataSend, &receivedBleData.command, 1);
 8000dd6:	7a7a      	ldrb	r2, [r7, #9]
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <task_ble+0x104>)
 8000dda:	701a      	strb	r2, [r3, #0]
				memcpy(ble_pDataSend + 1, &receivedBleData.valueReg1, 1);
 8000ddc:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <task_ble+0x108>)
 8000dde:	7aba      	ldrb	r2, [r7, #10]
 8000de0:	701a      	strb	r2, [r3, #0]
				memcpy(ble_pDataSend + 2, &receivedBleData.valueReg2, 1);
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <task_ble+0x10c>)
 8000de4:	7afa      	ldrb	r2, [r7, #11]
 8000de6:	701a      	strb	r2, [r3, #0]


				HAL_UART_Transmit(&huart3, (uint8_t*) ble_pDataSend, BLE_MAX_SIZE,
 8000de8:	230a      	movs	r3, #10
 8000dea:	2203      	movs	r2, #3
 8000dec:	4902      	ldr	r1, [pc, #8]	; (8000df8 <task_ble+0x104>)
 8000dee:	4805      	ldr	r0, [pc, #20]	; (8000e04 <task_ble+0x110>)
 8000df0:	f006 fbba 	bl	8007568 <HAL_UART_Transmit>
		status = rt_dequeue(rt_queue_ble, &receivedBleData);
 8000df4:	e784      	b.n	8000d00 <task_ble+0xc>
 8000df6:	bf00      	nop
 8000df8:	20003574 	.word	0x20003574
 8000dfc:	20003575 	.word	0x20003575
 8000e00:	20003576 	.word	0x20003576
 8000e04:	200037dc 	.word	0x200037dc

08000e08 <timer_ultrasound_sensor_tigger>:
#include "tim.h"

/* ************************************************************************** */
// callback
/* ************************************************************************** */
void timer_ultrasound_sensor_tigger(TimerHandle_t xTimer) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]

	// set gpio ultrasound trigger
	HAL_GPIO_WritePin(OUT_ULTRASOUND_TRIG_GPIO_Port, OUT_ULTRASOUND_TRIG_Pin, GPIO_PIN_SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	2140      	movs	r1, #64	; 0x40
 8000e14:	4804      	ldr	r0, [pc, #16]	; (8000e28 <timer_ultrasound_sensor_tigger+0x20>)
 8000e16:	f002 ff97 	bl	8003d48 <HAL_GPIO_WritePin>

	// set timer to 10 us, and start!
	HAL_TIM_Base_Start_IT(&htim10);
 8000e1a:	4804      	ldr	r0, [pc, #16]	; (8000e2c <timer_ultrasound_sensor_tigger+0x24>)
 8000e1c:	f005 f8b6 	bl	8005f8c <HAL_TIM_Base_Start_IT>
	// also... in async is waiting for rising / falling edge (void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin))
	// if rising edge start timer 4 for counting up
	// if falling edge stop timer 4
	// calulcate difference
	// calulcate distance between obstacle and vehicle
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40020800 	.word	0x40020800
 8000e2c:	200036a8 	.word	0x200036a8

08000e30 <task_eyes>:

void task_eyes(void *pvParameters) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

	// start auto-reloaded timer for triggering ultrasound sensor
	rt_timer_start(rt_timer_ultrasound_sensor_trigger, 100);
 8000e38:	2164      	movs	r1, #100	; 0x64
 8000e3a:	2002      	movs	r0, #2
 8000e3c:	f7ff fedc 	bl	8000bf8 <rt_timer_start>

	(void*) pvParameters;

	for (;;) {

		taskYIELD();
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <task_eyes+0x24>)
 8000e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	f3bf 8f4f 	dsb	sy
 8000e4c:	f3bf 8f6f 	isb	sy
 8000e50:	e7f6      	b.n	8000e40 <task_eyes+0x10>
 8000e52:	bf00      	nop
 8000e54:	e000ed04 	.word	0xe000ed04

08000e58 <task_memory>:
//#include "task_memory.h"

#include "FreeRTOS.h"
#include "task.h"
#include "runtime.h"
void task_memory(void *pvParameters) {
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;
//	rt_timer_start(rt_timer_jakis_tam, 300);
	for (;;) {
//		vTaskDelay(pdMS_TO_TICKS(1000));
		taskYIELD();
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <task_memory+0x1c>)
 8000e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	f3bf 8f4f 	dsb	sy
 8000e6c:	f3bf 8f6f 	isb	sy
 8000e70:	e7f6      	b.n	8000e60 <task_memory+0x8>
 8000e72:	bf00      	nop
 8000e74:	e000ed04 	.word	0xe000ed04

08000e78 <HAL_GPIO_EXTI_Callback>:
//bool ultrasound_done = false;
uint8_t pData[BLE_MAX_SIZE];
extern char temperature_measurement[SIZE_OF_TEMPERATURE_MEASURMENT_ARRAY];

// interrupt pin callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
//	IRQ_ULTRASOUND_ECHO_Pin
	if (GPIO_Pin & IRQ_ULTRASOUND_ECHO_Pin) {
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f000 80a4 	beq.w	8000fd6 <HAL_GPIO_EXTI_Callback+0x15e>

		if (ultrasound_was == false) {
 8000e8e:	4b6c      	ldr	r3, [pc, #432]	; (8001040 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	f083 0301 	eor.w	r3, r3, #1
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d006      	beq.n	8000eaa <HAL_GPIO_EXTI_Callback+0x32>
			HAL_TIM_Base_Start(&htim4);
 8000e9c:	4869      	ldr	r0, [pc, #420]	; (8001044 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000e9e:	f004 ffa9 	bl	8005df4 <HAL_TIM_Base_Start>
			ultrasound_was = true;
 8000ea2:	4b67      	ldr	r3, [pc, #412]	; (8001040 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	701a      	strb	r2, [r3, #0]
 8000ea8:	e095      	b.n	8000fd6 <HAL_GPIO_EXTI_Callback+0x15e>
		} else {
			uint16_t count = __HAL_TIM_GET_COUNTER(&htim4);
 8000eaa:	4b66      	ldr	r3, [pc, #408]	; (8001044 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb0:	81fb      	strh	r3, [r7, #14]
			HAL_TIM_Base_Stop(&htim4);
 8000eb2:	4864      	ldr	r0, [pc, #400]	; (8001044 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000eb4:	f005 f804 	bl	8005ec0 <HAL_TIM_Base_Stop>

			/// 	clear 	(if > 30 cm) 	==> 	allowed to drive forward
			/// 	set 	(if < 30 cm) 	==> 	forbidden to drive forward
			if (count > ULTRASOUND_DIST_40CM_BITS) {
 8000eb8:	89fb      	ldrh	r3, [r7, #14]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fab2 	bl	8000424 <__aeabi_i2d>
 8000ec0:	a34f      	add	r3, pc, #316	; (adr r3, 8001000 <HAL_GPIO_EXTI_Callback+0x188>)
 8000ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec6:	f7ff fb95 	bl	80005f4 <__aeabi_dcmpgt>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d004      	beq.n	8000eda <HAL_GPIO_EXTI_Callback+0x62>
				rt_evbit_clear_ISR(rt_evgroup_ultrasound,
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	f7ff fdfe 	bl	8000ad4 <rt_evbit_clear_ISR>
 8000ed8:	e07a      	b.n	8000fd0 <HAL_GPIO_EXTI_Callback+0x158>
						evgroup_ultrasound_evbit_move);
			} else if (count > ULTRASOUND_DIST_35CM_BITS) {
 8000eda:	89fb      	ldrh	r3, [r7, #14]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff faa1 	bl	8000424 <__aeabi_i2d>
 8000ee2:	a349      	add	r3, pc, #292	; (adr r3, 8001008 <HAL_GPIO_EXTI_Callback+0x190>)
 8000ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee8:	f7ff fb84 	bl	80005f4 <__aeabi_dcmpgt>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d004      	beq.n	8000efc <HAL_GPIO_EXTI_Callback+0x84>
				rt_evbit_clear_ISR(rt_evgroup_ultrasound,
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f7ff fded 	bl	8000ad4 <rt_evbit_clear_ISR>
 8000efa:	e069      	b.n	8000fd0 <HAL_GPIO_EXTI_Callback+0x158>
						evgroup_ultrasound_evbit_move);
			} else if (count > ULTRASOUND_DIST_30CM_BITS) {
 8000efc:	89fb      	ldrh	r3, [r7, #14]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fa90 	bl	8000424 <__aeabi_i2d>
 8000f04:	a342      	add	r3, pc, #264	; (adr r3, 8001010 <HAL_GPIO_EXTI_Callback+0x198>)
 8000f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0a:	f7ff fb73 	bl	80005f4 <__aeabi_dcmpgt>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d004      	beq.n	8000f1e <HAL_GPIO_EXTI_Callback+0xa6>
				rt_evbit_clear_ISR(rt_evgroup_ultrasound,
 8000f14:	2101      	movs	r1, #1
 8000f16:	2003      	movs	r0, #3
 8000f18:	f7ff fddc 	bl	8000ad4 <rt_evbit_clear_ISR>
 8000f1c:	e058      	b.n	8000fd0 <HAL_GPIO_EXTI_Callback+0x158>
						evgroup_ultrasound_evbit_move);
			} else if (count > ULTRASOUND_DIST_25CM_BITS) {
 8000f1e:	89fb      	ldrh	r3, [r7, #14]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fa7f 	bl	8000424 <__aeabi_i2d>
 8000f26:	a33c      	add	r3, pc, #240	; (adr r3, 8001018 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2c:	f7ff fb62 	bl	80005f4 <__aeabi_dcmpgt>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d004      	beq.n	8000f40 <HAL_GPIO_EXTI_Callback+0xc8>
				rt_evbit_set_ISR(rt_evgroup_ultrasound,
 8000f36:	2101      	movs	r1, #1
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f7ff fdfb 	bl	8000b34 <rt_evbit_set_ISR>
 8000f3e:	e047      	b.n	8000fd0 <HAL_GPIO_EXTI_Callback+0x158>
						evgroup_ultrasound_evbit_move);
			} else if (count > ULTRASOUND_DIST_20CM_BITS) {
 8000f40:	89fb      	ldrh	r3, [r7, #14]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fa6e 	bl	8000424 <__aeabi_i2d>
 8000f48:	a335      	add	r3, pc, #212	; (adr r3, 8001020 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4e:	f7ff fb51 	bl	80005f4 <__aeabi_dcmpgt>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d004      	beq.n	8000f62 <HAL_GPIO_EXTI_Callback+0xea>
				rt_evbit_set_ISR(rt_evgroup_ultrasound,
 8000f58:	2101      	movs	r1, #1
 8000f5a:	2003      	movs	r0, #3
 8000f5c:	f7ff fdea 	bl	8000b34 <rt_evbit_set_ISR>
 8000f60:	e036      	b.n	8000fd0 <HAL_GPIO_EXTI_Callback+0x158>
						evgroup_ultrasound_evbit_move);
			} else if (count > ULTRASOUND_DIST_15CM_BITS) {
 8000f62:	89fb      	ldrh	r3, [r7, #14]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fa5d 	bl	8000424 <__aeabi_i2d>
 8000f6a:	a32f      	add	r3, pc, #188	; (adr r3, 8001028 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f70:	f7ff fb40 	bl	80005f4 <__aeabi_dcmpgt>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d004      	beq.n	8000f84 <HAL_GPIO_EXTI_Callback+0x10c>
				rt_evbit_set_ISR(rt_evgroup_ultrasound,
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f7ff fdd9 	bl	8000b34 <rt_evbit_set_ISR>
 8000f82:	e025      	b.n	8000fd0 <HAL_GPIO_EXTI_Callback+0x158>
						evgroup_ultrasound_evbit_move);
			} else if (count > ULTRASOUND_DIST_10CM_BITS) {
 8000f84:	89fb      	ldrh	r3, [r7, #14]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fa4c 	bl	8000424 <__aeabi_i2d>
 8000f8c:	a328      	add	r3, pc, #160	; (adr r3, 8001030 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f92:	f7ff fb2f 	bl	80005f4 <__aeabi_dcmpgt>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d004      	beq.n	8000fa6 <HAL_GPIO_EXTI_Callback+0x12e>
				rt_evbit_set_ISR(rt_evgroup_ultrasound,
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	2003      	movs	r0, #3
 8000fa0:	f7ff fdc8 	bl	8000b34 <rt_evbit_set_ISR>
 8000fa4:	e014      	b.n	8000fd0 <HAL_GPIO_EXTI_Callback+0x158>
						evgroup_ultrasound_evbit_move);
			} else if (count > ULTRASOUND_DIST_5CM_BITS) {
 8000fa6:	89fb      	ldrh	r3, [r7, #14]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fa3b 	bl	8000424 <__aeabi_i2d>
 8000fae:	a322      	add	r3, pc, #136	; (adr r3, 8001038 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb4:	f7ff fb1e 	bl	80005f4 <__aeabi_dcmpgt>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d004      	beq.n	8000fc8 <HAL_GPIO_EXTI_Callback+0x150>
				rt_evbit_set_ISR(rt_evgroup_ultrasound,
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f7ff fdb7 	bl	8000b34 <rt_evbit_set_ISR>
 8000fc6:	e003      	b.n	8000fd0 <HAL_GPIO_EXTI_Callback+0x158>
						evgroup_ultrasound_evbit_move);
			} else {
				rt_evbit_set_ISR(rt_evgroup_ultrasound,
 8000fc8:	2101      	movs	r1, #1
 8000fca:	2003      	movs	r0, #3
 8000fcc:	f7ff fdb2 	bl	8000b34 <rt_evbit_set_ISR>
						evgroup_ultrasound_evbit_move);
			}
			ultrasound_was = false;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
		}
	}

//	BLE INTERRUPT -> SOMETHING IS RECEIVED
	if (GPIO_Pin & IRQ_BLE_Pin) {
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d009      	beq.n	8000ff4 <HAL_GPIO_EXTI_Callback+0x17c>
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60bb      	str	r3, [r7, #8]

//		ble_receive_data(pData);
		pxHigherPriorityTaskWoken = pdTRUE;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
		rt_timer_start_ISR(rt_timer_BLE, &pxHigherPriorityTaskWoken);
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	4619      	mov	r1, r3
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f7ff fe22 	bl	8000c38 <rt_timer_start_ISR>
//			xTimerStartFromISR(rt_timers[T], pxHigherPriorityTaskWoken);
	}
}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	f3af 8000 	nop.w
 8001000:	ad42c3ca 	.word	0xad42c3ca
 8001004:	40e22b29 	.word	0x40e22b29
 8001008:	ede54b49 	.word	0xede54b49
 800100c:	40dfcb88 	.word	0x40dfcb88
 8001010:	82d7b635 	.word	0x82d7b635
 8001014:	40db40be 	.word	0x40db40be
 8001018:	17ca2121 	.word	0x17ca2121
 800101c:	40d6b5f4 	.word	0x40d6b5f4
 8001020:	acbc8c0d 	.word	0xacbc8c0d
 8001024:	40d22b29 	.word	0x40d22b29
 8001028:	835dedf2 	.word	0x835dedf2
 800102c:	40cb40be 	.word	0x40cb40be
 8001030:	ac365450 	.word	0xac365450
 8001034:	40c22b29 	.word	0x40c22b29
 8001038:	ac365450 	.word	0xac365450
 800103c:	40b22b29 	.word	0x40b22b29
 8001040:	20000030 	.word	0x20000030
 8001044:	2000366c 	.word	0x2000366c

08001048 <timer_trigger_temperature_measurement>:

/// auto-reload - triggering temperature measurement inside MCU
/// .xTimerPeriodInTicks = pdMS_TO_TICKS(6000) // 6 sec
void timer_trigger_temperature_measurement(TimerHandle_t xTimer) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
//	HAL_ADC_Start_DMA(&hadc, pData, Length)
//	trigger_temperature_measurement_by_DMA();
	HAL_ADC_Start_DMA(&hadc, (uint32_t*) temperature_measurement,
 8001050:	2201      	movs	r2, #1
 8001052:	4904      	ldr	r1, [pc, #16]	; (8001064 <timer_trigger_temperature_measurement+0x1c>)
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <timer_trigger_temperature_measurement+0x20>)
 8001056:	f001 fc53 	bl	8002900 <HAL_ADC_Start_DMA>
//	toBeTransmit_ble_pData.valueReg2 = ble_pDataSend[2];

//	rt_enqueue_ISR(rt_queue_ble, &toBeTransmit_ble_pData);

//	HAL_UART_Transmit_DMA(&huart3, (uint8_t*) ble_pDataSend, BLE_MAX_SIZE);
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000002c 	.word	0x2000002c
 8001068:	20003584 	.word	0x20003584

0800106c <HAL_ADC_ConvCpltCallback>:

// temperature measurement completed? enqueue bluetooth :-)
/// sending raw data of temperature from MCU to BLE queue
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	xQueueBleData toBeTransmit_ble_pData = { 0 };
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
	toBeTransmit_ble_pData.info = ble_transmit;
 8001078:	2301      	movs	r3, #1
 800107a:	733b      	strb	r3, [r7, #12]
	toBeTransmit_ble_pData.command = 0x00;
 800107c:	2300      	movs	r3, #0
 800107e:	737b      	strb	r3, [r7, #13]
	toBeTransmit_ble_pData.valueReg1 = ((uint8_t*) &temperature_measurement)[2]; // MSB
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <HAL_ADC_ConvCpltCallback+0x34>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	73bb      	strb	r3, [r7, #14]
	toBeTransmit_ble_pData.valueReg2 = ((uint8_t*) &temperature_measurement)[3]; // LSB
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <HAL_ADC_ConvCpltCallback+0x38>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	73fb      	strb	r3, [r7, #15]
	rt_enqueue_ISR(rt_queue_ble, &toBeTransmit_ble_pData);
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	4619      	mov	r1, r3
 8001092:	2000      	movs	r0, #0
 8001094:	f7ff fd6a 	bl	8000b6c <rt_enqueue_ISR>
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2000002e 	.word	0x2000002e
 80010a4:	2000002f 	.word	0x2000002f

080010a8 <task_sensors>:

void task_sensors(void *pvParameters) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

//	uint32_t evgroup = 0;

// TODO: delete this line!
//	magnetometer_init();
	QMC5883L_Initialize(MODE_CONTROL_CONTINUOUS, OUTPUT_DATA_RATE_200HZ,
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	2200      	movs	r2, #0
 80010b4:	210c      	movs	r1, #12
 80010b6:	2000      	movs	r0, #0
 80010b8:	f7ff fbdd 	bl	8000876 <QMC5883L_Initialize>
			FULL_SCALE_2G, OVER_SAMPLE_RATIO_128);
	QMC5883L_InterruptConfig(INTERRUPT_DISABLE);
 80010bc:	2000      	movs	r0, #0
 80010be:	f7ff fbff 	bl	80008c0 <QMC5883L_InterruptConfig>

	//Mode Register
	//Continuous-Measurement Mode
	QMC5883L_Write_Reg(0x02, 0x00);
 80010c2:	2100      	movs	r1, #0
 80010c4:	2002      	movs	r0, #2
 80010c6:	f7ff fb83 	bl	80007d0 <QMC5883L_Write_Reg>

///	 start temperature measurement every period of this timer
	rt_timer_start(rt_timer_temperature_measurement, 100);
 80010ca:	2164      	movs	r1, #100	; 0x64
 80010cc:	2001      	movs	r0, #1
 80010ce:	f7ff fd93 	bl	8000bf8 <rt_timer_start>
		// na podstawie na danych zareaguj :)

		// jakis tam bit do ustawienia, np skret w lewo - uzupelnic
//			rt_evbit_set(rt_evgroup_state_machine, (1 << 8));
//		}
		int16_t X = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	823b      	strh	r3, [r7, #16]
		int16_t Y = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	81fb      	strh	r3, [r7, #14]
		int16_t Z = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	81bb      	strh	r3, [r7, #12]

		uint8_t status = QMC5883L_Read_Reg(0x09);
 80010de:	2009      	movs	r0, #9
 80010e0:	f7ff fb5c 	bl	800079c <QMC5883L_Read_Reg>
 80010e4:	4603      	mov	r3, r0
 80010e6:	75fb      	strb	r3, [r7, #23]
		uint8_t temp1 = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	75bb      	strb	r3, [r7, #22]
		uint8_t temp2 = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	757b      	strb	r3, [r7, #21]

		temp1 = QMC5883L_Read_Reg(0x07);
 80010f0:	2007      	movs	r0, #7
 80010f2:	f7ff fb53 	bl	800079c <QMC5883L_Read_Reg>
 80010f6:	4603      	mov	r3, r0
 80010f8:	75bb      	strb	r3, [r7, #22]
		temp2 = QMC5883L_Read_Reg(0x08);
 80010fa:	2008      	movs	r0, #8
 80010fc:	f7ff fb4e 	bl	800079c <QMC5883L_Read_Reg>
 8001100:	4603      	mov	r3, r0
 8001102:	757b      	strb	r3, [r7, #21]

		// u2 to decimal
		uint16_t temp = ~((temp2 << 8) | temp1) + 1;
 8001104:	7d7b      	ldrb	r3, [r7, #21]
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	b21a      	sxth	r2, r3
 800110a:	7dbb      	ldrb	r3, [r7, #22]
 800110c:	b21b      	sxth	r3, r3
 800110e:	4313      	orrs	r3, r2
 8001110:	b21b      	sxth	r3, r3
 8001112:	b29b      	uxth	r3, r3
 8001114:	425b      	negs	r3, r3
 8001116:	827b      	strh	r3, [r7, #18]
		temp /= 100;
 8001118:	8a7b      	ldrh	r3, [r7, #18]
 800111a:	4a37      	ldr	r2, [pc, #220]	; (80011f8 <task_sensors+0x150>)
 800111c:	fba2 2303 	umull	r2, r3, r2, r3
 8001120:	095b      	lsrs	r3, r3, #5
 8001122:	827b      	strh	r3, [r7, #18]

		temp += 1;
 8001124:	8a7b      	ldrh	r3, [r7, #18]
 8001126:	3301      	adds	r3, #1
 8001128:	827b      	strh	r3, [r7, #18]



		if (status & (1 << 0)) {
 800112a:	7dfb      	ldrb	r3, [r7, #23]
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	2b00      	cmp	r3, #0
 8001132:	d052      	beq.n	80011da <task_sensors+0x132>
			QMC5883L_Read_Data(&X, &Y, &Z);
 8001134:	f107 020c 	add.w	r2, r7, #12
 8001138:	f107 010e 	add.w	r1, r7, #14
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fb61 	bl	8000808 <QMC5883L_Read_Data>

//			BLE_TRANSMIT_X
//			BLE_TRANSMIT_Y
//			BLE_TRANSMIT_Z

			xQueueBleData toBeTransmit_ble_pData = { 0 };
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
			toBeTransmit_ble_pData.info = ble_transmit;
 800114a:	2301      	movs	r3, #1
 800114c:	723b      	strb	r3, [r7, #8]
			toBeTransmit_ble_pData.command = BLE_TRANSMIT_X;// 1111 1111 1010 1010
 800114e:	2305      	movs	r3, #5
 8001150:	727b      	strb	r3, [r7, #9]

			type_casting.uint16[0] = int16_to_u2(X);
 8001152:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f8b6 	bl	80012c8 <int16_to_u2>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	4b26      	ldr	r3, [pc, #152]	; (80011fc <task_sensors+0x154>)
 8001162:	801a      	strh	r2, [r3, #0]

			toBeTransmit_ble_pData.valueReg1 = type_casting.uint8[1];//((uint8_t*) &X)[0]; // MSB // 1111 1111
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <task_sensors+0x154>)
 8001166:	785b      	ldrb	r3, [r3, #1]
 8001168:	72bb      	strb	r3, [r7, #10]
			toBeTransmit_ble_pData.valueReg2 = type_casting.uint8[0];//((uint8_t*) &X)[1]; // LSB 1010 1010
 800116a:	4b24      	ldr	r3, [pc, #144]	; (80011fc <task_sensors+0x154>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	72fb      	strb	r3, [r7, #11]
			rt_enqueue_ISR(rt_queue_ble, &toBeTransmit_ble_pData);
 8001170:	f107 0308 	add.w	r3, r7, #8
 8001174:	4619      	mov	r1, r3
 8001176:	2000      	movs	r0, #0
 8001178:	f7ff fcf8 	bl	8000b6c <rt_enqueue_ISR>

			toBeTransmit_ble_pData.command = BLE_TRANSMIT_Y;
 800117c:	2306      	movs	r3, #6
 800117e:	727b      	strb	r3, [r7, #9]
			type_casting.uint16[0] = int16_to_u2(Y);
 8001180:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001184:	4618      	mov	r0, r3
 8001186:	f000 f89f 	bl	80012c8 <int16_to_u2>
 800118a:	4603      	mov	r3, r0
 800118c:	461a      	mov	r2, r3
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <task_sensors+0x154>)
 8001190:	801a      	strh	r2, [r3, #0]
			toBeTransmit_ble_pData.valueReg1 = type_casting.uint8[1];
 8001192:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <task_sensors+0x154>)
 8001194:	785b      	ldrb	r3, [r3, #1]
 8001196:	72bb      	strb	r3, [r7, #10]
			toBeTransmit_ble_pData.valueReg2 = type_casting.uint8[0];
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <task_sensors+0x154>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	72fb      	strb	r3, [r7, #11]
			rt_enqueue_ISR(rt_queue_ble, &toBeTransmit_ble_pData);
 800119e:	f107 0308 	add.w	r3, r7, #8
 80011a2:	4619      	mov	r1, r3
 80011a4:	2000      	movs	r0, #0
 80011a6:	f7ff fce1 	bl	8000b6c <rt_enqueue_ISR>
//			type_casting
//			type_casting.uint16[0] = X;

			//TODO: o tutaj skonczylem użyj unii, sprawdz debuggerem czy bd dzialac

			toBeTransmit_ble_pData.command = BLE_TRANSMIT_Z;
 80011aa:	2307      	movs	r3, #7
 80011ac:	727b      	strb	r3, [r7, #9]
			type_casting.uint16[0] = int16_to_u2(Z);
 80011ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f888 	bl	80012c8 <int16_to_u2>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <task_sensors+0x154>)
 80011be:	801a      	strh	r2, [r3, #0]
			toBeTransmit_ble_pData.valueReg1 = type_casting.uint8[1];
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <task_sensors+0x154>)
 80011c2:	785b      	ldrb	r3, [r3, #1]
 80011c4:	72bb      	strb	r3, [r7, #10]
			toBeTransmit_ble_pData.valueReg2 = type_casting.uint8[0];
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <task_sensors+0x154>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	72fb      	strb	r3, [r7, #11]
			rt_enqueue_ISR(rt_queue_ble, &toBeTransmit_ble_pData);
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	4619      	mov	r1, r3
 80011d2:	2000      	movs	r0, #0
 80011d4:	f7ff fcca 	bl	8000b6c <rt_enqueue_ISR>
 80011d8:	e005      	b.n	80011e6 <task_sensors+0x13e>
		} else {
			X = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	823b      	strh	r3, [r7, #16]
			Y = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	81fb      	strh	r3, [r7, #14]
			Z = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	81bb      	strh	r3, [r7, #12]
		}

		taskYIELD();
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <task_sensors+0x158>)
 80011e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	f3bf 8f4f 	dsb	sy
 80011f2:	f3bf 8f6f 	isb	sy
	for (;;) {
 80011f6:	e76c      	b.n	80010d2 <task_sensors+0x2a>
 80011f8:	51eb851f 	.word	0x51eb851f
 80011fc:	20003580 	.word	0x20003580
 8001200:	e000ed04 	.word	0xe000ed04

08001204 <task_state_machine>:
#include "runtime.h"
#include "state_machine.h"
#include "h_bridge.h"
#include "bluetooth_le.h"

void task_state_machine(void *pvParameters) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	uint32_t evgroup = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
	bool tasks_disabled = false;
 8001210:	2300      	movs	r3, #0
 8001212:	72fb      	strb	r3, [r7, #11]
//	xQueueBleData receivedBleData = { 0 };

	for (;;) {

		evgroup = rt_evbitwait_any(rt_evgroup_state_machine);
 8001214:	2001      	movs	r0, #1
 8001216:	f7ff fc27 	bl	8000a68 <rt_evbitwait_any>
 800121a:	60f8      	str	r0, [r7, #12]

		if (evgroup & (1 << evgroup_state_m_do_nothing)) {
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d007      	beq.n	8001236 <task_state_machine+0x32>

			h_bridge_coast();
 8001226:	f7ff fa9b 	bl	8000760 <h_bridge_coast>
			h_bridge_set_left_duty(0);
 800122a:	2000      	movs	r0, #0
 800122c:	f7ff fa04 	bl	8000638 <h_bridge_set_left_duty>
			h_bridge_set_right_duty(0);
 8001230:	2000      	movs	r0, #0
 8001232:	f7ff fa27 	bl	8000684 <h_bridge_set_right_duty>
		}
		if (evgroup & (1 << evgroup_state_m_auto_manual)) {
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0e9      	beq.n	8001214 <task_state_machine+0x10>
			if (tasks_disabled) {
 8001240:	7afb      	ldrb	r3, [r7, #11]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00f      	beq.n	8001266 <task_state_machine+0x62>
				vTaskResume(rt_tasks[rt_task_eyes]);
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <task_state_machine+0x84>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	4618      	mov	r0, r3
 800124c:	f008 f92c 	bl	80094a8 <vTaskResume>
				vTaskResume(rt_tasks[rt_task_memory]);
 8001250:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <task_state_machine+0x84>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	4618      	mov	r0, r3
 8001256:	f008 f927 	bl	80094a8 <vTaskResume>
				vTaskResume(rt_tasks[rt_task_sensors]);
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <task_state_machine+0x84>)
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	4618      	mov	r0, r3
 8001260:	f008 f922 	bl	80094a8 <vTaskResume>
 8001264:	e7d6      	b.n	8001214 <task_state_machine+0x10>
			} else {
				vTaskSuspend(rt_tasks[rt_task_eyes]);
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <task_state_machine+0x84>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4618      	mov	r0, r3
 800126c:	f008 f86e 	bl	800934c <vTaskSuspend>
				vTaskSuspend(rt_tasks[rt_task_memory]);
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <task_state_machine+0x84>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	4618      	mov	r0, r3
 8001276:	f008 f869 	bl	800934c <vTaskSuspend>
				vTaskSuspend(rt_tasks[rt_task_sensors]);
 800127a:	4b03      	ldr	r3, [pc, #12]	; (8001288 <task_state_machine+0x84>)
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	4618      	mov	r0, r3
 8001280:	f008 f864 	bl	800934c <vTaskSuspend>
		evgroup = rt_evbitwait_any(rt_evgroup_state_machine);
 8001284:	e7c6      	b.n	8001214 <task_state_machine+0x10>
 8001286:	bf00      	nop
 8001288:	2000353c 	.word	0x2000353c

0800128c <u2_to_decimal>:

#include "utility.h"
#include <math.h>
#include "stdlib.h"

int u2_to_decimal(uint8_t u2) {
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]

	char value = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	73fb      	strb	r3, [r7, #15]

	if (u2 & (1 << 7)) {
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	da0a      	bge.n	80012b8 <u2_to_decimal+0x2c>

		value = u2;
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	73fb      	strb	r3, [r7, #15]
		value = ~value;
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	73fb      	strb	r3, [r7, #15]
		value += 1;
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	3301      	adds	r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]
		return (int) -value;
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	425b      	negs	r3, r3
 80012b6:	e002      	b.n	80012be <u2_to_decimal+0x32>

	} else {
		value = u2;
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	73fb      	strb	r3, [r7, #15]
		return (int) value;
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 80012be:	4618      	mov	r0, r3
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <int16_to_u2>:

uint16_t int16_to_u2(int16_t decimal) {
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]
	uint16_t u2 = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	81fb      	strh	r3, [r7, #14]

	if (decimal >= 0) {
 80012d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	db02      	blt.n	80012e4 <int16_to_u2+0x1c>
		u2 = (uint16_t) decimal;
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	81fb      	strh	r3, [r7, #14]
 80012e2:	e00b      	b.n	80012fc <int16_to_u2+0x34>
	} else {
		u2 = (uint16_t) abs(decimal);
 80012e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	bfb8      	it	lt
 80012ec:	425b      	neglt	r3, r3
 80012ee:	81fb      	strh	r3, [r7, #14]
		u2 = (uint16_t) ~u2;
 80012f0:	89fb      	ldrh	r3, [r7, #14]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	81fb      	strh	r3, [r7, #14]
		u2 += 1;
 80012f6:	89fb      	ldrh	r3, [r7, #14]
 80012f8:	3301      	adds	r3, #1
 80012fa:	81fb      	strh	r3, [r7, #14]
	}

	return u2;
 80012fc:	89fb      	ldrh	r3, [r7, #14]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8001318:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <MX_ADC_Init+0xa8>)
 800131a:	4a26      	ldr	r2, [pc, #152]	; (80013b4 <MX_ADC_Init+0xac>)
 800131c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800131e:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <MX_ADC_Init+0xa8>)
 8001320:	2200      	movs	r2, #0
 8001322:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001324:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <MX_ADC_Init+0xa8>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <MX_ADC_Init+0xa8>)
 800132c:	2200      	movs	r2, #0
 800132e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001330:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <MX_ADC_Init+0xa8>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001336:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <MX_ADC_Init+0xa8>)
 8001338:	2200      	movs	r2, #0
 800133a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 800133c:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <MX_ADC_Init+0xa8>)
 800133e:	2200      	movs	r2, #0
 8001340:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <MX_ADC_Init+0xa8>)
 8001344:	2200      	movs	r2, #0
 8001346:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <MX_ADC_Init+0xa8>)
 800134a:	2200      	movs	r2, #0
 800134c:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <MX_ADC_Init+0xa8>)
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8001356:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <MX_ADC_Init+0xa8>)
 8001358:	2201      	movs	r2, #1
 800135a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <MX_ADC_Init+0xa8>)
 800135e:	2200      	movs	r2, #0
 8001360:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <MX_ADC_Init+0xa8>)
 8001366:	2210      	movs	r2, #16
 8001368:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_ADC_Init+0xa8>)
 800136c:	2200      	movs	r2, #0
 800136e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <MX_ADC_Init+0xa8>)
 8001372:	2200      	movs	r2, #0
 8001374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001378:	480d      	ldr	r0, [pc, #52]	; (80013b0 <MX_ADC_Init+0xa8>)
 800137a:	f001 f81d 	bl	80023b8 <HAL_ADC_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8001384:	f000 fb02 	bl	800198c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001388:	2301      	movs	r3, #1
 800138a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800138c:	2301      	movs	r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	4619      	mov	r1, r3
 8001398:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_ADC_Init+0xa8>)
 800139a:	f001 fb5f 	bl	8002a5c <HAL_ADC_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 80013a4:	f000 faf2 	bl	800198c <Error_Handler>
  }

}
 80013a8:	bf00      	nop
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20003584 	.word	0x20003584
 80013b4:	40012400 	.word	0x40012400

080013b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08c      	sub	sp, #48	; 0x30
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a2d      	ldr	r2, [pc, #180]	; (800148c <HAL_ADC_MspInit+0xd4>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d154      	bne.n	8001484 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013da:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <HAL_ADC_MspInit+0xd8>)
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	4a2c      	ldr	r2, [pc, #176]	; (8001490 <HAL_ADC_MspInit+0xd8>)
 80013e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013e4:	6213      	str	r3, [r2, #32]
 80013e6:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <HAL_ADC_MspInit+0xd8>)
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ee:	61bb      	str	r3, [r7, #24]
 80013f0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f2:	4b27      	ldr	r3, [pc, #156]	; (8001490 <HAL_ADC_MspInit+0xd8>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	4a26      	ldr	r2, [pc, #152]	; (8001490 <HAL_ADC_MspInit+0xd8>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	61d3      	str	r3, [r2, #28]
 80013fe:	4b24      	ldr	r3, [pc, #144]	; (8001490 <HAL_ADC_MspInit+0xd8>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	4b21      	ldr	r3, [pc, #132]	; (8001490 <HAL_ADC_MspInit+0xd8>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	4a20      	ldr	r2, [pc, #128]	; (8001490 <HAL_ADC_MspInit+0xd8>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	61d3      	str	r3, [r2, #28]
 8001416:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <HAL_ADC_MspInit+0xd8>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <HAL_ADC_MspInit+0xd8>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	4a1a      	ldr	r2, [pc, #104]	; (8001490 <HAL_ADC_MspInit+0xd8>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	61d3      	str	r3, [r2, #28]
 800142e:	4b18      	ldr	r3, [pc, #96]	; (8001490 <HAL_ADC_MspInit+0xd8>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA7     ------> ADC_IN7
    PB15     ------> ADC_IN21 
    */
    GPIO_InitStruct.Pin = ADC_BATTERY_VOLTAGE_Pin;
 800143a:	2301      	movs	r3, #1
 800143c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800143e:	2303      	movs	r3, #3
 8001440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_BATTERY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4619      	mov	r1, r3
 800144c:	4811      	ldr	r0, [pc, #68]	; (8001494 <HAL_ADC_MspInit+0xdc>)
 800144e:	f002 fa09 	bl	8003864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_PHOTO_BACK_Pin|ADC_OPTO_LEFT_Pin|ADC_PHOTO_FRONT_Pin;
 8001452:	2386      	movs	r3, #134	; 0x86
 8001454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001456:	2303      	movs	r3, #3
 8001458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	4619      	mov	r1, r3
 8001464:	480c      	ldr	r0, [pc, #48]	; (8001498 <HAL_ADC_MspInit+0xe0>)
 8001466:	f002 f9fd 	bl	8003864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_OPTO_RIGHT_Pin;
 800146a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800146e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001470:	2303      	movs	r3, #3
 8001472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_OPTO_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	4619      	mov	r1, r3
 800147e:	4807      	ldr	r0, [pc, #28]	; (800149c <HAL_ADC_MspInit+0xe4>)
 8001480:	f002 f9f0 	bl	8003864 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001484:	bf00      	nop
 8001486:	3730      	adds	r7, #48	; 0x30
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40012400 	.word	0x40012400
 8001490:	40023800 	.word	0x40023800
 8001494:	40020800 	.word	0x40020800
 8001498:	40020000 	.word	0x40020000
 800149c:	40020400 	.word	0x40020400

080014a0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <MX_DMA_Init+0x48>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	4a0f      	ldr	r2, [pc, #60]	; (80014e8 <MX_DMA_Init+0x48>)
 80014ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014b0:	61d3      	str	r3, [r2, #28]
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <MX_DMA_Init+0x48>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2105      	movs	r1, #5
 80014c2:	200c      	movs	r0, #12
 80014c4:	f001 ff00 	bl	80032c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014c8:	200c      	movs	r0, #12
 80014ca:	f001 ff29 	bl	8003320 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2105      	movs	r1, #5
 80014d2:	200d      	movs	r0, #13
 80014d4:	f001 fef8 	bl	80032c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80014d8:	200d      	movs	r0, #13
 80014da:	f001 ff21 	bl	8003320 <HAL_NVIC_EnableIRQ>

}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800

080014ec <vApplicationIdleHook>:
void vApplicationMallocFailedHook(void);
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001534:	4a05      	ldr	r2, [pc, #20]	; (800154c <MX_FREERTOS_Init+0x1c>)
 8001536:	2100      	movs	r1, #0
 8001538:	4805      	ldr	r0, [pc, #20]	; (8001550 <MX_FREERTOS_Init+0x20>)
 800153a:	f006 fc6f 	bl	8007e1c <osThreadNew>
 800153e:	4602      	mov	r2, r0
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <MX_FREERTOS_Init+0x24>)
 8001542:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  rt_init();
 8001544:	f7ff f9e6 	bl	8000914 <rt_init>
  /* USER CODE END RTOS_THREADS */

}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	0800b3c4 	.word	0x0800b3c4
 8001550:	08001559 	.word	0x08001559
 8001554:	200035d8 	.word	0x200035d8

08001558 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001560:	2001      	movs	r0, #1
 8001562:	f006 fd05 	bl	8007f70 <osDelay>
 8001566:	e7fb      	b.n	8001560 <StartDefaultTask+0x8>

08001568 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157e:	4b78      	ldr	r3, [pc, #480]	; (8001760 <MX_GPIO_Init+0x1f8>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	4a77      	ldr	r2, [pc, #476]	; (8001760 <MX_GPIO_Init+0x1f8>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	61d3      	str	r3, [r2, #28]
 800158a:	4b75      	ldr	r3, [pc, #468]	; (8001760 <MX_GPIO_Init+0x1f8>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001596:	4b72      	ldr	r3, [pc, #456]	; (8001760 <MX_GPIO_Init+0x1f8>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	4a71      	ldr	r2, [pc, #452]	; (8001760 <MX_GPIO_Init+0x1f8>)
 800159c:	f043 0320 	orr.w	r3, r3, #32
 80015a0:	61d3      	str	r3, [r2, #28]
 80015a2:	4b6f      	ldr	r3, [pc, #444]	; (8001760 <MX_GPIO_Init+0x1f8>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	f003 0320 	and.w	r3, r3, #32
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	4b6c      	ldr	r3, [pc, #432]	; (8001760 <MX_GPIO_Init+0x1f8>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	4a6b      	ldr	r2, [pc, #428]	; (8001760 <MX_GPIO_Init+0x1f8>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	61d3      	str	r3, [r2, #28]
 80015ba:	4b69      	ldr	r3, [pc, #420]	; (8001760 <MX_GPIO_Init+0x1f8>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c6:	4b66      	ldr	r3, [pc, #408]	; (8001760 <MX_GPIO_Init+0x1f8>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	4a65      	ldr	r2, [pc, #404]	; (8001760 <MX_GPIO_Init+0x1f8>)
 80015cc:	f043 0302 	orr.w	r3, r3, #2
 80015d0:	61d3      	str	r3, [r2, #28]
 80015d2:	4b63      	ldr	r3, [pc, #396]	; (8001760 <MX_GPIO_Init+0x1f8>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015de:	4b60      	ldr	r3, [pc, #384]	; (8001760 <MX_GPIO_Init+0x1f8>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	4a5f      	ldr	r2, [pc, #380]	; (8001760 <MX_GPIO_Init+0x1f8>)
 80015e4:	f043 0308 	orr.w	r3, r3, #8
 80015e8:	61d3      	str	r3, [r2, #28]
 80015ea:	4b5d      	ldr	r3, [pc, #372]	; (8001760 <MX_GPIO_Init+0x1f8>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_INa_ENGINE_LEFT_Pin|OUT_INb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_TEST_Pin 
 80015f6:	2200      	movs	r2, #0
 80015f8:	f640 616e 	movw	r1, #3694	; 0xe6e
 80015fc:	4859      	ldr	r0, [pc, #356]	; (8001764 <MX_GPIO_Init+0x1fc>)
 80015fe:	f002 fba3 	bl	8003d48 <HAL_GPIO_WritePin>
                          |OUT_ULTRASOUND_TRIG_Pin|OUT_INb_ENGINE_RIGHT_Pin|OUT_LED1_Pin|OUT_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 8001602:	2200      	movs	r2, #0
 8001604:	f248 7108 	movw	r1, #34568	; 0x8708
 8001608:	4857      	ldr	r0, [pc, #348]	; (8001768 <MX_GPIO_Init+0x200>)
 800160a:	f002 fb9d 	bl	8003d48 <HAL_GPIO_WritePin>
                          |OUT_LED0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_BLE_EN_GPIO_Port, OUT_BLE_EN_Pin, GPIO_PIN_SET);
 800160e:	2201      	movs	r2, #1
 8001610:	2110      	movs	r1, #16
 8001612:	4854      	ldr	r0, [pc, #336]	; (8001764 <MX_GPIO_Init+0x1fc>)
 8001614:	f002 fb98 	bl	8003d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12;
 8001618:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800161c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800161e:	2303      	movs	r3, #3
 8001620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	484d      	ldr	r0, [pc, #308]	; (8001764 <MX_GPIO_Init+0x1fc>)
 800162e:	f002 f919 	bl	8003864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = OUT_INa_ENGINE_LEFT_Pin|OUT_INb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_EN_Pin 
 8001632:	f640 637e 	movw	r3, #3710	; 0xe7e
 8001636:	617b      	str	r3, [r7, #20]
                          |OUT_BLE_TEST_Pin|OUT_ULTRASOUND_TRIG_Pin|OUT_INb_ENGINE_RIGHT_Pin|OUT_LED1_Pin 
                          |OUT_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001638:	2301      	movs	r3, #1
 800163a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	4846      	ldr	r0, [pc, #280]	; (8001764 <MX_GPIO_Init+0x1fc>)
 800164c:	f002 f90a 	bl	8003864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 8001650:	f248 7308 	movw	r3, #34568	; 0x8708
 8001654:	617b      	str	r3, [r7, #20]
                          |OUT_LED0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001656:	2301      	movs	r3, #1
 8001658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	483f      	ldr	r0, [pc, #252]	; (8001768 <MX_GPIO_Init+0x200>)
 800166a:	f002 f8fb 	bl	8003864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 800166e:	f241 0370 	movw	r3, #4208	; 0x1070
 8001672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001674:	2303      	movs	r3, #3
 8001676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	4839      	ldr	r0, [pc, #228]	; (8001768 <MX_GPIO_Init+0x200>)
 8001684:	f002 f8ee 	bl	8003864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_BLE_Pin;
 8001688:	2301      	movs	r3, #1
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800168c:	4b37      	ldr	r3, [pc, #220]	; (800176c <MX_GPIO_Init+0x204>)
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_BLE_GPIO_Port, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	4835      	ldr	r0, [pc, #212]	; (8001770 <MX_GPIO_Init+0x208>)
 800169c:	f002 f8e2 	bl	8003864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_ULTRASOUND_ECHO_Pin;
 80016a0:	2302      	movs	r3, #2
 80016a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80016a4:	4b33      	ldr	r3, [pc, #204]	; (8001774 <MX_GPIO_Init+0x20c>)
 80016a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_ULTRASOUND_ECHO_GPIO_Port, &GPIO_InitStruct);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4619      	mov	r1, r3
 80016b2:	482f      	ldr	r0, [pc, #188]	; (8001770 <MX_GPIO_Init+0x208>)
 80016b4:	f002 f8d6 	bl	8003864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB3 PB4 
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 80016b8:	f242 333c 	movw	r3, #9020	; 0x233c
 80016bc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016be:	2303      	movs	r3, #3
 80016c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4619      	mov	r1, r3
 80016cc:	4828      	ldr	r0, [pc, #160]	; (8001770 <MX_GPIO_Init+0x208>)
 80016ce:	f002 f8c9 	bl	8003864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_LEFT_Pin;
 80016d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d8:	2300      	movs	r3, #0
 80016da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_LEFT_GPIO_Port, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	4822      	ldr	r0, [pc, #136]	; (8001770 <MX_GPIO_Init+0x208>)
 80016e8:	f002 f8bc 	bl	8003864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_HALL_FRONT_Pin;
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN_HALL_FRONT_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	4819      	ldr	r0, [pc, #100]	; (8001764 <MX_GPIO_Init+0x1fc>)
 8001700:	f002 f8b0 	bl	8003864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_RIGHT_Pin;
 8001704:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4619      	mov	r1, r3
 8001718:	4813      	ldr	r0, [pc, #76]	; (8001768 <MX_GPIO_Init+0x200>)
 800171a:	f002 f8a3 	bl	8003864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800171e:	2304      	movs	r3, #4
 8001720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001722:	2303      	movs	r3, #3
 8001724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	4811      	ldr	r0, [pc, #68]	; (8001778 <MX_GPIO_Init+0x210>)
 8001732:	f002 f897 	bl	8003864 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2105      	movs	r1, #5
 800173a:	2006      	movs	r0, #6
 800173c:	f001 fdc4 	bl	80032c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001740:	2006      	movs	r0, #6
 8001742:	f001 fded 	bl	8003320 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2105      	movs	r1, #5
 800174a:	2007      	movs	r0, #7
 800174c:	f001 fdbc 	bl	80032c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001750:	2007      	movs	r0, #7
 8001752:	f001 fde5 	bl	8003320 <HAL_NVIC_EnableIRQ>

}
 8001756:	bf00      	nop
 8001758:	3728      	adds	r7, #40	; 0x28
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800
 8001764:	40020800 	.word	0x40020800
 8001768:	40020000 	.word	0x40020000
 800176c:	10110000 	.word	0x10110000
 8001770:	40020400 	.word	0x40020400
 8001774:	10310000 	.word	0x10310000
 8001778:	40020c00 	.word	0x40020c00

0800177c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <MX_I2C1_Init+0x50>)
 8001782:	4a13      	ldr	r2, [pc, #76]	; (80017d0 <MX_I2C1_Init+0x54>)
 8001784:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <MX_I2C1_Init+0x50>)
 8001788:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <MX_I2C1_Init+0x58>)
 800178a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <MX_I2C1_Init+0x50>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <MX_I2C1_Init+0x50>)
 8001794:	2200      	movs	r2, #0
 8001796:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <MX_I2C1_Init+0x50>)
 800179a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800179e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a0:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <MX_I2C1_Init+0x50>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_I2C1_Init+0x50>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <MX_I2C1_Init+0x50>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <MX_I2C1_Init+0x50>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017b8:	4804      	ldr	r0, [pc, #16]	; (80017cc <MX_I2C1_Init+0x50>)
 80017ba:	f002 fb0f 	bl	8003ddc <HAL_I2C_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017c4:	f000 f8e2 	bl	800198c <Error_Handler>
  }

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	200035dc 	.word	0x200035dc
 80017d0:	40005400 	.word	0x40005400
 80017d4:	000186a0 	.word	0x000186a0

080017d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	; 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a17      	ldr	r2, [pc, #92]	; (8001854 <HAL_I2C_MspInit+0x7c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d127      	bne.n	800184a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <HAL_I2C_MspInit+0x80>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4a16      	ldr	r2, [pc, #88]	; (8001858 <HAL_I2C_MspInit+0x80>)
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	61d3      	str	r3, [r2, #28]
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <HAL_I2C_MspInit+0x80>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001812:	23c0      	movs	r3, #192	; 0xc0
 8001814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001816:	2312      	movs	r3, #18
 8001818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800181a:	2301      	movs	r3, #1
 800181c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001822:	2304      	movs	r3, #4
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	480b      	ldr	r0, [pc, #44]	; (800185c <HAL_I2C_MspInit+0x84>)
 800182e:	f002 f819 	bl	8003864 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_I2C_MspInit+0x80>)
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	4a08      	ldr	r2, [pc, #32]	; (8001858 <HAL_I2C_MspInit+0x80>)
 8001838:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800183c:	6253      	str	r3, [r2, #36]	; 0x24
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_I2C_MspInit+0x80>)
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	; 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40005400 	.word	0x40005400
 8001858:	40023800 	.word	0x40023800
 800185c:	40020400 	.word	0x40020400

08001860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001864:	f000 fd73 	bl	800234e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001868:	f000 f820 	bl	80018ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800186c:	f7ff fe7c 	bl	8001568 <MX_GPIO_Init>
  MX_DMA_Init();
 8001870:	f7ff fe16 	bl	80014a0 <MX_DMA_Init>
  MX_ADC_Init();
 8001874:	f7ff fd48 	bl	8001308 <MX_ADC_Init>
  MX_I2C1_Init();
 8001878:	f7ff ff80 	bl	800177c <MX_I2C1_Init>
  MX_TIM2_Init();
 800187c:	f000 f9a2 	bl	8001bc4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001880:	f000 fa14 	bl	8001cac <MX_TIM3_Init>
  MX_TIM9_Init();
 8001884:	f000 fad4 	bl	8001e30 <MX_TIM9_Init>
  MX_USART3_UART_Init();
 8001888:	f000 fc78 	bl	800217c <MX_USART3_UART_Init>
  MX_TIM4_Init();
 800188c:	f000 fa82 	bl	8001d94 <MX_TIM4_Init>
  MX_TIM10_Init();
 8001890:	f000 fb42 	bl	8001f18 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
	device_init();
 8001894:	f7ff f829 	bl	80008ea <device_init>
	h_bridge_init();
 8001898:	f7fe feb6 	bl	8000608 <h_bridge_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800189c:	f006 fa58 	bl	8007d50 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 80018a0:	f7ff fe46 	bl	8001530 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80018a4:	f006 fa86 	bl	8007db4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80018a8:	e7fe      	b.n	80018a8 <main+0x48>
	...

080018ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b092      	sub	sp, #72	; 0x48
 80018b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	2234      	movs	r2, #52	; 0x34
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f009 fbb1 	bl	800b022 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c0:	463b      	mov	r3, r7
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018ce:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <SystemClock_Config+0x9c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80018d6:	4a1c      	ldr	r2, [pc, #112]	; (8001948 <SystemClock_Config+0x9c>)
 80018d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018dc:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80018de:	2303      	movs	r3, #3
 80018e0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018e2:	2301      	movs	r3, #1
 80018e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018e6:	2301      	movs	r3, #1
 80018e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018ea:	2310      	movs	r3, #16
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ee:	2302      	movs	r3, #2
 80018f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80018f8:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80018fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80018fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001902:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	4618      	mov	r0, r3
 800190a:	f003 fa63 	bl	8004dd4 <HAL_RCC_OscConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001914:	f000 f83a 	bl	800198c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001918:	230f      	movs	r3, #15
 800191a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800191c:	2303      	movs	r3, #3
 800191e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001928:	2300      	movs	r3, #0
 800192a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800192c:	463b      	mov	r3, r7
 800192e:	2101      	movs	r1, #1
 8001930:	4618      	mov	r0, r3
 8001932:	f003 fecd 	bl	80056d0 <HAL_RCC_ClockConfig>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800193c:	f000 f826 	bl	800198c <Error_Handler>
  }
}
 8001940:	bf00      	nop
 8001942:	3748      	adds	r7, #72	; 0x48
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40007000 	.word	0x40007000

0800194c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a09      	ldr	r2, [pc, #36]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d101      	bne.n	8001962 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800195e:	f000 fd0f 	bl	8002380 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */

  // also the code for others timers if overflow :)

  // when tim10
  if(htim->Instance == TIM10) {
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a07      	ldr	r2, [pc, #28]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d104      	bne.n	8001976 <HAL_TIM_PeriodElapsedCallback+0x2a>
	  // clear pin ultrasound trigger
	  HAL_GPIO_WritePin(OUT_ULTRASOUND_TRIG_GPIO_Port, OUT_ULTRASOUND_TRIG_Pin, GPIO_PIN_RESET);
 800196c:	2200      	movs	r2, #0
 800196e:	2140      	movs	r1, #64	; 0x40
 8001970:	4805      	ldr	r0, [pc, #20]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001972:	f002 f9e9 	bl	8003d48 <HAL_GPIO_WritePin>
	  // and this is it
  }

  /* USER CODE END Callback 1 */
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40000c00 	.word	0x40000c00
 8001984:	40010c00 	.word	0x40010c00
 8001988:	40020800 	.word	0x40020800

0800198c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80019b2:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <HAL_MspInit+0x64>)
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	4a16      	ldr	r2, [pc, #88]	; (8001a10 <HAL_MspInit+0x64>)
 80019b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019bc:	6253      	str	r3, [r2, #36]	; 0x24
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <HAL_MspInit+0x64>)
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <HAL_MspInit+0x64>)
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <HAL_MspInit+0x64>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6213      	str	r3, [r2, #32]
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <HAL_MspInit+0x64>)
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <HAL_MspInit+0x64>)
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <HAL_MspInit+0x64>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ec:	6253      	str	r3, [r2, #36]	; 0x24
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_MspInit+0x64>)
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	210f      	movs	r1, #15
 80019fe:	f06f 0001 	mvn.w	r0, #1
 8001a02:	f001 fc61 	bl	80032c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800

08001a14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08c      	sub	sp, #48	; 0x30
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8001a24:	2200      	movs	r2, #0
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	202e      	movs	r0, #46	; 0x2e
 8001a2a:	f001 fc4d 	bl	80032c8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8001a2e:	202e      	movs	r0, #46	; 0x2e
 8001a30:	f001 fc76 	bl	8003320 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001a34:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <HAL_InitTick+0x9c>)
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	4a1d      	ldr	r2, [pc, #116]	; (8001ab0 <HAL_InitTick+0x9c>)
 8001a3a:	f043 0308 	orr.w	r3, r3, #8
 8001a3e:	6253      	str	r3, [r2, #36]	; 0x24
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <HAL_InitTick+0x9c>)
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a4c:	f107 0210 	add.w	r2, r7, #16
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4611      	mov	r1, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f004 f882 	bl	8005b60 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a5c:	f004 f858 	bl	8005b10 <HAL_RCC_GetPCLK1Freq>
 8001a60:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a64:	4a13      	ldr	r2, [pc, #76]	; (8001ab4 <HAL_InitTick+0xa0>)
 8001a66:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6a:	0c9b      	lsrs	r3, r3, #18
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <HAL_InitTick+0xa4>)
 8001a72:	4a12      	ldr	r2, [pc, #72]	; (8001abc <HAL_InitTick+0xa8>)
 8001a74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <HAL_InitTick+0xa4>)
 8001a78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a7c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001a7e:	4a0e      	ldr	r2, [pc, #56]	; (8001ab8 <HAL_InitTick+0xa4>)
 8001a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a82:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <HAL_InitTick+0xa4>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_InitTick+0xa4>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8001a90:	4809      	ldr	r0, [pc, #36]	; (8001ab8 <HAL_InitTick+0xa4>)
 8001a92:	f004 f907 	bl	8005ca4 <HAL_TIM_Base_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d104      	bne.n	8001aa6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8001a9c:	4806      	ldr	r0, [pc, #24]	; (8001ab8 <HAL_InitTick+0xa4>)
 8001a9e:	f004 fa75 	bl	8005f8c <HAL_TIM_Base_Start_IT>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	e000      	b.n	8001aa8 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3730      	adds	r7, #48	; 0x30
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	431bde83 	.word	0x431bde83
 8001ab8:	20003630 	.word	0x20003630
 8001abc:	40000c00 	.word	0x40000c00

08001ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <HardFault_Handler+0x4>

08001ad2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad6:	e7fe      	b.n	8001ad6 <MemManage_Handler+0x4>

08001ad8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <BusFault_Handler+0x4>

08001ade <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae2:	e7fe      	b.n	8001ae2 <UsageFault_Handler+0x4>

08001ae4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001af4:	2001      	movs	r0, #1
 8001af6:	f002 f959 	bl	8003dac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}

08001afe <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001b02:	2002      	movs	r0, #2
 8001b04:	f002 f952 	bl	8003dac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <DMA1_Channel2_IRQHandler+0x10>)
 8001b12:	f001 fdc9 	bl	80036a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	2000381c 	.word	0x2000381c

08001b20 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <DMA1_Channel3_IRQHandler+0x10>)
 8001b26:	f001 fdbf 	bl	80036a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20003798 	.word	0x20003798

08001b34 <TIM10_IRQHandler>:

/**
  * @brief This function handles TIM10 global interrupt.
  */
void TIM10_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM10_IRQn 0 */

  /* USER CODE END TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <TIM10_IRQHandler+0x10>)
 8001b3a:	f004 fbd3 	bl	80062e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM10_IRQn 1 */

  /* USER CODE END TIM10_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200036a8 	.word	0x200036a8

08001b48 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <TIM5_IRQHandler+0x10>)
 8001b4e:	f004 fbc9 	bl	80062e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20003630 	.word	0x20003630

08001b5c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <SystemInit+0x5c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a14      	ldr	r2, [pc, #80]	; (8001bb8 <SystemInit+0x5c>)
 8001b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6a:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <SystemInit+0x5c>)
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	4911      	ldr	r1, [pc, #68]	; (8001bb8 <SystemInit+0x5c>)
 8001b72:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <SystemInit+0x60>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001b78:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <SystemInit+0x5c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <SystemInit+0x5c>)
 8001b7e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001b82:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8001b86:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <SystemInit+0x5c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <SystemInit+0x5c>)
 8001b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b92:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <SystemInit+0x5c>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	4a07      	ldr	r2, [pc, #28]	; (8001bb8 <SystemInit+0x5c>)
 8001b9a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001b9e:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <SystemInit+0x5c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <SystemInit+0x64>)
 8001ba8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bac:	609a      	str	r2, [r3, #8]
#endif
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	88ffc00c 	.word	0x88ffc00c
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bca:	f107 0318 	add.w	r3, r7, #24
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd8:	f107 0310 	add.w	r3, r7, #16
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001be2:	463b      	mov	r3, r7
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8001bee:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <MX_TIM2_Init+0xe4>)
 8001bf0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bf4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bf6:	4b2c      	ldr	r3, [pc, #176]	; (8001ca8 <MX_TIM2_Init+0xe4>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfc:	4b2a      	ldr	r3, [pc, #168]	; (8001ca8 <MX_TIM2_Init+0xe4>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3199;
 8001c02:	4b29      	ldr	r3, [pc, #164]	; (8001ca8 <MX_TIM2_Init+0xe4>)
 8001c04:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001c08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c0a:	4b27      	ldr	r3, [pc, #156]	; (8001ca8 <MX_TIM2_Init+0xe4>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c10:	4b25      	ldr	r3, [pc, #148]	; (8001ca8 <MX_TIM2_Init+0xe4>)
 8001c12:	2280      	movs	r2, #128	; 0x80
 8001c14:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c16:	4824      	ldr	r0, [pc, #144]	; (8001ca8 <MX_TIM2_Init+0xe4>)
 8001c18:	f004 f844 	bl	8005ca4 <HAL_TIM_Base_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001c22:	f7ff feb3 	bl	800198c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c2c:	f107 0318 	add.w	r3, r7, #24
 8001c30:	4619      	mov	r1, r3
 8001c32:	481d      	ldr	r0, [pc, #116]	; (8001ca8 <MX_TIM2_Init+0xe4>)
 8001c34:	f004 fdc2 	bl	80067bc <HAL_TIM_ConfigClockSource>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c3e:	f7ff fea5 	bl	800198c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c42:	4819      	ldr	r0, [pc, #100]	; (8001ca8 <MX_TIM2_Init+0xe4>)
 8001c44:	f004 fa08 	bl	8006058 <HAL_TIM_PWM_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001c4e:	f7ff fe9d 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c5a:	f107 0310 	add.w	r3, r7, #16
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4811      	ldr	r0, [pc, #68]	; (8001ca8 <MX_TIM2_Init+0xe4>)
 8001c62:	f005 fb23 	bl	80072ac <HAL_TIMEx_MasterConfigSynchronization>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001c6c:	f7ff fe8e 	bl	800198c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c70:	2360      	movs	r3, #96	; 0x60
 8001c72:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1599;
 8001c74:	f240 633f 	movw	r3, #1599	; 0x63f
 8001c78:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001c7e:	2304      	movs	r3, #4
 8001c80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c82:	463b      	mov	r3, r7
 8001c84:	2200      	movs	r2, #0
 8001c86:	4619      	mov	r1, r3
 8001c88:	4807      	ldr	r0, [pc, #28]	; (8001ca8 <MX_TIM2_Init+0xe4>)
 8001c8a:	f004 fc07 	bl	800649c <HAL_TIM_PWM_ConfigChannel>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001c94:	f7ff fe7a 	bl	800198c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001c98:	4803      	ldr	r0, [pc, #12]	; (8001ca8 <MX_TIM2_Init+0xe4>)
 8001c9a:	f000 f9eb 	bl	8002074 <HAL_TIM_MspPostInit>

}
 8001c9e:	bf00      	nop
 8001ca0:	3728      	adds	r7, #40	; 0x28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	2000375c 	.word	0x2000375c

08001cac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cb2:	f107 0318 	add.w	r3, r7, #24
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc0:	f107 0310 	add.w	r3, r7, #16
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cca:	463b      	mov	r3, r7
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8001cd6:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <MX_TIM3_Init+0xe0>)
 8001cd8:	4a2d      	ldr	r2, [pc, #180]	; (8001d90 <MX_TIM3_Init+0xe4>)
 8001cda:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cdc:	4b2b      	ldr	r3, [pc, #172]	; (8001d8c <MX_TIM3_Init+0xe0>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce2:	4b2a      	ldr	r3, [pc, #168]	; (8001d8c <MX_TIM3_Init+0xe0>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3200-1;
 8001ce8:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <MX_TIM3_Init+0xe0>)
 8001cea:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001cee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf0:	4b26      	ldr	r3, [pc, #152]	; (8001d8c <MX_TIM3_Init+0xe0>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cf6:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <MX_TIM3_Init+0xe0>)
 8001cf8:	2280      	movs	r2, #128	; 0x80
 8001cfa:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cfc:	4823      	ldr	r0, [pc, #140]	; (8001d8c <MX_TIM3_Init+0xe0>)
 8001cfe:	f003 ffd1 	bl	8005ca4 <HAL_TIM_Base_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001d08:	f7ff fe40 	bl	800198c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d10:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d12:	f107 0318 	add.w	r3, r7, #24
 8001d16:	4619      	mov	r1, r3
 8001d18:	481c      	ldr	r0, [pc, #112]	; (8001d8c <MX_TIM3_Init+0xe0>)
 8001d1a:	f004 fd4f 	bl	80067bc <HAL_TIM_ConfigClockSource>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001d24:	f7ff fe32 	bl	800198c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d28:	4818      	ldr	r0, [pc, #96]	; (8001d8c <MX_TIM3_Init+0xe0>)
 8001d2a:	f004 f995 	bl	8006058 <HAL_TIM_PWM_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001d34:	f7ff fe2a 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d40:	f107 0310 	add.w	r3, r7, #16
 8001d44:	4619      	mov	r1, r3
 8001d46:	4811      	ldr	r0, [pc, #68]	; (8001d8c <MX_TIM3_Init+0xe0>)
 8001d48:	f005 fab0 	bl	80072ac <HAL_TIMEx_MasterConfigSynchronization>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001d52:	f7ff fe1b 	bl	800198c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d56:	2360      	movs	r3, #96	; 0x60
 8001d58:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8001d5a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001d5e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001d64:	2304      	movs	r3, #4
 8001d66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d68:	463b      	mov	r3, r7
 8001d6a:	2208      	movs	r2, #8
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4807      	ldr	r0, [pc, #28]	; (8001d8c <MX_TIM3_Init+0xe0>)
 8001d70:	f004 fb94 	bl	800649c <HAL_TIM_PWM_ConfigChannel>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8001d7a:	f7ff fe07 	bl	800198c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001d7e:	4803      	ldr	r0, [pc, #12]	; (8001d8c <MX_TIM3_Init+0xe0>)
 8001d80:	f000 f978 	bl	8002074 <HAL_TIM_MspPostInit>

}
 8001d84:	bf00      	nop
 8001d86:	3728      	adds	r7, #40	; 0x28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	200036e4 	.word	0x200036e4
 8001d90:	40000400 	.word	0x40000400

08001d94 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d9a:	f107 0308 	add.w	r3, r7, #8
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da8:	463b      	mov	r3, r7
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8001db0:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <MX_TIM4_Init+0x94>)
 8001db2:	4a1e      	ldr	r2, [pc, #120]	; (8001e2c <MX_TIM4_Init+0x98>)
 8001db4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 374;
 8001db6:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <MX_TIM4_Init+0x94>)
 8001db8:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8001dbc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbe:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <MX_TIM4_Init+0x94>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 39999;
 8001dc4:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <MX_TIM4_Init+0x94>)
 8001dc6:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001dca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dcc:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <MX_TIM4_Init+0x94>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd2:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <MX_TIM4_Init+0x94>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001dd8:	4813      	ldr	r0, [pc, #76]	; (8001e28 <MX_TIM4_Init+0x94>)
 8001dda:	f003 ff63 	bl	8005ca4 <HAL_TIM_Base_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001de4:	f7ff fdd2 	bl	800198c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001dee:	f107 0308 	add.w	r3, r7, #8
 8001df2:	4619      	mov	r1, r3
 8001df4:	480c      	ldr	r0, [pc, #48]	; (8001e28 <MX_TIM4_Init+0x94>)
 8001df6:	f004 fce1 	bl	80067bc <HAL_TIM_ConfigClockSource>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001e00:	f7ff fdc4 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e04:	2300      	movs	r3, #0
 8001e06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e0c:	463b      	mov	r3, r7
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4805      	ldr	r0, [pc, #20]	; (8001e28 <MX_TIM4_Init+0x94>)
 8001e12:	f005 fa4b 	bl	80072ac <HAL_TIMEx_MasterConfigSynchronization>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001e1c:	f7ff fdb6 	bl	800198c <Error_Handler>
  }

}
 8001e20:	bf00      	nop
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	2000366c 	.word	0x2000366c
 8001e2c:	40000800 	.word	0x40000800

08001e30 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	; 0x28
 8001e34:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e36:	f107 0318 	add.w	r3, r7, #24
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e44:	f107 0310 	add.w	r3, r7, #16
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e4e:	463b      	mov	r3, r7
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8001e5a:	4b2d      	ldr	r3, [pc, #180]	; (8001f10 <MX_TIM9_Init+0xe0>)
 8001e5c:	4a2d      	ldr	r2, [pc, #180]	; (8001f14 <MX_TIM9_Init+0xe4>)
 8001e5e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001e60:	4b2b      	ldr	r3, [pc, #172]	; (8001f10 <MX_TIM9_Init+0xe0>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e66:	4b2a      	ldr	r3, [pc, #168]	; (8001f10 <MX_TIM9_Init+0xe0>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 3200;
 8001e6c:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <MX_TIM9_Init+0xe0>)
 8001e6e:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001e72:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e74:	4b26      	ldr	r3, [pc, #152]	; (8001f10 <MX_TIM9_Init+0xe0>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e7a:	4b25      	ldr	r3, [pc, #148]	; (8001f10 <MX_TIM9_Init+0xe0>)
 8001e7c:	2280      	movs	r2, #128	; 0x80
 8001e7e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001e80:	4823      	ldr	r0, [pc, #140]	; (8001f10 <MX_TIM9_Init+0xe0>)
 8001e82:	f003 ff0f 	bl	8005ca4 <HAL_TIM_Base_Init>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 8001e8c:	f7ff fd7e 	bl	800198c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e94:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001e96:	f107 0318 	add.w	r3, r7, #24
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	481c      	ldr	r0, [pc, #112]	; (8001f10 <MX_TIM9_Init+0xe0>)
 8001e9e:	f004 fc8d 	bl	80067bc <HAL_TIM_ConfigClockSource>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM9_Init+0x7c>
  {
    Error_Handler();
 8001ea8:	f7ff fd70 	bl	800198c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001eac:	4818      	ldr	r0, [pc, #96]	; (8001f10 <MX_TIM9_Init+0xe0>)
 8001eae:	f004 f8d3 	bl	8006058 <HAL_TIM_PWM_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM9_Init+0x8c>
  {
    Error_Handler();
 8001eb8:	f7ff fd68 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8001ec4:	f107 0310 	add.w	r3, r7, #16
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4811      	ldr	r0, [pc, #68]	; (8001f10 <MX_TIM9_Init+0xe0>)
 8001ecc:	f005 f9ee 	bl	80072ac <HAL_TIMEx_MasterConfigSynchronization>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM9_Init+0xaa>
  {
    Error_Handler();
 8001ed6:	f7ff fd59 	bl	800198c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eda:	2360      	movs	r3, #96	; 0x60
 8001edc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8001ede:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001ee2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001eec:	463b      	mov	r3, r7
 8001eee:	2204      	movs	r2, #4
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4807      	ldr	r0, [pc, #28]	; (8001f10 <MX_TIM9_Init+0xe0>)
 8001ef4:	f004 fad2 	bl	800649c <HAL_TIM_PWM_ConfigChannel>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM9_Init+0xd2>
  {
    Error_Handler();
 8001efe:	f7ff fd45 	bl	800198c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 8001f02:	4803      	ldr	r0, [pc, #12]	; (8001f10 <MX_TIM9_Init+0xe0>)
 8001f04:	f000 f8b6 	bl	8002074 <HAL_TIM_MspPostInit>

}
 8001f08:	bf00      	nop
 8001f0a:	3728      	adds	r7, #40	; 0x28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20003720 	.word	0x20003720
 8001f14:	40010800 	.word	0x40010800

08001f18 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f1e:	463b      	mov	r3, r7
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]

  htim10.Instance = TIM10;
 8001f2a:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <MX_TIM10_Init+0x6c>)
 8001f2c:	4a16      	ldr	r2, [pc, #88]	; (8001f88 <MX_TIM10_Init+0x70>)
 8001f2e:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001f30:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <MX_TIM10_Init+0x6c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <MX_TIM10_Init+0x6c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1599;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <MX_TIM10_Init+0x6c>)
 8001f3e:	f240 623f 	movw	r2, #1599	; 0x63f
 8001f42:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <MX_TIM10_Init+0x6c>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <MX_TIM10_Init+0x6c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001f50:	480c      	ldr	r0, [pc, #48]	; (8001f84 <MX_TIM10_Init+0x6c>)
 8001f52:	f003 fea7 	bl	8005ca4 <HAL_TIM_Base_Init>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 8001f5c:	f7ff fd16 	bl	800198c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f64:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 8001f66:	463b      	mov	r3, r7
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4806      	ldr	r0, [pc, #24]	; (8001f84 <MX_TIM10_Init+0x6c>)
 8001f6c:	f004 fc26 	bl	80067bc <HAL_TIM_ConfigClockSource>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM10_Init+0x62>
  {
    Error_Handler();
 8001f76:	f7ff fd09 	bl	800198c <Error_Handler>
  }

}
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200036a8 	.word	0x200036a8
 8001f88:	40010c00 	.word	0x40010c00

08001f8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9c:	d10c      	bne.n	8001fb8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f9e:	4b30      	ldr	r3, [pc, #192]	; (8002060 <HAL_TIM_Base_MspInit+0xd4>)
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	4a2f      	ldr	r2, [pc, #188]	; (8002060 <HAL_TIM_Base_MspInit+0xd4>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6253      	str	r3, [r2, #36]	; 0x24
 8001faa:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_TIM_Base_MspInit+0xd4>)
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	61fb      	str	r3, [r7, #28]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001fb6:	e04e      	b.n	8002056 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM3)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a29      	ldr	r2, [pc, #164]	; (8002064 <HAL_TIM_Base_MspInit+0xd8>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d10c      	bne.n	8001fdc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fc2:	4b27      	ldr	r3, [pc, #156]	; (8002060 <HAL_TIM_Base_MspInit+0xd4>)
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	4a26      	ldr	r2, [pc, #152]	; (8002060 <HAL_TIM_Base_MspInit+0xd4>)
 8001fc8:	f043 0302 	orr.w	r3, r3, #2
 8001fcc:	6253      	str	r3, [r2, #36]	; 0x24
 8001fce:	4b24      	ldr	r3, [pc, #144]	; (8002060 <HAL_TIM_Base_MspInit+0xd4>)
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	61bb      	str	r3, [r7, #24]
 8001fd8:	69bb      	ldr	r3, [r7, #24]
}
 8001fda:	e03c      	b.n	8002056 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM4)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a21      	ldr	r2, [pc, #132]	; (8002068 <HAL_TIM_Base_MspInit+0xdc>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d10c      	bne.n	8002000 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fe6:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <HAL_TIM_Base_MspInit+0xd4>)
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	4a1d      	ldr	r2, [pc, #116]	; (8002060 <HAL_TIM_Base_MspInit+0xd4>)
 8001fec:	f043 0304 	orr.w	r3, r3, #4
 8001ff0:	6253      	str	r3, [r2, #36]	; 0x24
 8001ff2:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <HAL_TIM_Base_MspInit+0xd4>)
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	697b      	ldr	r3, [r7, #20]
}
 8001ffe:	e02a      	b.n	8002056 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM9)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a19      	ldr	r2, [pc, #100]	; (800206c <HAL_TIM_Base_MspInit+0xe0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d10c      	bne.n	8002024 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <HAL_TIM_Base_MspInit+0xd4>)
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	4a14      	ldr	r2, [pc, #80]	; (8002060 <HAL_TIM_Base_MspInit+0xd4>)
 8002010:	f043 0304 	orr.w	r3, r3, #4
 8002014:	6213      	str	r3, [r2, #32]
 8002016:	4b12      	ldr	r3, [pc, #72]	; (8002060 <HAL_TIM_Base_MspInit+0xd4>)
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	693b      	ldr	r3, [r7, #16]
}
 8002022:	e018      	b.n	8002056 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM10)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a11      	ldr	r2, [pc, #68]	; (8002070 <HAL_TIM_Base_MspInit+0xe4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d113      	bne.n	8002056 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <HAL_TIM_Base_MspInit+0xd4>)
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <HAL_TIM_Base_MspInit+0xd4>)
 8002034:	f043 0308 	orr.w	r3, r3, #8
 8002038:	6213      	str	r3, [r2, #32]
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <HAL_TIM_Base_MspInit+0xd4>)
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM10_IRQn, 5, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2105      	movs	r1, #5
 800204a:	201a      	movs	r0, #26
 800204c:	f001 f93c 	bl	80032c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
 8002050:	201a      	movs	r0, #26
 8002052:	f001 f965 	bl	8003320 <HAL_NVIC_EnableIRQ>
}
 8002056:	bf00      	nop
 8002058:	3720      	adds	r7, #32
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800
 8002064:	40000400 	.word	0x40000400
 8002068:	40000800 	.word	0x40000800
 800206c:	40010800 	.word	0x40010800
 8002070:	40010c00 	.word	0x40010c00

08002074 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	; 0x28
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002094:	d11c      	bne.n	80020d0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002096:	4b33      	ldr	r3, [pc, #204]	; (8002164 <HAL_TIM_MspPostInit+0xf0>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	4a32      	ldr	r2, [pc, #200]	; (8002164 <HAL_TIM_MspPostInit+0xf0>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	61d3      	str	r3, [r2, #28]
 80020a2:	4b30      	ldr	r3, [pc, #192]	; (8002164 <HAL_TIM_MspPostInit+0xf0>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0-WKUP1     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PWM_ENGINE_LEFT_Pin;
 80020ae:	2301      	movs	r3, #1
 80020b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020be:	2301      	movs	r3, #1
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_LEFT_GPIO_Port, &GPIO_InitStruct);
 80020c2:	f107 0314 	add.w	r3, r7, #20
 80020c6:	4619      	mov	r1, r3
 80020c8:	4827      	ldr	r0, [pc, #156]	; (8002168 <HAL_TIM_MspPostInit+0xf4>)
 80020ca:	f001 fbcb 	bl	8003864 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80020ce:	e044      	b.n	800215a <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a25      	ldr	r2, [pc, #148]	; (800216c <HAL_TIM_MspPostInit+0xf8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d11d      	bne.n	8002116 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020da:	4b22      	ldr	r3, [pc, #136]	; (8002164 <HAL_TIM_MspPostInit+0xf0>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	4a21      	ldr	r2, [pc, #132]	; (8002164 <HAL_TIM_MspPostInit+0xf0>)
 80020e0:	f043 0304 	orr.w	r3, r3, #4
 80020e4:	61d3      	str	r3, [r2, #28]
 80020e6:	4b1f      	ldr	r3, [pc, #124]	; (8002164 <HAL_TIM_MspPostInit+0xf0>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_ENGINE_RIGHT_Pin;
 80020f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002100:	2300      	movs	r3, #0
 8002102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002104:	2302      	movs	r3, #2
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	4619      	mov	r1, r3
 800210e:	4818      	ldr	r0, [pc, #96]	; (8002170 <HAL_TIM_MspPostInit+0xfc>)
 8002110:	f001 fba8 	bl	8003864 <HAL_GPIO_Init>
}
 8002114:	e021      	b.n	800215a <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM9)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a16      	ldr	r2, [pc, #88]	; (8002174 <HAL_TIM_MspPostInit+0x100>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d11c      	bne.n	800215a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002120:	4b10      	ldr	r3, [pc, #64]	; (8002164 <HAL_TIM_MspPostInit+0xf0>)
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	4a0f      	ldr	r2, [pc, #60]	; (8002164 <HAL_TIM_MspPostInit+0xf0>)
 8002126:	f043 0302 	orr.w	r3, r3, #2
 800212a:	61d3      	str	r3, [r2, #28]
 800212c:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <HAL_TIM_MspPostInit+0xf0>)
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 8002138:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800213c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213e:	2302      	movs	r3, #2
 8002140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002146:	2300      	movs	r3, #0
 8002148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800214a:	2303      	movs	r3, #3
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 800214e:	f107 0314 	add.w	r3, r7, #20
 8002152:	4619      	mov	r1, r3
 8002154:	4808      	ldr	r0, [pc, #32]	; (8002178 <HAL_TIM_MspPostInit+0x104>)
 8002156:	f001 fb85 	bl	8003864 <HAL_GPIO_Init>
}
 800215a:	bf00      	nop
 800215c:	3728      	adds	r7, #40	; 0x28
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800
 8002168:	40020000 	.word	0x40020000
 800216c:	40000400 	.word	0x40000400
 8002170:	40020800 	.word	0x40020800
 8002174:	40010800 	.word	0x40010800
 8002178:	40020400 	.word	0x40020400

0800217c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <MX_USART3_UART_Init+0x4c>)
 8002182:	4a12      	ldr	r2, [pc, #72]	; (80021cc <MX_USART3_UART_Init+0x50>)
 8002184:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <MX_USART3_UART_Init+0x4c>)
 8002188:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800218c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800218e:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <MX_USART3_UART_Init+0x4c>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <MX_USART3_UART_Init+0x4c>)
 8002196:	2200      	movs	r2, #0
 8002198:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800219a:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <MX_USART3_UART_Init+0x4c>)
 800219c:	2200      	movs	r2, #0
 800219e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021a0:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <MX_USART3_UART_Init+0x4c>)
 80021a2:	220c      	movs	r2, #12
 80021a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021a6:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <MX_USART3_UART_Init+0x4c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <MX_USART3_UART_Init+0x4c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021b2:	4805      	ldr	r0, [pc, #20]	; (80021c8 <MX_USART3_UART_Init+0x4c>)
 80021b4:	f005 f914 	bl	80073e0 <HAL_UART_Init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80021be:	f7ff fbe5 	bl	800198c <Error_Handler>
  }

}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200037dc 	.word	0x200037dc
 80021cc:	40004800 	.word	0x40004800

080021d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	; 0x28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a3e      	ldr	r2, [pc, #248]	; (80022e8 <HAL_UART_MspInit+0x118>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d176      	bne.n	80022e0 <HAL_UART_MspInit+0x110>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021f2:	4b3e      	ldr	r3, [pc, #248]	; (80022ec <HAL_UART_MspInit+0x11c>)
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	4a3d      	ldr	r2, [pc, #244]	; (80022ec <HAL_UART_MspInit+0x11c>)
 80021f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021fc:	6253      	str	r3, [r2, #36]	; 0x24
 80021fe:	4b3b      	ldr	r3, [pc, #236]	; (80022ec <HAL_UART_MspInit+0x11c>)
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220a:	4b38      	ldr	r3, [pc, #224]	; (80022ec <HAL_UART_MspInit+0x11c>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	4a37      	ldr	r2, [pc, #220]	; (80022ec <HAL_UART_MspInit+0x11c>)
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	61d3      	str	r3, [r2, #28]
 8002216:	4b35      	ldr	r3, [pc, #212]	; (80022ec <HAL_UART_MspInit+0x11c>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002222:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002228:	2302      	movs	r3, #2
 800222a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002230:	2303      	movs	r3, #3
 8002232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002234:	2307      	movs	r3, #7
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	4619      	mov	r1, r3
 800223e:	482c      	ldr	r0, [pc, #176]	; (80022f0 <HAL_UART_MspInit+0x120>)
 8002240:	f001 fb10 	bl	8003864 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002244:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <HAL_UART_MspInit+0x124>)
 8002246:	4a2c      	ldr	r2, [pc, #176]	; (80022f8 <HAL_UART_MspInit+0x128>)
 8002248:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800224a:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <HAL_UART_MspInit+0x124>)
 800224c:	2200      	movs	r2, #0
 800224e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002250:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <HAL_UART_MspInit+0x124>)
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002256:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <HAL_UART_MspInit+0x124>)
 8002258:	2280      	movs	r2, #128	; 0x80
 800225a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800225c:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <HAL_UART_MspInit+0x124>)
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002262:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <HAL_UART_MspInit+0x124>)
 8002264:	2200      	movs	r2, #0
 8002266:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002268:	4b22      	ldr	r3, [pc, #136]	; (80022f4 <HAL_UART_MspInit+0x124>)
 800226a:	2200      	movs	r2, #0
 800226c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800226e:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <HAL_UART_MspInit+0x124>)
 8002270:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002274:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002276:	481f      	ldr	r0, [pc, #124]	; (80022f4 <HAL_UART_MspInit+0x124>)
 8002278:	f001 f86a 	bl	8003350 <HAL_DMA_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8002282:	f7ff fb83 	bl	800198c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a1a      	ldr	r2, [pc, #104]	; (80022f4 <HAL_UART_MspInit+0x124>)
 800228a:	635a      	str	r2, [r3, #52]	; 0x34
 800228c:	4a19      	ldr	r2, [pc, #100]	; (80022f4 <HAL_UART_MspInit+0x124>)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8002292:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <HAL_UART_MspInit+0x12c>)
 8002294:	4a1a      	ldr	r2, [pc, #104]	; (8002300 <HAL_UART_MspInit+0x130>)
 8002296:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002298:	4b18      	ldr	r3, [pc, #96]	; (80022fc <HAL_UART_MspInit+0x12c>)
 800229a:	2210      	movs	r2, #16
 800229c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800229e:	4b17      	ldr	r3, [pc, #92]	; (80022fc <HAL_UART_MspInit+0x12c>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022a4:	4b15      	ldr	r3, [pc, #84]	; (80022fc <HAL_UART_MspInit+0x12c>)
 80022a6:	2280      	movs	r2, #128	; 0x80
 80022a8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022aa:	4b14      	ldr	r3, [pc, #80]	; (80022fc <HAL_UART_MspInit+0x12c>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <HAL_UART_MspInit+0x12c>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <HAL_UART_MspInit+0x12c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <HAL_UART_MspInit+0x12c>)
 80022be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80022c4:	480d      	ldr	r0, [pc, #52]	; (80022fc <HAL_UART_MspInit+0x12c>)
 80022c6:	f001 f843 	bl	8003350 <HAL_DMA_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 80022d0:	f7ff fb5c 	bl	800198c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a09      	ldr	r2, [pc, #36]	; (80022fc <HAL_UART_MspInit+0x12c>)
 80022d8:	631a      	str	r2, [r3, #48]	; 0x30
 80022da:	4a08      	ldr	r2, [pc, #32]	; (80022fc <HAL_UART_MspInit+0x12c>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80022e0:	bf00      	nop
 80022e2:	3728      	adds	r7, #40	; 0x28
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40004800 	.word	0x40004800
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40020400 	.word	0x40020400
 80022f4:	20003798 	.word	0x20003798
 80022f8:	40026030 	.word	0x40026030
 80022fc:	2000381c 	.word	0x2000381c
 8002300:	4002601c 	.word	0x4002601c

08002304 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002304:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002306:	e003      	b.n	8002310 <LoopCopyDataInit>

08002308 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800230a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800230c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800230e:	3104      	adds	r1, #4

08002310 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002310:	480a      	ldr	r0, [pc, #40]	; (800233c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002312:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002314:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002316:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002318:	d3f6      	bcc.n	8002308 <CopyDataInit>
  ldr r2, =_sbss
 800231a:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800231c:	e002      	b.n	8002324 <LoopFillZerobss>

0800231e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800231e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002320:	f842 3b04 	str.w	r3, [r2], #4

08002324 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002324:	4b08      	ldr	r3, [pc, #32]	; (8002348 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002326:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002328:	d3f9      	bcc.n	800231e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800232a:	f7ff fc17 	bl	8001b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800232e:	f008 fe49 	bl	800afc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002332:	f7ff fa95 	bl	8001860 <main>
  bx lr
 8002336:	4770      	bx	lr
  ldr r3, =_sidata
 8002338:	0800b414 	.word	0x0800b414
  ldr r0, =_sdata
 800233c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002340:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8002344:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8002348:	200038a4 	.word	0x200038a4

0800234c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800234c:	e7fe      	b.n	800234c <ADC1_IRQHandler>

0800234e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002358:	2003      	movs	r0, #3
 800235a:	f000 ff95 	bl	8003288 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800235e:	2000      	movs	r0, #0
 8002360:	f7ff fb58 	bl	8001a14 <HAL_InitTick>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	71fb      	strb	r3, [r7, #7]
 800236e:	e001      	b.n	8002374 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002370:	f7ff fb1c 	bl	80019ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002374:	79fb      	ldrb	r3, [r7, #7]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <HAL_IncTick+0x1c>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <HAL_IncTick+0x20>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4413      	add	r3, r2
 800238e:	4a03      	ldr	r2, [pc, #12]	; (800239c <HAL_IncTick+0x1c>)
 8002390:	6013      	str	r3, [r2, #0]
}
 8002392:	bf00      	nop
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20003860 	.word	0x20003860
 80023a0:	20000008 	.word	0x20000008

080023a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return uwTick;
 80023a8:	4b02      	ldr	r3, [pc, #8]	; (80023b4 <HAL_GetTick+0x10>)
 80023aa:	681b      	ldr	r3, [r3, #0]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	20003860 	.word	0x20003860

080023b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08e      	sub	sp, #56	; 0x38
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e282      	b.n	80028de <HAL_ADC_Init+0x526>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a9d      	ldr	r2, [pc, #628]	; (8002654 <HAL_ADC_Init+0x29c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d004      	beq.n	80023ec <HAL_ADC_Init+0x34>
 80023e2:	f240 11bd 	movw	r1, #445	; 0x1bd
 80023e6:	489c      	ldr	r0, [pc, #624]	; (8002658 <HAL_ADC_Init+0x2a0>)
 80023e8:	f7ff fad6 	bl	8001998 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00e      	beq.n	8002412 <HAL_ADC_Init+0x5a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023fc:	d009      	beq.n	8002412 <HAL_ADC_Init+0x5a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002406:	d004      	beq.n	8002412 <HAL_ADC_Init+0x5a>
 8002408:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800240c:	4892      	ldr	r0, [pc, #584]	; (8002658 <HAL_ADC_Init+0x2a0>)
 800240e:	f7ff fac3 	bl	8001998 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d013      	beq.n	8002442 <HAL_ADC_Init+0x8a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002422:	d00e      	beq.n	8002442 <HAL_ADC_Init+0x8a>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800242c:	d009      	beq.n	8002442 <HAL_ADC_Init+0x8a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002436:	d004      	beq.n	8002442 <HAL_ADC_Init+0x8a>
 8002438:	f240 11bf 	movw	r1, #447	; 0x1bf
 800243c:	4886      	ldr	r0, [pc, #536]	; (8002658 <HAL_ADC_Init+0x2a0>)
 800243e:	f7ff faab 	bl	8001998 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d009      	beq.n	800245e <HAL_ADC_Init+0xa6>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002452:	d004      	beq.n	800245e <HAL_ADC_Init+0xa6>
 8002454:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002458:	487f      	ldr	r0, [pc, #508]	; (8002658 <HAL_ADC_Init+0x2a0>)
 800245a:	f7ff fa9d 	bl	8001998 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d009      	beq.n	800247a <HAL_ADC_Init+0xc2>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800246e:	d004      	beq.n	800247a <HAL_ADC_Init+0xc2>
 8002470:	f240 11c1 	movw	r1, #449	; 0x1c1
 8002474:	4878      	ldr	r0, [pc, #480]	; (8002658 <HAL_ADC_Init+0x2a0>)
 8002476:	f7ff fa8f 	bl	8001998 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002482:	d008      	beq.n	8002496 <HAL_ADC_Init+0xde>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d004      	beq.n	8002496 <HAL_ADC_Init+0xde>
 800248c:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002490:	4871      	ldr	r0, [pc, #452]	; (8002658 <HAL_ADC_Init+0x2a0>)
 8002492:	f7ff fa81 	bl	8001998 <assert_failed>
  assert_param(IS_ADC_AUTOWAIT(hadc->Init.LowPowerAutoWait));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d020      	beq.n	80024e0 <HAL_ADC_Init+0x128>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	2b10      	cmp	r3, #16
 80024a4:	d01c      	beq.n	80024e0 <HAL_ADC_Init+0x128>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	2b20      	cmp	r3, #32
 80024ac:	d018      	beq.n	80024e0 <HAL_ADC_Init+0x128>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	2b30      	cmp	r3, #48	; 0x30
 80024b4:	d014      	beq.n	80024e0 <HAL_ADC_Init+0x128>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	2b40      	cmp	r3, #64	; 0x40
 80024bc:	d010      	beq.n	80024e0 <HAL_ADC_Init+0x128>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	2b50      	cmp	r3, #80	; 0x50
 80024c4:	d00c      	beq.n	80024e0 <HAL_ADC_Init+0x128>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	2b60      	cmp	r3, #96	; 0x60
 80024cc:	d008      	beq.n	80024e0 <HAL_ADC_Init+0x128>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	2b70      	cmp	r3, #112	; 0x70
 80024d4:	d004      	beq.n	80024e0 <HAL_ADC_Init+0x128>
 80024d6:	f240 11c3 	movw	r1, #451	; 0x1c3
 80024da:	485f      	ldr	r0, [pc, #380]	; (8002658 <HAL_ADC_Init+0x2a0>)
 80024dc:	f7ff fa5c 	bl	8001998 <assert_failed>
  assert_param(IS_ADC_AUTOPOWEROFF(hadc->Init.LowPowerAutoPowerOff));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d013      	beq.n	8002510 <HAL_ADC_Init+0x158>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024f0:	d00e      	beq.n	8002510 <HAL_ADC_Init+0x158>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024fa:	d009      	beq.n	8002510 <HAL_ADC_Init+0x158>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002504:	d004      	beq.n	8002510 <HAL_ADC_Init+0x158>
 8002506:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800250a:	4853      	ldr	r0, [pc, #332]	; (8002658 <HAL_ADC_Init+0x2a0>)
 800250c:	f7ff fa44 	bl	8001998 <assert_failed>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d008      	beq.n	800252a <HAL_ADC_Init+0x172>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	2b04      	cmp	r3, #4
 800251e:	d004      	beq.n	800252a <HAL_ADC_Init+0x172>
 8002520:	f240 11c5 	movw	r1, #453	; 0x1c5
 8002524:	484c      	ldr	r0, [pc, #304]	; (8002658 <HAL_ADC_Init+0x2a0>)
 8002526:	f7ff fa37 	bl	8001998 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002530:	2b00      	cmp	r3, #0
 8002532:	d009      	beq.n	8002548 <HAL_ADC_Init+0x190>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800253a:	2b01      	cmp	r3, #1
 800253c:	d004      	beq.n	8002548 <HAL_ADC_Init+0x190>
 800253e:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8002542:	4845      	ldr	r0, [pc, #276]	; (8002658 <HAL_ADC_Init+0x2a0>)
 8002544:	f7ff fa28 	bl	8001998 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002550:	d03e      	beq.n	80025d0 <HAL_ADC_Init+0x218>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002556:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800255a:	d039      	beq.n	80025d0 <HAL_ADC_Init+0x218>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002560:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002564:	d034      	beq.n	80025d0 <HAL_ADC_Init+0x218>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256a:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 800256e:	d02f      	beq.n	80025d0 <HAL_ADC_Init+0x218>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002574:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002578:	d02a      	beq.n	80025d0 <HAL_ADC_Init+0x218>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002582:	d025      	beq.n	80025d0 <HAL_ADC_Init+0x218>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002588:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800258c:	d020      	beq.n	80025d0 <HAL_ADC_Init+0x218>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002592:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8002596:	d01b      	beq.n	80025d0 <HAL_ADC_Init+0x218>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80025a0:	d016      	beq.n	80025d0 <HAL_ADC_Init+0x218>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d012      	beq.n	80025d0 <HAL_ADC_Init+0x218>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025b2:	d00d      	beq.n	80025d0 <HAL_ADC_Init+0x218>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80025bc:	d008      	beq.n	80025d0 <HAL_ADC_Init+0x218>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c2:	2b10      	cmp	r3, #16
 80025c4:	d004      	beq.n	80025d0 <HAL_ADC_Init+0x218>
 80025c6:	f240 11c7 	movw	r1, #455	; 0x1c7
 80025ca:	4823      	ldr	r0, [pc, #140]	; (8002658 <HAL_ADC_Init+0x2a0>)
 80025cc:	f7ff f9e4 	bl	8001998 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d009      	beq.n	80025ee <HAL_ADC_Init+0x236>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d004      	beq.n	80025ee <HAL_ADC_Init+0x236>
 80025e4:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 80025e8:	481b      	ldr	r0, [pc, #108]	; (8002658 <HAL_ADC_Init+0x2a0>)
 80025ea:	f7ff f9d5 	bl	8001998 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d032      	beq.n	800265c <HAL_ADC_Init+0x2a4>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_ADC_Init+0x24e>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002602:	2b1c      	cmp	r3, #28
 8002604:	d904      	bls.n	8002610 <HAL_ADC_Init+0x258>
 8002606:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800260a:	4813      	ldr	r0, [pc, #76]	; (8002658 <HAL_ADC_Init+0x2a0>)
 800260c:	f7ff f9c4 	bl	8001998 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <HAL_ADC_Init+0x276>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002620:	2b01      	cmp	r3, #1
 8002622:	d004      	beq.n	800262e <HAL_ADC_Init+0x276>
 8002624:	f240 11cd 	movw	r1, #461	; 0x1cd
 8002628:	480b      	ldr	r0, [pc, #44]	; (8002658 <HAL_ADC_Init+0x2a0>)
 800262a:	f7ff f9b5 	bl	8001998 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002634:	2b00      	cmp	r3, #0
 8002636:	d011      	beq.n	800265c <HAL_ADC_Init+0x2a4>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_ADC_Init+0x290>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	2b08      	cmp	r3, #8
 8002646:	d909      	bls.n	800265c <HAL_ADC_Init+0x2a4>
 8002648:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800264c:	4802      	ldr	r0, [pc, #8]	; (8002658 <HAL_ADC_Init+0x2a0>)
 800264e:	f7ff f9a3 	bl	8001998 <assert_failed>
 8002652:	e003      	b.n	800265c <HAL_ADC_Init+0x2a4>
 8002654:	40012400 	.word	0x40012400
 8002658:	0800b0f0 	.word	0x0800b0f0
    }
  }
      
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002660:	2b10      	cmp	r3, #16
 8002662:	d017      	beq.n	8002694 <HAL_ADC_Init+0x2dc>
  {
    assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002668:	2b00      	cmp	r3, #0
 800266a:	d013      	beq.n	8002694 <HAL_ADC_Init+0x2dc>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002670:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002674:	d00e      	beq.n	8002694 <HAL_ADC_Init+0x2dc>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800267e:	d009      	beq.n	8002694 <HAL_ADC_Init+0x2dc>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002684:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002688:	d004      	beq.n	8002694 <HAL_ADC_Init+0x2dc>
 800268a:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800268e:	4896      	ldr	r0, [pc, #600]	; (80028e8 <HAL_ADC_Init+0x530>)
 8002690:	f7ff f982 	bl	8001998 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002698:	2b00      	cmp	r3, #0
 800269a:	d115      	bne.n	80026c8 <HAL_ADC_Init+0x310>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026aa:	4b90      	ldr	r3, [pc, #576]	; (80028ec <HAL_ADC_Init+0x534>)
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	4a8f      	ldr	r2, [pc, #572]	; (80028ec <HAL_ADC_Init+0x534>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6213      	str	r3, [r2, #32]
 80026b6:	4b8d      	ldr	r3, [pc, #564]	; (80028ec <HAL_ADC_Init+0x534>)
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7fe fe78 	bl	80013b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026cc:	f003 0310 	and.w	r3, r3, #16
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f040 80ff 	bne.w	80028d4 <HAL_ADC_Init+0x51c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026de:	f023 0302 	bic.w	r3, r3, #2
 80026e2:	f043 0202 	orr.w	r2, r3, #2
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80026ea:	4b81      	ldr	r3, [pc, #516]	; (80028f0 <HAL_ADC_Init+0x538>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	497e      	ldr	r1, [pc, #504]	; (80028f0 <HAL_ADC_Init+0x538>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002704:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800270c:	4619      	mov	r1, r3
 800270e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002712:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8002728:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800272e:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002736:	4619      	mov	r1, r3
 8002738:	2302      	movs	r3, #2
 800273a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273e:	fa93 f3a3 	rbit	r3, r3
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	fab3 f383 	clz	r3, r3
 800274a:	b2db      	uxtb	r3, r3
 800274c:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8002750:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002754:	4313      	orrs	r3, r2
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275c:	2b10      	cmp	r3, #16
 800275e:	d007      	beq.n	8002770 <HAL_ADC_Init+0x3b8>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002768:	4313      	orrs	r3, r2
 800276a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800276c:	4313      	orrs	r3, r2
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277a:	2b40      	cmp	r3, #64	; 0x40
 800277c:	d04f      	beq.n	800281e <HAL_ADC_Init+0x466>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002784:	4313      	orrs	r3, r2
 8002786:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002790:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6912      	ldr	r2, [r2, #16]
 8002796:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800279a:	d003      	beq.n	80027a4 <HAL_ADC_Init+0x3ec>
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6912      	ldr	r2, [r2, #16]
 80027a0:	2a01      	cmp	r2, #1
 80027a2:	d102      	bne.n	80027aa <HAL_ADC_Init+0x3f2>
 80027a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027a8:	e000      	b.n	80027ac <HAL_ADC_Init+0x3f4>
 80027aa:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80027ac:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80027ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027b0:	4313      	orrs	r3, r2
 80027b2:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d125      	bne.n	800280a <HAL_ADC_Init+0x452>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d114      	bne.n	80027f2 <HAL_ADC_Init+0x43a>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	3b01      	subs	r3, #1
 80027ce:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80027d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	fa92 f2a2 	rbit	r2, r2
 80027da:	617a      	str	r2, [r7, #20]
  return result;
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	fab2 f282 	clz	r2, r2
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	4093      	lsls	r3, r2
 80027e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027ec:	4313      	orrs	r3, r2
 80027ee:	633b      	str	r3, [r7, #48]	; 0x30
 80027f0:	e00b      	b.n	800280a <HAL_ADC_Init+0x452>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f6:	f043 0220 	orr.w	r2, r3, #32
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002802:	f043 0201 	orr.w	r2, r3, #1
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	4b38      	ldr	r3, [pc, #224]	; (80028f4 <HAL_ADC_Init+0x53c>)
 8002812:	4013      	ands	r3, r2
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800281a:	430b      	orrs	r3, r1
 800281c:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	4b34      	ldr	r3, [pc, #208]	; (80028f8 <HAL_ADC_Init+0x540>)
 8002826:	4013      	ands	r3, r2
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800282e:	430b      	orrs	r3, r1
 8002830:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800283a:	d003      	beq.n	8002844 <HAL_ADC_Init+0x48c>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d119      	bne.n	8002878 <HAL_ADC_Init+0x4c0>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002852:	3b01      	subs	r3, #1
 8002854:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8002858:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	fa92 f2a2 	rbit	r2, r2
 8002860:	60fa      	str	r2, [r7, #12]
  return result;
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	fab2 f282 	clz	r2, r2
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	fa03 f202 	lsl.w	r2, r3, r2
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	631a      	str	r2, [r3, #48]	; 0x30
 8002876:	e007      	b.n	8002888 <HAL_ADC_Init+0x4d0>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8002886:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	4b1b      	ldr	r3, [pc, #108]	; (80028fc <HAL_ADC_Init+0x544>)
 8002890:	4013      	ands	r3, r2
 8002892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002894:	429a      	cmp	r2, r3
 8002896:	d10b      	bne.n	80028b0 <HAL_ADC_Init+0x4f8>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a2:	f023 0303 	bic.w	r3, r3, #3
 80028a6:	f043 0201 	orr.w	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	64da      	str	r2, [r3, #76]	; 0x4c
 80028ae:	e014      	b.n	80028da <HAL_ADC_Init+0x522>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b4:	f023 0312 	bic.w	r3, r3, #18
 80028b8:	f043 0210 	orr.w	r2, r3, #16
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c4:	f043 0201 	orr.w	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80028d2:	e002      	b.n	80028da <HAL_ADC_Init+0x522>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3738      	adds	r7, #56	; 0x38
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	0800b0f0 	.word	0x0800b0f0
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40012700 	.word	0x40012700
 80028f4:	fcfc16ff 	.word	0xfcfc16ff
 80028f8:	c0fff189 	.word	0xc0fff189
 80028fc:	bf80fffe 	.word	0xbf80fffe

08002900 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a43      	ldr	r2, [pc, #268]	; (8002a24 <HAL_ADC_Start_DMA+0x124>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d004      	beq.n	8002924 <HAL_ADC_Start_DMA+0x24>
 800291a:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 800291e:	4842      	ldr	r0, [pc, #264]	; (8002a28 <HAL_ADC_Start_DMA+0x128>)
 8002920:	f7ff f83a 	bl	8001998 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_ADC_Start_DMA+0x32>
 800292e:	2302      	movs	r3, #2
 8002930:	e074      	b.n	8002a1c <HAL_ADC_Start_DMA+0x11c>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 fb28 	bl	8002f90 <ADC_Enable>
 8002940:	4603      	mov	r3, r0
 8002942:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002944:	7dfb      	ldrb	r3, [r7, #23]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d167      	bne.n	8002a1a <HAL_ADC_Start_DMA+0x11a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002968:	2b00      	cmp	r3, #0
 800296a:	d007      	beq.n	800297c <HAL_ADC_Start_DMA+0x7c>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002970:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002974:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002980:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002988:	d106      	bne.n	8002998 <HAL_ADC_Start_DMA+0x98>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298e:	f023 0206 	bic.w	r2, r3, #6
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	651a      	str	r2, [r3, #80]	; 0x50
 8002996:	e002      	b.n	800299e <HAL_ADC_Start_DMA+0x9e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4a20      	ldr	r2, [pc, #128]	; (8002a2c <HAL_ADC_Start_DMA+0x12c>)
 80029ac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	4a1f      	ldr	r2, [pc, #124]	; (8002a30 <HAL_ADC_Start_DMA+0x130>)
 80029b4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	4a1e      	ldr	r2, [pc, #120]	; (8002a34 <HAL_ADC_Start_DMA+0x134>)
 80029bc:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80029c6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80029d6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029e6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	3358      	adds	r3, #88	; 0x58
 80029f2:	4619      	mov	r1, r3
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f000 fde8 	bl	80035cc <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d107      	bne.n	8002a1a <HAL_ADC_Start_DMA+0x11a>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a18:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40012400 	.word	0x40012400
 8002a28:	0800b0f0 	.word	0x0800b0f0
 8002a2c:	0800303d 	.word	0x0800303d
 8002a30:	080030e5 	.word	0x080030e5
 8002a34:	08003101 	.word	0x08003101

08002a38 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr

08002a4a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a94      	ldr	r2, [pc, #592]	; (8002cc4 <HAL_ADC_ConfigChannel+0x268>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d004      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x26>
 8002a78:	f240 7191 	movw	r1, #1937	; 0x791
 8002a7c:	4892      	ldr	r0, [pc, #584]	; (8002cc8 <HAL_ADC_ConfigChannel+0x26c>)
 8002a7e:	f7fe ff8b 	bl	8001998 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 8081 	beq.w	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d07c      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d078      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d074      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d070      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b05      	cmp	r3, #5
 8002ab2:	d06c      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b06      	cmp	r3, #6
 8002aba:	d068      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b07      	cmp	r3, #7
 8002ac2:	d064      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d060      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b09      	cmp	r3, #9
 8002ad2:	d05c      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b0a      	cmp	r3, #10
 8002ada:	d058      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b0b      	cmp	r3, #11
 8002ae2:	d054      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b0c      	cmp	r3, #12
 8002aea:	d050      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b0d      	cmp	r3, #13
 8002af2:	d04c      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b0e      	cmp	r3, #14
 8002afa:	d048      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b0f      	cmp	r3, #15
 8002b02:	d044      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b10      	cmp	r3, #16
 8002b0a:	d040      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b11      	cmp	r3, #17
 8002b12:	d03c      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b12      	cmp	r3, #18
 8002b1a:	d038      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b13      	cmp	r3, #19
 8002b22:	d034      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b14      	cmp	r3, #20
 8002b2a:	d030      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b15      	cmp	r3, #21
 8002b32:	d02c      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b16      	cmp	r3, #22
 8002b3a:	d028      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b17      	cmp	r3, #23
 8002b42:	d024      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b18      	cmp	r3, #24
 8002b4a:	d020      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b19      	cmp	r3, #25
 8002b52:	d01c      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b1a      	cmp	r3, #26
 8002b5a:	d018      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b1b      	cmp	r3, #27
 8002b62:	d014      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b1c      	cmp	r3, #28
 8002b6a:	d010      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b1d      	cmp	r3, #29
 8002b72:	d00c      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b1e      	cmp	r3, #30
 8002b7a:	d008      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b1f      	cmp	r3, #31
 8002b82:	d004      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x132>
 8002b84:	f240 7192 	movw	r1, #1938	; 0x792
 8002b88:	484f      	ldr	r0, [pc, #316]	; (8002cc8 <HAL_ADC_ConfigChannel+0x26c>)
 8002b8a:	f7fe ff05 	bl	8001998 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d070      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d06c      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d068      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d064      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b05      	cmp	r3, #5
 8002bb4:	d060      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b06      	cmp	r3, #6
 8002bbc:	d05c      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b07      	cmp	r3, #7
 8002bc4:	d058      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d054      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b09      	cmp	r3, #9
 8002bd4:	d050      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b0a      	cmp	r3, #10
 8002bdc:	d04c      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b0b      	cmp	r3, #11
 8002be4:	d048      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b0c      	cmp	r3, #12
 8002bec:	d044      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b0d      	cmp	r3, #13
 8002bf4:	d040      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b0e      	cmp	r3, #14
 8002bfc:	d03c      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b0f      	cmp	r3, #15
 8002c04:	d038      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b10      	cmp	r3, #16
 8002c0c:	d034      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b11      	cmp	r3, #17
 8002c14:	d030      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b12      	cmp	r3, #18
 8002c1c:	d02c      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b13      	cmp	r3, #19
 8002c24:	d028      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b14      	cmp	r3, #20
 8002c2c:	d024      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b15      	cmp	r3, #21
 8002c34:	d020      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b16      	cmp	r3, #22
 8002c3c:	d01c      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b17      	cmp	r3, #23
 8002c44:	d018      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b18      	cmp	r3, #24
 8002c4c:	d014      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b19      	cmp	r3, #25
 8002c54:	d010      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b1a      	cmp	r3, #26
 8002c5c:	d00c      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b1b      	cmp	r3, #27
 8002c64:	d008      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b1c      	cmp	r3, #28
 8002c6c:	d004      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x21c>
 8002c6e:	f240 7193 	movw	r1, #1939	; 0x793
 8002c72:	4815      	ldr	r0, [pc, #84]	; (8002cc8 <HAL_ADC_ConfigChannel+0x26c>)
 8002c74:	f7fe fe90 	bl	8001998 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d025      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x270>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d021      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x270>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d01d      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x270>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	d019      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x270>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d015      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x270>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b05      	cmp	r3, #5
 8002ca6:	d011      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x270>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	2b06      	cmp	r3, #6
 8002cae:	d00d      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x270>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b07      	cmp	r3, #7
 8002cb6:	d009      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x270>
 8002cb8:	f240 7194 	movw	r1, #1940	; 0x794
 8002cbc:	4802      	ldr	r0, [pc, #8]	; (8002cc8 <HAL_ADC_ConfigChannel+0x26c>)
 8002cbe:	f7fe fe6b 	bl	8001998 <assert_failed>
 8002cc2:	e003      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x270>
 8002cc4:	40012400 	.word	0x40012400
 8002cc8:	0800b0f0 	.word	0x0800b0f0
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x27e>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e14f      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x51e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b06      	cmp	r3, #6
 8002ce8:	d81c      	bhi.n	8002d24 <HAL_ADC_ConfigChannel+0x2c8>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3b05      	subs	r3, #5
 8002cfc:	221f      	movs	r2, #31
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43db      	mvns	r3, r3
 8002d04:	4019      	ands	r1, r3
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	3b05      	subs	r3, #5
 8002d16:	fa00 f203 	lsl.w	r2, r0, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	641a      	str	r2, [r3, #64]	; 0x40
 8002d22:	e07e      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b0c      	cmp	r3, #12
 8002d2a:	d81c      	bhi.n	8002d66 <HAL_ADC_ConfigChannel+0x30a>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3b23      	subs	r3, #35	; 0x23
 8002d3e:	221f      	movs	r2, #31
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	4019      	ands	r1, r3
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	6818      	ldr	r0, [r3, #0]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	3b23      	subs	r3, #35	; 0x23
 8002d58:	fa00 f203 	lsl.w	r2, r0, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d64:	e05d      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b12      	cmp	r3, #18
 8002d6c:	d81c      	bhi.n	8002da8 <HAL_ADC_ConfigChannel+0x34c>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3b41      	subs	r3, #65	; 0x41
 8002d80:	221f      	movs	r2, #31
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	4019      	ands	r1, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	4613      	mov	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	3b41      	subs	r3, #65	; 0x41
 8002d9a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	639a      	str	r2, [r3, #56]	; 0x38
 8002da6:	e03c      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b18      	cmp	r3, #24
 8002dae:	d81c      	bhi.n	8002dea <HAL_ADC_ConfigChannel+0x38e>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3b5f      	subs	r3, #95	; 0x5f
 8002dc2:	221f      	movs	r2, #31
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	4019      	ands	r1, r3
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	3b5f      	subs	r3, #95	; 0x5f
 8002ddc:	fa00 f203 	lsl.w	r2, r0, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	635a      	str	r2, [r3, #52]	; 0x34
 8002de8:	e01b      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	3b7d      	subs	r3, #125	; 0x7d
 8002dfc:	221f      	movs	r2, #31
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	4019      	ands	r1, r3
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	3b7d      	subs	r3, #125	; 0x7d
 8002e16:	fa00 f203 	lsl.w	r2, r0, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b09      	cmp	r3, #9
 8002e28:	d81a      	bhi.n	8002e60 <HAL_ADC_ConfigChannel+0x404>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6959      	ldr	r1, [r3, #20]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	2207      	movs	r2, #7
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	4019      	ands	r1, r3
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	6898      	ldr	r0, [r3, #8]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	fa00 f203 	lsl.w	r2, r0, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	615a      	str	r2, [r3, #20]
 8002e5e:	e05d      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b13      	cmp	r3, #19
 8002e66:	d81c      	bhi.n	8002ea2 <HAL_ADC_ConfigChannel+0x446>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6919      	ldr	r1, [r3, #16]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	4613      	mov	r3, r2
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	4413      	add	r3, r2
 8002e78:	3b1e      	subs	r3, #30
 8002e7a:	2207      	movs	r2, #7
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	4019      	ands	r1, r3
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	6898      	ldr	r0, [r3, #8]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	4413      	add	r3, r2
 8002e92:	3b1e      	subs	r3, #30
 8002e94:	fa00 f203 	lsl.w	r2, r0, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	611a      	str	r2, [r3, #16]
 8002ea0:	e03c      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b1d      	cmp	r3, #29
 8002ea8:	d81c      	bhi.n	8002ee4 <HAL_ADC_ConfigChannel+0x488>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68d9      	ldr	r1, [r3, #12]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	4413      	add	r3, r2
 8002eba:	3b3c      	subs	r3, #60	; 0x3c
 8002ebc:	2207      	movs	r2, #7
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	4019      	ands	r1, r3
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	6898      	ldr	r0, [r3, #8]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3b3c      	subs	r3, #60	; 0x3c
 8002ed6:	fa00 f203 	lsl.w	r2, r0, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	e01b      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3b5a      	subs	r3, #90	; 0x5a
 8002ef6:	2207      	movs	r2, #7
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	4019      	ands	r1, r3
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	6898      	ldr	r0, [r3, #8]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3b5a      	subs	r3, #90	; 0x5a
 8002f10:	fa00 f203 	lsl.w	r2, r0, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b10      	cmp	r3, #16
 8002f22:	d003      	beq.n	8002f2c <HAL_ADC_ConfigChannel+0x4d0>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f28:	2b11      	cmp	r3, #17
 8002f2a:	d121      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x514>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002f2c:	4b15      	ldr	r3, [pc, #84]	; (8002f84 <HAL_ADC_ConfigChannel+0x528>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d11b      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x514>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002f38:	4b12      	ldr	r3, [pc, #72]	; (8002f84 <HAL_ADC_ConfigChannel+0x528>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	4a11      	ldr	r2, [pc, #68]	; (8002f84 <HAL_ADC_ConfigChannel+0x528>)
 8002f3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f42:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b10      	cmp	r3, #16
 8002f4a:	d111      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x514>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002f4c:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <HAL_ADC_ConfigChannel+0x52c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a0e      	ldr	r2, [pc, #56]	; (8002f8c <HAL_ADC_ConfigChannel+0x530>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	0c9a      	lsrs	r2, r3, #18
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002f62:	e002      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x50e>
          {
            wait_loop_index--;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f9      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x508>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40012700 	.word	0x40012700
 8002f88:	20000000 	.word	0x20000000
 8002f8c:	431bde83 	.word	0x431bde83

08002f90 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002faa:	2b40      	cmp	r3, #64	; 0x40
 8002fac:	d03c      	beq.n	8003028 <ADC_Enable+0x98>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0201 	orr.w	r2, r2, #1
 8002fbc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002fbe:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <ADC_Enable+0xa4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1d      	ldr	r2, [pc, #116]	; (8003038 <ADC_Enable+0xa8>)
 8002fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc8:	0c9a      	lsrs	r2, r3, #18
 8002fca:	4613      	mov	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	4413      	add	r3, r2
 8002fd0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002fd2:	e002      	b.n	8002fda <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1f9      	bne.n	8002fd4 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8002fe0:	f7ff f9e0 	bl	80023a4 <HAL_GetTick>
 8002fe4:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002fe6:	e018      	b.n	800301a <ADC_Enable+0x8a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002fe8:	f7ff f9dc 	bl	80023a4 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d911      	bls.n	800301a <ADC_Enable+0x8a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffa:	f043 0210 	orr.w	r2, r3, #16
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003006:	f043 0201 	orr.w	r2, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e007      	b.n	800302a <ADC_Enable+0x9a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003024:	2b40      	cmp	r3, #64	; 0x40
 8003026:	d1df      	bne.n	8002fe8 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000000 	.word	0x20000000
 8003038:	431bde83 	.word	0x431bde83

0800303c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003052:	2b00      	cmp	r3, #0
 8003054:	d13d      	bne.n	80030d2 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800305a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d12c      	bne.n	80030ca <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003076:	2b00      	cmp	r3, #0
 8003078:	d127      	bne.n	80030ca <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003084:	2b00      	cmp	r3, #0
 8003086:	d006      	beq.n	8003096 <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003092:	2b00      	cmp	r3, #0
 8003094:	d119      	bne.n	80030ca <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0220 	bic.w	r2, r2, #32
 80030a4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d105      	bne.n	80030ca <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c2:	f043 0201 	orr.w	r2, r3, #1
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f7fd ffce 	bl	800106c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80030d0:	e004      	b.n	80030dc <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	4798      	blx	r3
}
 80030dc:	bf00      	nop
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f7ff fca0 	bl	8002a38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030f8:	bf00      	nop
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003112:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800311e:	f043 0204 	orr.w	r2, r3, #4
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f7ff fc8f 	bl	8002a4a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800312c:	bf00      	nop
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003144:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <__NVIC_SetPriorityGrouping+0x44>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003150:	4013      	ands	r3, r2
 8003152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800315c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003166:	4a04      	ldr	r2, [pc, #16]	; (8003178 <__NVIC_SetPriorityGrouping+0x44>)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	60d3      	str	r3, [r2, #12]
}
 800316c:	bf00      	nop
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003180:	4b04      	ldr	r3, [pc, #16]	; (8003194 <__NVIC_GetPriorityGrouping+0x18>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	0a1b      	lsrs	r3, r3, #8
 8003186:	f003 0307 	and.w	r3, r3, #7
}
 800318a:	4618      	mov	r0, r3
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	e000ed00 	.word	0xe000ed00

08003198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	db0b      	blt.n	80031c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	f003 021f 	and.w	r2, r3, #31
 80031b0:	4906      	ldr	r1, [pc, #24]	; (80031cc <__NVIC_EnableIRQ+0x34>)
 80031b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b6:	095b      	lsrs	r3, r3, #5
 80031b8:	2001      	movs	r0, #1
 80031ba:	fa00 f202 	lsl.w	r2, r0, r2
 80031be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr
 80031cc:	e000e100 	.word	0xe000e100

080031d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	6039      	str	r1, [r7, #0]
 80031da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	db0a      	blt.n	80031fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	490c      	ldr	r1, [pc, #48]	; (800321c <__NVIC_SetPriority+0x4c>)
 80031ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ee:	0112      	lsls	r2, r2, #4
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	440b      	add	r3, r1
 80031f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031f8:	e00a      	b.n	8003210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	4908      	ldr	r1, [pc, #32]	; (8003220 <__NVIC_SetPriority+0x50>)
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	3b04      	subs	r3, #4
 8003208:	0112      	lsls	r2, r2, #4
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	440b      	add	r3, r1
 800320e:	761a      	strb	r2, [r3, #24]
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	e000e100 	.word	0xe000e100
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003224:	b480      	push	{r7}
 8003226:	b089      	sub	sp, #36	; 0x24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f1c3 0307 	rsb	r3, r3, #7
 800323e:	2b04      	cmp	r3, #4
 8003240:	bf28      	it	cs
 8003242:	2304      	movcs	r3, #4
 8003244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3304      	adds	r3, #4
 800324a:	2b06      	cmp	r3, #6
 800324c:	d902      	bls.n	8003254 <NVIC_EncodePriority+0x30>
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	3b03      	subs	r3, #3
 8003252:	e000      	b.n	8003256 <NVIC_EncodePriority+0x32>
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003258:	f04f 32ff 	mov.w	r2, #4294967295
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43da      	mvns	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	401a      	ands	r2, r3
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800326c:	f04f 31ff 	mov.w	r1, #4294967295
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	fa01 f303 	lsl.w	r3, r1, r3
 8003276:	43d9      	mvns	r1, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800327c:	4313      	orrs	r3, r2
         );
}
 800327e:	4618      	mov	r0, r3
 8003280:	3724      	adds	r7, #36	; 0x24
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr

08003288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b07      	cmp	r3, #7
 8003294:	d00f      	beq.n	80032b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b06      	cmp	r3, #6
 800329a:	d00c      	beq.n	80032b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b05      	cmp	r3, #5
 80032a0:	d009      	beq.n	80032b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d006      	beq.n	80032b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d003      	beq.n	80032b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80032ae:	21ac      	movs	r1, #172	; 0xac
 80032b0:	4804      	ldr	r0, [pc, #16]	; (80032c4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80032b2:	f7fe fb71 	bl	8001998 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff ff3c 	bl	8003134 <__NVIC_SetPriorityGrouping>
}
 80032bc:	bf00      	nop
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	0800b128 	.word	0x0800b128

080032c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
 80032d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b0f      	cmp	r3, #15
 80032de:	d903      	bls.n	80032e8 <HAL_NVIC_SetPriority+0x20>
 80032e0:	21c4      	movs	r1, #196	; 0xc4
 80032e2:	480e      	ldr	r0, [pc, #56]	; (800331c <HAL_NVIC_SetPriority+0x54>)
 80032e4:	f7fe fb58 	bl	8001998 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b0f      	cmp	r3, #15
 80032ec:	d903      	bls.n	80032f6 <HAL_NVIC_SetPriority+0x2e>
 80032ee:	21c5      	movs	r1, #197	; 0xc5
 80032f0:	480a      	ldr	r0, [pc, #40]	; (800331c <HAL_NVIC_SetPriority+0x54>)
 80032f2:	f7fe fb51 	bl	8001998 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032f6:	f7ff ff41 	bl	800317c <__NVIC_GetPriorityGrouping>
 80032fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	68b9      	ldr	r1, [r7, #8]
 8003300:	6978      	ldr	r0, [r7, #20]
 8003302:	f7ff ff8f 	bl	8003224 <NVIC_EncodePriority>
 8003306:	4602      	mov	r2, r0
 8003308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800330c:	4611      	mov	r1, r2
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff ff5e 	bl	80031d0 <__NVIC_SetPriority>
}
 8003314:	bf00      	nop
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	0800b128 	.word	0x0800b128

08003320 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800332a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332e:	2b00      	cmp	r3, #0
 8003330:	da03      	bge.n	800333a <HAL_NVIC_EnableIRQ+0x1a>
 8003332:	21d8      	movs	r1, #216	; 0xd8
 8003334:	4805      	ldr	r0, [pc, #20]	; (800334c <HAL_NVIC_EnableIRQ+0x2c>)
 8003336:	f7fe fb2f 	bl	8001998 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800333a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff ff2a 	bl	8003198 <__NVIC_EnableIRQ>
}
 8003344:	bf00      	nop
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	0800b128 	.word	0x0800b128

08003350 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e109      	b.n	8003576 <HAL_DMA_Init+0x226>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a86      	ldr	r2, [pc, #536]	; (8003580 <HAL_DMA_Init+0x230>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d03a      	beq.n	80033e2 <HAL_DMA_Init+0x92>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a84      	ldr	r2, [pc, #528]	; (8003584 <HAL_DMA_Init+0x234>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d035      	beq.n	80033e2 <HAL_DMA_Init+0x92>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a83      	ldr	r2, [pc, #524]	; (8003588 <HAL_DMA_Init+0x238>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d030      	beq.n	80033e2 <HAL_DMA_Init+0x92>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a81      	ldr	r2, [pc, #516]	; (800358c <HAL_DMA_Init+0x23c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d02b      	beq.n	80033e2 <HAL_DMA_Init+0x92>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a80      	ldr	r2, [pc, #512]	; (8003590 <HAL_DMA_Init+0x240>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d026      	beq.n	80033e2 <HAL_DMA_Init+0x92>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a7e      	ldr	r2, [pc, #504]	; (8003594 <HAL_DMA_Init+0x244>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d021      	beq.n	80033e2 <HAL_DMA_Init+0x92>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a7d      	ldr	r2, [pc, #500]	; (8003598 <HAL_DMA_Init+0x248>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d01c      	beq.n	80033e2 <HAL_DMA_Init+0x92>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a7b      	ldr	r2, [pc, #492]	; (800359c <HAL_DMA_Init+0x24c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d017      	beq.n	80033e2 <HAL_DMA_Init+0x92>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a7a      	ldr	r2, [pc, #488]	; (80035a0 <HAL_DMA_Init+0x250>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d012      	beq.n	80033e2 <HAL_DMA_Init+0x92>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a78      	ldr	r2, [pc, #480]	; (80035a4 <HAL_DMA_Init+0x254>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00d      	beq.n	80033e2 <HAL_DMA_Init+0x92>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a77      	ldr	r2, [pc, #476]	; (80035a8 <HAL_DMA_Init+0x258>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d008      	beq.n	80033e2 <HAL_DMA_Init+0x92>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a75      	ldr	r2, [pc, #468]	; (80035ac <HAL_DMA_Init+0x25c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d003      	beq.n	80033e2 <HAL_DMA_Init+0x92>
 80033da:	219a      	movs	r1, #154	; 0x9a
 80033dc:	4874      	ldr	r0, [pc, #464]	; (80035b0 <HAL_DMA_Init+0x260>)
 80033de:	f7fe fadb 	bl	8001998 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00c      	beq.n	8003404 <HAL_DMA_Init+0xb4>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b10      	cmp	r3, #16
 80033f0:	d008      	beq.n	8003404 <HAL_DMA_Init+0xb4>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033fa:	d003      	beq.n	8003404 <HAL_DMA_Init+0xb4>
 80033fc:	219b      	movs	r1, #155	; 0x9b
 80033fe:	486c      	ldr	r0, [pc, #432]	; (80035b0 <HAL_DMA_Init+0x260>)
 8003400:	f7fe faca 	bl	8001998 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b40      	cmp	r3, #64	; 0x40
 800340a:	d007      	beq.n	800341c <HAL_DMA_Init+0xcc>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_DMA_Init+0xcc>
 8003414:	219c      	movs	r1, #156	; 0x9c
 8003416:	4866      	ldr	r0, [pc, #408]	; (80035b0 <HAL_DMA_Init+0x260>)
 8003418:	f7fe fabe 	bl	8001998 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	2b80      	cmp	r3, #128	; 0x80
 8003422:	d007      	beq.n	8003434 <HAL_DMA_Init+0xe4>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_DMA_Init+0xe4>
 800342c:	219d      	movs	r1, #157	; 0x9d
 800342e:	4860      	ldr	r0, [pc, #384]	; (80035b0 <HAL_DMA_Init+0x260>)
 8003430:	f7fe fab2 	bl	8001998 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00d      	beq.n	8003458 <HAL_DMA_Init+0x108>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003444:	d008      	beq.n	8003458 <HAL_DMA_Init+0x108>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800344e:	d003      	beq.n	8003458 <HAL_DMA_Init+0x108>
 8003450:	219e      	movs	r1, #158	; 0x9e
 8003452:	4857      	ldr	r0, [pc, #348]	; (80035b0 <HAL_DMA_Init+0x260>)
 8003454:	f7fe faa0 	bl	8001998 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00d      	beq.n	800347c <HAL_DMA_Init+0x12c>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003468:	d008      	beq.n	800347c <HAL_DMA_Init+0x12c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003472:	d003      	beq.n	800347c <HAL_DMA_Init+0x12c>
 8003474:	219f      	movs	r1, #159	; 0x9f
 8003476:	484e      	ldr	r0, [pc, #312]	; (80035b0 <HAL_DMA_Init+0x260>)
 8003478:	f7fe fa8e 	bl	8001998 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d007      	beq.n	8003494 <HAL_DMA_Init+0x144>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2b20      	cmp	r3, #32
 800348a:	d003      	beq.n	8003494 <HAL_DMA_Init+0x144>
 800348c:	21a0      	movs	r1, #160	; 0xa0
 800348e:	4848      	ldr	r0, [pc, #288]	; (80035b0 <HAL_DMA_Init+0x260>)
 8003490:	f7fe fa82 	bl	8001998 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d012      	beq.n	80034c2 <HAL_DMA_Init+0x172>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a4:	d00d      	beq.n	80034c2 <HAL_DMA_Init+0x172>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ae:	d008      	beq.n	80034c2 <HAL_DMA_Init+0x172>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034b8:	d003      	beq.n	80034c2 <HAL_DMA_Init+0x172>
 80034ba:	21a1      	movs	r1, #161	; 0xa1
 80034bc:	483c      	ldr	r0, [pc, #240]	; (80035b0 <HAL_DMA_Init+0x260>)
 80034be:	f7fe fa6b 	bl	8001998 <assert_failed>

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	4b3a      	ldr	r3, [pc, #232]	; (80035b4 <HAL_DMA_Init+0x264>)
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d80f      	bhi.n	80034ee <HAL_DMA_Init+0x19e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	4b38      	ldr	r3, [pc, #224]	; (80035b8 <HAL_DMA_Init+0x268>)
 80034d6:	4413      	add	r3, r2
 80034d8:	4a38      	ldr	r2, [pc, #224]	; (80035bc <HAL_DMA_Init+0x26c>)
 80034da:	fba2 2303 	umull	r2, r3, r2, r3
 80034de:	091b      	lsrs	r3, r3, #4
 80034e0:	009a      	lsls	r2, r3, #2
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a35      	ldr	r2, [pc, #212]	; (80035c0 <HAL_DMA_Init+0x270>)
 80034ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80034ec:	e00e      	b.n	800350c <HAL_DMA_Init+0x1bc>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	4b33      	ldr	r3, [pc, #204]	; (80035c4 <HAL_DMA_Init+0x274>)
 80034f6:	4413      	add	r3, r2
 80034f8:	4a30      	ldr	r2, [pc, #192]	; (80035bc <HAL_DMA_Init+0x26c>)
 80034fa:	fba2 2303 	umull	r2, r3, r2, r3
 80034fe:	091b      	lsrs	r3, r3, #4
 8003500:	009a      	lsls	r2, r3, #2
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a2f      	ldr	r2, [pc, #188]	; (80035c8 <HAL_DMA_Init+0x278>)
 800350a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003526:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003530:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800353c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003548:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40026008 	.word	0x40026008
 8003584:	4002601c 	.word	0x4002601c
 8003588:	40026030 	.word	0x40026030
 800358c:	40026044 	.word	0x40026044
 8003590:	40026058 	.word	0x40026058
 8003594:	4002606c 	.word	0x4002606c
 8003598:	40026080 	.word	0x40026080
 800359c:	40026408 	.word	0x40026408
 80035a0:	4002641c 	.word	0x4002641c
 80035a4:	40026430 	.word	0x40026430
 80035a8:	40026444 	.word	0x40026444
 80035ac:	40026458 	.word	0x40026458
 80035b0:	0800b164 	.word	0x0800b164
 80035b4:	40026407 	.word	0x40026407
 80035b8:	bffd9ff8 	.word	0xbffd9ff8
 80035bc:	cccccccd 	.word	0xcccccccd
 80035c0:	40026000 	.word	0x40026000
 80035c4:	bffd9bf8 	.word	0xbffd9bf8
 80035c8:	40026400 	.word	0x40026400

080035cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_DMA_Start_IT+0x20>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ea:	d304      	bcc.n	80035f6 <HAL_DMA_Start_IT+0x2a>
 80035ec:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 80035f0:	482c      	ldr	r0, [pc, #176]	; (80036a4 <HAL_DMA_Start_IT+0xd8>)
 80035f2:	f7fe f9d1 	bl	8001998 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_DMA_Start_IT+0x38>
 8003600:	2302      	movs	r3, #2
 8003602:	e04b      	b.n	800369c <HAL_DMA_Start_IT+0xd0>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b01      	cmp	r3, #1
 8003616:	d13a      	bne.n	800368e <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0201 	bic.w	r2, r2, #1
 8003634:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f8e2 	bl	8003806 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	2b00      	cmp	r3, #0
 8003648:	d008      	beq.n	800365c <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 020e 	orr.w	r2, r2, #14
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	e00f      	b.n	800367c <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0204 	bic.w	r2, r2, #4
 800366a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 020a 	orr.w	r2, r2, #10
 800367a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	e005      	b.n	800369a <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003696:	2302      	movs	r3, #2
 8003698:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800369a:	7dfb      	ldrb	r3, [r7, #23]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	0800b164 	.word	0x0800b164

080036a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	f003 031c 	and.w	r3, r3, #28
 80036c8:	2204      	movs	r2, #4
 80036ca:	409a      	lsls	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d026      	beq.n	8003722 <HAL_DMA_IRQHandler+0x7a>
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d021      	beq.n	8003722 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0320 	and.w	r3, r3, #32
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d107      	bne.n	80036fc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0204 	bic.w	r2, r2, #4
 80036fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	f003 021c 	and.w	r2, r3, #28
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003708:	2104      	movs	r1, #4
 800370a:	fa01 f202 	lsl.w	r2, r1, r2
 800370e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	2b00      	cmp	r3, #0
 8003716:	d071      	beq.n	80037fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003720:	e06c      	b.n	80037fc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f003 031c 	and.w	r3, r3, #28
 800372a:	2202      	movs	r2, #2
 800372c:	409a      	lsls	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4013      	ands	r3, r2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d02e      	beq.n	8003794 <HAL_DMA_IRQHandler+0xec>
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d029      	beq.n	8003794 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10b      	bne.n	8003766 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 020a 	bic.w	r2, r2, #10
 800375c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	f003 021c 	and.w	r2, r3, #28
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003772:	2102      	movs	r1, #2
 8003774:	fa01 f202 	lsl.w	r2, r1, r2
 8003778:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003786:	2b00      	cmp	r3, #0
 8003788:	d038      	beq.n	80037fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003792:	e033      	b.n	80037fc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	f003 031c 	and.w	r3, r3, #28
 800379c:	2208      	movs	r2, #8
 800379e:	409a      	lsls	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d02a      	beq.n	80037fe <HAL_DMA_IRQHandler+0x156>
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d025      	beq.n	80037fe <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 020e 	bic.w	r2, r2, #14
 80037c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	f003 021c 	and.w	r2, r3, #28
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ce:	2101      	movs	r1, #1
 80037d0:	fa01 f202 	lsl.w	r2, r1, r2
 80037d4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d004      	beq.n	80037fe <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80037fc:	bf00      	nop
 80037fe:	bf00      	nop
}
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003806:	b480      	push	{r7}
 8003808:	b085      	sub	sp, #20
 800380a:	af00      	add	r7, sp, #0
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	607a      	str	r2, [r7, #4]
 8003812:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	f003 021c 	and.w	r2, r3, #28
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003820:	2101      	movs	r1, #1
 8003822:	fa01 f202 	lsl.w	r2, r1, r2
 8003826:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b10      	cmp	r3, #16
 8003836:	d108      	bne.n	800384a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003848:	e007      	b.n	800385a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	60da      	str	r2, [r3, #12]
}
 800385a:	bf00      	nop
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr

08003864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800386e:	2300      	movs	r3, #0
 8003870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8003876:	2300      	movs	r3, #0
 8003878:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a3f      	ldr	r2, [pc, #252]	; (800397c <HAL_GPIO_Init+0x118>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d01f      	beq.n	80038c2 <HAL_GPIO_Init+0x5e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a3e      	ldr	r2, [pc, #248]	; (8003980 <HAL_GPIO_Init+0x11c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d01b      	beq.n	80038c2 <HAL_GPIO_Init+0x5e>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a3d      	ldr	r2, [pc, #244]	; (8003984 <HAL_GPIO_Init+0x120>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d017      	beq.n	80038c2 <HAL_GPIO_Init+0x5e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a3c      	ldr	r2, [pc, #240]	; (8003988 <HAL_GPIO_Init+0x124>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d013      	beq.n	80038c2 <HAL_GPIO_Init+0x5e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a3b      	ldr	r2, [pc, #236]	; (800398c <HAL_GPIO_Init+0x128>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d00f      	beq.n	80038c2 <HAL_GPIO_Init+0x5e>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a3a      	ldr	r2, [pc, #232]	; (8003990 <HAL_GPIO_Init+0x12c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d00b      	beq.n	80038c2 <HAL_GPIO_Init+0x5e>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a39      	ldr	r2, [pc, #228]	; (8003994 <HAL_GPIO_Init+0x130>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d007      	beq.n	80038c2 <HAL_GPIO_Init+0x5e>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a38      	ldr	r2, [pc, #224]	; (8003998 <HAL_GPIO_Init+0x134>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_Init+0x5e>
 80038ba:	21b9      	movs	r1, #185	; 0xb9
 80038bc:	4837      	ldr	r0, [pc, #220]	; (800399c <HAL_GPIO_Init+0x138>)
 80038be:	f7fe f86b 	bl	8001998 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_GPIO_Init+0x74>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	0c1b      	lsrs	r3, r3, #16
 80038d2:	041b      	lsls	r3, r3, #16
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <HAL_GPIO_Init+0x7c>
 80038d8:	21ba      	movs	r1, #186	; 0xba
 80038da:	4830      	ldr	r0, [pc, #192]	; (800399c <HAL_GPIO_Init+0x138>)
 80038dc:	f7fe f85c 	bl	8001998 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d035      	beq.n	8003954 <HAL_GPIO_Init+0xf0>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d031      	beq.n	8003954 <HAL_GPIO_Init+0xf0>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b11      	cmp	r3, #17
 80038f6:	d02d      	beq.n	8003954 <HAL_GPIO_Init+0xf0>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d029      	beq.n	8003954 <HAL_GPIO_Init+0xf0>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2b12      	cmp	r3, #18
 8003906:	d025      	beq.n	8003954 <HAL_GPIO_Init+0xf0>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	4a24      	ldr	r2, [pc, #144]	; (80039a0 <HAL_GPIO_Init+0x13c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d020      	beq.n	8003954 <HAL_GPIO_Init+0xf0>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	4a23      	ldr	r2, [pc, #140]	; (80039a4 <HAL_GPIO_Init+0x140>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d01b      	beq.n	8003954 <HAL_GPIO_Init+0xf0>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	4a21      	ldr	r2, [pc, #132]	; (80039a8 <HAL_GPIO_Init+0x144>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d016      	beq.n	8003954 <HAL_GPIO_Init+0xf0>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	4a20      	ldr	r2, [pc, #128]	; (80039ac <HAL_GPIO_Init+0x148>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d011      	beq.n	8003954 <HAL_GPIO_Init+0xf0>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	4a1e      	ldr	r2, [pc, #120]	; (80039b0 <HAL_GPIO_Init+0x14c>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00c      	beq.n	8003954 <HAL_GPIO_Init+0xf0>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	4a1d      	ldr	r2, [pc, #116]	; (80039b4 <HAL_GPIO_Init+0x150>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d007      	beq.n	8003954 <HAL_GPIO_Init+0xf0>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b03      	cmp	r3, #3
 800394a:	d003      	beq.n	8003954 <HAL_GPIO_Init+0xf0>
 800394c:	21bb      	movs	r1, #187	; 0xbb
 800394e:	4813      	ldr	r0, [pc, #76]	; (800399c <HAL_GPIO_Init+0x138>)
 8003950:	f7fe f822 	bl	8001998 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 81e4 	beq.w	8003d26 <HAL_GPIO_Init+0x4c2>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2b01      	cmp	r3, #1
 8003964:	f000 81df 	beq.w	8003d26 <HAL_GPIO_Init+0x4c2>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	2b02      	cmp	r3, #2
 800396e:	f000 81da 	beq.w	8003d26 <HAL_GPIO_Init+0x4c2>
 8003972:	21bc      	movs	r1, #188	; 0xbc
 8003974:	4809      	ldr	r0, [pc, #36]	; (800399c <HAL_GPIO_Init+0x138>)
 8003976:	f7fe f80f 	bl	8001998 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800397a:	e1d4      	b.n	8003d26 <HAL_GPIO_Init+0x4c2>
 800397c:	40020000 	.word	0x40020000
 8003980:	40020400 	.word	0x40020400
 8003984:	40020800 	.word	0x40020800
 8003988:	40020c00 	.word	0x40020c00
 800398c:	40021000 	.word	0x40021000
 8003990:	40021800 	.word	0x40021800
 8003994:	40021c00 	.word	0x40021c00
 8003998:	40021400 	.word	0x40021400
 800399c:	0800b19c 	.word	0x0800b19c
 80039a0:	10110000 	.word	0x10110000
 80039a4:	10210000 	.word	0x10210000
 80039a8:	10310000 	.word	0x10310000
 80039ac:	10120000 	.word	0x10120000
 80039b0:	10220000 	.word	0x10220000
 80039b4:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	2101      	movs	r1, #1
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	fa01 f303 	lsl.w	r3, r1, r3
 80039c4:	4013      	ands	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 81a8 	beq.w	8003d20 <HAL_GPIO_Init+0x4bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d003      	beq.n	80039e0 <HAL_GPIO_Init+0x17c>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b12      	cmp	r3, #18
 80039de:	d14f      	bne.n	8003a80 <HAL_GPIO_Init+0x21c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a92      	ldr	r2, [pc, #584]	; (8003c2c <HAL_GPIO_Init+0x3c8>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d01f      	beq.n	8003a28 <HAL_GPIO_Init+0x1c4>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a91      	ldr	r2, [pc, #580]	; (8003c30 <HAL_GPIO_Init+0x3cc>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d01b      	beq.n	8003a28 <HAL_GPIO_Init+0x1c4>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a90      	ldr	r2, [pc, #576]	; (8003c34 <HAL_GPIO_Init+0x3d0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d017      	beq.n	8003a28 <HAL_GPIO_Init+0x1c4>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a8f      	ldr	r2, [pc, #572]	; (8003c38 <HAL_GPIO_Init+0x3d4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d013      	beq.n	8003a28 <HAL_GPIO_Init+0x1c4>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a8e      	ldr	r2, [pc, #568]	; (8003c3c <HAL_GPIO_Init+0x3d8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00f      	beq.n	8003a28 <HAL_GPIO_Init+0x1c4>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a8d      	ldr	r2, [pc, #564]	; (8003c40 <HAL_GPIO_Init+0x3dc>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00b      	beq.n	8003a28 <HAL_GPIO_Init+0x1c4>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a8c      	ldr	r2, [pc, #560]	; (8003c44 <HAL_GPIO_Init+0x3e0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d007      	beq.n	8003a28 <HAL_GPIO_Init+0x1c4>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a8b      	ldr	r2, [pc, #556]	; (8003c48 <HAL_GPIO_Init+0x3e4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d003      	beq.n	8003a28 <HAL_GPIO_Init+0x1c4>
 8003a20:	21cb      	movs	r1, #203	; 0xcb
 8003a22:	488a      	ldr	r0, [pc, #552]	; (8003c4c <HAL_GPIO_Init+0x3e8>)
 8003a24:	f7fd ffb8 	bl	8001998 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	2b0f      	cmp	r3, #15
 8003a2e:	d903      	bls.n	8003a38 <HAL_GPIO_Init+0x1d4>
 8003a30:	21cc      	movs	r1, #204	; 0xcc
 8003a32:	4886      	ldr	r0, [pc, #536]	; (8003c4c <HAL_GPIO_Init+0x3e8>)
 8003a34:	f7fd ffb0 	bl	8001998 <assert_failed>
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	08da      	lsrs	r2, r3, #3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3208      	adds	r2, #8
 8003a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	220f      	movs	r2, #15
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	691a      	ldr	r2, [r3, #16]
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	08da      	lsrs	r2, r3, #3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3208      	adds	r2, #8
 8003a7a:	6939      	ldr	r1, [r7, #16]
 8003a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	2203      	movs	r2, #3
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	43db      	mvns	r3, r3
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4013      	ands	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f003 0203 	and.w	r2, r3, #3
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d00b      	beq.n	8003ad4 <HAL_GPIO_Init+0x270>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d007      	beq.n	8003ad4 <HAL_GPIO_Init+0x270>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ac8:	2b11      	cmp	r3, #17
 8003aca:	d003      	beq.n	8003ad4 <HAL_GPIO_Init+0x270>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b12      	cmp	r3, #18
 8003ad2:	d144      	bne.n	8003b5e <HAL_GPIO_Init+0x2fa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00f      	beq.n	8003afc <HAL_GPIO_Init+0x298>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d00b      	beq.n	8003afc <HAL_GPIO_Init+0x298>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d007      	beq.n	8003afc <HAL_GPIO_Init+0x298>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d003      	beq.n	8003afc <HAL_GPIO_Init+0x298>
 8003af4:	21e1      	movs	r1, #225	; 0xe1
 8003af6:	4855      	ldr	r0, [pc, #340]	; (8003c4c <HAL_GPIO_Init+0x3e8>)
 8003af8:	f7fd ff4e 	bl	8001998 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	2203      	movs	r2, #3
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4013      	ands	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003b32:	2201      	movs	r2, #1
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	091b      	lsrs	r3, r3, #4
 8003b48:	f003 0201 	and.w	r2, r3, #1
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	2203      	movs	r2, #3
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4013      	ands	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 80c2 	beq.w	8003d20 <HAL_GPIO_Init+0x4bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b9c:	4b2c      	ldr	r3, [pc, #176]	; (8003c50 <HAL_GPIO_Init+0x3ec>)
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	4a2b      	ldr	r2, [pc, #172]	; (8003c50 <HAL_GPIO_Init+0x3ec>)
 8003ba2:	f043 0301 	orr.w	r3, r3, #1
 8003ba6:	6213      	str	r3, [r2, #32]
 8003ba8:	4b29      	ldr	r3, [pc, #164]	; (8003c50 <HAL_GPIO_Init+0x3ec>)
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	60bb      	str	r3, [r7, #8]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8003bb4:	4a27      	ldr	r2, [pc, #156]	; (8003c54 <HAL_GPIO_Init+0x3f0>)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	089b      	lsrs	r3, r3, #2
 8003bba:	3302      	adds	r3, #2
 8003bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bc0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f003 0303 	and.w	r3, r3, #3
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	220f      	movs	r2, #15
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a14      	ldr	r2, [pc, #80]	; (8003c2c <HAL_GPIO_Init+0x3c8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d03b      	beq.n	8003c58 <HAL_GPIO_Init+0x3f4>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a13      	ldr	r2, [pc, #76]	; (8003c30 <HAL_GPIO_Init+0x3cc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d01f      	beq.n	8003c28 <HAL_GPIO_Init+0x3c4>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a12      	ldr	r2, [pc, #72]	; (8003c34 <HAL_GPIO_Init+0x3d0>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d019      	beq.n	8003c24 <HAL_GPIO_Init+0x3c0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a11      	ldr	r2, [pc, #68]	; (8003c38 <HAL_GPIO_Init+0x3d4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d013      	beq.n	8003c20 <HAL_GPIO_Init+0x3bc>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a10      	ldr	r2, [pc, #64]	; (8003c3c <HAL_GPIO_Init+0x3d8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d00d      	beq.n	8003c1c <HAL_GPIO_Init+0x3b8>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a11      	ldr	r2, [pc, #68]	; (8003c48 <HAL_GPIO_Init+0x3e4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d007      	beq.n	8003c18 <HAL_GPIO_Init+0x3b4>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a0d      	ldr	r2, [pc, #52]	; (8003c40 <HAL_GPIO_Init+0x3dc>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d101      	bne.n	8003c14 <HAL_GPIO_Init+0x3b0>
 8003c10:	2306      	movs	r3, #6
 8003c12:	e022      	b.n	8003c5a <HAL_GPIO_Init+0x3f6>
 8003c14:	2307      	movs	r3, #7
 8003c16:	e020      	b.n	8003c5a <HAL_GPIO_Init+0x3f6>
 8003c18:	2305      	movs	r3, #5
 8003c1a:	e01e      	b.n	8003c5a <HAL_GPIO_Init+0x3f6>
 8003c1c:	2304      	movs	r3, #4
 8003c1e:	e01c      	b.n	8003c5a <HAL_GPIO_Init+0x3f6>
 8003c20:	2303      	movs	r3, #3
 8003c22:	e01a      	b.n	8003c5a <HAL_GPIO_Init+0x3f6>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e018      	b.n	8003c5a <HAL_GPIO_Init+0x3f6>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e016      	b.n	8003c5a <HAL_GPIO_Init+0x3f6>
 8003c2c:	40020000 	.word	0x40020000
 8003c30:	40020400 	.word	0x40020400
 8003c34:	40020800 	.word	0x40020800
 8003c38:	40020c00 	.word	0x40020c00
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	40021800 	.word	0x40021800
 8003c44:	40021c00 	.word	0x40021c00
 8003c48:	40021400 	.word	0x40021400
 8003c4c:	0800b19c 	.word	0x0800b19c
 8003c50:	40023800 	.word	0x40023800
 8003c54:	40010000 	.word	0x40010000
 8003c58:	2300      	movs	r3, #0
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	f002 0203 	and.w	r2, r2, #3
 8003c60:	0092      	lsls	r2, r2, #2
 8003c62:	4093      	lsls	r3, r2
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003c6a:	4935      	ldr	r1, [pc, #212]	; (8003d40 <HAL_GPIO_Init+0x4dc>)
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	089b      	lsrs	r3, r3, #2
 8003c70:	3302      	adds	r3, #2
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c78:	4b32      	ldr	r3, [pc, #200]	; (8003d44 <HAL_GPIO_Init+0x4e0>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	43db      	mvns	r3, r3
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4013      	ands	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <HAL_GPIO_Init+0x438>
        {
          SET_BIT(temp, iocurrent); 
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003c9c:	4a29      	ldr	r2, [pc, #164]	; (8003d44 <HAL_GPIO_Init+0x4e0>)
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ca2:	4b28      	ldr	r3, [pc, #160]	; (8003d44 <HAL_GPIO_Init+0x4e0>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	43db      	mvns	r3, r3
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_GPIO_Init+0x462>
        {
          SET_BIT(temp, iocurrent); 
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003cc6:	4a1f      	ldr	r2, [pc, #124]	; (8003d44 <HAL_GPIO_Init+0x4e0>)
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ccc:	4b1d      	ldr	r3, [pc, #116]	; (8003d44 <HAL_GPIO_Init+0x4e0>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <HAL_GPIO_Init+0x48c>
        {
          SET_BIT(temp, iocurrent); 
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003cf0:	4a14      	ldr	r2, [pc, #80]	; (8003d44 <HAL_GPIO_Init+0x4e0>)
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cf6:	4b13      	ldr	r3, [pc, #76]	; (8003d44 <HAL_GPIO_Init+0x4e0>)
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4013      	ands	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_GPIO_Init+0x4b6>
        {
          SET_BIT(temp, iocurrent); 
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003d1a:	4a0a      	ldr	r2, [pc, #40]	; (8003d44 <HAL_GPIO_Init+0x4e0>)
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	3301      	adds	r3, #1
 8003d24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f47f ae41 	bne.w	80039b8 <HAL_GPIO_Init+0x154>
  } 
}
 8003d36:	bf00      	nop
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40010000 	.word	0x40010000
 8003d44:	40010400 	.word	0x40010400

08003d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	807b      	strh	r3, [r7, #2]
 8003d54:	4613      	mov	r3, r2
 8003d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003d58:	887b      	ldrh	r3, [r7, #2]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d004      	beq.n	8003d68 <HAL_GPIO_WritePin+0x20>
 8003d5e:	887b      	ldrh	r3, [r7, #2]
 8003d60:	0c1b      	lsrs	r3, r3, #16
 8003d62:	041b      	lsls	r3, r3, #16
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d004      	beq.n	8003d72 <HAL_GPIO_WritePin+0x2a>
 8003d68:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8003d6c:	480e      	ldr	r0, [pc, #56]	; (8003da8 <HAL_GPIO_WritePin+0x60>)
 8003d6e:	f7fd fe13 	bl	8001998 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003d72:	787b      	ldrb	r3, [r7, #1]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <HAL_GPIO_WritePin+0x40>
 8003d78:	787b      	ldrb	r3, [r7, #1]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d004      	beq.n	8003d88 <HAL_GPIO_WritePin+0x40>
 8003d7e:	f240 11a5 	movw	r1, #421	; 0x1a5
 8003d82:	4809      	ldr	r0, [pc, #36]	; (8003da8 <HAL_GPIO_WritePin+0x60>)
 8003d84:	f7fd fe08 	bl	8001998 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003d88:	787b      	ldrb	r3, [r7, #1]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d8e:	887a      	ldrh	r2, [r7, #2]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8003d94:	e003      	b.n	8003d9e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8003d96:	887b      	ldrh	r3, [r7, #2]
 8003d98:	041a      	lsls	r2, r3, #16
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	619a      	str	r2, [r3, #24]
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	0800b19c 	.word	0x0800b19c

08003dac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8003db6:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003db8:	695a      	ldr	r2, [r3, #20]
 8003dba:	88fb      	ldrh	r3, [r7, #6]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d006      	beq.n	8003dd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003dc2:	4a05      	ldr	r2, [pc, #20]	; (8003dd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dc4:	88fb      	ldrh	r3, [r7, #6]
 8003dc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003dc8:	88fb      	ldrh	r3, [r7, #6]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fd f854 	bl	8000e78 <HAL_GPIO_EXTI_Callback>
  }
}
 8003dd0:	bf00      	nop
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40010400 	.word	0x40010400

08003ddc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e19b      	b.n	8004126 <HAL_I2C_Init+0x34a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a98      	ldr	r2, [pc, #608]	; (8004054 <HAL_I2C_Init+0x278>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d009      	beq.n	8003e0c <HAL_I2C_Init+0x30>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a96      	ldr	r2, [pc, #600]	; (8004058 <HAL_I2C_Init+0x27c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d004      	beq.n	8003e0c <HAL_I2C_Init+0x30>
 8003e02:	f240 11bb 	movw	r1, #443	; 0x1bb
 8003e06:	4895      	ldr	r0, [pc, #596]	; (800405c <HAL_I2C_Init+0x280>)
 8003e08:	f7fd fdc6 	bl	8001998 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d004      	beq.n	8003e1e <HAL_I2C_Init+0x42>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	4a91      	ldr	r2, [pc, #580]	; (8004060 <HAL_I2C_Init+0x284>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d904      	bls.n	8003e28 <HAL_I2C_Init+0x4c>
 8003e1e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8003e22:	488e      	ldr	r0, [pc, #568]	; (800405c <HAL_I2C_Init+0x280>)
 8003e24:	f7fd fdb8 	bl	8001998 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d009      	beq.n	8003e44 <HAL_I2C_Init+0x68>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e38:	d004      	beq.n	8003e44 <HAL_I2C_Init+0x68>
 8003e3a:	f240 11bd 	movw	r1, #445	; 0x1bd
 8003e3e:	4887      	ldr	r0, [pc, #540]	; (800405c <HAL_I2C_Init+0x280>)
 8003e40:	f7fd fdaa 	bl	8001998 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e4c:	f023 0303 	bic.w	r3, r3, #3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d004      	beq.n	8003e5e <HAL_I2C_Init+0x82>
 8003e54:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8003e58:	4880      	ldr	r0, [pc, #512]	; (800405c <HAL_I2C_Init+0x280>)
 8003e5a:	f7fd fd9d 	bl	8001998 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e66:	d009      	beq.n	8003e7c <HAL_I2C_Init+0xa0>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e70:	d004      	beq.n	8003e7c <HAL_I2C_Init+0xa0>
 8003e72:	f240 11bf 	movw	r1, #447	; 0x1bf
 8003e76:	4879      	ldr	r0, [pc, #484]	; (800405c <HAL_I2C_Init+0x280>)
 8003e78:	f7fd fd8e 	bl	8001998 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_I2C_Init+0xba>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d004      	beq.n	8003e96 <HAL_I2C_Init+0xba>
 8003e8c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8003e90:	4872      	ldr	r0, [pc, #456]	; (800405c <HAL_I2C_Init+0x280>)
 8003e92:	f7fd fd81 	bl	8001998 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d004      	beq.n	8003eac <HAL_I2C_Init+0xd0>
 8003ea2:	f240 11c1 	movw	r1, #449	; 0x1c1
 8003ea6:	486d      	ldr	r0, [pc, #436]	; (800405c <HAL_I2C_Init+0x280>)
 8003ea8:	f7fd fd76 	bl	8001998 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <HAL_I2C_Init+0xea>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	2b40      	cmp	r3, #64	; 0x40
 8003eba:	d004      	beq.n	8003ec6 <HAL_I2C_Init+0xea>
 8003ebc:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8003ec0:	4866      	ldr	r0, [pc, #408]	; (800405c <HAL_I2C_Init+0x280>)
 8003ec2:	f7fd fd69 	bl	8001998 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d008      	beq.n	8003ee0 <HAL_I2C_Init+0x104>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	2b80      	cmp	r3, #128	; 0x80
 8003ed4:	d004      	beq.n	8003ee0 <HAL_I2C_Init+0x104>
 8003ed6:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003eda:	4860      	ldr	r0, [pc, #384]	; (800405c <HAL_I2C_Init+0x280>)
 8003edc:	f7fd fd5c 	bl	8001998 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d106      	bne.n	8003efa <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7fd fc6f 	bl	80017d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2224      	movs	r2, #36	; 0x24
 8003efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0201 	bic.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f12:	f001 fdfd 	bl	8005b10 <HAL_RCC_GetPCLK1Freq>
 8003f16:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	4a51      	ldr	r2, [pc, #324]	; (8004064 <HAL_I2C_Init+0x288>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d807      	bhi.n	8003f32 <HAL_I2C_Init+0x156>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4a50      	ldr	r2, [pc, #320]	; (8004068 <HAL_I2C_Init+0x28c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	bf94      	ite	ls
 8003f2a:	2301      	movls	r3, #1
 8003f2c:	2300      	movhi	r3, #0
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	e006      	b.n	8003f40 <HAL_I2C_Init+0x164>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4a4d      	ldr	r2, [pc, #308]	; (800406c <HAL_I2C_Init+0x290>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	bf94      	ite	ls
 8003f3a:	2301      	movls	r3, #1
 8003f3c:	2300      	movhi	r3, #0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <HAL_I2C_Init+0x16c>
  {
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e0ee      	b.n	8004126 <HAL_I2C_Init+0x34a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4a49      	ldr	r2, [pc, #292]	; (8004070 <HAL_I2C_Init+0x294>)
 8003f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f50:	0c9b      	lsrs	r3, r3, #18
 8003f52:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	4a3b      	ldr	r2, [pc, #236]	; (8004064 <HAL_I2C_Init+0x288>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d802      	bhi.n	8003f82 <HAL_I2C_Init+0x1a6>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	e009      	b.n	8003f96 <HAL_I2C_Init+0x1ba>
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f88:	fb02 f303 	mul.w	r3, r2, r3
 8003f8c:	4a39      	ldr	r2, [pc, #228]	; (8004074 <HAL_I2C_Init+0x298>)
 8003f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f92:	099b      	lsrs	r3, r3, #6
 8003f94:	3301      	adds	r3, #1
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6812      	ldr	r2, [r2, #0]
 8003f9a:	430b      	orrs	r3, r1
 8003f9c:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fa8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	492c      	ldr	r1, [pc, #176]	; (8004064 <HAL_I2C_Init+0x288>)
 8003fb2:	428b      	cmp	r3, r1
 8003fb4:	d80d      	bhi.n	8003fd2 <HAL_I2C_Init+0x1f6>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	1e59      	subs	r1, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	bf38      	it	cc
 8003fce:	2304      	movcc	r3, #4
 8003fd0:	e062      	b.n	8004098 <HAL_I2C_Init+0x2bc>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d111      	bne.n	8003ffe <HAL_I2C_Init+0x222>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	1e58      	subs	r0, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6859      	ldr	r1, [r3, #4]
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	440b      	add	r3, r1
 8003fe8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fec:	3301      	adds	r3, #1
 8003fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	bf0c      	ite	eq
 8003ff6:	2301      	moveq	r3, #1
 8003ff8:	2300      	movne	r3, #0
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	e012      	b.n	8004024 <HAL_I2C_Init+0x248>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	1e58      	subs	r0, r3, #1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6859      	ldr	r1, [r3, #4]
 8004006:	460b      	mov	r3, r1
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	0099      	lsls	r1, r3, #2
 800400e:	440b      	add	r3, r1
 8004010:	fbb0 f3f3 	udiv	r3, r0, r3
 8004014:	3301      	adds	r3, #1
 8004016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800401a:	2b00      	cmp	r3, #0
 800401c:	bf0c      	ite	eq
 800401e:	2301      	moveq	r3, #1
 8004020:	2300      	movne	r3, #0
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <HAL_I2C_Init+0x250>
 8004028:	2301      	movs	r3, #1
 800402a:	e035      	b.n	8004098 <HAL_I2C_Init+0x2bc>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d121      	bne.n	8004078 <HAL_I2C_Init+0x29c>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	1e58      	subs	r0, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6859      	ldr	r1, [r3, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	440b      	add	r3, r1
 8004042:	fbb0 f3f3 	udiv	r3, r0, r3
 8004046:	3301      	adds	r3, #1
 8004048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800404c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004050:	e022      	b.n	8004098 <HAL_I2C_Init+0x2bc>
 8004052:	bf00      	nop
 8004054:	40005400 	.word	0x40005400
 8004058:	40005800 	.word	0x40005800
 800405c:	0800b1d8 	.word	0x0800b1d8
 8004060:	00061a80 	.word	0x00061a80
 8004064:	000186a0 	.word	0x000186a0
 8004068:	001e847f 	.word	0x001e847f
 800406c:	003d08ff 	.word	0x003d08ff
 8004070:	431bde83 	.word	0x431bde83
 8004074:	10624dd3 	.word	0x10624dd3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	1e58      	subs	r0, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6859      	ldr	r1, [r3, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	0099      	lsls	r1, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	fbb0 f3f3 	udiv	r3, r0, r3
 800408e:	3301      	adds	r3, #1
 8004090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004094:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	6809      	ldr	r1, [r1, #0]
 800409c:	4313      	orrs	r3, r2
 800409e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69da      	ldr	r2, [r3, #28]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6911      	ldr	r1, [r2, #16]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	68d2      	ldr	r2, [r2, #12]
 80040d2:	4311      	orrs	r1, r2
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6812      	ldr	r2, [r2, #0]
 80040d8:	430b      	orrs	r3, r1
 80040da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695a      	ldr	r2, [r3, #20]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0201 	orr.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2220      	movs	r2, #32
 8004112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop

08004130 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af02      	add	r7, sp, #8
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	607a      	str	r2, [r7, #4]
 800413a:	461a      	mov	r2, r3
 800413c:	460b      	mov	r3, r1
 800413e:	817b      	strh	r3, [r7, #10]
 8004140:	4613      	mov	r3, r2
 8004142:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004144:	f7fe f92e 	bl	80023a4 <HAL_GetTick>
 8004148:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b20      	cmp	r3, #32
 8004154:	f040 80e0 	bne.w	8004318 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	2319      	movs	r3, #25
 800415e:	2201      	movs	r2, #1
 8004160:	4970      	ldr	r1, [pc, #448]	; (8004324 <HAL_I2C_Master_Transmit+0x1f4>)
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 fc5a 	bl	8004a1c <I2C_WaitOnFlagUntilTimeout>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800416e:	2302      	movs	r3, #2
 8004170:	e0d3      	b.n	800431a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_I2C_Master_Transmit+0x50>
 800417c:	2302      	movs	r3, #2
 800417e:	e0cc      	b.n	800431a <HAL_I2C_Master_Transmit+0x1ea>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b01      	cmp	r3, #1
 8004194:	d007      	beq.n	80041a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 0201 	orr.w	r2, r2, #1
 80041a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2221      	movs	r2, #33	; 0x21
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2210      	movs	r2, #16
 80041c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	893a      	ldrh	r2, [r7, #8]
 80041d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4a50      	ldr	r2, [pc, #320]	; (8004328 <HAL_I2C_Master_Transmit+0x1f8>)
 80041e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80041e8:	8979      	ldrh	r1, [r7, #10]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	6a3a      	ldr	r2, [r7, #32]
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 face 	bl	8004790 <I2C_MasterRequestWrite>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e08d      	b.n	800431a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041fe:	2300      	movs	r3, #0
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	613b      	str	r3, [r7, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004214:	e066      	b.n	80042e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	6a39      	ldr	r1, [r7, #32]
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 fcd4 	bl	8004bc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00d      	beq.n	8004242 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	2b04      	cmp	r3, #4
 800422c:	d107      	bne.n	800423e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800423c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e06b      	b.n	800431a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	781a      	ldrb	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425c:	b29b      	uxth	r3, r3
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426a:	3b01      	subs	r3, #1
 800426c:	b29a      	uxth	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b04      	cmp	r3, #4
 800427e:	d11b      	bne.n	80042b8 <HAL_I2C_Master_Transmit+0x188>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004284:	2b00      	cmp	r3, #0
 8004286:	d017      	beq.n	80042b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	781a      	ldrb	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	6a39      	ldr	r1, [r7, #32]
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 fcc4 	bl	8004c4a <I2C_WaitOnBTFFlagUntilTimeout>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00d      	beq.n	80042e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d107      	bne.n	80042e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e01a      	b.n	800431a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d194      	bne.n	8004216 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2220      	movs	r2, #32
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004314:	2300      	movs	r3, #0
 8004316:	e000      	b.n	800431a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004318:	2302      	movs	r3, #2
  }
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	00100002 	.word	0x00100002
 8004328:	ffff0000 	.word	0xffff0000

0800432c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08c      	sub	sp, #48	; 0x30
 8004330:	af02      	add	r7, sp, #8
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	4608      	mov	r0, r1
 8004336:	4611      	mov	r1, r2
 8004338:	461a      	mov	r2, r3
 800433a:	4603      	mov	r3, r0
 800433c:	817b      	strh	r3, [r7, #10]
 800433e:	460b      	mov	r3, r1
 8004340:	813b      	strh	r3, [r7, #8]
 8004342:	4613      	mov	r3, r2
 8004344:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004346:	f7fe f82d 	bl	80023a4 <HAL_GetTick>
 800434a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800434c:	88fb      	ldrh	r3, [r7, #6]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d007      	beq.n	8004362 <HAL_I2C_Mem_Read+0x36>
 8004352:	88fb      	ldrh	r3, [r7, #6]
 8004354:	2b10      	cmp	r3, #16
 8004356:	d004      	beq.n	8004362 <HAL_I2C_Mem_Read+0x36>
 8004358:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 800435c:	4881      	ldr	r0, [pc, #516]	; (8004564 <HAL_I2C_Mem_Read+0x238>)
 800435e:	f7fd fb1b 	bl	8001998 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b20      	cmp	r3, #32
 800436c:	f040 8209 	bne.w	8004782 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	2319      	movs	r3, #25
 8004376:	2201      	movs	r2, #1
 8004378:	497b      	ldr	r1, [pc, #492]	; (8004568 <HAL_I2C_Mem_Read+0x23c>)
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 fb4e 	bl	8004a1c <I2C_WaitOnFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 8004386:	2302      	movs	r3, #2
 8004388:	e1fc      	b.n	8004784 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_I2C_Mem_Read+0x6c>
 8004394:	2302      	movs	r3, #2
 8004396:	e1f5      	b.n	8004784 <HAL_I2C_Mem_Read+0x458>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d007      	beq.n	80043be <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0201 	orr.w	r2, r2, #1
 80043bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043cc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2222      	movs	r2, #34	; 0x22
 80043d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2240      	movs	r2, #64	; 0x40
 80043da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80043ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4a5b      	ldr	r2, [pc, #364]	; (800456c <HAL_I2C_Mem_Read+0x240>)
 80043fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004400:	88f8      	ldrh	r0, [r7, #6]
 8004402:	893a      	ldrh	r2, [r7, #8]
 8004404:	8979      	ldrh	r1, [r7, #10]
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	9301      	str	r3, [sp, #4]
 800440a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	4603      	mov	r3, r0
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 fa33 	bl	800487c <I2C_RequestMemoryRead>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e1b1      	b.n	8004784 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004424:	2b00      	cmp	r3, #0
 8004426:	d113      	bne.n	8004450 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004428:	2300      	movs	r3, #0
 800442a:	623b      	str	r3, [r7, #32]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	623b      	str	r3, [r7, #32]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	623b      	str	r3, [r7, #32]
 800443c:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	e185      	b.n	800475c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004454:	2b01      	cmp	r3, #1
 8004456:	d11b      	bne.n	8004490 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004466:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004468:	2300      	movs	r3, #0
 800446a:	61fb      	str	r3, [r7, #28]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	61fb      	str	r3, [r7, #28]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	61fb      	str	r3, [r7, #28]
 800447c:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	e165      	b.n	800475c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004494:	2b02      	cmp	r3, #2
 8004496:	d11b      	bne.n	80044d0 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044a6:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044b6:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b8:	2300      	movs	r3, #0
 80044ba:	61bb      	str	r3, [r7, #24]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	61bb      	str	r3, [r7, #24]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	61bb      	str	r3, [r7, #24]
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	e145      	b.n	800475c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80044e6:	e139      	b.n	800475c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	f200 80f2 	bhi.w	80046d6 <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d123      	bne.n	8004542 <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 fbe4 	bl	8004ccc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e13a      	b.n	8004784 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004536:	b29b      	uxth	r3, r3
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004540:	e10c      	b.n	800475c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004546:	2b02      	cmp	r3, #2
 8004548:	d14f      	bne.n	80045ea <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004550:	2200      	movs	r2, #0
 8004552:	4907      	ldr	r1, [pc, #28]	; (8004570 <HAL_I2C_Mem_Read+0x244>)
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 fa61 	bl	8004a1c <I2C_WaitOnFlagUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d009      	beq.n	8004574 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e10f      	b.n	8004784 <HAL_I2C_Mem_Read+0x458>
 8004564:	0800b1d8 	.word	0x0800b1d8
 8004568:	00100002 	.word	0x00100002
 800456c:	ffff0000 	.word	0xffff0000
 8004570:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004582:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045e8:	e0b8      	b.n	800475c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f0:	2200      	movs	r2, #0
 80045f2:	4966      	ldr	r1, [pc, #408]	; (800478c <HAL_I2C_Mem_Read+0x460>)
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 fa11 	bl	8004a1c <I2C_WaitOnFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e0bf      	b.n	8004784 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004612:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691a      	ldr	r2, [r3, #16]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464c:	2200      	movs	r2, #0
 800464e:	494f      	ldr	r1, [pc, #316]	; (800478c <HAL_I2C_Mem_Read+0x460>)
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 f9e3 	bl	8004a1c <I2C_WaitOnFlagUntilTimeout>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e091      	b.n	8004784 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800466e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004698:	b29b      	uxth	r3, r3
 800469a:	3b01      	subs	r3, #1
 800469c:	b29a      	uxth	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046d4:	e042      	b.n	800475c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 faf6 	bl	8004ccc <I2C_WaitOnRXNEFlagUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e04c      	b.n	8004784 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	b2d2      	uxtb	r2, r2
 80046f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004706:	3b01      	subs	r3, #1
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004712:	b29b      	uxth	r3, r3
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b04      	cmp	r3, #4
 8004728:	d118      	bne.n	800475c <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	1c5a      	adds	r2, r3, #1
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004752:	b29b      	uxth	r3, r3
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004760:	2b00      	cmp	r3, #0
 8004762:	f47f aec1 	bne.w	80044e8 <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	e000      	b.n	8004784 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004782:	2302      	movs	r3, #2
  }
}
 8004784:	4618      	mov	r0, r3
 8004786:	3728      	adds	r7, #40	; 0x28
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	00010004 	.word	0x00010004

08004790 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b088      	sub	sp, #32
 8004794:	af02      	add	r7, sp, #8
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	607a      	str	r2, [r7, #4]
 800479a:	603b      	str	r3, [r7, #0]
 800479c:	460b      	mov	r3, r1
 800479e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d006      	beq.n	80047ba <I2C_MasterRequestWrite+0x2a>
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d003      	beq.n	80047ba <I2C_MasterRequestWrite+0x2a>
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047b8:	d108      	bne.n	80047cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	e00b      	b.n	80047e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d0:	2b12      	cmp	r3, #18
 80047d2:	d107      	bne.n	80047e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 f913 	bl	8004a1c <I2C_WaitOnFlagUntilTimeout>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e035      	b.n	800486c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004808:	d108      	bne.n	800481c <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800480a:	897b      	ldrh	r3, [r7, #10]
 800480c:	b2db      	uxtb	r3, r3
 800480e:	461a      	mov	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004818:	611a      	str	r2, [r3, #16]
 800481a:	e01b      	b.n	8004854 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800481c:	897b      	ldrh	r3, [r7, #10]
 800481e:	11db      	asrs	r3, r3, #7
 8004820:	b2db      	uxtb	r3, r3
 8004822:	f003 0306 	and.w	r3, r3, #6
 8004826:	b2db      	uxtb	r3, r3
 8004828:	f063 030f 	orn	r3, r3, #15
 800482c:	b2da      	uxtb	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	490e      	ldr	r1, [pc, #56]	; (8004874 <I2C_MasterRequestWrite+0xe4>)
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 f945 	bl	8004aca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e010      	b.n	800486c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800484a:	897b      	ldrh	r3, [r7, #10]
 800484c:	b2da      	uxtb	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	4907      	ldr	r1, [pc, #28]	; (8004878 <I2C_MasterRequestWrite+0xe8>)
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 f935 	bl	8004aca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	00010008 	.word	0x00010008
 8004878:	00010002 	.word	0x00010002

0800487c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af02      	add	r7, sp, #8
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	4608      	mov	r0, r1
 8004886:	4611      	mov	r1, r2
 8004888:	461a      	mov	r2, r3
 800488a:	4603      	mov	r3, r0
 800488c:	817b      	strh	r3, [r7, #10]
 800488e:	460b      	mov	r3, r1
 8004890:	813b      	strh	r3, [r7, #8]
 8004892:	4613      	mov	r3, r2
 8004894:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	2200      	movs	r2, #0
 80048be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f8aa 	bl	8004a1c <I2C_WaitOnFlagUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e09e      	b.n	8004a10 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048d2:	897b      	ldrh	r3, [r7, #10]
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	461a      	mov	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	6a3a      	ldr	r2, [r7, #32]
 80048e6:	494c      	ldr	r1, [pc, #304]	; (8004a18 <I2C_RequestMemoryRead+0x19c>)
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 f8ee 	bl	8004aca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e08b      	b.n	8004a10 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048f8:	2300      	movs	r3, #0
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800490e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004910:	6a39      	ldr	r1, [r7, #32]
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 f958 	bl	8004bc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00d      	beq.n	800493a <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	2b04      	cmp	r3, #4
 8004924:	d107      	bne.n	8004936 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004934:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e06a      	b.n	8004a10 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800493a:	88fb      	ldrh	r3, [r7, #6]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d105      	bne.n	800494c <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004940:	893b      	ldrh	r3, [r7, #8]
 8004942:	b2da      	uxtb	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	611a      	str	r2, [r3, #16]
 800494a:	e021      	b.n	8004990 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800494c:	893b      	ldrh	r3, [r7, #8]
 800494e:	0a1b      	lsrs	r3, r3, #8
 8004950:	b29b      	uxth	r3, r3
 8004952:	b2da      	uxtb	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800495a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495c:	6a39      	ldr	r1, [r7, #32]
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 f932 	bl	8004bc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00d      	beq.n	8004986 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	2b04      	cmp	r3, #4
 8004970:	d107      	bne.n	8004982 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004980:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e044      	b.n	8004a10 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004986:	893b      	ldrh	r3, [r7, #8]
 8004988:	b2da      	uxtb	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004992:	6a39      	ldr	r1, [r7, #32]
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 f917 	bl	8004bc8 <I2C_WaitOnTXEFlagUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00d      	beq.n	80049bc <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d107      	bne.n	80049b8 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e029      	b.n	8004a10 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	6a3b      	ldr	r3, [r7, #32]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f81f 	bl	8004a1c <I2C_WaitOnFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e013      	b.n	8004a10 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80049e8:	897b      	ldrh	r3, [r7, #10]
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	f043 0301 	orr.w	r3, r3, #1
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	6a3a      	ldr	r2, [r7, #32]
 80049fc:	4906      	ldr	r1, [pc, #24]	; (8004a18 <I2C_RequestMemoryRead+0x19c>)
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 f863 	bl	8004aca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	00010002 	.word	0x00010002

08004a1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	603b      	str	r3, [r7, #0]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a2c:	e025      	b.n	8004a7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a34:	d021      	beq.n	8004a7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a36:	f7fd fcb5 	bl	80023a4 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d302      	bcc.n	8004a4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d116      	bne.n	8004a7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f043 0220 	orr.w	r2, r3, #32
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e023      	b.n	8004ac2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	0c1b      	lsrs	r3, r3, #16
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d10d      	bne.n	8004aa0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	43da      	mvns	r2, r3
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	bf0c      	ite	eq
 8004a96:	2301      	moveq	r3, #1
 8004a98:	2300      	movne	r3, #0
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	e00c      	b.n	8004aba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	43da      	mvns	r2, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	bf0c      	ite	eq
 8004ab2:	2301      	moveq	r3, #1
 8004ab4:	2300      	movne	r3, #0
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	461a      	mov	r2, r3
 8004aba:	79fb      	ldrb	r3, [r7, #7]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d0b6      	beq.n	8004a2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	607a      	str	r2, [r7, #4]
 8004ad6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ad8:	e051      	b.n	8004b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ae8:	d123      	bne.n	8004b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	f043 0204 	orr.w	r2, r3, #4
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e046      	b.n	8004bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b38:	d021      	beq.n	8004b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b3a:	f7fd fc33 	bl	80023a4 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d302      	bcc.n	8004b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d116      	bne.n	8004b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	f043 0220 	orr.w	r2, r3, #32
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e020      	b.n	8004bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	0c1b      	lsrs	r3, r3, #16
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d10c      	bne.n	8004ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	43da      	mvns	r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4013      	ands	r3, r2
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	bf14      	ite	ne
 8004b9a:	2301      	movne	r3, #1
 8004b9c:	2300      	moveq	r3, #0
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	e00b      	b.n	8004bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	43da      	mvns	r2, r3
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	4013      	ands	r3, r2
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	bf14      	ite	ne
 8004bb4:	2301      	movne	r3, #1
 8004bb6:	2300      	moveq	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d18d      	bne.n	8004ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bd4:	e02d      	b.n	8004c32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 f8ce 	bl	8004d78 <I2C_IsAcknowledgeFailed>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e02d      	b.n	8004c42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bec:	d021      	beq.n	8004c32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bee:	f7fd fbd9 	bl	80023a4 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d302      	bcc.n	8004c04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d116      	bne.n	8004c32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	f043 0220 	orr.w	r2, r3, #32
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e007      	b.n	8004c42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3c:	2b80      	cmp	r3, #128	; 0x80
 8004c3e:	d1ca      	bne.n	8004bd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b084      	sub	sp, #16
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c56:	e02d      	b.n	8004cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 f88d 	bl	8004d78 <I2C_IsAcknowledgeFailed>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e02d      	b.n	8004cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6e:	d021      	beq.n	8004cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c70:	f7fd fb98 	bl	80023a4 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d302      	bcc.n	8004c86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d116      	bne.n	8004cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca0:	f043 0220 	orr.w	r2, r3, #32
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e007      	b.n	8004cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	f003 0304 	and.w	r3, r3, #4
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d1ca      	bne.n	8004c58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cd8:	e042      	b.n	8004d60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	f003 0310 	and.w	r3, r3, #16
 8004ce4:	2b10      	cmp	r3, #16
 8004ce6:	d119      	bne.n	8004d1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0210 	mvn.w	r2, #16
 8004cf0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e029      	b.n	8004d70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d1c:	f7fd fb42 	bl	80023a4 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d302      	bcc.n	8004d32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d116      	bne.n	8004d60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	f043 0220 	orr.w	r2, r3, #32
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e007      	b.n	8004d70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6a:	2b40      	cmp	r3, #64	; 0x40
 8004d6c:	d1b5      	bne.n	8004cda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d8e:	d11b      	bne.n	8004dc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	f043 0204 	orr.w	r2, r3, #4
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e000      	b.n	8004dca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bc80      	pop	{r7}
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d102      	bne.n	8004de8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	f000 bc6c 	b.w	80056c0 <HAL_RCC_OscConfig+0x8ec>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d022      	beq.n	8004e36 <HAL_RCC_OscConfig+0x62>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d11c      	bne.n	8004e36 <HAL_RCC_OscConfig+0x62>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d116      	bne.n	8004e36 <HAL_RCC_OscConfig+0x62>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d110      	bne.n	8004e36 <HAL_RCC_OscConfig+0x62>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10a      	bne.n	8004e36 <HAL_RCC_OscConfig+0x62>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0310 	and.w	r3, r3, #16
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d104      	bne.n	8004e36 <HAL_RCC_OscConfig+0x62>
 8004e2c:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004e30:	4897      	ldr	r0, [pc, #604]	; (8005090 <HAL_RCC_OscConfig+0x2bc>)
 8004e32:	f7fc fdb1 	bl	8001998 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e36:	4b97      	ldr	r3, [pc, #604]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 030c 	and.w	r3, r3, #12
 8004e3e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e40:	4b94      	ldr	r3, [pc, #592]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e48:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 808e 	beq.w	8004f74 <HAL_RCC_OscConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00c      	beq.n	8004e7a <HAL_RCC_OscConfig+0xa6>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d008      	beq.n	8004e7a <HAL_RCC_OscConfig+0xa6>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	2b05      	cmp	r3, #5
 8004e6e:	d004      	beq.n	8004e7a <HAL_RCC_OscConfig+0xa6>
 8004e70:	f240 1159 	movw	r1, #345	; 0x159
 8004e74:	4886      	ldr	r0, [pc, #536]	; (8005090 <HAL_RCC_OscConfig+0x2bc>)
 8004e76:	f7fc fd8f 	bl	8001998 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d006      	beq.n	8004e8e <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	2b0c      	cmp	r3, #12
 8004e84:	d110      	bne.n	8004ea8 <HAL_RCC_OscConfig+0xd4>
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8c:	d10c      	bne.n	8004ea8 <HAL_RCC_OscConfig+0xd4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e8e:	4b81      	ldr	r3, [pc, #516]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d06b      	beq.n	8004f72 <HAL_RCC_OscConfig+0x19e>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d167      	bne.n	8004f72 <HAL_RCC_OscConfig+0x19e>
      {
        return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	f000 bc0c 	b.w	80056c0 <HAL_RCC_OscConfig+0x8ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d106      	bne.n	8004ebe <HAL_RCC_OscConfig+0xea>
 8004eb0:	4b78      	ldr	r3, [pc, #480]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a77      	ldr	r2, [pc, #476]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 8004eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eba:	6013      	str	r3, [r2, #0]
 8004ebc:	e02d      	b.n	8004f1a <HAL_RCC_OscConfig+0x146>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10c      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x10c>
 8004ec6:	4b73      	ldr	r3, [pc, #460]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a72      	ldr	r2, [pc, #456]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 8004ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	4b70      	ldr	r3, [pc, #448]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a6f      	ldr	r2, [pc, #444]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 8004ed8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	e01c      	b.n	8004f1a <HAL_RCC_OscConfig+0x146>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b05      	cmp	r3, #5
 8004ee6:	d10c      	bne.n	8004f02 <HAL_RCC_OscConfig+0x12e>
 8004ee8:	4b6a      	ldr	r3, [pc, #424]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a69      	ldr	r2, [pc, #420]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 8004eee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ef2:	6013      	str	r3, [r2, #0]
 8004ef4:	4b67      	ldr	r3, [pc, #412]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a66      	ldr	r2, [pc, #408]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 8004efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	e00b      	b.n	8004f1a <HAL_RCC_OscConfig+0x146>
 8004f02:	4b64      	ldr	r3, [pc, #400]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a63      	ldr	r2, [pc, #396]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 8004f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	4b61      	ldr	r3, [pc, #388]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a60      	ldr	r2, [pc, #384]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 8004f14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f18:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d013      	beq.n	8004f4a <HAL_RCC_OscConfig+0x176>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f22:	f7fd fa3f 	bl	80023a4 <HAL_GetTick>
 8004f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f28:	e008      	b.n	8004f3c <HAL_RCC_OscConfig+0x168>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f2a:	f7fd fa3b 	bl	80023a4 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b64      	cmp	r3, #100	; 0x64
 8004f36:	d901      	bls.n	8004f3c <HAL_RCC_OscConfig+0x168>
          {
            return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e3c1      	b.n	80056c0 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f3c:	4b55      	ldr	r3, [pc, #340]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0f0      	beq.n	8004f2a <HAL_RCC_OscConfig+0x156>
 8004f48:	e014      	b.n	8004f74 <HAL_RCC_OscConfig+0x1a0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f4a:	f7fd fa2b 	bl	80023a4 <HAL_GetTick>
 8004f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f50:	e008      	b.n	8004f64 <HAL_RCC_OscConfig+0x190>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f52:	f7fd fa27 	bl	80023a4 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b64      	cmp	r3, #100	; 0x64
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e3ad      	b.n	80056c0 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f64:	4b4b      	ldr	r3, [pc, #300]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1f0      	bne.n	8004f52 <HAL_RCC_OscConfig+0x17e>
 8004f70:	e000      	b.n	8004f74 <HAL_RCC_OscConfig+0x1a0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f72:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d070      	beq.n	8005062 <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d008      	beq.n	8004f9a <HAL_RCC_OscConfig+0x1c6>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d004      	beq.n	8004f9a <HAL_RCC_OscConfig+0x1c6>
 8004f90:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8004f94:	483e      	ldr	r0, [pc, #248]	; (8005090 <HAL_RCC_OscConfig+0x2bc>)
 8004f96:	f7fc fcff 	bl	8001998 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	2b1f      	cmp	r3, #31
 8004fa0:	d904      	bls.n	8004fac <HAL_RCC_OscConfig+0x1d8>
 8004fa2:	f240 118d 	movw	r1, #397	; 0x18d
 8004fa6:	483a      	ldr	r0, [pc, #232]	; (8005090 <HAL_RCC_OscConfig+0x2bc>)
 8004fa8:	f7fc fcf6 	bl	8001998 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	d005      	beq.n	8004fbe <HAL_RCC_OscConfig+0x1ea>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	2b0c      	cmp	r3, #12
 8004fb6:	d119      	bne.n	8004fec <HAL_RCC_OscConfig+0x218>
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d116      	bne.n	8004fec <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fbe:	4b35      	ldr	r3, [pc, #212]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d005      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x202>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d001      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x202>
      {
        return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e374      	b.n	80056c0 <HAL_RCC_OscConfig+0x8ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd6:	4b2f      	ldr	r3, [pc, #188]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	021b      	lsls	r3, r3, #8
 8004fe4:	492b      	ldr	r1, [pc, #172]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fea:	e03a      	b.n	8005062 <HAL_RCC_OscConfig+0x28e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d020      	beq.n	8005036 <HAL_RCC_OscConfig+0x262>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ff4:	4b28      	ldr	r3, [pc, #160]	; (8005098 <HAL_RCC_OscConfig+0x2c4>)
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffa:	f7fd f9d3 	bl	80023a4 <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x240>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005002:	f7fd f9cf 	bl	80023a4 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x240>
          {
            return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e355      	b.n	80056c0 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005014:	4b1f      	ldr	r3, [pc, #124]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0f0      	beq.n	8005002 <HAL_RCC_OscConfig+0x22e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005020:	4b1c      	ldr	r3, [pc, #112]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	021b      	lsls	r3, r3, #8
 800502e:	4919      	ldr	r1, [pc, #100]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 8005030:	4313      	orrs	r3, r2
 8005032:	604b      	str	r3, [r1, #4]
 8005034:	e015      	b.n	8005062 <HAL_RCC_OscConfig+0x28e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005036:	4b18      	ldr	r3, [pc, #96]	; (8005098 <HAL_RCC_OscConfig+0x2c4>)
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503c:	f7fd f9b2 	bl	80023a4 <HAL_GetTick>
 8005040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0x282>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005044:	f7fd f9ae 	bl	80023a4 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x282>
          {
            return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e334      	b.n	80056c0 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005056:	4b0f      	ldr	r3, [pc, #60]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1f0      	bne.n	8005044 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0310 	and.w	r3, r3, #16
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 8129 	beq.w	80052c2 <HAL_RCC_OscConfig+0x4ee>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	2b00      	cmp	r3, #0
 8005074:	f040 80a4 	bne.w	80051c0 <HAL_RCC_OscConfig+0x3ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005078:	4b06      	ldr	r3, [pc, #24]	; (8005094 <HAL_RCC_OscConfig+0x2c0>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00b      	beq.n	800509c <HAL_RCC_OscConfig+0x2c8>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d107      	bne.n	800509c <HAL_RCC_OscConfig+0x2c8>
      {
        return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e317      	b.n	80056c0 <HAL_RCC_OscConfig+0x8ec>
 8005090:	0800b210 	.word	0x0800b210
 8005094:	40023800 	.word	0x40023800
 8005098:	42470000 	.word	0x42470000
      }
      /* Otherwise, just the calibration and MSI range change are allowed */
      else
      {
       /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	2bff      	cmp	r3, #255	; 0xff
 80050a2:	d904      	bls.n	80050ae <HAL_RCC_OscConfig+0x2da>
 80050a4:	f240 11d7 	movw	r1, #471	; 0x1d7
 80050a8:	48a5      	ldr	r0, [pc, #660]	; (8005340 <HAL_RCC_OscConfig+0x56c>)
 80050aa:	f7fc fc75 	bl	8001998 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d022      	beq.n	80050fc <HAL_RCC_OscConfig+0x328>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050be:	d01d      	beq.n	80050fc <HAL_RCC_OscConfig+0x328>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050c8:	d018      	beq.n	80050fc <HAL_RCC_OscConfig+0x328>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80050d2:	d013      	beq.n	80050fc <HAL_RCC_OscConfig+0x328>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050dc:	d00e      	beq.n	80050fc <HAL_RCC_OscConfig+0x328>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80050e6:	d009      	beq.n	80050fc <HAL_RCC_OscConfig+0x328>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80050f0:	d004      	beq.n	80050fc <HAL_RCC_OscConfig+0x328>
 80050f2:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80050f6:	4892      	ldr	r0, [pc, #584]	; (8005340 <HAL_RCC_OscConfig+0x56c>)
 80050f8:	f7fc fc4e 	bl	8001998 <assert_failed>

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a1a      	ldr	r2, [r3, #32]
 8005100:	4b90      	ldr	r3, [pc, #576]	; (8005344 <HAL_RCC_OscConfig+0x570>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005108:	429a      	cmp	r2, r3
 800510a:	d91d      	bls.n	8005148 <HAL_RCC_OscConfig+0x374>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	4618      	mov	r0, r3
 8005112:	f000 fd67 	bl	8005be4 <RCC_SetFlashLatencyFromMSIRange>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e2cf      	b.n	80056c0 <HAL_RCC_OscConfig+0x8ec>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005120:	4b88      	ldr	r3, [pc, #544]	; (8005344 <HAL_RCC_OscConfig+0x570>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	4985      	ldr	r1, [pc, #532]	; (8005344 <HAL_RCC_OscConfig+0x570>)
 800512e:	4313      	orrs	r3, r2
 8005130:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005132:	4b84      	ldr	r3, [pc, #528]	; (8005344 <HAL_RCC_OscConfig+0x570>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	061b      	lsls	r3, r3, #24
 8005140:	4980      	ldr	r1, [pc, #512]	; (8005344 <HAL_RCC_OscConfig+0x570>)
 8005142:	4313      	orrs	r3, r2
 8005144:	604b      	str	r3, [r1, #4]
 8005146:	e01c      	b.n	8005182 <HAL_RCC_OscConfig+0x3ae>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005148:	4b7e      	ldr	r3, [pc, #504]	; (8005344 <HAL_RCC_OscConfig+0x570>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	497b      	ldr	r1, [pc, #492]	; (8005344 <HAL_RCC_OscConfig+0x570>)
 8005156:	4313      	orrs	r3, r2
 8005158:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800515a:	4b7a      	ldr	r3, [pc, #488]	; (8005344 <HAL_RCC_OscConfig+0x570>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	061b      	lsls	r3, r3, #24
 8005168:	4976      	ldr	r1, [pc, #472]	; (8005344 <HAL_RCC_OscConfig+0x570>)
 800516a:	4313      	orrs	r3, r2
 800516c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fd36 	bl	8005be4 <RCC_SetFlashLatencyFromMSIRange>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e29e      	b.n	80056c0 <HAL_RCC_OscConfig+0x8ec>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	0b5b      	lsrs	r3, r3, #13
 8005188:	3301      	adds	r3, #1
 800518a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005192:	4a6c      	ldr	r2, [pc, #432]	; (8005344 <HAL_RCC_OscConfig+0x570>)
 8005194:	6892      	ldr	r2, [r2, #8]
 8005196:	0912      	lsrs	r2, r2, #4
 8005198:	f002 020f 	and.w	r2, r2, #15
 800519c:	496a      	ldr	r1, [pc, #424]	; (8005348 <HAL_RCC_OscConfig+0x574>)
 800519e:	5c8a      	ldrb	r2, [r1, r2]
 80051a0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80051a2:	4a6a      	ldr	r2, [pc, #424]	; (800534c <HAL_RCC_OscConfig+0x578>)
 80051a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80051a6:	4b6a      	ldr	r3, [pc, #424]	; (8005350 <HAL_RCC_OscConfig+0x57c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fc fc32 	bl	8001a14 <HAL_InitTick>
 80051b0:	4603      	mov	r3, r0
 80051b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80051b4:	7bfb      	ldrb	r3, [r7, #15]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 8083 	beq.w	80052c2 <HAL_RCC_OscConfig+0x4ee>
        {
          return status;
 80051bc:	7bfb      	ldrb	r3, [r7, #15]
 80051be:	e27f      	b.n	80056c0 <HAL_RCC_OscConfig+0x8ec>
      }
    }
    else
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <HAL_RCC_OscConfig+0x406>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d004      	beq.n	80051da <HAL_RCC_OscConfig+0x406>
 80051d0:	f44f 7102 	mov.w	r1, #520	; 0x208
 80051d4:	485a      	ldr	r0, [pc, #360]	; (8005340 <HAL_RCC_OscConfig+0x56c>)
 80051d6:	f7fc fbdf 	bl	8001998 <assert_failed>

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d059      	beq.n	8005296 <HAL_RCC_OscConfig+0x4c2>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80051e2:	4b5c      	ldr	r3, [pc, #368]	; (8005354 <HAL_RCC_OscConfig+0x580>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e8:	f7fd f8dc 	bl	80023a4 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051f0:	f7fd f8d8 	bl	80023a4 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e25e      	b.n	80056c0 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005202:	4b50      	ldr	r3, [pc, #320]	; (8005344 <HAL_RCC_OscConfig+0x570>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0f0      	beq.n	80051f0 <HAL_RCC_OscConfig+0x41c>
          }
        }
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	2bff      	cmp	r3, #255	; 0xff
 8005214:	d904      	bls.n	8005220 <HAL_RCC_OscConfig+0x44c>
 8005216:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800521a:	4849      	ldr	r0, [pc, #292]	; (8005340 <HAL_RCC_OscConfig+0x56c>)
 800521c:	f7fc fbbc 	bl	8001998 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d022      	beq.n	800526e <HAL_RCC_OscConfig+0x49a>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005230:	d01d      	beq.n	800526e <HAL_RCC_OscConfig+0x49a>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800523a:	d018      	beq.n	800526e <HAL_RCC_OscConfig+0x49a>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005244:	d013      	beq.n	800526e <HAL_RCC_OscConfig+0x49a>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800524e:	d00e      	beq.n	800526e <HAL_RCC_OscConfig+0x49a>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005258:	d009      	beq.n	800526e <HAL_RCC_OscConfig+0x49a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005262:	d004      	beq.n	800526e <HAL_RCC_OscConfig+0x49a>
 8005264:	f240 211d 	movw	r1, #541	; 0x21d
 8005268:	4835      	ldr	r0, [pc, #212]	; (8005340 <HAL_RCC_OscConfig+0x56c>)
 800526a:	f7fc fb95 	bl	8001998 <assert_failed>

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800526e:	4b35      	ldr	r3, [pc, #212]	; (8005344 <HAL_RCC_OscConfig+0x570>)
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	4932      	ldr	r1, [pc, #200]	; (8005344 <HAL_RCC_OscConfig+0x570>)
 800527c:	4313      	orrs	r3, r2
 800527e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005280:	4b30      	ldr	r3, [pc, #192]	; (8005344 <HAL_RCC_OscConfig+0x570>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	69db      	ldr	r3, [r3, #28]
 800528c:	061b      	lsls	r3, r3, #24
 800528e:	492d      	ldr	r1, [pc, #180]	; (8005344 <HAL_RCC_OscConfig+0x570>)
 8005290:	4313      	orrs	r3, r2
 8005292:	604b      	str	r3, [r1, #4]
 8005294:	e015      	b.n	80052c2 <HAL_RCC_OscConfig+0x4ee>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005296:	4b2f      	ldr	r3, [pc, #188]	; (8005354 <HAL_RCC_OscConfig+0x580>)
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800529c:	f7fd f882 	bl	80023a4 <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052a4:	f7fd f87e 	bl	80023a4 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x4e2>
          {
            return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e204      	b.n	80056c0 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80052b6:	4b23      	ldr	r3, [pc, #140]	; (8005344 <HAL_RCC_OscConfig+0x570>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1f0      	bne.n	80052a4 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0308 	and.w	r3, r3, #8
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d04c      	beq.n	8005368 <HAL_RCC_OscConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d008      	beq.n	80052e8 <HAL_RCC_OscConfig+0x514>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d004      	beq.n	80052e8 <HAL_RCC_OscConfig+0x514>
 80052de:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80052e2:	4817      	ldr	r0, [pc, #92]	; (8005340 <HAL_RCC_OscConfig+0x56c>)
 80052e4:	f7fc fb58 	bl	8001998 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d016      	beq.n	800531e <HAL_RCC_OscConfig+0x54a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052f0:	4b19      	ldr	r3, [pc, #100]	; (8005358 <HAL_RCC_OscConfig+0x584>)
 80052f2:	2201      	movs	r2, #1
 80052f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052f6:	f7fd f855 	bl	80023a4 <HAL_GetTick>
 80052fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80052fc:	e008      	b.n	8005310 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052fe:	f7fd f851 	bl	80023a4 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d901      	bls.n	8005310 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e1d7      	b.n	80056c0 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005310:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <HAL_RCC_OscConfig+0x570>)
 8005312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0f0      	beq.n	80052fe <HAL_RCC_OscConfig+0x52a>
 800531c:	e024      	b.n	8005368 <HAL_RCC_OscConfig+0x594>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800531e:	4b0e      	ldr	r3, [pc, #56]	; (8005358 <HAL_RCC_OscConfig+0x584>)
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005324:	f7fd f83e 	bl	80023a4 <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800532a:	e017      	b.n	800535c <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800532c:	f7fd f83a 	bl	80023a4 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d910      	bls.n	800535c <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e1c0      	b.n	80056c0 <HAL_RCC_OscConfig+0x8ec>
 800533e:	bf00      	nop
 8005340:	0800b210 	.word	0x0800b210
 8005344:	40023800 	.word	0x40023800
 8005348:	0800b3f4 	.word	0x0800b3f4
 800534c:	20000000 	.word	0x20000000
 8005350:	20000004 	.word	0x20000004
 8005354:	42470020 	.word	0x42470020
 8005358:	42470680 	.word	0x42470680
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800535c:	4ba2      	ldr	r3, [pc, #648]	; (80055e8 <HAL_RCC_OscConfig+0x814>)
 800535e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e1      	bne.n	800532c <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 80b7 	beq.w	80054e4 <HAL_RCC_OscConfig+0x710>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005376:	2300      	movs	r3, #0
 8005378:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00c      	beq.n	800539c <HAL_RCC_OscConfig+0x5c8>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d008      	beq.n	800539c <HAL_RCC_OscConfig+0x5c8>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	2b05      	cmp	r3, #5
 8005390:	d004      	beq.n	800539c <HAL_RCC_OscConfig+0x5c8>
 8005392:	f44f 711a 	mov.w	r1, #616	; 0x268
 8005396:	4895      	ldr	r0, [pc, #596]	; (80055ec <HAL_RCC_OscConfig+0x818>)
 8005398:	f7fc fafe 	bl	8001998 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800539c:	4b92      	ldr	r3, [pc, #584]	; (80055e8 <HAL_RCC_OscConfig+0x814>)
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10d      	bne.n	80053c4 <HAL_RCC_OscConfig+0x5f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053a8:	4b8f      	ldr	r3, [pc, #572]	; (80055e8 <HAL_RCC_OscConfig+0x814>)
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	4a8e      	ldr	r2, [pc, #568]	; (80055e8 <HAL_RCC_OscConfig+0x814>)
 80053ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b2:	6253      	str	r3, [r2, #36]	; 0x24
 80053b4:	4b8c      	ldr	r3, [pc, #560]	; (80055e8 <HAL_RCC_OscConfig+0x814>)
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053bc:	60bb      	str	r3, [r7, #8]
 80053be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053c0:	2301      	movs	r3, #1
 80053c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c4:	4b8a      	ldr	r3, [pc, #552]	; (80055f0 <HAL_RCC_OscConfig+0x81c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d118      	bne.n	8005402 <HAL_RCC_OscConfig+0x62e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053d0:	4b87      	ldr	r3, [pc, #540]	; (80055f0 <HAL_RCC_OscConfig+0x81c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a86      	ldr	r2, [pc, #536]	; (80055f0 <HAL_RCC_OscConfig+0x81c>)
 80053d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053dc:	f7fc ffe2 	bl	80023a4 <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0x622>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053e4:	f7fc ffde 	bl	80023a4 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b64      	cmp	r3, #100	; 0x64
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e164      	b.n	80056c0 <HAL_RCC_OscConfig+0x8ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053f6:	4b7e      	ldr	r3, [pc, #504]	; (80055f0 <HAL_RCC_OscConfig+0x81c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0f0      	beq.n	80053e4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d106      	bne.n	8005418 <HAL_RCC_OscConfig+0x644>
 800540a:	4b77      	ldr	r3, [pc, #476]	; (80055e8 <HAL_RCC_OscConfig+0x814>)
 800540c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540e:	4a76      	ldr	r2, [pc, #472]	; (80055e8 <HAL_RCC_OscConfig+0x814>)
 8005410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005414:	6353      	str	r3, [r2, #52]	; 0x34
 8005416:	e02d      	b.n	8005474 <HAL_RCC_OscConfig+0x6a0>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10c      	bne.n	800543a <HAL_RCC_OscConfig+0x666>
 8005420:	4b71      	ldr	r3, [pc, #452]	; (80055e8 <HAL_RCC_OscConfig+0x814>)
 8005422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005424:	4a70      	ldr	r2, [pc, #448]	; (80055e8 <HAL_RCC_OscConfig+0x814>)
 8005426:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800542a:	6353      	str	r3, [r2, #52]	; 0x34
 800542c:	4b6e      	ldr	r3, [pc, #440]	; (80055e8 <HAL_RCC_OscConfig+0x814>)
 800542e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005430:	4a6d      	ldr	r2, [pc, #436]	; (80055e8 <HAL_RCC_OscConfig+0x814>)
 8005432:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005436:	6353      	str	r3, [r2, #52]	; 0x34
 8005438:	e01c      	b.n	8005474 <HAL_RCC_OscConfig+0x6a0>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	2b05      	cmp	r3, #5
 8005440:	d10c      	bne.n	800545c <HAL_RCC_OscConfig+0x688>
 8005442:	4b69      	ldr	r3, [pc, #420]	; (80055e8 <HAL_RCC_OscConfig+0x814>)
 8005444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005446:	4a68      	ldr	r2, [pc, #416]	; (80055e8 <HAL_RCC_OscConfig+0x814>)
 8005448:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800544c:	6353      	str	r3, [r2, #52]	; 0x34
 800544e:	4b66      	ldr	r3, [pc, #408]	; (80055e8 <HAL_RCC_OscConfig+0x814>)
 8005450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005452:	4a65      	ldr	r2, [pc, #404]	; (80055e8 <HAL_RCC_OscConfig+0x814>)
 8005454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005458:	6353      	str	r3, [r2, #52]	; 0x34
 800545a:	e00b      	b.n	8005474 <HAL_RCC_OscConfig+0x6a0>
 800545c:	4b62      	ldr	r3, [pc, #392]	; (80055e8 <HAL_RCC_OscConfig+0x814>)
 800545e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005460:	4a61      	ldr	r2, [pc, #388]	; (80055e8 <HAL_RCC_OscConfig+0x814>)
 8005462:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005466:	6353      	str	r3, [r2, #52]	; 0x34
 8005468:	4b5f      	ldr	r3, [pc, #380]	; (80055e8 <HAL_RCC_OscConfig+0x814>)
 800546a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546c:	4a5e      	ldr	r2, [pc, #376]	; (80055e8 <HAL_RCC_OscConfig+0x814>)
 800546e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005472:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d015      	beq.n	80054a8 <HAL_RCC_OscConfig+0x6d4>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800547c:	f7fc ff92 	bl	80023a4 <HAL_GetTick>
 8005480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005482:	e00a      	b.n	800549a <HAL_RCC_OscConfig+0x6c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005484:	f7fc ff8e 	bl	80023a4 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005492:	4293      	cmp	r3, r2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e112      	b.n	80056c0 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800549a:	4b53      	ldr	r3, [pc, #332]	; (80055e8 <HAL_RCC_OscConfig+0x814>)
 800549c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0ee      	beq.n	8005484 <HAL_RCC_OscConfig+0x6b0>
 80054a6:	e014      	b.n	80054d2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054a8:	f7fc ff7c 	bl	80023a4 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054ae:	e00a      	b.n	80054c6 <HAL_RCC_OscConfig+0x6f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054b0:	f7fc ff78 	bl	80023a4 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80054be:	4293      	cmp	r3, r2
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0x6f2>
        {
          return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e0fc      	b.n	80056c0 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054c6:	4b48      	ldr	r3, [pc, #288]	; (80055e8 <HAL_RCC_OscConfig+0x814>)
 80054c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1ee      	bne.n	80054b0 <HAL_RCC_OscConfig+0x6dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80054d2:	7ffb      	ldrb	r3, [r7, #31]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d105      	bne.n	80054e4 <HAL_RCC_OscConfig+0x710>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054d8:	4b43      	ldr	r3, [pc, #268]	; (80055e8 <HAL_RCC_OscConfig+0x814>)
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	4a42      	ldr	r2, [pc, #264]	; (80055e8 <HAL_RCC_OscConfig+0x814>)
 80054de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054e2:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00c      	beq.n	8005506 <HAL_RCC_OscConfig+0x732>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d008      	beq.n	8005506 <HAL_RCC_OscConfig+0x732>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d004      	beq.n	8005506 <HAL_RCC_OscConfig+0x732>
 80054fc:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8005500:	483a      	ldr	r0, [pc, #232]	; (80055ec <HAL_RCC_OscConfig+0x818>)
 8005502:	f7fc fa49 	bl	8001998 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 80d7 	beq.w	80056be <HAL_RCC_OscConfig+0x8ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	2b0c      	cmp	r3, #12
 8005514:	f000 80b3 	beq.w	800567e <HAL_RCC_OscConfig+0x8aa>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	2b02      	cmp	r3, #2
 800551e:	f040 8097 	bne.w	8005650 <HAL_RCC_OscConfig+0x87c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005526:	2b00      	cmp	r3, #0
 8005528:	d009      	beq.n	800553e <HAL_RCC_OscConfig+0x76a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005532:	d004      	beq.n	800553e <HAL_RCC_OscConfig+0x76a>
 8005534:	f240 21b5 	movw	r1, #693	; 0x2b5
 8005538:	482c      	ldr	r0, [pc, #176]	; (80055ec <HAL_RCC_OscConfig+0x818>)
 800553a:	f7fc fa2d 	bl	8001998 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005542:	2b00      	cmp	r3, #0
 8005544:	d02c      	beq.n	80055a0 <HAL_RCC_OscConfig+0x7cc>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800554e:	d027      	beq.n	80055a0 <HAL_RCC_OscConfig+0x7cc>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005554:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005558:	d022      	beq.n	80055a0 <HAL_RCC_OscConfig+0x7cc>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005562:	d01d      	beq.n	80055a0 <HAL_RCC_OscConfig+0x7cc>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800556c:	d018      	beq.n	80055a0 <HAL_RCC_OscConfig+0x7cc>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005572:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005576:	d013      	beq.n	80055a0 <HAL_RCC_OscConfig+0x7cc>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005580:	d00e      	beq.n	80055a0 <HAL_RCC_OscConfig+0x7cc>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005586:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800558a:	d009      	beq.n	80055a0 <HAL_RCC_OscConfig+0x7cc>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005590:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005594:	d004      	beq.n	80055a0 <HAL_RCC_OscConfig+0x7cc>
 8005596:	f240 21b6 	movw	r1, #694	; 0x2b6
 800559a:	4814      	ldr	r0, [pc, #80]	; (80055ec <HAL_RCC_OscConfig+0x818>)
 800559c:	f7fc f9fc 	bl	8001998 <assert_failed>
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055a8:	d00e      	beq.n	80055c8 <HAL_RCC_OscConfig+0x7f4>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055b2:	d009      	beq.n	80055c8 <HAL_RCC_OscConfig+0x7f4>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055bc:	d004      	beq.n	80055c8 <HAL_RCC_OscConfig+0x7f4>
 80055be:	f240 21b7 	movw	r1, #695	; 0x2b7
 80055c2:	480a      	ldr	r0, [pc, #40]	; (80055ec <HAL_RCC_OscConfig+0x818>)
 80055c4:	f7fc f9e8 	bl	8001998 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055c8:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <HAL_RCC_OscConfig+0x820>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ce:	f7fc fee9 	bl	80023a4 <HAL_GetTick>
 80055d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055d4:	e010      	b.n	80055f8 <HAL_RCC_OscConfig+0x824>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055d6:	f7fc fee5 	bl	80023a4 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d909      	bls.n	80055f8 <HAL_RCC_OscConfig+0x824>
          {
            return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e06b      	b.n	80056c0 <HAL_RCC_OscConfig+0x8ec>
 80055e8:	40023800 	.word	0x40023800
 80055ec:	0800b210 	.word	0x0800b210
 80055f0:	40007000 	.word	0x40007000
 80055f4:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055f8:	4b33      	ldr	r3, [pc, #204]	; (80056c8 <HAL_RCC_OscConfig+0x8f4>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1e8      	bne.n	80055d6 <HAL_RCC_OscConfig+0x802>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005604:	4b30      	ldr	r3, [pc, #192]	; (80056c8 <HAL_RCC_OscConfig+0x8f4>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005614:	4319      	orrs	r1, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561a:	430b      	orrs	r3, r1
 800561c:	492a      	ldr	r1, [pc, #168]	; (80056c8 <HAL_RCC_OscConfig+0x8f4>)
 800561e:	4313      	orrs	r3, r2
 8005620:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005622:	4b2a      	ldr	r3, [pc, #168]	; (80056cc <HAL_RCC_OscConfig+0x8f8>)
 8005624:	2201      	movs	r2, #1
 8005626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005628:	f7fc febc 	bl	80023a4 <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x86e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005630:	f7fc feb8 	bl	80023a4 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x86e>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e03e      	b.n	80056c0 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005642:	4b21      	ldr	r3, [pc, #132]	; (80056c8 <HAL_RCC_OscConfig+0x8f4>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0f0      	beq.n	8005630 <HAL_RCC_OscConfig+0x85c>
 800564e:	e036      	b.n	80056be <HAL_RCC_OscConfig+0x8ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005650:	4b1e      	ldr	r3, [pc, #120]	; (80056cc <HAL_RCC_OscConfig+0x8f8>)
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005656:	f7fc fea5 	bl	80023a4 <HAL_GetTick>
 800565a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800565c:	e008      	b.n	8005670 <HAL_RCC_OscConfig+0x89c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800565e:	f7fc fea1 	bl	80023a4 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b02      	cmp	r3, #2
 800566a:	d901      	bls.n	8005670 <HAL_RCC_OscConfig+0x89c>
          {
            return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e027      	b.n	80056c0 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005670:	4b15      	ldr	r3, [pc, #84]	; (80056c8 <HAL_RCC_OscConfig+0x8f4>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1f0      	bne.n	800565e <HAL_RCC_OscConfig+0x88a>
 800567c:	e01f      	b.n	80056be <HAL_RCC_OscConfig+0x8ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	2b01      	cmp	r3, #1
 8005684:	d101      	bne.n	800568a <HAL_RCC_OscConfig+0x8b6>
      {
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e01a      	b.n	80056c0 <HAL_RCC_OscConfig+0x8ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800568a:	4b0f      	ldr	r3, [pc, #60]	; (80056c8 <HAL_RCC_OscConfig+0x8f4>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569a:	429a      	cmp	r2, r3
 800569c:	d10d      	bne.n	80056ba <HAL_RCC_OscConfig+0x8e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d106      	bne.n	80056ba <HAL_RCC_OscConfig+0x8e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d001      	beq.n	80056be <HAL_RCC_OscConfig+0x8ea>
        {
          return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <HAL_RCC_OscConfig+0x8ec>
        }
      }
    }
  }

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3720      	adds	r7, #32
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	40023800 	.word	0x40023800
 80056cc:	42470060 	.word	0x42470060

080056d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e1a4      	b.n	8005a2e <HAL_RCC_ClockConfig+0x35e>
  }

  assert_param(IS_FLASH_LATENCY(FLatency));
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d007      	beq.n	80056fa <HAL_RCC_ClockConfig+0x2a>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d004      	beq.n	80056fa <HAL_RCC_ClockConfig+0x2a>
 80056f0:	f240 312a 	movw	r1, #810	; 0x32a
 80056f4:	4893      	ldr	r0, [pc, #588]	; (8005944 <HAL_RCC_ClockConfig+0x274>)
 80056f6:	f7fc f94f 	bl	8001998 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056fa:	4b93      	ldr	r3, [pc, #588]	; (8005948 <HAL_RCC_ClockConfig+0x278>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	429a      	cmp	r2, r3
 8005706:	d919      	bls.n	800573c <HAL_RCC_ClockConfig+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d105      	bne.n	800571a <HAL_RCC_ClockConfig+0x4a>
 800570e:	4b8e      	ldr	r3, [pc, #568]	; (8005948 <HAL_RCC_ClockConfig+0x278>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a8d      	ldr	r2, [pc, #564]	; (8005948 <HAL_RCC_ClockConfig+0x278>)
 8005714:	f043 0304 	orr.w	r3, r3, #4
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	4b8b      	ldr	r3, [pc, #556]	; (8005948 <HAL_RCC_ClockConfig+0x278>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f023 0201 	bic.w	r2, r3, #1
 8005722:	4989      	ldr	r1, [pc, #548]	; (8005948 <HAL_RCC_ClockConfig+0x278>)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	4313      	orrs	r3, r2
 8005728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800572a:	4b87      	ldr	r3, [pc, #540]	; (8005948 <HAL_RCC_ClockConfig+0x278>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	429a      	cmp	r2, r3
 8005736:	d001      	beq.n	800573c <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e178      	b.n	8005a2e <HAL_RCC_ClockConfig+0x35e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0302 	and.w	r3, r3, #2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d031      	beq.n	80057ac <HAL_RCC_ClockConfig+0xdc>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d024      	beq.n	800579a <HAL_RCC_ClockConfig+0xca>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	2b80      	cmp	r3, #128	; 0x80
 8005756:	d020      	beq.n	800579a <HAL_RCC_ClockConfig+0xca>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	2b90      	cmp	r3, #144	; 0x90
 800575e:	d01c      	beq.n	800579a <HAL_RCC_ClockConfig+0xca>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	2ba0      	cmp	r3, #160	; 0xa0
 8005766:	d018      	beq.n	800579a <HAL_RCC_ClockConfig+0xca>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	2bb0      	cmp	r3, #176	; 0xb0
 800576e:	d014      	beq.n	800579a <HAL_RCC_ClockConfig+0xca>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	2bc0      	cmp	r3, #192	; 0xc0
 8005776:	d010      	beq.n	800579a <HAL_RCC_ClockConfig+0xca>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	2bd0      	cmp	r3, #208	; 0xd0
 800577e:	d00c      	beq.n	800579a <HAL_RCC_ClockConfig+0xca>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	2be0      	cmp	r3, #224	; 0xe0
 8005786:	d008      	beq.n	800579a <HAL_RCC_ClockConfig+0xca>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	2bf0      	cmp	r3, #240	; 0xf0
 800578e:	d004      	beq.n	800579a <HAL_RCC_ClockConfig+0xca>
 8005790:	f240 3141 	movw	r1, #833	; 0x341
 8005794:	486b      	ldr	r0, [pc, #428]	; (8005944 <HAL_RCC_ClockConfig+0x274>)
 8005796:	f7fc f8ff 	bl	8001998 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800579a:	4b6c      	ldr	r3, [pc, #432]	; (800594c <HAL_RCC_ClockConfig+0x27c>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	4969      	ldr	r1, [pc, #420]	; (800594c <HAL_RCC_ClockConfig+0x27c>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 80a3 	beq.w	8005900 <HAL_RCC_ClockConfig+0x230>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d010      	beq.n	80057e4 <HAL_RCC_ClockConfig+0x114>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d00c      	beq.n	80057e4 <HAL_RCC_ClockConfig+0x114>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d008      	beq.n	80057e4 <HAL_RCC_ClockConfig+0x114>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	d004      	beq.n	80057e4 <HAL_RCC_ClockConfig+0x114>
 80057da:	f44f 7152 	mov.w	r1, #840	; 0x348
 80057de:	4859      	ldr	r0, [pc, #356]	; (8005944 <HAL_RCC_ClockConfig+0x274>)
 80057e0:	f7fc f8da 	bl	8001998 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d107      	bne.n	80057fc <HAL_RCC_ClockConfig+0x12c>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057ec:	4b57      	ldr	r3, [pc, #348]	; (800594c <HAL_RCC_ClockConfig+0x27c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d121      	bne.n	800583c <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e118      	b.n	8005a2e <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b03      	cmp	r3, #3
 8005802:	d107      	bne.n	8005814 <HAL_RCC_ClockConfig+0x144>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005804:	4b51      	ldr	r3, [pc, #324]	; (800594c <HAL_RCC_ClockConfig+0x27c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d115      	bne.n	800583c <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e10c      	b.n	8005a2e <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d107      	bne.n	800582c <HAL_RCC_ClockConfig+0x15c>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800581c:	4b4b      	ldr	r3, [pc, #300]	; (800594c <HAL_RCC_ClockConfig+0x27c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d109      	bne.n	800583c <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e100      	b.n	8005a2e <HAL_RCC_ClockConfig+0x35e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800582c:	4b47      	ldr	r3, [pc, #284]	; (800594c <HAL_RCC_ClockConfig+0x27c>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e0f8      	b.n	8005a2e <HAL_RCC_ClockConfig+0x35e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800583c:	4b43      	ldr	r3, [pc, #268]	; (800594c <HAL_RCC_ClockConfig+0x27c>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f023 0203 	bic.w	r2, r3, #3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	4940      	ldr	r1, [pc, #256]	; (800594c <HAL_RCC_ClockConfig+0x27c>)
 800584a:	4313      	orrs	r3, r2
 800584c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800584e:	f7fc fda9 	bl	80023a4 <HAL_GetTick>
 8005852:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	2b02      	cmp	r3, #2
 800585a:	d112      	bne.n	8005882 <HAL_RCC_ClockConfig+0x1b2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800585c:	e00a      	b.n	8005874 <HAL_RCC_ClockConfig+0x1a4>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800585e:	f7fc fda1 	bl	80023a4 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	f241 3288 	movw	r2, #5000	; 0x1388
 800586c:	4293      	cmp	r3, r2
 800586e:	d901      	bls.n	8005874 <HAL_RCC_ClockConfig+0x1a4>
        {
          return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e0dc      	b.n	8005a2e <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005874:	4b35      	ldr	r3, [pc, #212]	; (800594c <HAL_RCC_ClockConfig+0x27c>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f003 030c 	and.w	r3, r3, #12
 800587c:	2b08      	cmp	r3, #8
 800587e:	d1ee      	bne.n	800585e <HAL_RCC_ClockConfig+0x18e>
 8005880:	e03e      	b.n	8005900 <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	2b03      	cmp	r3, #3
 8005888:	d112      	bne.n	80058b0 <HAL_RCC_ClockConfig+0x1e0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800588a:	e00a      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1d2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800588c:	f7fc fd8a 	bl	80023a4 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	f241 3288 	movw	r2, #5000	; 0x1388
 800589a:	4293      	cmp	r3, r2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_ClockConfig+0x1d2>
        {
          return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e0c5      	b.n	8005a2e <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058a2:	4b2a      	ldr	r3, [pc, #168]	; (800594c <HAL_RCC_ClockConfig+0x27c>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 030c 	and.w	r3, r3, #12
 80058aa:	2b0c      	cmp	r3, #12
 80058ac:	d1ee      	bne.n	800588c <HAL_RCC_ClockConfig+0x1bc>
 80058ae:	e027      	b.n	8005900 <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d11d      	bne.n	80058f4 <HAL_RCC_ClockConfig+0x224>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80058b8:	e00a      	b.n	80058d0 <HAL_RCC_ClockConfig+0x200>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ba:	f7fc fd73 	bl	80023a4 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_ClockConfig+0x200>
        {
          return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e0ae      	b.n	8005a2e <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80058d0:	4b1e      	ldr	r3, [pc, #120]	; (800594c <HAL_RCC_ClockConfig+0x27c>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f003 030c 	and.w	r3, r3, #12
 80058d8:	2b04      	cmp	r3, #4
 80058da:	d1ee      	bne.n	80058ba <HAL_RCC_ClockConfig+0x1ea>
 80058dc:	e010      	b.n	8005900 <HAL_RCC_ClockConfig+0x230>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058de:	f7fc fd61 	bl	80023a4 <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_ClockConfig+0x224>
        {
          return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e09c      	b.n	8005a2e <HAL_RCC_ClockConfig+0x35e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80058f4:	4b15      	ldr	r3, [pc, #84]	; (800594c <HAL_RCC_ClockConfig+0x27c>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f003 030c 	and.w	r3, r3, #12
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1ee      	bne.n	80058de <HAL_RCC_ClockConfig+0x20e>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005900:	4b11      	ldr	r3, [pc, #68]	; (8005948 <HAL_RCC_ClockConfig+0x278>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	429a      	cmp	r2, r3
 800590c:	d220      	bcs.n	8005950 <HAL_RCC_ClockConfig+0x280>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d105      	bne.n	8005920 <HAL_RCC_ClockConfig+0x250>
 8005914:	4b0c      	ldr	r3, [pc, #48]	; (8005948 <HAL_RCC_ClockConfig+0x278>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a0b      	ldr	r2, [pc, #44]	; (8005948 <HAL_RCC_ClockConfig+0x278>)
 800591a:	f043 0304 	orr.w	r3, r3, #4
 800591e:	6013      	str	r3, [r2, #0]
 8005920:	4b09      	ldr	r3, [pc, #36]	; (8005948 <HAL_RCC_ClockConfig+0x278>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f023 0201 	bic.w	r2, r3, #1
 8005928:	4907      	ldr	r1, [pc, #28]	; (8005948 <HAL_RCC_ClockConfig+0x278>)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	4313      	orrs	r3, r2
 800592e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005930:	4b05      	ldr	r3, [pc, #20]	; (8005948 <HAL_RCC_ClockConfig+0x278>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	429a      	cmp	r2, r3
 800593c:	d008      	beq.n	8005950 <HAL_RCC_ClockConfig+0x280>
    {
      return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e075      	b.n	8005a2e <HAL_RCC_ClockConfig+0x35e>
 8005942:	bf00      	nop
 8005944:	0800b210 	.word	0x0800b210
 8005948:	40023c00 	.word	0x40023c00
 800594c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0304 	and.w	r3, r3, #4
 8005958:	2b00      	cmp	r3, #0
 800595a:	d025      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x2d8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d018      	beq.n	8005996 <HAL_RCC_ClockConfig+0x2c6>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800596c:	d013      	beq.n	8005996 <HAL_RCC_ClockConfig+0x2c6>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005976:	d00e      	beq.n	8005996 <HAL_RCC_ClockConfig+0x2c6>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005980:	d009      	beq.n	8005996 <HAL_RCC_ClockConfig+0x2c6>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800598a:	d004      	beq.n	8005996 <HAL_RCC_ClockConfig+0x2c6>
 800598c:	f240 31ad 	movw	r1, #941	; 0x3ad
 8005990:	4829      	ldr	r0, [pc, #164]	; (8005a38 <HAL_RCC_ClockConfig+0x368>)
 8005992:	f7fc f801 	bl	8001998 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005996:	4b29      	ldr	r3, [pc, #164]	; (8005a3c <HAL_RCC_ClockConfig+0x36c>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	4926      	ldr	r1, [pc, #152]	; (8005a3c <HAL_RCC_ClockConfig+0x36c>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0308 	and.w	r3, r3, #8
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d026      	beq.n	8005a02 <HAL_RCC_ClockConfig+0x332>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d018      	beq.n	80059ee <HAL_RCC_ClockConfig+0x31e>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059c4:	d013      	beq.n	80059ee <HAL_RCC_ClockConfig+0x31e>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80059ce:	d00e      	beq.n	80059ee <HAL_RCC_ClockConfig+0x31e>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80059d8:	d009      	beq.n	80059ee <HAL_RCC_ClockConfig+0x31e>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059e2:	d004      	beq.n	80059ee <HAL_RCC_ClockConfig+0x31e>
 80059e4:	f44f 716d 	mov.w	r1, #948	; 0x3b4
 80059e8:	4813      	ldr	r0, [pc, #76]	; (8005a38 <HAL_RCC_ClockConfig+0x368>)
 80059ea:	f7fb ffd5 	bl	8001998 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059ee:	4b13      	ldr	r3, [pc, #76]	; (8005a3c <HAL_RCC_ClockConfig+0x36c>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	00db      	lsls	r3, r3, #3
 80059fc:	490f      	ldr	r1, [pc, #60]	; (8005a3c <HAL_RCC_ClockConfig+0x36c>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a02:	f000 f823 	bl	8005a4c <HAL_RCC_GetSysClockFreq>
 8005a06:	4601      	mov	r1, r0
 8005a08:	4b0c      	ldr	r3, [pc, #48]	; (8005a3c <HAL_RCC_ClockConfig+0x36c>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	091b      	lsrs	r3, r3, #4
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	4a0b      	ldr	r2, [pc, #44]	; (8005a40 <HAL_RCC_ClockConfig+0x370>)
 8005a14:	5cd3      	ldrb	r3, [r2, r3]
 8005a16:	fa21 f303 	lsr.w	r3, r1, r3
 8005a1a:	4a0a      	ldr	r2, [pc, #40]	; (8005a44 <HAL_RCC_ClockConfig+0x374>)
 8005a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a1e:	4b0a      	ldr	r3, [pc, #40]	; (8005a48 <HAL_RCC_ClockConfig+0x378>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fb fff6 	bl	8001a14 <HAL_InitTick>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	72fb      	strb	r3, [r7, #11]

  return status;
 8005a2c:	7afb      	ldrb	r3, [r7, #11]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	0800b210 	.word	0x0800b210
 8005a3c:	40023800 	.word	0x40023800
 8005a40:	0800b3f4 	.word	0x0800b3f4
 8005a44:	20000000 	.word	0x20000000
 8005a48:	20000004 	.word	0x20000004

08005a4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b087      	sub	sp, #28
 8005a50:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8005a52:	4b26      	ldr	r3, [pc, #152]	; (8005aec <HAL_RCC_GetSysClockFreq+0xa0>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f003 030c 	and.w	r3, r3, #12
 8005a5e:	2b08      	cmp	r3, #8
 8005a60:	d006      	beq.n	8005a70 <HAL_RCC_GetSysClockFreq+0x24>
 8005a62:	2b0c      	cmp	r3, #12
 8005a64:	d007      	beq.n	8005a76 <HAL_RCC_GetSysClockFreq+0x2a>
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d12c      	bne.n	8005ac4 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a6a:	4b21      	ldr	r3, [pc, #132]	; (8005af0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005a6c:	613b      	str	r3, [r7, #16]
      break;
 8005a6e:	e037      	b.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a70:	4b20      	ldr	r3, [pc, #128]	; (8005af4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005a72:	613b      	str	r3, [r7, #16]
      break;
 8005a74:	e034      	b.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	0c9b      	lsrs	r3, r3, #18
 8005a7a:	f003 030f 	and.w	r3, r3, #15
 8005a7e:	4a1e      	ldr	r2, [pc, #120]	; (8005af8 <HAL_RCC_GetSysClockFreq+0xac>)
 8005a80:	5cd3      	ldrb	r3, [r2, r3]
 8005a82:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	0d9b      	lsrs	r3, r3, #22
 8005a88:	f003 0303 	and.w	r3, r3, #3
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a90:	4b16      	ldr	r3, [pc, #88]	; (8005aec <HAL_RCC_GetSysClockFreq+0xa0>)
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d008      	beq.n	8005aae <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	4a15      	ldr	r2, [pc, #84]	; (8005af4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005aa0:	fb02 f203 	mul.w	r2, r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	e007      	b.n	8005abe <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	4a0f      	ldr	r2, [pc, #60]	; (8005af0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005ab2:	fb02 f203 	mul.w	r2, r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005abc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	613b      	str	r3, [r7, #16]
      break;
 8005ac2:	e00d      	b.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005ac4:	4b09      	ldr	r3, [pc, #36]	; (8005aec <HAL_RCC_GetSysClockFreq+0xa0>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	0b5b      	lsrs	r3, r3, #13
 8005aca:	f003 0307 	and.w	r3, r3, #7
 8005ace:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8005adc:	613b      	str	r3, [r7, #16]
      break;
 8005ade:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ae0:	693b      	ldr	r3, [r7, #16]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	371c      	adds	r7, #28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bc80      	pop	{r7}
 8005aea:	4770      	bx	lr
 8005aec:	40023800 	.word	0x40023800
 8005af0:	00f42400 	.word	0x00f42400
 8005af4:	007a1200 	.word	0x007a1200
 8005af8:	0800b3e8 	.word	0x0800b3e8

08005afc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b00:	4b02      	ldr	r3, [pc, #8]	; (8005b0c <HAL_RCC_GetHCLKFreq+0x10>)
 8005b02:	681b      	ldr	r3, [r3, #0]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bc80      	pop	{r7}
 8005b0a:	4770      	bx	lr
 8005b0c:	20000000 	.word	0x20000000

08005b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b14:	f7ff fff2 	bl	8005afc <HAL_RCC_GetHCLKFreq>
 8005b18:	4601      	mov	r1, r0
 8005b1a:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	0a1b      	lsrs	r3, r3, #8
 8005b20:	f003 0307 	and.w	r3, r3, #7
 8005b24:	4a03      	ldr	r2, [pc, #12]	; (8005b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b26:	5cd3      	ldrb	r3, [r2, r3]
 8005b28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	40023800 	.word	0x40023800
 8005b34:	0800b404 	.word	0x0800b404

08005b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b3c:	f7ff ffde 	bl	8005afc <HAL_RCC_GetHCLKFreq>
 8005b40:	4601      	mov	r1, r0
 8005b42:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	0adb      	lsrs	r3, r3, #11
 8005b48:	f003 0307 	and.w	r3, r3, #7
 8005b4c:	4a03      	ldr	r2, [pc, #12]	; (8005b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b4e:	5cd3      	ldrb	r3, [r2, r3]
 8005b50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	40023800 	.word	0x40023800
 8005b5c:	0800b404 	.word	0x0800b404

08005b60 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d104      	bne.n	8005b7a <HAL_RCC_GetClockConfig+0x1a>
 8005b70:	f240 41fa 	movw	r1, #1274	; 0x4fa
 8005b74:	4818      	ldr	r0, [pc, #96]	; (8005bd8 <HAL_RCC_GetClockConfig+0x78>)
 8005b76:	f7fb ff0f 	bl	8001998 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d104      	bne.n	8005b8a <HAL_RCC_GetClockConfig+0x2a>
 8005b80:	f240 41fb 	movw	r1, #1275	; 0x4fb
 8005b84:	4814      	ldr	r0, [pc, #80]	; (8005bd8 <HAL_RCC_GetClockConfig+0x78>)
 8005b86:	f7fb ff07 	bl	8001998 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	220f      	movs	r2, #15
 8005b8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b90:	4b12      	ldr	r3, [pc, #72]	; (8005bdc <HAL_RCC_GetClockConfig+0x7c>)
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f003 0203 	and.w	r2, r3, #3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005b9c:	4b0f      	ldr	r3, [pc, #60]	; (8005bdc <HAL_RCC_GetClockConfig+0x7c>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ba8:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <HAL_RCC_GetClockConfig+0x7c>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005bb4:	4b09      	ldr	r3, [pc, #36]	; (8005bdc <HAL_RCC_GetClockConfig+0x7c>)
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	08db      	lsrs	r3, r3, #3
 8005bba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005bc2:	4b07      	ldr	r3, [pc, #28]	; (8005be0 <HAL_RCC_GetClockConfig+0x80>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0201 	and.w	r2, r3, #1
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	601a      	str	r2, [r3, #0]
}
 8005bce:	bf00      	nop
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	0800b210 	.word	0x0800b210
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	40023c00 	.word	0x40023c00

08005be4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005bec:	2300      	movs	r3, #0
 8005bee:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005bf0:	4b29      	ldr	r3, [pc, #164]	; (8005c98 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d12c      	bne.n	8005c56 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005bfc:	4b26      	ldr	r3, [pc, #152]	; (8005c98 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d005      	beq.n	8005c14 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005c08:	4b24      	ldr	r3, [pc, #144]	; (8005c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	e016      	b.n	8005c42 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c14:	4b20      	ldr	r3, [pc, #128]	; (8005c98 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	4a1f      	ldr	r2, [pc, #124]	; (8005c98 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c1e:	6253      	str	r3, [r2, #36]	; 0x24
 8005c20:	4b1d      	ldr	r3, [pc, #116]	; (8005c98 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005c2c:	4b1b      	ldr	r3, [pc, #108]	; (8005c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005c34:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c36:	4b18      	ldr	r3, [pc, #96]	; (8005c98 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	4a17      	ldr	r2, [pc, #92]	; (8005c98 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c40:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005c48:	d105      	bne.n	8005c56 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c50:	d101      	bne.n	8005c56 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8005c52:	2301      	movs	r3, #1
 8005c54:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d105      	bne.n	8005c68 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8005c5c:	4b10      	ldr	r3, [pc, #64]	; (8005ca0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a0f      	ldr	r2, [pc, #60]	; (8005ca0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c62:	f043 0304 	orr.w	r3, r3, #4
 8005c66:	6013      	str	r3, [r2, #0]
 8005c68:	4b0d      	ldr	r3, [pc, #52]	; (8005ca0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f023 0201 	bic.w	r2, r3, #1
 8005c70:	490b      	ldr	r1, [pc, #44]	; (8005ca0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c78:	4b09      	ldr	r3, [pc, #36]	; (8005ca0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d001      	beq.n	8005c8a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e000      	b.n	8005c8c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	371c      	adds	r7, #28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bc80      	pop	{r7}
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	40023800 	.word	0x40023800
 8005c9c:	40007000 	.word	0x40007000
 8005ca0:	40023c00 	.word	0x40023c00

08005ca4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e088      	b.n	8005dc8 <HAL_TIM_Base_Init+0x124>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cbe:	d02c      	beq.n	8005d1a <HAL_TIM_Base_Init+0x76>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a42      	ldr	r2, [pc, #264]	; (8005dd0 <HAL_TIM_Base_Init+0x12c>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d027      	beq.n	8005d1a <HAL_TIM_Base_Init+0x76>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a41      	ldr	r2, [pc, #260]	; (8005dd4 <HAL_TIM_Base_Init+0x130>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d022      	beq.n	8005d1a <HAL_TIM_Base_Init+0x76>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a3f      	ldr	r2, [pc, #252]	; (8005dd8 <HAL_TIM_Base_Init+0x134>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d01d      	beq.n	8005d1a <HAL_TIM_Base_Init+0x76>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a3e      	ldr	r2, [pc, #248]	; (8005ddc <HAL_TIM_Base_Init+0x138>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d018      	beq.n	8005d1a <HAL_TIM_Base_Init+0x76>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a3c      	ldr	r2, [pc, #240]	; (8005de0 <HAL_TIM_Base_Init+0x13c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d013      	beq.n	8005d1a <HAL_TIM_Base_Init+0x76>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a3b      	ldr	r2, [pc, #236]	; (8005de4 <HAL_TIM_Base_Init+0x140>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d00e      	beq.n	8005d1a <HAL_TIM_Base_Init+0x76>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a39      	ldr	r2, [pc, #228]	; (8005de8 <HAL_TIM_Base_Init+0x144>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d009      	beq.n	8005d1a <HAL_TIM_Base_Init+0x76>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a38      	ldr	r2, [pc, #224]	; (8005dec <HAL_TIM_Base_Init+0x148>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d004      	beq.n	8005d1a <HAL_TIM_Base_Init+0x76>
 8005d10:	f240 110b 	movw	r1, #267	; 0x10b
 8005d14:	4836      	ldr	r0, [pc, #216]	; (8005df0 <HAL_TIM_Base_Init+0x14c>)
 8005d16:	f7fb fe3f 	bl	8001998 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d014      	beq.n	8005d4c <HAL_TIM_Base_Init+0xa8>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	2b10      	cmp	r3, #16
 8005d28:	d010      	beq.n	8005d4c <HAL_TIM_Base_Init+0xa8>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	2b20      	cmp	r3, #32
 8005d30:	d00c      	beq.n	8005d4c <HAL_TIM_Base_Init+0xa8>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	2b40      	cmp	r3, #64	; 0x40
 8005d38:	d008      	beq.n	8005d4c <HAL_TIM_Base_Init+0xa8>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	2b60      	cmp	r3, #96	; 0x60
 8005d40:	d004      	beq.n	8005d4c <HAL_TIM_Base_Init+0xa8>
 8005d42:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8005d46:	482a      	ldr	r0, [pc, #168]	; (8005df0 <HAL_TIM_Base_Init+0x14c>)
 8005d48:	f7fb fe26 	bl	8001998 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00e      	beq.n	8005d72 <HAL_TIM_Base_Init+0xce>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d5c:	d009      	beq.n	8005d72 <HAL_TIM_Base_Init+0xce>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d66:	d004      	beq.n	8005d72 <HAL_TIM_Base_Init+0xce>
 8005d68:	f240 110d 	movw	r1, #269	; 0x10d
 8005d6c:	4820      	ldr	r0, [pc, #128]	; (8005df0 <HAL_TIM_Base_Init+0x14c>)
 8005d6e:	f7fb fe13 	bl	8001998 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d008      	beq.n	8005d8c <HAL_TIM_Base_Init+0xe8>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	2b80      	cmp	r3, #128	; 0x80
 8005d80:	d004      	beq.n	8005d8c <HAL_TIM_Base_Init+0xe8>
 8005d82:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8005d86:	481a      	ldr	r0, [pc, #104]	; (8005df0 <HAL_TIM_Base_Init+0x14c>)
 8005d88:	f7fb fe06 	bl	8001998 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d106      	bne.n	8005da6 <HAL_TIM_Base_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7fc f8f3 	bl	8001f8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2202      	movs	r2, #2
 8005daa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	3304      	adds	r3, #4
 8005db6:	4619      	mov	r1, r3
 8005db8:	4610      	mov	r0, r2
 8005dba:	f001 f815 	bl	8006de8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3708      	adds	r7, #8
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	40000400 	.word	0x40000400
 8005dd4:	40000800 	.word	0x40000800
 8005dd8:	40000c00 	.word	0x40000c00
 8005ddc:	40001000 	.word	0x40001000
 8005de0:	40001400 	.word	0x40001400
 8005de4:	40010800 	.word	0x40010800
 8005de8:	40010c00 	.word	0x40010c00
 8005dec:	40011000 	.word	0x40011000
 8005df0:	0800b248 	.word	0x0800b248

08005df4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e04:	d02c      	beq.n	8005e60 <HAL_TIM_Base_Start+0x6c>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a24      	ldr	r2, [pc, #144]	; (8005e9c <HAL_TIM_Base_Start+0xa8>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d027      	beq.n	8005e60 <HAL_TIM_Base_Start+0x6c>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a22      	ldr	r2, [pc, #136]	; (8005ea0 <HAL_TIM_Base_Start+0xac>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d022      	beq.n	8005e60 <HAL_TIM_Base_Start+0x6c>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a21      	ldr	r2, [pc, #132]	; (8005ea4 <HAL_TIM_Base_Start+0xb0>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d01d      	beq.n	8005e60 <HAL_TIM_Base_Start+0x6c>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a1f      	ldr	r2, [pc, #124]	; (8005ea8 <HAL_TIM_Base_Start+0xb4>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d018      	beq.n	8005e60 <HAL_TIM_Base_Start+0x6c>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a1e      	ldr	r2, [pc, #120]	; (8005eac <HAL_TIM_Base_Start+0xb8>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d013      	beq.n	8005e60 <HAL_TIM_Base_Start+0x6c>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a1c      	ldr	r2, [pc, #112]	; (8005eb0 <HAL_TIM_Base_Start+0xbc>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d00e      	beq.n	8005e60 <HAL_TIM_Base_Start+0x6c>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a1b      	ldr	r2, [pc, #108]	; (8005eb4 <HAL_TIM_Base_Start+0xc0>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d009      	beq.n	8005e60 <HAL_TIM_Base_Start+0x6c>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a19      	ldr	r2, [pc, #100]	; (8005eb8 <HAL_TIM_Base_Start+0xc4>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d004      	beq.n	8005e60 <HAL_TIM_Base_Start+0x6c>
 8005e56:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 8005e5a:	4818      	ldr	r0, [pc, #96]	; (8005ebc <HAL_TIM_Base_Start+0xc8>)
 8005e5c:	f7fb fd9c 	bl	8001998 <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 0307 	and.w	r3, r3, #7
 8005e72:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b06      	cmp	r3, #6
 8005e78:	d007      	beq.n	8005e8a <HAL_TIM_Base_Start+0x96>
  {
    __HAL_TIM_ENABLE(htim);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f042 0201 	orr.w	r2, r2, #1
 8005e88:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	40000400 	.word	0x40000400
 8005ea0:	40000800 	.word	0x40000800
 8005ea4:	40000c00 	.word	0x40000c00
 8005ea8:	40001000 	.word	0x40001000
 8005eac:	40001400 	.word	0x40001400
 8005eb0:	40010800 	.word	0x40010800
 8005eb4:	40010c00 	.word	0x40010c00
 8005eb8:	40011000 	.word	0x40011000
 8005ebc:	0800b248 	.word	0x0800b248

08005ec0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed0:	d02c      	beq.n	8005f2c <HAL_TIM_Base_Stop+0x6c>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a24      	ldr	r2, [pc, #144]	; (8005f68 <HAL_TIM_Base_Stop+0xa8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d027      	beq.n	8005f2c <HAL_TIM_Base_Stop+0x6c>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a22      	ldr	r2, [pc, #136]	; (8005f6c <HAL_TIM_Base_Stop+0xac>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d022      	beq.n	8005f2c <HAL_TIM_Base_Stop+0x6c>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a21      	ldr	r2, [pc, #132]	; (8005f70 <HAL_TIM_Base_Stop+0xb0>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d01d      	beq.n	8005f2c <HAL_TIM_Base_Stop+0x6c>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1f      	ldr	r2, [pc, #124]	; (8005f74 <HAL_TIM_Base_Stop+0xb4>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d018      	beq.n	8005f2c <HAL_TIM_Base_Stop+0x6c>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a1e      	ldr	r2, [pc, #120]	; (8005f78 <HAL_TIM_Base_Stop+0xb8>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d013      	beq.n	8005f2c <HAL_TIM_Base_Stop+0x6c>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a1c      	ldr	r2, [pc, #112]	; (8005f7c <HAL_TIM_Base_Stop+0xbc>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d00e      	beq.n	8005f2c <HAL_TIM_Base_Stop+0x6c>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a1b      	ldr	r2, [pc, #108]	; (8005f80 <HAL_TIM_Base_Stop+0xc0>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d009      	beq.n	8005f2c <HAL_TIM_Base_Stop+0x6c>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a19      	ldr	r2, [pc, #100]	; (8005f84 <HAL_TIM_Base_Stop+0xc4>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d004      	beq.n	8005f2c <HAL_TIM_Base_Stop+0x6c>
 8005f22:	f240 1199 	movw	r1, #409	; 0x199
 8005f26:	4818      	ldr	r0, [pc, #96]	; (8005f88 <HAL_TIM_Base_Stop+0xc8>)
 8005f28:	f7fb fd36 	bl	8001998 <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6a1a      	ldr	r2, [r3, #32]
 8005f3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f3e:	4013      	ands	r3, r2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d107      	bne.n	8005f54 <HAL_TIM_Base_Stop+0x94>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f022 0201 	bic.w	r2, r2, #1
 8005f52:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	40000400 	.word	0x40000400
 8005f6c:	40000800 	.word	0x40000800
 8005f70:	40000c00 	.word	0x40000c00
 8005f74:	40001000 	.word	0x40001000
 8005f78:	40001400 	.word	0x40001400
 8005f7c:	40010800 	.word	0x40010800
 8005f80:	40010c00 	.word	0x40010c00
 8005f84:	40011000 	.word	0x40011000
 8005f88:	0800b248 	.word	0x0800b248

08005f8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f9c:	d02c      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a24      	ldr	r2, [pc, #144]	; (8006034 <HAL_TIM_Base_Start_IT+0xa8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d027      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a22      	ldr	r2, [pc, #136]	; (8006038 <HAL_TIM_Base_Start_IT+0xac>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d022      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a21      	ldr	r2, [pc, #132]	; (800603c <HAL_TIM_Base_Start_IT+0xb0>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d01d      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a1f      	ldr	r2, [pc, #124]	; (8006040 <HAL_TIM_Base_Start_IT+0xb4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d018      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a1e      	ldr	r2, [pc, #120]	; (8006044 <HAL_TIM_Base_Start_IT+0xb8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d013      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a1c      	ldr	r2, [pc, #112]	; (8006048 <HAL_TIM_Base_Start_IT+0xbc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00e      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a1b      	ldr	r2, [pc, #108]	; (800604c <HAL_TIM_Base_Start_IT+0xc0>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d009      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a19      	ldr	r2, [pc, #100]	; (8006050 <HAL_TIM_Base_Start_IT+0xc4>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d004      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8005fee:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 8005ff2:	4818      	ldr	r0, [pc, #96]	; (8006054 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ff4:	f7fb fcd0 	bl	8001998 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f042 0201 	orr.w	r2, r2, #1
 8006006:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f003 0307 	and.w	r3, r3, #7
 8006012:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2b06      	cmp	r3, #6
 8006018:	d007      	beq.n	800602a <HAL_TIM_Base_Start_IT+0x9e>
  {
    __HAL_TIM_ENABLE(htim);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f042 0201 	orr.w	r2, r2, #1
 8006028:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	40000400 	.word	0x40000400
 8006038:	40000800 	.word	0x40000800
 800603c:	40000c00 	.word	0x40000c00
 8006040:	40001000 	.word	0x40001000
 8006044:	40001400 	.word	0x40001400
 8006048:	40010800 	.word	0x40010800
 800604c:	40010c00 	.word	0x40010c00
 8006050:	40011000 	.word	0x40011000
 8006054:	0800b248 	.word	0x0800b248

08006058 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e088      	b.n	800617c <HAL_TIM_PWM_Init+0x124>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006072:	d02c      	beq.n	80060ce <HAL_TIM_PWM_Init+0x76>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a42      	ldr	r2, [pc, #264]	; (8006184 <HAL_TIM_PWM_Init+0x12c>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d027      	beq.n	80060ce <HAL_TIM_PWM_Init+0x76>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a41      	ldr	r2, [pc, #260]	; (8006188 <HAL_TIM_PWM_Init+0x130>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d022      	beq.n	80060ce <HAL_TIM_PWM_Init+0x76>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a3f      	ldr	r2, [pc, #252]	; (800618c <HAL_TIM_PWM_Init+0x134>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d01d      	beq.n	80060ce <HAL_TIM_PWM_Init+0x76>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a3e      	ldr	r2, [pc, #248]	; (8006190 <HAL_TIM_PWM_Init+0x138>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d018      	beq.n	80060ce <HAL_TIM_PWM_Init+0x76>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a3c      	ldr	r2, [pc, #240]	; (8006194 <HAL_TIM_PWM_Init+0x13c>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d013      	beq.n	80060ce <HAL_TIM_PWM_Init+0x76>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a3b      	ldr	r2, [pc, #236]	; (8006198 <HAL_TIM_PWM_Init+0x140>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d00e      	beq.n	80060ce <HAL_TIM_PWM_Init+0x76>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a39      	ldr	r2, [pc, #228]	; (800619c <HAL_TIM_PWM_Init+0x144>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d009      	beq.n	80060ce <HAL_TIM_PWM_Init+0x76>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a38      	ldr	r2, [pc, #224]	; (80061a0 <HAL_TIM_PWM_Init+0x148>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d004      	beq.n	80060ce <HAL_TIM_PWM_Init+0x76>
 80060c4:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80060c8:	4836      	ldr	r0, [pc, #216]	; (80061a4 <HAL_TIM_PWM_Init+0x14c>)
 80060ca:	f7fb fc65 	bl	8001998 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d014      	beq.n	8006100 <HAL_TIM_PWM_Init+0xa8>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	2b10      	cmp	r3, #16
 80060dc:	d010      	beq.n	8006100 <HAL_TIM_PWM_Init+0xa8>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	2b20      	cmp	r3, #32
 80060e4:	d00c      	beq.n	8006100 <HAL_TIM_PWM_Init+0xa8>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	2b40      	cmp	r3, #64	; 0x40
 80060ec:	d008      	beq.n	8006100 <HAL_TIM_PWM_Init+0xa8>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	2b60      	cmp	r3, #96	; 0x60
 80060f4:	d004      	beq.n	8006100 <HAL_TIM_PWM_Init+0xa8>
 80060f6:	f240 4171 	movw	r1, #1137	; 0x471
 80060fa:	482a      	ldr	r0, [pc, #168]	; (80061a4 <HAL_TIM_PWM_Init+0x14c>)
 80060fc:	f7fb fc4c 	bl	8001998 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00e      	beq.n	8006126 <HAL_TIM_PWM_Init+0xce>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006110:	d009      	beq.n	8006126 <HAL_TIM_PWM_Init+0xce>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800611a:	d004      	beq.n	8006126 <HAL_TIM_PWM_Init+0xce>
 800611c:	f240 4172 	movw	r1, #1138	; 0x472
 8006120:	4820      	ldr	r0, [pc, #128]	; (80061a4 <HAL_TIM_PWM_Init+0x14c>)
 8006122:	f7fb fc39 	bl	8001998 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d008      	beq.n	8006140 <HAL_TIM_PWM_Init+0xe8>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	2b80      	cmp	r3, #128	; 0x80
 8006134:	d004      	beq.n	8006140 <HAL_TIM_PWM_Init+0xe8>
 8006136:	f240 4173 	movw	r1, #1139	; 0x473
 800613a:	481a      	ldr	r0, [pc, #104]	; (80061a4 <HAL_TIM_PWM_Init+0x14c>)
 800613c:	f7fb fc2c 	bl	8001998 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	d106      	bne.n	800615a <HAL_TIM_PWM_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f827 	bl	80061a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2202      	movs	r2, #2
 800615e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3304      	adds	r3, #4
 800616a:	4619      	mov	r1, r3
 800616c:	4610      	mov	r0, r2
 800616e:	f000 fe3b 	bl	8006de8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	40000400 	.word	0x40000400
 8006188:	40000800 	.word	0x40000800
 800618c:	40000c00 	.word	0x40000c00
 8006190:	40001000 	.word	0x40001000
 8006194:	40001400 	.word	0x40001400
 8006198:	40010800 	.word	0x40010800
 800619c:	40010c00 	.word	0x40010c00
 80061a0:	40011000 	.word	0x40011000
 80061a4:	0800b248 	.word	0x0800b248

080061a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bc80      	pop	{r7}
 80061b8:	4770      	bx	lr
	...

080061bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ce:	d10b      	bne.n	80061e8 <HAL_TIM_PWM_Start+0x2c>
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d05b      	beq.n	800628e <HAL_TIM_PWM_Start+0xd2>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b04      	cmp	r3, #4
 80061da:	d058      	beq.n	800628e <HAL_TIM_PWM_Start+0xd2>
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	2b08      	cmp	r3, #8
 80061e0:	d055      	beq.n	800628e <HAL_TIM_PWM_Start+0xd2>
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b0c      	cmp	r3, #12
 80061e6:	d052      	beq.n	800628e <HAL_TIM_PWM_Start+0xd2>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a36      	ldr	r2, [pc, #216]	; (80062c8 <HAL_TIM_PWM_Start+0x10c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d10b      	bne.n	800620a <HAL_TIM_PWM_Start+0x4e>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d04a      	beq.n	800628e <HAL_TIM_PWM_Start+0xd2>
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d047      	beq.n	800628e <HAL_TIM_PWM_Start+0xd2>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b08      	cmp	r3, #8
 8006202:	d044      	beq.n	800628e <HAL_TIM_PWM_Start+0xd2>
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2b0c      	cmp	r3, #12
 8006208:	d041      	beq.n	800628e <HAL_TIM_PWM_Start+0xd2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a2f      	ldr	r2, [pc, #188]	; (80062cc <HAL_TIM_PWM_Start+0x110>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d10b      	bne.n	800622c <HAL_TIM_PWM_Start+0x70>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d039      	beq.n	800628e <HAL_TIM_PWM_Start+0xd2>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b04      	cmp	r3, #4
 800621e:	d036      	beq.n	800628e <HAL_TIM_PWM_Start+0xd2>
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	2b08      	cmp	r3, #8
 8006224:	d033      	beq.n	800628e <HAL_TIM_PWM_Start+0xd2>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b0c      	cmp	r3, #12
 800622a:	d030      	beq.n	800628e <HAL_TIM_PWM_Start+0xd2>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a27      	ldr	r2, [pc, #156]	; (80062d0 <HAL_TIM_PWM_Start+0x114>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d10b      	bne.n	800624e <HAL_TIM_PWM_Start+0x92>
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d028      	beq.n	800628e <HAL_TIM_PWM_Start+0xd2>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2b04      	cmp	r3, #4
 8006240:	d025      	beq.n	800628e <HAL_TIM_PWM_Start+0xd2>
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2b08      	cmp	r3, #8
 8006246:	d022      	beq.n	800628e <HAL_TIM_PWM_Start+0xd2>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2b0c      	cmp	r3, #12
 800624c:	d01f      	beq.n	800628e <HAL_TIM_PWM_Start+0xd2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a20      	ldr	r2, [pc, #128]	; (80062d4 <HAL_TIM_PWM_Start+0x118>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d105      	bne.n	8006264 <HAL_TIM_PWM_Start+0xa8>
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d017      	beq.n	800628e <HAL_TIM_PWM_Start+0xd2>
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2b04      	cmp	r3, #4
 8006262:	d014      	beq.n	800628e <HAL_TIM_PWM_Start+0xd2>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a1b      	ldr	r2, [pc, #108]	; (80062d8 <HAL_TIM_PWM_Start+0x11c>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d102      	bne.n	8006274 <HAL_TIM_PWM_Start+0xb8>
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00c      	beq.n	800628e <HAL_TIM_PWM_Start+0xd2>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a18      	ldr	r2, [pc, #96]	; (80062dc <HAL_TIM_PWM_Start+0x120>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d102      	bne.n	8006284 <HAL_TIM_PWM_Start+0xc8>
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d004      	beq.n	800628e <HAL_TIM_PWM_Start+0xd2>
 8006284:	f44f 619d 	mov.w	r1, #1256	; 0x4e8
 8006288:	4815      	ldr	r0, [pc, #84]	; (80062e0 <HAL_TIM_PWM_Start+0x124>)
 800628a:	f7fb fb85 	bl	8001998 <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2201      	movs	r2, #1
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	4618      	mov	r0, r3
 8006298:	f000 ffa2 	bl	80071e0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b06      	cmp	r3, #6
 80062ac:	d007      	beq.n	80062be <HAL_TIM_PWM_Start+0x102>
  {
    __HAL_TIM_ENABLE(htim);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f042 0201 	orr.w	r2, r2, #1
 80062bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	40000400 	.word	0x40000400
 80062cc:	40000800 	.word	0x40000800
 80062d0:	40000c00 	.word	0x40000c00
 80062d4:	40010800 	.word	0x40010800
 80062d8:	40010c00 	.word	0x40010c00
 80062dc:	40011000 	.word	0x40011000
 80062e0:	0800b248 	.word	0x0800b248

080062e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d122      	bne.n	8006340 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b02      	cmp	r3, #2
 8006306:	d11b      	bne.n	8006340 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f06f 0202 	mvn.w	r2, #2
 8006310:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	f003 0303 	and.w	r3, r3, #3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fd43 	bl	8006db2 <HAL_TIM_IC_CaptureCallback>
 800632c:	e005      	b.n	800633a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fd36 	bl	8006da0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 fd45 	bl	8006dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f003 0304 	and.w	r3, r3, #4
 800634a:	2b04      	cmp	r3, #4
 800634c:	d122      	bne.n	8006394 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	2b04      	cmp	r3, #4
 800635a:	d11b      	bne.n	8006394 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f06f 0204 	mvn.w	r2, #4
 8006364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2202      	movs	r2, #2
 800636a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006376:	2b00      	cmp	r3, #0
 8006378:	d003      	beq.n	8006382 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fd19 	bl	8006db2 <HAL_TIM_IC_CaptureCallback>
 8006380:	e005      	b.n	800638e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fd0c 	bl	8006da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fd1b 	bl	8006dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	f003 0308 	and.w	r3, r3, #8
 800639e:	2b08      	cmp	r3, #8
 80063a0:	d122      	bne.n	80063e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f003 0308 	and.w	r3, r3, #8
 80063ac:	2b08      	cmp	r3, #8
 80063ae:	d11b      	bne.n	80063e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f06f 0208 	mvn.w	r2, #8
 80063b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2204      	movs	r2, #4
 80063be:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	f003 0303 	and.w	r3, r3, #3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d003      	beq.n	80063d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fcef 	bl	8006db2 <HAL_TIM_IC_CaptureCallback>
 80063d4:	e005      	b.n	80063e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fce2 	bl	8006da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fcf1 	bl	8006dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	f003 0310 	and.w	r3, r3, #16
 80063f2:	2b10      	cmp	r3, #16
 80063f4:	d122      	bne.n	800643c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	f003 0310 	and.w	r3, r3, #16
 8006400:	2b10      	cmp	r3, #16
 8006402:	d11b      	bne.n	800643c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f06f 0210 	mvn.w	r2, #16
 800640c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2208      	movs	r2, #8
 8006412:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fcc5 	bl	8006db2 <HAL_TIM_IC_CaptureCallback>
 8006428:	e005      	b.n	8006436 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 fcb8 	bl	8006da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fcc7 	bl	8006dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b01      	cmp	r3, #1
 8006448:	d10e      	bne.n	8006468 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b01      	cmp	r3, #1
 8006456:	d107      	bne.n	8006468 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f06f 0201 	mvn.w	r2, #1
 8006460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7fb fa72 	bl	800194c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006472:	2b40      	cmp	r3, #64	; 0x40
 8006474:	d10e      	bne.n	8006494 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006480:	2b40      	cmp	r3, #64	; 0x40
 8006482:	d107      	bne.n	8006494 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800648c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fca1 	bl	8006dd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006494:	bf00      	nop
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d010      	beq.n	80064d0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b04      	cmp	r3, #4
 80064b2:	d00d      	beq.n	80064d0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b08      	cmp	r3, #8
 80064b8:	d00a      	beq.n	80064d0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b0c      	cmp	r3, #12
 80064be:	d007      	beq.n	80064d0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b3c      	cmp	r3, #60	; 0x3c
 80064c4:	d004      	beq.n	80064d0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80064c6:	f640 5169 	movw	r1, #3433	; 0xd69
 80064ca:	488d      	ldr	r0, [pc, #564]	; (8006700 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80064cc:	f7fb fa64 	bl	8001998 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b60      	cmp	r3, #96	; 0x60
 80064d6:	d008      	beq.n	80064ea <HAL_TIM_PWM_ConfigChannel+0x4e>
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b70      	cmp	r3, #112	; 0x70
 80064de:	d004      	beq.n	80064ea <HAL_TIM_PWM_ConfigChannel+0x4e>
 80064e0:	f640 516a 	movw	r1, #3434	; 0xd6a
 80064e4:	4886      	ldr	r0, [pc, #536]	; (8006700 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80064e6:	f7fb fa57 	bl	8001998 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d008      	beq.n	8006504 <HAL_TIM_PWM_ConfigChannel+0x68>
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d004      	beq.n	8006504 <HAL_TIM_PWM_ConfigChannel+0x68>
 80064fa:	f640 516b 	movw	r1, #3435	; 0xd6b
 80064fe:	4880      	ldr	r0, [pc, #512]	; (8006700 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8006500:	f7fb fa4a 	bl	8001998 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d008      	beq.n	800651e <HAL_TIM_PWM_ConfigChannel+0x82>
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	2b04      	cmp	r3, #4
 8006512:	d004      	beq.n	800651e <HAL_TIM_PWM_ConfigChannel+0x82>
 8006514:	f640 516c 	movw	r1, #3436	; 0xd6c
 8006518:	4879      	ldr	r0, [pc, #484]	; (8006700 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800651a:	f7fb fa3d 	bl	8001998 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006524:	2b01      	cmp	r3, #1
 8006526:	d101      	bne.n	800652c <HAL_TIM_PWM_ConfigChannel+0x90>
 8006528:	2302      	movs	r3, #2
 800652a:	e13b      	b.n	80067a4 <HAL_TIM_PWM_ConfigChannel+0x308>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2202      	movs	r2, #2
 8006538:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b0c      	cmp	r3, #12
 8006540:	f200 8126 	bhi.w	8006790 <HAL_TIM_PWM_ConfigChannel+0x2f4>
 8006544:	a201      	add	r2, pc, #4	; (adr r2, 800654c <HAL_TIM_PWM_ConfigChannel+0xb0>)
 8006546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654a:	bf00      	nop
 800654c:	08006581 	.word	0x08006581
 8006550:	08006791 	.word	0x08006791
 8006554:	08006791 	.word	0x08006791
 8006558:	08006791 	.word	0x08006791
 800655c:	08006611 	.word	0x08006611
 8006560:	08006791 	.word	0x08006791
 8006564:	08006791 	.word	0x08006791
 8006568:	08006791 	.word	0x08006791
 800656c:	0800668f 	.word	0x0800668f
 8006570:	08006791 	.word	0x08006791
 8006574:	08006791 	.word	0x08006791
 8006578:	08006791 	.word	0x08006791
 800657c:	0800671d 	.word	0x0800671d
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006588:	d022      	beq.n	80065d0 <HAL_TIM_PWM_ConfigChannel+0x134>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a5d      	ldr	r2, [pc, #372]	; (8006704 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d01d      	beq.n	80065d0 <HAL_TIM_PWM_ConfigChannel+0x134>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a5b      	ldr	r2, [pc, #364]	; (8006708 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d018      	beq.n	80065d0 <HAL_TIM_PWM_ConfigChannel+0x134>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a5a      	ldr	r2, [pc, #360]	; (800670c <HAL_TIM_PWM_ConfigChannel+0x270>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d013      	beq.n	80065d0 <HAL_TIM_PWM_ConfigChannel+0x134>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a58      	ldr	r2, [pc, #352]	; (8006710 <HAL_TIM_PWM_ConfigChannel+0x274>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d00e      	beq.n	80065d0 <HAL_TIM_PWM_ConfigChannel+0x134>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a57      	ldr	r2, [pc, #348]	; (8006714 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d009      	beq.n	80065d0 <HAL_TIM_PWM_ConfigChannel+0x134>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a55      	ldr	r2, [pc, #340]	; (8006718 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d004      	beq.n	80065d0 <HAL_TIM_PWM_ConfigChannel+0x134>
 80065c6:	f640 5178 	movw	r1, #3448	; 0xd78
 80065ca:	484d      	ldr	r0, [pc, #308]	; (8006700 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80065cc:	f7fb f9e4 	bl	8001998 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68b9      	ldr	r1, [r7, #8]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f000 fc76 	bl	8006ec8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	699a      	ldr	r2, [r3, #24]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f042 0208 	orr.w	r2, r2, #8
 80065ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699a      	ldr	r2, [r3, #24]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0204 	bic.w	r2, r2, #4
 80065fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6999      	ldr	r1, [r3, #24]
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	619a      	str	r2, [r3, #24]
      break;
 800660e:	e0c0      	b.n	8006792 <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006618:	d018      	beq.n	800664c <HAL_TIM_PWM_ConfigChannel+0x1b0>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a39      	ldr	r2, [pc, #228]	; (8006704 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d013      	beq.n	800664c <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a37      	ldr	r2, [pc, #220]	; (8006708 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d00e      	beq.n	800664c <HAL_TIM_PWM_ConfigChannel+0x1b0>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a36      	ldr	r2, [pc, #216]	; (800670c <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d009      	beq.n	800664c <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a34      	ldr	r2, [pc, #208]	; (8006710 <HAL_TIM_PWM_ConfigChannel+0x274>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d004      	beq.n	800664c <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8006642:	f640 5189 	movw	r1, #3465	; 0xd89
 8006646:	482e      	ldr	r0, [pc, #184]	; (8006700 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8006648:	f7fb f9a6 	bl	8001998 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68b9      	ldr	r1, [r7, #8]
 8006652:	4618      	mov	r0, r3
 8006654:	f000 fc74 	bl	8006f40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	699a      	ldr	r2, [r3, #24]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	699a      	ldr	r2, [r3, #24]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6999      	ldr	r1, [r3, #24]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	021a      	lsls	r2, r3, #8
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	430a      	orrs	r2, r1
 800668a:	619a      	str	r2, [r3, #24]
      break;
 800668c:	e081      	b.n	8006792 <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006696:	d013      	beq.n	80066c0 <HAL_TIM_PWM_ConfigChannel+0x224>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a19      	ldr	r2, [pc, #100]	; (8006704 <HAL_TIM_PWM_ConfigChannel+0x268>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d00e      	beq.n	80066c0 <HAL_TIM_PWM_ConfigChannel+0x224>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a18      	ldr	r2, [pc, #96]	; (8006708 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d009      	beq.n	80066c0 <HAL_TIM_PWM_ConfigChannel+0x224>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a16      	ldr	r2, [pc, #88]	; (800670c <HAL_TIM_PWM_ConfigChannel+0x270>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d004      	beq.n	80066c0 <HAL_TIM_PWM_ConfigChannel+0x224>
 80066b6:	f640 519a 	movw	r1, #3482	; 0xd9a
 80066ba:	4811      	ldr	r0, [pc, #68]	; (8006700 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80066bc:	f7fb f96c 	bl	8001998 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68b9      	ldr	r1, [r7, #8]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 fc78 	bl	8006fbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	69da      	ldr	r2, [r3, #28]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f042 0208 	orr.w	r2, r2, #8
 80066da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	69da      	ldr	r2, [r3, #28]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0204 	bic.w	r2, r2, #4
 80066ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	69d9      	ldr	r1, [r3, #28]
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	68da      	ldr	r2, [r3, #12]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	61da      	str	r2, [r3, #28]
      break;
 80066fe:	e048      	b.n	8006792 <HAL_TIM_PWM_ConfigChannel+0x2f6>
 8006700:	0800b248 	.word	0x0800b248
 8006704:	40000400 	.word	0x40000400
 8006708:	40000800 	.word	0x40000800
 800670c:	40000c00 	.word	0x40000c00
 8006710:	40010800 	.word	0x40010800
 8006714:	40010c00 	.word	0x40010c00
 8006718:	40011000 	.word	0x40011000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006724:	d013      	beq.n	800674e <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a20      	ldr	r2, [pc, #128]	; (80067ac <HAL_TIM_PWM_ConfigChannel+0x310>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d00e      	beq.n	800674e <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a1e      	ldr	r2, [pc, #120]	; (80067b0 <HAL_TIM_PWM_ConfigChannel+0x314>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d009      	beq.n	800674e <HAL_TIM_PWM_ConfigChannel+0x2b2>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a1d      	ldr	r2, [pc, #116]	; (80067b4 <HAL_TIM_PWM_ConfigChannel+0x318>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d004      	beq.n	800674e <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8006744:	f640 51ab 	movw	r1, #3499	; 0xdab
 8006748:	481b      	ldr	r0, [pc, #108]	; (80067b8 <HAL_TIM_PWM_ConfigChannel+0x31c>)
 800674a:	f7fb f925 	bl	8001998 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68b9      	ldr	r1, [r7, #8]
 8006754:	4618      	mov	r0, r3
 8006756:	f000 fc6e 	bl	8007036 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	69da      	ldr	r2, [r3, #28]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	69da      	ldr	r2, [r3, #28]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69d9      	ldr	r1, [r3, #28]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	021a      	lsls	r2, r3, #8
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	430a      	orrs	r2, r1
 800678c:	61da      	str	r2, [r3, #28]
      break;
 800678e:	e000      	b.n	8006792 <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    default:
      break;
 8006790:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	40000400 	.word	0x40000400
 80067b0:	40000800 	.word	0x40000800
 80067b4:	40000c00 	.word	0x40000c00
 80067b8:	0800b248 	.word	0x0800b248

080067bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d101      	bne.n	80067d4 <HAL_TIM_ConfigClockSource+0x18>
 80067d0:	2302      	movs	r3, #2
 80067d2:	e2d7      	b.n	8006d84 <HAL_TIM_ConfigClockSource+0x5c8>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2202      	movs	r2, #2
 80067e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ec:	d029      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x86>
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067f6:	d024      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x86>
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d020      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x86>
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b10      	cmp	r3, #16
 8006806:	d01c      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x86>
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b20      	cmp	r3, #32
 800680e:	d018      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x86>
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b30      	cmp	r3, #48	; 0x30
 8006816:	d014      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x86>
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b40      	cmp	r3, #64	; 0x40
 800681e:	d010      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x86>
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b50      	cmp	r3, #80	; 0x50
 8006826:	d00c      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x86>
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b60      	cmp	r3, #96	; 0x60
 800682e:	d008      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x86>
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b70      	cmp	r3, #112	; 0x70
 8006836:	d004      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x86>
 8006838:	f241 01d0 	movw	r1, #4304	; 0x10d0
 800683c:	4874      	ldr	r0, [pc, #464]	; (8006a10 <HAL_TIM_ConfigClockSource+0x254>)
 800683e:	f7fb f8ab 	bl	8001998 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006850:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006858:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b40      	cmp	r3, #64	; 0x40
 8006868:	f000 820a 	beq.w	8006c80 <HAL_TIM_ConfigClockSource+0x4c4>
 800686c:	2b40      	cmp	r3, #64	; 0x40
 800686e:	d80f      	bhi.n	8006890 <HAL_TIM_ConfigClockSource+0xd4>
 8006870:	2b10      	cmp	r3, #16
 8006872:	f000 8256 	beq.w	8006d22 <HAL_TIM_ConfigClockSource+0x566>
 8006876:	2b10      	cmp	r3, #16
 8006878:	d803      	bhi.n	8006882 <HAL_TIM_ConfigClockSource+0xc6>
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 8251 	beq.w	8006d22 <HAL_TIM_ConfigClockSource+0x566>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006880:	e277      	b.n	8006d72 <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 8006882:	2b20      	cmp	r3, #32
 8006884:	f000 824d 	beq.w	8006d22 <HAL_TIM_ConfigClockSource+0x566>
 8006888:	2b30      	cmp	r3, #48	; 0x30
 800688a:	f000 824a 	beq.w	8006d22 <HAL_TIM_ConfigClockSource+0x566>
      break;
 800688e:	e270      	b.n	8006d72 <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 8006890:	2b70      	cmp	r3, #112	; 0x70
 8006892:	d04c      	beq.n	800692e <HAL_TIM_ConfigClockSource+0x172>
 8006894:	2b70      	cmp	r3, #112	; 0x70
 8006896:	d806      	bhi.n	80068a6 <HAL_TIM_ConfigClockSource+0xea>
 8006898:	2b50      	cmp	r3, #80	; 0x50
 800689a:	f000 8141 	beq.w	8006b20 <HAL_TIM_ConfigClockSource+0x364>
 800689e:	2b60      	cmp	r3, #96	; 0x60
 80068a0:	f000 818f 	beq.w	8006bc2 <HAL_TIM_ConfigClockSource+0x406>
      break;
 80068a4:	e265      	b.n	8006d72 <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 80068a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068aa:	d004      	beq.n	80068b6 <HAL_TIM_ConfigClockSource+0xfa>
 80068ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b0:	f000 80c0 	beq.w	8006a34 <HAL_TIM_ConfigClockSource+0x278>
      break;
 80068b4:	e25d      	b.n	8006d72 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068be:	f000 8257 	beq.w	8006d70 <HAL_TIM_ConfigClockSource+0x5b4>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a53      	ldr	r2, [pc, #332]	; (8006a14 <HAL_TIM_ConfigClockSource+0x258>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	f000 8251 	beq.w	8006d70 <HAL_TIM_ConfigClockSource+0x5b4>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a51      	ldr	r2, [pc, #324]	; (8006a18 <HAL_TIM_ConfigClockSource+0x25c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	f000 824b 	beq.w	8006d70 <HAL_TIM_ConfigClockSource+0x5b4>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a4f      	ldr	r2, [pc, #316]	; (8006a1c <HAL_TIM_ConfigClockSource+0x260>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	f000 8245 	beq.w	8006d70 <HAL_TIM_ConfigClockSource+0x5b4>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a4d      	ldr	r2, [pc, #308]	; (8006a20 <HAL_TIM_ConfigClockSource+0x264>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	f000 823f 	beq.w	8006d70 <HAL_TIM_ConfigClockSource+0x5b4>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a4b      	ldr	r2, [pc, #300]	; (8006a24 <HAL_TIM_ConfigClockSource+0x268>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	f000 8239 	beq.w	8006d70 <HAL_TIM_ConfigClockSource+0x5b4>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a49      	ldr	r2, [pc, #292]	; (8006a28 <HAL_TIM_ConfigClockSource+0x26c>)
 8006904:	4293      	cmp	r3, r2
 8006906:	f000 8233 	beq.w	8006d70 <HAL_TIM_ConfigClockSource+0x5b4>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a47      	ldr	r2, [pc, #284]	; (8006a2c <HAL_TIM_ConfigClockSource+0x270>)
 8006910:	4293      	cmp	r3, r2
 8006912:	f000 822d 	beq.w	8006d70 <HAL_TIM_ConfigClockSource+0x5b4>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a45      	ldr	r2, [pc, #276]	; (8006a30 <HAL_TIM_ConfigClockSource+0x274>)
 800691c:	4293      	cmp	r3, r2
 800691e:	f000 8227 	beq.w	8006d70 <HAL_TIM_ConfigClockSource+0x5b4>
 8006922:	f241 01dc 	movw	r1, #4316	; 0x10dc
 8006926:	483a      	ldr	r0, [pc, #232]	; (8006a10 <HAL_TIM_ConfigClockSource+0x254>)
 8006928:	f7fb f836 	bl	8001998 <assert_failed>
      break;
 800692c:	e220      	b.n	8006d70 <HAL_TIM_ConfigClockSource+0x5b4>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006936:	d018      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x1ae>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a35      	ldr	r2, [pc, #212]	; (8006a14 <HAL_TIM_ConfigClockSource+0x258>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d013      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x1ae>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a34      	ldr	r2, [pc, #208]	; (8006a18 <HAL_TIM_ConfigClockSource+0x25c>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d00e      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x1ae>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a32      	ldr	r2, [pc, #200]	; (8006a1c <HAL_TIM_ConfigClockSource+0x260>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d009      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x1ae>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a33      	ldr	r2, [pc, #204]	; (8006a28 <HAL_TIM_ConfigClockSource+0x26c>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d004      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x1ae>
 8006960:	f241 01e3 	movw	r1, #4323	; 0x10e3
 8006964:	482a      	ldr	r0, [pc, #168]	; (8006a10 <HAL_TIM_ConfigClockSource+0x254>)
 8006966:	f7fb f817 	bl	8001998 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d013      	beq.n	800699a <HAL_TIM_ConfigClockSource+0x1de>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697a:	d00e      	beq.n	800699a <HAL_TIM_ConfigClockSource+0x1de>
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006984:	d009      	beq.n	800699a <HAL_TIM_ConfigClockSource+0x1de>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800698e:	d004      	beq.n	800699a <HAL_TIM_ConfigClockSource+0x1de>
 8006990:	f241 01e6 	movw	r1, #4326	; 0x10e6
 8006994:	481e      	ldr	r0, [pc, #120]	; (8006a10 <HAL_TIM_ConfigClockSource+0x254>)
 8006996:	f7fa ffff 	bl	8001998 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069a2:	d014      	beq.n	80069ce <HAL_TIM_ConfigClockSource+0x212>
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d010      	beq.n	80069ce <HAL_TIM_ConfigClockSource+0x212>
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00c      	beq.n	80069ce <HAL_TIM_ConfigClockSource+0x212>
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d008      	beq.n	80069ce <HAL_TIM_ConfigClockSource+0x212>
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	2b0a      	cmp	r3, #10
 80069c2:	d004      	beq.n	80069ce <HAL_TIM_ConfigClockSource+0x212>
 80069c4:	f241 01e7 	movw	r1, #4327	; 0x10e7
 80069c8:	4811      	ldr	r0, [pc, #68]	; (8006a10 <HAL_TIM_ConfigClockSource+0x254>)
 80069ca:	f7fa ffe5 	bl	8001998 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	2b0f      	cmp	r3, #15
 80069d4:	d904      	bls.n	80069e0 <HAL_TIM_ConfigClockSource+0x224>
 80069d6:	f241 01e8 	movw	r1, #4328	; 0x10e8
 80069da:	480d      	ldr	r0, [pc, #52]	; (8006a10 <HAL_TIM_ConfigClockSource+0x254>)
 80069dc:	f7fa ffdc 	bl	8001998 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6818      	ldr	r0, [r3, #0]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	6899      	ldr	r1, [r3, #8]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	f000 fbd6 	bl	80071a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a02:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	609a      	str	r2, [r3, #8]
      break;
 8006a0c:	e1b1      	b.n	8006d72 <HAL_TIM_ConfigClockSource+0x5b6>
 8006a0e:	bf00      	nop
 8006a10:	0800b248 	.word	0x0800b248
 8006a14:	40000400 	.word	0x40000400
 8006a18:	40000800 	.word	0x40000800
 8006a1c:	40000c00 	.word	0x40000c00
 8006a20:	40001000 	.word	0x40001000
 8006a24:	40001400 	.word	0x40001400
 8006a28:	40010800 	.word	0x40010800
 8006a2c:	40010c00 	.word	0x40010c00
 8006a30:	40011000 	.word	0x40011000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a3c:	d022      	beq.n	8006a84 <HAL_TIM_ConfigClockSource+0x2c8>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a88      	ldr	r2, [pc, #544]	; (8006c64 <HAL_TIM_ConfigClockSource+0x4a8>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d01d      	beq.n	8006a84 <HAL_TIM_ConfigClockSource+0x2c8>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a86      	ldr	r2, [pc, #536]	; (8006c68 <HAL_TIM_ConfigClockSource+0x4ac>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d018      	beq.n	8006a84 <HAL_TIM_ConfigClockSource+0x2c8>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a85      	ldr	r2, [pc, #532]	; (8006c6c <HAL_TIM_ConfigClockSource+0x4b0>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d013      	beq.n	8006a84 <HAL_TIM_ConfigClockSource+0x2c8>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a83      	ldr	r2, [pc, #524]	; (8006c70 <HAL_TIM_ConfigClockSource+0x4b4>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d00e      	beq.n	8006a84 <HAL_TIM_ConfigClockSource+0x2c8>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a82      	ldr	r2, [pc, #520]	; (8006c74 <HAL_TIM_ConfigClockSource+0x4b8>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d009      	beq.n	8006a84 <HAL_TIM_ConfigClockSource+0x2c8>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a80      	ldr	r2, [pc, #512]	; (8006c78 <HAL_TIM_ConfigClockSource+0x4bc>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d004      	beq.n	8006a84 <HAL_TIM_ConfigClockSource+0x2c8>
 8006a7a:	f241 01fb 	movw	r1, #4347	; 0x10fb
 8006a7e:	487f      	ldr	r0, [pc, #508]	; (8006c7c <HAL_TIM_ConfigClockSource+0x4c0>)
 8006a80:	f7fa ff8a 	bl	8001998 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d013      	beq.n	8006ab4 <HAL_TIM_ConfigClockSource+0x2f8>
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a94:	d00e      	beq.n	8006ab4 <HAL_TIM_ConfigClockSource+0x2f8>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a9e:	d009      	beq.n	8006ab4 <HAL_TIM_ConfigClockSource+0x2f8>
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006aa8:	d004      	beq.n	8006ab4 <HAL_TIM_ConfigClockSource+0x2f8>
 8006aaa:	f241 01fe 	movw	r1, #4350	; 0x10fe
 8006aae:	4873      	ldr	r0, [pc, #460]	; (8006c7c <HAL_TIM_ConfigClockSource+0x4c0>)
 8006ab0:	f7fa ff72 	bl	8001998 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006abc:	d014      	beq.n	8006ae8 <HAL_TIM_ConfigClockSource+0x32c>
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d010      	beq.n	8006ae8 <HAL_TIM_ConfigClockSource+0x32c>
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00c      	beq.n	8006ae8 <HAL_TIM_ConfigClockSource+0x32c>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d008      	beq.n	8006ae8 <HAL_TIM_ConfigClockSource+0x32c>
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	2b0a      	cmp	r3, #10
 8006adc:	d004      	beq.n	8006ae8 <HAL_TIM_ConfigClockSource+0x32c>
 8006ade:	f241 01ff 	movw	r1, #4351	; 0x10ff
 8006ae2:	4866      	ldr	r0, [pc, #408]	; (8006c7c <HAL_TIM_ConfigClockSource+0x4c0>)
 8006ae4:	f7fa ff58 	bl	8001998 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	2b0f      	cmp	r3, #15
 8006aee:	d904      	bls.n	8006afa <HAL_TIM_ConfigClockSource+0x33e>
 8006af0:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8006af4:	4861      	ldr	r0, [pc, #388]	; (8006c7c <HAL_TIM_ConfigClockSource+0x4c0>)
 8006af6:	f7fa ff4f 	bl	8001998 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6818      	ldr	r0, [r3, #0]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	6899      	ldr	r1, [r3, #8]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	f000 fb49 	bl	80071a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	689a      	ldr	r2, [r3, #8]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b1c:	609a      	str	r2, [r3, #8]
      break;
 8006b1e:	e128      	b.n	8006d72 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b28:	d018      	beq.n	8006b5c <HAL_TIM_ConfigClockSource+0x3a0>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a4d      	ldr	r2, [pc, #308]	; (8006c64 <HAL_TIM_ConfigClockSource+0x4a8>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d013      	beq.n	8006b5c <HAL_TIM_ConfigClockSource+0x3a0>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a4b      	ldr	r2, [pc, #300]	; (8006c68 <HAL_TIM_ConfigClockSource+0x4ac>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d00e      	beq.n	8006b5c <HAL_TIM_ConfigClockSource+0x3a0>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a4a      	ldr	r2, [pc, #296]	; (8006c6c <HAL_TIM_ConfigClockSource+0x4b0>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d009      	beq.n	8006b5c <HAL_TIM_ConfigClockSource+0x3a0>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a48      	ldr	r2, [pc, #288]	; (8006c70 <HAL_TIM_ConfigClockSource+0x4b4>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d004      	beq.n	8006b5c <HAL_TIM_ConfigClockSource+0x3a0>
 8006b52:	f241 110f 	movw	r1, #4367	; 0x110f
 8006b56:	4849      	ldr	r0, [pc, #292]	; (8006c7c <HAL_TIM_ConfigClockSource+0x4c0>)
 8006b58:	f7fa ff1e 	bl	8001998 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b64:	d014      	beq.n	8006b90 <HAL_TIM_ConfigClockSource+0x3d4>
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d010      	beq.n	8006b90 <HAL_TIM_ConfigClockSource+0x3d4>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00c      	beq.n	8006b90 <HAL_TIM_ConfigClockSource+0x3d4>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d008      	beq.n	8006b90 <HAL_TIM_ConfigClockSource+0x3d4>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	2b0a      	cmp	r3, #10
 8006b84:	d004      	beq.n	8006b90 <HAL_TIM_ConfigClockSource+0x3d4>
 8006b86:	f241 1112 	movw	r1, #4370	; 0x1112
 8006b8a:	483c      	ldr	r0, [pc, #240]	; (8006c7c <HAL_TIM_ConfigClockSource+0x4c0>)
 8006b8c:	f7fa ff04 	bl	8001998 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	2b0f      	cmp	r3, #15
 8006b96:	d904      	bls.n	8006ba2 <HAL_TIM_ConfigClockSource+0x3e6>
 8006b98:	f241 1113 	movw	r1, #4371	; 0x1113
 8006b9c:	4837      	ldr	r0, [pc, #220]	; (8006c7c <HAL_TIM_ConfigClockSource+0x4c0>)
 8006b9e:	f7fa fefb 	bl	8001998 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6818      	ldr	r0, [r3, #0]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	6859      	ldr	r1, [r3, #4]
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	f000 fa7f 	bl	80070b2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2150      	movs	r1, #80	; 0x50
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 fad6 	bl	800716c <TIM_ITRx_SetConfig>
      break;
 8006bc0:	e0d7      	b.n	8006d72 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bca:	d018      	beq.n	8006bfe <HAL_TIM_ConfigClockSource+0x442>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a24      	ldr	r2, [pc, #144]	; (8006c64 <HAL_TIM_ConfigClockSource+0x4a8>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d013      	beq.n	8006bfe <HAL_TIM_ConfigClockSource+0x442>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a23      	ldr	r2, [pc, #140]	; (8006c68 <HAL_TIM_ConfigClockSource+0x4ac>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d00e      	beq.n	8006bfe <HAL_TIM_ConfigClockSource+0x442>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a21      	ldr	r2, [pc, #132]	; (8006c6c <HAL_TIM_ConfigClockSource+0x4b0>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d009      	beq.n	8006bfe <HAL_TIM_ConfigClockSource+0x442>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a20      	ldr	r2, [pc, #128]	; (8006c70 <HAL_TIM_ConfigClockSource+0x4b4>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d004      	beq.n	8006bfe <HAL_TIM_ConfigClockSource+0x442>
 8006bf4:	f241 111f 	movw	r1, #4383	; 0x111f
 8006bf8:	4820      	ldr	r0, [pc, #128]	; (8006c7c <HAL_TIM_ConfigClockSource+0x4c0>)
 8006bfa:	f7fa fecd 	bl	8001998 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c06:	d014      	beq.n	8006c32 <HAL_TIM_ConfigClockSource+0x476>
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d010      	beq.n	8006c32 <HAL_TIM_ConfigClockSource+0x476>
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00c      	beq.n	8006c32 <HAL_TIM_ConfigClockSource+0x476>
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d008      	beq.n	8006c32 <HAL_TIM_ConfigClockSource+0x476>
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	2b0a      	cmp	r3, #10
 8006c26:	d004      	beq.n	8006c32 <HAL_TIM_ConfigClockSource+0x476>
 8006c28:	f241 1122 	movw	r1, #4386	; 0x1122
 8006c2c:	4813      	ldr	r0, [pc, #76]	; (8006c7c <HAL_TIM_ConfigClockSource+0x4c0>)
 8006c2e:	f7fa feb3 	bl	8001998 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	2b0f      	cmp	r3, #15
 8006c38:	d904      	bls.n	8006c44 <HAL_TIM_ConfigClockSource+0x488>
 8006c3a:	f241 1123 	movw	r1, #4387	; 0x1123
 8006c3e:	480f      	ldr	r0, [pc, #60]	; (8006c7c <HAL_TIM_ConfigClockSource+0x4c0>)
 8006c40:	f7fa feaa 	bl	8001998 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6818      	ldr	r0, [r3, #0]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	6859      	ldr	r1, [r3, #4]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	461a      	mov	r2, r3
 8006c52:	f000 fa5c 	bl	800710e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2160      	movs	r1, #96	; 0x60
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 fa85 	bl	800716c <TIM_ITRx_SetConfig>
      break;
 8006c62:	e086      	b.n	8006d72 <HAL_TIM_ConfigClockSource+0x5b6>
 8006c64:	40000400 	.word	0x40000400
 8006c68:	40000800 	.word	0x40000800
 8006c6c:	40000c00 	.word	0x40000c00
 8006c70:	40010800 	.word	0x40010800
 8006c74:	40010c00 	.word	0x40010c00
 8006c78:	40011000 	.word	0x40011000
 8006c7c:	0800b248 	.word	0x0800b248
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c88:	d018      	beq.n	8006cbc <HAL_TIM_ConfigClockSource+0x500>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a3f      	ldr	r2, [pc, #252]	; (8006d8c <HAL_TIM_ConfigClockSource+0x5d0>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d013      	beq.n	8006cbc <HAL_TIM_ConfigClockSource+0x500>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a3d      	ldr	r2, [pc, #244]	; (8006d90 <HAL_TIM_ConfigClockSource+0x5d4>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d00e      	beq.n	8006cbc <HAL_TIM_ConfigClockSource+0x500>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a3c      	ldr	r2, [pc, #240]	; (8006d94 <HAL_TIM_ConfigClockSource+0x5d8>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d009      	beq.n	8006cbc <HAL_TIM_ConfigClockSource+0x500>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a3a      	ldr	r2, [pc, #232]	; (8006d98 <HAL_TIM_ConfigClockSource+0x5dc>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d004      	beq.n	8006cbc <HAL_TIM_ConfigClockSource+0x500>
 8006cb2:	f241 112f 	movw	r1, #4399	; 0x112f
 8006cb6:	4839      	ldr	r0, [pc, #228]	; (8006d9c <HAL_TIM_ConfigClockSource+0x5e0>)
 8006cb8:	f7fa fe6e 	bl	8001998 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cc4:	d014      	beq.n	8006cf0 <HAL_TIM_ConfigClockSource+0x534>
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d010      	beq.n	8006cf0 <HAL_TIM_ConfigClockSource+0x534>
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00c      	beq.n	8006cf0 <HAL_TIM_ConfigClockSource+0x534>
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d008      	beq.n	8006cf0 <HAL_TIM_ConfigClockSource+0x534>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	2b0a      	cmp	r3, #10
 8006ce4:	d004      	beq.n	8006cf0 <HAL_TIM_ConfigClockSource+0x534>
 8006ce6:	f241 1132 	movw	r1, #4402	; 0x1132
 8006cea:	482c      	ldr	r0, [pc, #176]	; (8006d9c <HAL_TIM_ConfigClockSource+0x5e0>)
 8006cec:	f7fa fe54 	bl	8001998 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	2b0f      	cmp	r3, #15
 8006cf6:	d904      	bls.n	8006d02 <HAL_TIM_ConfigClockSource+0x546>
 8006cf8:	f241 1133 	movw	r1, #4403	; 0x1133
 8006cfc:	4827      	ldr	r0, [pc, #156]	; (8006d9c <HAL_TIM_ConfigClockSource+0x5e0>)
 8006cfe:	f7fa fe4b 	bl	8001998 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6818      	ldr	r0, [r3, #0]
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	6859      	ldr	r1, [r3, #4]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	f000 f9cf 	bl	80070b2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2140      	movs	r1, #64	; 0x40
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f000 fa26 	bl	800716c <TIM_ITRx_SetConfig>
      break;
 8006d20:	e027      	b.n	8006d72 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d2a:	d018      	beq.n	8006d5e <HAL_TIM_ConfigClockSource+0x5a2>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a16      	ldr	r2, [pc, #88]	; (8006d8c <HAL_TIM_ConfigClockSource+0x5d0>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d013      	beq.n	8006d5e <HAL_TIM_ConfigClockSource+0x5a2>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a15      	ldr	r2, [pc, #84]	; (8006d90 <HAL_TIM_ConfigClockSource+0x5d4>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d00e      	beq.n	8006d5e <HAL_TIM_ConfigClockSource+0x5a2>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a13      	ldr	r2, [pc, #76]	; (8006d94 <HAL_TIM_ConfigClockSource+0x5d8>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d009      	beq.n	8006d5e <HAL_TIM_ConfigClockSource+0x5a2>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a12      	ldr	r2, [pc, #72]	; (8006d98 <HAL_TIM_ConfigClockSource+0x5dc>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d004      	beq.n	8006d5e <HAL_TIM_ConfigClockSource+0x5a2>
 8006d54:	f241 1142 	movw	r1, #4418	; 0x1142
 8006d58:	4810      	ldr	r0, [pc, #64]	; (8006d9c <HAL_TIM_ConfigClockSource+0x5e0>)
 8006d5a:	f7fa fe1d 	bl	8001998 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4619      	mov	r1, r3
 8006d68:	4610      	mov	r0, r2
 8006d6a:	f000 f9ff 	bl	800716c <TIM_ITRx_SetConfig>
      break;
 8006d6e:	e000      	b.n	8006d72 <HAL_TIM_ConfigClockSource+0x5b6>
      break;
 8006d70:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	40000400 	.word	0x40000400
 8006d90:	40000800 	.word	0x40000800
 8006d94:	40000c00 	.word	0x40000c00
 8006d98:	40010800 	.word	0x40010800
 8006d9c:	0800b248 	.word	0x0800b248

08006da0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bc80      	pop	{r7}
 8006db0:	4770      	bx	lr

08006db2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b083      	sub	sp, #12
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006dba:	bf00      	nop
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bc80      	pop	{r7}
 8006dc2:	4770      	bx	lr

08006dc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bc80      	pop	{r7}
 8006dd4:	4770      	bx	lr

08006dd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b083      	sub	sp, #12
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dde:	bf00      	nop
 8006de0:	370c      	adds	r7, #12
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bc80      	pop	{r7}
 8006de6:	4770      	bx	lr

08006de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dfe:	d00f      	beq.n	8006e20 <TIM_Base_SetConfig+0x38>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a2b      	ldr	r2, [pc, #172]	; (8006eb0 <TIM_Base_SetConfig+0xc8>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d00b      	beq.n	8006e20 <TIM_Base_SetConfig+0x38>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a2a      	ldr	r2, [pc, #168]	; (8006eb4 <TIM_Base_SetConfig+0xcc>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d007      	beq.n	8006e20 <TIM_Base_SetConfig+0x38>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a29      	ldr	r2, [pc, #164]	; (8006eb8 <TIM_Base_SetConfig+0xd0>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d003      	beq.n	8006e20 <TIM_Base_SetConfig+0x38>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a28      	ldr	r2, [pc, #160]	; (8006ebc <TIM_Base_SetConfig+0xd4>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d108      	bne.n	8006e32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e38:	d017      	beq.n	8006e6a <TIM_Base_SetConfig+0x82>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a1c      	ldr	r2, [pc, #112]	; (8006eb0 <TIM_Base_SetConfig+0xc8>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d013      	beq.n	8006e6a <TIM_Base_SetConfig+0x82>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a1b      	ldr	r2, [pc, #108]	; (8006eb4 <TIM_Base_SetConfig+0xcc>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d00f      	beq.n	8006e6a <TIM_Base_SetConfig+0x82>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a1a      	ldr	r2, [pc, #104]	; (8006eb8 <TIM_Base_SetConfig+0xd0>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d00b      	beq.n	8006e6a <TIM_Base_SetConfig+0x82>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a19      	ldr	r2, [pc, #100]	; (8006ebc <TIM_Base_SetConfig+0xd4>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d007      	beq.n	8006e6a <TIM_Base_SetConfig+0x82>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a18      	ldr	r2, [pc, #96]	; (8006ec0 <TIM_Base_SetConfig+0xd8>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d003      	beq.n	8006e6a <TIM_Base_SetConfig+0x82>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a17      	ldr	r2, [pc, #92]	; (8006ec4 <TIM_Base_SetConfig+0xdc>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d108      	bne.n	8006e7c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	689a      	ldr	r2, [r3, #8]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	615a      	str	r2, [r3, #20]
}
 8006ea6:	bf00      	nop
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bc80      	pop	{r7}
 8006eae:	4770      	bx	lr
 8006eb0:	40000400 	.word	0x40000400
 8006eb4:	40000800 	.word	0x40000800
 8006eb8:	40000c00 	.word	0x40000c00
 8006ebc:	40010800 	.word	0x40010800
 8006ec0:	40010c00 	.word	0x40010c00
 8006ec4:	40011000 	.word	0x40011000

08006ec8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b087      	sub	sp, #28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	f023 0201 	bic.w	r2, r3, #1
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f023 0303 	bic.w	r3, r3, #3
 8006efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f023 0302 	bic.w	r3, r3, #2
 8006f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	621a      	str	r2, [r3, #32]
}
 8006f36:	bf00      	nop
 8006f38:	371c      	adds	r7, #28
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bc80      	pop	{r7}
 8006f3e:	4770      	bx	lr

08006f40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b087      	sub	sp, #28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	f023 0210 	bic.w	r2, r3, #16
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	021b      	lsls	r3, r3, #8
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f023 0320 	bic.w	r3, r3, #32
 8006f8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	011b      	lsls	r3, r3, #4
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685a      	ldr	r2, [r3, #4]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	621a      	str	r2, [r3, #32]
}
 8006fb2:	bf00      	nop
 8006fb4:	371c      	adds	r7, #28
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bc80      	pop	{r7}
 8006fba:	4770      	bx	lr

08006fbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b087      	sub	sp, #28
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f023 0303 	bic.w	r3, r3, #3
 8006ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	021b      	lsls	r3, r3, #8
 800700c:	697a      	ldr	r2, [r7, #20]
 800700e:	4313      	orrs	r3, r2
 8007010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	621a      	str	r2, [r3, #32]
}
 800702c:	bf00      	nop
 800702e:	371c      	adds	r7, #28
 8007030:	46bd      	mov	sp, r7
 8007032:	bc80      	pop	{r7}
 8007034:	4770      	bx	lr

08007036 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007036:	b480      	push	{r7}
 8007038:	b087      	sub	sp, #28
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a1b      	ldr	r3, [r3, #32]
 8007044:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007064:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800706c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	021b      	lsls	r3, r3, #8
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	4313      	orrs	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	031b      	lsls	r3, r3, #12
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	4313      	orrs	r3, r2
 800708c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	621a      	str	r2, [r3, #32]
}
 80070a8:	bf00      	nop
 80070aa:	371c      	adds	r7, #28
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bc80      	pop	{r7}
 80070b0:	4770      	bx	lr

080070b2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b087      	sub	sp, #28
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	60f8      	str	r0, [r7, #12]
 80070ba:	60b9      	str	r1, [r7, #8]
 80070bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6a1b      	ldr	r3, [r3, #32]
 80070c8:	f023 0201 	bic.w	r2, r3, #1
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	011b      	lsls	r3, r3, #4
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f023 030a 	bic.w	r3, r3, #10
 80070ee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	621a      	str	r2, [r3, #32]
}
 8007104:	bf00      	nop
 8007106:	371c      	adds	r7, #28
 8007108:	46bd      	mov	sp, r7
 800710a:	bc80      	pop	{r7}
 800710c:	4770      	bx	lr

0800710e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800710e:	b480      	push	{r7}
 8007110:	b087      	sub	sp, #28
 8007112:	af00      	add	r7, sp, #0
 8007114:	60f8      	str	r0, [r7, #12]
 8007116:	60b9      	str	r1, [r7, #8]
 8007118:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	f023 0210 	bic.w	r2, r3, #16
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6a1b      	ldr	r3, [r3, #32]
 8007130:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007138:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	031b      	lsls	r3, r3, #12
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	4313      	orrs	r3, r2
 8007142:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800714a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	011b      	lsls	r3, r3, #4
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	4313      	orrs	r3, r2
 8007154:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	621a      	str	r2, [r3, #32]
}
 8007162:	bf00      	nop
 8007164:	371c      	adds	r7, #28
 8007166:	46bd      	mov	sp, r7
 8007168:	bc80      	pop	{r7}
 800716a:	4770      	bx	lr

0800716c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007182:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007184:	683a      	ldr	r2, [r7, #0]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	4313      	orrs	r3, r2
 800718a:	f043 0307 	orr.w	r3, r3, #7
 800718e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	609a      	str	r2, [r3, #8]
}
 8007196:	bf00      	nop
 8007198:	3714      	adds	r7, #20
 800719a:	46bd      	mov	sp, r7
 800719c:	bc80      	pop	{r7}
 800719e:	4770      	bx	lr

080071a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
 80071ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	021a      	lsls	r2, r3, #8
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	431a      	orrs	r2, r3
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	609a      	str	r2, [r3, #8]
}
 80071d4:	bf00      	nop
 80071d6:	371c      	adds	r7, #28
 80071d8:	46bd      	mov	sp, r7
 80071da:	bc80      	pop	{r7}
 80071dc:	4770      	bx	lr
	...

080071e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071f2:	d01c      	beq.n	800722e <TIM_CCxChannelCmd+0x4e>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	4a26      	ldr	r2, [pc, #152]	; (8007290 <TIM_CCxChannelCmd+0xb0>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d018      	beq.n	800722e <TIM_CCxChannelCmd+0x4e>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	4a25      	ldr	r2, [pc, #148]	; (8007294 <TIM_CCxChannelCmd+0xb4>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d014      	beq.n	800722e <TIM_CCxChannelCmd+0x4e>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	4a24      	ldr	r2, [pc, #144]	; (8007298 <TIM_CCxChannelCmd+0xb8>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d010      	beq.n	800722e <TIM_CCxChannelCmd+0x4e>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4a23      	ldr	r2, [pc, #140]	; (800729c <TIM_CCxChannelCmd+0xbc>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d00c      	beq.n	800722e <TIM_CCxChannelCmd+0x4e>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	4a22      	ldr	r2, [pc, #136]	; (80072a0 <TIM_CCxChannelCmd+0xc0>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d008      	beq.n	800722e <TIM_CCxChannelCmd+0x4e>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	4a21      	ldr	r2, [pc, #132]	; (80072a4 <TIM_CCxChannelCmd+0xc4>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d004      	beq.n	800722e <TIM_CCxChannelCmd+0x4e>
 8007224:	f641 0169 	movw	r1, #6249	; 0x1869
 8007228:	481f      	ldr	r0, [pc, #124]	; (80072a8 <TIM_CCxChannelCmd+0xc8>)
 800722a:	f7fa fbb5 	bl	8001998 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d010      	beq.n	8007256 <TIM_CCxChannelCmd+0x76>
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b04      	cmp	r3, #4
 8007238:	d00d      	beq.n	8007256 <TIM_CCxChannelCmd+0x76>
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	2b08      	cmp	r3, #8
 800723e:	d00a      	beq.n	8007256 <TIM_CCxChannelCmd+0x76>
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	2b0c      	cmp	r3, #12
 8007244:	d007      	beq.n	8007256 <TIM_CCxChannelCmd+0x76>
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	2b3c      	cmp	r3, #60	; 0x3c
 800724a:	d004      	beq.n	8007256 <TIM_CCxChannelCmd+0x76>
 800724c:	f641 016a 	movw	r1, #6250	; 0x186a
 8007250:	4815      	ldr	r0, [pc, #84]	; (80072a8 <TIM_CCxChannelCmd+0xc8>)
 8007252:	f7fa fba1 	bl	8001998 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	f003 031f 	and.w	r3, r3, #31
 800725c:	2201      	movs	r2, #1
 800725e:	fa02 f303 	lsl.w	r3, r2, r3
 8007262:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6a1a      	ldr	r2, [r3, #32]
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	43db      	mvns	r3, r3
 800726c:	401a      	ands	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6a1a      	ldr	r2, [r3, #32]
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f003 031f 	and.w	r3, r3, #31
 800727c:	6879      	ldr	r1, [r7, #4]
 800727e:	fa01 f303 	lsl.w	r3, r1, r3
 8007282:	431a      	orrs	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	621a      	str	r2, [r3, #32]
}
 8007288:	bf00      	nop
 800728a:	3718      	adds	r7, #24
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	40000400 	.word	0x40000400
 8007294:	40000800 	.word	0x40000800
 8007298:	40000c00 	.word	0x40000c00
 800729c:	40010800 	.word	0x40010800
 80072a0:	40010c00 	.word	0x40010c00
 80072a4:	40011000 	.word	0x40011000
 80072a8:	0800b248 	.word	0x0800b248

080072ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072be:	d017      	beq.n	80072f0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a41      	ldr	r2, [pc, #260]	; (80073cc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d012      	beq.n	80072f0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a40      	ldr	r2, [pc, #256]	; (80073d0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d00d      	beq.n	80072f0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a3e      	ldr	r2, [pc, #248]	; (80073d4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d008      	beq.n	80072f0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a3d      	ldr	r2, [pc, #244]	; (80073d8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d003      	beq.n	80072f0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80072e8:	215a      	movs	r1, #90	; 0x5a
 80072ea:	483c      	ldr	r0, [pc, #240]	; (80073dc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80072ec:	f7fa fb54 	bl	8001998 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d01f      	beq.n	8007338 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2b10      	cmp	r3, #16
 80072fe:	d01b      	beq.n	8007338 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b20      	cmp	r3, #32
 8007306:	d017      	beq.n	8007338 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2b30      	cmp	r3, #48	; 0x30
 800730e:	d013      	beq.n	8007338 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b40      	cmp	r3, #64	; 0x40
 8007316:	d00f      	beq.n	8007338 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2b50      	cmp	r3, #80	; 0x50
 800731e:	d00b      	beq.n	8007338 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b60      	cmp	r3, #96	; 0x60
 8007326:	d007      	beq.n	8007338 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b70      	cmp	r3, #112	; 0x70
 800732e:	d003      	beq.n	8007338 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007330:	215b      	movs	r1, #91	; 0x5b
 8007332:	482a      	ldr	r0, [pc, #168]	; (80073dc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8007334:	f7fa fb30 	bl	8001998 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	2b80      	cmp	r3, #128	; 0x80
 800733e:	d007      	beq.n	8007350 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d003      	beq.n	8007350 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8007348:	215c      	movs	r1, #92	; 0x5c
 800734a:	4824      	ldr	r0, [pc, #144]	; (80073dc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800734c:	f7fa fb24 	bl	8001998 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007356:	2b01      	cmp	r3, #1
 8007358:	d101      	bne.n	800735e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
 800735a:	2302      	movs	r3, #2
 800735c:	e032      	b.n	80073c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2202      	movs	r2, #2
 800736a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007384:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	4313      	orrs	r3, r2
 800738e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007396:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	4313      	orrs	r3, r2
 80073a0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	40000400 	.word	0x40000400
 80073d0:	40000800 	.word	0x40000800
 80073d4:	40000c00 	.word	0x40000c00
 80073d8:	40010800 	.word	0x40010800
 80073dc:	0800b280 	.word	0x0800b280

080073e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e0aa      	b.n	8007548 <HAL_UART_Init+0x168>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d02c      	beq.n	8007454 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a54      	ldr	r2, [pc, #336]	; (8007550 <HAL_UART_Init+0x170>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d00e      	beq.n	8007422 <HAL_UART_Init+0x42>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a52      	ldr	r2, [pc, #328]	; (8007554 <HAL_UART_Init+0x174>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d009      	beq.n	8007422 <HAL_UART_Init+0x42>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a51      	ldr	r2, [pc, #324]	; (8007558 <HAL_UART_Init+0x178>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d004      	beq.n	8007422 <HAL_UART_Init+0x42>
 8007418:	f240 1145 	movw	r1, #325	; 0x145
 800741c:	484f      	ldr	r0, [pc, #316]	; (800755c <HAL_UART_Init+0x17c>)
 800741e:	f7fa fabb 	bl	8001998 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d032      	beq.n	8007490 <HAL_UART_Init+0xb0>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007432:	d02d      	beq.n	8007490 <HAL_UART_Init+0xb0>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800743c:	d028      	beq.n	8007490 <HAL_UART_Init+0xb0>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007446:	d023      	beq.n	8007490 <HAL_UART_Init+0xb0>
 8007448:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800744c:	4843      	ldr	r0, [pc, #268]	; (800755c <HAL_UART_Init+0x17c>)
 800744e:	f7fa faa3 	bl	8001998 <assert_failed>
 8007452:	e01d      	b.n	8007490 <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a3d      	ldr	r2, [pc, #244]	; (8007550 <HAL_UART_Init+0x170>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d018      	beq.n	8007490 <HAL_UART_Init+0xb0>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a3c      	ldr	r2, [pc, #240]	; (8007554 <HAL_UART_Init+0x174>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d013      	beq.n	8007490 <HAL_UART_Init+0xb0>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a3a      	ldr	r2, [pc, #232]	; (8007558 <HAL_UART_Init+0x178>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d00e      	beq.n	8007490 <HAL_UART_Init+0xb0>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a3a      	ldr	r2, [pc, #232]	; (8007560 <HAL_UART_Init+0x180>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d009      	beq.n	8007490 <HAL_UART_Init+0xb0>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a38      	ldr	r2, [pc, #224]	; (8007564 <HAL_UART_Init+0x184>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d004      	beq.n	8007490 <HAL_UART_Init+0xb0>
 8007486:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800748a:	4834      	ldr	r0, [pc, #208]	; (800755c <HAL_UART_Init+0x17c>)
 800748c:	f7fa fa84 	bl	8001998 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d009      	beq.n	80074ac <HAL_UART_Init+0xcc>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074a0:	d004      	beq.n	80074ac <HAL_UART_Init+0xcc>
 80074a2:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80074a6:	482d      	ldr	r0, [pc, #180]	; (800755c <HAL_UART_Init+0x17c>)
 80074a8:	f7fa fa76 	bl	8001998 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	69db      	ldr	r3, [r3, #28]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d009      	beq.n	80074c8 <HAL_UART_Init+0xe8>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	69db      	ldr	r3, [r3, #28]
 80074b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074bc:	d004      	beq.n	80074c8 <HAL_UART_Init+0xe8>
 80074be:	f240 114d 	movw	r1, #333	; 0x14d
 80074c2:	4826      	ldr	r0, [pc, #152]	; (800755c <HAL_UART_Init+0x17c>)
 80074c4:	f7fa fa68 	bl	8001998 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d106      	bne.n	80074e2 <HAL_UART_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7fa fe77 	bl	80021d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2224      	movs	r2, #36	; 0x24
 80074e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68da      	ldr	r2, [r3, #12]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074f8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fa60 	bl	80079c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	691a      	ldr	r2, [r3, #16]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800750e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	695a      	ldr	r2, [r3, #20]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800751e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68da      	ldr	r2, [r3, #12]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800752e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2220      	movs	r2, #32
 800753a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2220      	movs	r2, #32
 8007542:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	40013800 	.word	0x40013800
 8007554:	40004400 	.word	0x40004400
 8007558:	40004800 	.word	0x40004800
 800755c:	0800b2bc 	.word	0x0800b2bc
 8007560:	40004c00 	.word	0x40004c00
 8007564:	40005000 	.word	0x40005000

08007568 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b088      	sub	sp, #32
 800756c:	af02      	add	r7, sp, #8
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	603b      	str	r3, [r7, #0]
 8007574:	4613      	mov	r3, r2
 8007576:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007578:	2300      	movs	r3, #0
 800757a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b20      	cmp	r3, #32
 8007586:	f040 8083 	bne.w	8007690 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d002      	beq.n	8007596 <HAL_UART_Transmit+0x2e>
 8007590:	88fb      	ldrh	r3, [r7, #6]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e07b      	b.n	8007692 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d101      	bne.n	80075a8 <HAL_UART_Transmit+0x40>
 80075a4:	2302      	movs	r3, #2
 80075a6:	e074      	b.n	8007692 <HAL_UART_Transmit+0x12a>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2221      	movs	r2, #33	; 0x21
 80075ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80075be:	f7fa fef1 	bl	80023a4 <HAL_GetTick>
 80075c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	88fa      	ldrh	r2, [r7, #6]
 80075c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	88fa      	ldrh	r2, [r7, #6]
 80075ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80075d0:	e042      	b.n	8007658 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	3b01      	subs	r3, #1
 80075da:	b29a      	uxth	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075e8:	d122      	bne.n	8007630 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2200      	movs	r2, #0
 80075f2:	2180      	movs	r1, #128	; 0x80
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 f966 	bl	80078c6 <UART_WaitOnFlagUntilTimeout>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d001      	beq.n	8007604 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	e046      	b.n	8007692 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	881b      	ldrh	r3, [r3, #0]
 800760c:	461a      	mov	r2, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007616:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d103      	bne.n	8007628 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	3302      	adds	r3, #2
 8007624:	60bb      	str	r3, [r7, #8]
 8007626:	e017      	b.n	8007658 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	3301      	adds	r3, #1
 800762c:	60bb      	str	r3, [r7, #8]
 800762e:	e013      	b.n	8007658 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	2200      	movs	r2, #0
 8007638:	2180      	movs	r1, #128	; 0x80
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f000 f943 	bl	80078c6 <UART_WaitOnFlagUntilTimeout>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e023      	b.n	8007692 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	1c5a      	adds	r2, r3, #1
 800764e:	60ba      	str	r2, [r7, #8]
 8007650:	781a      	ldrb	r2, [r3, #0]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800765c:	b29b      	uxth	r3, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1b7      	bne.n	80075d2 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	9300      	str	r3, [sp, #0]
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2200      	movs	r2, #0
 800766a:	2140      	movs	r1, #64	; 0x40
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f000 f92a 	bl	80078c6 <UART_WaitOnFlagUntilTimeout>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	e00a      	b.n	8007692 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2220      	movs	r2, #32
 8007680:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800768c:	2300      	movs	r3, #0
 800768e:	e000      	b.n	8007692 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007690:	2302      	movs	r3, #2
  }
}
 8007692:	4618      	mov	r0, r3
 8007694:	3718      	adds	r7, #24
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
	...

0800769c <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	4613      	mov	r3, r2
 80076a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b20      	cmp	r3, #32
 80076b4:	d166      	bne.n	8007784 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d002      	beq.n	80076c2 <HAL_UART_Receive_DMA+0x26>
 80076bc:	88fb      	ldrh	r3, [r7, #6]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e05f      	b.n	8007786 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d101      	bne.n	80076d4 <HAL_UART_Receive_DMA+0x38>
 80076d0:	2302      	movs	r3, #2
 80076d2:	e058      	b.n	8007786 <HAL_UART_Receive_DMA+0xea>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	88fa      	ldrh	r2, [r7, #6]
 80076e6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2222      	movs	r2, #34	; 0x22
 80076f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076fa:	4a25      	ldr	r2, [pc, #148]	; (8007790 <HAL_UART_Receive_DMA+0xf4>)
 80076fc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007702:	4a24      	ldr	r2, [pc, #144]	; (8007794 <HAL_UART_Receive_DMA+0xf8>)
 8007704:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800770a:	4a23      	ldr	r2, [pc, #140]	; (8007798 <HAL_UART_Receive_DMA+0xfc>)
 800770c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007712:	2200      	movs	r2, #0
 8007714:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8007716:	f107 0308 	add.w	r3, r7, #8
 800771a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3304      	adds	r3, #4
 8007726:	4619      	mov	r1, r3
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	88fb      	ldrh	r3, [r7, #6]
 800772e:	f7fb ff4d 	bl	80035cc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007732:	2300      	movs	r3, #0
 8007734:	613b      	str	r3, [r7, #16]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	613b      	str	r3, [r7, #16]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	613b      	str	r3, [r7, #16]
 8007746:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68da      	ldr	r2, [r3, #12]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800775e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	695a      	ldr	r2, [r3, #20]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f042 0201 	orr.w	r2, r2, #1
 800776e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	695a      	ldr	r2, [r3, #20]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800777e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007780:	2300      	movs	r3, #0
 8007782:	e000      	b.n	8007786 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007784:	2302      	movs	r3, #2
  }
}
 8007786:	4618      	mov	r0, r3
 8007788:	3718      	adds	r7, #24
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	080077af 	.word	0x080077af
 8007794:	08007817 	.word	0x08007817
 8007798:	08007833 	.word	0x08007833

0800779c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bc80      	pop	{r7}
 80077ac:	4770      	bx	lr

080077ae <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ba:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 0320 	and.w	r3, r3, #32
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d11e      	bne.n	8007808 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68da      	ldr	r2, [r3, #12]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077de:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	695a      	ldr	r2, [r3, #20]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f022 0201 	bic.w	r2, r2, #1
 80077ee:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	695a      	ldr	r2, [r3, #20]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077fe:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2220      	movs	r2, #32
 8007804:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f7f9 fa47 	bl	8000c9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800780e:	bf00      	nop
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b084      	sub	sp, #16
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007822:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f7ff ffb9 	bl	800779c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800782a:	bf00      	nop
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800783a:	2300      	movs	r3, #0
 800783c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007842:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800784e:	2b80      	cmp	r3, #128	; 0x80
 8007850:	bf0c      	ite	eq
 8007852:	2301      	moveq	r3, #1
 8007854:	2300      	movne	r3, #0
 8007856:	b2db      	uxtb	r3, r3
 8007858:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b21      	cmp	r3, #33	; 0x21
 8007864:	d108      	bne.n	8007878 <UART_DMAError+0x46>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d005      	beq.n	8007878 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2200      	movs	r2, #0
 8007870:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007872:	68b8      	ldr	r0, [r7, #8]
 8007874:	f000 f871 	bl	800795a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007882:	2b40      	cmp	r3, #64	; 0x40
 8007884:	bf0c      	ite	eq
 8007886:	2301      	moveq	r3, #1
 8007888:	2300      	movne	r3, #0
 800788a:	b2db      	uxtb	r3, r3
 800788c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b22      	cmp	r3, #34	; 0x22
 8007898:	d108      	bne.n	80078ac <UART_DMAError+0x7a>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d005      	beq.n	80078ac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	2200      	movs	r2, #0
 80078a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80078a6:	68b8      	ldr	r0, [r7, #8]
 80078a8:	f000 f86c 	bl	8007984 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078b0:	f043 0210 	orr.w	r2, r3, #16
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078b8:	68b8      	ldr	r0, [r7, #8]
 80078ba:	f7f9 fa11 	bl	8000ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078be:	bf00      	nop
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	60f8      	str	r0, [r7, #12]
 80078ce:	60b9      	str	r1, [r7, #8]
 80078d0:	603b      	str	r3, [r7, #0]
 80078d2:	4613      	mov	r3, r2
 80078d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078d6:	e02c      	b.n	8007932 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078de:	d028      	beq.n	8007932 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d007      	beq.n	80078f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80078e6:	f7fa fd5d 	bl	80023a4 <HAL_GetTick>
 80078ea:	4602      	mov	r2, r0
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	69ba      	ldr	r2, [r7, #24]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d21d      	bcs.n	8007932 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68da      	ldr	r2, [r3, #12]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007904:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	695a      	ldr	r2, [r3, #20]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f022 0201 	bic.w	r2, r2, #1
 8007914:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2220      	movs	r2, #32
 800791a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2220      	movs	r2, #32
 8007922:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e00f      	b.n	8007952 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	4013      	ands	r3, r2
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	429a      	cmp	r2, r3
 8007940:	bf0c      	ite	eq
 8007942:	2301      	moveq	r3, #1
 8007944:	2300      	movne	r3, #0
 8007946:	b2db      	uxtb	r3, r3
 8007948:	461a      	mov	r2, r3
 800794a:	79fb      	ldrb	r3, [r7, #7]
 800794c:	429a      	cmp	r2, r3
 800794e:	d0c3      	beq.n	80078d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800795a:	b480      	push	{r7}
 800795c:	b083      	sub	sp, #12
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68da      	ldr	r2, [r3, #12]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007970:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2220      	movs	r2, #32
 8007976:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800797a:	bf00      	nop
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	bc80      	pop	{r7}
 8007982:	4770      	bx	lr

08007984 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68da      	ldr	r2, [r3, #12]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800799a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	695a      	ldr	r2, [r3, #20]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f022 0201 	bic.w	r2, r2, #1
 80079aa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2220      	movs	r2, #32
 80079b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80079b4:	bf00      	nop
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bc80      	pop	{r7}
 80079bc:	4770      	bx	lr
	...

080079c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	4ab2      	ldr	r2, [pc, #712]	; (8007c98 <UART_SetConfig+0x2d8>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d904      	bls.n	80079dc <UART_SetConfig+0x1c>
 80079d2:	f640 31e2 	movw	r1, #3042	; 0xbe2
 80079d6:	48b1      	ldr	r0, [pc, #708]	; (8007c9c <UART_SetConfig+0x2dc>)
 80079d8:	f7f9 ffde 	bl	8001998 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d009      	beq.n	80079f8 <UART_SetConfig+0x38>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079ec:	d004      	beq.n	80079f8 <UART_SetConfig+0x38>
 80079ee:	f640 31e3 	movw	r1, #3043	; 0xbe3
 80079f2:	48aa      	ldr	r0, [pc, #680]	; (8007c9c <UART_SetConfig+0x2dc>)
 80079f4:	f7f9 ffd0 	bl	8001998 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00e      	beq.n	8007a1e <UART_SetConfig+0x5e>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a08:	d009      	beq.n	8007a1e <UART_SetConfig+0x5e>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007a12:	d004      	beq.n	8007a1e <UART_SetConfig+0x5e>
 8007a14:	f640 31e4 	movw	r1, #3044	; 0xbe4
 8007a18:	48a0      	ldr	r0, [pc, #640]	; (8007c9c <UART_SetConfig+0x2dc>)
 8007a1a:	f7f9 ffbd 	bl	8001998 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	695a      	ldr	r2, [r3, #20]
 8007a22:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8007a26:	4013      	ands	r3, r2
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d103      	bne.n	8007a34 <UART_SetConfig+0x74>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	695b      	ldr	r3, [r3, #20]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d104      	bne.n	8007a3e <UART_SetConfig+0x7e>
 8007a34:	f640 31e5 	movw	r1, #3045	; 0xbe5
 8007a38:	4898      	ldr	r0, [pc, #608]	; (8007c9c <UART_SetConfig+0x2dc>)
 8007a3a:	f7f9 ffad 	bl	8001998 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	68da      	ldr	r2, [r3, #12]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	430a      	orrs	r2, r1
 8007a52:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689a      	ldr	r2, [r3, #8]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	431a      	orrs	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	431a      	orrs	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	69db      	ldr	r3, [r3, #28]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007a76:	f023 030c 	bic.w	r3, r3, #12
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	6812      	ldr	r2, [r2, #0]
 8007a7e:	68f9      	ldr	r1, [r7, #12]
 8007a80:	430b      	orrs	r3, r1
 8007a82:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	699a      	ldr	r2, [r3, #24]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	430a      	orrs	r2, r1
 8007a98:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	69db      	ldr	r3, [r3, #28]
 8007a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aa2:	f040 80a5 	bne.w	8007bf0 <UART_SetConfig+0x230>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a7d      	ldr	r2, [pc, #500]	; (8007ca0 <UART_SetConfig+0x2e0>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d14f      	bne.n	8007b50 <UART_SetConfig+0x190>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ab0:	f7fe f842 	bl	8005b38 <HAL_RCC_GetPCLK2Freq>
 8007ab4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	009a      	lsls	r2, r3, #2
 8007ac0:	441a      	add	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	005b      	lsls	r3, r3, #1
 8007ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007acc:	4a75      	ldr	r2, [pc, #468]	; (8007ca4 <UART_SetConfig+0x2e4>)
 8007ace:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad2:	095b      	lsrs	r3, r3, #5
 8007ad4:	0119      	lsls	r1, r3, #4
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	4613      	mov	r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	4413      	add	r3, r2
 8007ade:	009a      	lsls	r2, r3, #2
 8007ae0:	441a      	add	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	005b      	lsls	r3, r3, #1
 8007ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007aec:	4b6d      	ldr	r3, [pc, #436]	; (8007ca4 <UART_SetConfig+0x2e4>)
 8007aee:	fba3 0302 	umull	r0, r3, r3, r2
 8007af2:	095b      	lsrs	r3, r3, #5
 8007af4:	2064      	movs	r0, #100	; 0x64
 8007af6:	fb00 f303 	mul.w	r3, r0, r3
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	00db      	lsls	r3, r3, #3
 8007afe:	3332      	adds	r3, #50	; 0x32
 8007b00:	4a68      	ldr	r2, [pc, #416]	; (8007ca4 <UART_SetConfig+0x2e4>)
 8007b02:	fba2 2303 	umull	r2, r3, r2, r3
 8007b06:	095b      	lsrs	r3, r3, #5
 8007b08:	005b      	lsls	r3, r3, #1
 8007b0a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b0e:	4419      	add	r1, r3
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	4613      	mov	r3, r2
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4413      	add	r3, r2
 8007b18:	009a      	lsls	r2, r3, #2
 8007b1a:	441a      	add	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	005b      	lsls	r3, r3, #1
 8007b22:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b26:	4b5f      	ldr	r3, [pc, #380]	; (8007ca4 <UART_SetConfig+0x2e4>)
 8007b28:	fba3 0302 	umull	r0, r3, r3, r2
 8007b2c:	095b      	lsrs	r3, r3, #5
 8007b2e:	2064      	movs	r0, #100	; 0x64
 8007b30:	fb00 f303 	mul.w	r3, r0, r3
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	00db      	lsls	r3, r3, #3
 8007b38:	3332      	adds	r3, #50	; 0x32
 8007b3a:	4a5a      	ldr	r2, [pc, #360]	; (8007ca4 <UART_SetConfig+0x2e4>)
 8007b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b40:	095b      	lsrs	r3, r3, #5
 8007b42:	f003 0207 	and.w	r2, r3, #7
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	440a      	add	r2, r1
 8007b4c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007b4e:	e0f9      	b.n	8007d44 <UART_SetConfig+0x384>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b50:	f7fd ffde 	bl	8005b10 <HAL_RCC_GetPCLK1Freq>
 8007b54:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b56:	68ba      	ldr	r2, [r7, #8]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	4413      	add	r3, r2
 8007b5e:	009a      	lsls	r2, r3, #2
 8007b60:	441a      	add	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	005b      	lsls	r3, r3, #1
 8007b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b6c:	4a4d      	ldr	r2, [pc, #308]	; (8007ca4 <UART_SetConfig+0x2e4>)
 8007b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b72:	095b      	lsrs	r3, r3, #5
 8007b74:	0119      	lsls	r1, r3, #4
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	009a      	lsls	r2, r3, #2
 8007b80:	441a      	add	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	005b      	lsls	r3, r3, #1
 8007b88:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b8c:	4b45      	ldr	r3, [pc, #276]	; (8007ca4 <UART_SetConfig+0x2e4>)
 8007b8e:	fba3 0302 	umull	r0, r3, r3, r2
 8007b92:	095b      	lsrs	r3, r3, #5
 8007b94:	2064      	movs	r0, #100	; 0x64
 8007b96:	fb00 f303 	mul.w	r3, r0, r3
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	00db      	lsls	r3, r3, #3
 8007b9e:	3332      	adds	r3, #50	; 0x32
 8007ba0:	4a40      	ldr	r2, [pc, #256]	; (8007ca4 <UART_SetConfig+0x2e4>)
 8007ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba6:	095b      	lsrs	r3, r3, #5
 8007ba8:	005b      	lsls	r3, r3, #1
 8007baa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007bae:	4419      	add	r1, r3
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	4413      	add	r3, r2
 8007bb8:	009a      	lsls	r2, r3, #2
 8007bba:	441a      	add	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	005b      	lsls	r3, r3, #1
 8007bc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8007bc6:	4b37      	ldr	r3, [pc, #220]	; (8007ca4 <UART_SetConfig+0x2e4>)
 8007bc8:	fba3 0302 	umull	r0, r3, r3, r2
 8007bcc:	095b      	lsrs	r3, r3, #5
 8007bce:	2064      	movs	r0, #100	; 0x64
 8007bd0:	fb00 f303 	mul.w	r3, r0, r3
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	3332      	adds	r3, #50	; 0x32
 8007bda:	4a32      	ldr	r2, [pc, #200]	; (8007ca4 <UART_SetConfig+0x2e4>)
 8007bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8007be0:	095b      	lsrs	r3, r3, #5
 8007be2:	f003 0207 	and.w	r2, r3, #7
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	440a      	add	r2, r1
 8007bec:	609a      	str	r2, [r3, #8]
}
 8007bee:	e0a9      	b.n	8007d44 <UART_SetConfig+0x384>
    if((huart->Instance == USART1))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a2a      	ldr	r2, [pc, #168]	; (8007ca0 <UART_SetConfig+0x2e0>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d156      	bne.n	8007ca8 <UART_SetConfig+0x2e8>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007bfa:	f7fd ff9d 	bl	8005b38 <HAL_RCC_GetPCLK2Freq>
 8007bfe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	4613      	mov	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4413      	add	r3, r2
 8007c08:	009a      	lsls	r2, r3, #2
 8007c0a:	441a      	add	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c16:	4a23      	ldr	r2, [pc, #140]	; (8007ca4 <UART_SetConfig+0x2e4>)
 8007c18:	fba2 2303 	umull	r2, r3, r2, r3
 8007c1c:	095b      	lsrs	r3, r3, #5
 8007c1e:	0119      	lsls	r1, r3, #4
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	4613      	mov	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	4413      	add	r3, r2
 8007c28:	009a      	lsls	r2, r3, #2
 8007c2a:	441a      	add	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c36:	4b1b      	ldr	r3, [pc, #108]	; (8007ca4 <UART_SetConfig+0x2e4>)
 8007c38:	fba3 0302 	umull	r0, r3, r3, r2
 8007c3c:	095b      	lsrs	r3, r3, #5
 8007c3e:	2064      	movs	r0, #100	; 0x64
 8007c40:	fb00 f303 	mul.w	r3, r0, r3
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	011b      	lsls	r3, r3, #4
 8007c48:	3332      	adds	r3, #50	; 0x32
 8007c4a:	4a16      	ldr	r2, [pc, #88]	; (8007ca4 <UART_SetConfig+0x2e4>)
 8007c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c50:	095b      	lsrs	r3, r3, #5
 8007c52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c56:	4419      	add	r1, r3
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	4413      	add	r3, r2
 8007c60:	009a      	lsls	r2, r3, #2
 8007c62:	441a      	add	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c6e:	4b0d      	ldr	r3, [pc, #52]	; (8007ca4 <UART_SetConfig+0x2e4>)
 8007c70:	fba3 0302 	umull	r0, r3, r3, r2
 8007c74:	095b      	lsrs	r3, r3, #5
 8007c76:	2064      	movs	r0, #100	; 0x64
 8007c78:	fb00 f303 	mul.w	r3, r0, r3
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	011b      	lsls	r3, r3, #4
 8007c80:	3332      	adds	r3, #50	; 0x32
 8007c82:	4a08      	ldr	r2, [pc, #32]	; (8007ca4 <UART_SetConfig+0x2e4>)
 8007c84:	fba2 2303 	umull	r2, r3, r2, r3
 8007c88:	095b      	lsrs	r3, r3, #5
 8007c8a:	f003 020f 	and.w	r2, r3, #15
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	440a      	add	r2, r1
 8007c94:	609a      	str	r2, [r3, #8]
}
 8007c96:	e055      	b.n	8007d44 <UART_SetConfig+0x384>
 8007c98:	003d0900 	.word	0x003d0900
 8007c9c:	0800b2bc 	.word	0x0800b2bc
 8007ca0:	40013800 	.word	0x40013800
 8007ca4:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ca8:	f7fd ff32 	bl	8005b10 <HAL_RCC_GetPCLK1Freq>
 8007cac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4413      	add	r3, r2
 8007cb6:	009a      	lsls	r2, r3, #2
 8007cb8:	441a      	add	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc4:	4a21      	ldr	r2, [pc, #132]	; (8007d4c <UART_SetConfig+0x38c>)
 8007cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cca:	095b      	lsrs	r3, r3, #5
 8007ccc:	0119      	lsls	r1, r3, #4
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	009a      	lsls	r2, r3, #2
 8007cd8:	441a      	add	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ce4:	4b19      	ldr	r3, [pc, #100]	; (8007d4c <UART_SetConfig+0x38c>)
 8007ce6:	fba3 0302 	umull	r0, r3, r3, r2
 8007cea:	095b      	lsrs	r3, r3, #5
 8007cec:	2064      	movs	r0, #100	; 0x64
 8007cee:	fb00 f303 	mul.w	r3, r0, r3
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	011b      	lsls	r3, r3, #4
 8007cf6:	3332      	adds	r3, #50	; 0x32
 8007cf8:	4a14      	ldr	r2, [pc, #80]	; (8007d4c <UART_SetConfig+0x38c>)
 8007cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8007cfe:	095b      	lsrs	r3, r3, #5
 8007d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d04:	4419      	add	r1, r3
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	4613      	mov	r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4413      	add	r3, r2
 8007d0e:	009a      	lsls	r2, r3, #2
 8007d10:	441a      	add	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d1c:	4b0b      	ldr	r3, [pc, #44]	; (8007d4c <UART_SetConfig+0x38c>)
 8007d1e:	fba3 0302 	umull	r0, r3, r3, r2
 8007d22:	095b      	lsrs	r3, r3, #5
 8007d24:	2064      	movs	r0, #100	; 0x64
 8007d26:	fb00 f303 	mul.w	r3, r0, r3
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	011b      	lsls	r3, r3, #4
 8007d2e:	3332      	adds	r3, #50	; 0x32
 8007d30:	4a06      	ldr	r2, [pc, #24]	; (8007d4c <UART_SetConfig+0x38c>)
 8007d32:	fba2 2303 	umull	r2, r3, r2, r3
 8007d36:	095b      	lsrs	r3, r3, #5
 8007d38:	f003 020f 	and.w	r2, r3, #15
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	440a      	add	r2, r1
 8007d42:	609a      	str	r2, [r3, #8]
}
 8007d44:	bf00      	nop
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	51eb851f 	.word	0x51eb851f

08007d50 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d56:	f3ef 8305 	mrs	r3, IPSR
 8007d5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d5c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10f      	bne.n	8007d82 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d62:	f3ef 8310 	mrs	r3, PRIMASK
 8007d66:	607b      	str	r3, [r7, #4]
  return(result);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d109      	bne.n	8007d82 <osKernelInitialize+0x32>
 8007d6e:	4b10      	ldr	r3, [pc, #64]	; (8007db0 <osKernelInitialize+0x60>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d109      	bne.n	8007d8a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d76:	f3ef 8311 	mrs	r3, BASEPRI
 8007d7a:	603b      	str	r3, [r7, #0]
  return(result);
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d003      	beq.n	8007d8a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007d82:	f06f 0305 	mvn.w	r3, #5
 8007d86:	60fb      	str	r3, [r7, #12]
 8007d88:	e00c      	b.n	8007da4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007d8a:	4b09      	ldr	r3, [pc, #36]	; (8007db0 <osKernelInitialize+0x60>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d105      	bne.n	8007d9e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007d92:	4b07      	ldr	r3, [pc, #28]	; (8007db0 <osKernelInitialize+0x60>)
 8007d94:	2201      	movs	r2, #1
 8007d96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	60fb      	str	r3, [r7, #12]
 8007d9c:	e002      	b.n	8007da4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8007da2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007da4:	68fb      	ldr	r3, [r7, #12]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bc80      	pop	{r7}
 8007dae:	4770      	bx	lr
 8007db0:	20000034 	.word	0x20000034

08007db4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dba:	f3ef 8305 	mrs	r3, IPSR
 8007dbe:	60bb      	str	r3, [r7, #8]
  return(result);
 8007dc0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10f      	bne.n	8007de6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8007dca:	607b      	str	r3, [r7, #4]
  return(result);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d109      	bne.n	8007de6 <osKernelStart+0x32>
 8007dd2:	4b11      	ldr	r3, [pc, #68]	; (8007e18 <osKernelStart+0x64>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d109      	bne.n	8007dee <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007dda:	f3ef 8311 	mrs	r3, BASEPRI
 8007dde:	603b      	str	r3, [r7, #0]
  return(result);
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <osKernelStart+0x3a>
    stat = osErrorISR;
 8007de6:	f06f 0305 	mvn.w	r3, #5
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	e00e      	b.n	8007e0c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8007dee:	4b0a      	ldr	r3, [pc, #40]	; (8007e18 <osKernelStart+0x64>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d107      	bne.n	8007e06 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8007df6:	4b08      	ldr	r3, [pc, #32]	; (8007e18 <osKernelStart+0x64>)
 8007df8:	2202      	movs	r2, #2
 8007dfa:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007dfc:	f001 fbb2 	bl	8009564 <vTaskStartScheduler>
      stat = osOK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	60fb      	str	r3, [r7, #12]
 8007e04:	e002      	b.n	8007e0c <osKernelStart+0x58>
    } else {
      stat = osError;
 8007e06:	f04f 33ff 	mov.w	r3, #4294967295
 8007e0a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	20000034 	.word	0x20000034

08007e1c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b092      	sub	sp, #72	; 0x48
 8007e20:	af04      	add	r7, sp, #16
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e2c:	f3ef 8305 	mrs	r3, IPSR
 8007e30:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f040 8094 	bne.w	8007f62 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8007e3e:	623b      	str	r3, [r7, #32]
  return(result);
 8007e40:	6a3b      	ldr	r3, [r7, #32]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f040 808d 	bne.w	8007f62 <osThreadNew+0x146>
 8007e48:	4b48      	ldr	r3, [pc, #288]	; (8007f6c <osThreadNew+0x150>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d106      	bne.n	8007e5e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e50:	f3ef 8311 	mrs	r3, BASEPRI
 8007e54:	61fb      	str	r3, [r7, #28]
  return(result);
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f040 8082 	bne.w	8007f62 <osThreadNew+0x146>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d07e      	beq.n	8007f62 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8007e64:	2380      	movs	r3, #128	; 0x80
 8007e66:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007e68:	2318      	movs	r3, #24
 8007e6a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007e70:	f107 031b 	add.w	r3, r7, #27
 8007e74:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8007e76:	f04f 33ff 	mov.w	r3, #4294967295
 8007e7a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d045      	beq.n	8007f0e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d002      	beq.n	8007e90 <osThreadNew+0x74>
        name = attr->name;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d002      	beq.n	8007e9e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d008      	beq.n	8007eb6 <osThreadNew+0x9a>
 8007ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea6:	2b38      	cmp	r3, #56	; 0x38
 8007ea8:	d805      	bhi.n	8007eb6 <osThreadNew+0x9a>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	f003 0301 	and.w	r3, r3, #1
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <osThreadNew+0x9e>
        return (NULL);
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	e054      	b.n	8007f64 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d003      	beq.n	8007eca <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	089b      	lsrs	r3, r3, #2
 8007ec8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00e      	beq.n	8007ef0 <osThreadNew+0xd4>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	2b5b      	cmp	r3, #91	; 0x5b
 8007ed8:	d90a      	bls.n	8007ef0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d006      	beq.n	8007ef0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d002      	beq.n	8007ef0 <osThreadNew+0xd4>
        mem = 1;
 8007eea:	2301      	movs	r3, #1
 8007eec:	62bb      	str	r3, [r7, #40]	; 0x28
 8007eee:	e010      	b.n	8007f12 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10c      	bne.n	8007f12 <osThreadNew+0xf6>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d108      	bne.n	8007f12 <osThreadNew+0xf6>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d104      	bne.n	8007f12 <osThreadNew+0xf6>
          mem = 0;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f0c:	e001      	b.n	8007f12 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8007f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d110      	bne.n	8007f3a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f20:	9202      	str	r2, [sp, #8]
 8007f22:	9301      	str	r3, [sp, #4]
 8007f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f2c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f001 f844 	bl	8008fbc <xTaskCreateStatic>
 8007f34:	4603      	mov	r3, r0
 8007f36:	617b      	str	r3, [r7, #20]
 8007f38:	e013      	b.n	8007f62 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8007f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d110      	bne.n	8007f62 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	f107 0314 	add.w	r3, r7, #20
 8007f48:	9301      	str	r3, [sp, #4]
 8007f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f001 f88b 	bl	800906e <xTaskCreate>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d001      	beq.n	8007f62 <osThreadNew+0x146>
          hTask = NULL;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007f62:	697b      	ldr	r3, [r7, #20]
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3738      	adds	r7, #56	; 0x38
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	20000034 	.word	0x20000034

08007f70 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f78:	f3ef 8305 	mrs	r3, IPSR
 8007f7c:	613b      	str	r3, [r7, #16]
  return(result);
 8007f7e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10f      	bne.n	8007fa4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f84:	f3ef 8310 	mrs	r3, PRIMASK
 8007f88:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d109      	bne.n	8007fa4 <osDelay+0x34>
 8007f90:	4b0d      	ldr	r3, [pc, #52]	; (8007fc8 <osDelay+0x58>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d109      	bne.n	8007fac <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f98:	f3ef 8311 	mrs	r3, BASEPRI
 8007f9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d003      	beq.n	8007fac <osDelay+0x3c>
    stat = osErrorISR;
 8007fa4:	f06f 0305 	mvn.w	r3, #5
 8007fa8:	617b      	str	r3, [r7, #20]
 8007faa:	e007      	b.n	8007fbc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d002      	beq.n	8007fbc <osDelay+0x4c>
      vTaskDelay(ticks);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f001 f994 	bl	80092e4 <vTaskDelay>
    }
  }

  return (stat);
 8007fbc:	697b      	ldr	r3, [r7, #20]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3718      	adds	r7, #24
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	20000034 	.word	0x20000034

08007fcc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007fcc:	b480      	push	{r7}
 8007fce:	b085      	sub	sp, #20
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	4a06      	ldr	r2, [pc, #24]	; (8007ff4 <vApplicationGetIdleTaskMemory+0x28>)
 8007fdc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	4a05      	ldr	r2, [pc, #20]	; (8007ff8 <vApplicationGetIdleTaskMemory+0x2c>)
 8007fe2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2280      	movs	r2, #128	; 0x80
 8007fe8:	601a      	str	r2, [r3, #0]
}
 8007fea:	bf00      	nop
 8007fec:	3714      	adds	r7, #20
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bc80      	pop	{r7}
 8007ff2:	4770      	bx	lr
 8007ff4:	20000038 	.word	0x20000038
 8007ff8:	20000094 	.word	0x20000094

08007ffc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	4a07      	ldr	r2, [pc, #28]	; (8008028 <vApplicationGetTimerTaskMemory+0x2c>)
 800800c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	4a06      	ldr	r2, [pc, #24]	; (800802c <vApplicationGetTimerTaskMemory+0x30>)
 8008012:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f44f 7280 	mov.w	r2, #256	; 0x100
 800801a:	601a      	str	r2, [r3, #0]
}
 800801c:	bf00      	nop
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	bc80      	pop	{r7}
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	20000294 	.word	0x20000294
 800802c:	200002f0 	.word	0x200002f0

08008030 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8008036:	2020      	movs	r0, #32
 8008038:	f002 fdec 	bl	800ac14 <pvPortMalloc>
 800803c:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00a      	beq.n	800805a <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	3304      	adds	r3, #4
 800804e:	4618      	mov	r0, r3
 8008050:	f000 f9f4 	bl	800843c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800805a:	687b      	ldr	r3, [r7, #4]
	}
 800805c:	4618      	mov	r0, r3
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b090      	sub	sp, #64	; 0x40
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
 8008070:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8008076:	2300      	movs	r3, #0
 8008078:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800807a:	2300      	movs	r3, #0
 800807c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d109      	bne.n	8008098 <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	623b      	str	r3, [r7, #32]
 8008096:	e7fe      	b.n	8008096 <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d009      	beq.n	80080b6 <xEventGroupWaitBits+0x52>
 80080a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	61fb      	str	r3, [r7, #28]
 80080b4:	e7fe      	b.n	80080b4 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d109      	bne.n	80080d0 <xEventGroupWaitBits+0x6c>
 80080bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c0:	f383 8811 	msr	BASEPRI, r3
 80080c4:	f3bf 8f6f 	isb	sy
 80080c8:	f3bf 8f4f 	dsb	sy
 80080cc:	61bb      	str	r3, [r7, #24]
 80080ce:	e7fe      	b.n	80080ce <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080d0:	f001 ff4c 	bl	8009f6c <xTaskGetSchedulerState>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d102      	bne.n	80080e0 <xEventGroupWaitBits+0x7c>
 80080da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d101      	bne.n	80080e4 <xEventGroupWaitBits+0x80>
 80080e0:	2301      	movs	r3, #1
 80080e2:	e000      	b.n	80080e6 <xEventGroupWaitBits+0x82>
 80080e4:	2300      	movs	r3, #0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d109      	bne.n	80080fe <xEventGroupWaitBits+0x9a>
 80080ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ee:	f383 8811 	msr	BASEPRI, r3
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	617b      	str	r3, [r7, #20]
 80080fc:	e7fe      	b.n	80080fc <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 80080fe:	f001 fa95 	bl	800962c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8008102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8008108:	683a      	ldr	r2, [r7, #0]
 800810a:	68b9      	ldr	r1, [r7, #8]
 800810c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800810e:	f000 f960 	bl	80083d2 <prvTestWaitCondition>
 8008112:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8008114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00e      	beq.n	8008138 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800811a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800811e:	2300      	movs	r3, #0
 8008120:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d028      	beq.n	800817a <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	43db      	mvns	r3, r3
 8008130:	401a      	ands	r2, r3
 8008132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008134:	601a      	str	r2, [r3, #0]
 8008136:	e020      	b.n	800817a <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8008138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800813a:	2b00      	cmp	r3, #0
 800813c:	d104      	bne.n	8008148 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800813e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008140:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8008142:	2301      	movs	r3, #1
 8008144:	633b      	str	r3, [r7, #48]	; 0x30
 8008146:	e018      	b.n	800817a <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800814e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008150:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008154:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d003      	beq.n	8008164 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800815c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008162:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8008164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008166:	1d18      	adds	r0, r3, #4
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816c:	4313      	orrs	r3, r2
 800816e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008170:	4619      	mov	r1, r3
 8008172:	f001 fc7b 	bl	8009a6c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8008176:	2300      	movs	r3, #0
 8008178:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800817a:	f001 fa65 	bl	8009648 <xTaskResumeAll>
 800817e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8008180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008182:	2b00      	cmp	r3, #0
 8008184:	d031      	beq.n	80081ea <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	2b00      	cmp	r3, #0
 800818a:	d107      	bne.n	800819c <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 800818c:	4b19      	ldr	r3, [pc, #100]	; (80081f4 <xEventGroupWaitBits+0x190>)
 800818e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800819c:	f001 ff70 	bl	800a080 <uxTaskResetEventItemValue>
 80081a0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80081a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d11a      	bne.n	80081e2 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 80081ac:	f002 fc3c 	bl	800aa28 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80081b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	68b9      	ldr	r1, [r7, #8]
 80081ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80081bc:	f000 f909 	bl	80083d2 <prvTestWaitCondition>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d009      	beq.n	80081da <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d006      	beq.n	80081da <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80081cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	43db      	mvns	r3, r3
 80081d4:	401a      	ands	r2, r3
 80081d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081d8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80081da:	2301      	movs	r3, #1
 80081dc:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80081de:	f002 fc51 	bl	800aa84 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80081e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80081e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80081ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3740      	adds	r7, #64	; 0x40
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	e000ed04 	.word	0xe000ed04

080081f8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d109      	bne.n	8008220 <xEventGroupClearBits+0x28>
 800820c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	60fb      	str	r3, [r7, #12]
 800821e:	e7fe      	b.n	800821e <xEventGroupClearBits+0x26>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d009      	beq.n	800823e <xEventGroupClearBits+0x46>
 800822a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822e:	f383 8811 	msr	BASEPRI, r3
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	60bb      	str	r3, [r7, #8]
 800823c:	e7fe      	b.n	800823c <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
 800823e:	f002 fbf3 	bl	800aa28 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	43db      	mvns	r3, r3
 8008250:	401a      	ands	r2, r3
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8008256:	f002 fc15 	bl	800aa84 <vPortExitCritical>

	return uxReturn;
 800825a:	693b      	ldr	r3, [r7, #16]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3718      	adds	r7, #24
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
 800826e:	2300      	movs	r3, #0
 8008270:	683a      	ldr	r2, [r7, #0]
 8008272:	6879      	ldr	r1, [r7, #4]
 8008274:	4804      	ldr	r0, [pc, #16]	; (8008288 <xEventGroupClearBitsFromISR+0x24>)
 8008276:	f002 facd 	bl	800a814 <xTimerPendFunctionCallFromISR>
 800827a:	60f8      	str	r0, [r7, #12]

		return xReturn;
 800827c:	68fb      	ldr	r3, [r7, #12]
	}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	080083b9 	.word	0x080083b9

0800828c <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b08e      	sub	sp, #56	; 0x38
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8008296:	2300      	movs	r3, #0
 8008298:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800829e:	2300      	movs	r3, #0
 80082a0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d109      	bne.n	80082bc <xEventGroupSetBits+0x30>
 80082a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ac:	f383 8811 	msr	BASEPRI, r3
 80082b0:	f3bf 8f6f 	isb	sy
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	613b      	str	r3, [r7, #16]
 80082ba:	e7fe      	b.n	80082ba <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d009      	beq.n	80082da <xEventGroupSetBits+0x4e>
 80082c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ca:	f383 8811 	msr	BASEPRI, r3
 80082ce:	f3bf 8f6f 	isb	sy
 80082d2:	f3bf 8f4f 	dsb	sy
 80082d6:	60fb      	str	r3, [r7, #12]
 80082d8:	e7fe      	b.n	80082d8 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80082da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082dc:	3304      	adds	r3, #4
 80082de:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	3308      	adds	r3, #8
 80082e4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80082e6:	f001 f9a1 	bl	800962c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80082ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80082f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	431a      	orrs	r2, r3
 80082f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fa:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80082fc:	e03c      	b.n	8008378 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 80082fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8008304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800830a:	2300      	movs	r3, #0
 800830c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008314:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800831c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d108      	bne.n	800833a <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8008328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	4013      	ands	r3, r2
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00b      	beq.n	800834c <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8008334:	2301      	movs	r3, #1
 8008336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008338:	e008      	b.n	800834c <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800833a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	4013      	ands	r3, r2
 8008342:	69ba      	ldr	r2, [r7, #24]
 8008344:	429a      	cmp	r2, r3
 8008346:	d101      	bne.n	800834c <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8008348:	2301      	movs	r3, #1
 800834a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800834c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834e:	2b00      	cmp	r3, #0
 8008350:	d010      	beq.n	8008374 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008358:	2b00      	cmp	r3, #0
 800835a:	d003      	beq.n	8008364 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800835c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	4313      	orrs	r3, r2
 8008362:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800836c:	4619      	mov	r1, r3
 800836e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008370:	f001 fc42 	bl	8009bf8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8008378:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800837a:	6a3b      	ldr	r3, [r7, #32]
 800837c:	429a      	cmp	r2, r3
 800837e:	d1be      	bne.n	80082fe <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008386:	43db      	mvns	r3, r3
 8008388:	401a      	ands	r2, r3
 800838a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800838e:	f001 f95b 	bl	8009648 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8008392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008394:	681b      	ldr	r3, [r3, #0]
}
 8008396:	4618      	mov	r0, r3
 8008398:	3738      	adds	r7, #56	; 0x38
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b082      	sub	sp, #8
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 80083a8:	6839      	ldr	r1, [r7, #0]
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f7ff ff6e 	bl	800828c <xEventGroupSetBits>
}
 80083b0:	bf00      	nop
 80083b2:	3708      	adds	r7, #8
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f7ff ff17 	bl	80081f8 <xEventGroupClearBits>
}
 80083ca:	bf00      	nop
 80083cc:	3708      	adds	r7, #8
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80083d2:	b480      	push	{r7}
 80083d4:	b087      	sub	sp, #28
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	60f8      	str	r0, [r7, #12]
 80083da:	60b9      	str	r1, [r7, #8]
 80083dc:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80083de:	2300      	movs	r3, #0
 80083e0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d107      	bne.n	80083f8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	4013      	ands	r3, r2
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00a      	beq.n	8008408 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80083f2:	2301      	movs	r3, #1
 80083f4:	617b      	str	r3, [r7, #20]
 80083f6:	e007      	b.n	8008408 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	4013      	ands	r3, r2
 80083fe:	68ba      	ldr	r2, [r7, #8]
 8008400:	429a      	cmp	r2, r3
 8008402:	d101      	bne.n	8008408 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8008404:	2301      	movs	r3, #1
 8008406:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8008408:	697b      	ldr	r3, [r7, #20]
}
 800840a:	4618      	mov	r0, r3
 800840c:	371c      	adds	r7, #28
 800840e:	46bd      	mov	sp, r7
 8008410:	bc80      	pop	{r7}
 8008412:	4770      	bx	lr

08008414 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	68f9      	ldr	r1, [r7, #12]
 8008426:	4804      	ldr	r0, [pc, #16]	; (8008438 <xEventGroupSetBitsFromISR+0x24>)
 8008428:	f002 f9f4 	bl	800a814 <xTimerPendFunctionCallFromISR>
 800842c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800842e:	697b      	ldr	r3, [r7, #20]
	}
 8008430:	4618      	mov	r0, r3
 8008432:	3718      	adds	r7, #24
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	0800839f 	.word	0x0800839f

0800843c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f103 0208 	add.w	r2, r3, #8
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f04f 32ff 	mov.w	r2, #4294967295
 8008454:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f103 0208 	add.w	r2, r3, #8
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f103 0208 	add.w	r2, r3, #8
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008470:	bf00      	nop
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	bc80      	pop	{r7}
 8008478:	4770      	bx	lr

0800847a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800847a:	b480      	push	{r7}
 800847c:	b083      	sub	sp, #12
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008488:	bf00      	nop
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	bc80      	pop	{r7}
 8008490:	4770      	bx	lr

08008492 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008492:	b480      	push	{r7}
 8008494:	b085      	sub	sp, #20
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
 800849a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	689a      	ldr	r2, [r3, #8]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	683a      	ldr	r2, [r7, #0]
 80084b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	1c5a      	adds	r2, r3, #1
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	601a      	str	r2, [r3, #0]
}
 80084ce:	bf00      	nop
 80084d0:	3714      	adds	r7, #20
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bc80      	pop	{r7}
 80084d6:	4770      	bx	lr

080084d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084d8:	b480      	push	{r7}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ee:	d103      	bne.n	80084f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	60fb      	str	r3, [r7, #12]
 80084f6:	e00c      	b.n	8008512 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	3308      	adds	r3, #8
 80084fc:	60fb      	str	r3, [r7, #12]
 80084fe:	e002      	b.n	8008506 <vListInsert+0x2e>
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	60fb      	str	r3, [r7, #12]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	429a      	cmp	r2, r3
 8008510:	d2f6      	bcs.n	8008500 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	685a      	ldr	r2, [r3, #4]
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	683a      	ldr	r2, [r7, #0]
 800852c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	1c5a      	adds	r2, r3, #1
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	601a      	str	r2, [r3, #0]
}
 800853e:	bf00      	nop
 8008540:	3714      	adds	r7, #20
 8008542:	46bd      	mov	sp, r7
 8008544:	bc80      	pop	{r7}
 8008546:	4770      	bx	lr

08008548 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	6892      	ldr	r2, [r2, #8]
 800855e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	6852      	ldr	r2, [r2, #4]
 8008568:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	429a      	cmp	r2, r3
 8008572:	d103      	bne.n	800857c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	689a      	ldr	r2, [r3, #8]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	1e5a      	subs	r2, r3, #1
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
}
 8008590:	4618      	mov	r0, r3
 8008592:	3714      	adds	r7, #20
 8008594:	46bd      	mov	sp, r7
 8008596:	bc80      	pop	{r7}
 8008598:	4770      	bx	lr
	...

0800859c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d109      	bne.n	80085c4 <xQueueGenericReset+0x28>
 80085b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	60bb      	str	r3, [r7, #8]
 80085c2:	e7fe      	b.n	80085c2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80085c4:	f002 fa30 	bl	800aa28 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d0:	68f9      	ldr	r1, [r7, #12]
 80085d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085d4:	fb01 f303 	mul.w	r3, r1, r3
 80085d8:	441a      	add	r2, r3
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085f4:	3b01      	subs	r3, #1
 80085f6:	68f9      	ldr	r1, [r7, #12]
 80085f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085fa:	fb01 f303 	mul.w	r3, r1, r3
 80085fe:	441a      	add	r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	22ff      	movs	r2, #255	; 0xff
 8008608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	22ff      	movs	r2, #255	; 0xff
 8008610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d114      	bne.n	8008644 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d01a      	beq.n	8008658 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	3310      	adds	r3, #16
 8008626:	4618      	mov	r0, r3
 8008628:	f001 fa84 	bl	8009b34 <xTaskRemoveFromEventList>
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d012      	beq.n	8008658 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008632:	4b0d      	ldr	r3, [pc, #52]	; (8008668 <xQueueGenericReset+0xcc>)
 8008634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	e009      	b.n	8008658 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	3310      	adds	r3, #16
 8008648:	4618      	mov	r0, r3
 800864a:	f7ff fef7 	bl	800843c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	3324      	adds	r3, #36	; 0x24
 8008652:	4618      	mov	r0, r3
 8008654:	f7ff fef2 	bl	800843c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008658:	f002 fa14 	bl	800aa84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800865c:	2301      	movs	r3, #1
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	e000ed04 	.word	0xe000ed04

0800866c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800866c:	b580      	push	{r7, lr}
 800866e:	b08e      	sub	sp, #56	; 0x38
 8008670:	af02      	add	r7, sp, #8
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	607a      	str	r2, [r7, #4]
 8008678:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d109      	bne.n	8008694 <xQueueGenericCreateStatic+0x28>
 8008680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	62bb      	str	r3, [r7, #40]	; 0x28
 8008692:	e7fe      	b.n	8008692 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d109      	bne.n	80086ae <xQueueGenericCreateStatic+0x42>
 800869a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	627b      	str	r3, [r7, #36]	; 0x24
 80086ac:	e7fe      	b.n	80086ac <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d002      	beq.n	80086ba <xQueueGenericCreateStatic+0x4e>
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d001      	beq.n	80086be <xQueueGenericCreateStatic+0x52>
 80086ba:	2301      	movs	r3, #1
 80086bc:	e000      	b.n	80086c0 <xQueueGenericCreateStatic+0x54>
 80086be:	2300      	movs	r3, #0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d109      	bne.n	80086d8 <xQueueGenericCreateStatic+0x6c>
 80086c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	623b      	str	r3, [r7, #32]
 80086d6:	e7fe      	b.n	80086d6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d102      	bne.n	80086e4 <xQueueGenericCreateStatic+0x78>
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d101      	bne.n	80086e8 <xQueueGenericCreateStatic+0x7c>
 80086e4:	2301      	movs	r3, #1
 80086e6:	e000      	b.n	80086ea <xQueueGenericCreateStatic+0x7e>
 80086e8:	2300      	movs	r3, #0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d109      	bne.n	8008702 <xQueueGenericCreateStatic+0x96>
 80086ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f2:	f383 8811 	msr	BASEPRI, r3
 80086f6:	f3bf 8f6f 	isb	sy
 80086fa:	f3bf 8f4f 	dsb	sy
 80086fe:	61fb      	str	r3, [r7, #28]
 8008700:	e7fe      	b.n	8008700 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008702:	2350      	movs	r3, #80	; 0x50
 8008704:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	2b50      	cmp	r3, #80	; 0x50
 800870a:	d009      	beq.n	8008720 <xQueueGenericCreateStatic+0xb4>
 800870c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008710:	f383 8811 	msr	BASEPRI, r3
 8008714:	f3bf 8f6f 	isb	sy
 8008718:	f3bf 8f4f 	dsb	sy
 800871c:	61bb      	str	r3, [r7, #24]
 800871e:	e7fe      	b.n	800871e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00d      	beq.n	8008746 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800872a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872c:	2201      	movs	r2, #1
 800872e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008732:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	4613      	mov	r3, r2
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	68b9      	ldr	r1, [r7, #8]
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 f842 	bl	80087ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008748:	4618      	mov	r0, r3
 800874a:	3730      	adds	r7, #48	; 0x30
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008750:	b580      	push	{r7, lr}
 8008752:	b08a      	sub	sp, #40	; 0x28
 8008754:	af02      	add	r7, sp, #8
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	4613      	mov	r3, r2
 800875c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d109      	bne.n	8008778 <xQueueGenericCreate+0x28>
 8008764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008768:	f383 8811 	msr	BASEPRI, r3
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	613b      	str	r3, [r7, #16]
 8008776:	e7fe      	b.n	8008776 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d102      	bne.n	8008784 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800877e:	2300      	movs	r3, #0
 8008780:	61fb      	str	r3, [r7, #28]
 8008782:	e004      	b.n	800878e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	68ba      	ldr	r2, [r7, #8]
 8008788:	fb02 f303 	mul.w	r3, r2, r3
 800878c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	3350      	adds	r3, #80	; 0x50
 8008792:	4618      	mov	r0, r3
 8008794:	f002 fa3e 	bl	800ac14 <pvPortMalloc>
 8008798:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00f      	beq.n	80087c0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	3350      	adds	r3, #80	; 0x50
 80087a4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087ae:	79fa      	ldrb	r2, [r7, #7]
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	4613      	mov	r3, r2
 80087b6:	697a      	ldr	r2, [r7, #20]
 80087b8:	68b9      	ldr	r1, [r7, #8]
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f000 f805 	bl	80087ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80087c0:	69bb      	ldr	r3, [r7, #24]
	}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3720      	adds	r7, #32
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b084      	sub	sp, #16
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	60f8      	str	r0, [r7, #12]
 80087d2:	60b9      	str	r1, [r7, #8]
 80087d4:	607a      	str	r2, [r7, #4]
 80087d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d103      	bne.n	80087e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	69ba      	ldr	r2, [r7, #24]
 80087e2:	601a      	str	r2, [r3, #0]
 80087e4:	e002      	b.n	80087ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80087f8:	2101      	movs	r1, #1
 80087fa:	69b8      	ldr	r0, [r7, #24]
 80087fc:	f7ff fece 	bl	800859c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	78fa      	ldrb	r2, [r7, #3]
 8008804:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008808:	bf00      	nop
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b08e      	sub	sp, #56	; 0x38
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
 800881c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800881e:	2300      	movs	r3, #0
 8008820:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008828:	2b00      	cmp	r3, #0
 800882a:	d109      	bne.n	8008840 <xQueueGenericSend+0x30>
 800882c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008830:	f383 8811 	msr	BASEPRI, r3
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	62bb      	str	r3, [r7, #40]	; 0x28
 800883e:	e7fe      	b.n	800883e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d103      	bne.n	800884e <xQueueGenericSend+0x3e>
 8008846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884a:	2b00      	cmp	r3, #0
 800884c:	d101      	bne.n	8008852 <xQueueGenericSend+0x42>
 800884e:	2301      	movs	r3, #1
 8008850:	e000      	b.n	8008854 <xQueueGenericSend+0x44>
 8008852:	2300      	movs	r3, #0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d109      	bne.n	800886c <xQueueGenericSend+0x5c>
 8008858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885c:	f383 8811 	msr	BASEPRI, r3
 8008860:	f3bf 8f6f 	isb	sy
 8008864:	f3bf 8f4f 	dsb	sy
 8008868:	627b      	str	r3, [r7, #36]	; 0x24
 800886a:	e7fe      	b.n	800886a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	2b02      	cmp	r3, #2
 8008870:	d103      	bne.n	800887a <xQueueGenericSend+0x6a>
 8008872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008876:	2b01      	cmp	r3, #1
 8008878:	d101      	bne.n	800887e <xQueueGenericSend+0x6e>
 800887a:	2301      	movs	r3, #1
 800887c:	e000      	b.n	8008880 <xQueueGenericSend+0x70>
 800887e:	2300      	movs	r3, #0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d109      	bne.n	8008898 <xQueueGenericSend+0x88>
 8008884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008888:	f383 8811 	msr	BASEPRI, r3
 800888c:	f3bf 8f6f 	isb	sy
 8008890:	f3bf 8f4f 	dsb	sy
 8008894:	623b      	str	r3, [r7, #32]
 8008896:	e7fe      	b.n	8008896 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008898:	f001 fb68 	bl	8009f6c <xTaskGetSchedulerState>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d102      	bne.n	80088a8 <xQueueGenericSend+0x98>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d101      	bne.n	80088ac <xQueueGenericSend+0x9c>
 80088a8:	2301      	movs	r3, #1
 80088aa:	e000      	b.n	80088ae <xQueueGenericSend+0x9e>
 80088ac:	2300      	movs	r3, #0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d109      	bne.n	80088c6 <xQueueGenericSend+0xb6>
 80088b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	61fb      	str	r3, [r7, #28]
 80088c4:	e7fe      	b.n	80088c4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088c6:	f002 f8af 	bl	800aa28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d302      	bcc.n	80088dc <xQueueGenericSend+0xcc>
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d129      	bne.n	8008930 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088dc:	683a      	ldr	r2, [r7, #0]
 80088de:	68b9      	ldr	r1, [r7, #8]
 80088e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088e2:	f000 f9ff 	bl	8008ce4 <prvCopyDataToQueue>
 80088e6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d010      	beq.n	8008912 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f2:	3324      	adds	r3, #36	; 0x24
 80088f4:	4618      	mov	r0, r3
 80088f6:	f001 f91d 	bl	8009b34 <xTaskRemoveFromEventList>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d013      	beq.n	8008928 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008900:	4b3f      	ldr	r3, [pc, #252]	; (8008a00 <xQueueGenericSend+0x1f0>)
 8008902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008906:	601a      	str	r2, [r3, #0]
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	e00a      	b.n	8008928 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008914:	2b00      	cmp	r3, #0
 8008916:	d007      	beq.n	8008928 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008918:	4b39      	ldr	r3, [pc, #228]	; (8008a00 <xQueueGenericSend+0x1f0>)
 800891a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800891e:	601a      	str	r2, [r3, #0]
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008928:	f002 f8ac 	bl	800aa84 <vPortExitCritical>
				return pdPASS;
 800892c:	2301      	movs	r3, #1
 800892e:	e063      	b.n	80089f8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d103      	bne.n	800893e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008936:	f002 f8a5 	bl	800aa84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800893a:	2300      	movs	r3, #0
 800893c:	e05c      	b.n	80089f8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800893e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008940:	2b00      	cmp	r3, #0
 8008942:	d106      	bne.n	8008952 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008944:	f107 0314 	add.w	r3, r7, #20
 8008948:	4618      	mov	r0, r3
 800894a:	f001 f9b5 	bl	8009cb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800894e:	2301      	movs	r3, #1
 8008950:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008952:	f002 f897 	bl	800aa84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008956:	f000 fe69 	bl	800962c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800895a:	f002 f865 	bl	800aa28 <vPortEnterCritical>
 800895e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008960:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008964:	b25b      	sxtb	r3, r3
 8008966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800896a:	d103      	bne.n	8008974 <xQueueGenericSend+0x164>
 800896c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896e:	2200      	movs	r2, #0
 8008970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008976:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800897a:	b25b      	sxtb	r3, r3
 800897c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008980:	d103      	bne.n	800898a <xQueueGenericSend+0x17a>
 8008982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008984:	2200      	movs	r2, #0
 8008986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800898a:	f002 f87b 	bl	800aa84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800898e:	1d3a      	adds	r2, r7, #4
 8008990:	f107 0314 	add.w	r3, r7, #20
 8008994:	4611      	mov	r1, r2
 8008996:	4618      	mov	r0, r3
 8008998:	f001 f9a4 	bl	8009ce4 <xTaskCheckForTimeOut>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d124      	bne.n	80089ec <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80089a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089a4:	f000 fa96 	bl	8008ed4 <prvIsQueueFull>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d018      	beq.n	80089e0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80089ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b0:	3310      	adds	r3, #16
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	4611      	mov	r1, r2
 80089b6:	4618      	mov	r0, r3
 80089b8:	f001 f834 	bl	8009a24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80089bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089be:	f000 fa21 	bl	8008e04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80089c2:	f000 fe41 	bl	8009648 <xTaskResumeAll>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f47f af7c 	bne.w	80088c6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80089ce:	4b0c      	ldr	r3, [pc, #48]	; (8008a00 <xQueueGenericSend+0x1f0>)
 80089d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d4:	601a      	str	r2, [r3, #0]
 80089d6:	f3bf 8f4f 	dsb	sy
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	e772      	b.n	80088c6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80089e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089e2:	f000 fa0f 	bl	8008e04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089e6:	f000 fe2f 	bl	8009648 <xTaskResumeAll>
 80089ea:	e76c      	b.n	80088c6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80089ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089ee:	f000 fa09 	bl	8008e04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089f2:	f000 fe29 	bl	8009648 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80089f6:	2300      	movs	r3, #0
		}
	}
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3738      	adds	r7, #56	; 0x38
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	e000ed04 	.word	0xe000ed04

08008a04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b08e      	sub	sp, #56	; 0x38
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
 8008a10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d109      	bne.n	8008a30 <xQueueGenericSendFromISR+0x2c>
 8008a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a20:	f383 8811 	msr	BASEPRI, r3
 8008a24:	f3bf 8f6f 	isb	sy
 8008a28:	f3bf 8f4f 	dsb	sy
 8008a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a2e:	e7fe      	b.n	8008a2e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d103      	bne.n	8008a3e <xQueueGenericSendFromISR+0x3a>
 8008a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d101      	bne.n	8008a42 <xQueueGenericSendFromISR+0x3e>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e000      	b.n	8008a44 <xQueueGenericSendFromISR+0x40>
 8008a42:	2300      	movs	r3, #0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d109      	bne.n	8008a5c <xQueueGenericSendFromISR+0x58>
 8008a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4c:	f383 8811 	msr	BASEPRI, r3
 8008a50:	f3bf 8f6f 	isb	sy
 8008a54:	f3bf 8f4f 	dsb	sy
 8008a58:	623b      	str	r3, [r7, #32]
 8008a5a:	e7fe      	b.n	8008a5a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d103      	bne.n	8008a6a <xQueueGenericSendFromISR+0x66>
 8008a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d101      	bne.n	8008a6e <xQueueGenericSendFromISR+0x6a>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e000      	b.n	8008a70 <xQueueGenericSendFromISR+0x6c>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d109      	bne.n	8008a88 <xQueueGenericSendFromISR+0x84>
 8008a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	61fb      	str	r3, [r7, #28]
 8008a86:	e7fe      	b.n	8008a86 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a88:	f002 f888 	bl	800ab9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008a8c:	f3ef 8211 	mrs	r2, BASEPRI
 8008a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	61ba      	str	r2, [r7, #24]
 8008aa2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008aa4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d302      	bcc.n	8008aba <xQueueGenericSendFromISR+0xb6>
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d12c      	bne.n	8008b14 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ac4:	683a      	ldr	r2, [r7, #0]
 8008ac6:	68b9      	ldr	r1, [r7, #8]
 8008ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008aca:	f000 f90b 	bl	8008ce4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008ace:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad6:	d112      	bne.n	8008afe <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d016      	beq.n	8008b0e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae2:	3324      	adds	r3, #36	; 0x24
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f001 f825 	bl	8009b34 <xTaskRemoveFromEventList>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00e      	beq.n	8008b0e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00b      	beq.n	8008b0e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2201      	movs	r2, #1
 8008afa:	601a      	str	r2, [r3, #0]
 8008afc:	e007      	b.n	8008b0e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008afe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b02:	3301      	adds	r3, #1
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	b25a      	sxtb	r2, r3
 8008b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008b12:	e001      	b.n	8008b18 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b14:	2300      	movs	r3, #0
 8008b16:	637b      	str	r3, [r7, #52]	; 0x34
 8008b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3738      	adds	r7, #56	; 0x38
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b08c      	sub	sp, #48	; 0x30
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d109      	bne.n	8008b5a <xQueueReceive+0x2e>
	__asm volatile
 8008b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4a:	f383 8811 	msr	BASEPRI, r3
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	623b      	str	r3, [r7, #32]
 8008b58:	e7fe      	b.n	8008b58 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d103      	bne.n	8008b68 <xQueueReceive+0x3c>
 8008b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d101      	bne.n	8008b6c <xQueueReceive+0x40>
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e000      	b.n	8008b6e <xQueueReceive+0x42>
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d109      	bne.n	8008b86 <xQueueReceive+0x5a>
 8008b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b76:	f383 8811 	msr	BASEPRI, r3
 8008b7a:	f3bf 8f6f 	isb	sy
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	61fb      	str	r3, [r7, #28]
 8008b84:	e7fe      	b.n	8008b84 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b86:	f001 f9f1 	bl	8009f6c <xTaskGetSchedulerState>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d102      	bne.n	8008b96 <xQueueReceive+0x6a>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d101      	bne.n	8008b9a <xQueueReceive+0x6e>
 8008b96:	2301      	movs	r3, #1
 8008b98:	e000      	b.n	8008b9c <xQueueReceive+0x70>
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d109      	bne.n	8008bb4 <xQueueReceive+0x88>
 8008ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba4:	f383 8811 	msr	BASEPRI, r3
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	61bb      	str	r3, [r7, #24]
 8008bb2:	e7fe      	b.n	8008bb2 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008bb4:	f001 ff38 	bl	800aa28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bbc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d01f      	beq.n	8008c04 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008bc4:	68b9      	ldr	r1, [r7, #8]
 8008bc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bc8:	f000 f8f6 	bl	8008db8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bce:	1e5a      	subs	r2, r3, #1
 8008bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00f      	beq.n	8008bfc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bde:	3310      	adds	r3, #16
 8008be0:	4618      	mov	r0, r3
 8008be2:	f000 ffa7 	bl	8009b34 <xTaskRemoveFromEventList>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d007      	beq.n	8008bfc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008bec:	4b3c      	ldr	r3, [pc, #240]	; (8008ce0 <xQueueReceive+0x1b4>)
 8008bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bf2:	601a      	str	r2, [r3, #0]
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008bfc:	f001 ff42 	bl	800aa84 <vPortExitCritical>
				return pdPASS;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e069      	b.n	8008cd8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d103      	bne.n	8008c12 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c0a:	f001 ff3b 	bl	800aa84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	e062      	b.n	8008cd8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d106      	bne.n	8008c26 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c18:	f107 0310 	add.w	r3, r7, #16
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f001 f84b 	bl	8009cb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c22:	2301      	movs	r3, #1
 8008c24:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c26:	f001 ff2d 	bl	800aa84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c2a:	f000 fcff 	bl	800962c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c2e:	f001 fefb 	bl	800aa28 <vPortEnterCritical>
 8008c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c38:	b25b      	sxtb	r3, r3
 8008c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c3e:	d103      	bne.n	8008c48 <xQueueReceive+0x11c>
 8008c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c4e:	b25b      	sxtb	r3, r3
 8008c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c54:	d103      	bne.n	8008c5e <xQueueReceive+0x132>
 8008c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c5e:	f001 ff11 	bl	800aa84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c62:	1d3a      	adds	r2, r7, #4
 8008c64:	f107 0310 	add.w	r3, r7, #16
 8008c68:	4611      	mov	r1, r2
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f001 f83a 	bl	8009ce4 <xTaskCheckForTimeOut>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d123      	bne.n	8008cbe <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c78:	f000 f916 	bl	8008ea8 <prvIsQueueEmpty>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d017      	beq.n	8008cb2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c84:	3324      	adds	r3, #36	; 0x24
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	4611      	mov	r1, r2
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f000 feca 	bl	8009a24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c92:	f000 f8b7 	bl	8008e04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c96:	f000 fcd7 	bl	8009648 <xTaskResumeAll>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d189      	bne.n	8008bb4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008ca0:	4b0f      	ldr	r3, [pc, #60]	; (8008ce0 <xQueueReceive+0x1b4>)
 8008ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ca6:	601a      	str	r2, [r3, #0]
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	e780      	b.n	8008bb4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008cb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cb4:	f000 f8a6 	bl	8008e04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cb8:	f000 fcc6 	bl	8009648 <xTaskResumeAll>
 8008cbc:	e77a      	b.n	8008bb4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008cbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cc0:	f000 f8a0 	bl	8008e04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008cc4:	f000 fcc0 	bl	8009648 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cca:	f000 f8ed 	bl	8008ea8 <prvIsQueueEmpty>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f43f af6f 	beq.w	8008bb4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008cd6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3730      	adds	r7, #48	; 0x30
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	e000ed04 	.word	0xe000ed04

08008ce4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b086      	sub	sp, #24
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d10d      	bne.n	8008d1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d14d      	bne.n	8008da6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f001 f94a 	bl	8009fa8 <xTaskPriorityDisinherit>
 8008d14:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	605a      	str	r2, [r3, #4]
 8008d1c:	e043      	b.n	8008da6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d119      	bne.n	8008d58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6898      	ldr	r0, [r3, #8]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	68b9      	ldr	r1, [r7, #8]
 8008d30:	f002 f96c 	bl	800b00c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	689a      	ldr	r2, [r3, #8]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3c:	441a      	add	r2, r3
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	689a      	ldr	r2, [r3, #8]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d32b      	bcc.n	8008da6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	609a      	str	r2, [r3, #8]
 8008d56:	e026      	b.n	8008da6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	68d8      	ldr	r0, [r3, #12]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d60:	461a      	mov	r2, r3
 8008d62:	68b9      	ldr	r1, [r7, #8]
 8008d64:	f002 f952 	bl	800b00c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	68da      	ldr	r2, [r3, #12]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d70:	425b      	negs	r3, r3
 8008d72:	441a      	add	r2, r3
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	68da      	ldr	r2, [r3, #12]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d207      	bcs.n	8008d94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	685a      	ldr	r2, [r3, #4]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8c:	425b      	negs	r3, r3
 8008d8e:	441a      	add	r2, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2b02      	cmp	r3, #2
 8008d98:	d105      	bne.n	8008da6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d002      	beq.n	8008da6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	3b01      	subs	r3, #1
 8008da4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	1c5a      	adds	r2, r3, #1
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008dae:	697b      	ldr	r3, [r7, #20]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3718      	adds	r7, #24
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d018      	beq.n	8008dfc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	68da      	ldr	r2, [r3, #12]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd2:	441a      	add	r2, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	68da      	ldr	r2, [r3, #12]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d303      	bcc.n	8008dec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	68d9      	ldr	r1, [r3, #12]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df4:	461a      	mov	r2, r3
 8008df6:	6838      	ldr	r0, [r7, #0]
 8008df8:	f002 f908 	bl	800b00c <memcpy>
	}
}
 8008dfc:	bf00      	nop
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008e0c:	f001 fe0c 	bl	800aa28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e18:	e011      	b.n	8008e3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d012      	beq.n	8008e48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	3324      	adds	r3, #36	; 0x24
 8008e26:	4618      	mov	r0, r3
 8008e28:	f000 fe84 	bl	8009b34 <xTaskRemoveFromEventList>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d001      	beq.n	8008e36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008e32:	f000 ffb7 	bl	8009da4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008e36:	7bfb      	ldrb	r3, [r7, #15]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	dce9      	bgt.n	8008e1a <prvUnlockQueue+0x16>
 8008e46:	e000      	b.n	8008e4a <prvUnlockQueue+0x46>
					break;
 8008e48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	22ff      	movs	r2, #255	; 0xff
 8008e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008e52:	f001 fe17 	bl	800aa84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e56:	f001 fde7 	bl	800aa28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e62:	e011      	b.n	8008e88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d012      	beq.n	8008e92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	3310      	adds	r3, #16
 8008e70:	4618      	mov	r0, r3
 8008e72:	f000 fe5f 	bl	8009b34 <xTaskRemoveFromEventList>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d001      	beq.n	8008e80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008e7c:	f000 ff92 	bl	8009da4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008e80:	7bbb      	ldrb	r3, [r7, #14]
 8008e82:	3b01      	subs	r3, #1
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	dce9      	bgt.n	8008e64 <prvUnlockQueue+0x60>
 8008e90:	e000      	b.n	8008e94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008e92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	22ff      	movs	r2, #255	; 0xff
 8008e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008e9c:	f001 fdf2 	bl	800aa84 <vPortExitCritical>
}
 8008ea0:	bf00      	nop
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008eb0:	f001 fdba 	bl	800aa28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d102      	bne.n	8008ec2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	60fb      	str	r3, [r7, #12]
 8008ec0:	e001      	b.n	8008ec6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ec6:	f001 fddd 	bl	800aa84 <vPortExitCritical>

	return xReturn;
 8008eca:	68fb      	ldr	r3, [r7, #12]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3710      	adds	r7, #16
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008edc:	f001 fda4 	bl	800aa28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d102      	bne.n	8008ef2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008eec:	2301      	movs	r3, #1
 8008eee:	60fb      	str	r3, [r7, #12]
 8008ef0:	e001      	b.n	8008ef6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ef6:	f001 fdc5 	bl	800aa84 <vPortExitCritical>

	return xReturn;
 8008efa:	68fb      	ldr	r3, [r7, #12]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f0e:	2300      	movs	r3, #0
 8008f10:	60fb      	str	r3, [r7, #12]
 8008f12:	e014      	b.n	8008f3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008f14:	4a0e      	ldr	r2, [pc, #56]	; (8008f50 <vQueueAddToRegistry+0x4c>)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10b      	bne.n	8008f38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008f20:	490b      	ldr	r1, [pc, #44]	; (8008f50 <vQueueAddToRegistry+0x4c>)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	683a      	ldr	r2, [r7, #0]
 8008f26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008f2a:	4a09      	ldr	r2, [pc, #36]	; (8008f50 <vQueueAddToRegistry+0x4c>)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	00db      	lsls	r3, r3, #3
 8008f30:	4413      	add	r3, r2
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008f36:	e005      	b.n	8008f44 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	60fb      	str	r3, [r7, #12]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2b07      	cmp	r3, #7
 8008f42:	d9e7      	bls.n	8008f14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f44:	bf00      	nop
 8008f46:	3714      	adds	r7, #20
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bc80      	pop	{r7}
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	20003864 	.word	0x20003864

08008f54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008f64:	f001 fd60 	bl	800aa28 <vPortEnterCritical>
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f6e:	b25b      	sxtb	r3, r3
 8008f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f74:	d103      	bne.n	8008f7e <vQueueWaitForMessageRestricted+0x2a>
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f84:	b25b      	sxtb	r3, r3
 8008f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f8a:	d103      	bne.n	8008f94 <vQueueWaitForMessageRestricted+0x40>
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f94:	f001 fd76 	bl	800aa84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d106      	bne.n	8008fae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	3324      	adds	r3, #36	; 0x24
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	68b9      	ldr	r1, [r7, #8]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f000 fd99 	bl	8009ae0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008fae:	6978      	ldr	r0, [r7, #20]
 8008fb0:	f7ff ff28 	bl	8008e04 <prvUnlockQueue>
	}
 8008fb4:	bf00      	nop
 8008fb6:	3718      	adds	r7, #24
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b08e      	sub	sp, #56	; 0x38
 8008fc0:	af04      	add	r7, sp, #16
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]
 8008fc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d109      	bne.n	8008fe4 <xTaskCreateStatic+0x28>
 8008fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd4:	f383 8811 	msr	BASEPRI, r3
 8008fd8:	f3bf 8f6f 	isb	sy
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	623b      	str	r3, [r7, #32]
 8008fe2:	e7fe      	b.n	8008fe2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d109      	bne.n	8008ffe <xTaskCreateStatic+0x42>
 8008fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fee:	f383 8811 	msr	BASEPRI, r3
 8008ff2:	f3bf 8f6f 	isb	sy
 8008ff6:	f3bf 8f4f 	dsb	sy
 8008ffa:	61fb      	str	r3, [r7, #28]
 8008ffc:	e7fe      	b.n	8008ffc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ffe:	235c      	movs	r3, #92	; 0x5c
 8009000:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	2b5c      	cmp	r3, #92	; 0x5c
 8009006:	d009      	beq.n	800901c <xTaskCreateStatic+0x60>
 8009008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900c:	f383 8811 	msr	BASEPRI, r3
 8009010:	f3bf 8f6f 	isb	sy
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	61bb      	str	r3, [r7, #24]
 800901a:	e7fe      	b.n	800901a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800901c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901e:	2b00      	cmp	r3, #0
 8009020:	d01e      	beq.n	8009060 <xTaskCreateStatic+0xa4>
 8009022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009024:	2b00      	cmp	r3, #0
 8009026:	d01b      	beq.n	8009060 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009030:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009034:	2202      	movs	r2, #2
 8009036:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800903a:	2300      	movs	r3, #0
 800903c:	9303      	str	r3, [sp, #12]
 800903e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009040:	9302      	str	r3, [sp, #8]
 8009042:	f107 0314 	add.w	r3, r7, #20
 8009046:	9301      	str	r3, [sp, #4]
 8009048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904a:	9300      	str	r3, [sp, #0]
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	68b9      	ldr	r1, [r7, #8]
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	f000 f850 	bl	80090f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009058:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800905a:	f000 f8d3 	bl	8009204 <prvAddNewTaskToReadyList>
 800905e:	e001      	b.n	8009064 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8009060:	2300      	movs	r3, #0
 8009062:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009064:	697b      	ldr	r3, [r7, #20]
	}
 8009066:	4618      	mov	r0, r3
 8009068:	3728      	adds	r7, #40	; 0x28
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800906e:	b580      	push	{r7, lr}
 8009070:	b08c      	sub	sp, #48	; 0x30
 8009072:	af04      	add	r7, sp, #16
 8009074:	60f8      	str	r0, [r7, #12]
 8009076:	60b9      	str	r1, [r7, #8]
 8009078:	603b      	str	r3, [r7, #0]
 800907a:	4613      	mov	r3, r2
 800907c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800907e:	88fb      	ldrh	r3, [r7, #6]
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	4618      	mov	r0, r3
 8009084:	f001 fdc6 	bl	800ac14 <pvPortMalloc>
 8009088:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00e      	beq.n	80090ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009090:	205c      	movs	r0, #92	; 0x5c
 8009092:	f001 fdbf 	bl	800ac14 <pvPortMalloc>
 8009096:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d003      	beq.n	80090a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	697a      	ldr	r2, [r7, #20]
 80090a2:	631a      	str	r2, [r3, #48]	; 0x30
 80090a4:	e005      	b.n	80090b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80090a6:	6978      	ldr	r0, [r7, #20]
 80090a8:	f001 fe7a 	bl	800ada0 <vPortFree>
 80090ac:	e001      	b.n	80090b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80090ae:	2300      	movs	r3, #0
 80090b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d017      	beq.n	80090e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	2200      	movs	r2, #0
 80090bc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80090c0:	88fa      	ldrh	r2, [r7, #6]
 80090c2:	2300      	movs	r3, #0
 80090c4:	9303      	str	r3, [sp, #12]
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	9302      	str	r3, [sp, #8]
 80090ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090cc:	9301      	str	r3, [sp, #4]
 80090ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	68b9      	ldr	r1, [r7, #8]
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f000 f80e 	bl	80090f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090dc:	69f8      	ldr	r0, [r7, #28]
 80090de:	f000 f891 	bl	8009204 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80090e2:	2301      	movs	r3, #1
 80090e4:	61bb      	str	r3, [r7, #24]
 80090e6:	e002      	b.n	80090ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80090e8:	f04f 33ff 	mov.w	r3, #4294967295
 80090ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80090ee:	69bb      	ldr	r3, [r7, #24]
	}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3720      	adds	r7, #32
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b088      	sub	sp, #32
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
 8009104:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009108:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	461a      	mov	r2, r3
 8009110:	21a5      	movs	r1, #165	; 0xa5
 8009112:	f001 ff86 	bl	800b022 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009120:	3b01      	subs	r3, #1
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4413      	add	r3, r2
 8009126:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	f023 0307 	bic.w	r3, r3, #7
 800912e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	f003 0307 	and.w	r3, r3, #7
 8009136:	2b00      	cmp	r3, #0
 8009138:	d009      	beq.n	800914e <prvInitialiseNewTask+0x56>
 800913a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913e:	f383 8811 	msr	BASEPRI, r3
 8009142:	f3bf 8f6f 	isb	sy
 8009146:	f3bf 8f4f 	dsb	sy
 800914a:	617b      	str	r3, [r7, #20]
 800914c:	e7fe      	b.n	800914c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800914e:	2300      	movs	r3, #0
 8009150:	61fb      	str	r3, [r7, #28]
 8009152:	e012      	b.n	800917a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009154:	68ba      	ldr	r2, [r7, #8]
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	4413      	add	r3, r2
 800915a:	7819      	ldrb	r1, [r3, #0]
 800915c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	4413      	add	r3, r2
 8009162:	3334      	adds	r3, #52	; 0x34
 8009164:	460a      	mov	r2, r1
 8009166:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	4413      	add	r3, r2
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d006      	beq.n	8009182 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	3301      	adds	r3, #1
 8009178:	61fb      	str	r3, [r7, #28]
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	2b0f      	cmp	r3, #15
 800917e:	d9e9      	bls.n	8009154 <prvInitialiseNewTask+0x5c>
 8009180:	e000      	b.n	8009184 <prvInitialiseNewTask+0x8c>
		{
			break;
 8009182:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009186:	2200      	movs	r2, #0
 8009188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800918c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918e:	2b37      	cmp	r3, #55	; 0x37
 8009190:	d901      	bls.n	8009196 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009192:	2337      	movs	r3, #55	; 0x37
 8009194:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800919a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800919c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091a0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80091a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a4:	2200      	movs	r2, #0
 80091a6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80091a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091aa:	3304      	adds	r3, #4
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7ff f964 	bl	800847a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80091b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b4:	3318      	adds	r3, #24
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7ff f95f 	bl	800847a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80091bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80091c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80091cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091d0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80091d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d4:	2200      	movs	r2, #0
 80091d6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80091d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80091e0:	683a      	ldr	r2, [r7, #0]
 80091e2:	68f9      	ldr	r1, [r7, #12]
 80091e4:	69b8      	ldr	r0, [r7, #24]
 80091e6:	f001 fb35 	bl	800a854 <pxPortInitialiseStack>
 80091ea:	4602      	mov	r2, r0
 80091ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ee:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80091f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d002      	beq.n	80091fc <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80091f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091fc:	bf00      	nop
 80091fe:	3720      	adds	r7, #32
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800920c:	f001 fc0c 	bl	800aa28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009210:	4b2d      	ldr	r3, [pc, #180]	; (80092c8 <prvAddNewTaskToReadyList+0xc4>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	3301      	adds	r3, #1
 8009216:	4a2c      	ldr	r2, [pc, #176]	; (80092c8 <prvAddNewTaskToReadyList+0xc4>)
 8009218:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800921a:	4b2c      	ldr	r3, [pc, #176]	; (80092cc <prvAddNewTaskToReadyList+0xc8>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d109      	bne.n	8009236 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009222:	4a2a      	ldr	r2, [pc, #168]	; (80092cc <prvAddNewTaskToReadyList+0xc8>)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009228:	4b27      	ldr	r3, [pc, #156]	; (80092c8 <prvAddNewTaskToReadyList+0xc4>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d110      	bne.n	8009252 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009230:	f000 fdde 	bl	8009df0 <prvInitialiseTaskLists>
 8009234:	e00d      	b.n	8009252 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009236:	4b26      	ldr	r3, [pc, #152]	; (80092d0 <prvAddNewTaskToReadyList+0xcc>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d109      	bne.n	8009252 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800923e:	4b23      	ldr	r3, [pc, #140]	; (80092cc <prvAddNewTaskToReadyList+0xc8>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009248:	429a      	cmp	r2, r3
 800924a:	d802      	bhi.n	8009252 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800924c:	4a1f      	ldr	r2, [pc, #124]	; (80092cc <prvAddNewTaskToReadyList+0xc8>)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009252:	4b20      	ldr	r3, [pc, #128]	; (80092d4 <prvAddNewTaskToReadyList+0xd0>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	3301      	adds	r3, #1
 8009258:	4a1e      	ldr	r2, [pc, #120]	; (80092d4 <prvAddNewTaskToReadyList+0xd0>)
 800925a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800925c:	4b1d      	ldr	r3, [pc, #116]	; (80092d4 <prvAddNewTaskToReadyList+0xd0>)
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009268:	4b1b      	ldr	r3, [pc, #108]	; (80092d8 <prvAddNewTaskToReadyList+0xd4>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	429a      	cmp	r2, r3
 800926e:	d903      	bls.n	8009278 <prvAddNewTaskToReadyList+0x74>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009274:	4a18      	ldr	r2, [pc, #96]	; (80092d8 <prvAddNewTaskToReadyList+0xd4>)
 8009276:	6013      	str	r3, [r2, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927c:	4613      	mov	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4413      	add	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4a15      	ldr	r2, [pc, #84]	; (80092dc <prvAddNewTaskToReadyList+0xd8>)
 8009286:	441a      	add	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	3304      	adds	r3, #4
 800928c:	4619      	mov	r1, r3
 800928e:	4610      	mov	r0, r2
 8009290:	f7ff f8ff 	bl	8008492 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009294:	f001 fbf6 	bl	800aa84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009298:	4b0d      	ldr	r3, [pc, #52]	; (80092d0 <prvAddNewTaskToReadyList+0xcc>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d00e      	beq.n	80092be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80092a0:	4b0a      	ldr	r3, [pc, #40]	; (80092cc <prvAddNewTaskToReadyList+0xc8>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d207      	bcs.n	80092be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80092ae:	4b0c      	ldr	r3, [pc, #48]	; (80092e0 <prvAddNewTaskToReadyList+0xdc>)
 80092b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092b4:	601a      	str	r2, [r3, #0]
 80092b6:	f3bf 8f4f 	dsb	sy
 80092ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092be:	bf00      	nop
 80092c0:	3708      	adds	r7, #8
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	20000bc4 	.word	0x20000bc4
 80092cc:	200006f0 	.word	0x200006f0
 80092d0:	20000bd0 	.word	0x20000bd0
 80092d4:	20000be0 	.word	0x20000be0
 80092d8:	20000bcc 	.word	0x20000bcc
 80092dc:	200006f4 	.word	0x200006f4
 80092e0:	e000ed04 	.word	0xe000ed04

080092e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80092ec:	2300      	movs	r3, #0
 80092ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d016      	beq.n	8009324 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80092f6:	4b13      	ldr	r3, [pc, #76]	; (8009344 <vTaskDelay+0x60>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d009      	beq.n	8009312 <vTaskDelay+0x2e>
 80092fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009302:	f383 8811 	msr	BASEPRI, r3
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	60bb      	str	r3, [r7, #8]
 8009310:	e7fe      	b.n	8009310 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009312:	f000 f98b 	bl	800962c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009316:	2100      	movs	r1, #0
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 fec9 	bl	800a0b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800931e:	f000 f993 	bl	8009648 <xTaskResumeAll>
 8009322:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d107      	bne.n	800933a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800932a:	4b07      	ldr	r3, [pc, #28]	; (8009348 <vTaskDelay+0x64>)
 800932c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009330:	601a      	str	r2, [r3, #0]
 8009332:	f3bf 8f4f 	dsb	sy
 8009336:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800933a:	bf00      	nop
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	20000bec 	.word	0x20000bec
 8009348:	e000ed04 	.word	0xe000ed04

0800934c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009354:	f001 fb68 	bl	800aa28 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d102      	bne.n	8009364 <vTaskSuspend+0x18>
 800935e:	4b2f      	ldr	r3, [pc, #188]	; (800941c <vTaskSuspend+0xd0>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	e000      	b.n	8009366 <vTaskSuspend+0x1a>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	3304      	adds	r3, #4
 800936c:	4618      	mov	r0, r3
 800936e:	f7ff f8eb 	bl	8008548 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009376:	2b00      	cmp	r3, #0
 8009378:	d004      	beq.n	8009384 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	3318      	adds	r3, #24
 800937e:	4618      	mov	r0, r3
 8009380:	f7ff f8e2 	bl	8008548 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	3304      	adds	r3, #4
 8009388:	4619      	mov	r1, r3
 800938a:	4825      	ldr	r0, [pc, #148]	; (8009420 <vTaskSuspend+0xd4>)
 800938c:	f7ff f881 	bl	8008492 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009396:	b2db      	uxtb	r3, r3
 8009398:	2b01      	cmp	r3, #1
 800939a:	d103      	bne.n	80093a4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80093a4:	f001 fb6e 	bl	800aa84 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80093a8:	4b1e      	ldr	r3, [pc, #120]	; (8009424 <vTaskSuspend+0xd8>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d005      	beq.n	80093bc <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80093b0:	f001 fb3a 	bl	800aa28 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80093b4:	f000 fdb6 	bl	8009f24 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80093b8:	f001 fb64 	bl	800aa84 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80093bc:	4b17      	ldr	r3, [pc, #92]	; (800941c <vTaskSuspend+0xd0>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d126      	bne.n	8009414 <vTaskSuspend+0xc8>
		{
			if( xSchedulerRunning != pdFALSE )
 80093c6:	4b17      	ldr	r3, [pc, #92]	; (8009424 <vTaskSuspend+0xd8>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d016      	beq.n	80093fc <vTaskSuspend+0xb0>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80093ce:	4b16      	ldr	r3, [pc, #88]	; (8009428 <vTaskSuspend+0xdc>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d009      	beq.n	80093ea <vTaskSuspend+0x9e>
 80093d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093da:	f383 8811 	msr	BASEPRI, r3
 80093de:	f3bf 8f6f 	isb	sy
 80093e2:	f3bf 8f4f 	dsb	sy
 80093e6:	60bb      	str	r3, [r7, #8]
 80093e8:	e7fe      	b.n	80093e8 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 80093ea:	4b10      	ldr	r3, [pc, #64]	; (800942c <vTaskSuspend+0xe0>)
 80093ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093f0:	601a      	str	r2, [r3, #0]
 80093f2:	f3bf 8f4f 	dsb	sy
 80093f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093fa:	e00b      	b.n	8009414 <vTaskSuspend+0xc8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80093fc:	4b08      	ldr	r3, [pc, #32]	; (8009420 <vTaskSuspend+0xd4>)
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	4b0b      	ldr	r3, [pc, #44]	; (8009430 <vTaskSuspend+0xe4>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	429a      	cmp	r2, r3
 8009406:	d103      	bne.n	8009410 <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
 8009408:	4b04      	ldr	r3, [pc, #16]	; (800941c <vTaskSuspend+0xd0>)
 800940a:	2200      	movs	r2, #0
 800940c:	601a      	str	r2, [r3, #0]
	}
 800940e:	e001      	b.n	8009414 <vTaskSuspend+0xc8>
					vTaskSwitchContext();
 8009410:	f000 fa9c 	bl	800994c <vTaskSwitchContext>
	}
 8009414:	bf00      	nop
 8009416:	3710      	adds	r7, #16
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	200006f0 	.word	0x200006f0
 8009420:	20000bb0 	.word	0x20000bb0
 8009424:	20000bd0 	.word	0x20000bd0
 8009428:	20000bec 	.word	0x20000bec
 800942c:	e000ed04 	.word	0xe000ed04
 8009430:	20000bc4 	.word	0x20000bc4

08009434 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8009434:	b480      	push	{r7}
 8009436:	b087      	sub	sp, #28
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800943c:	2300      	movs	r3, #0
 800943e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d109      	bne.n	800945e <prvTaskIsTaskSuspended+0x2a>
 800944a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944e:	f383 8811 	msr	BASEPRI, r3
 8009452:	f3bf 8f6f 	isb	sy
 8009456:	f3bf 8f4f 	dsb	sy
 800945a:	60fb      	str	r3, [r7, #12]
 800945c:	e7fe      	b.n	800945c <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	695b      	ldr	r3, [r3, #20]
 8009462:	4a0f      	ldr	r2, [pc, #60]	; (80094a0 <prvTaskIsTaskSuspended+0x6c>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d101      	bne.n	800946c <prvTaskIsTaskSuspended+0x38>
 8009468:	2301      	movs	r3, #1
 800946a:	e000      	b.n	800946e <prvTaskIsTaskSuspended+0x3a>
 800946c:	2300      	movs	r3, #0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00f      	beq.n	8009492 <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009476:	4a0b      	ldr	r2, [pc, #44]	; (80094a4 <prvTaskIsTaskSuspended+0x70>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d00a      	beq.n	8009492 <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009480:	2b00      	cmp	r3, #0
 8009482:	d101      	bne.n	8009488 <prvTaskIsTaskSuspended+0x54>
 8009484:	2301      	movs	r3, #1
 8009486:	e000      	b.n	800948a <prvTaskIsTaskSuspended+0x56>
 8009488:	2300      	movs	r3, #0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d001      	beq.n	8009492 <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 800948e:	2301      	movs	r3, #1
 8009490:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009492:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009494:	4618      	mov	r0, r3
 8009496:	371c      	adds	r7, #28
 8009498:	46bd      	mov	sp, r7
 800949a:	bc80      	pop	{r7}
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	20000bb0 	.word	0x20000bb0
 80094a4:	20000b84 	.word	0x20000b84

080094a8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d109      	bne.n	80094ce <vTaskResume+0x26>
 80094ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094be:	f383 8811 	msr	BASEPRI, r3
 80094c2:	f3bf 8f6f 	isb	sy
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	60bb      	str	r3, [r7, #8]
 80094cc:	e7fe      	b.n	80094cc <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d03a      	beq.n	800954a <vTaskResume+0xa2>
 80094d4:	4b1f      	ldr	r3, [pc, #124]	; (8009554 <vTaskResume+0xac>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d035      	beq.n	800954a <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 80094de:	f001 faa3 	bl	800aa28 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f7ff ffa6 	bl	8009434 <prvTaskIsTaskSuspended>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d02b      	beq.n	8009546 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	3304      	adds	r3, #4
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7ff f828 	bl	8008548 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094fc:	4b16      	ldr	r3, [pc, #88]	; (8009558 <vTaskResume+0xb0>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	429a      	cmp	r2, r3
 8009502:	d903      	bls.n	800950c <vTaskResume+0x64>
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009508:	4a13      	ldr	r2, [pc, #76]	; (8009558 <vTaskResume+0xb0>)
 800950a:	6013      	str	r3, [r2, #0]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009510:	4613      	mov	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4413      	add	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	4a10      	ldr	r2, [pc, #64]	; (800955c <vTaskResume+0xb4>)
 800951a:	441a      	add	r2, r3
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	3304      	adds	r3, #4
 8009520:	4619      	mov	r1, r3
 8009522:	4610      	mov	r0, r2
 8009524:	f7fe ffb5 	bl	8008492 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800952c:	4b09      	ldr	r3, [pc, #36]	; (8009554 <vTaskResume+0xac>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009532:	429a      	cmp	r2, r3
 8009534:	d307      	bcc.n	8009546 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8009536:	4b0a      	ldr	r3, [pc, #40]	; (8009560 <vTaskResume+0xb8>)
 8009538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800953c:	601a      	str	r2, [r3, #0]
 800953e:	f3bf 8f4f 	dsb	sy
 8009542:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8009546:	f001 fa9d 	bl	800aa84 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800954a:	bf00      	nop
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	200006f0 	.word	0x200006f0
 8009558:	20000bcc 	.word	0x20000bcc
 800955c:	200006f4 	.word	0x200006f4
 8009560:	e000ed04 	.word	0xe000ed04

08009564 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b08a      	sub	sp, #40	; 0x28
 8009568:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800956a:	2300      	movs	r3, #0
 800956c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800956e:	2300      	movs	r3, #0
 8009570:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009572:	463a      	mov	r2, r7
 8009574:	1d39      	adds	r1, r7, #4
 8009576:	f107 0308 	add.w	r3, r7, #8
 800957a:	4618      	mov	r0, r3
 800957c:	f7fe fd26 	bl	8007fcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009580:	6839      	ldr	r1, [r7, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	68ba      	ldr	r2, [r7, #8]
 8009586:	9202      	str	r2, [sp, #8]
 8009588:	9301      	str	r3, [sp, #4]
 800958a:	2300      	movs	r3, #0
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	2300      	movs	r3, #0
 8009590:	460a      	mov	r2, r1
 8009592:	4920      	ldr	r1, [pc, #128]	; (8009614 <vTaskStartScheduler+0xb0>)
 8009594:	4820      	ldr	r0, [pc, #128]	; (8009618 <vTaskStartScheduler+0xb4>)
 8009596:	f7ff fd11 	bl	8008fbc <xTaskCreateStatic>
 800959a:	4602      	mov	r2, r0
 800959c:	4b1f      	ldr	r3, [pc, #124]	; (800961c <vTaskStartScheduler+0xb8>)
 800959e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80095a0:	4b1e      	ldr	r3, [pc, #120]	; (800961c <vTaskStartScheduler+0xb8>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d002      	beq.n	80095ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80095a8:	2301      	movs	r3, #1
 80095aa:	617b      	str	r3, [r7, #20]
 80095ac:	e001      	b.n	80095b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80095ae:	2300      	movs	r3, #0
 80095b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d102      	bne.n	80095be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80095b8:	f000 fdce 	bl	800a158 <xTimerCreateTimerTask>
 80095bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d115      	bne.n	80095f0 <vTaskStartScheduler+0x8c>
 80095c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c8:	f383 8811 	msr	BASEPRI, r3
 80095cc:	f3bf 8f6f 	isb	sy
 80095d0:	f3bf 8f4f 	dsb	sy
 80095d4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80095d6:	4b12      	ldr	r3, [pc, #72]	; (8009620 <vTaskStartScheduler+0xbc>)
 80095d8:	f04f 32ff 	mov.w	r2, #4294967295
 80095dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80095de:	4b11      	ldr	r3, [pc, #68]	; (8009624 <vTaskStartScheduler+0xc0>)
 80095e0:	2201      	movs	r2, #1
 80095e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80095e4:	4b10      	ldr	r3, [pc, #64]	; (8009628 <vTaskStartScheduler+0xc4>)
 80095e6:	2200      	movs	r2, #0
 80095e8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80095ea:	f001 f9ad 	bl	800a948 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80095ee:	e00d      	b.n	800960c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f6:	d109      	bne.n	800960c <vTaskStartScheduler+0xa8>
 80095f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fc:	f383 8811 	msr	BASEPRI, r3
 8009600:	f3bf 8f6f 	isb	sy
 8009604:	f3bf 8f4f 	dsb	sy
 8009608:	60fb      	str	r3, [r7, #12]
 800960a:	e7fe      	b.n	800960a <vTaskStartScheduler+0xa6>
}
 800960c:	bf00      	nop
 800960e:	3718      	adds	r7, #24
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	0800b2f8 	.word	0x0800b2f8
 8009618:	08009dbd 	.word	0x08009dbd
 800961c:	20000be8 	.word	0x20000be8
 8009620:	20000be4 	.word	0x20000be4
 8009624:	20000bd0 	.word	0x20000bd0
 8009628:	20000bc8 	.word	0x20000bc8

0800962c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800962c:	b480      	push	{r7}
 800962e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009630:	4b04      	ldr	r3, [pc, #16]	; (8009644 <vTaskSuspendAll+0x18>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	3301      	adds	r3, #1
 8009636:	4a03      	ldr	r2, [pc, #12]	; (8009644 <vTaskSuspendAll+0x18>)
 8009638:	6013      	str	r3, [r2, #0]
}
 800963a:	bf00      	nop
 800963c:	46bd      	mov	sp, r7
 800963e:	bc80      	pop	{r7}
 8009640:	4770      	bx	lr
 8009642:	bf00      	nop
 8009644:	20000bec 	.word	0x20000bec

08009648 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800964e:	2300      	movs	r3, #0
 8009650:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009652:	2300      	movs	r3, #0
 8009654:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009656:	4b41      	ldr	r3, [pc, #260]	; (800975c <xTaskResumeAll+0x114>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d109      	bne.n	8009672 <xTaskResumeAll+0x2a>
 800965e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009662:	f383 8811 	msr	BASEPRI, r3
 8009666:	f3bf 8f6f 	isb	sy
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	603b      	str	r3, [r7, #0]
 8009670:	e7fe      	b.n	8009670 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009672:	f001 f9d9 	bl	800aa28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009676:	4b39      	ldr	r3, [pc, #228]	; (800975c <xTaskResumeAll+0x114>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3b01      	subs	r3, #1
 800967c:	4a37      	ldr	r2, [pc, #220]	; (800975c <xTaskResumeAll+0x114>)
 800967e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009680:	4b36      	ldr	r3, [pc, #216]	; (800975c <xTaskResumeAll+0x114>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d162      	bne.n	800974e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009688:	4b35      	ldr	r3, [pc, #212]	; (8009760 <xTaskResumeAll+0x118>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d05e      	beq.n	800974e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009690:	e02f      	b.n	80096f2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009692:	4b34      	ldr	r3, [pc, #208]	; (8009764 <xTaskResumeAll+0x11c>)
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	3318      	adds	r3, #24
 800969e:	4618      	mov	r0, r3
 80096a0:	f7fe ff52 	bl	8008548 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	3304      	adds	r3, #4
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7fe ff4d 	bl	8008548 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096b2:	4b2d      	ldr	r3, [pc, #180]	; (8009768 <xTaskResumeAll+0x120>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d903      	bls.n	80096c2 <xTaskResumeAll+0x7a>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096be:	4a2a      	ldr	r2, [pc, #168]	; (8009768 <xTaskResumeAll+0x120>)
 80096c0:	6013      	str	r3, [r2, #0]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c6:	4613      	mov	r3, r2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	4413      	add	r3, r2
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	4a27      	ldr	r2, [pc, #156]	; (800976c <xTaskResumeAll+0x124>)
 80096d0:	441a      	add	r2, r3
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	3304      	adds	r3, #4
 80096d6:	4619      	mov	r1, r3
 80096d8:	4610      	mov	r0, r2
 80096da:	f7fe feda 	bl	8008492 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096e2:	4b23      	ldr	r3, [pc, #140]	; (8009770 <xTaskResumeAll+0x128>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d302      	bcc.n	80096f2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80096ec:	4b21      	ldr	r3, [pc, #132]	; (8009774 <xTaskResumeAll+0x12c>)
 80096ee:	2201      	movs	r2, #1
 80096f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096f2:	4b1c      	ldr	r3, [pc, #112]	; (8009764 <xTaskResumeAll+0x11c>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d1cb      	bne.n	8009692 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d001      	beq.n	8009704 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009700:	f000 fc10 	bl	8009f24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009704:	4b1c      	ldr	r3, [pc, #112]	; (8009778 <xTaskResumeAll+0x130>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d010      	beq.n	8009732 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009710:	f000 f856 	bl	80097c0 <xTaskIncrementTick>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d002      	beq.n	8009720 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800971a:	4b16      	ldr	r3, [pc, #88]	; (8009774 <xTaskResumeAll+0x12c>)
 800971c:	2201      	movs	r2, #1
 800971e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	3b01      	subs	r3, #1
 8009724:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d1f1      	bne.n	8009710 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800972c:	4b12      	ldr	r3, [pc, #72]	; (8009778 <xTaskResumeAll+0x130>)
 800972e:	2200      	movs	r2, #0
 8009730:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009732:	4b10      	ldr	r3, [pc, #64]	; (8009774 <xTaskResumeAll+0x12c>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d009      	beq.n	800974e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800973a:	2301      	movs	r3, #1
 800973c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800973e:	4b0f      	ldr	r3, [pc, #60]	; (800977c <xTaskResumeAll+0x134>)
 8009740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009744:	601a      	str	r2, [r3, #0]
 8009746:	f3bf 8f4f 	dsb	sy
 800974a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800974e:	f001 f999 	bl	800aa84 <vPortExitCritical>

	return xAlreadyYielded;
 8009752:	68bb      	ldr	r3, [r7, #8]
}
 8009754:	4618      	mov	r0, r3
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	20000bec 	.word	0x20000bec
 8009760:	20000bc4 	.word	0x20000bc4
 8009764:	20000b84 	.word	0x20000b84
 8009768:	20000bcc 	.word	0x20000bcc
 800976c:	200006f4 	.word	0x200006f4
 8009770:	200006f0 	.word	0x200006f0
 8009774:	20000bd8 	.word	0x20000bd8
 8009778:	20000bd4 	.word	0x20000bd4
 800977c:	e000ed04 	.word	0xe000ed04

08009780 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009786:	4b04      	ldr	r3, [pc, #16]	; (8009798 <xTaskGetTickCount+0x18>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800978c:	687b      	ldr	r3, [r7, #4]
}
 800978e:	4618      	mov	r0, r3
 8009790:	370c      	adds	r7, #12
 8009792:	46bd      	mov	sp, r7
 8009794:	bc80      	pop	{r7}
 8009796:	4770      	bx	lr
 8009798:	20000bc8 	.word	0x20000bc8

0800979c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097a2:	f001 f9fb 	bl	800ab9c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80097a6:	2300      	movs	r3, #0
 80097a8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80097aa:	4b04      	ldr	r3, [pc, #16]	; (80097bc <xTaskGetTickCountFromISR+0x20>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097b0:	683b      	ldr	r3, [r7, #0]
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	20000bc8 	.word	0x20000bc8

080097c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b086      	sub	sp, #24
 80097c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80097c6:	2300      	movs	r3, #0
 80097c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097ca:	4b55      	ldr	r3, [pc, #340]	; (8009920 <xTaskIncrementTick+0x160>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	f040 8093 	bne.w	80098fa <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80097d4:	4b53      	ldr	r3, [pc, #332]	; (8009924 <xTaskIncrementTick+0x164>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	3301      	adds	r3, #1
 80097da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80097dc:	4a51      	ldr	r2, [pc, #324]	; (8009924 <xTaskIncrementTick+0x164>)
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d11f      	bne.n	8009828 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80097e8:	4b4f      	ldr	r3, [pc, #316]	; (8009928 <xTaskIncrementTick+0x168>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d009      	beq.n	8009806 <xTaskIncrementTick+0x46>
 80097f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f6:	f383 8811 	msr	BASEPRI, r3
 80097fa:	f3bf 8f6f 	isb	sy
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	603b      	str	r3, [r7, #0]
 8009804:	e7fe      	b.n	8009804 <xTaskIncrementTick+0x44>
 8009806:	4b48      	ldr	r3, [pc, #288]	; (8009928 <xTaskIncrementTick+0x168>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	60fb      	str	r3, [r7, #12]
 800980c:	4b47      	ldr	r3, [pc, #284]	; (800992c <xTaskIncrementTick+0x16c>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a45      	ldr	r2, [pc, #276]	; (8009928 <xTaskIncrementTick+0x168>)
 8009812:	6013      	str	r3, [r2, #0]
 8009814:	4a45      	ldr	r2, [pc, #276]	; (800992c <xTaskIncrementTick+0x16c>)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6013      	str	r3, [r2, #0]
 800981a:	4b45      	ldr	r3, [pc, #276]	; (8009930 <xTaskIncrementTick+0x170>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	3301      	adds	r3, #1
 8009820:	4a43      	ldr	r2, [pc, #268]	; (8009930 <xTaskIncrementTick+0x170>)
 8009822:	6013      	str	r3, [r2, #0]
 8009824:	f000 fb7e 	bl	8009f24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009828:	4b42      	ldr	r3, [pc, #264]	; (8009934 <xTaskIncrementTick+0x174>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	429a      	cmp	r2, r3
 8009830:	d34e      	bcc.n	80098d0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009832:	4b3d      	ldr	r3, [pc, #244]	; (8009928 <xTaskIncrementTick+0x168>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d101      	bne.n	8009840 <xTaskIncrementTick+0x80>
 800983c:	2301      	movs	r3, #1
 800983e:	e000      	b.n	8009842 <xTaskIncrementTick+0x82>
 8009840:	2300      	movs	r3, #0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d004      	beq.n	8009850 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009846:	4b3b      	ldr	r3, [pc, #236]	; (8009934 <xTaskIncrementTick+0x174>)
 8009848:	f04f 32ff 	mov.w	r2, #4294967295
 800984c:	601a      	str	r2, [r3, #0]
					break;
 800984e:	e03f      	b.n	80098d0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009850:	4b35      	ldr	r3, [pc, #212]	; (8009928 <xTaskIncrementTick+0x168>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009860:	693a      	ldr	r2, [r7, #16]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	429a      	cmp	r2, r3
 8009866:	d203      	bcs.n	8009870 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009868:	4a32      	ldr	r2, [pc, #200]	; (8009934 <xTaskIncrementTick+0x174>)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6013      	str	r3, [r2, #0]
						break;
 800986e:	e02f      	b.n	80098d0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	3304      	adds	r3, #4
 8009874:	4618      	mov	r0, r3
 8009876:	f7fe fe67 	bl	8008548 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800987e:	2b00      	cmp	r3, #0
 8009880:	d004      	beq.n	800988c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	3318      	adds	r3, #24
 8009886:	4618      	mov	r0, r3
 8009888:	f7fe fe5e 	bl	8008548 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009890:	4b29      	ldr	r3, [pc, #164]	; (8009938 <xTaskIncrementTick+0x178>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	429a      	cmp	r2, r3
 8009896:	d903      	bls.n	80098a0 <xTaskIncrementTick+0xe0>
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989c:	4a26      	ldr	r2, [pc, #152]	; (8009938 <xTaskIncrementTick+0x178>)
 800989e:	6013      	str	r3, [r2, #0]
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a4:	4613      	mov	r3, r2
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	4413      	add	r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	4a23      	ldr	r2, [pc, #140]	; (800993c <xTaskIncrementTick+0x17c>)
 80098ae:	441a      	add	r2, r3
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	3304      	adds	r3, #4
 80098b4:	4619      	mov	r1, r3
 80098b6:	4610      	mov	r0, r2
 80098b8:	f7fe fdeb 	bl	8008492 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098c0:	4b1f      	ldr	r3, [pc, #124]	; (8009940 <xTaskIncrementTick+0x180>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d3b3      	bcc.n	8009832 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80098ca:	2301      	movs	r3, #1
 80098cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098ce:	e7b0      	b.n	8009832 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80098d0:	4b1b      	ldr	r3, [pc, #108]	; (8009940 <xTaskIncrementTick+0x180>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d6:	4919      	ldr	r1, [pc, #100]	; (800993c <xTaskIncrementTick+0x17c>)
 80098d8:	4613      	mov	r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	4413      	add	r3, r2
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	440b      	add	r3, r1
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d901      	bls.n	80098ec <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80098e8:	2301      	movs	r3, #1
 80098ea:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80098ec:	4b15      	ldr	r3, [pc, #84]	; (8009944 <xTaskIncrementTick+0x184>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d109      	bne.n	8009908 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 80098f4:	f7f7 fe00 	bl	80014f8 <vApplicationTickHook>
 80098f8:	e006      	b.n	8009908 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80098fa:	4b12      	ldr	r3, [pc, #72]	; (8009944 <xTaskIncrementTick+0x184>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	3301      	adds	r3, #1
 8009900:	4a10      	ldr	r2, [pc, #64]	; (8009944 <xTaskIncrementTick+0x184>)
 8009902:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8009904:	f7f7 fdf8 	bl	80014f8 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009908:	4b0f      	ldr	r3, [pc, #60]	; (8009948 <xTaskIncrementTick+0x188>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d001      	beq.n	8009914 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 8009910:	2301      	movs	r3, #1
 8009912:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009914:	697b      	ldr	r3, [r7, #20]
}
 8009916:	4618      	mov	r0, r3
 8009918:	3718      	adds	r7, #24
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	20000bec 	.word	0x20000bec
 8009924:	20000bc8 	.word	0x20000bc8
 8009928:	20000b7c 	.word	0x20000b7c
 800992c:	20000b80 	.word	0x20000b80
 8009930:	20000bdc 	.word	0x20000bdc
 8009934:	20000be4 	.word	0x20000be4
 8009938:	20000bcc 	.word	0x20000bcc
 800993c:	200006f4 	.word	0x200006f4
 8009940:	200006f0 	.word	0x200006f0
 8009944:	20000bd4 	.word	0x20000bd4
 8009948:	20000bd8 	.word	0x20000bd8

0800994c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009952:	4b2f      	ldr	r3, [pc, #188]	; (8009a10 <vTaskSwitchContext+0xc4>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d003      	beq.n	8009962 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800995a:	4b2e      	ldr	r3, [pc, #184]	; (8009a14 <vTaskSwitchContext+0xc8>)
 800995c:	2201      	movs	r2, #1
 800995e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009960:	e051      	b.n	8009a06 <vTaskSwitchContext+0xba>
		xYieldPending = pdFALSE;
 8009962:	4b2c      	ldr	r3, [pc, #176]	; (8009a14 <vTaskSwitchContext+0xc8>)
 8009964:	2200      	movs	r2, #0
 8009966:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009968:	4b2b      	ldr	r3, [pc, #172]	; (8009a18 <vTaskSwitchContext+0xcc>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	4b2a      	ldr	r3, [pc, #168]	; (8009a18 <vTaskSwitchContext+0xcc>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009974:	429a      	cmp	r2, r3
 8009976:	d808      	bhi.n	800998a <vTaskSwitchContext+0x3e>
 8009978:	4b27      	ldr	r3, [pc, #156]	; (8009a18 <vTaskSwitchContext+0xcc>)
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	4b26      	ldr	r3, [pc, #152]	; (8009a18 <vTaskSwitchContext+0xcc>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	3334      	adds	r3, #52	; 0x34
 8009982:	4619      	mov	r1, r3
 8009984:	4610      	mov	r0, r2
 8009986:	f7f7 fdbd 	bl	8001504 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800998a:	4b24      	ldr	r3, [pc, #144]	; (8009a1c <vTaskSwitchContext+0xd0>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	60fb      	str	r3, [r7, #12]
 8009990:	e00f      	b.n	80099b2 <vTaskSwitchContext+0x66>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d109      	bne.n	80099ac <vTaskSwitchContext+0x60>
 8009998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999c:	f383 8811 	msr	BASEPRI, r3
 80099a0:	f3bf 8f6f 	isb	sy
 80099a4:	f3bf 8f4f 	dsb	sy
 80099a8:	607b      	str	r3, [r7, #4]
 80099aa:	e7fe      	b.n	80099aa <vTaskSwitchContext+0x5e>
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	3b01      	subs	r3, #1
 80099b0:	60fb      	str	r3, [r7, #12]
 80099b2:	491b      	ldr	r1, [pc, #108]	; (8009a20 <vTaskSwitchContext+0xd4>)
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	4613      	mov	r3, r2
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4413      	add	r3, r2
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	440b      	add	r3, r1
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d0e5      	beq.n	8009992 <vTaskSwitchContext+0x46>
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	4613      	mov	r3, r2
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	4413      	add	r3, r2
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	4a13      	ldr	r2, [pc, #76]	; (8009a20 <vTaskSwitchContext+0xd4>)
 80099d2:	4413      	add	r3, r2
 80099d4:	60bb      	str	r3, [r7, #8]
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	685a      	ldr	r2, [r3, #4]
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	605a      	str	r2, [r3, #4]
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	685a      	ldr	r2, [r3, #4]
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	3308      	adds	r3, #8
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d104      	bne.n	80099f6 <vTaskSwitchContext+0xaa>
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	685a      	ldr	r2, [r3, #4]
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	605a      	str	r2, [r3, #4]
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	4a06      	ldr	r2, [pc, #24]	; (8009a18 <vTaskSwitchContext+0xcc>)
 80099fe:	6013      	str	r3, [r2, #0]
 8009a00:	4a06      	ldr	r2, [pc, #24]	; (8009a1c <vTaskSwitchContext+0xd0>)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6013      	str	r3, [r2, #0]
}
 8009a06:	bf00      	nop
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	20000bec 	.word	0x20000bec
 8009a14:	20000bd8 	.word	0x20000bd8
 8009a18:	200006f0 	.word	0x200006f0
 8009a1c:	20000bcc 	.word	0x20000bcc
 8009a20:	200006f4 	.word	0x200006f4

08009a24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d109      	bne.n	8009a48 <vTaskPlaceOnEventList+0x24>
 8009a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a38:	f383 8811 	msr	BASEPRI, r3
 8009a3c:	f3bf 8f6f 	isb	sy
 8009a40:	f3bf 8f4f 	dsb	sy
 8009a44:	60fb      	str	r3, [r7, #12]
 8009a46:	e7fe      	b.n	8009a46 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a48:	4b07      	ldr	r3, [pc, #28]	; (8009a68 <vTaskPlaceOnEventList+0x44>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	3318      	adds	r3, #24
 8009a4e:	4619      	mov	r1, r3
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f7fe fd41 	bl	80084d8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a56:	2101      	movs	r1, #1
 8009a58:	6838      	ldr	r0, [r7, #0]
 8009a5a:	f000 fb29 	bl	800a0b0 <prvAddCurrentTaskToDelayedList>
}
 8009a5e:	bf00      	nop
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	200006f0 	.word	0x200006f0

08009a6c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d109      	bne.n	8009a92 <vTaskPlaceOnUnorderedEventList+0x26>
 8009a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	617b      	str	r3, [r7, #20]
 8009a90:	e7fe      	b.n	8009a90 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8009a92:	4b11      	ldr	r3, [pc, #68]	; (8009ad8 <vTaskPlaceOnUnorderedEventList+0x6c>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d109      	bne.n	8009aae <vTaskPlaceOnUnorderedEventList+0x42>
 8009a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9e:	f383 8811 	msr	BASEPRI, r3
 8009aa2:	f3bf 8f6f 	isb	sy
 8009aa6:	f3bf 8f4f 	dsb	sy
 8009aaa:	613b      	str	r3, [r7, #16]
 8009aac:	e7fe      	b.n	8009aac <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009aae:	4b0b      	ldr	r3, [pc, #44]	; (8009adc <vTaskPlaceOnUnorderedEventList+0x70>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	68ba      	ldr	r2, [r7, #8]
 8009ab4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009ab8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009aba:	4b08      	ldr	r3, [pc, #32]	; (8009adc <vTaskPlaceOnUnorderedEventList+0x70>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	3318      	adds	r3, #24
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	68f8      	ldr	r0, [r7, #12]
 8009ac4:	f7fe fce5 	bl	8008492 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009ac8:	2101      	movs	r1, #1
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 faf0 	bl	800a0b0 <prvAddCurrentTaskToDelayedList>
}
 8009ad0:	bf00      	nop
 8009ad2:	3718      	adds	r7, #24
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	20000bec 	.word	0x20000bec
 8009adc:	200006f0 	.word	0x200006f0

08009ae0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b086      	sub	sp, #24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d109      	bne.n	8009b06 <vTaskPlaceOnEventListRestricted+0x26>
 8009af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af6:	f383 8811 	msr	BASEPRI, r3
 8009afa:	f3bf 8f6f 	isb	sy
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	617b      	str	r3, [r7, #20]
 8009b04:	e7fe      	b.n	8009b04 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b06:	4b0a      	ldr	r3, [pc, #40]	; (8009b30 <vTaskPlaceOnEventListRestricted+0x50>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	3318      	adds	r3, #24
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f7fe fcbf 	bl	8008492 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d002      	beq.n	8009b20 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8009b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b1e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b20:	6879      	ldr	r1, [r7, #4]
 8009b22:	68b8      	ldr	r0, [r7, #8]
 8009b24:	f000 fac4 	bl	800a0b0 <prvAddCurrentTaskToDelayedList>
	}
 8009b28:	bf00      	nop
 8009b2a:	3718      	adds	r7, #24
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	200006f0 	.word	0x200006f0

08009b34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b086      	sub	sp, #24
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d109      	bne.n	8009b5e <xTaskRemoveFromEventList+0x2a>
 8009b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4e:	f383 8811 	msr	BASEPRI, r3
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	60fb      	str	r3, [r7, #12]
 8009b5c:	e7fe      	b.n	8009b5c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	3318      	adds	r3, #24
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7fe fcf0 	bl	8008548 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b68:	4b1d      	ldr	r3, [pc, #116]	; (8009be0 <xTaskRemoveFromEventList+0xac>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d11d      	bne.n	8009bac <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	3304      	adds	r3, #4
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7fe fce7 	bl	8008548 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7e:	4b19      	ldr	r3, [pc, #100]	; (8009be4 <xTaskRemoveFromEventList+0xb0>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d903      	bls.n	8009b8e <xTaskRemoveFromEventList+0x5a>
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b8a:	4a16      	ldr	r2, [pc, #88]	; (8009be4 <xTaskRemoveFromEventList+0xb0>)
 8009b8c:	6013      	str	r3, [r2, #0]
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b92:	4613      	mov	r3, r2
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	4413      	add	r3, r2
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	4a13      	ldr	r2, [pc, #76]	; (8009be8 <xTaskRemoveFromEventList+0xb4>)
 8009b9c:	441a      	add	r2, r3
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	3304      	adds	r3, #4
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	4610      	mov	r0, r2
 8009ba6:	f7fe fc74 	bl	8008492 <vListInsertEnd>
 8009baa:	e005      	b.n	8009bb8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	3318      	adds	r3, #24
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	480e      	ldr	r0, [pc, #56]	; (8009bec <xTaskRemoveFromEventList+0xb8>)
 8009bb4:	f7fe fc6d 	bl	8008492 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bbc:	4b0c      	ldr	r3, [pc, #48]	; (8009bf0 <xTaskRemoveFromEventList+0xbc>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d905      	bls.n	8009bd2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009bca:	4b0a      	ldr	r3, [pc, #40]	; (8009bf4 <xTaskRemoveFromEventList+0xc0>)
 8009bcc:	2201      	movs	r2, #1
 8009bce:	601a      	str	r2, [r3, #0]
 8009bd0:	e001      	b.n	8009bd6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009bd6:	697b      	ldr	r3, [r7, #20]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3718      	adds	r7, #24
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	20000bec 	.word	0x20000bec
 8009be4:	20000bcc 	.word	0x20000bcc
 8009be8:	200006f4 	.word	0x200006f4
 8009bec:	20000b84 	.word	0x20000b84
 8009bf0:	200006f0 	.word	0x200006f0
 8009bf4:	20000bd8 	.word	0x20000bd8

08009bf8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b086      	sub	sp, #24
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009c02:	4b28      	ldr	r3, [pc, #160]	; (8009ca4 <vTaskRemoveFromUnorderedEventList+0xac>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d109      	bne.n	8009c1e <vTaskRemoveFromUnorderedEventList+0x26>
 8009c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0e:	f383 8811 	msr	BASEPRI, r3
 8009c12:	f3bf 8f6f 	isb	sy
 8009c16:	f3bf 8f4f 	dsb	sy
 8009c1a:	613b      	str	r3, [r7, #16]
 8009c1c:	e7fe      	b.n	8009c1c <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d109      	bne.n	8009c48 <vTaskRemoveFromUnorderedEventList+0x50>
 8009c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c38:	f383 8811 	msr	BASEPRI, r3
 8009c3c:	f3bf 8f6f 	isb	sy
 8009c40:	f3bf 8f4f 	dsb	sy
 8009c44:	60fb      	str	r3, [r7, #12]
 8009c46:	e7fe      	b.n	8009c46 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7fe fc7d 	bl	8008548 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	3304      	adds	r3, #4
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7fe fc78 	bl	8008548 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c5c:	4b12      	ldr	r3, [pc, #72]	; (8009ca8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d903      	bls.n	8009c6c <vTaskRemoveFromUnorderedEventList+0x74>
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c68:	4a0f      	ldr	r2, [pc, #60]	; (8009ca8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8009c6a:	6013      	str	r3, [r2, #0]
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c70:	4613      	mov	r3, r2
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	4413      	add	r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	4a0c      	ldr	r2, [pc, #48]	; (8009cac <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009c7a:	441a      	add	r2, r3
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	3304      	adds	r3, #4
 8009c80:	4619      	mov	r1, r3
 8009c82:	4610      	mov	r0, r2
 8009c84:	f7fe fc05 	bl	8008492 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c8c:	4b08      	ldr	r3, [pc, #32]	; (8009cb0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d902      	bls.n	8009c9c <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009c96:	4b07      	ldr	r3, [pc, #28]	; (8009cb4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8009c98:	2201      	movs	r2, #1
 8009c9a:	601a      	str	r2, [r3, #0]
	}
}
 8009c9c:	bf00      	nop
 8009c9e:	3718      	adds	r7, #24
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	20000bec 	.word	0x20000bec
 8009ca8:	20000bcc 	.word	0x20000bcc
 8009cac:	200006f4 	.word	0x200006f4
 8009cb0:	200006f0 	.word	0x200006f0
 8009cb4:	20000bd8 	.word	0x20000bd8

08009cb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009cc0:	4b06      	ldr	r3, [pc, #24]	; (8009cdc <vTaskInternalSetTimeOutState+0x24>)
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009cc8:	4b05      	ldr	r3, [pc, #20]	; (8009ce0 <vTaskInternalSetTimeOutState+0x28>)
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	605a      	str	r2, [r3, #4]
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bc80      	pop	{r7}
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	20000bdc 	.word	0x20000bdc
 8009ce0:	20000bc8 	.word	0x20000bc8

08009ce4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b088      	sub	sp, #32
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d109      	bne.n	8009d08 <xTaskCheckForTimeOut+0x24>
 8009cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf8:	f383 8811 	msr	BASEPRI, r3
 8009cfc:	f3bf 8f6f 	isb	sy
 8009d00:	f3bf 8f4f 	dsb	sy
 8009d04:	613b      	str	r3, [r7, #16]
 8009d06:	e7fe      	b.n	8009d06 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d109      	bne.n	8009d22 <xTaskCheckForTimeOut+0x3e>
 8009d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	60fb      	str	r3, [r7, #12]
 8009d20:	e7fe      	b.n	8009d20 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009d22:	f000 fe81 	bl	800aa28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009d26:	4b1d      	ldr	r3, [pc, #116]	; (8009d9c <xTaskCheckForTimeOut+0xb8>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	69ba      	ldr	r2, [r7, #24]
 8009d32:	1ad3      	subs	r3, r2, r3
 8009d34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d3e:	d102      	bne.n	8009d46 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d40:	2300      	movs	r3, #0
 8009d42:	61fb      	str	r3, [r7, #28]
 8009d44:	e023      	b.n	8009d8e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	4b15      	ldr	r3, [pc, #84]	; (8009da0 <xTaskCheckForTimeOut+0xbc>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d007      	beq.n	8009d62 <xTaskCheckForTimeOut+0x7e>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	69ba      	ldr	r2, [r7, #24]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d302      	bcc.n	8009d62 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	61fb      	str	r3, [r7, #28]
 8009d60:	e015      	b.n	8009d8e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	697a      	ldr	r2, [r7, #20]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d20b      	bcs.n	8009d84 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	1ad2      	subs	r2, r2, r3
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f7ff ff9d 	bl	8009cb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	61fb      	str	r3, [r7, #28]
 8009d82:	e004      	b.n	8009d8e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	2200      	movs	r2, #0
 8009d88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d8e:	f000 fe79 	bl	800aa84 <vPortExitCritical>

	return xReturn;
 8009d92:	69fb      	ldr	r3, [r7, #28]
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3720      	adds	r7, #32
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	20000bc8 	.word	0x20000bc8
 8009da0:	20000bdc 	.word	0x20000bdc

08009da4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009da4:	b480      	push	{r7}
 8009da6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009da8:	4b03      	ldr	r3, [pc, #12]	; (8009db8 <vTaskMissedYield+0x14>)
 8009daa:	2201      	movs	r2, #1
 8009dac:	601a      	str	r2, [r3, #0]
}
 8009dae:	bf00      	nop
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bc80      	pop	{r7}
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	20000bd8 	.word	0x20000bd8

08009dbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009dc4:	f000 f854 	bl	8009e70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009dc8:	4b07      	ldr	r3, [pc, #28]	; (8009de8 <prvIdleTask+0x2c>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d907      	bls.n	8009de0 <prvIdleTask+0x24>
			{
				taskYIELD();
 8009dd0:	4b06      	ldr	r3, [pc, #24]	; (8009dec <prvIdleTask+0x30>)
 8009dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dd6:	601a      	str	r2, [r3, #0]
 8009dd8:	f3bf 8f4f 	dsb	sy
 8009ddc:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8009de0:	f7f7 fb84 	bl	80014ec <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009de4:	e7ee      	b.n	8009dc4 <prvIdleTask+0x8>
 8009de6:	bf00      	nop
 8009de8:	200006f4 	.word	0x200006f4
 8009dec:	e000ed04 	.word	0xe000ed04

08009df0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009df6:	2300      	movs	r3, #0
 8009df8:	607b      	str	r3, [r7, #4]
 8009dfa:	e00c      	b.n	8009e16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	4613      	mov	r3, r2
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	4413      	add	r3, r2
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	4a12      	ldr	r2, [pc, #72]	; (8009e50 <prvInitialiseTaskLists+0x60>)
 8009e08:	4413      	add	r3, r2
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fe fb16 	bl	800843c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	3301      	adds	r3, #1
 8009e14:	607b      	str	r3, [r7, #4]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2b37      	cmp	r3, #55	; 0x37
 8009e1a:	d9ef      	bls.n	8009dfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e1c:	480d      	ldr	r0, [pc, #52]	; (8009e54 <prvInitialiseTaskLists+0x64>)
 8009e1e:	f7fe fb0d 	bl	800843c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e22:	480d      	ldr	r0, [pc, #52]	; (8009e58 <prvInitialiseTaskLists+0x68>)
 8009e24:	f7fe fb0a 	bl	800843c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e28:	480c      	ldr	r0, [pc, #48]	; (8009e5c <prvInitialiseTaskLists+0x6c>)
 8009e2a:	f7fe fb07 	bl	800843c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e2e:	480c      	ldr	r0, [pc, #48]	; (8009e60 <prvInitialiseTaskLists+0x70>)
 8009e30:	f7fe fb04 	bl	800843c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e34:	480b      	ldr	r0, [pc, #44]	; (8009e64 <prvInitialiseTaskLists+0x74>)
 8009e36:	f7fe fb01 	bl	800843c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e3a:	4b0b      	ldr	r3, [pc, #44]	; (8009e68 <prvInitialiseTaskLists+0x78>)
 8009e3c:	4a05      	ldr	r2, [pc, #20]	; (8009e54 <prvInitialiseTaskLists+0x64>)
 8009e3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e40:	4b0a      	ldr	r3, [pc, #40]	; (8009e6c <prvInitialiseTaskLists+0x7c>)
 8009e42:	4a05      	ldr	r2, [pc, #20]	; (8009e58 <prvInitialiseTaskLists+0x68>)
 8009e44:	601a      	str	r2, [r3, #0]
}
 8009e46:	bf00      	nop
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	200006f4 	.word	0x200006f4
 8009e54:	20000b54 	.word	0x20000b54
 8009e58:	20000b68 	.word	0x20000b68
 8009e5c:	20000b84 	.word	0x20000b84
 8009e60:	20000b98 	.word	0x20000b98
 8009e64:	20000bb0 	.word	0x20000bb0
 8009e68:	20000b7c 	.word	0x20000b7c
 8009e6c:	20000b80 	.word	0x20000b80

08009e70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e76:	e019      	b.n	8009eac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e78:	f000 fdd6 	bl	800aa28 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009e7c:	4b0f      	ldr	r3, [pc, #60]	; (8009ebc <prvCheckTasksWaitingTermination+0x4c>)
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	3304      	adds	r3, #4
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7fe fb5d 	bl	8008548 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e8e:	4b0c      	ldr	r3, [pc, #48]	; (8009ec0 <prvCheckTasksWaitingTermination+0x50>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	3b01      	subs	r3, #1
 8009e94:	4a0a      	ldr	r2, [pc, #40]	; (8009ec0 <prvCheckTasksWaitingTermination+0x50>)
 8009e96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e98:	4b0a      	ldr	r3, [pc, #40]	; (8009ec4 <prvCheckTasksWaitingTermination+0x54>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	4a09      	ldr	r2, [pc, #36]	; (8009ec4 <prvCheckTasksWaitingTermination+0x54>)
 8009ea0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ea2:	f000 fdef 	bl	800aa84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f80e 	bl	8009ec8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009eac:	4b05      	ldr	r3, [pc, #20]	; (8009ec4 <prvCheckTasksWaitingTermination+0x54>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d1e1      	bne.n	8009e78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009eb4:	bf00      	nop
 8009eb6:	3708      	adds	r7, #8
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	20000b98 	.word	0x20000b98
 8009ec0:	20000bc4 	.word	0x20000bc4
 8009ec4:	20000bac 	.word	0x20000bac

08009ec8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d108      	bne.n	8009eec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f000 ff5e 	bl	800ada0 <vPortFree>
				vPortFree( pxTCB );
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 ff5b 	bl	800ada0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009eea:	e017      	b.n	8009f1c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d103      	bne.n	8009efe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 ff52 	bl	800ada0 <vPortFree>
	}
 8009efc:	e00e      	b.n	8009f1c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	d009      	beq.n	8009f1c <prvDeleteTCB+0x54>
 8009f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0c:	f383 8811 	msr	BASEPRI, r3
 8009f10:	f3bf 8f6f 	isb	sy
 8009f14:	f3bf 8f4f 	dsb	sy
 8009f18:	60fb      	str	r3, [r7, #12]
 8009f1a:	e7fe      	b.n	8009f1a <prvDeleteTCB+0x52>
	}
 8009f1c:	bf00      	nop
 8009f1e:	3710      	adds	r7, #16
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f2a:	4b0e      	ldr	r3, [pc, #56]	; (8009f64 <prvResetNextTaskUnblockTime+0x40>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d101      	bne.n	8009f38 <prvResetNextTaskUnblockTime+0x14>
 8009f34:	2301      	movs	r3, #1
 8009f36:	e000      	b.n	8009f3a <prvResetNextTaskUnblockTime+0x16>
 8009f38:	2300      	movs	r3, #0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d004      	beq.n	8009f48 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f3e:	4b0a      	ldr	r3, [pc, #40]	; (8009f68 <prvResetNextTaskUnblockTime+0x44>)
 8009f40:	f04f 32ff 	mov.w	r2, #4294967295
 8009f44:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f46:	e008      	b.n	8009f5a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009f48:	4b06      	ldr	r3, [pc, #24]	; (8009f64 <prvResetNextTaskUnblockTime+0x40>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	4a04      	ldr	r2, [pc, #16]	; (8009f68 <prvResetNextTaskUnblockTime+0x44>)
 8009f58:	6013      	str	r3, [r2, #0]
}
 8009f5a:	bf00      	nop
 8009f5c:	370c      	adds	r7, #12
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bc80      	pop	{r7}
 8009f62:	4770      	bx	lr
 8009f64:	20000b7c 	.word	0x20000b7c
 8009f68:	20000be4 	.word	0x20000be4

08009f6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f72:	4b0b      	ldr	r3, [pc, #44]	; (8009fa0 <xTaskGetSchedulerState+0x34>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d102      	bne.n	8009f80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	607b      	str	r3, [r7, #4]
 8009f7e:	e008      	b.n	8009f92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f80:	4b08      	ldr	r3, [pc, #32]	; (8009fa4 <xTaskGetSchedulerState+0x38>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d102      	bne.n	8009f8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f88:	2302      	movs	r3, #2
 8009f8a:	607b      	str	r3, [r7, #4]
 8009f8c:	e001      	b.n	8009f92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f92:	687b      	ldr	r3, [r7, #4]
	}
 8009f94:	4618      	mov	r0, r3
 8009f96:	370c      	adds	r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bc80      	pop	{r7}
 8009f9c:	4770      	bx	lr
 8009f9e:	bf00      	nop
 8009fa0:	20000bd0 	.word	0x20000bd0
 8009fa4:	20000bec 	.word	0x20000bec

08009fa8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b086      	sub	sp, #24
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d054      	beq.n	800a068 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009fbe:	4b2d      	ldr	r3, [pc, #180]	; (800a074 <xTaskPriorityDisinherit+0xcc>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	693a      	ldr	r2, [r7, #16]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d009      	beq.n	8009fdc <xTaskPriorityDisinherit+0x34>
 8009fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fcc:	f383 8811 	msr	BASEPRI, r3
 8009fd0:	f3bf 8f6f 	isb	sy
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	60fb      	str	r3, [r7, #12]
 8009fda:	e7fe      	b.n	8009fda <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d109      	bne.n	8009ff8 <xTaskPriorityDisinherit+0x50>
 8009fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe8:	f383 8811 	msr	BASEPRI, r3
 8009fec:	f3bf 8f6f 	isb	sy
 8009ff0:	f3bf 8f4f 	dsb	sy
 8009ff4:	60bb      	str	r3, [r7, #8]
 8009ff6:	e7fe      	b.n	8009ff6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ffc:	1e5a      	subs	r2, r3, #1
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d02c      	beq.n	800a068 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a012:	2b00      	cmp	r3, #0
 800a014:	d128      	bne.n	800a068 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	3304      	adds	r3, #4
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7fe fa94 	bl	8008548 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a038:	4b0f      	ldr	r3, [pc, #60]	; (800a078 <xTaskPriorityDisinherit+0xd0>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d903      	bls.n	800a048 <xTaskPriorityDisinherit+0xa0>
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a044:	4a0c      	ldr	r2, [pc, #48]	; (800a078 <xTaskPriorityDisinherit+0xd0>)
 800a046:	6013      	str	r3, [r2, #0]
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a04c:	4613      	mov	r3, r2
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	4413      	add	r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	4a09      	ldr	r2, [pc, #36]	; (800a07c <xTaskPriorityDisinherit+0xd4>)
 800a056:	441a      	add	r2, r3
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	3304      	adds	r3, #4
 800a05c:	4619      	mov	r1, r3
 800a05e:	4610      	mov	r0, r2
 800a060:	f7fe fa17 	bl	8008492 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a064:	2301      	movs	r3, #1
 800a066:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a068:	697b      	ldr	r3, [r7, #20]
	}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3718      	adds	r7, #24
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	200006f0 	.word	0x200006f0
 800a078:	20000bcc 	.word	0x20000bcc
 800a07c:	200006f4 	.word	0x200006f4

0800a080 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800a086:	4b09      	ldr	r3, [pc, #36]	; (800a0ac <uxTaskResetEventItemValue+0x2c>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	699b      	ldr	r3, [r3, #24]
 800a08c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a08e:	4b07      	ldr	r3, [pc, #28]	; (800a0ac <uxTaskResetEventItemValue+0x2c>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a094:	4b05      	ldr	r3, [pc, #20]	; (800a0ac <uxTaskResetEventItemValue+0x2c>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800a09c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800a09e:	687b      	ldr	r3, [r7, #4]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bc80      	pop	{r7}
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	200006f0 	.word	0x200006f0

0800a0b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a0ba:	4b21      	ldr	r3, [pc, #132]	; (800a140 <prvAddCurrentTaskToDelayedList+0x90>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0c0:	4b20      	ldr	r3, [pc, #128]	; (800a144 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	3304      	adds	r3, #4
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7fe fa3e 	bl	8008548 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d2:	d10a      	bne.n	800a0ea <prvAddCurrentTaskToDelayedList+0x3a>
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d007      	beq.n	800a0ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0da:	4b1a      	ldr	r3, [pc, #104]	; (800a144 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	3304      	adds	r3, #4
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	4819      	ldr	r0, [pc, #100]	; (800a148 <prvAddCurrentTaskToDelayedList+0x98>)
 800a0e4:	f7fe f9d5 	bl	8008492 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a0e8:	e026      	b.n	800a138 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a0ea:	68fa      	ldr	r2, [r7, #12]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a0f2:	4b14      	ldr	r3, [pc, #80]	; (800a144 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68ba      	ldr	r2, [r7, #8]
 800a0f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a0fa:	68ba      	ldr	r2, [r7, #8]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d209      	bcs.n	800a116 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a102:	4b12      	ldr	r3, [pc, #72]	; (800a14c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	4b0f      	ldr	r3, [pc, #60]	; (800a144 <prvAddCurrentTaskToDelayedList+0x94>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	3304      	adds	r3, #4
 800a10c:	4619      	mov	r1, r3
 800a10e:	4610      	mov	r0, r2
 800a110:	f7fe f9e2 	bl	80084d8 <vListInsert>
}
 800a114:	e010      	b.n	800a138 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a116:	4b0e      	ldr	r3, [pc, #56]	; (800a150 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	4b0a      	ldr	r3, [pc, #40]	; (800a144 <prvAddCurrentTaskToDelayedList+0x94>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	3304      	adds	r3, #4
 800a120:	4619      	mov	r1, r3
 800a122:	4610      	mov	r0, r2
 800a124:	f7fe f9d8 	bl	80084d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a128:	4b0a      	ldr	r3, [pc, #40]	; (800a154 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	68ba      	ldr	r2, [r7, #8]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d202      	bcs.n	800a138 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a132:	4a08      	ldr	r2, [pc, #32]	; (800a154 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	6013      	str	r3, [r2, #0]
}
 800a138:	bf00      	nop
 800a13a:	3710      	adds	r7, #16
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	20000bc8 	.word	0x20000bc8
 800a144:	200006f0 	.word	0x200006f0
 800a148:	20000bb0 	.word	0x20000bb0
 800a14c:	20000b80 	.word	0x20000b80
 800a150:	20000b7c 	.word	0x20000b7c
 800a154:	20000be4 	.word	0x20000be4

0800a158 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b08a      	sub	sp, #40	; 0x28
 800a15c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a15e:	2300      	movs	r3, #0
 800a160:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a162:	f000 fb17 	bl	800a794 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a166:	4b1c      	ldr	r3, [pc, #112]	; (800a1d8 <xTimerCreateTimerTask+0x80>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d021      	beq.n	800a1b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a16e:	2300      	movs	r3, #0
 800a170:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a172:	2300      	movs	r3, #0
 800a174:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a176:	1d3a      	adds	r2, r7, #4
 800a178:	f107 0108 	add.w	r1, r7, #8
 800a17c:	f107 030c 	add.w	r3, r7, #12
 800a180:	4618      	mov	r0, r3
 800a182:	f7fd ff3b 	bl	8007ffc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a186:	6879      	ldr	r1, [r7, #4]
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	9202      	str	r2, [sp, #8]
 800a18e:	9301      	str	r3, [sp, #4]
 800a190:	2302      	movs	r3, #2
 800a192:	9300      	str	r3, [sp, #0]
 800a194:	2300      	movs	r3, #0
 800a196:	460a      	mov	r2, r1
 800a198:	4910      	ldr	r1, [pc, #64]	; (800a1dc <xTimerCreateTimerTask+0x84>)
 800a19a:	4811      	ldr	r0, [pc, #68]	; (800a1e0 <xTimerCreateTimerTask+0x88>)
 800a19c:	f7fe ff0e 	bl	8008fbc <xTaskCreateStatic>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	4b10      	ldr	r3, [pc, #64]	; (800a1e4 <xTimerCreateTimerTask+0x8c>)
 800a1a4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a1a6:	4b0f      	ldr	r3, [pc, #60]	; (800a1e4 <xTimerCreateTimerTask+0x8c>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d001      	beq.n	800a1b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d109      	bne.n	800a1cc <xTimerCreateTimerTask+0x74>
 800a1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1bc:	f383 8811 	msr	BASEPRI, r3
 800a1c0:	f3bf 8f6f 	isb	sy
 800a1c4:	f3bf 8f4f 	dsb	sy
 800a1c8:	613b      	str	r3, [r7, #16]
 800a1ca:	e7fe      	b.n	800a1ca <xTimerCreateTimerTask+0x72>
	return xReturn;
 800a1cc:	697b      	ldr	r3, [r7, #20]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3718      	adds	r7, #24
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	20000c20 	.word	0x20000c20
 800a1dc:	0800b300 	.word	0x0800b300
 800a1e0:	0800a3a5 	.word	0x0800a3a5
 800a1e4:	20000c24 	.word	0x20000c24

0800a1e8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b088      	sub	sp, #32
 800a1ec:	af02      	add	r7, sp, #8
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
 800a1f4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800a1f6:	2030      	movs	r0, #48	; 0x30
 800a1f8:	f000 fd0c 	bl	800ac14 <pvPortMalloc>
 800a1fc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d00d      	beq.n	800a220 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	9301      	str	r3, [sp, #4]
 800a208:	6a3b      	ldr	r3, [r7, #32]
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	68b9      	ldr	r1, [r7, #8]
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f000 f809 	bl	800a22a <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	2200      	movs	r2, #0
 800a21c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800a220:	697b      	ldr	r3, [r7, #20]
	}
 800a222:	4618      	mov	r0, r3
 800a224:	3718      	adds	r7, #24
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b086      	sub	sp, #24
 800a22e:	af00      	add	r7, sp, #0
 800a230:	60f8      	str	r0, [r7, #12]
 800a232:	60b9      	str	r1, [r7, #8]
 800a234:	607a      	str	r2, [r7, #4]
 800a236:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d109      	bne.n	800a252 <prvInitialiseNewTimer+0x28>
 800a23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a242:	f383 8811 	msr	BASEPRI, r3
 800a246:	f3bf 8f6f 	isb	sy
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	617b      	str	r3, [r7, #20]
 800a250:	e7fe      	b.n	800a250 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800a252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a254:	2b00      	cmp	r3, #0
 800a256:	d015      	beq.n	800a284 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a258:	f000 fa9c 	bl	800a794 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25e:	68fa      	ldr	r2, [r7, #12]
 800a260:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a264:	68ba      	ldr	r2, [r7, #8]
 800a266:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800a268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800a26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a270:	683a      	ldr	r2, [r7, #0]
 800a272:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a276:	6a3a      	ldr	r2, [r7, #32]
 800a278:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27c:	3304      	adds	r3, #4
 800a27e:	4618      	mov	r0, r3
 800a280:	f7fe f8fb 	bl	800847a <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a284:	bf00      	nop
 800a286:	3718      	adds	r7, #24
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b08a      	sub	sp, #40	; 0x28
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
 800a298:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a29a:	2300      	movs	r3, #0
 800a29c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d109      	bne.n	800a2b8 <xTimerGenericCommand+0x2c>
 800a2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a8:	f383 8811 	msr	BASEPRI, r3
 800a2ac:	f3bf 8f6f 	isb	sy
 800a2b0:	f3bf 8f4f 	dsb	sy
 800a2b4:	623b      	str	r3, [r7, #32]
 800a2b6:	e7fe      	b.n	800a2b6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a2b8:	4b19      	ldr	r3, [pc, #100]	; (800a320 <xTimerGenericCommand+0x94>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d02a      	beq.n	800a316 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	2b05      	cmp	r3, #5
 800a2d0:	dc18      	bgt.n	800a304 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a2d2:	f7ff fe4b 	bl	8009f6c <xTaskGetSchedulerState>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	2b02      	cmp	r3, #2
 800a2da:	d109      	bne.n	800a2f0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a2dc:	4b10      	ldr	r3, [pc, #64]	; (800a320 <xTimerGenericCommand+0x94>)
 800a2de:	6818      	ldr	r0, [r3, #0]
 800a2e0:	f107 0110 	add.w	r1, r7, #16
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2e8:	f7fe fa92 	bl	8008810 <xQueueGenericSend>
 800a2ec:	6278      	str	r0, [r7, #36]	; 0x24
 800a2ee:	e012      	b.n	800a316 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a2f0:	4b0b      	ldr	r3, [pc, #44]	; (800a320 <xTimerGenericCommand+0x94>)
 800a2f2:	6818      	ldr	r0, [r3, #0]
 800a2f4:	f107 0110 	add.w	r1, r7, #16
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f7fe fa88 	bl	8008810 <xQueueGenericSend>
 800a300:	6278      	str	r0, [r7, #36]	; 0x24
 800a302:	e008      	b.n	800a316 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a304:	4b06      	ldr	r3, [pc, #24]	; (800a320 <xTimerGenericCommand+0x94>)
 800a306:	6818      	ldr	r0, [r3, #0]
 800a308:	f107 0110 	add.w	r1, r7, #16
 800a30c:	2300      	movs	r3, #0
 800a30e:	683a      	ldr	r2, [r7, #0]
 800a310:	f7fe fb78 	bl	8008a04 <xQueueGenericSendFromISR>
 800a314:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3728      	adds	r7, #40	; 0x28
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	20000c20 	.word	0x20000c20

0800a324 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b088      	sub	sp, #32
 800a328:	af02      	add	r7, sp, #8
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a32e:	4b1c      	ldr	r3, [pc, #112]	; (800a3a0 <prvProcessExpiredTimer+0x7c>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	3304      	adds	r3, #4
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7fe f903 	bl	8008548 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	69db      	ldr	r3, [r3, #28]
 800a346:	2b01      	cmp	r3, #1
 800a348:	d121      	bne.n	800a38e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	699a      	ldr	r2, [r3, #24]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	18d1      	adds	r1, r2, r3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	683a      	ldr	r2, [r7, #0]
 800a356:	6978      	ldr	r0, [r7, #20]
 800a358:	f000 f8ca 	bl	800a4f0 <prvInsertTimerInActiveList>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d015      	beq.n	800a38e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a362:	2300      	movs	r3, #0
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	2300      	movs	r3, #0
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	2100      	movs	r1, #0
 800a36c:	6978      	ldr	r0, [r7, #20]
 800a36e:	f7ff ff8d 	bl	800a28c <xTimerGenericCommand>
 800a372:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d109      	bne.n	800a38e <prvProcessExpiredTimer+0x6a>
 800a37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37e:	f383 8811 	msr	BASEPRI, r3
 800a382:	f3bf 8f6f 	isb	sy
 800a386:	f3bf 8f4f 	dsb	sy
 800a38a:	60fb      	str	r3, [r7, #12]
 800a38c:	e7fe      	b.n	800a38c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a392:	6978      	ldr	r0, [r7, #20]
 800a394:	4798      	blx	r3
}
 800a396:	bf00      	nop
 800a398:	3718      	adds	r7, #24
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	20000c18 	.word	0x20000c18

0800a3a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 800a3ac:	f7f7 f8ba 	bl	8001524 <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a3b0:	f107 0308 	add.w	r3, r7, #8
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f000 f857 	bl	800a468 <prvGetNextExpireTime>
 800a3ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	4619      	mov	r1, r3
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f000 f803 	bl	800a3cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a3c6:	f000 f8d5 	bl	800a574 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a3ca:	e7f1      	b.n	800a3b0 <prvTimerTask+0xc>

0800a3cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a3d6:	f7ff f929 	bl	800962c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3da:	f107 0308 	add.w	r3, r7, #8
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f000 f866 	bl	800a4b0 <prvSampleTimeNow>
 800a3e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d130      	bne.n	800a44e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d10a      	bne.n	800a408 <prvProcessTimerOrBlockTask+0x3c>
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d806      	bhi.n	800a408 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a3fa:	f7ff f925 	bl	8009648 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a3fe:	68f9      	ldr	r1, [r7, #12]
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f7ff ff8f 	bl	800a324 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a406:	e024      	b.n	800a452 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d008      	beq.n	800a420 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a40e:	4b13      	ldr	r3, [pc, #76]	; (800a45c <prvProcessTimerOrBlockTask+0x90>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	bf0c      	ite	eq
 800a418:	2301      	moveq	r3, #1
 800a41a:	2300      	movne	r3, #0
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a420:	4b0f      	ldr	r3, [pc, #60]	; (800a460 <prvProcessTimerOrBlockTask+0x94>)
 800a422:	6818      	ldr	r0, [r3, #0]
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	1ad3      	subs	r3, r2, r3
 800a42a:	683a      	ldr	r2, [r7, #0]
 800a42c:	4619      	mov	r1, r3
 800a42e:	f7fe fd91 	bl	8008f54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a432:	f7ff f909 	bl	8009648 <xTaskResumeAll>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d10a      	bne.n	800a452 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a43c:	4b09      	ldr	r3, [pc, #36]	; (800a464 <prvProcessTimerOrBlockTask+0x98>)
 800a43e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a442:	601a      	str	r2, [r3, #0]
 800a444:	f3bf 8f4f 	dsb	sy
 800a448:	f3bf 8f6f 	isb	sy
}
 800a44c:	e001      	b.n	800a452 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a44e:	f7ff f8fb 	bl	8009648 <xTaskResumeAll>
}
 800a452:	bf00      	nop
 800a454:	3710      	adds	r7, #16
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	20000c1c 	.word	0x20000c1c
 800a460:	20000c20 	.word	0x20000c20
 800a464:	e000ed04 	.word	0xe000ed04

0800a468 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a468:	b480      	push	{r7}
 800a46a:	b085      	sub	sp, #20
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a470:	4b0e      	ldr	r3, [pc, #56]	; (800a4ac <prvGetNextExpireTime+0x44>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	2b00      	cmp	r3, #0
 800a478:	bf0c      	ite	eq
 800a47a:	2301      	moveq	r3, #1
 800a47c:	2300      	movne	r3, #0
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	461a      	mov	r2, r3
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d105      	bne.n	800a49a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a48e:	4b07      	ldr	r3, [pc, #28]	; (800a4ac <prvGetNextExpireTime+0x44>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	60fb      	str	r3, [r7, #12]
 800a498:	e001      	b.n	800a49e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a49a:	2300      	movs	r3, #0
 800a49c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a49e:	68fb      	ldr	r3, [r7, #12]
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3714      	adds	r7, #20
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bc80      	pop	{r7}
 800a4a8:	4770      	bx	lr
 800a4aa:	bf00      	nop
 800a4ac:	20000c18 	.word	0x20000c18

0800a4b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a4b8:	f7ff f962 	bl	8009780 <xTaskGetTickCount>
 800a4bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a4be:	4b0b      	ldr	r3, [pc, #44]	; (800a4ec <prvSampleTimeNow+0x3c>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d205      	bcs.n	800a4d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a4c8:	f000 f904 	bl	800a6d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	601a      	str	r2, [r3, #0]
 800a4d2:	e002      	b.n	800a4da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a4da:	4a04      	ldr	r2, [pc, #16]	; (800a4ec <prvSampleTimeNow+0x3c>)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	20000c28 	.word	0x20000c28

0800a4f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b086      	sub	sp, #24
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
 800a4fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a4fe:	2300      	movs	r3, #0
 800a500:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	68ba      	ldr	r2, [r7, #8]
 800a506:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a50e:	68ba      	ldr	r2, [r7, #8]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	429a      	cmp	r2, r3
 800a514:	d812      	bhi.n	800a53c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	1ad2      	subs	r2, r2, r3
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	699b      	ldr	r3, [r3, #24]
 800a520:	429a      	cmp	r2, r3
 800a522:	d302      	bcc.n	800a52a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a524:	2301      	movs	r3, #1
 800a526:	617b      	str	r3, [r7, #20]
 800a528:	e01b      	b.n	800a562 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a52a:	4b10      	ldr	r3, [pc, #64]	; (800a56c <prvInsertTimerInActiveList+0x7c>)
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	3304      	adds	r3, #4
 800a532:	4619      	mov	r1, r3
 800a534:	4610      	mov	r0, r2
 800a536:	f7fd ffcf 	bl	80084d8 <vListInsert>
 800a53a:	e012      	b.n	800a562 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	429a      	cmp	r2, r3
 800a542:	d206      	bcs.n	800a552 <prvInsertTimerInActiveList+0x62>
 800a544:	68ba      	ldr	r2, [r7, #8]
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d302      	bcc.n	800a552 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a54c:	2301      	movs	r3, #1
 800a54e:	617b      	str	r3, [r7, #20]
 800a550:	e007      	b.n	800a562 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a552:	4b07      	ldr	r3, [pc, #28]	; (800a570 <prvInsertTimerInActiveList+0x80>)
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	3304      	adds	r3, #4
 800a55a:	4619      	mov	r1, r3
 800a55c:	4610      	mov	r0, r2
 800a55e:	f7fd ffbb 	bl	80084d8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a562:	697b      	ldr	r3, [r7, #20]
}
 800a564:	4618      	mov	r0, r3
 800a566:	3718      	adds	r7, #24
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	20000c1c 	.word	0x20000c1c
 800a570:	20000c18 	.word	0x20000c18

0800a574 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b08e      	sub	sp, #56	; 0x38
 800a578:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a57a:	e099      	b.n	800a6b0 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	da17      	bge.n	800a5b2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a582:	1d3b      	adds	r3, r7, #4
 800a584:	3304      	adds	r3, #4
 800a586:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d109      	bne.n	800a5a2 <prvProcessReceivedCommands+0x2e>
 800a58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a592:	f383 8811 	msr	BASEPRI, r3
 800a596:	f3bf 8f6f 	isb	sy
 800a59a:	f3bf 8f4f 	dsb	sy
 800a59e:	61fb      	str	r3, [r7, #28]
 800a5a0:	e7fe      	b.n	800a5a0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5a8:	6850      	ldr	r0, [r2, #4]
 800a5aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5ac:	6892      	ldr	r2, [r2, #8]
 800a5ae:	4611      	mov	r1, r2
 800a5b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	db7a      	blt.n	800a6ae <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5be:	695b      	ldr	r3, [r3, #20]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d004      	beq.n	800a5ce <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c6:	3304      	adds	r3, #4
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7fd ffbd 	bl	8008548 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a5ce:	463b      	mov	r3, r7
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7ff ff6d 	bl	800a4b0 <prvSampleTimeNow>
 800a5d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2b09      	cmp	r3, #9
 800a5dc:	d868      	bhi.n	800a6b0 <prvProcessReceivedCommands+0x13c>
 800a5de:	a201      	add	r2, pc, #4	; (adr r2, 800a5e4 <prvProcessReceivedCommands+0x70>)
 800a5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e4:	0800a60d 	.word	0x0800a60d
 800a5e8:	0800a60d 	.word	0x0800a60d
 800a5ec:	0800a60d 	.word	0x0800a60d
 800a5f0:	0800a6b1 	.word	0x0800a6b1
 800a5f4:	0800a667 	.word	0x0800a667
 800a5f8:	0800a69d 	.word	0x0800a69d
 800a5fc:	0800a60d 	.word	0x0800a60d
 800a600:	0800a60d 	.word	0x0800a60d
 800a604:	0800a6b1 	.word	0x0800a6b1
 800a608:	0800a667 	.word	0x0800a667
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a610:	699b      	ldr	r3, [r3, #24]
 800a612:	18d1      	adds	r1, r2, r3
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a61a:	f7ff ff69 	bl	800a4f0 <prvInsertTimerInActiveList>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d045      	beq.n	800a6b0 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a62a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62e:	69db      	ldr	r3, [r3, #28]
 800a630:	2b01      	cmp	r3, #1
 800a632:	d13d      	bne.n	800a6b0 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a638:	699b      	ldr	r3, [r3, #24]
 800a63a:	441a      	add	r2, r3
 800a63c:	2300      	movs	r3, #0
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	2300      	movs	r3, #0
 800a642:	2100      	movs	r1, #0
 800a644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a646:	f7ff fe21 	bl	800a28c <xTimerGenericCommand>
 800a64a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a64c:	6a3b      	ldr	r3, [r7, #32]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d12e      	bne.n	800a6b0 <prvProcessReceivedCommands+0x13c>
 800a652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a656:	f383 8811 	msr	BASEPRI, r3
 800a65a:	f3bf 8f6f 	isb	sy
 800a65e:	f3bf 8f4f 	dsb	sy
 800a662:	61bb      	str	r3, [r7, #24]
 800a664:	e7fe      	b.n	800a664 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a666:	68ba      	ldr	r2, [r7, #8]
 800a668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66e:	699b      	ldr	r3, [r3, #24]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d109      	bne.n	800a688 <prvProcessReceivedCommands+0x114>
 800a674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a678:	f383 8811 	msr	BASEPRI, r3
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f3bf 8f4f 	dsb	sy
 800a684:	617b      	str	r3, [r7, #20]
 800a686:	e7fe      	b.n	800a686 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68a:	699a      	ldr	r2, [r3, #24]
 800a68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68e:	18d1      	adds	r1, r2, r3
 800a690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a696:	f7ff ff2b 	bl	800a4f0 <prvInsertTimerInActiveList>
					break;
 800a69a:	e009      	b.n	800a6b0 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d104      	bne.n	800a6b0 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800a6a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6a8:	f000 fb7a 	bl	800ada0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a6ac:	e000      	b.n	800a6b0 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a6ae:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6b0:	4b07      	ldr	r3, [pc, #28]	; (800a6d0 <prvProcessReceivedCommands+0x15c>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	1d39      	adds	r1, r7, #4
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f7fe fa37 	bl	8008b2c <xQueueReceive>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	f47f af5b 	bne.w	800a57c <prvProcessReceivedCommands+0x8>
	}
}
 800a6c6:	bf00      	nop
 800a6c8:	3730      	adds	r7, #48	; 0x30
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	20000c20 	.word	0x20000c20

0800a6d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b088      	sub	sp, #32
 800a6d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a6da:	e044      	b.n	800a766 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6dc:	4b2b      	ldr	r3, [pc, #172]	; (800a78c <prvSwitchTimerLists+0xb8>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	68db      	ldr	r3, [r3, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6e6:	4b29      	ldr	r3, [pc, #164]	; (800a78c <prvSwitchTimerLists+0xb8>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	68db      	ldr	r3, [r3, #12]
 800a6ec:	68db      	ldr	r3, [r3, #12]
 800a6ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	3304      	adds	r3, #4
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7fd ff27 	bl	8008548 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	69db      	ldr	r3, [r3, #28]
 800a706:	2b01      	cmp	r3, #1
 800a708:	d12d      	bne.n	800a766 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	699b      	ldr	r3, [r3, #24]
 800a70e:	693a      	ldr	r2, [r7, #16]
 800a710:	4413      	add	r3, r2
 800a712:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a714:	68ba      	ldr	r2, [r7, #8]
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d90e      	bls.n	800a73a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	68ba      	ldr	r2, [r7, #8]
 800a720:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	68fa      	ldr	r2, [r7, #12]
 800a726:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a728:	4b18      	ldr	r3, [pc, #96]	; (800a78c <prvSwitchTimerLists+0xb8>)
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	3304      	adds	r3, #4
 800a730:	4619      	mov	r1, r3
 800a732:	4610      	mov	r0, r2
 800a734:	f7fd fed0 	bl	80084d8 <vListInsert>
 800a738:	e015      	b.n	800a766 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a73a:	2300      	movs	r3, #0
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	2300      	movs	r3, #0
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	2100      	movs	r1, #0
 800a744:	68f8      	ldr	r0, [r7, #12]
 800a746:	f7ff fda1 	bl	800a28c <xTimerGenericCommand>
 800a74a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d109      	bne.n	800a766 <prvSwitchTimerLists+0x92>
 800a752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a756:	f383 8811 	msr	BASEPRI, r3
 800a75a:	f3bf 8f6f 	isb	sy
 800a75e:	f3bf 8f4f 	dsb	sy
 800a762:	603b      	str	r3, [r7, #0]
 800a764:	e7fe      	b.n	800a764 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a766:	4b09      	ldr	r3, [pc, #36]	; (800a78c <prvSwitchTimerLists+0xb8>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d1b5      	bne.n	800a6dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a770:	4b06      	ldr	r3, [pc, #24]	; (800a78c <prvSwitchTimerLists+0xb8>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a776:	4b06      	ldr	r3, [pc, #24]	; (800a790 <prvSwitchTimerLists+0xbc>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a04      	ldr	r2, [pc, #16]	; (800a78c <prvSwitchTimerLists+0xb8>)
 800a77c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a77e:	4a04      	ldr	r2, [pc, #16]	; (800a790 <prvSwitchTimerLists+0xbc>)
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	6013      	str	r3, [r2, #0]
}
 800a784:	bf00      	nop
 800a786:	3718      	adds	r7, #24
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	20000c18 	.word	0x20000c18
 800a790:	20000c1c 	.word	0x20000c1c

0800a794 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a79a:	f000 f945 	bl	800aa28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a79e:	4b15      	ldr	r3, [pc, #84]	; (800a7f4 <prvCheckForValidListAndQueue+0x60>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d120      	bne.n	800a7e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a7a6:	4814      	ldr	r0, [pc, #80]	; (800a7f8 <prvCheckForValidListAndQueue+0x64>)
 800a7a8:	f7fd fe48 	bl	800843c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a7ac:	4813      	ldr	r0, [pc, #76]	; (800a7fc <prvCheckForValidListAndQueue+0x68>)
 800a7ae:	f7fd fe45 	bl	800843c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a7b2:	4b13      	ldr	r3, [pc, #76]	; (800a800 <prvCheckForValidListAndQueue+0x6c>)
 800a7b4:	4a10      	ldr	r2, [pc, #64]	; (800a7f8 <prvCheckForValidListAndQueue+0x64>)
 800a7b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a7b8:	4b12      	ldr	r3, [pc, #72]	; (800a804 <prvCheckForValidListAndQueue+0x70>)
 800a7ba:	4a10      	ldr	r2, [pc, #64]	; (800a7fc <prvCheckForValidListAndQueue+0x68>)
 800a7bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a7be:	2300      	movs	r3, #0
 800a7c0:	9300      	str	r3, [sp, #0]
 800a7c2:	4b11      	ldr	r3, [pc, #68]	; (800a808 <prvCheckForValidListAndQueue+0x74>)
 800a7c4:	4a11      	ldr	r2, [pc, #68]	; (800a80c <prvCheckForValidListAndQueue+0x78>)
 800a7c6:	2110      	movs	r1, #16
 800a7c8:	200a      	movs	r0, #10
 800a7ca:	f7fd ff4f 	bl	800866c <xQueueGenericCreateStatic>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	4b08      	ldr	r3, [pc, #32]	; (800a7f4 <prvCheckForValidListAndQueue+0x60>)
 800a7d2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a7d4:	4b07      	ldr	r3, [pc, #28]	; (800a7f4 <prvCheckForValidListAndQueue+0x60>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d005      	beq.n	800a7e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a7dc:	4b05      	ldr	r3, [pc, #20]	; (800a7f4 <prvCheckForValidListAndQueue+0x60>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	490b      	ldr	r1, [pc, #44]	; (800a810 <prvCheckForValidListAndQueue+0x7c>)
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fe fb8e 	bl	8008f04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a7e8:	f000 f94c 	bl	800aa84 <vPortExitCritical>
}
 800a7ec:	bf00      	nop
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	20000c20 	.word	0x20000c20
 800a7f8:	20000bf0 	.word	0x20000bf0
 800a7fc:	20000c04 	.word	0x20000c04
 800a800:	20000c18 	.word	0x20000c18
 800a804:	20000c1c 	.word	0x20000c1c
 800a808:	20000ccc 	.word	0x20000ccc
 800a80c:	20000c2c 	.word	0x20000c2c
 800a810:	0800b308 	.word	0x0800b308

0800a814 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a814:	b580      	push	{r7, lr}
 800a816:	b08a      	sub	sp, #40	; 0x28
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
 800a820:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800a822:	f06f 0301 	mvn.w	r3, #1
 800a826:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a834:	4b06      	ldr	r3, [pc, #24]	; (800a850 <xTimerPendFunctionCallFromISR+0x3c>)
 800a836:	6818      	ldr	r0, [r3, #0]
 800a838:	f107 0114 	add.w	r1, r7, #20
 800a83c:	2300      	movs	r3, #0
 800a83e:	683a      	ldr	r2, [r7, #0]
 800a840:	f7fe f8e0 	bl	8008a04 <xQueueGenericSendFromISR>
 800a844:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800a846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a848:	4618      	mov	r0, r3
 800a84a:	3728      	adds	r7, #40	; 0x28
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	20000c20 	.word	0x20000c20

0800a854 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a854:	b480      	push	{r7}
 800a856:	b085      	sub	sp, #20
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	3b04      	subs	r3, #4
 800a864:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a86c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	3b04      	subs	r3, #4
 800a872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	f023 0201 	bic.w	r2, r3, #1
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	3b04      	subs	r3, #4
 800a882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a884:	4a08      	ldr	r2, [pc, #32]	; (800a8a8 <pxPortInitialiseStack+0x54>)
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	3b14      	subs	r3, #20
 800a88e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	3b20      	subs	r3, #32
 800a89a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a89c:	68fb      	ldr	r3, [r7, #12]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3714      	adds	r7, #20
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bc80      	pop	{r7}
 800a8a6:	4770      	bx	lr
 800a8a8:	0800a8ad 	.word	0x0800a8ad

0800a8ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b085      	sub	sp, #20
 800a8b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a8b6:	4b10      	ldr	r3, [pc, #64]	; (800a8f8 <prvTaskExitError+0x4c>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8be:	d009      	beq.n	800a8d4 <prvTaskExitError+0x28>
 800a8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c4:	f383 8811 	msr	BASEPRI, r3
 800a8c8:	f3bf 8f6f 	isb	sy
 800a8cc:	f3bf 8f4f 	dsb	sy
 800a8d0:	60fb      	str	r3, [r7, #12]
 800a8d2:	e7fe      	b.n	800a8d2 <prvTaskExitError+0x26>
 800a8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d8:	f383 8811 	msr	BASEPRI, r3
 800a8dc:	f3bf 8f6f 	isb	sy
 800a8e0:	f3bf 8f4f 	dsb	sy
 800a8e4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a8e6:	bf00      	nop
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d0fc      	beq.n	800a8e8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a8ee:	bf00      	nop
 800a8f0:	3714      	adds	r7, #20
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bc80      	pop	{r7}
 800a8f6:	4770      	bx	lr
 800a8f8:	2000000c 	.word	0x2000000c
 800a8fc:	00000000 	.word	0x00000000

0800a900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a900:	4b07      	ldr	r3, [pc, #28]	; (800a920 <pxCurrentTCBConst2>)
 800a902:	6819      	ldr	r1, [r3, #0]
 800a904:	6808      	ldr	r0, [r1, #0]
 800a906:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a90a:	f380 8809 	msr	PSP, r0
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f04f 0000 	mov.w	r0, #0
 800a916:	f380 8811 	msr	BASEPRI, r0
 800a91a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a91e:	4770      	bx	lr

0800a920 <pxCurrentTCBConst2>:
 800a920:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a924:	bf00      	nop
 800a926:	bf00      	nop

0800a928 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a928:	4806      	ldr	r0, [pc, #24]	; (800a944 <prvPortStartFirstTask+0x1c>)
 800a92a:	6800      	ldr	r0, [r0, #0]
 800a92c:	6800      	ldr	r0, [r0, #0]
 800a92e:	f380 8808 	msr	MSP, r0
 800a932:	b662      	cpsie	i
 800a934:	b661      	cpsie	f
 800a936:	f3bf 8f4f 	dsb	sy
 800a93a:	f3bf 8f6f 	isb	sy
 800a93e:	df00      	svc	0
 800a940:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a942:	bf00      	nop
 800a944:	e000ed08 	.word	0xe000ed08

0800a948 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a94e:	4b31      	ldr	r3, [pc, #196]	; (800aa14 <xPortStartScheduler+0xcc>)
 800a950:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	b2db      	uxtb	r3, r3
 800a958:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	22ff      	movs	r2, #255	; 0xff
 800a95e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	b2db      	uxtb	r3, r3
 800a966:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a968:	78fb      	ldrb	r3, [r7, #3]
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a970:	b2da      	uxtb	r2, r3
 800a972:	4b29      	ldr	r3, [pc, #164]	; (800aa18 <xPortStartScheduler+0xd0>)
 800a974:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a976:	4b29      	ldr	r3, [pc, #164]	; (800aa1c <xPortStartScheduler+0xd4>)
 800a978:	2207      	movs	r2, #7
 800a97a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a97c:	e009      	b.n	800a992 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a97e:	4b27      	ldr	r3, [pc, #156]	; (800aa1c <xPortStartScheduler+0xd4>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	3b01      	subs	r3, #1
 800a984:	4a25      	ldr	r2, [pc, #148]	; (800aa1c <xPortStartScheduler+0xd4>)
 800a986:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a988:	78fb      	ldrb	r3, [r7, #3]
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	005b      	lsls	r3, r3, #1
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a992:	78fb      	ldrb	r3, [r7, #3]
 800a994:	b2db      	uxtb	r3, r3
 800a996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a99a:	2b80      	cmp	r3, #128	; 0x80
 800a99c:	d0ef      	beq.n	800a97e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a99e:	4b1f      	ldr	r3, [pc, #124]	; (800aa1c <xPortStartScheduler+0xd4>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f1c3 0307 	rsb	r3, r3, #7
 800a9a6:	2b04      	cmp	r3, #4
 800a9a8:	d009      	beq.n	800a9be <xPortStartScheduler+0x76>
 800a9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ae:	f383 8811 	msr	BASEPRI, r3
 800a9b2:	f3bf 8f6f 	isb	sy
 800a9b6:	f3bf 8f4f 	dsb	sy
 800a9ba:	60bb      	str	r3, [r7, #8]
 800a9bc:	e7fe      	b.n	800a9bc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a9be:	4b17      	ldr	r3, [pc, #92]	; (800aa1c <xPortStartScheduler+0xd4>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	021b      	lsls	r3, r3, #8
 800a9c4:	4a15      	ldr	r2, [pc, #84]	; (800aa1c <xPortStartScheduler+0xd4>)
 800a9c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a9c8:	4b14      	ldr	r3, [pc, #80]	; (800aa1c <xPortStartScheduler+0xd4>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a9d0:	4a12      	ldr	r2, [pc, #72]	; (800aa1c <xPortStartScheduler+0xd4>)
 800a9d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	b2da      	uxtb	r2, r3
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a9dc:	4b10      	ldr	r3, [pc, #64]	; (800aa20 <xPortStartScheduler+0xd8>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a0f      	ldr	r2, [pc, #60]	; (800aa20 <xPortStartScheduler+0xd8>)
 800a9e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a9e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a9e8:	4b0d      	ldr	r3, [pc, #52]	; (800aa20 <xPortStartScheduler+0xd8>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a0c      	ldr	r2, [pc, #48]	; (800aa20 <xPortStartScheduler+0xd8>)
 800a9ee:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a9f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a9f4:	f000 f8b0 	bl	800ab58 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a9f8:	4b0a      	ldr	r3, [pc, #40]	; (800aa24 <xPortStartScheduler+0xdc>)
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a9fe:	f7ff ff93 	bl	800a928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa02:	f7fe ffa3 	bl	800994c <vTaskSwitchContext>
	prvTaskExitError();
 800aa06:	f7ff ff51 	bl	800a8ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa0a:	2300      	movs	r3, #0
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3710      	adds	r7, #16
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	e000e400 	.word	0xe000e400
 800aa18:	20000d1c 	.word	0x20000d1c
 800aa1c:	20000d20 	.word	0x20000d20
 800aa20:	e000ed20 	.word	0xe000ed20
 800aa24:	2000000c 	.word	0x2000000c

0800aa28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa32:	f383 8811 	msr	BASEPRI, r3
 800aa36:	f3bf 8f6f 	isb	sy
 800aa3a:	f3bf 8f4f 	dsb	sy
 800aa3e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aa40:	4b0e      	ldr	r3, [pc, #56]	; (800aa7c <vPortEnterCritical+0x54>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	3301      	adds	r3, #1
 800aa46:	4a0d      	ldr	r2, [pc, #52]	; (800aa7c <vPortEnterCritical+0x54>)
 800aa48:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aa4a:	4b0c      	ldr	r3, [pc, #48]	; (800aa7c <vPortEnterCritical+0x54>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d10e      	bne.n	800aa70 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aa52:	4b0b      	ldr	r3, [pc, #44]	; (800aa80 <vPortEnterCritical+0x58>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d009      	beq.n	800aa70 <vPortEnterCritical+0x48>
 800aa5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa60:	f383 8811 	msr	BASEPRI, r3
 800aa64:	f3bf 8f6f 	isb	sy
 800aa68:	f3bf 8f4f 	dsb	sy
 800aa6c:	603b      	str	r3, [r7, #0]
 800aa6e:	e7fe      	b.n	800aa6e <vPortEnterCritical+0x46>
	}
}
 800aa70:	bf00      	nop
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bc80      	pop	{r7}
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop
 800aa7c:	2000000c 	.word	0x2000000c
 800aa80:	e000ed04 	.word	0xe000ed04

0800aa84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa8a:	4b10      	ldr	r3, [pc, #64]	; (800aacc <vPortExitCritical+0x48>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d109      	bne.n	800aaa6 <vPortExitCritical+0x22>
 800aa92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa96:	f383 8811 	msr	BASEPRI, r3
 800aa9a:	f3bf 8f6f 	isb	sy
 800aa9e:	f3bf 8f4f 	dsb	sy
 800aaa2:	607b      	str	r3, [r7, #4]
 800aaa4:	e7fe      	b.n	800aaa4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800aaa6:	4b09      	ldr	r3, [pc, #36]	; (800aacc <vPortExitCritical+0x48>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	4a07      	ldr	r2, [pc, #28]	; (800aacc <vPortExitCritical+0x48>)
 800aaae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aab0:	4b06      	ldr	r3, [pc, #24]	; (800aacc <vPortExitCritical+0x48>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d104      	bne.n	800aac2 <vPortExitCritical+0x3e>
 800aab8:	2300      	movs	r3, #0
 800aaba:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800aac2:	bf00      	nop
 800aac4:	370c      	adds	r7, #12
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bc80      	pop	{r7}
 800aaca:	4770      	bx	lr
 800aacc:	2000000c 	.word	0x2000000c

0800aad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aad0:	f3ef 8009 	mrs	r0, PSP
 800aad4:	f3bf 8f6f 	isb	sy
 800aad8:	4b0d      	ldr	r3, [pc, #52]	; (800ab10 <pxCurrentTCBConst>)
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800aae0:	6010      	str	r0, [r2, #0]
 800aae2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800aae6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aaea:	f380 8811 	msr	BASEPRI, r0
 800aaee:	f7fe ff2d 	bl	800994c <vTaskSwitchContext>
 800aaf2:	f04f 0000 	mov.w	r0, #0
 800aaf6:	f380 8811 	msr	BASEPRI, r0
 800aafa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800aafe:	6819      	ldr	r1, [r3, #0]
 800ab00:	6808      	ldr	r0, [r1, #0]
 800ab02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ab06:	f380 8809 	msr	PSP, r0
 800ab0a:	f3bf 8f6f 	isb	sy
 800ab0e:	4770      	bx	lr

0800ab10 <pxCurrentTCBConst>:
 800ab10:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ab14:	bf00      	nop
 800ab16:	bf00      	nop

0800ab18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ab1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab22:	f383 8811 	msr	BASEPRI, r3
 800ab26:	f3bf 8f6f 	isb	sy
 800ab2a:	f3bf 8f4f 	dsb	sy
 800ab2e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab30:	f7fe fe46 	bl	80097c0 <xTaskIncrementTick>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d003      	beq.n	800ab42 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ab3a:	4b06      	ldr	r3, [pc, #24]	; (800ab54 <SysTick_Handler+0x3c>)
 800ab3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab40:	601a      	str	r2, [r3, #0]
 800ab42:	2300      	movs	r3, #0
 800ab44:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab4c:	bf00      	nop
 800ab4e:	3708      	adds	r7, #8
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}
 800ab54:	e000ed04 	.word	0xe000ed04

0800ab58 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ab58:	b480      	push	{r7}
 800ab5a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab5c:	4b0a      	ldr	r3, [pc, #40]	; (800ab88 <vPortSetupTimerInterrupt+0x30>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab62:	4b0a      	ldr	r3, [pc, #40]	; (800ab8c <vPortSetupTimerInterrupt+0x34>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab68:	4b09      	ldr	r3, [pc, #36]	; (800ab90 <vPortSetupTimerInterrupt+0x38>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a09      	ldr	r2, [pc, #36]	; (800ab94 <vPortSetupTimerInterrupt+0x3c>)
 800ab6e:	fba2 2303 	umull	r2, r3, r2, r3
 800ab72:	099b      	lsrs	r3, r3, #6
 800ab74:	4a08      	ldr	r2, [pc, #32]	; (800ab98 <vPortSetupTimerInterrupt+0x40>)
 800ab76:	3b01      	subs	r3, #1
 800ab78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab7a:	4b03      	ldr	r3, [pc, #12]	; (800ab88 <vPortSetupTimerInterrupt+0x30>)
 800ab7c:	2207      	movs	r2, #7
 800ab7e:	601a      	str	r2, [r3, #0]
}
 800ab80:	bf00      	nop
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bc80      	pop	{r7}
 800ab86:	4770      	bx	lr
 800ab88:	e000e010 	.word	0xe000e010
 800ab8c:	e000e018 	.word	0xe000e018
 800ab90:	20000000 	.word	0x20000000
 800ab94:	10624dd3 	.word	0x10624dd3
 800ab98:	e000e014 	.word	0xe000e014

0800ab9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aba2:	f3ef 8305 	mrs	r3, IPSR
 800aba6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2b0f      	cmp	r3, #15
 800abac:	d913      	bls.n	800abd6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800abae:	4a15      	ldr	r2, [pc, #84]	; (800ac04 <vPortValidateInterruptPriority+0x68>)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	4413      	add	r3, r2
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800abb8:	4b13      	ldr	r3, [pc, #76]	; (800ac08 <vPortValidateInterruptPriority+0x6c>)
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	7afa      	ldrb	r2, [r7, #11]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d209      	bcs.n	800abd6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800abc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc6:	f383 8811 	msr	BASEPRI, r3
 800abca:	f3bf 8f6f 	isb	sy
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	607b      	str	r3, [r7, #4]
 800abd4:	e7fe      	b.n	800abd4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800abd6:	4b0d      	ldr	r3, [pc, #52]	; (800ac0c <vPortValidateInterruptPriority+0x70>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800abde:	4b0c      	ldr	r3, [pc, #48]	; (800ac10 <vPortValidateInterruptPriority+0x74>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d909      	bls.n	800abfa <vPortValidateInterruptPriority+0x5e>
 800abe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abea:	f383 8811 	msr	BASEPRI, r3
 800abee:	f3bf 8f6f 	isb	sy
 800abf2:	f3bf 8f4f 	dsb	sy
 800abf6:	603b      	str	r3, [r7, #0]
 800abf8:	e7fe      	b.n	800abf8 <vPortValidateInterruptPriority+0x5c>
	}
 800abfa:	bf00      	nop
 800abfc:	3714      	adds	r7, #20
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bc80      	pop	{r7}
 800ac02:	4770      	bx	lr
 800ac04:	e000e3f0 	.word	0xe000e3f0
 800ac08:	20000d1c 	.word	0x20000d1c
 800ac0c:	e000ed0c 	.word	0xe000ed0c
 800ac10:	20000d20 	.word	0x20000d20

0800ac14 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b08a      	sub	sp, #40	; 0x28
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ac20:	f7fe fd04 	bl	800962c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ac24:	4b59      	ldr	r3, [pc, #356]	; (800ad8c <pvPortMalloc+0x178>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d101      	bne.n	800ac30 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ac2c:	f000 f910 	bl	800ae50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ac30:	4b57      	ldr	r3, [pc, #348]	; (800ad90 <pvPortMalloc+0x17c>)
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	4013      	ands	r3, r2
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	f040 808c 	bne.w	800ad56 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d01c      	beq.n	800ac7e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800ac44:	2208      	movs	r2, #8
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	4413      	add	r3, r2
 800ac4a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f003 0307 	and.w	r3, r3, #7
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d013      	beq.n	800ac7e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f023 0307 	bic.w	r3, r3, #7
 800ac5c:	3308      	adds	r3, #8
 800ac5e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f003 0307 	and.w	r3, r3, #7
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d009      	beq.n	800ac7e <pvPortMalloc+0x6a>
 800ac6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6e:	f383 8811 	msr	BASEPRI, r3
 800ac72:	f3bf 8f6f 	isb	sy
 800ac76:	f3bf 8f4f 	dsb	sy
 800ac7a:	617b      	str	r3, [r7, #20]
 800ac7c:	e7fe      	b.n	800ac7c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d068      	beq.n	800ad56 <pvPortMalloc+0x142>
 800ac84:	4b43      	ldr	r3, [pc, #268]	; (800ad94 <pvPortMalloc+0x180>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d863      	bhi.n	800ad56 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac8e:	4b42      	ldr	r3, [pc, #264]	; (800ad98 <pvPortMalloc+0x184>)
 800ac90:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac92:	4b41      	ldr	r3, [pc, #260]	; (800ad98 <pvPortMalloc+0x184>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac98:	e004      	b.n	800aca4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800ac9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d903      	bls.n	800acb6 <pvPortMalloc+0xa2>
 800acae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1f1      	bne.n	800ac9a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800acb6:	4b35      	ldr	r3, [pc, #212]	; (800ad8c <pvPortMalloc+0x178>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d04a      	beq.n	800ad56 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800acc0:	6a3b      	ldr	r3, [r7, #32]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2208      	movs	r2, #8
 800acc6:	4413      	add	r3, r2
 800acc8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800acca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	6a3b      	ldr	r3, [r7, #32]
 800acd0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800acd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd4:	685a      	ldr	r2, [r3, #4]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	1ad2      	subs	r2, r2, r3
 800acda:	2308      	movs	r3, #8
 800acdc:	005b      	lsls	r3, r3, #1
 800acde:	429a      	cmp	r2, r3
 800ace0:	d91e      	bls.n	800ad20 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ace2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	4413      	add	r3, r2
 800ace8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	f003 0307 	and.w	r3, r3, #7
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d009      	beq.n	800ad08 <pvPortMalloc+0xf4>
 800acf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf8:	f383 8811 	msr	BASEPRI, r3
 800acfc:	f3bf 8f6f 	isb	sy
 800ad00:	f3bf 8f4f 	dsb	sy
 800ad04:	613b      	str	r3, [r7, #16]
 800ad06:	e7fe      	b.n	800ad06 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ad08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0a:	685a      	ldr	r2, [r3, #4]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	1ad2      	subs	r2, r2, r3
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ad14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ad1a:	69b8      	ldr	r0, [r7, #24]
 800ad1c:	f000 f8fa 	bl	800af14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ad20:	4b1c      	ldr	r3, [pc, #112]	; (800ad94 <pvPortMalloc+0x180>)
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	1ad3      	subs	r3, r2, r3
 800ad2a:	4a1a      	ldr	r2, [pc, #104]	; (800ad94 <pvPortMalloc+0x180>)
 800ad2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ad2e:	4b19      	ldr	r3, [pc, #100]	; (800ad94 <pvPortMalloc+0x180>)
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	4b1a      	ldr	r3, [pc, #104]	; (800ad9c <pvPortMalloc+0x188>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d203      	bcs.n	800ad42 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ad3a:	4b16      	ldr	r3, [pc, #88]	; (800ad94 <pvPortMalloc+0x180>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4a17      	ldr	r2, [pc, #92]	; (800ad9c <pvPortMalloc+0x188>)
 800ad40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ad42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad44:	685a      	ldr	r2, [r3, #4]
 800ad46:	4b12      	ldr	r3, [pc, #72]	; (800ad90 <pvPortMalloc+0x17c>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	431a      	orrs	r2, r3
 800ad4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ad50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad52:	2200      	movs	r2, #0
 800ad54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ad56:	f7fe fc77 	bl	8009648 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d101      	bne.n	800ad64 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800ad60:	f7f6 fbda 	bl	8001518 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	f003 0307 	and.w	r3, r3, #7
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d009      	beq.n	800ad82 <pvPortMalloc+0x16e>
 800ad6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad72:	f383 8811 	msr	BASEPRI, r3
 800ad76:	f3bf 8f6f 	isb	sy
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	60fb      	str	r3, [r7, #12]
 800ad80:	e7fe      	b.n	800ad80 <pvPortMalloc+0x16c>
	return pvReturn;
 800ad82:	69fb      	ldr	r3, [r7, #28]
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3728      	adds	r7, #40	; 0x28
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	2000352c 	.word	0x2000352c
 800ad90:	20003538 	.word	0x20003538
 800ad94:	20003530 	.word	0x20003530
 800ad98:	20003524 	.word	0x20003524
 800ad9c:	20003534 	.word	0x20003534

0800ada0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b086      	sub	sp, #24
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d046      	beq.n	800ae40 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800adb2:	2308      	movs	r3, #8
 800adb4:	425b      	negs	r3, r3
 800adb6:	697a      	ldr	r2, [r7, #20]
 800adb8:	4413      	add	r3, r2
 800adba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	685a      	ldr	r2, [r3, #4]
 800adc4:	4b20      	ldr	r3, [pc, #128]	; (800ae48 <vPortFree+0xa8>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4013      	ands	r3, r2
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d109      	bne.n	800ade2 <vPortFree+0x42>
 800adce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add2:	f383 8811 	msr	BASEPRI, r3
 800add6:	f3bf 8f6f 	isb	sy
 800adda:	f3bf 8f4f 	dsb	sy
 800adde:	60fb      	str	r3, [r7, #12]
 800ade0:	e7fe      	b.n	800ade0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d009      	beq.n	800adfe <vPortFree+0x5e>
 800adea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adee:	f383 8811 	msr	BASEPRI, r3
 800adf2:	f3bf 8f6f 	isb	sy
 800adf6:	f3bf 8f4f 	dsb	sy
 800adfa:	60bb      	str	r3, [r7, #8]
 800adfc:	e7fe      	b.n	800adfc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	685a      	ldr	r2, [r3, #4]
 800ae02:	4b11      	ldr	r3, [pc, #68]	; (800ae48 <vPortFree+0xa8>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4013      	ands	r3, r2
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d019      	beq.n	800ae40 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d115      	bne.n	800ae40 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	685a      	ldr	r2, [r3, #4]
 800ae18:	4b0b      	ldr	r3, [pc, #44]	; (800ae48 <vPortFree+0xa8>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	43db      	mvns	r3, r3
 800ae1e:	401a      	ands	r2, r3
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ae24:	f7fe fc02 	bl	800962c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	685a      	ldr	r2, [r3, #4]
 800ae2c:	4b07      	ldr	r3, [pc, #28]	; (800ae4c <vPortFree+0xac>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4413      	add	r3, r2
 800ae32:	4a06      	ldr	r2, [pc, #24]	; (800ae4c <vPortFree+0xac>)
 800ae34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ae36:	6938      	ldr	r0, [r7, #16]
 800ae38:	f000 f86c 	bl	800af14 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ae3c:	f7fe fc04 	bl	8009648 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ae40:	bf00      	nop
 800ae42:	3718      	adds	r7, #24
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	20003538 	.word	0x20003538
 800ae4c:	20003530 	.word	0x20003530

0800ae50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ae50:	b480      	push	{r7}
 800ae52:	b085      	sub	sp, #20
 800ae54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae56:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ae5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae5c:	4b27      	ldr	r3, [pc, #156]	; (800aefc <prvHeapInit+0xac>)
 800ae5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f003 0307 	and.w	r3, r3, #7
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00c      	beq.n	800ae84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	3307      	adds	r3, #7
 800ae6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f023 0307 	bic.w	r3, r3, #7
 800ae76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae78:	68ba      	ldr	r2, [r7, #8]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	1ad3      	subs	r3, r2, r3
 800ae7e:	4a1f      	ldr	r2, [pc, #124]	; (800aefc <prvHeapInit+0xac>)
 800ae80:	4413      	add	r3, r2
 800ae82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae88:	4a1d      	ldr	r2, [pc, #116]	; (800af00 <prvHeapInit+0xb0>)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae8e:	4b1c      	ldr	r3, [pc, #112]	; (800af00 <prvHeapInit+0xb0>)
 800ae90:	2200      	movs	r2, #0
 800ae92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	68ba      	ldr	r2, [r7, #8]
 800ae98:	4413      	add	r3, r2
 800ae9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae9c:	2208      	movs	r2, #8
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	1a9b      	subs	r3, r3, r2
 800aea2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f023 0307 	bic.w	r3, r3, #7
 800aeaa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	4a15      	ldr	r2, [pc, #84]	; (800af04 <prvHeapInit+0xb4>)
 800aeb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aeb2:	4b14      	ldr	r3, [pc, #80]	; (800af04 <prvHeapInit+0xb4>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aeba:	4b12      	ldr	r3, [pc, #72]	; (800af04 <prvHeapInit+0xb4>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	2200      	movs	r2, #0
 800aec0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	1ad2      	subs	r2, r2, r3
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aed0:	4b0c      	ldr	r3, [pc, #48]	; (800af04 <prvHeapInit+0xb4>)
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	4a0a      	ldr	r2, [pc, #40]	; (800af08 <prvHeapInit+0xb8>)
 800aede:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	4a09      	ldr	r2, [pc, #36]	; (800af0c <prvHeapInit+0xbc>)
 800aee6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aee8:	4b09      	ldr	r3, [pc, #36]	; (800af10 <prvHeapInit+0xc0>)
 800aeea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aeee:	601a      	str	r2, [r3, #0]
}
 800aef0:	bf00      	nop
 800aef2:	3714      	adds	r7, #20
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bc80      	pop	{r7}
 800aef8:	4770      	bx	lr
 800aefa:	bf00      	nop
 800aefc:	20000d24 	.word	0x20000d24
 800af00:	20003524 	.word	0x20003524
 800af04:	2000352c 	.word	0x2000352c
 800af08:	20003534 	.word	0x20003534
 800af0c:	20003530 	.word	0x20003530
 800af10:	20003538 	.word	0x20003538

0800af14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800af14:	b480      	push	{r7}
 800af16:	b085      	sub	sp, #20
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800af1c:	4b27      	ldr	r3, [pc, #156]	; (800afbc <prvInsertBlockIntoFreeList+0xa8>)
 800af1e:	60fb      	str	r3, [r7, #12]
 800af20:	e002      	b.n	800af28 <prvInsertBlockIntoFreeList+0x14>
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	60fb      	str	r3, [r7, #12]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d8f7      	bhi.n	800af22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	68ba      	ldr	r2, [r7, #8]
 800af3c:	4413      	add	r3, r2
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	429a      	cmp	r2, r3
 800af42:	d108      	bne.n	800af56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	685a      	ldr	r2, [r3, #4]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	441a      	add	r2, r3
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	68ba      	ldr	r2, [r7, #8]
 800af60:	441a      	add	r2, r3
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	429a      	cmp	r2, r3
 800af68:	d118      	bne.n	800af9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	4b14      	ldr	r3, [pc, #80]	; (800afc0 <prvInsertBlockIntoFreeList+0xac>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	429a      	cmp	r2, r3
 800af74:	d00d      	beq.n	800af92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	685a      	ldr	r2, [r3, #4]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	441a      	add	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	601a      	str	r2, [r3, #0]
 800af90:	e008      	b.n	800afa4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af92:	4b0b      	ldr	r3, [pc, #44]	; (800afc0 <prvInsertBlockIntoFreeList+0xac>)
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	601a      	str	r2, [r3, #0]
 800af9a:	e003      	b.n	800afa4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681a      	ldr	r2, [r3, #0]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800afa4:	68fa      	ldr	r2, [r7, #12]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d002      	beq.n	800afb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afb2:	bf00      	nop
 800afb4:	3714      	adds	r7, #20
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bc80      	pop	{r7}
 800afba:	4770      	bx	lr
 800afbc:	20003524 	.word	0x20003524
 800afc0:	2000352c 	.word	0x2000352c

0800afc4 <__libc_init_array>:
 800afc4:	b570      	push	{r4, r5, r6, lr}
 800afc6:	2500      	movs	r5, #0
 800afc8:	4e0c      	ldr	r6, [pc, #48]	; (800affc <__libc_init_array+0x38>)
 800afca:	4c0d      	ldr	r4, [pc, #52]	; (800b000 <__libc_init_array+0x3c>)
 800afcc:	1ba4      	subs	r4, r4, r6
 800afce:	10a4      	asrs	r4, r4, #2
 800afd0:	42a5      	cmp	r5, r4
 800afd2:	d109      	bne.n	800afe8 <__libc_init_array+0x24>
 800afd4:	f000 f82e 	bl	800b034 <_init>
 800afd8:	2500      	movs	r5, #0
 800afda:	4e0a      	ldr	r6, [pc, #40]	; (800b004 <__libc_init_array+0x40>)
 800afdc:	4c0a      	ldr	r4, [pc, #40]	; (800b008 <__libc_init_array+0x44>)
 800afde:	1ba4      	subs	r4, r4, r6
 800afe0:	10a4      	asrs	r4, r4, #2
 800afe2:	42a5      	cmp	r5, r4
 800afe4:	d105      	bne.n	800aff2 <__libc_init_array+0x2e>
 800afe6:	bd70      	pop	{r4, r5, r6, pc}
 800afe8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800afec:	4798      	blx	r3
 800afee:	3501      	adds	r5, #1
 800aff0:	e7ee      	b.n	800afd0 <__libc_init_array+0xc>
 800aff2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aff6:	4798      	blx	r3
 800aff8:	3501      	adds	r5, #1
 800affa:	e7f2      	b.n	800afe2 <__libc_init_array+0x1e>
 800affc:	0800b40c 	.word	0x0800b40c
 800b000:	0800b40c 	.word	0x0800b40c
 800b004:	0800b40c 	.word	0x0800b40c
 800b008:	0800b410 	.word	0x0800b410

0800b00c <memcpy>:
 800b00c:	b510      	push	{r4, lr}
 800b00e:	1e43      	subs	r3, r0, #1
 800b010:	440a      	add	r2, r1
 800b012:	4291      	cmp	r1, r2
 800b014:	d100      	bne.n	800b018 <memcpy+0xc>
 800b016:	bd10      	pop	{r4, pc}
 800b018:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b01c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b020:	e7f7      	b.n	800b012 <memcpy+0x6>

0800b022 <memset>:
 800b022:	4603      	mov	r3, r0
 800b024:	4402      	add	r2, r0
 800b026:	4293      	cmp	r3, r2
 800b028:	d100      	bne.n	800b02c <memset+0xa>
 800b02a:	4770      	bx	lr
 800b02c:	f803 1b01 	strb.w	r1, [r3], #1
 800b030:	e7f9      	b.n	800b026 <memset+0x4>
	...

0800b034 <_init>:
 800b034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b036:	bf00      	nop
 800b038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b03a:	bc08      	pop	{r3}
 800b03c:	469e      	mov	lr, r3
 800b03e:	4770      	bx	lr

0800b040 <_fini>:
 800b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b042:	bf00      	nop
 800b044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b046:	bc08      	pop	{r3}
 800b048:	469e      	mov	lr, r3
 800b04a:	4770      	bx	lr
