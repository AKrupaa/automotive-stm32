
Automotive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000966c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  080097ac  080097ac  000197ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b3c  08009b3c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08009b3c  08009b3c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b3c  08009b3c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b3c  08009b3c  00019b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b40  08009b40  00019b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003794  20000010  08009b54  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200037a4  08009b54  000237a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000297e4  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004ffe  00000000  00000000  0004981d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019a8  00000000  00000000  0004e820  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001748  00000000  00000000  000501c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e4ec  00000000  00000000  00051910  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001cfa3  00000000  00000000  0006fdfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aa741  00000000  00000000  0008cd9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001374e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006694  00000000  00000000  0013755c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	08009794 	.word	0x08009794

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	08009794 	.word	0x08009794

08000180 <h_bridge_set_left_duty>:
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

	return true;
}

void h_bridge_set_left_duty(uint8_t percent) {
 8000180:	b480      	push	{r7}
 8000182:	b085      	sub	sp, #20
 8000184:	af00      	add	r7, sp, #0
 8000186:	4603      	mov	r3, r0
 8000188:	71fb      	strb	r3, [r7, #7]
	if (percent > 100)
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	2b64      	cmp	r3, #100	; 0x64
 800018e:	d901      	bls.n	8000194 <h_bridge_set_left_duty+0x14>
		percent = 100;
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	71fb      	strb	r3, [r7, #7]

	if (percent < 1)
 8000194:	79fb      	ldrb	r3, [r7, #7]
 8000196:	2b00      	cmp	r3, #0
 8000198:	d101      	bne.n	800019e <h_bridge_set_left_duty+0x1e>
		percent = 0;
 800019a:	2300      	movs	r3, #0
 800019c:	71fb      	strb	r3, [r7, #7]

	uint32_t value = percent * htim2.Init.Period / 100;
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	4a08      	ldr	r2, [pc, #32]	; (80001c4 <h_bridge_set_left_duty+0x44>)
 80001a2:	68d2      	ldr	r2, [r2, #12]
 80001a4:	fb02 f303 	mul.w	r3, r2, r3
 80001a8:	4a07      	ldr	r2, [pc, #28]	; (80001c8 <h_bridge_set_left_duty+0x48>)
 80001aa:	fba2 2303 	umull	r2, r3, r2, r3
 80001ae:	095b      	lsrs	r3, r3, #5
 80001b0:	60fb      	str	r3, [r7, #12]
//	htim2.Instance->CCR1 = value;
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, value);
 80001b2:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <h_bridge_set_left_duty+0x44>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	68fa      	ldr	r2, [r7, #12]
 80001b8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80001ba:	bf00      	nop
 80001bc:	3714      	adds	r7, #20
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr
 80001c4:	200036e4 	.word	0x200036e4
 80001c8:	51eb851f 	.word	0x51eb851f

080001cc <h_bridge_set_right_duty>:

void h_bridge_set_right_duty(uint8_t percent) {
 80001cc:	b480      	push	{r7}
 80001ce:	b085      	sub	sp, #20
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]
	if (percent > 100)
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	2b64      	cmp	r3, #100	; 0x64
 80001da:	d901      	bls.n	80001e0 <h_bridge_set_right_duty+0x14>
		percent = 100;
 80001dc:	2364      	movs	r3, #100	; 0x64
 80001de:	71fb      	strb	r3, [r7, #7]

	if (percent < 1)
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d101      	bne.n	80001ea <h_bridge_set_right_duty+0x1e>
		percent = 0;
 80001e6:	2300      	movs	r3, #0
 80001e8:	71fb      	strb	r3, [r7, #7]

	uint32_t value = percent * htim3.Init.Period / 100;
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	4a08      	ldr	r2, [pc, #32]	; (8000210 <h_bridge_set_right_duty+0x44>)
 80001ee:	68d2      	ldr	r2, [r2, #12]
 80001f0:	fb02 f303 	mul.w	r3, r2, r3
 80001f4:	4a07      	ldr	r2, [pc, #28]	; (8000214 <h_bridge_set_right_duty+0x48>)
 80001f6:	fba2 2303 	umull	r2, r3, r2, r3
 80001fa:	095b      	lsrs	r3, r3, #5
 80001fc:	60fb      	str	r3, [r7, #12]
//	htim3.Instance->CCR3 = value;
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, value);
 80001fe:	4b04      	ldr	r3, [pc, #16]	; (8000210 <h_bridge_set_right_duty+0x44>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	68fa      	ldr	r2, [r7, #12]
 8000204:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000206:	bf00      	nop
 8000208:	3714      	adds	r7, #20
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr
 8000210:	2000366c 	.word	0x2000366c
 8000214:	51eb851f 	.word	0x51eb851f

08000218 <h_bridge_cw_left>:

void h_bridge_cw_left(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 800021c:	2201      	movs	r2, #1
 800021e:	2102      	movs	r1, #2
 8000220:	4804      	ldr	r0, [pc, #16]	; (8000234 <h_bridge_cw_left+0x1c>)
 8000222:	f002 fc0d 	bl	8002a40 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 8000226:	2200      	movs	r2, #0
 8000228:	2104      	movs	r1, #4
 800022a:	4802      	ldr	r0, [pc, #8]	; (8000234 <h_bridge_cw_left+0x1c>)
 800022c:	f002 fc08 	bl	8002a40 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8000230:	bf00      	nop
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40020800 	.word	0x40020800

08000238 <h_bridge_cw_right>:

void h_bridge_cw_right(void) {
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 800023c:	2201      	movs	r2, #1
 800023e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000242:	4805      	ldr	r0, [pc, #20]	; (8000258 <h_bridge_cw_right+0x20>)
 8000244:	f002 fbfc 	bl	8002a40 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 8000248:	2200      	movs	r2, #0
 800024a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800024e:	4803      	ldr	r0, [pc, #12]	; (800025c <h_bridge_cw_right+0x24>)
 8000250:	f002 fbf6 	bl	8002a40 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8000254:	bf00      	nop
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40020000 	.word	0x40020000
 800025c:	40020800 	.word	0x40020800

08000260 <h_bridge_ccw_left>:

void h_bridge_ccw_left(void) {
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 8000264:	2200      	movs	r2, #0
 8000266:	2102      	movs	r1, #2
 8000268:	4804      	ldr	r0, [pc, #16]	; (800027c <h_bridge_ccw_left+0x1c>)
 800026a:	f002 fbe9 	bl	8002a40 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 800026e:	2201      	movs	r2, #1
 8000270:	2104      	movs	r1, #4
 8000272:	4802      	ldr	r0, [pc, #8]	; (800027c <h_bridge_ccw_left+0x1c>)
 8000274:	f002 fbe4 	bl	8002a40 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}
 800027c:	40020800 	.word	0x40020800

08000280 <h_bridge_ccw_right>:

void h_bridge_ccw_right(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 8000284:	2200      	movs	r2, #0
 8000286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800028a:	4805      	ldr	r0, [pc, #20]	; (80002a0 <h_bridge_ccw_right+0x20>)
 800028c:	f002 fbd8 	bl	8002a40 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 8000290:	2201      	movs	r2, #1
 8000292:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000296:	4803      	ldr	r0, [pc, #12]	; (80002a4 <h_bridge_ccw_right+0x24>)
 8000298:	f002 fbd2 	bl	8002a40 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40020000 	.word	0x40020000
 80002a4:	40020800 	.word	0x40020800

080002a8 <h_bridge_coast>:

/// Lets the motor coast
void h_bridge_coast(void) {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 80002ac:	2200      	movs	r2, #0
 80002ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002b2:	480a      	ldr	r0, [pc, #40]	; (80002dc <h_bridge_coast+0x34>)
 80002b4:	f002 fbc4 	bl	8002a40 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 80002b8:	2200      	movs	r2, #0
 80002ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002be:	4808      	ldr	r0, [pc, #32]	; (80002e0 <h_bridge_coast+0x38>)
 80002c0:	f002 fbbe 	bl	8002a40 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 80002c4:	2200      	movs	r2, #0
 80002c6:	2102      	movs	r1, #2
 80002c8:	4805      	ldr	r0, [pc, #20]	; (80002e0 <h_bridge_coast+0x38>)
 80002ca:	f002 fbb9 	bl	8002a40 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 80002ce:	2200      	movs	r2, #0
 80002d0:	2104      	movs	r1, #4
 80002d2:	4803      	ldr	r0, [pc, #12]	; (80002e0 <h_bridge_coast+0x38>)
 80002d4:	f002 fbb4 	bl	8002a40 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40020000 	.word	0x40020000
 80002e0:	40020800 	.word	0x40020800

080002e4 <ble_send_data>:

/*
 * PUBLIC ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */

bool ble_send_data(char *pData, uint16_t size) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	460b      	mov	r3, r1
 80002ee:	807b      	strh	r3, [r7, #2]
	ble_turn_on_transmittion;
 80002f0:	2200      	movs	r2, #0
 80002f2:	2110      	movs	r1, #16
 80002f4:	480e      	ldr	r0, [pc, #56]	; (8000330 <ble_send_data+0x4c>)
 80002f6:	f002 fba3 	bl	8002a40 <HAL_GPIO_WritePin>
	if (HAL_UART_Transmit(&huart3, (uint8_t*) pData, size, 100)
 80002fa:	887a      	ldrh	r2, [r7, #2]
 80002fc:	2364      	movs	r3, #100	; 0x64
 80002fe:	6879      	ldr	r1, [r7, #4]
 8000300:	480c      	ldr	r0, [pc, #48]	; (8000334 <ble_send_data+0x50>)
 8000302:	f005 fde7 	bl	8005ed4 <HAL_UART_Transmit>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d006      	beq.n	800031a <ble_send_data+0x36>
			!= HAL_OK) {
		ble_turn_off_transmittion;
 800030c:	2201      	movs	r2, #1
 800030e:	2110      	movs	r1, #16
 8000310:	4807      	ldr	r0, [pc, #28]	; (8000330 <ble_send_data+0x4c>)
 8000312:	f002 fb95 	bl	8002a40 <HAL_GPIO_WritePin>
		return false;
 8000316:	2300      	movs	r3, #0
 8000318:	e005      	b.n	8000326 <ble_send_data+0x42>
	}
	ble_turn_off_transmittion;
 800031a:	2201      	movs	r2, #1
 800031c:	2110      	movs	r1, #16
 800031e:	4804      	ldr	r0, [pc, #16]	; (8000330 <ble_send_data+0x4c>)
 8000320:	f002 fb8e 	bl	8002a40 <HAL_GPIO_WritePin>
	return true;
 8000324:	2301      	movs	r3, #1
}
 8000326:	4618      	mov	r0, r3
 8000328:	3708      	adds	r7, #8
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40020800 	.word	0x40020800
 8000334:	20003720 	.word	0x20003720

08000338 <ble_receive_data>:

bool ble_receive_data(char *pData) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	ble_turn_on_transmittion;
 8000340:	2200      	movs	r2, #0
 8000342:	2110      	movs	r1, #16
 8000344:	480e      	ldr	r0, [pc, #56]	; (8000380 <ble_receive_data+0x48>)
 8000346:	f002 fb7b 	bl	8002a40 <HAL_GPIO_WritePin>
	if (HAL_UART_Receive(&huart3, (uint8_t*) pData, BLE_MAX_SIZE, 1000)
 800034a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800034e:	2218      	movs	r2, #24
 8000350:	6879      	ldr	r1, [r7, #4]
 8000352:	480c      	ldr	r0, [pc, #48]	; (8000384 <ble_receive_data+0x4c>)
 8000354:	f005 fe57 	bl	8006006 <HAL_UART_Receive>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d006      	beq.n	800036c <ble_receive_data+0x34>
			!= HAL_OK) {
		ble_turn_off_transmittion;
 800035e:	2201      	movs	r2, #1
 8000360:	2110      	movs	r1, #16
 8000362:	4807      	ldr	r0, [pc, #28]	; (8000380 <ble_receive_data+0x48>)
 8000364:	f002 fb6c 	bl	8002a40 <HAL_GPIO_WritePin>
		return false;
 8000368:	2300      	movs	r3, #0
 800036a:	e005      	b.n	8000378 <ble_receive_data+0x40>
	}
	ble_turn_off_transmittion;
 800036c:	2201      	movs	r2, #1
 800036e:	2110      	movs	r1, #16
 8000370:	4803      	ldr	r0, [pc, #12]	; (8000380 <ble_receive_data+0x48>)
 8000372:	f002 fb65 	bl	8002a40 <HAL_GPIO_WritePin>
	return true;
 8000376:	2301      	movs	r3, #1
}
 8000378:	4618      	mov	r0, r3
 800037a:	3708      	adds	r7, #8
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40020800 	.word	0x40020800
 8000384:	20003720 	.word	0x20003720

08000388 <QMC5883L_Read_Reg>:
	uint16_t buf = ((buff[1] << 8) | buff[0]);	// U2
	buf = (~buf) + 1; // decimal
	return (int) buf / 100; // our value
}

uint8_t QMC5883L_Read_Reg(uint8_t reg) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b088      	sub	sp, #32
 800038c:	af04      	add	r7, sp, #16
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[1];
	HAL_I2C_Mem_Read(QMC5883L_I2C_PORT, QMC5883L_ADDRESS, reg, 1, Buffer, 1,
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	b29a      	uxth	r2, r3
 8000396:	230a      	movs	r3, #10
 8000398:	9302      	str	r3, [sp, #8]
 800039a:	2301      	movs	r3, #1
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	f107 030c 	add.w	r3, r7, #12
 80003a2:	9300      	str	r3, [sp, #0]
 80003a4:	2301      	movs	r3, #1
 80003a6:	213c      	movs	r1, #60	; 0x3c
 80003a8:	4803      	ldr	r0, [pc, #12]	; (80003b8 <QMC5883L_Read_Reg+0x30>)
 80003aa:	f002 fe3b 	bl	8003024 <HAL_I2C_Mem_Read>
			10);
	return Buffer[0];
 80003ae:	7b3b      	ldrb	r3, [r7, #12]
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	3710      	adds	r7, #16
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	200035dc 	.word	0x200035dc

080003bc <QMC5883L_Write_Reg>:

void QMC5883L_Write_Reg(uint8_t reg, uint8_t data) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af02      	add	r7, sp, #8
 80003c2:	4603      	mov	r3, r0
 80003c4:	460a      	mov	r2, r1
 80003c6:	71fb      	strb	r3, [r7, #7]
 80003c8:	4613      	mov	r3, r2
 80003ca:	71bb      	strb	r3, [r7, #6]
	uint8_t Buffer[2] = { reg, data };
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	733b      	strb	r3, [r7, #12]
 80003d0:	79bb      	ldrb	r3, [r7, #6]
 80003d2:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(QMC5883L_I2C_PORT, QMC5883L_ADDRESS, Buffer, 2, 10);
 80003d4:	f107 020c 	add.w	r2, r7, #12
 80003d8:	230a      	movs	r3, #10
 80003da:	9300      	str	r3, [sp, #0]
 80003dc:	2302      	movs	r3, #2
 80003de:	213c      	movs	r1, #60	; 0x3c
 80003e0:	4803      	ldr	r0, [pc, #12]	; (80003f0 <QMC5883L_Write_Reg+0x34>)
 80003e2:	f002 fd21 	bl	8002e28 <HAL_I2C_Master_Transmit>
}
 80003e6:	bf00      	nop
 80003e8:	3710      	adds	r7, #16
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	200035dc 	.word	0x200035dc

080003f4 <QMC5883L_Read_Data>:

void QMC5883L_Read_Data(int16_t *MagX, int16_t *MagY, int16_t *MagZ) // (-32768 / +32768)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	60f8      	str	r0, [r7, #12]
 80003fc:	60b9      	str	r1, [r7, #8]
 80003fe:	607a      	str	r2, [r7, #4]
	*MagX = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_X_LSB)
 8000400:	2004      	movs	r0, #4
 8000402:	f7ff ffc1 	bl	8000388 <QMC5883L_Read_Reg>
 8000406:	4603      	mov	r3, r0
 8000408:	b21c      	sxth	r4, r3
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_X_MSB)) << 8));
 800040a:	2003      	movs	r0, #3
 800040c:	f7ff ffbc 	bl	8000388 <QMC5883L_Read_Reg>
 8000410:	4603      	mov	r3, r0
 8000412:	021b      	lsls	r3, r3, #8
 8000414:	b21b      	sxth	r3, r3
 8000416:	4323      	orrs	r3, r4
 8000418:	b21a      	sxth	r2, r3
	*MagX = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_X_LSB)
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	801a      	strh	r2, [r3, #0]
	*MagY = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Y_LSB)
 800041e:	2008      	movs	r0, #8
 8000420:	f7ff ffb2 	bl	8000388 <QMC5883L_Read_Reg>
 8000424:	4603      	mov	r3, r0
 8000426:	b21c      	sxth	r4, r3
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Y_MSB)) << 8));
 8000428:	2007      	movs	r0, #7
 800042a:	f7ff ffad 	bl	8000388 <QMC5883L_Read_Reg>
 800042e:	4603      	mov	r3, r0
 8000430:	021b      	lsls	r3, r3, #8
 8000432:	b21b      	sxth	r3, r3
 8000434:	4323      	orrs	r3, r4
 8000436:	b21a      	sxth	r2, r3
	*MagY = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Y_LSB)
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	801a      	strh	r2, [r3, #0]
	*MagZ = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Z_LSB)
 800043c:	2006      	movs	r0, #6
 800043e:	f7ff ffa3 	bl	8000388 <QMC5883L_Read_Reg>
 8000442:	4603      	mov	r3, r0
 8000444:	b21c      	sxth	r4, r3
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Z_MSB)) << 8));
 8000446:	2005      	movs	r0, #5
 8000448:	f7ff ff9e 	bl	8000388 <QMC5883L_Read_Reg>
 800044c:	4603      	mov	r3, r0
 800044e:	021b      	lsls	r3, r3, #8
 8000450:	b21b      	sxth	r3, r3
 8000452:	4323      	orrs	r3, r4
 8000454:	b21a      	sxth	r2, r3
	*MagZ = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Z_LSB)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	801a      	strh	r2, [r3, #0]
}
 800045a:	bf00      	nop
 800045c:	3714      	adds	r7, #20
 800045e:	46bd      	mov	sp, r7
 8000460:	bd90      	pop	{r4, r7, pc}

08000462 <QMC5883L_Initialize>:
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_TEMP_READ_MSB)) << 8))
			/ 100;
}

void QMC5883L_Initialize(_qmc5883l_MODE MODE, _qmc5883l_ODR ODR,
		_qmc5883l_RNG RNG, _qmc5883l_OSR OSR) {
 8000462:	b590      	push	{r4, r7, lr}
 8000464:	b083      	sub	sp, #12
 8000466:	af00      	add	r7, sp, #0
 8000468:	4604      	mov	r4, r0
 800046a:	4608      	mov	r0, r1
 800046c:	4611      	mov	r1, r2
 800046e:	461a      	mov	r2, r3
 8000470:	4623      	mov	r3, r4
 8000472:	71fb      	strb	r3, [r7, #7]
 8000474:	4603      	mov	r3, r0
 8000476:	71bb      	strb	r3, [r7, #6]
 8000478:	460b      	mov	r3, r1
 800047a:	717b      	strb	r3, [r7, #5]
 800047c:	4613      	mov	r3, r2
 800047e:	713b      	strb	r3, [r7, #4]
	QMC5883L_Write_Reg(QMC5883L_CONFIG_3, 0x01);
 8000480:	2101      	movs	r1, #1
 8000482:	200b      	movs	r0, #11
 8000484:	f7ff ff9a 	bl	80003bc <QMC5883L_Write_Reg>
	QMC5883L_Write_Reg(QMC5883L_CONFIG_1, MODE | ODR | RNG | OSR);
 8000488:	79fa      	ldrb	r2, [r7, #7]
 800048a:	79bb      	ldrb	r3, [r7, #6]
 800048c:	4313      	orrs	r3, r2
 800048e:	b2da      	uxtb	r2, r3
 8000490:	797b      	ldrb	r3, [r7, #5]
 8000492:	4313      	orrs	r3, r2
 8000494:	b2da      	uxtb	r2, r3
 8000496:	793b      	ldrb	r3, [r7, #4]
 8000498:	4313      	orrs	r3, r2
 800049a:	b2db      	uxtb	r3, r3
 800049c:	4619      	mov	r1, r3
 800049e:	2009      	movs	r0, #9
 80004a0:	f7ff ff8c 	bl	80003bc <QMC5883L_Write_Reg>
}
 80004a4:	bf00      	nop
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd90      	pop	{r4, r7, pc}

080004ac <QMC5883L_InterruptConfig>:

void QMC5883L_Reset() {
	QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x81);
}

void QMC5883L_InterruptConfig(_qmc5883l_INT INT) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	71fb      	strb	r3, [r7, #7]
	if (INT == INTERRUPT_ENABLE) {
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d104      	bne.n	80004c6 <QMC5883L_InterruptConfig+0x1a>
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x00);
 80004bc:	2100      	movs	r1, #0
 80004be:	200a      	movs	r0, #10
 80004c0:	f7ff ff7c 	bl	80003bc <QMC5883L_Write_Reg>
	} else {
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x01);
	}
}
 80004c4:	e003      	b.n	80004ce <QMC5883L_InterruptConfig+0x22>
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x01);
 80004c6:	2101      	movs	r1, #1
 80004c8:	200a      	movs	r0, #10
 80004ca:	f7ff ff77 	bl	80003bc <QMC5883L_Write_Reg>
}
 80004ce:	bf00      	nop
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}

080004d6 <device_init>:

#include "device_init.h"
#include "stdint.h"


void device_init(void) {
 80004d6:	b480      	push	{r7}
 80004d8:	b083      	sub	sp, #12
 80004da:	af00      	add	r7, sp, #0

	uint16_t successCnt = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	80fb      	strh	r3, [r7, #6]
	uint16_t modsToInit = 0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < /*mod_N*/mod_0; i++) {
 80004e4:	2300      	movs	r3, #0
 80004e6:	807b      	strh	r3, [r7, #2]
 80004e8:	bf00      	nop
		}

		modsToInit++;
	}

	if (modsToInit != successCnt) {
 80004ea:	88ba      	ldrh	r2, [r7, #4]
 80004ec:	88fb      	ldrh	r3, [r7, #6]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	d000      	beq.n	80004f4 <device_init+0x1e>
		// some kind of error
		while (1)
 80004f2:	e7fe      	b.n	80004f2 <device_init+0x1c>
			; //TODO: call some error handler
	}

}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
	...

08000500 <rt_init>:
TaskHandle_t rt_tasks[rt_task_N];
QueueHandle_t rt_queues[rt_queue_N];
EventGroupHandle_t rt_evgroups[rt_evgroup_N];
TimerHandle_t rt_timers[rt_timer_N];

void rt_init(void) {
 8000500:	b5b0      	push	{r4, r5, r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af02      	add	r7, sp, #8

	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 8000506:	2300      	movs	r3, #0
 8000508:	77fb      	strb	r3, [r7, #31]
 800050a:	e02c      	b.n	8000566 <rt_init+0x66>
		rt_task_def_t const *def = rt_task_def + task;
 800050c:	7ffa      	ldrb	r2, [r7, #31]
 800050e:	4613      	mov	r3, r2
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	4413      	add	r3, r2
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	461a      	mov	r2, r3
 8000518:	4b47      	ldr	r3, [pc, #284]	; (8000638 <rt_init+0x138>)
 800051a:	4413      	add	r3, r2
 800051c:	607b      	str	r3, [r7, #4]
		TaskHandle_t *handle = rt_tasks + task;
 800051e:	7ffb      	ldrb	r3, [r7, #31]
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	4a46      	ldr	r2, [pc, #280]	; (800063c <rt_init+0x13c>)
 8000524:	4413      	add	r3, r2
 8000526:	603b      	str	r3, [r7, #0]
		if (def->active) {
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	7c9b      	ldrb	r3, [r3, #18]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d014      	beq.n	800055a <rt_init+0x5a>
			if (xTaskCreate(def->pvTaskCode, def->pcName, def->usStackDepth,
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	6818      	ldr	r0, [r3, #0]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	6859      	ldr	r1, [r3, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	8a1c      	ldrh	r4, [r3, #16]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	689d      	ldr	r5, [r3, #8]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	683a      	ldr	r2, [r7, #0]
 8000546:	9201      	str	r2, [sp, #4]
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	462b      	mov	r3, r5
 800054c:	4622      	mov	r2, r4
 800054e:	f007 f94c 	bl	80077ea <xTaskCreate>
 8000552:	4603      	mov	r3, r0
 8000554:	2b01      	cmp	r3, #1
 8000556:	d003      	beq.n	8000560 <rt_init+0x60>
					def->pvParameters, def->uxPriority, handle) != pdPASS) {
//				error :-(
				while (1)
 8000558:	e7fe      	b.n	8000558 <rt_init+0x58>
					;
			}
		} else {
			*handle = 0;
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 8000560:	7ffb      	ldrb	r3, [r7, #31]
 8000562:	3301      	adds	r3, #1
 8000564:	77fb      	strb	r3, [r7, #31]
 8000566:	7ffb      	ldrb	r3, [r7, #31]
 8000568:	2b04      	cmp	r3, #4
 800056a:	d9cf      	bls.n	800050c <rt_init+0xc>
		}
	}

	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 800056c:	2300      	movs	r3, #0
 800056e:	77bb      	strb	r3, [r7, #30]
 8000570:	e01c      	b.n	80005ac <rt_init+0xac>
		rt_queue_def_t const *def = rt_queue_def + queue;
 8000572:	7fbb      	ldrb	r3, [r7, #30]
 8000574:	011b      	lsls	r3, r3, #4
 8000576:	4a32      	ldr	r2, [pc, #200]	; (8000640 <rt_init+0x140>)
 8000578:	4413      	add	r3, r2
 800057a:	60fb      	str	r3, [r7, #12]
		QueueHandle_t *handle = rt_queues + queue;
 800057c:	7fbb      	ldrb	r3, [r7, #30]
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	4a30      	ldr	r2, [pc, #192]	; (8000644 <rt_init+0x144>)
 8000582:	4413      	add	r3, r2
 8000584:	60bb      	str	r3, [r7, #8]

		if ((*handle = xQueueCreate(def->uxQueueLength, def->uxItemSize))
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	6818      	ldr	r0, [r3, #0]
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	2200      	movs	r2, #0
 8000590:	4619      	mov	r1, r3
 8000592:	f006 fc9b 	bl	8006ecc <xQueueGenericCreate>
 8000596:	4602      	mov	r2, r0
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d100      	bne.n	80005a6 <rt_init+0xa6>
				== 0) {
			while (1)
 80005a4:	e7fe      	b.n	80005a4 <rt_init+0xa4>
	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 80005a6:	7fbb      	ldrb	r3, [r7, #30]
 80005a8:	3301      	adds	r3, #1
 80005aa:	77bb      	strb	r3, [r7, #30]
 80005ac:	7fbb      	ldrb	r3, [r7, #30]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d9df      	bls.n	8000572 <rt_init+0x72>
				;
		}
	}

	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	777b      	strb	r3, [r7, #29]
 80005b6:	e020      	b.n	80005fa <rt_init+0xfa>
		rt_timer_def_t const *def = rt_timer_def + timer;
 80005b8:	7f7b      	ldrb	r3, [r7, #29]
 80005ba:	011b      	lsls	r3, r3, #4
 80005bc:	4a22      	ldr	r2, [pc, #136]	; (8000648 <rt_init+0x148>)
 80005be:	4413      	add	r3, r2
 80005c0:	617b      	str	r3, [r7, #20]
		TimerHandle_t *handle = rt_timers + timer;
 80005c2:	7f7b      	ldrb	r3, [r7, #29]
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	4a21      	ldr	r2, [pc, #132]	; (800064c <rt_init+0x14c>)
 80005c8:	4413      	add	r3, r2
 80005ca:	613b      	str	r3, [r7, #16]

		if ((*handle = xTimerCreate(def->pcTimerName, def->xTimerPeriodInTicks,
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	6818      	ldr	r0, [r3, #0]
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	6859      	ldr	r1, [r3, #4]
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	689a      	ldr	r2, [r3, #8]
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2300      	movs	r3, #0
 80005e0:	f008 f9ae 	bl	8008940 <xTimerCreate>
 80005e4:	4602      	mov	r2, r0
 80005e6:	693b      	ldr	r3, [r7, #16]
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	693b      	ldr	r3, [r7, #16]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d100      	bne.n	80005f4 <rt_init+0xf4>
				def->uxAutoReload, NULL, def->pxCallbackFunction)) == 0)
			while (1)
 80005f2:	e7fe      	b.n	80005f2 <rt_init+0xf2>
	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 80005f4:	7f7b      	ldrb	r3, [r7, #29]
 80005f6:	3301      	adds	r3, #1
 80005f8:	777b      	strb	r3, [r7, #29]
 80005fa:	7f7b      	ldrb	r3, [r7, #29]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d9db      	bls.n	80005b8 <rt_init+0xb8>
				;
	}

	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 8000600:	2300      	movs	r3, #0
 8000602:	773b      	strb	r3, [r7, #28]
 8000604:	e011      	b.n	800062a <rt_init+0x12a>
			evgroup++) {
		EventGroupHandle_t *handle = rt_evgroups + evgroup;
 8000606:	7f3b      	ldrb	r3, [r7, #28]
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	4a11      	ldr	r2, [pc, #68]	; (8000650 <rt_init+0x150>)
 800060c:	4413      	add	r3, r2
 800060e:	61bb      	str	r3, [r7, #24]

		if ((*handle = xEventGroupCreate()) == 0) {
 8000610:	f006 f922 	bl	8006858 <xEventGroupCreate>
 8000614:	4602      	mov	r2, r0
 8000616:	69bb      	ldr	r3, [r7, #24]
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	69bb      	ldr	r3, [r7, #24]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d100      	bne.n	8000624 <rt_init+0x124>
			while (1)
 8000622:	e7fe      	b.n	8000622 <rt_init+0x122>
			evgroup++) {
 8000624:	7f3b      	ldrb	r3, [r7, #28]
 8000626:	3301      	adds	r3, #1
 8000628:	773b      	strb	r3, [r7, #28]
	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 800062a:	7f3b      	ldrb	r3, [r7, #28]
 800062c:	2b02      	cmp	r3, #2
 800062e:	d9ea      	bls.n	8000606 <rt_init+0x106>
				;
		}
	}

}
 8000630:	bf00      	nop
 8000632:	3720      	adds	r7, #32
 8000634:	46bd      	mov	sp, r7
 8000636:	bdb0      	pop	{r4, r5, r7, pc}
 8000638:	08009a50 	.word	0x08009a50
 800063c:	20003554 	.word	0x20003554
 8000640:	08009ab4 	.word	0x08009ab4
 8000644:	2000357c 	.word	0x2000357c
 8000648:	08009ad4 	.word	0x08009ad4
 800064c:	20003568 	.word	0x20003568
 8000650:	20003570 	.word	0x20003570

08000654 <rt_evbitwait_any>:

uint32_t rt_evbitwait_any(rt_evgroup_t Ev) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af02      	add	r7, sp, #8
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	4a09      	ldr	r2, [pc, #36]	; (8000688 <rt_evbitwait_any+0x34>)
 8000662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000666:	60fb      	str	r3, [r7, #12]

	return xEventGroupWaitBits(Evh, 0x00FFFFFFu, pdTRUE, pdFALSE, portMAX_DELAY);
 8000668:	f04f 33ff 	mov.w	r3, #4294967295
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2300      	movs	r3, #0
 8000670:	2201      	movs	r2, #1
 8000672:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000676:	68f8      	ldr	r0, [r7, #12]
 8000678:	f006 f908 	bl	800688c <xEventGroupWaitBits>
 800067c:	4603      	mov	r3, r0
}
 800067e:	4618      	mov	r0, r3
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20003570 	.word	0x20003570

0800068c <rt_evbit_set>:

void rt_evbit_set(rt_evgroup_t Ev, uint32_t bit) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	6039      	str	r1, [r7, #0]
 8000696:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 8000698:	2201      	movs	r2, #1
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	fa02 f303 	lsl.w	r3, r2, r3
 80006a0:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	4a05      	ldr	r2, [pc, #20]	; (80006bc <rt_evbit_set+0x30>)
 80006a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006aa:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBits(Evh, msk);
 80006ac:	68f9      	ldr	r1, [r7, #12]
 80006ae:	68b8      	ldr	r0, [r7, #8]
 80006b0:	f006 f9b6 	bl	8006a20 <xEventGroupSetBits>
}
 80006b4:	bf00      	nop
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20003570 	.word	0x20003570

080006c0 <rt_evbit_set_from_ISR>:

void rt_evbit_set_from_ISR(rt_evgroup_t Ev, uint32_t bit) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	6039      	str	r1, [r7, #0]
 80006ca:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 80006cc:	2201      	movs	r2, #1
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	fa02 f303 	lsl.w	r3, r2, r3
 80006d4:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	4a06      	ldr	r2, [pc, #24]	; (80006f4 <rt_evbit_set_from_ISR+0x34>)
 80006da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006de:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBitsFromISR(Evh, msk, pdFALSE);
 80006e0:	2200      	movs	r2, #0
 80006e2:	68f9      	ldr	r1, [r7, #12]
 80006e4:	68b8      	ldr	r0, [r7, #8]
 80006e6:	f006 fa53 	bl	8006b90 <xEventGroupSetBitsFromISR>
	portYIELD_FROM_ISR(pdFALSE);
}
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20003570 	.word	0x20003570

080006f8 <rt_enqueue_ISR>:
	}

	return false;
}

bool rt_enqueue_ISR(rt_queue_t Q, void const *bf) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	6039      	str	r1, [r7, #0]
 8000702:	71fb      	strb	r3, [r7, #7]
//  assert(Q < rt_queue_N);

	QueueHandle_t Qh = rt_queues[Q];
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	4a0b      	ldr	r2, [pc, #44]	; (8000734 <rt_enqueue_ISR+0x3c>)
 8000708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800070c:	60fb      	str	r3, [r7, #12]
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
	if (xQueueSendToBackFromISR(Qh, bf, &xHigherPriorityTaskWoken) == pdPASS) {
 8000712:	f107 0208 	add.w	r2, r7, #8
 8000716:	2300      	movs	r3, #0
 8000718:	6839      	ldr	r1, [r7, #0]
 800071a:	68f8      	ldr	r0, [r7, #12]
 800071c:	f006 fd30 	bl	8007180 <xQueueGenericSendFromISR>
 8000720:	4603      	mov	r3, r0
 8000722:	2b01      	cmp	r3, #1
 8000724:	d101      	bne.n	800072a <rt_enqueue_ISR+0x32>
		return true;
 8000726:	2301      	movs	r3, #1
 8000728:	e000      	b.n	800072c <rt_enqueue_ISR+0x34>
	}

	return false;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	2000357c 	.word	0x2000357c

08000738 <rt_dequeue>:

bool rt_dequeue(rt_queue_t Q, void *bf) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	71fb      	strb	r3, [r7, #7]
//  assert(Q < rt_queue_N);

	QueueHandle_t Qh = rt_queues[Q];
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	4a0d      	ldr	r2, [pc, #52]	; (800077c <rt_dequeue+0x44>)
 8000748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800074c:	60fb      	str	r3, [r7, #12]
	TickType_t to = rt_queue_def[Q].timeout_deq;
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	4a0b      	ldr	r2, [pc, #44]	; (8000780 <rt_dequeue+0x48>)
 8000752:	011b      	lsls	r3, r3, #4
 8000754:	4413      	add	r3, r2
 8000756:	330c      	adds	r3, #12
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	60bb      	str	r3, [r7, #8]

	if (xQueueReceive(Qh, bf, to) == pdPASS) {
 800075c:	68ba      	ldr	r2, [r7, #8]
 800075e:	6839      	ldr	r1, [r7, #0]
 8000760:	68f8      	ldr	r0, [r7, #12]
 8000762:	f006 fda1 	bl	80072a8 <xQueueReceive>
 8000766:	4603      	mov	r3, r0
 8000768:	2b01      	cmp	r3, #1
 800076a:	d101      	bne.n	8000770 <rt_dequeue+0x38>
		return true;
 800076c:	2301      	movs	r3, #1
 800076e:	e000      	b.n	8000772 <rt_dequeue+0x3a>
	}

	return false;
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	2000357c 	.word	0x2000357c
 8000780:	08009ab4 	.word	0x08009ab4

08000784 <rt_queue_peek>:

bool rt_queue_peek(rt_queue_t Q, void *bf) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	6039      	str	r1, [r7, #0]
 800078e:	71fb      	strb	r3, [r7, #7]

	QueueHandle_t Qh = rt_queues[Q];
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4a09      	ldr	r2, [pc, #36]	; (80007b8 <rt_queue_peek+0x34>)
 8000794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000798:	60fb      	str	r3, [r7, #12]

	if (xQueueReceive(Qh, bf, pdMS_TO_TICKS(portMAX_DELAY)) == pdPASS) {
 800079a:	4a08      	ldr	r2, [pc, #32]	; (80007bc <rt_queue_peek+0x38>)
 800079c:	6839      	ldr	r1, [r7, #0]
 800079e:	68f8      	ldr	r0, [r7, #12]
 80007a0:	f006 fd82 	bl	80072a8 <xQueueReceive>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d101      	bne.n	80007ae <rt_queue_peek+0x2a>
		return true;
 80007aa:	2301      	movs	r3, #1
 80007ac:	e000      	b.n	80007b0 <rt_queue_peek+0x2c>
	}

	return false;
 80007ae:	2300      	movs	r3, #0

}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	2000357c 	.word	0x2000357c
 80007bc:	00418936 	.word	0x00418936

080007c0 <task_ble>:
#include "bluetooth_le.h"
#include "state_machine.h"
#include <stdio.h>
//extern char ble_pData[BLE_MAX_SIZE];
// working all the time, checking if something is received or sending data to android device
void task_ble(void *pvParameters) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	(void*) pvParameters;

//	int i = 0;
//	const TickType_t xDelay1000ms = pdMS_TO_TICKS(5000);
	bool status;
	xQueueBleData receivedBleData = { 0 };
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
	char ble_pData[BLE_MAX_SIZE] = { 0 };
 80007cc:	f107 0308 	add.w	r3, r7, #8
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
 80007dc:	615a      	str	r2, [r3, #20]
	for (;;) {

//		vTaskDelay(xDelay1000ms);

		status = rt_queue_peek(rt_queue_ble, &receivedBleData);
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	4619      	mov	r1, r3
 80007e4:	2000      	movs	r0, #0
 80007e6:	f7ff ffcd 	bl	8000784 <rt_queue_peek>
 80007ea:	4603      	mov	r3, r0
 80007ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (status) {
 80007f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d0f2      	beq.n	80007de <task_ble+0x1e>
			if (receivedBleData.info == ble_received) {
 80007f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d11d      	bne.n	800083c <task_ble+0x7c>
//				memcpy(ble_pData, receivedBleData.value, BLE_MAX_SIZE);

				switch (receivedBleData.command) {
 8000800:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000804:	2b02      	cmp	r3, #2
 8000806:	d008      	beq.n	800081a <task_ble+0x5a>
 8000808:	2b03      	cmp	r3, #3
 800080a:	d00b      	beq.n	8000824 <task_ble+0x64>
 800080c:	2b01      	cmp	r3, #1
 800080e:	d10e      	bne.n	800082e <task_ble+0x6e>
				case BLE_RECEIVED_DO_NOTHING:
					rt_evbit_set(rt_evgroup_state_machine,
 8000810:	2100      	movs	r1, #0
 8000812:	2001      	movs	r0, #1
 8000814:	f7ff ff3a 	bl	800068c <rt_evbit_set>
							evgroup_state_m_do_nothing);
					break;
 8000818:	e011      	b.n	800083e <task_ble+0x7e>
				case BLE_RECEIVED_AUTO_MANUAL:
					rt_evbit_set(rt_evgroup_state_machine,
 800081a:	2101      	movs	r1, #1
 800081c:	2001      	movs	r0, #1
 800081e:	f7ff ff35 	bl	800068c <rt_evbit_set>
							evgroup_state_m_auto_manual);
					break;
 8000822:	e00c      	b.n	800083e <task_ble+0x7e>
				case BLE_RECEIVED_MOVEMENT:
					rt_evbit_set(rt_evgroup_state_machine,
 8000824:	2102      	movs	r1, #2
 8000826:	2001      	movs	r0, #1
 8000828:	f7ff ff30 	bl	800068c <rt_evbit_set>
							evgroup_state_m_movement);
					break;
 800082c:	e007      	b.n	800083e <task_ble+0x7e>
				default:
					// unknow -> free
					rt_dequeue(rt_queue_ble, &receivedBleData);
 800082e:	f107 0320 	add.w	r3, r7, #32
 8000832:	4619      	mov	r1, r3
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff ff7f 	bl	8000738 <rt_dequeue>
					break;
 800083a:	e000      	b.n	800083e <task_ble+0x7e>
				}

			}
 800083c:	bf00      	nop

			if (receivedBleData.info == ble_transmit) {
 800083e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d1cb      	bne.n	80007de <task_ble+0x1e>

//				memcpy(ble_pData, data + sizeof(Śmieci),4);

				memcpy(ble_pData, &receivedBleData.command, 1);
 8000846:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800084a:	723b      	strb	r3, [r7, #8]
				memcpy(ble_pData + 1, &receivedBleData.valueReg1, 1);
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	3301      	adds	r3, #1
 8000852:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000856:	701a      	strb	r2, [r3, #0]
				memcpy(ble_pData + 2, &receivedBleData.valueReg2, 1);
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	3302      	adds	r3, #2
 800085e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000862:	701a      	strb	r2, [r3, #0]
//				memcpy(ble_pData + 3, &receivedBleData.valueReg3, 1);
//				memcpy(ble_pData + 4, &receivedBleData.valueReg4, 1);

				ble_send_data(ble_pData, BLE_MAX_SIZE);
 8000864:	f107 0308 	add.w	r3, r7, #8
 8000868:	2118      	movs	r1, #24
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fd3a 	bl	80002e4 <ble_send_data>
		status = rt_queue_peek(rt_queue_ble, &receivedBleData);
 8000870:	e7b5      	b.n	80007de <task_ble+0x1e>

08000872 <task_eyes>:
 *      Author: Arkadiusz
 */

//#include "task_eyes.h"

void task_eyes(void *pvParameters) {
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 800087a:	e7fe      	b.n	800087a <task_eyes+0x8>

0800087c <task_memory>:
 *      Author: Arkadiusz
 */

//#include "task_memory.h"

void task_memory(void *pvParameters) {
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 8000884:	e7fe      	b.n	8000884 <task_memory+0x8>
	...

08000888 <HAL_GPIO_EXTI_Callback>:
bool ultrasound_was = false;
bool ultrasound_done = false;
static char ble_pData[BLE_MAX_SIZE];

// interrupt pin callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	80fb      	strh	r3, [r7, #6]
//	IRQ_ULTRASOUND_ECHO_Pin
	if (GPIO_Pin & IRQ_ULTRASOUND_ECHO_Pin) {
 8000892:	88fb      	ldrh	r3, [r7, #6]
 8000894:	f003 0302 	and.w	r3, r3, #2
 8000898:	2b00      	cmp	r3, #0
 800089a:	d01e      	beq.n	80008da <HAL_GPIO_EXTI_Callback+0x52>

		if (ultrasound_was == false) {
 800089c:	4b20      	ldr	r3, [pc, #128]	; (8000920 <HAL_GPIO_EXTI_Callback+0x98>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	f083 0301 	eor.w	r3, r3, #1
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d008      	beq.n	80008bc <HAL_GPIO_EXTI_Callback+0x34>
			ultrasound_time = HAL_GetTick();
 80008aa:	f001 f801 	bl	80018b0 <HAL_GetTick>
 80008ae:	4602      	mov	r2, r0
 80008b0:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <HAL_GPIO_EXTI_Callback+0x9c>)
 80008b2:	601a      	str	r2, [r3, #0]
			ultrasound_was = true;
 80008b4:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <HAL_GPIO_EXTI_Callback+0x98>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	701a      	strb	r2, [r3, #0]
 80008ba:	e00e      	b.n	80008da <HAL_GPIO_EXTI_Callback+0x52>
		} else {
			ultrasound_time = HAL_GetTick() - ultrasound_time;
 80008bc:	f000 fff8 	bl	80018b0 <HAL_GetTick>
 80008c0:	4602      	mov	r2, r0
 80008c2:	4b18      	ldr	r3, [pc, #96]	; (8000924 <HAL_GPIO_EXTI_Callback+0x9c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	4a16      	ldr	r2, [pc, #88]	; (8000924 <HAL_GPIO_EXTI_Callback+0x9c>)
 80008ca:	6013      	str	r3, [r2, #0]
			ultrasound_was = false;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <HAL_GPIO_EXTI_Callback+0x98>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
			rt_evbit_set_from_ISR(rt_evgroup_sensors,
 80008d2:	2100      	movs	r1, #0
 80008d4:	2000      	movs	r0, #0
 80008d6:	f7ff fef3 	bl	80006c0 <rt_evbit_set_from_ISR>
//			ultrasound_done = true;
		}
	}

//	BLE INTERRUPT -> SOMETHING IS RECEIVED
	if (GPIO_Pin & IRQ_BLE_Pin) {
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d018      	beq.n	8000916 <HAL_GPIO_EXTI_Callback+0x8e>
		if (ble_receive_data(ble_pData)) {
 80008e4:	4810      	ldr	r0, [pc, #64]	; (8000928 <HAL_GPIO_EXTI_Callback+0xa0>)
 80008e6:	f7ff fd27 	bl	8000338 <ble_receive_data>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d012      	beq.n	8000916 <HAL_GPIO_EXTI_Callback+0x8e>
			xQueueBleData ble_queue = { 0 };
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]

			ble_queue.info = ble_received;
 80008f4:	2300      	movs	r3, #0
 80008f6:	733b      	strb	r3, [r7, #12]

			memcpy(&ble_queue.command, ble_pData, 1);
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <HAL_GPIO_EXTI_Callback+0xa0>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	737b      	strb	r3, [r7, #13]
			memcpy(&ble_queue.valueReg1, ble_pData + 1, 1);
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <HAL_GPIO_EXTI_Callback+0xa4>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	73bb      	strb	r3, [r7, #14]
			memcpy(&ble_queue.valueReg2, ble_pData + 2, 1);
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	73fb      	strb	r3, [r7, #15]
			//		memcpy(&ble_queue.valueReg3, ble_pData + 3, 1);
			//		memcpy(&ble_queue.valueReg4, ble_pData + 4, 1);

			rt_enqueue_ISR(rt_queue_ble, &ble_queue);
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	4619      	mov	r1, r3
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff fef1 	bl	80006f8 <rt_enqueue_ISR>
		}
	}
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000030 	.word	0x20000030
 8000924:	2000002c 	.word	0x2000002c
 8000928:	20000034 	.word	0x20000034
 800092c:	20000035 	.word	0x20000035
 8000930:	20000036 	.word	0x20000036

08000934 <task_sensors>:

void task_sensors(void *pvParameters) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]

//	uint32_t evgroup = 0;

// TODO: delete this line!
//	magnetometer_init();
	QMC5883L_Initialize(MODE_CONTROL_CONTINUOUS, OUTPUT_DATA_RATE_200HZ,
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	2200      	movs	r2, #0
 8000940:	210c      	movs	r1, #12
 8000942:	2000      	movs	r0, #0
 8000944:	f7ff fd8d 	bl	8000462 <QMC5883L_Initialize>
			FULL_SCALE_2G, OVER_SAMPLE_RATIO_128);
	QMC5883L_InterruptConfig(INTERRUPT_DISABLE);
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff fdaf 	bl	80004ac <QMC5883L_InterruptConfig>

	//Mode Register
	//Continuous-Measurement Mode
	QMC5883L_Write_Reg(0x02, 0x00);
 800094e:	2100      	movs	r1, #0
 8000950:	2002      	movs	r0, #2
 8000952:	f7ff fd33 	bl	80003bc <QMC5883L_Write_Reg>
		// na podstawie na danych zareaguj :)

		// jakis tam bit do ustawienia, np skret w lewo - uzupelnic
//			rt_evbit_set(rt_evgroup_state_machine, (1 << 8));
//		}
		int16_t X = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	823b      	strh	r3, [r7, #16]
		int16_t Y = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	81fb      	strh	r3, [r7, #14]
		int16_t Z = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	81bb      	strh	r3, [r7, #12]

		uint8_t status = QMC5883L_Read_Reg(0x09);
 8000962:	2009      	movs	r0, #9
 8000964:	f7ff fd10 	bl	8000388 <QMC5883L_Read_Reg>
 8000968:	4603      	mov	r3, r0
 800096a:	75fb      	strb	r3, [r7, #23]
		uint8_t temp1 = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	75bb      	strb	r3, [r7, #22]
		uint8_t temp2 = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	757b      	strb	r3, [r7, #21]

		temp1 = QMC5883L_Read_Reg(0x07);
 8000974:	2007      	movs	r0, #7
 8000976:	f7ff fd07 	bl	8000388 <QMC5883L_Read_Reg>
 800097a:	4603      	mov	r3, r0
 800097c:	75bb      	strb	r3, [r7, #22]
		temp2 = QMC5883L_Read_Reg(0x08);
 800097e:	2008      	movs	r0, #8
 8000980:	f7ff fd02 	bl	8000388 <QMC5883L_Read_Reg>
 8000984:	4603      	mov	r3, r0
 8000986:	757b      	strb	r3, [r7, #21]

		uint16_t temp = ~((temp2 << 8) | temp1) + 1;
 8000988:	7d7b      	ldrb	r3, [r7, #21]
 800098a:	021b      	lsls	r3, r3, #8
 800098c:	b21a      	sxth	r2, r3
 800098e:	7dbb      	ldrb	r3, [r7, #22]
 8000990:	b21b      	sxth	r3, r3
 8000992:	4313      	orrs	r3, r2
 8000994:	b21b      	sxth	r3, r3
 8000996:	b29b      	uxth	r3, r3
 8000998:	425b      	negs	r3, r3
 800099a:	827b      	strh	r3, [r7, #18]
		temp /= 100;
 800099c:	8a7b      	ldrh	r3, [r7, #18]
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <task_sensors+0xb4>)
 80009a0:	fba2 2303 	umull	r2, r3, r2, r3
 80009a4:	095b      	lsrs	r3, r3, #5
 80009a6:	827b      	strh	r3, [r7, #18]

		temp += 1;
 80009a8:	8a7b      	ldrh	r3, [r7, #18]
 80009aa:	3301      	adds	r3, #1
 80009ac:	827b      	strh	r3, [r7, #18]

		if (status & (1 << 0)) {
 80009ae:	7dfb      	ldrb	r3, [r7, #23]
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d009      	beq.n	80009cc <task_sensors+0x98>
			QMC5883L_Read_Data(&X, &Y, &Z);
 80009b8:	f107 020c 	add.w	r2, r7, #12
 80009bc:	f107 010e 	add.w	r1, r7, #14
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fd15 	bl	80003f4 <QMC5883L_Read_Data>
 80009ca:	e005      	b.n	80009d8 <task_sensors+0xa4>
		} else {
			X = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	823b      	strh	r3, [r7, #16]
			Y = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	81fb      	strh	r3, [r7, #14]
			Z = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	81bb      	strh	r3, [r7, #12]
		}

		X++;
 80009d8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80009dc:	b29b      	uxth	r3, r3
 80009de:	3301      	adds	r3, #1
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	b21b      	sxth	r3, r3
 80009e4:	823b      	strh	r3, [r7, #16]
	for (;;) {
 80009e6:	e7b6      	b.n	8000956 <task_sensors+0x22>
 80009e8:	51eb851f 	.word	0x51eb851f

080009ec <task_state_machine>:
#include "runtime.h"
#include "state_machine.h"
#include "h_bridge.h"
#include "bluetooth_le.h"

void task_state_machine(void *pvParameters) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	uint32_t evgroup = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
	bool tasks_disabled = false;
 80009f8:	2300      	movs	r3, #0
 80009fa:	74fb      	strb	r3, [r7, #19]
	xQueueBleData receivedBleData = { 0 };
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]

	for (;;) {

		evgroup = rt_evbitwait_any(rt_evgroup_state_machine);
 8000a00:	2001      	movs	r0, #1
 8000a02:	f7ff fe27 	bl	8000654 <rt_evbitwait_any>
 8000a06:	6178      	str	r0, [r7, #20]

		if (evgroup & (1 << evgroup_state_m_do_nothing)) {
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d007      	beq.n	8000a22 <task_state_machine+0x36>

			h_bridge_coast();
 8000a12:	f7ff fc49 	bl	80002a8 <h_bridge_coast>
			h_bridge_set_left_duty(0);
 8000a16:	2000      	movs	r0, #0
 8000a18:	f7ff fbb2 	bl	8000180 <h_bridge_set_left_duty>
			h_bridge_set_right_duty(0);
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f7ff fbd5 	bl	80001cc <h_bridge_set_right_duty>
		}
		if (evgroup & (1 << evgroup_state_m_auto_manual)) {
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	f003 0302 	and.w	r3, r3, #2
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d021      	beq.n	8000a70 <task_state_machine+0x84>
			if (tasks_disabled) {
 8000a2c:	7cfb      	ldrb	r3, [r7, #19]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d00f      	beq.n	8000a52 <task_state_machine+0x66>
				vTaskResume(rt_tasks[rt_task_eyes]);
 8000a32:	4b32      	ldr	r3, [pc, #200]	; (8000afc <task_state_machine+0x110>)
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f007 f8f4 	bl	8007c24 <vTaskResume>
				vTaskResume(rt_tasks[rt_task_memory]);
 8000a3c:	4b2f      	ldr	r3, [pc, #188]	; (8000afc <task_state_machine+0x110>)
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f007 f8ef 	bl	8007c24 <vTaskResume>
				vTaskResume(rt_tasks[rt_task_sensors]);
 8000a46:	4b2d      	ldr	r3, [pc, #180]	; (8000afc <task_state_machine+0x110>)
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f007 f8ea 	bl	8007c24 <vTaskResume>
 8000a50:	e00e      	b.n	8000a70 <task_state_machine+0x84>
			} else {
				vTaskSuspend(rt_tasks[rt_task_eyes]);
 8000a52:	4b2a      	ldr	r3, [pc, #168]	; (8000afc <task_state_machine+0x110>)
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f007 f836 	bl	8007ac8 <vTaskSuspend>
				vTaskSuspend(rt_tasks[rt_task_memory]);
 8000a5c:	4b27      	ldr	r3, [pc, #156]	; (8000afc <task_state_machine+0x110>)
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f007 f831 	bl	8007ac8 <vTaskSuspend>
				vTaskSuspend(rt_tasks[rt_task_sensors]);
 8000a66:	4b25      	ldr	r3, [pc, #148]	; (8000afc <task_state_machine+0x110>)
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f007 f82c 	bl	8007ac8 <vTaskSuspend>
			}
		}
		if (evgroup & (1 << evgroup_state_m_movement)) {
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d0c2      	beq.n	8000a00 <task_state_machine+0x14>

			bool status = rt_dequeue(rt_queue_ble, &receivedBleData);
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	4619      	mov	r1, r3
 8000a80:	2000      	movs	r0, #0
 8000a82:	f7ff fe59 	bl	8000738 <rt_dequeue>
 8000a86:	4603      	mov	r3, r0
 8000a88:	74bb      	strb	r3, [r7, #18]
			if (status) {
 8000a8a:	7cbb      	ldrb	r3, [r7, #18]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d0b7      	beq.n	8000a00 <task_state_machine+0x14>

				uint8_t left_engine = receivedBleData.valueReg1;
 8000a90:	7bbb      	ldrb	r3, [r7, #14]
 8000a92:	747b      	strb	r3, [r7, #17]
				uint8_t right_engine = receivedBleData.valueReg2;
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
 8000a96:	743b      	strb	r3, [r7, #16]
				// ^
				// ccw
				// --- |        PERCENTAGE       |

				// left engine
				if (left_engine & (1 << 8)) {
 8000a98:	7c7b      	ldrb	r3, [r7, #17]
 8000a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d009      	beq.n	8000ab6 <task_state_machine+0xca>
					h_bridge_cw_left();
 8000aa2:	f7ff fbb9 	bl	8000218 <h_bridge_cw_left>
					h_bridge_set_left_duty(left_engine & 0b01111111);
 8000aa6:	7c7b      	ldrb	r3, [r7, #17]
 8000aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fb66 	bl	8000180 <h_bridge_set_left_duty>
 8000ab4:	e008      	b.n	8000ac8 <task_state_machine+0xdc>
				} else {
					h_bridge_ccw_left();
 8000ab6:	f7ff fbd3 	bl	8000260 <h_bridge_ccw_left>
					h_bridge_set_left_duty(right_engine & 0b01111111);
 8000aba:	7c3b      	ldrb	r3, [r7, #16]
 8000abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fb5c 	bl	8000180 <h_bridge_set_left_duty>
				}

				// right engine
				if (right_engine & (1 << 8)) {
 8000ac8:	7c3b      	ldrb	r3, [r7, #16]
 8000aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d009      	beq.n	8000ae6 <task_state_machine+0xfa>
					h_bridge_cw_right();
 8000ad2:	f7ff fbb1 	bl	8000238 <h_bridge_cw_right>
					h_bridge_set_right_duty(right_engine & 0b01111111);
 8000ad6:	7c3b      	ldrb	r3, [r7, #16]
 8000ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fb74 	bl	80001cc <h_bridge_set_right_duty>
 8000ae4:	e78c      	b.n	8000a00 <task_state_machine+0x14>
				} else {
					h_bridge_ccw_right();
 8000ae6:	f7ff fbcb 	bl	8000280 <h_bridge_ccw_right>
					h_bridge_set_right_duty(right_engine & 0b01111111);
 8000aea:	7c3b      	ldrb	r3, [r7, #16]
 8000aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fb6a 	bl	80001cc <h_bridge_set_right_duty>
		evgroup = rt_evbitwait_any(rt_evgroup_state_machine);
 8000af8:	e782      	b.n	8000a00 <task_state_machine+0x14>
 8000afa:	bf00      	nop
 8000afc:	20003554 	.word	0x20003554

08000b00 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000b10:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <MX_ADC_Init+0xa8>)
 8000b12:	4a26      	ldr	r2, [pc, #152]	; (8000bac <MX_ADC_Init+0xac>)
 8000b14:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b16:	4b24      	ldr	r3, [pc, #144]	; (8000ba8 <MX_ADC_Init+0xa8>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000b1c:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <MX_ADC_Init+0xa8>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <MX_ADC_Init+0xa8>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b28:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <MX_ADC_Init+0xa8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <MX_ADC_Init+0xa8>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000b34:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <MX_ADC_Init+0xa8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <MX_ADC_Init+0xa8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000b40:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <MX_ADC_Init+0xa8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000b46:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <MX_ADC_Init+0xa8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <MX_ADC_Init+0xa8>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000b54:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_ADC_Init+0xa8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_ADC_Init+0xa8>)
 8000b5e:	2210      	movs	r2, #16
 8000b60:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_ADC_Init+0xa8>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_ADC_Init+0xa8>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000b70:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <MX_ADC_Init+0xa8>)
 8000b72:	f000 fea7 	bl	80018c4 <HAL_ADC_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8000b7c:	f000 fab8 	bl	80010f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b80:	2301      	movs	r3, #1
 8000b82:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b84:	2301      	movs	r3, #1
 8000b86:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_ADC_Init+0xa8>)
 8000b92:	f001 f93b 	bl	8001e0c <HAL_ADC_ConfigChannel>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000b9c:	f000 faa8 	bl	80010f0 <Error_Handler>
  }

}
 8000ba0:	bf00      	nop
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20003584 	.word	0x20003584
 8000bac:	40012400 	.word	0x40012400

08000bb0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a2d      	ldr	r2, [pc, #180]	; (8000c84 <HAL_ADC_MspInit+0xd4>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d154      	bne.n	8000c7c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bd2:	4b2d      	ldr	r3, [pc, #180]	; (8000c88 <HAL_ADC_MspInit+0xd8>)
 8000bd4:	6a1b      	ldr	r3, [r3, #32]
 8000bd6:	4a2c      	ldr	r2, [pc, #176]	; (8000c88 <HAL_ADC_MspInit+0xd8>)
 8000bd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bdc:	6213      	str	r3, [r2, #32]
 8000bde:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <HAL_ADC_MspInit+0xd8>)
 8000be0:	6a1b      	ldr	r3, [r3, #32]
 8000be2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000be6:	61bb      	str	r3, [r7, #24]
 8000be8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bea:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <HAL_ADC_MspInit+0xd8>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	4a26      	ldr	r2, [pc, #152]	; (8000c88 <HAL_ADC_MspInit+0xd8>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	61d3      	str	r3, [r2, #28]
 8000bf6:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <HAL_ADC_MspInit+0xd8>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <HAL_ADC_MspInit+0xd8>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	4a20      	ldr	r2, [pc, #128]	; (8000c88 <HAL_ADC_MspInit+0xd8>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	61d3      	str	r3, [r2, #28]
 8000c0e:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <HAL_ADC_MspInit+0xd8>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <HAL_ADC_MspInit+0xd8>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	4a1a      	ldr	r2, [pc, #104]	; (8000c88 <HAL_ADC_MspInit+0xd8>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	61d3      	str	r3, [r2, #28]
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <HAL_ADC_MspInit+0xd8>)
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA7     ------> ADC_IN7
    PB15     ------> ADC_IN21 
    */
    GPIO_InitStruct.Pin = ADC_BATTERY_VOLTAGE_Pin;
 8000c32:	2301      	movs	r3, #1
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c36:	2303      	movs	r3, #3
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_BATTERY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	4811      	ldr	r0, [pc, #68]	; (8000c8c <HAL_ADC_MspInit+0xdc>)
 8000c46:	f001 fc89 	bl	800255c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_PHOTO_BACK_Pin|ADC_OPTO_LEFT_Pin|ADC_PHOTO_FRONT_Pin;
 8000c4a:	2386      	movs	r3, #134	; 0x86
 8000c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	480c      	ldr	r0, [pc, #48]	; (8000c90 <HAL_ADC_MspInit+0xe0>)
 8000c5e:	f001 fc7d 	bl	800255c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_OPTO_RIGHT_Pin;
 8000c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_OPTO_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	4807      	ldr	r0, [pc, #28]	; (8000c94 <HAL_ADC_MspInit+0xe4>)
 8000c78:	f001 fc70 	bl	800255c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	3730      	adds	r7, #48	; 0x30
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40012400 	.word	0x40012400
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020800 	.word	0x40020800
 8000c90:	40020000 	.word	0x40020000
 8000c94:	40020400 	.word	0x40020400

08000c98 <vApplicationIdleHook>:
void vApplicationMallocFailedHook(void);
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr

08000cb0 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr

08000cdc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ce0:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <MX_FREERTOS_Init+0x1c>)
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_FREERTOS_Init+0x20>)
 8000ce6:	f005 fcad 	bl	8006644 <osThreadNew>
 8000cea:	4602      	mov	r2, r0
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <MX_FREERTOS_Init+0x24>)
 8000cee:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  rt_init();
 8000cf0:	f7ff fc06 	bl	8000500 <rt_init>
  /* USER CODE END RTOS_THREADS */

}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	08009af4 	.word	0x08009af4
 8000cfc:	08000d05 	.word	0x08000d05
 8000d00:	200035d8 	.word	0x200035d8

08000d04 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f005 fd43 	bl	8006798 <osDelay>
 8000d12:	e7fb      	b.n	8000d0c <StartDefaultTask+0x8>

08000d14 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	; 0x28
 8000d18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	4b72      	ldr	r3, [pc, #456]	; (8000ef4 <MX_GPIO_Init+0x1e0>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	4a71      	ldr	r2, [pc, #452]	; (8000ef4 <MX_GPIO_Init+0x1e0>)
 8000d30:	f043 0304 	orr.w	r3, r3, #4
 8000d34:	61d3      	str	r3, [r2, #28]
 8000d36:	4b6f      	ldr	r3, [pc, #444]	; (8000ef4 <MX_GPIO_Init+0x1e0>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	f003 0304 	and.w	r3, r3, #4
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d42:	4b6c      	ldr	r3, [pc, #432]	; (8000ef4 <MX_GPIO_Init+0x1e0>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	4a6b      	ldr	r2, [pc, #428]	; (8000ef4 <MX_GPIO_Init+0x1e0>)
 8000d48:	f043 0320 	orr.w	r3, r3, #32
 8000d4c:	61d3      	str	r3, [r2, #28]
 8000d4e:	4b69      	ldr	r3, [pc, #420]	; (8000ef4 <MX_GPIO_Init+0x1e0>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	f003 0320 	and.w	r3, r3, #32
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	4b66      	ldr	r3, [pc, #408]	; (8000ef4 <MX_GPIO_Init+0x1e0>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	4a65      	ldr	r2, [pc, #404]	; (8000ef4 <MX_GPIO_Init+0x1e0>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	61d3      	str	r3, [r2, #28]
 8000d66:	4b63      	ldr	r3, [pc, #396]	; (8000ef4 <MX_GPIO_Init+0x1e0>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	4b60      	ldr	r3, [pc, #384]	; (8000ef4 <MX_GPIO_Init+0x1e0>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	4a5f      	ldr	r2, [pc, #380]	; (8000ef4 <MX_GPIO_Init+0x1e0>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	61d3      	str	r3, [r2, #28]
 8000d7e:	4b5d      	ldr	r3, [pc, #372]	; (8000ef4 <MX_GPIO_Init+0x1e0>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8a:	4b5a      	ldr	r3, [pc, #360]	; (8000ef4 <MX_GPIO_Init+0x1e0>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	4a59      	ldr	r2, [pc, #356]	; (8000ef4 <MX_GPIO_Init+0x1e0>)
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	61d3      	str	r3, [r2, #28]
 8000d96:	4b57      	ldr	r3, [pc, #348]	; (8000ef4 <MX_GPIO_Init+0x1e0>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_INa_ENGINE_LEFT_Pin|OUT_INb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_TEST_Pin 
 8000da2:	2200      	movs	r2, #0
 8000da4:	f640 616e 	movw	r1, #3694	; 0xe6e
 8000da8:	4853      	ldr	r0, [pc, #332]	; (8000ef8 <MX_GPIO_Init+0x1e4>)
 8000daa:	f001 fe49 	bl	8002a40 <HAL_GPIO_WritePin>
                          |OUT_ULTRASOUND_TRIG_Pin|OUT_INb_ENGINE_RIGHT_Pin|OUT_LED1_Pin|OUT_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 8000dae:	2200      	movs	r2, #0
 8000db0:	f248 7108 	movw	r1, #34568	; 0x8708
 8000db4:	4851      	ldr	r0, [pc, #324]	; (8000efc <MX_GPIO_Init+0x1e8>)
 8000db6:	f001 fe43 	bl	8002a40 <HAL_GPIO_WritePin>
                          |OUT_LED0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_BLE_EN_GPIO_Port, OUT_BLE_EN_Pin, GPIO_PIN_SET);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	2110      	movs	r1, #16
 8000dbe:	484e      	ldr	r0, [pc, #312]	; (8000ef8 <MX_GPIO_Init+0x1e4>)
 8000dc0:	f001 fe3e 	bl	8002a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12;
 8000dc4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4847      	ldr	r0, [pc, #284]	; (8000ef8 <MX_GPIO_Init+0x1e4>)
 8000dda:	f001 fbbf 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = OUT_INa_ENGINE_LEFT_Pin|OUT_INb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_EN_Pin 
 8000dde:	f640 637e 	movw	r3, #3710	; 0xe7e
 8000de2:	617b      	str	r3, [r7, #20]
                          |OUT_BLE_TEST_Pin|OUT_ULTRASOUND_TRIG_Pin|OUT_INb_ENGINE_RIGHT_Pin|OUT_LED1_Pin 
                          |OUT_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	4840      	ldr	r0, [pc, #256]	; (8000ef8 <MX_GPIO_Init+0x1e4>)
 8000df8:	f001 fbb0 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 8000dfc:	f248 7308 	movw	r3, #34568	; 0x8708
 8000e00:	617b      	str	r3, [r7, #20]
                          |OUT_LED0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	4839      	ldr	r0, [pc, #228]	; (8000efc <MX_GPIO_Init+0x1e8>)
 8000e16:	f001 fba1 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 8000e1a:	f241 0370 	movw	r3, #4208	; 0x1070
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e20:	2303      	movs	r3, #3
 8000e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4833      	ldr	r0, [pc, #204]	; (8000efc <MX_GPIO_Init+0x1e8>)
 8000e30:	f001 fb94 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IRQ_BLE_Pin|IRQ_ULTRASOUND_ECHO_Pin;
 8000e34:	2303      	movs	r3, #3
 8000e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e38:	4b31      	ldr	r3, [pc, #196]	; (8000f00 <MX_GPIO_Init+0x1ec>)
 8000e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	482f      	ldr	r0, [pc, #188]	; (8000f04 <MX_GPIO_Init+0x1f0>)
 8000e48:	f001 fb88 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB3 PB4 
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 8000e4c:	f242 333c 	movw	r3, #9020	; 0x233c
 8000e50:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e52:	2303      	movs	r3, #3
 8000e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4828      	ldr	r0, [pc, #160]	; (8000f04 <MX_GPIO_Init+0x1f0>)
 8000e62:	f001 fb7b 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_LEFT_Pin;
 8000e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_LEFT_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4822      	ldr	r0, [pc, #136]	; (8000f04 <MX_GPIO_Init+0x1f0>)
 8000e7c:	f001 fb6e 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_HALL_FRONT_Pin;
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN_HALL_FRONT_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	4819      	ldr	r0, [pc, #100]	; (8000ef8 <MX_GPIO_Init+0x1e4>)
 8000e94:	f001 fb62 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_RIGHT_Pin;
 8000e98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4813      	ldr	r0, [pc, #76]	; (8000efc <MX_GPIO_Init+0x1e8>)
 8000eae:	f001 fb55 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4810      	ldr	r0, [pc, #64]	; (8000f08 <MX_GPIO_Init+0x1f4>)
 8000ec6:	f001 fb49 	bl	800255c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2105      	movs	r1, #5
 8000ece:	2006      	movs	r0, #6
 8000ed0:	f001 fb00 	bl	80024d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ed4:	2006      	movs	r0, #6
 8000ed6:	f001 fb29 	bl	800252c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2105      	movs	r1, #5
 8000ede:	2007      	movs	r0, #7
 8000ee0:	f001 faf8 	bl	80024d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000ee4:	2007      	movs	r0, #7
 8000ee6:	f001 fb21 	bl	800252c <HAL_NVIC_EnableIRQ>

}
 8000eea:	bf00      	nop
 8000eec:	3728      	adds	r7, #40	; 0x28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020800 	.word	0x40020800
 8000efc:	40020000 	.word	0x40020000
 8000f00:	10110000 	.word	0x10110000
 8000f04:	40020400 	.word	0x40020400
 8000f08:	40020c00 	.word	0x40020c00

08000f0c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f12:	4a13      	ldr	r2, [pc, #76]	; (8000f60 <MX_I2C1_Init+0x54>)
 8000f14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f18:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <MX_I2C1_Init+0x58>)
 8000f1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f4a:	f001 fdc3 	bl	8002ad4 <HAL_I2C_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f54:	f000 f8cc 	bl	80010f0 <Error_Handler>
  }

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200035dc 	.word	0x200035dc
 8000f60:	40005400 	.word	0x40005400
 8000f64:	000186a0 	.word	0x000186a0

08000f68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a17      	ldr	r2, [pc, #92]	; (8000fe4 <HAL_I2C_MspInit+0x7c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d127      	bne.n	8000fda <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <HAL_I2C_MspInit+0x80>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a16      	ldr	r2, [pc, #88]	; (8000fe8 <HAL_I2C_MspInit+0x80>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	61d3      	str	r3, [r2, #28]
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <HAL_I2C_MspInit+0x80>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fa2:	23c0      	movs	r3, #192	; 0xc0
 8000fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fa6:	2312      	movs	r3, #18
 8000fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480b      	ldr	r0, [pc, #44]	; (8000fec <HAL_I2C_MspInit+0x84>)
 8000fbe:	f001 facd 	bl	800255c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <HAL_I2C_MspInit+0x80>)
 8000fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc6:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <HAL_I2C_MspInit+0x80>)
 8000fc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fcc:	6253      	str	r3, [r2, #36]	; 0x24
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_I2C_MspInit+0x80>)
 8000fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000fda:	bf00      	nop
 8000fdc:	3728      	adds	r7, #40	; 0x28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40005400 	.word	0x40005400
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40020400 	.word	0x40020400

08000ff0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ff4:	f000 fc31 	bl	800185a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ff8:	f000 f818 	bl	800102c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ffc:	f7ff fe8a 	bl	8000d14 <MX_GPIO_Init>
	MX_ADC_Init();
 8001000:	f7ff fd7e 	bl	8000b00 <MX_ADC_Init>
	MX_I2C1_Init();
 8001004:	f7ff ff82 	bl	8000f0c <MX_I2C1_Init>
	MX_TIM2_Init();
 8001008:	f000 f970 	bl	80012ec <MX_TIM2_Init>
	MX_TIM3_Init();
 800100c:	f000 f9e2 	bl	80013d4 <MX_TIM3_Init>
	MX_TIM9_Init();
 8001010:	f000 fa54 	bl	80014bc <MX_TIM9_Init>
	MX_USART3_UART_Init();
 8001014:	f000 fb8e 	bl	8001734 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	device_init();
 8001018:	f7ff fa5d 	bl	80004d6 <device_init>
//	h_bridge_set_left_duty(100);
//	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize(); /* Call init function for freertos objects (in freertos.c) */
 800101c:	f005 faac 	bl	8006578 <osKernelInitialize>
	MX_FREERTOS_Init();
 8001020:	f7ff fe5c 	bl	8000cdc <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 8001024:	f005 fada 	bl	80065dc <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001028:	e7fe      	b.n	8001028 <main+0x38>
	...

0800102c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b092      	sub	sp, #72	; 0x48
 8001030:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	2234      	movs	r2, #52	; 0x34
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f008 fba1 	bl	8009782 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001040:	463b      	mov	r3, r7
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800104e:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <SystemClock_Config+0x9c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001056:	4a1c      	ldr	r2, [pc, #112]	; (80010c8 <SystemClock_Config+0x9c>)
 8001058:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800105c:	6013      	str	r3, [r2, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800105e:	2303      	movs	r3, #3
 8001060:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001062:	2301      	movs	r3, #1
 8001064:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001066:	2301      	movs	r3, #1
 8001068:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800106a:	2310      	movs	r3, #16
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106e:	2302      	movs	r3, #2
 8001070:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001072:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001076:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001078:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800107c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 800107e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001082:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4618      	mov	r0, r3
 800108a:	f002 fd1f 	bl	8003acc <HAL_RCC_OscConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <SystemClock_Config+0x6c>
		Error_Handler();
 8001094:	f000 f82c 	bl	80010f0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001098:	230f      	movs	r3, #15
 800109a:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109c:	2303      	movs	r3, #3
 800109e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80010ac:	463b      	mov	r3, r7
 80010ae:	2101      	movs	r1, #1
 80010b0:	4618      	mov	r0, r3
 80010b2:	f003 f989 	bl	80043c8 <HAL_RCC_ClockConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0x94>
		Error_Handler();
 80010bc:	f000 f818 	bl	80010f0 <Error_Handler>
	}
}
 80010c0:	bf00      	nop
 80010c2:	3748      	adds	r7, #72	; 0x48
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40007000 	.word	0x40007000

080010cc <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d101      	bne.n	80010e2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80010de:	f000 fbd5 	bl	800188c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40000c00 	.word	0x40000c00

080010f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <assert_failed>:
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line) {
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <HAL_MspInit+0x64>)
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	4a16      	ldr	r2, [pc, #88]	; (8001174 <HAL_MspInit+0x64>)
 800111c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001120:	6253      	str	r3, [r2, #36]	; 0x24
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_MspInit+0x64>)
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001126:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_MspInit+0x64>)
 8001130:	6a1b      	ldr	r3, [r3, #32]
 8001132:	4a10      	ldr	r2, [pc, #64]	; (8001174 <HAL_MspInit+0x64>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6213      	str	r3, [r2, #32]
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_MspInit+0x64>)
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <HAL_MspInit+0x64>)
 8001148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <HAL_MspInit+0x64>)
 800114c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001150:	6253      	str	r3, [r2, #36]	; 0x24
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <HAL_MspInit+0x64>)
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	210f      	movs	r1, #15
 8001162:	f06f 0001 	mvn.w	r0, #1
 8001166:	f001 f9b5 	bl	80024d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800

08001178 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08c      	sub	sp, #48	; 0x30
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8001188:	2200      	movs	r2, #0
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	202e      	movs	r0, #46	; 0x2e
 800118e:	f001 f9a1 	bl	80024d4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8001192:	202e      	movs	r0, #46	; 0x2e
 8001194:	f001 f9ca 	bl	800252c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001198:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <HAL_InitTick+0x9c>)
 800119a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119c:	4a1d      	ldr	r2, [pc, #116]	; (8001214 <HAL_InitTick+0x9c>)
 800119e:	f043 0308 	orr.w	r3, r3, #8
 80011a2:	6253      	str	r3, [r2, #36]	; 0x24
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <HAL_InitTick+0x9c>)
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	f003 0308 	and.w	r3, r3, #8
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011b0:	f107 0210 	add.w	r2, r7, #16
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4611      	mov	r1, r2
 80011ba:	4618      	mov	r0, r3
 80011bc:	f003 fb4c 	bl	8004858 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011c0:	f003 fb22 	bl	8004808 <HAL_RCC_GetPCLK1Freq>
 80011c4:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80011c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c8:	4a13      	ldr	r2, [pc, #76]	; (8001218 <HAL_InitTick+0xa0>)
 80011ca:	fba2 2303 	umull	r2, r3, r2, r3
 80011ce:	0c9b      	lsrs	r3, r3, #18
 80011d0:	3b01      	subs	r3, #1
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <HAL_InitTick+0xa4>)
 80011d6:	4a12      	ldr	r2, [pc, #72]	; (8001220 <HAL_InitTick+0xa8>)
 80011d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <HAL_InitTick+0xa4>)
 80011dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011e0:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80011e2:	4a0e      	ldr	r2, [pc, #56]	; (800121c <HAL_InitTick+0xa4>)
 80011e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e6:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <HAL_InitTick+0xa4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_InitTick+0xa4>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80011f4:	4809      	ldr	r0, [pc, #36]	; (800121c <HAL_InitTick+0xa4>)
 80011f6:	f003 fbd1 	bl	800499c <HAL_TIM_Base_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d104      	bne.n	800120a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8001200:	4806      	ldr	r0, [pc, #24]	; (800121c <HAL_InitTick+0xa4>)
 8001202:	f003 fc73 	bl	8004aec <HAL_TIM_Base_Start_IT>
 8001206:	4603      	mov	r3, r0
 8001208:	e000      	b.n	800120c <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
}
 800120c:	4618      	mov	r0, r3
 800120e:	3730      	adds	r7, #48	; 0x30
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40023800 	.word	0x40023800
 8001218:	431bde83 	.word	0x431bde83
 800121c:	20003630 	.word	0x20003630
 8001220:	40000c00 	.word	0x40000c00

08001224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <HardFault_Handler+0x4>

08001236 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <MemManage_Handler+0x4>

0800123c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <BusFault_Handler+0x4>

08001242 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <UsageFault_Handler+0x4>

08001248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001258:	2001      	movs	r0, #1
 800125a:	f001 fc23 	bl	8002aa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}

08001262 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001266:	2002      	movs	r0, #2
 8001268:	f001 fc1c 	bl	8002aa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <TIM5_IRQHandler+0x10>)
 8001276:	f003 fd50 	bl	8004d1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20003630 	.word	0x20003630

08001284 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <SystemInit+0x5c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <SystemInit+0x5c>)
 800128e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001292:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <SystemInit+0x5c>)
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	4911      	ldr	r1, [pc, #68]	; (80012e0 <SystemInit+0x5c>)
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <SystemInit+0x60>)
 800129c:	4013      	ands	r3, r2
 800129e:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <SystemInit+0x5c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <SystemInit+0x5c>)
 80012a6:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80012aa:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80012ae:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <SystemInit+0x5c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <SystemInit+0x5c>)
 80012b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ba:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <SystemInit+0x5c>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	4a07      	ldr	r2, [pc, #28]	; (80012e0 <SystemInit+0x5c>)
 80012c2:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80012c6:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <SystemInit+0x5c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <SystemInit+0x64>)
 80012d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012d4:	609a      	str	r2, [r3, #8]
#endif
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	88ffc00c 	.word	0x88ffc00c
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0318 	add.w	r3, r7, #24
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800130a:	463b      	mov	r3, r7
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8001316:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <MX_TIM2_Init+0xe4>)
 8001318:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800131c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800131e:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <MX_TIM2_Init+0xe4>)
 8001320:	2200      	movs	r2, #0
 8001322:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001324:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <MX_TIM2_Init+0xe4>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3199;
 800132a:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <MX_TIM2_Init+0xe4>)
 800132c:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001330:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001332:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <MX_TIM2_Init+0xe4>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001338:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <MX_TIM2_Init+0xe4>)
 800133a:	2280      	movs	r2, #128	; 0x80
 800133c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800133e:	4824      	ldr	r0, [pc, #144]	; (80013d0 <MX_TIM2_Init+0xe4>)
 8001340:	f003 fb2c 	bl	800499c <HAL_TIM_Base_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800134a:	f7ff fed1 	bl	80010f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001352:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001354:	f107 0318 	add.w	r3, r7, #24
 8001358:	4619      	mov	r1, r3
 800135a:	481d      	ldr	r0, [pc, #116]	; (80013d0 <MX_TIM2_Init+0xe4>)
 800135c:	f003 ff4a 	bl	80051f4 <HAL_TIM_ConfigClockSource>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001366:	f7ff fec3 	bl	80010f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800136a:	4819      	ldr	r0, [pc, #100]	; (80013d0 <MX_TIM2_Init+0xe4>)
 800136c:	f003 fc24 	bl	8004bb8 <HAL_TIM_PWM_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001376:	f7ff febb 	bl	80010f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	4619      	mov	r1, r3
 8001388:	4811      	ldr	r0, [pc, #68]	; (80013d0 <MX_TIM2_Init+0xe4>)
 800138a:	f004 fc45 	bl	8005c18 <HAL_TIMEx_MasterConfigSynchronization>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001394:	f7ff feac 	bl	80010f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001398:	2360      	movs	r3, #96	; 0x60
 800139a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1599;
 800139c:	f240 633f 	movw	r3, #1599	; 0x63f
 80013a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80013a6:	2304      	movs	r3, #4
 80013a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013aa:	463b      	mov	r3, r7
 80013ac:	2200      	movs	r2, #0
 80013ae:	4619      	mov	r1, r3
 80013b0:	4807      	ldr	r0, [pc, #28]	; (80013d0 <MX_TIM2_Init+0xe4>)
 80013b2:	f003 fd8f 	bl	8004ed4 <HAL_TIM_PWM_ConfigChannel>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80013bc:	f7ff fe98 	bl	80010f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80013c0:	4803      	ldr	r0, [pc, #12]	; (80013d0 <MX_TIM2_Init+0xe4>)
 80013c2:	f000 f933 	bl	800162c <HAL_TIM_MspPostInit>

}
 80013c6:	bf00      	nop
 80013c8:	3728      	adds	r7, #40	; 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200036e4 	.word	0x200036e4

080013d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013da:	f107 0318 	add.w	r3, r7, #24
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f2:	463b      	mov	r3, r7
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 80013fe:	4b2d      	ldr	r3, [pc, #180]	; (80014b4 <MX_TIM3_Init+0xe0>)
 8001400:	4a2d      	ldr	r2, [pc, #180]	; (80014b8 <MX_TIM3_Init+0xe4>)
 8001402:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001404:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <MX_TIM3_Init+0xe0>)
 8001406:	2200      	movs	r2, #0
 8001408:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140a:	4b2a      	ldr	r3, [pc, #168]	; (80014b4 <MX_TIM3_Init+0xe0>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3200-1;
 8001410:	4b28      	ldr	r3, [pc, #160]	; (80014b4 <MX_TIM3_Init+0xe0>)
 8001412:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001416:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001418:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <MX_TIM3_Init+0xe0>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800141e:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <MX_TIM3_Init+0xe0>)
 8001420:	2280      	movs	r2, #128	; 0x80
 8001422:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001424:	4823      	ldr	r0, [pc, #140]	; (80014b4 <MX_TIM3_Init+0xe0>)
 8001426:	f003 fab9 	bl	800499c <HAL_TIM_Base_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001430:	f7ff fe5e 	bl	80010f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001438:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800143a:	f107 0318 	add.w	r3, r7, #24
 800143e:	4619      	mov	r1, r3
 8001440:	481c      	ldr	r0, [pc, #112]	; (80014b4 <MX_TIM3_Init+0xe0>)
 8001442:	f003 fed7 	bl	80051f4 <HAL_TIM_ConfigClockSource>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800144c:	f7ff fe50 	bl	80010f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001450:	4818      	ldr	r0, [pc, #96]	; (80014b4 <MX_TIM3_Init+0xe0>)
 8001452:	f003 fbb1 	bl	8004bb8 <HAL_TIM_PWM_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800145c:	f7ff fe48 	bl	80010f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	4619      	mov	r1, r3
 800146e:	4811      	ldr	r0, [pc, #68]	; (80014b4 <MX_TIM3_Init+0xe0>)
 8001470:	f004 fbd2 	bl	8005c18 <HAL_TIMEx_MasterConfigSynchronization>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800147a:	f7ff fe39 	bl	80010f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800147e:	2360      	movs	r3, #96	; 0x60
 8001480:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8001482:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001486:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800148c:	2304      	movs	r3, #4
 800148e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001490:	463b      	mov	r3, r7
 8001492:	2208      	movs	r2, #8
 8001494:	4619      	mov	r1, r3
 8001496:	4807      	ldr	r0, [pc, #28]	; (80014b4 <MX_TIM3_Init+0xe0>)
 8001498:	f003 fd1c 	bl	8004ed4 <HAL_TIM_PWM_ConfigChannel>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80014a2:	f7ff fe25 	bl	80010f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80014a6:	4803      	ldr	r0, [pc, #12]	; (80014b4 <MX_TIM3_Init+0xe0>)
 80014a8:	f000 f8c0 	bl	800162c <HAL_TIM_MspPostInit>

}
 80014ac:	bf00      	nop
 80014ae:	3728      	adds	r7, #40	; 0x28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	2000366c 	.word	0x2000366c
 80014b8:	40000400 	.word	0x40000400

080014bc <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c2:	f107 0318 	add.w	r3, r7, #24
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014da:	463b      	mov	r3, r7
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 80014e6:	4b2d      	ldr	r3, [pc, #180]	; (800159c <MX_TIM9_Init+0xe0>)
 80014e8:	4a2d      	ldr	r2, [pc, #180]	; (80015a0 <MX_TIM9_Init+0xe4>)
 80014ea:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 80014ec:	4b2b      	ldr	r3, [pc, #172]	; (800159c <MX_TIM9_Init+0xe0>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f2:	4b2a      	ldr	r3, [pc, #168]	; (800159c <MX_TIM9_Init+0xe0>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 3200;
 80014f8:	4b28      	ldr	r3, [pc, #160]	; (800159c <MX_TIM9_Init+0xe0>)
 80014fa:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80014fe:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001500:	4b26      	ldr	r3, [pc, #152]	; (800159c <MX_TIM9_Init+0xe0>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001506:	4b25      	ldr	r3, [pc, #148]	; (800159c <MX_TIM9_Init+0xe0>)
 8001508:	2280      	movs	r2, #128	; 0x80
 800150a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800150c:	4823      	ldr	r0, [pc, #140]	; (800159c <MX_TIM9_Init+0xe0>)
 800150e:	f003 fa45 	bl	800499c <HAL_TIM_Base_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 8001518:	f7ff fdea 	bl	80010f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001520:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001522:	f107 0318 	add.w	r3, r7, #24
 8001526:	4619      	mov	r1, r3
 8001528:	481c      	ldr	r0, [pc, #112]	; (800159c <MX_TIM9_Init+0xe0>)
 800152a:	f003 fe63 	bl	80051f4 <HAL_TIM_ConfigClockSource>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM9_Init+0x7c>
  {
    Error_Handler();
 8001534:	f7ff fddc 	bl	80010f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001538:	4818      	ldr	r0, [pc, #96]	; (800159c <MX_TIM9_Init+0xe0>)
 800153a:	f003 fb3d 	bl	8004bb8 <HAL_TIM_PWM_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM9_Init+0x8c>
  {
    Error_Handler();
 8001544:	f7ff fdd4 	bl	80010f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	4619      	mov	r1, r3
 8001556:	4811      	ldr	r0, [pc, #68]	; (800159c <MX_TIM9_Init+0xe0>)
 8001558:	f004 fb5e 	bl	8005c18 <HAL_TIMEx_MasterConfigSynchronization>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM9_Init+0xaa>
  {
    Error_Handler();
 8001562:	f7ff fdc5 	bl	80010f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001566:	2360      	movs	r3, #96	; 0x60
 8001568:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 800156a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800156e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001578:	463b      	mov	r3, r7
 800157a:	2204      	movs	r2, #4
 800157c:	4619      	mov	r1, r3
 800157e:	4807      	ldr	r0, [pc, #28]	; (800159c <MX_TIM9_Init+0xe0>)
 8001580:	f003 fca8 	bl	8004ed4 <HAL_TIM_PWM_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM9_Init+0xd2>
  {
    Error_Handler();
 800158a:	f7ff fdb1 	bl	80010f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 800158e:	4803      	ldr	r0, [pc, #12]	; (800159c <MX_TIM9_Init+0xe0>)
 8001590:	f000 f84c 	bl	800162c <HAL_TIM_MspPostInit>

}
 8001594:	bf00      	nop
 8001596:	3728      	adds	r7, #40	; 0x28
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	200036a8 	.word	0x200036a8
 80015a0:	40010800 	.word	0x40010800

080015a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b087      	sub	sp, #28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015b4:	d10c      	bne.n	80015d0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015b6:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <HAL_TIM_Base_MspInit+0x7c>)
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	4a19      	ldr	r2, [pc, #100]	; (8001620 <HAL_TIM_Base_MspInit+0x7c>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6253      	str	r3, [r2, #36]	; 0x24
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <HAL_TIM_Base_MspInit+0x7c>)
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80015ce:	e022      	b.n	8001616 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a13      	ldr	r2, [pc, #76]	; (8001624 <HAL_TIM_Base_MspInit+0x80>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d10c      	bne.n	80015f4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <HAL_TIM_Base_MspInit+0x7c>)
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	4a10      	ldr	r2, [pc, #64]	; (8001620 <HAL_TIM_Base_MspInit+0x7c>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	6253      	str	r3, [r2, #36]	; 0x24
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <HAL_TIM_Base_MspInit+0x7c>)
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]
}
 80015f2:	e010      	b.n	8001616 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM9)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <HAL_TIM_Base_MspInit+0x84>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d10b      	bne.n	8001616 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_TIM_Base_MspInit+0x7c>)
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	4a07      	ldr	r2, [pc, #28]	; (8001620 <HAL_TIM_Base_MspInit+0x7c>)
 8001604:	f043 0304 	orr.w	r3, r3, #4
 8001608:	6213      	str	r3, [r2, #32]
 800160a:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_TIM_Base_MspInit+0x7c>)
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
}
 8001616:	bf00      	nop
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	40023800 	.word	0x40023800
 8001624:	40000400 	.word	0x40000400
 8001628:	40010800 	.word	0x40010800

0800162c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800164c:	d11c      	bne.n	8001688 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	4b33      	ldr	r3, [pc, #204]	; (800171c <HAL_TIM_MspPostInit+0xf0>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	4a32      	ldr	r2, [pc, #200]	; (800171c <HAL_TIM_MspPostInit+0xf0>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	61d3      	str	r3, [r2, #28]
 800165a:	4b30      	ldr	r3, [pc, #192]	; (800171c <HAL_TIM_MspPostInit+0xf0>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0-WKUP1     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PWM_ENGINE_LEFT_Pin;
 8001666:	2301      	movs	r3, #1
 8001668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001676:	2301      	movs	r3, #1
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_LEFT_GPIO_Port, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	4827      	ldr	r0, [pc, #156]	; (8001720 <HAL_TIM_MspPostInit+0xf4>)
 8001682:	f000 ff6b 	bl	800255c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001686:	e044      	b.n	8001712 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a25      	ldr	r2, [pc, #148]	; (8001724 <HAL_TIM_MspPostInit+0xf8>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d11d      	bne.n	80016ce <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001692:	4b22      	ldr	r3, [pc, #136]	; (800171c <HAL_TIM_MspPostInit+0xf0>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	4a21      	ldr	r2, [pc, #132]	; (800171c <HAL_TIM_MspPostInit+0xf0>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	61d3      	str	r3, [r2, #28]
 800169e:	4b1f      	ldr	r3, [pc, #124]	; (800171c <HAL_TIM_MspPostInit+0xf0>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_ENGINE_RIGHT_Pin;
 80016aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016bc:	2302      	movs	r3, #2
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	4818      	ldr	r0, [pc, #96]	; (8001728 <HAL_TIM_MspPostInit+0xfc>)
 80016c8:	f000 ff48 	bl	800255c <HAL_GPIO_Init>
}
 80016cc:	e021      	b.n	8001712 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM9)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a16      	ldr	r2, [pc, #88]	; (800172c <HAL_TIM_MspPostInit+0x100>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d11c      	bne.n	8001712 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d8:	4b10      	ldr	r3, [pc, #64]	; (800171c <HAL_TIM_MspPostInit+0xf0>)
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	4a0f      	ldr	r2, [pc, #60]	; (800171c <HAL_TIM_MspPostInit+0xf0>)
 80016de:	f043 0302 	orr.w	r3, r3, #2
 80016e2:	61d3      	str	r3, [r2, #28]
 80016e4:	4b0d      	ldr	r3, [pc, #52]	; (800171c <HAL_TIM_MspPostInit+0xf0>)
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 80016f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001702:	2303      	movs	r3, #3
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	4808      	ldr	r0, [pc, #32]	; (8001730 <HAL_TIM_MspPostInit+0x104>)
 800170e:	f000 ff25 	bl	800255c <HAL_GPIO_Init>
}
 8001712:	bf00      	nop
 8001714:	3728      	adds	r7, #40	; 0x28
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	40020000 	.word	0x40020000
 8001724:	40000400 	.word	0x40000400
 8001728:	40020800 	.word	0x40020800
 800172c:	40010800 	.word	0x40010800
 8001730:	40020400 	.word	0x40020400

08001734 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 800173a:	4a12      	ldr	r2, [pc, #72]	; (8001784 <MX_USART3_UART_Init+0x50>)
 800173c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 8001740:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001744:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 800175a:	220c      	movs	r2, #12
 800175c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800176a:	4805      	ldr	r0, [pc, #20]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 800176c:	f004 faee 	bl	8005d4c <HAL_UART_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001776:	f7ff fcbb 	bl	80010f0 <Error_Handler>
  }

}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20003720 	.word	0x20003720
 8001784:	40004800 	.word	0x40004800

08001788 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a17      	ldr	r2, [pc, #92]	; (8001804 <HAL_UART_MspInit+0x7c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d128      	bne.n	80017fc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <HAL_UART_MspInit+0x80>)
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	4a16      	ldr	r2, [pc, #88]	; (8001808 <HAL_UART_MspInit+0x80>)
 80017b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b4:	6253      	str	r3, [r2, #36]	; 0x24
 80017b6:	4b14      	ldr	r3, [pc, #80]	; (8001808 <HAL_UART_MspInit+0x80>)
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_UART_MspInit+0x80>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	4a10      	ldr	r2, [pc, #64]	; (8001808 <HAL_UART_MspInit+0x80>)
 80017c8:	f043 0302 	orr.w	r3, r3, #2
 80017cc:	61d3      	str	r3, [r2, #28]
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <HAL_UART_MspInit+0x80>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e8:	2303      	movs	r3, #3
 80017ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017ec:	2307      	movs	r3, #7
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4619      	mov	r1, r3
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <HAL_UART_MspInit+0x84>)
 80017f8:	f000 feb0 	bl	800255c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40004800 	.word	0x40004800
 8001808:	40023800 	.word	0x40023800
 800180c:	40020400 	.word	0x40020400

08001810 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001810:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001812:	e003      	b.n	800181c <LoopCopyDataInit>

08001814 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001816:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001818:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800181a:	3104      	adds	r1, #4

0800181c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800181c:	480a      	ldr	r0, [pc, #40]	; (8001848 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001820:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001822:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001824:	d3f6      	bcc.n	8001814 <CopyDataInit>
  ldr r2, =_sbss
 8001826:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001828:	e002      	b.n	8001830 <LoopFillZerobss>

0800182a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800182a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800182c:	f842 3b04 	str.w	r3, [r2], #4

08001830 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001832:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001834:	d3f9      	bcc.n	800182a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001836:	f7ff fd25 	bl	8001284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800183a:	f007 ff73 	bl	8009724 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800183e:	f7ff fbd7 	bl	8000ff0 <main>
  bx lr
 8001842:	4770      	bx	lr
  ldr r3, =_sidata
 8001844:	08009b44 	.word	0x08009b44
  ldr r0, =_sdata
 8001848:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800184c:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8001850:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001854:	200037a4 	.word	0x200037a4

08001858 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <ADC1_IRQHandler>

0800185a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001864:	2003      	movs	r0, #3
 8001866:	f000 fe15 	bl	8002494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800186a:	2000      	movs	r0, #0
 800186c:	f7ff fc84 	bl	8001178 <HAL_InitTick>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d002      	beq.n	800187c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	71fb      	strb	r3, [r7, #7]
 800187a:	e001      	b.n	8001880 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800187c:	f7ff fc48 	bl	8001110 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001880:	79fb      	ldrb	r3, [r7, #7]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <HAL_IncTick+0x1c>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_IncTick+0x20>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4413      	add	r3, r2
 800189a:	4a03      	ldr	r2, [pc, #12]	; (80018a8 <HAL_IncTick+0x1c>)
 800189c:	6013      	str	r3, [r2, #0]
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20003760 	.word	0x20003760
 80018ac:	20000008 	.word	0x20000008

080018b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return uwTick;
 80018b4:	4b02      	ldr	r3, [pc, #8]	; (80018c0 <HAL_GetTick+0x10>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	20003760 	.word	0x20003760

080018c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08e      	sub	sp, #56	; 0x38
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e282      	b.n	8001dea <HAL_ADC_Init+0x526>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a9d      	ldr	r2, [pc, #628]	; (8001b60 <HAL_ADC_Init+0x29c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d004      	beq.n	80018f8 <HAL_ADC_Init+0x34>
 80018ee:	f240 11bd 	movw	r1, #445	; 0x1bd
 80018f2:	489c      	ldr	r0, [pc, #624]	; (8001b64 <HAL_ADC_Init+0x2a0>)
 80018f4:	f7ff fc02 	bl	80010fc <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00e      	beq.n	800191e <HAL_ADC_Init+0x5a>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001908:	d009      	beq.n	800191e <HAL_ADC_Init+0x5a>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001912:	d004      	beq.n	800191e <HAL_ADC_Init+0x5a>
 8001914:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8001918:	4892      	ldr	r0, [pc, #584]	; (8001b64 <HAL_ADC_Init+0x2a0>)
 800191a:	f7ff fbef 	bl	80010fc <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d013      	beq.n	800194e <HAL_ADC_Init+0x8a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800192e:	d00e      	beq.n	800194e <HAL_ADC_Init+0x8a>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001938:	d009      	beq.n	800194e <HAL_ADC_Init+0x8a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001942:	d004      	beq.n	800194e <HAL_ADC_Init+0x8a>
 8001944:	f240 11bf 	movw	r1, #447	; 0x1bf
 8001948:	4886      	ldr	r0, [pc, #536]	; (8001b64 <HAL_ADC_Init+0x2a0>)
 800194a:	f7ff fbd7 	bl	80010fc <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d009      	beq.n	800196a <HAL_ADC_Init+0xa6>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800195e:	d004      	beq.n	800196a <HAL_ADC_Init+0xa6>
 8001960:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001964:	487f      	ldr	r0, [pc, #508]	; (8001b64 <HAL_ADC_Init+0x2a0>)
 8001966:	f7ff fbc9 	bl	80010fc <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d009      	beq.n	8001986 <HAL_ADC_Init+0xc2>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800197a:	d004      	beq.n	8001986 <HAL_ADC_Init+0xc2>
 800197c:	f240 11c1 	movw	r1, #449	; 0x1c1
 8001980:	4878      	ldr	r0, [pc, #480]	; (8001b64 <HAL_ADC_Init+0x2a0>)
 8001982:	f7ff fbbb 	bl	80010fc <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800198e:	d008      	beq.n	80019a2 <HAL_ADC_Init+0xde>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d004      	beq.n	80019a2 <HAL_ADC_Init+0xde>
 8001998:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800199c:	4871      	ldr	r0, [pc, #452]	; (8001b64 <HAL_ADC_Init+0x2a0>)
 800199e:	f7ff fbad 	bl	80010fc <assert_failed>
  assert_param(IS_ADC_AUTOWAIT(hadc->Init.LowPowerAutoWait));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d020      	beq.n	80019ec <HAL_ADC_Init+0x128>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	2b10      	cmp	r3, #16
 80019b0:	d01c      	beq.n	80019ec <HAL_ADC_Init+0x128>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	2b20      	cmp	r3, #32
 80019b8:	d018      	beq.n	80019ec <HAL_ADC_Init+0x128>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	2b30      	cmp	r3, #48	; 0x30
 80019c0:	d014      	beq.n	80019ec <HAL_ADC_Init+0x128>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	2b40      	cmp	r3, #64	; 0x40
 80019c8:	d010      	beq.n	80019ec <HAL_ADC_Init+0x128>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2b50      	cmp	r3, #80	; 0x50
 80019d0:	d00c      	beq.n	80019ec <HAL_ADC_Init+0x128>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b60      	cmp	r3, #96	; 0x60
 80019d8:	d008      	beq.n	80019ec <HAL_ADC_Init+0x128>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	2b70      	cmp	r3, #112	; 0x70
 80019e0:	d004      	beq.n	80019ec <HAL_ADC_Init+0x128>
 80019e2:	f240 11c3 	movw	r1, #451	; 0x1c3
 80019e6:	485f      	ldr	r0, [pc, #380]	; (8001b64 <HAL_ADC_Init+0x2a0>)
 80019e8:	f7ff fb88 	bl	80010fc <assert_failed>
  assert_param(IS_ADC_AUTOPOWEROFF(hadc->Init.LowPowerAutoPowerOff));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d013      	beq.n	8001a1c <HAL_ADC_Init+0x158>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019fc:	d00e      	beq.n	8001a1c <HAL_ADC_Init+0x158>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a06:	d009      	beq.n	8001a1c <HAL_ADC_Init+0x158>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001a10:	d004      	beq.n	8001a1c <HAL_ADC_Init+0x158>
 8001a12:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8001a16:	4853      	ldr	r0, [pc, #332]	; (8001b64 <HAL_ADC_Init+0x2a0>)
 8001a18:	f7ff fb70 	bl	80010fc <assert_failed>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d008      	beq.n	8001a36 <HAL_ADC_Init+0x172>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d004      	beq.n	8001a36 <HAL_ADC_Init+0x172>
 8001a2c:	f240 11c5 	movw	r1, #453	; 0x1c5
 8001a30:	484c      	ldr	r0, [pc, #304]	; (8001b64 <HAL_ADC_Init+0x2a0>)
 8001a32:	f7ff fb63 	bl	80010fc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d009      	beq.n	8001a54 <HAL_ADC_Init+0x190>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d004      	beq.n	8001a54 <HAL_ADC_Init+0x190>
 8001a4a:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8001a4e:	4845      	ldr	r0, [pc, #276]	; (8001b64 <HAL_ADC_Init+0x2a0>)
 8001a50:	f7ff fb54 	bl	80010fc <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a5c:	d03e      	beq.n	8001adc <HAL_ADC_Init+0x218>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001a66:	d039      	beq.n	8001adc <HAL_ADC_Init+0x218>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001a70:	d034      	beq.n	8001adc <HAL_ADC_Init+0x218>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a76:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8001a7a:	d02f      	beq.n	8001adc <HAL_ADC_Init+0x218>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a84:	d02a      	beq.n	8001adc <HAL_ADC_Init+0x218>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a8e:	d025      	beq.n	8001adc <HAL_ADC_Init+0x218>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a94:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8001a98:	d020      	beq.n	8001adc <HAL_ADC_Init+0x218>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9e:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8001aa2:	d01b      	beq.n	8001adc <HAL_ADC_Init+0x218>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa8:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001aac:	d016      	beq.n	8001adc <HAL_ADC_Init+0x218>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d012      	beq.n	8001adc <HAL_ADC_Init+0x218>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001abe:	d00d      	beq.n	8001adc <HAL_ADC_Init+0x218>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8001ac8:	d008      	beq.n	8001adc <HAL_ADC_Init+0x218>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ace:	2b10      	cmp	r3, #16
 8001ad0:	d004      	beq.n	8001adc <HAL_ADC_Init+0x218>
 8001ad2:	f240 11c7 	movw	r1, #455	; 0x1c7
 8001ad6:	4823      	ldr	r0, [pc, #140]	; (8001b64 <HAL_ADC_Init+0x2a0>)
 8001ad8:	f7ff fb10 	bl	80010fc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d009      	beq.n	8001afa <HAL_ADC_Init+0x236>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d004      	beq.n	8001afa <HAL_ADC_Init+0x236>
 8001af0:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8001af4:	481b      	ldr	r0, [pc, #108]	; (8001b64 <HAL_ADC_Init+0x2a0>)
 8001af6:	f7ff fb01 	bl	80010fc <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d032      	beq.n	8001b68 <HAL_ADC_Init+0x2a4>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_ADC_Init+0x24e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0e:	2b1c      	cmp	r3, #28
 8001b10:	d904      	bls.n	8001b1c <HAL_ADC_Init+0x258>
 8001b12:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8001b16:	4813      	ldr	r0, [pc, #76]	; (8001b64 <HAL_ADC_Init+0x2a0>)
 8001b18:	f7ff faf0 	bl	80010fc <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d009      	beq.n	8001b3a <HAL_ADC_Init+0x276>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d004      	beq.n	8001b3a <HAL_ADC_Init+0x276>
 8001b30:	f240 11cd 	movw	r1, #461	; 0x1cd
 8001b34:	480b      	ldr	r0, [pc, #44]	; (8001b64 <HAL_ADC_Init+0x2a0>)
 8001b36:	f7ff fae1 	bl	80010fc <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d011      	beq.n	8001b68 <HAL_ADC_Init+0x2a4>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_ADC_Init+0x290>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d909      	bls.n	8001b68 <HAL_ADC_Init+0x2a4>
 8001b54:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <HAL_ADC_Init+0x2a0>)
 8001b5a:	f7ff facf 	bl	80010fc <assert_failed>
 8001b5e:	e003      	b.n	8001b68 <HAL_ADC_Init+0x2a4>
 8001b60:	40012400 	.word	0x40012400
 8001b64:	08009868 	.word	0x08009868
    }
  }
      
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b6c:	2b10      	cmp	r3, #16
 8001b6e:	d017      	beq.n	8001ba0 <HAL_ADC_Init+0x2dc>
  {
    assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d013      	beq.n	8001ba0 <HAL_ADC_Init+0x2dc>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b80:	d00e      	beq.n	8001ba0 <HAL_ADC_Init+0x2dc>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b8a:	d009      	beq.n	8001ba0 <HAL_ADC_Init+0x2dc>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001b94:	d004      	beq.n	8001ba0 <HAL_ADC_Init+0x2dc>
 8001b96:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8001b9a:	4896      	ldr	r0, [pc, #600]	; (8001df4 <HAL_ADC_Init+0x530>)
 8001b9c:	f7ff faae 	bl	80010fc <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d115      	bne.n	8001bd4 <HAL_ADC_Init+0x310>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb6:	4b90      	ldr	r3, [pc, #576]	; (8001df8 <HAL_ADC_Init+0x534>)
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	4a8f      	ldr	r2, [pc, #572]	; (8001df8 <HAL_ADC_Init+0x534>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6213      	str	r3, [r2, #32]
 8001bc2:	4b8d      	ldr	r3, [pc, #564]	; (8001df8 <HAL_ADC_Init+0x534>)
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7fe ffee 	bl	8000bb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f040 80ff 	bne.w	8001de0 <HAL_ADC_Init+0x51c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bea:	f023 0302 	bic.w	r3, r3, #2
 8001bee:	f043 0202 	orr.w	r2, r3, #2
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001bf6:	4b81      	ldr	r3, [pc, #516]	; (8001dfc <HAL_ADC_Init+0x538>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	497e      	ldr	r1, [pc, #504]	; (8001dfc <HAL_ADC_Init+0x538>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001c10:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c1e:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	fa93 f3a3 	rbit	r3, r3
 8001c26:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	fab3 f383 	clz	r3, r3
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001c34:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c3a:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c42:	4619      	mov	r1, r3
 8001c44:	2302      	movs	r3, #2
 8001c46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4a:	fa93 f3a3 	rbit	r3, r3
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	fab3 f383 	clz	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001c5c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c60:	4313      	orrs	r3, r2
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c68:	2b10      	cmp	r3, #16
 8001c6a:	d007      	beq.n	8001c7c <HAL_ADC_Init+0x3b8>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001c74:	4313      	orrs	r3, r2
 8001c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c86:	2b40      	cmp	r3, #64	; 0x40
 8001c88:	d04f      	beq.n	8001d2a <HAL_ADC_Init+0x466>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c90:	4313      	orrs	r3, r2
 8001c92:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001c9c:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6912      	ldr	r2, [r2, #16]
 8001ca2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001ca6:	d003      	beq.n	8001cb0 <HAL_ADC_Init+0x3ec>
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6912      	ldr	r2, [r2, #16]
 8001cac:	2a01      	cmp	r2, #1
 8001cae:	d102      	bne.n	8001cb6 <HAL_ADC_Init+0x3f2>
 8001cb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cb4:	e000      	b.n	8001cb8 <HAL_ADC_Init+0x3f4>
 8001cb6:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001cb8:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001cba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d125      	bne.n	8001d16 <HAL_ADC_Init+0x452>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d114      	bne.n	8001cfe <HAL_ADC_Init+0x43a>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001cde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	fa92 f2a2 	rbit	r2, r2
 8001ce6:	617a      	str	r2, [r7, #20]
  return result;
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	fab2 f282 	clz	r2, r2
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	4093      	lsls	r3, r2
 8001cf2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	633b      	str	r3, [r7, #48]	; 0x30
 8001cfc:	e00b      	b.n	8001d16 <HAL_ADC_Init+0x452>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d02:	f043 0220 	orr.w	r2, r3, #32
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d0e:	f043 0201 	orr.w	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	4b38      	ldr	r3, [pc, #224]	; (8001e00 <HAL_ADC_Init+0x53c>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d26:	430b      	orrs	r3, r1
 8001d28:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	4b34      	ldr	r3, [pc, #208]	; (8001e04 <HAL_ADC_Init+0x540>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d3a:	430b      	orrs	r3, r1
 8001d3c:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d46:	d003      	beq.n	8001d50 <HAL_ADC_Init+0x48c>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d119      	bne.n	8001d84 <HAL_ADC_Init+0x4c0>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001d64:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	fa92 f2a2 	rbit	r2, r2
 8001d6c:	60fa      	str	r2, [r7, #12]
  return result;
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	fab2 f282 	clz	r2, r2
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	fa03 f202 	lsl.w	r2, r3, r2
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	631a      	str	r2, [r3, #48]	; 0x30
 8001d82:	e007      	b.n	8001d94 <HAL_ADC_Init+0x4d0>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001d92:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <HAL_ADC_Init+0x544>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d10b      	bne.n	8001dbc <HAL_ADC_Init+0x4f8>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dae:	f023 0303 	bic.w	r3, r3, #3
 8001db2:	f043 0201 	orr.w	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	64da      	str	r2, [r3, #76]	; 0x4c
 8001dba:	e014      	b.n	8001de6 <HAL_ADC_Init+0x522>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc0:	f023 0312 	bic.w	r3, r3, #18
 8001dc4:	f043 0210 	orr.w	r2, r3, #16
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dd0:	f043 0201 	orr.w	r2, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001dde:	e002      	b.n	8001de6 <HAL_ADC_Init+0x522>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001de6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3738      	adds	r7, #56	; 0x38
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	08009868 	.word	0x08009868
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40012700 	.word	0x40012700
 8001e00:	fcfc16ff 	.word	0xfcfc16ff
 8001e04:	c0fff189 	.word	0xc0fff189
 8001e08:	bf80fffe 	.word	0xbf80fffe

08001e0c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a94      	ldr	r2, [pc, #592]	; (8002074 <HAL_ADC_ConfigChannel+0x268>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d004      	beq.n	8001e32 <HAL_ADC_ConfigChannel+0x26>
 8001e28:	f240 7191 	movw	r1, #1937	; 0x791
 8001e2c:	4892      	ldr	r0, [pc, #584]	; (8002078 <HAL_ADC_ConfigChannel+0x26c>)
 8001e2e:	f7ff f965 	bl	80010fc <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 8081 	beq.w	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d07c      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d078      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	d074      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d070      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b05      	cmp	r3, #5
 8001e62:	d06c      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b06      	cmp	r3, #6
 8001e6a:	d068      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b07      	cmp	r3, #7
 8001e72:	d064      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d060      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b09      	cmp	r3, #9
 8001e82:	d05c      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b0a      	cmp	r3, #10
 8001e8a:	d058      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b0b      	cmp	r3, #11
 8001e92:	d054      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b0c      	cmp	r3, #12
 8001e9a:	d050      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b0d      	cmp	r3, #13
 8001ea2:	d04c      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b0e      	cmp	r3, #14
 8001eaa:	d048      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b0f      	cmp	r3, #15
 8001eb2:	d044      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b10      	cmp	r3, #16
 8001eba:	d040      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b11      	cmp	r3, #17
 8001ec2:	d03c      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b12      	cmp	r3, #18
 8001eca:	d038      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b13      	cmp	r3, #19
 8001ed2:	d034      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b14      	cmp	r3, #20
 8001eda:	d030      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b15      	cmp	r3, #21
 8001ee2:	d02c      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b16      	cmp	r3, #22
 8001eea:	d028      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b17      	cmp	r3, #23
 8001ef2:	d024      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b18      	cmp	r3, #24
 8001efa:	d020      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b19      	cmp	r3, #25
 8001f02:	d01c      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b1a      	cmp	r3, #26
 8001f0a:	d018      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b1b      	cmp	r3, #27
 8001f12:	d014      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b1c      	cmp	r3, #28
 8001f1a:	d010      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b1d      	cmp	r3, #29
 8001f22:	d00c      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b1e      	cmp	r3, #30
 8001f2a:	d008      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b1f      	cmp	r3, #31
 8001f32:	d004      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x132>
 8001f34:	f240 7192 	movw	r1, #1938	; 0x792
 8001f38:	484f      	ldr	r0, [pc, #316]	; (8002078 <HAL_ADC_ConfigChannel+0x26c>)
 8001f3a:	f7ff f8df 	bl	80010fc <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d070      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d06c      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	d068      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d064      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b05      	cmp	r3, #5
 8001f64:	d060      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b06      	cmp	r3, #6
 8001f6c:	d05c      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b07      	cmp	r3, #7
 8001f74:	d058      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d054      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b09      	cmp	r3, #9
 8001f84:	d050      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b0a      	cmp	r3, #10
 8001f8c:	d04c      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b0b      	cmp	r3, #11
 8001f94:	d048      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b0c      	cmp	r3, #12
 8001f9c:	d044      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b0d      	cmp	r3, #13
 8001fa4:	d040      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b0e      	cmp	r3, #14
 8001fac:	d03c      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b0f      	cmp	r3, #15
 8001fb4:	d038      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b10      	cmp	r3, #16
 8001fbc:	d034      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b11      	cmp	r3, #17
 8001fc4:	d030      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b12      	cmp	r3, #18
 8001fcc:	d02c      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b13      	cmp	r3, #19
 8001fd4:	d028      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b14      	cmp	r3, #20
 8001fdc:	d024      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b15      	cmp	r3, #21
 8001fe4:	d020      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b16      	cmp	r3, #22
 8001fec:	d01c      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b17      	cmp	r3, #23
 8001ff4:	d018      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b18      	cmp	r3, #24
 8001ffc:	d014      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b19      	cmp	r3, #25
 8002004:	d010      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b1a      	cmp	r3, #26
 800200c:	d00c      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b1b      	cmp	r3, #27
 8002014:	d008      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b1c      	cmp	r3, #28
 800201c:	d004      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x21c>
 800201e:	f240 7193 	movw	r1, #1939	; 0x793
 8002022:	4815      	ldr	r0, [pc, #84]	; (8002078 <HAL_ADC_ConfigChannel+0x26c>)
 8002024:	f7ff f86a 	bl	80010fc <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d025      	beq.n	800207c <HAL_ADC_ConfigChannel+0x270>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d021      	beq.n	800207c <HAL_ADC_ConfigChannel+0x270>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d01d      	beq.n	800207c <HAL_ADC_ConfigChannel+0x270>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	2b03      	cmp	r3, #3
 8002046:	d019      	beq.n	800207c <HAL_ADC_ConfigChannel+0x270>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b04      	cmp	r3, #4
 800204e:	d015      	beq.n	800207c <HAL_ADC_ConfigChannel+0x270>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	2b05      	cmp	r3, #5
 8002056:	d011      	beq.n	800207c <HAL_ADC_ConfigChannel+0x270>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2b06      	cmp	r3, #6
 800205e:	d00d      	beq.n	800207c <HAL_ADC_ConfigChannel+0x270>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b07      	cmp	r3, #7
 8002066:	d009      	beq.n	800207c <HAL_ADC_ConfigChannel+0x270>
 8002068:	f240 7194 	movw	r1, #1940	; 0x794
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <HAL_ADC_ConfigChannel+0x26c>)
 800206e:	f7ff f845 	bl	80010fc <assert_failed>
 8002072:	e003      	b.n	800207c <HAL_ADC_ConfigChannel+0x270>
 8002074:	40012400 	.word	0x40012400
 8002078:	08009868 	.word	0x08009868
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_ADC_ConfigChannel+0x27e>
 8002086:	2302      	movs	r3, #2
 8002088:	e14f      	b.n	800232a <HAL_ADC_ConfigChannel+0x51e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b06      	cmp	r3, #6
 8002098:	d81c      	bhi.n	80020d4 <HAL_ADC_ConfigChannel+0x2c8>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	3b05      	subs	r3, #5
 80020ac:	221f      	movs	r2, #31
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	4019      	ands	r1, r3
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	3b05      	subs	r3, #5
 80020c6:	fa00 f203 	lsl.w	r2, r0, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	641a      	str	r2, [r3, #64]	; 0x40
 80020d2:	e07e      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b0c      	cmp	r3, #12
 80020da:	d81c      	bhi.n	8002116 <HAL_ADC_ConfigChannel+0x30a>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	3b23      	subs	r3, #35	; 0x23
 80020ee:	221f      	movs	r2, #31
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	4019      	ands	r1, r3
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	3b23      	subs	r3, #35	; 0x23
 8002108:	fa00 f203 	lsl.w	r2, r0, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	63da      	str	r2, [r3, #60]	; 0x3c
 8002114:	e05d      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b12      	cmp	r3, #18
 800211c:	d81c      	bhi.n	8002158 <HAL_ADC_ConfigChannel+0x34c>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	3b41      	subs	r3, #65	; 0x41
 8002130:	221f      	movs	r2, #31
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	4019      	ands	r1, r3
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	3b41      	subs	r3, #65	; 0x41
 800214a:	fa00 f203 	lsl.w	r2, r0, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	639a      	str	r2, [r3, #56]	; 0x38
 8002156:	e03c      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b18      	cmp	r3, #24
 800215e:	d81c      	bhi.n	800219a <HAL_ADC_ConfigChannel+0x38e>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	3b5f      	subs	r3, #95	; 0x5f
 8002172:	221f      	movs	r2, #31
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	4019      	ands	r1, r3
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	3b5f      	subs	r3, #95	; 0x5f
 800218c:	fa00 f203 	lsl.w	r2, r0, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	635a      	str	r2, [r3, #52]	; 0x34
 8002198:	e01b      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	3b7d      	subs	r3, #125	; 0x7d
 80021ac:	221f      	movs	r2, #31
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	4019      	ands	r1, r3
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	3b7d      	subs	r3, #125	; 0x7d
 80021c6:	fa00 f203 	lsl.w	r2, r0, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b09      	cmp	r3, #9
 80021d8:	d81a      	bhi.n	8002210 <HAL_ADC_ConfigChannel+0x404>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6959      	ldr	r1, [r3, #20]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4613      	mov	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4413      	add	r3, r2
 80021ea:	2207      	movs	r2, #7
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	4019      	ands	r1, r3
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	6898      	ldr	r0, [r3, #8]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4613      	mov	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4413      	add	r3, r2
 8002202:	fa00 f203 	lsl.w	r2, r0, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	615a      	str	r2, [r3, #20]
 800220e:	e05d      	b.n	80022cc <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b13      	cmp	r3, #19
 8002216:	d81c      	bhi.n	8002252 <HAL_ADC_ConfigChannel+0x446>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6919      	ldr	r1, [r3, #16]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	3b1e      	subs	r3, #30
 800222a:	2207      	movs	r2, #7
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	4019      	ands	r1, r3
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	6898      	ldr	r0, [r3, #8]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	3b1e      	subs	r3, #30
 8002244:	fa00 f203 	lsl.w	r2, r0, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	611a      	str	r2, [r3, #16]
 8002250:	e03c      	b.n	80022cc <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2b1d      	cmp	r3, #29
 8002258:	d81c      	bhi.n	8002294 <HAL_ADC_ConfigChannel+0x488>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68d9      	ldr	r1, [r3, #12]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4613      	mov	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4413      	add	r3, r2
 800226a:	3b3c      	subs	r3, #60	; 0x3c
 800226c:	2207      	movs	r2, #7
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	4019      	ands	r1, r3
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	6898      	ldr	r0, [r3, #8]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	3b3c      	subs	r3, #60	; 0x3c
 8002286:	fa00 f203 	lsl.w	r2, r0, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	e01b      	b.n	80022cc <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	4613      	mov	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4413      	add	r3, r2
 80022a4:	3b5a      	subs	r3, #90	; 0x5a
 80022a6:	2207      	movs	r2, #7
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	4019      	ands	r1, r3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	6898      	ldr	r0, [r3, #8]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4613      	mov	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	4413      	add	r3, r2
 80022be:	3b5a      	subs	r3, #90	; 0x5a
 80022c0:	fa00 f203 	lsl.w	r2, r0, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b10      	cmp	r3, #16
 80022d2:	d003      	beq.n	80022dc <HAL_ADC_ConfigChannel+0x4d0>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022d8:	2b11      	cmp	r3, #17
 80022da:	d121      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x514>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80022dc:	4b15      	ldr	r3, [pc, #84]	; (8002334 <HAL_ADC_ConfigChannel+0x528>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d11b      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x514>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <HAL_ADC_ConfigChannel+0x528>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4a11      	ldr	r2, [pc, #68]	; (8002334 <HAL_ADC_ConfigChannel+0x528>)
 80022ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022f2:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b10      	cmp	r3, #16
 80022fa:	d111      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x514>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80022fc:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <HAL_ADC_ConfigChannel+0x52c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0e      	ldr	r2, [pc, #56]	; (800233c <HAL_ADC_ConfigChannel+0x530>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	0c9a      	lsrs	r2, r3, #18
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002312:	e002      	b.n	800231a <HAL_ADC_ConfigChannel+0x50e>
          {
            wait_loop_index--;
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	3b01      	subs	r3, #1
 8002318:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1f9      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x508>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002328:	7bfb      	ldrb	r3, [r7, #15]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40012700 	.word	0x40012700
 8002338:	20000000 	.word	0x20000000
 800233c:	431bde83 	.word	0x431bde83

08002340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <__NVIC_SetPriorityGrouping+0x44>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800235c:	4013      	ands	r3, r2
 800235e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800236c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002372:	4a04      	ldr	r2, [pc, #16]	; (8002384 <__NVIC_SetPriorityGrouping+0x44>)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	60d3      	str	r3, [r2, #12]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800238c:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <__NVIC_GetPriorityGrouping+0x18>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	f003 0307 	and.w	r3, r3, #7
}
 8002396:	4618      	mov	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	db0b      	blt.n	80023ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	f003 021f 	and.w	r2, r3, #31
 80023bc:	4906      	ldr	r1, [pc, #24]	; (80023d8 <__NVIC_EnableIRQ+0x34>)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	2001      	movs	r0, #1
 80023c6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	e000e100 	.word	0xe000e100

080023dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	6039      	str	r1, [r7, #0]
 80023e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	db0a      	blt.n	8002406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	490c      	ldr	r1, [pc, #48]	; (8002428 <__NVIC_SetPriority+0x4c>)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	0112      	lsls	r2, r2, #4
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	440b      	add	r3, r1
 8002400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002404:	e00a      	b.n	800241c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4908      	ldr	r1, [pc, #32]	; (800242c <__NVIC_SetPriority+0x50>)
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	3b04      	subs	r3, #4
 8002414:	0112      	lsls	r2, r2, #4
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	440b      	add	r3, r1
 800241a:	761a      	strb	r2, [r3, #24]
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000e100 	.word	0xe000e100
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002430:	b480      	push	{r7}
 8002432:	b089      	sub	sp, #36	; 0x24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f1c3 0307 	rsb	r3, r3, #7
 800244a:	2b04      	cmp	r3, #4
 800244c:	bf28      	it	cs
 800244e:	2304      	movcs	r3, #4
 8002450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3304      	adds	r3, #4
 8002456:	2b06      	cmp	r3, #6
 8002458:	d902      	bls.n	8002460 <NVIC_EncodePriority+0x30>
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3b03      	subs	r3, #3
 800245e:	e000      	b.n	8002462 <NVIC_EncodePriority+0x32>
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	f04f 32ff 	mov.w	r2, #4294967295
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43da      	mvns	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	401a      	ands	r2, r3
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002478:	f04f 31ff 	mov.w	r1, #4294967295
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	fa01 f303 	lsl.w	r3, r1, r3
 8002482:	43d9      	mvns	r1, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002488:	4313      	orrs	r3, r2
         );
}
 800248a:	4618      	mov	r0, r3
 800248c:	3724      	adds	r7, #36	; 0x24
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b07      	cmp	r3, #7
 80024a0:	d00f      	beq.n	80024c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b06      	cmp	r3, #6
 80024a6:	d00c      	beq.n	80024c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b05      	cmp	r3, #5
 80024ac:	d009      	beq.n	80024c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d006      	beq.n	80024c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d003      	beq.n	80024c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80024ba:	21ac      	movs	r1, #172	; 0xac
 80024bc:	4804      	ldr	r0, [pc, #16]	; (80024d0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80024be:	f7fe fe1d 	bl	80010fc <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff ff3c 	bl	8002340 <__NVIC_SetPriorityGrouping>
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	080098a0 	.word	0x080098a0

080024d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b0f      	cmp	r3, #15
 80024ea:	d903      	bls.n	80024f4 <HAL_NVIC_SetPriority+0x20>
 80024ec:	21c4      	movs	r1, #196	; 0xc4
 80024ee:	480e      	ldr	r0, [pc, #56]	; (8002528 <HAL_NVIC_SetPriority+0x54>)
 80024f0:	f7fe fe04 	bl	80010fc <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b0f      	cmp	r3, #15
 80024f8:	d903      	bls.n	8002502 <HAL_NVIC_SetPriority+0x2e>
 80024fa:	21c5      	movs	r1, #197	; 0xc5
 80024fc:	480a      	ldr	r0, [pc, #40]	; (8002528 <HAL_NVIC_SetPriority+0x54>)
 80024fe:	f7fe fdfd 	bl	80010fc <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002502:	f7ff ff41 	bl	8002388 <__NVIC_GetPriorityGrouping>
 8002506:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	68b9      	ldr	r1, [r7, #8]
 800250c:	6978      	ldr	r0, [r7, #20]
 800250e:	f7ff ff8f 	bl	8002430 <NVIC_EncodePriority>
 8002512:	4602      	mov	r2, r0
 8002514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002518:	4611      	mov	r1, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff ff5e 	bl	80023dc <__NVIC_SetPriority>
}
 8002520:	bf00      	nop
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	080098a0 	.word	0x080098a0

0800252c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	2b00      	cmp	r3, #0
 800253c:	da03      	bge.n	8002546 <HAL_NVIC_EnableIRQ+0x1a>
 800253e:	21d8      	movs	r1, #216	; 0xd8
 8002540:	4805      	ldr	r0, [pc, #20]	; (8002558 <HAL_NVIC_EnableIRQ+0x2c>)
 8002542:	f7fe fddb 	bl	80010fc <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff ff2a 	bl	80023a4 <__NVIC_EnableIRQ>
}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	080098a0 	.word	0x080098a0

0800255c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a3f      	ldr	r2, [pc, #252]	; (8002674 <HAL_GPIO_Init+0x118>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d01f      	beq.n	80025ba <HAL_GPIO_Init+0x5e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a3e      	ldr	r2, [pc, #248]	; (8002678 <HAL_GPIO_Init+0x11c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d01b      	beq.n	80025ba <HAL_GPIO_Init+0x5e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a3d      	ldr	r2, [pc, #244]	; (800267c <HAL_GPIO_Init+0x120>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d017      	beq.n	80025ba <HAL_GPIO_Init+0x5e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a3c      	ldr	r2, [pc, #240]	; (8002680 <HAL_GPIO_Init+0x124>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d013      	beq.n	80025ba <HAL_GPIO_Init+0x5e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a3b      	ldr	r2, [pc, #236]	; (8002684 <HAL_GPIO_Init+0x128>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00f      	beq.n	80025ba <HAL_GPIO_Init+0x5e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a3a      	ldr	r2, [pc, #232]	; (8002688 <HAL_GPIO_Init+0x12c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d00b      	beq.n	80025ba <HAL_GPIO_Init+0x5e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a39      	ldr	r2, [pc, #228]	; (800268c <HAL_GPIO_Init+0x130>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d007      	beq.n	80025ba <HAL_GPIO_Init+0x5e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a38      	ldr	r2, [pc, #224]	; (8002690 <HAL_GPIO_Init+0x134>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_Init+0x5e>
 80025b2:	21b9      	movs	r1, #185	; 0xb9
 80025b4:	4837      	ldr	r0, [pc, #220]	; (8002694 <HAL_GPIO_Init+0x138>)
 80025b6:	f7fe fda1 	bl	80010fc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_GPIO_Init+0x74>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	0c1b      	lsrs	r3, r3, #16
 80025ca:	041b      	lsls	r3, r3, #16
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_GPIO_Init+0x7c>
 80025d0:	21ba      	movs	r1, #186	; 0xba
 80025d2:	4830      	ldr	r0, [pc, #192]	; (8002694 <HAL_GPIO_Init+0x138>)
 80025d4:	f7fe fd92 	bl	80010fc <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d035      	beq.n	800264c <HAL_GPIO_Init+0xf0>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d031      	beq.n	800264c <HAL_GPIO_Init+0xf0>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b11      	cmp	r3, #17
 80025ee:	d02d      	beq.n	800264c <HAL_GPIO_Init+0xf0>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d029      	beq.n	800264c <HAL_GPIO_Init+0xf0>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b12      	cmp	r3, #18
 80025fe:	d025      	beq.n	800264c <HAL_GPIO_Init+0xf0>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4a24      	ldr	r2, [pc, #144]	; (8002698 <HAL_GPIO_Init+0x13c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d020      	beq.n	800264c <HAL_GPIO_Init+0xf0>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4a23      	ldr	r2, [pc, #140]	; (800269c <HAL_GPIO_Init+0x140>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d01b      	beq.n	800264c <HAL_GPIO_Init+0xf0>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	4a21      	ldr	r2, [pc, #132]	; (80026a0 <HAL_GPIO_Init+0x144>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d016      	beq.n	800264c <HAL_GPIO_Init+0xf0>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4a20      	ldr	r2, [pc, #128]	; (80026a4 <HAL_GPIO_Init+0x148>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d011      	beq.n	800264c <HAL_GPIO_Init+0xf0>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	4a1e      	ldr	r2, [pc, #120]	; (80026a8 <HAL_GPIO_Init+0x14c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d00c      	beq.n	800264c <HAL_GPIO_Init+0xf0>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4a1d      	ldr	r2, [pc, #116]	; (80026ac <HAL_GPIO_Init+0x150>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d007      	beq.n	800264c <HAL_GPIO_Init+0xf0>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b03      	cmp	r3, #3
 8002642:	d003      	beq.n	800264c <HAL_GPIO_Init+0xf0>
 8002644:	21bb      	movs	r1, #187	; 0xbb
 8002646:	4813      	ldr	r0, [pc, #76]	; (8002694 <HAL_GPIO_Init+0x138>)
 8002648:	f7fe fd58 	bl	80010fc <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 81e4 	beq.w	8002a1e <HAL_GPIO_Init+0x4c2>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b01      	cmp	r3, #1
 800265c:	f000 81df 	beq.w	8002a1e <HAL_GPIO_Init+0x4c2>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b02      	cmp	r3, #2
 8002666:	f000 81da 	beq.w	8002a1e <HAL_GPIO_Init+0x4c2>
 800266a:	21bc      	movs	r1, #188	; 0xbc
 800266c:	4809      	ldr	r0, [pc, #36]	; (8002694 <HAL_GPIO_Init+0x138>)
 800266e:	f7fe fd45 	bl	80010fc <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002672:	e1d4      	b.n	8002a1e <HAL_GPIO_Init+0x4c2>
 8002674:	40020000 	.word	0x40020000
 8002678:	40020400 	.word	0x40020400
 800267c:	40020800 	.word	0x40020800
 8002680:	40020c00 	.word	0x40020c00
 8002684:	40021000 	.word	0x40021000
 8002688:	40021800 	.word	0x40021800
 800268c:	40021c00 	.word	0x40021c00
 8002690:	40021400 	.word	0x40021400
 8002694:	080098dc 	.word	0x080098dc
 8002698:	10110000 	.word	0x10110000
 800269c:	10210000 	.word	0x10210000
 80026a0:	10310000 	.word	0x10310000
 80026a4:	10120000 	.word	0x10120000
 80026a8:	10220000 	.word	0x10220000
 80026ac:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	2101      	movs	r1, #1
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	fa01 f303 	lsl.w	r3, r1, r3
 80026bc:	4013      	ands	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 81a8 	beq.w	8002a18 <HAL_GPIO_Init+0x4bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0x17c>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b12      	cmp	r3, #18
 80026d6:	d14f      	bne.n	8002778 <HAL_GPIO_Init+0x21c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a92      	ldr	r2, [pc, #584]	; (8002924 <HAL_GPIO_Init+0x3c8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d01f      	beq.n	8002720 <HAL_GPIO_Init+0x1c4>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a91      	ldr	r2, [pc, #580]	; (8002928 <HAL_GPIO_Init+0x3cc>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d01b      	beq.n	8002720 <HAL_GPIO_Init+0x1c4>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a90      	ldr	r2, [pc, #576]	; (800292c <HAL_GPIO_Init+0x3d0>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d017      	beq.n	8002720 <HAL_GPIO_Init+0x1c4>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a8f      	ldr	r2, [pc, #572]	; (8002930 <HAL_GPIO_Init+0x3d4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d013      	beq.n	8002720 <HAL_GPIO_Init+0x1c4>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a8e      	ldr	r2, [pc, #568]	; (8002934 <HAL_GPIO_Init+0x3d8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d00f      	beq.n	8002720 <HAL_GPIO_Init+0x1c4>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a8d      	ldr	r2, [pc, #564]	; (8002938 <HAL_GPIO_Init+0x3dc>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d00b      	beq.n	8002720 <HAL_GPIO_Init+0x1c4>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a8c      	ldr	r2, [pc, #560]	; (800293c <HAL_GPIO_Init+0x3e0>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d007      	beq.n	8002720 <HAL_GPIO_Init+0x1c4>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a8b      	ldr	r2, [pc, #556]	; (8002940 <HAL_GPIO_Init+0x3e4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d003      	beq.n	8002720 <HAL_GPIO_Init+0x1c4>
 8002718:	21cb      	movs	r1, #203	; 0xcb
 800271a:	488a      	ldr	r0, [pc, #552]	; (8002944 <HAL_GPIO_Init+0x3e8>)
 800271c:	f7fe fcee 	bl	80010fc <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	2b0f      	cmp	r3, #15
 8002726:	d903      	bls.n	8002730 <HAL_GPIO_Init+0x1d4>
 8002728:	21cc      	movs	r1, #204	; 0xcc
 800272a:	4886      	ldr	r0, [pc, #536]	; (8002944 <HAL_GPIO_Init+0x3e8>)
 800272c:	f7fe fce6 	bl	80010fc <assert_failed>
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	08da      	lsrs	r2, r3, #3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3208      	adds	r2, #8
 8002738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800273c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	220f      	movs	r2, #15
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	08da      	lsrs	r2, r3, #3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3208      	adds	r2, #8
 8002772:	6939      	ldr	r1, [r7, #16]
 8002774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	2203      	movs	r2, #3
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4013      	ands	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 0203 	and.w	r2, r3, #3
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d00b      	beq.n	80027cc <HAL_GPIO_Init+0x270>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d007      	beq.n	80027cc <HAL_GPIO_Init+0x270>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027c0:	2b11      	cmp	r3, #17
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x270>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b12      	cmp	r3, #18
 80027ca:	d144      	bne.n	8002856 <HAL_GPIO_Init+0x2fa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00f      	beq.n	80027f4 <HAL_GPIO_Init+0x298>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d00b      	beq.n	80027f4 <HAL_GPIO_Init+0x298>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d007      	beq.n	80027f4 <HAL_GPIO_Init+0x298>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d003      	beq.n	80027f4 <HAL_GPIO_Init+0x298>
 80027ec:	21e1      	movs	r1, #225	; 0xe1
 80027ee:	4855      	ldr	r0, [pc, #340]	; (8002944 <HAL_GPIO_Init+0x3e8>)
 80027f0:	f7fe fc84 	bl	80010fc <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	2203      	movs	r2, #3
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4013      	ands	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4313      	orrs	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800282a:	2201      	movs	r2, #1
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4013      	ands	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	091b      	lsrs	r3, r3, #4
 8002840:	f003 0201 	and.w	r2, r3, #1
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	2203      	movs	r2, #3
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4013      	ands	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 80c2 	beq.w	8002a18 <HAL_GPIO_Init+0x4bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002894:	4b2c      	ldr	r3, [pc, #176]	; (8002948 <HAL_GPIO_Init+0x3ec>)
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	4a2b      	ldr	r2, [pc, #172]	; (8002948 <HAL_GPIO_Init+0x3ec>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	6213      	str	r3, [r2, #32]
 80028a0:	4b29      	ldr	r3, [pc, #164]	; (8002948 <HAL_GPIO_Init+0x3ec>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 80028ac:	4a27      	ldr	r2, [pc, #156]	; (800294c <HAL_GPIO_Init+0x3f0>)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	089b      	lsrs	r3, r3, #2
 80028b2:	3302      	adds	r3, #2
 80028b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	220f      	movs	r2, #15
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4013      	ands	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a14      	ldr	r2, [pc, #80]	; (8002924 <HAL_GPIO_Init+0x3c8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d03b      	beq.n	8002950 <HAL_GPIO_Init+0x3f4>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a13      	ldr	r2, [pc, #76]	; (8002928 <HAL_GPIO_Init+0x3cc>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d01f      	beq.n	8002920 <HAL_GPIO_Init+0x3c4>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a12      	ldr	r2, [pc, #72]	; (800292c <HAL_GPIO_Init+0x3d0>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d019      	beq.n	800291c <HAL_GPIO_Init+0x3c0>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a11      	ldr	r2, [pc, #68]	; (8002930 <HAL_GPIO_Init+0x3d4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d013      	beq.n	8002918 <HAL_GPIO_Init+0x3bc>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a10      	ldr	r2, [pc, #64]	; (8002934 <HAL_GPIO_Init+0x3d8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d00d      	beq.n	8002914 <HAL_GPIO_Init+0x3b8>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a11      	ldr	r2, [pc, #68]	; (8002940 <HAL_GPIO_Init+0x3e4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d007      	beq.n	8002910 <HAL_GPIO_Init+0x3b4>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a0d      	ldr	r2, [pc, #52]	; (8002938 <HAL_GPIO_Init+0x3dc>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d101      	bne.n	800290c <HAL_GPIO_Init+0x3b0>
 8002908:	2306      	movs	r3, #6
 800290a:	e022      	b.n	8002952 <HAL_GPIO_Init+0x3f6>
 800290c:	2307      	movs	r3, #7
 800290e:	e020      	b.n	8002952 <HAL_GPIO_Init+0x3f6>
 8002910:	2305      	movs	r3, #5
 8002912:	e01e      	b.n	8002952 <HAL_GPIO_Init+0x3f6>
 8002914:	2304      	movs	r3, #4
 8002916:	e01c      	b.n	8002952 <HAL_GPIO_Init+0x3f6>
 8002918:	2303      	movs	r3, #3
 800291a:	e01a      	b.n	8002952 <HAL_GPIO_Init+0x3f6>
 800291c:	2302      	movs	r3, #2
 800291e:	e018      	b.n	8002952 <HAL_GPIO_Init+0x3f6>
 8002920:	2301      	movs	r3, #1
 8002922:	e016      	b.n	8002952 <HAL_GPIO_Init+0x3f6>
 8002924:	40020000 	.word	0x40020000
 8002928:	40020400 	.word	0x40020400
 800292c:	40020800 	.word	0x40020800
 8002930:	40020c00 	.word	0x40020c00
 8002934:	40021000 	.word	0x40021000
 8002938:	40021800 	.word	0x40021800
 800293c:	40021c00 	.word	0x40021c00
 8002940:	40021400 	.word	0x40021400
 8002944:	080098dc 	.word	0x080098dc
 8002948:	40023800 	.word	0x40023800
 800294c:	40010000 	.word	0x40010000
 8002950:	2300      	movs	r3, #0
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	f002 0203 	and.w	r2, r2, #3
 8002958:	0092      	lsls	r2, r2, #2
 800295a:	4093      	lsls	r3, r2
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002962:	4935      	ldr	r1, [pc, #212]	; (8002a38 <HAL_GPIO_Init+0x4dc>)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	089b      	lsrs	r3, r3, #2
 8002968:	3302      	adds	r3, #2
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002970:	4b32      	ldr	r3, [pc, #200]	; (8002a3c <HAL_GPIO_Init+0x4e0>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	43db      	mvns	r3, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4013      	ands	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x438>
        {
          SET_BIT(temp, iocurrent); 
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002994:	4a29      	ldr	r2, [pc, #164]	; (8002a3c <HAL_GPIO_Init+0x4e0>)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800299a:	4b28      	ldr	r3, [pc, #160]	; (8002a3c <HAL_GPIO_Init+0x4e0>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4013      	ands	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x462>
        {
          SET_BIT(temp, iocurrent); 
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80029be:	4a1f      	ldr	r2, [pc, #124]	; (8002a3c <HAL_GPIO_Init+0x4e0>)
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029c4:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <HAL_GPIO_Init+0x4e0>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x48c>
        {
          SET_BIT(temp, iocurrent); 
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029e8:	4a14      	ldr	r2, [pc, #80]	; (8002a3c <HAL_GPIO_Init+0x4e0>)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029ee:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <HAL_GPIO_Init+0x4e0>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4013      	ands	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x4b6>
        {
          SET_BIT(temp, iocurrent); 
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a12:	4a0a      	ldr	r2, [pc, #40]	; (8002a3c <HAL_GPIO_Init+0x4e0>)
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	fa22 f303 	lsr.w	r3, r2, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f47f ae41 	bne.w	80026b0 <HAL_GPIO_Init+0x154>
  } 
}
 8002a2e:	bf00      	nop
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40010000 	.word	0x40010000
 8002a3c:	40010400 	.word	0x40010400

08002a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	807b      	strh	r3, [r7, #2]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002a50:	887b      	ldrh	r3, [r7, #2]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d004      	beq.n	8002a60 <HAL_GPIO_WritePin+0x20>
 8002a56:	887b      	ldrh	r3, [r7, #2]
 8002a58:	0c1b      	lsrs	r3, r3, #16
 8002a5a:	041b      	lsls	r3, r3, #16
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d004      	beq.n	8002a6a <HAL_GPIO_WritePin+0x2a>
 8002a60:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8002a64:	480e      	ldr	r0, [pc, #56]	; (8002aa0 <HAL_GPIO_WritePin+0x60>)
 8002a66:	f7fe fb49 	bl	80010fc <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002a6a:	787b      	ldrb	r3, [r7, #1]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d007      	beq.n	8002a80 <HAL_GPIO_WritePin+0x40>
 8002a70:	787b      	ldrb	r3, [r7, #1]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d004      	beq.n	8002a80 <HAL_GPIO_WritePin+0x40>
 8002a76:	f240 11a5 	movw	r1, #421	; 0x1a5
 8002a7a:	4809      	ldr	r0, [pc, #36]	; (8002aa0 <HAL_GPIO_WritePin+0x60>)
 8002a7c:	f7fe fb3e 	bl	80010fc <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8002a80:	787b      	ldrb	r3, [r7, #1]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a86:	887a      	ldrh	r2, [r7, #2]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002a8c:	e003      	b.n	8002a96 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002a8e:	887b      	ldrh	r3, [r7, #2]
 8002a90:	041a      	lsls	r2, r3, #16
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	619a      	str	r2, [r3, #24]
}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	080098dc 	.word	0x080098dc

08002aa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8002aae:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ab0:	695a      	ldr	r2, [r3, #20]
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d006      	beq.n	8002ac8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002aba:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fd fee0 	bl	8000888 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40010400 	.word	0x40010400

08002ad4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e19b      	b.n	8002e1e <HAL_I2C_Init+0x34a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a98      	ldr	r2, [pc, #608]	; (8002d4c <HAL_I2C_Init+0x278>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d009      	beq.n	8002b04 <HAL_I2C_Init+0x30>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a96      	ldr	r2, [pc, #600]	; (8002d50 <HAL_I2C_Init+0x27c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d004      	beq.n	8002b04 <HAL_I2C_Init+0x30>
 8002afa:	f240 11bb 	movw	r1, #443	; 0x1bb
 8002afe:	4895      	ldr	r0, [pc, #596]	; (8002d54 <HAL_I2C_Init+0x280>)
 8002b00:	f7fe fafc 	bl	80010fc <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d004      	beq.n	8002b16 <HAL_I2C_Init+0x42>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	4a91      	ldr	r2, [pc, #580]	; (8002d58 <HAL_I2C_Init+0x284>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d904      	bls.n	8002b20 <HAL_I2C_Init+0x4c>
 8002b16:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8002b1a:	488e      	ldr	r0, [pc, #568]	; (8002d54 <HAL_I2C_Init+0x280>)
 8002b1c:	f7fe faee 	bl	80010fc <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d009      	beq.n	8002b3c <HAL_I2C_Init+0x68>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b30:	d004      	beq.n	8002b3c <HAL_I2C_Init+0x68>
 8002b32:	f240 11bd 	movw	r1, #445	; 0x1bd
 8002b36:	4887      	ldr	r0, [pc, #540]	; (8002d54 <HAL_I2C_Init+0x280>)
 8002b38:	f7fe fae0 	bl	80010fc <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b44:	f023 0303 	bic.w	r3, r3, #3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d004      	beq.n	8002b56 <HAL_I2C_Init+0x82>
 8002b4c:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8002b50:	4880      	ldr	r0, [pc, #512]	; (8002d54 <HAL_I2C_Init+0x280>)
 8002b52:	f7fe fad3 	bl	80010fc <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b5e:	d009      	beq.n	8002b74 <HAL_I2C_Init+0xa0>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002b68:	d004      	beq.n	8002b74 <HAL_I2C_Init+0xa0>
 8002b6a:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002b6e:	4879      	ldr	r0, [pc, #484]	; (8002d54 <HAL_I2C_Init+0x280>)
 8002b70:	f7fe fac4 	bl	80010fc <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_I2C_Init+0xba>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d004      	beq.n	8002b8e <HAL_I2C_Init+0xba>
 8002b84:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002b88:	4872      	ldr	r0, [pc, #456]	; (8002d54 <HAL_I2C_Init+0x280>)
 8002b8a:	f7fe fab7 	bl	80010fc <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d004      	beq.n	8002ba4 <HAL_I2C_Init+0xd0>
 8002b9a:	f240 11c1 	movw	r1, #449	; 0x1c1
 8002b9e:	486d      	ldr	r0, [pc, #436]	; (8002d54 <HAL_I2C_Init+0x280>)
 8002ba0:	f7fe faac 	bl	80010fc <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_I2C_Init+0xea>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	2b40      	cmp	r3, #64	; 0x40
 8002bb2:	d004      	beq.n	8002bbe <HAL_I2C_Init+0xea>
 8002bb4:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002bb8:	4866      	ldr	r0, [pc, #408]	; (8002d54 <HAL_I2C_Init+0x280>)
 8002bba:	f7fe fa9f 	bl	80010fc <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <HAL_I2C_Init+0x104>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	2b80      	cmp	r3, #128	; 0x80
 8002bcc:	d004      	beq.n	8002bd8 <HAL_I2C_Init+0x104>
 8002bce:	f240 11c3 	movw	r1, #451	; 0x1c3
 8002bd2:	4860      	ldr	r0, [pc, #384]	; (8002d54 <HAL_I2C_Init+0x280>)
 8002bd4:	f7fe fa92 	bl	80010fc <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d106      	bne.n	8002bf2 <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7fe f9bb 	bl	8000f68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2224      	movs	r2, #36	; 0x24
 8002bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0201 	bic.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c0a:	f001 fdfd 	bl	8004808 <HAL_RCC_GetPCLK1Freq>
 8002c0e:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	4a51      	ldr	r2, [pc, #324]	; (8002d5c <HAL_I2C_Init+0x288>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d807      	bhi.n	8002c2a <HAL_I2C_Init+0x156>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4a50      	ldr	r2, [pc, #320]	; (8002d60 <HAL_I2C_Init+0x28c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	bf94      	ite	ls
 8002c22:	2301      	movls	r3, #1
 8002c24:	2300      	movhi	r3, #0
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	e006      	b.n	8002c38 <HAL_I2C_Init+0x164>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4a4d      	ldr	r2, [pc, #308]	; (8002d64 <HAL_I2C_Init+0x290>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	bf94      	ite	ls
 8002c32:	2301      	movls	r3, #1
 8002c34:	2300      	movhi	r3, #0
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_I2C_Init+0x16c>
  {
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0ee      	b.n	8002e1e <HAL_I2C_Init+0x34a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4a49      	ldr	r2, [pc, #292]	; (8002d68 <HAL_I2C_Init+0x294>)
 8002c44:	fba2 2303 	umull	r2, r3, r2, r3
 8002c48:	0c9b      	lsrs	r3, r3, #18
 8002c4a:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	4a3b      	ldr	r2, [pc, #236]	; (8002d5c <HAL_I2C_Init+0x288>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d802      	bhi.n	8002c7a <HAL_I2C_Init+0x1a6>
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	3301      	adds	r3, #1
 8002c78:	e009      	b.n	8002c8e <HAL_I2C_Init+0x1ba>
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c80:	fb02 f303 	mul.w	r3, r2, r3
 8002c84:	4a39      	ldr	r2, [pc, #228]	; (8002d6c <HAL_I2C_Init+0x298>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	099b      	lsrs	r3, r3, #6
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6812      	ldr	r2, [r2, #0]
 8002c92:	430b      	orrs	r3, r1
 8002c94:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ca0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	492c      	ldr	r1, [pc, #176]	; (8002d5c <HAL_I2C_Init+0x288>)
 8002caa:	428b      	cmp	r3, r1
 8002cac:	d80d      	bhi.n	8002cca <HAL_I2C_Init+0x1f6>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1e59      	subs	r1, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	bf38      	it	cc
 8002cc6:	2304      	movcc	r3, #4
 8002cc8:	e062      	b.n	8002d90 <HAL_I2C_Init+0x2bc>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d111      	bne.n	8002cf6 <HAL_I2C_Init+0x222>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1e58      	subs	r0, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6859      	ldr	r1, [r3, #4]
 8002cda:	460b      	mov	r3, r1
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	440b      	add	r3, r1
 8002ce0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	bf0c      	ite	eq
 8002cee:	2301      	moveq	r3, #1
 8002cf0:	2300      	movne	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	e012      	b.n	8002d1c <HAL_I2C_Init+0x248>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	1e58      	subs	r0, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6859      	ldr	r1, [r3, #4]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	0099      	lsls	r1, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	bf0c      	ite	eq
 8002d16:	2301      	moveq	r3, #1
 8002d18:	2300      	movne	r3, #0
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_I2C_Init+0x250>
 8002d20:	2301      	movs	r3, #1
 8002d22:	e035      	b.n	8002d90 <HAL_I2C_Init+0x2bc>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d121      	bne.n	8002d70 <HAL_I2C_Init+0x29c>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1e58      	subs	r0, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6859      	ldr	r1, [r3, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	440b      	add	r3, r1
 8002d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d3e:	3301      	adds	r3, #1
 8002d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d48:	e022      	b.n	8002d90 <HAL_I2C_Init+0x2bc>
 8002d4a:	bf00      	nop
 8002d4c:	40005400 	.word	0x40005400
 8002d50:	40005800 	.word	0x40005800
 8002d54:	08009918 	.word	0x08009918
 8002d58:	00061a80 	.word	0x00061a80
 8002d5c:	000186a0 	.word	0x000186a0
 8002d60:	001e847f 	.word	0x001e847f
 8002d64:	003d08ff 	.word	0x003d08ff
 8002d68:	431bde83 	.word	0x431bde83
 8002d6c:	10624dd3 	.word	0x10624dd3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	1e58      	subs	r0, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6859      	ldr	r1, [r3, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	0099      	lsls	r1, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d86:	3301      	adds	r3, #1
 8002d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	6809      	ldr	r1, [r1, #0]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69da      	ldr	r2, [r3, #28]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6911      	ldr	r1, [r2, #16]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68d2      	ldr	r2, [r2, #12]
 8002dca:	4311      	orrs	r1, r2
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695a      	ldr	r2, [r3, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop

08002e28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	607a      	str	r2, [r7, #4]
 8002e32:	461a      	mov	r2, r3
 8002e34:	460b      	mov	r3, r1
 8002e36:	817b      	strh	r3, [r7, #10]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e3c:	f7fe fd38 	bl	80018b0 <HAL_GetTick>
 8002e40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b20      	cmp	r3, #32
 8002e4c:	f040 80e0 	bne.w	8003010 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	2319      	movs	r3, #25
 8002e56:	2201      	movs	r2, #1
 8002e58:	4970      	ldr	r1, [pc, #448]	; (800301c <HAL_I2C_Master_Transmit+0x1f4>)
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 fc5a 	bl	8003714 <I2C_WaitOnFlagUntilTimeout>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e66:	2302      	movs	r3, #2
 8002e68:	e0d3      	b.n	8003012 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_I2C_Master_Transmit+0x50>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e0cc      	b.n	8003012 <HAL_I2C_Master_Transmit+0x1ea>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d007      	beq.n	8002e9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f042 0201 	orr.w	r2, r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2221      	movs	r2, #33	; 0x21
 8002eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2210      	movs	r2, #16
 8002eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	893a      	ldrh	r2, [r7, #8]
 8002ece:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4a50      	ldr	r2, [pc, #320]	; (8003020 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ede:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ee0:	8979      	ldrh	r1, [r7, #10]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	6a3a      	ldr	r2, [r7, #32]
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 face 	bl	8003488 <I2C_MasterRequestWrite>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e08d      	b.n	8003012 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f0c:	e066      	b.n	8002fdc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	6a39      	ldr	r1, [r7, #32]
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 fcd4 	bl	80038c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00d      	beq.n	8002f3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d107      	bne.n	8002f36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e06b      	b.n	8003012 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	781a      	ldrb	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d11b      	bne.n	8002fb0 <HAL_I2C_Master_Transmit+0x188>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d017      	beq.n	8002fb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	781a      	ldrb	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	6a39      	ldr	r1, [r7, #32]
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 fcc4 	bl	8003942 <I2C_WaitOnBTFFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00d      	beq.n	8002fdc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d107      	bne.n	8002fd8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e01a      	b.n	8003012 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d194      	bne.n	8002f0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	e000      	b.n	8003012 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003010:	2302      	movs	r3, #2
  }
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	00100002 	.word	0x00100002
 8003020:	ffff0000 	.word	0xffff0000

08003024 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08c      	sub	sp, #48	; 0x30
 8003028:	af02      	add	r7, sp, #8
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	4608      	mov	r0, r1
 800302e:	4611      	mov	r1, r2
 8003030:	461a      	mov	r2, r3
 8003032:	4603      	mov	r3, r0
 8003034:	817b      	strh	r3, [r7, #10]
 8003036:	460b      	mov	r3, r1
 8003038:	813b      	strh	r3, [r7, #8]
 800303a:	4613      	mov	r3, r2
 800303c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800303e:	f7fe fc37 	bl	80018b0 <HAL_GetTick>
 8003042:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8003044:	88fb      	ldrh	r3, [r7, #6]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d007      	beq.n	800305a <HAL_I2C_Mem_Read+0x36>
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	2b10      	cmp	r3, #16
 800304e:	d004      	beq.n	800305a <HAL_I2C_Mem_Read+0x36>
 8003050:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8003054:	4881      	ldr	r0, [pc, #516]	; (800325c <HAL_I2C_Mem_Read+0x238>)
 8003056:	f7fe f851 	bl	80010fc <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b20      	cmp	r3, #32
 8003064:	f040 8209 	bne.w	800347a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	2319      	movs	r3, #25
 800306e:	2201      	movs	r2, #1
 8003070:	497b      	ldr	r1, [pc, #492]	; (8003260 <HAL_I2C_Mem_Read+0x23c>)
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 fb4e 	bl	8003714 <I2C_WaitOnFlagUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 800307e:	2302      	movs	r3, #2
 8003080:	e1fc      	b.n	800347c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_I2C_Mem_Read+0x6c>
 800308c:	2302      	movs	r3, #2
 800308e:	e1f5      	b.n	800347c <HAL_I2C_Mem_Read+0x458>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d007      	beq.n	80030b6 <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 0201 	orr.w	r2, r2, #1
 80030b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030c4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2222      	movs	r2, #34	; 0x22
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2240      	movs	r2, #64	; 0x40
 80030d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80030e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4a5b      	ldr	r2, [pc, #364]	; (8003264 <HAL_I2C_Mem_Read+0x240>)
 80030f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030f8:	88f8      	ldrh	r0, [r7, #6]
 80030fa:	893a      	ldrh	r2, [r7, #8]
 80030fc:	8979      	ldrh	r1, [r7, #10]
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	9301      	str	r3, [sp, #4]
 8003102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	4603      	mov	r3, r0
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 fa33 	bl	8003574 <I2C_RequestMemoryRead>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e1b1      	b.n	800347c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311c:	2b00      	cmp	r3, #0
 800311e:	d113      	bne.n	8003148 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003120:	2300      	movs	r3, #0
 8003122:	623b      	str	r3, [r7, #32]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	623b      	str	r3, [r7, #32]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	623b      	str	r3, [r7, #32]
 8003134:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	e185      	b.n	8003454 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314c:	2b01      	cmp	r3, #1
 800314e:	d11b      	bne.n	8003188 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800315e:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003160:	2300      	movs	r3, #0
 8003162:	61fb      	str	r3, [r7, #28]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	61fb      	str	r3, [r7, #28]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	61fb      	str	r3, [r7, #28]
 8003174:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	e165      	b.n	8003454 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318c:	2b02      	cmp	r3, #2
 800318e:	d11b      	bne.n	80031c8 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800319e:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ae:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b0:	2300      	movs	r3, #0
 80031b2:	61bb      	str	r3, [r7, #24]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	61bb      	str	r3, [r7, #24]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	61bb      	str	r3, [r7, #24]
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	e145      	b.n	8003454 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80031de:	e139      	b.n	8003454 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	f200 80f2 	bhi.w	80033ce <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d123      	bne.n	800323a <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 fbe4 	bl	80039c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e13a      	b.n	800347c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322e:	b29b      	uxth	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003238:	e10c      	b.n	8003454 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323e:	2b02      	cmp	r3, #2
 8003240:	d14f      	bne.n	80032e2 <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003248:	2200      	movs	r2, #0
 800324a:	4907      	ldr	r1, [pc, #28]	; (8003268 <HAL_I2C_Mem_Read+0x244>)
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 fa61 	bl	8003714 <I2C_WaitOnFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d009      	beq.n	800326c <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e10f      	b.n	800347c <HAL_I2C_Mem_Read+0x458>
 800325c:	08009918 	.word	0x08009918
 8003260:	00100002 	.word	0x00100002
 8003264:	ffff0000 	.word	0xffff0000
 8003268:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800327a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691a      	ldr	r2, [r3, #16]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032e0:	e0b8      	b.n	8003454 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e8:	2200      	movs	r2, #0
 80032ea:	4966      	ldr	r1, [pc, #408]	; (8003484 <HAL_I2C_Mem_Read+0x460>)
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 fa11 	bl	8003714 <I2C_WaitOnFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0bf      	b.n	800347c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	691a      	ldr	r2, [r3, #16]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	1c5a      	adds	r2, r3, #1
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003334:	b29b      	uxth	r3, r3
 8003336:	3b01      	subs	r3, #1
 8003338:	b29a      	uxth	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003344:	2200      	movs	r2, #0
 8003346:	494f      	ldr	r1, [pc, #316]	; (8003484 <HAL_I2C_Mem_Read+0x460>)
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 f9e3 	bl	8003714 <I2C_WaitOnFlagUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e091      	b.n	800347c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003366:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691a      	ldr	r2, [r3, #16]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033cc:	e042      	b.n	8003454 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 faf6 	bl	80039c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e04c      	b.n	800347c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340a:	b29b      	uxth	r3, r3
 800340c:	3b01      	subs	r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b04      	cmp	r3, #4
 8003420:	d118      	bne.n	8003454 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	1c5a      	adds	r2, r3, #1
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343e:	3b01      	subs	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344a:	b29b      	uxth	r3, r3
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003458:	2b00      	cmp	r3, #0
 800345a:	f47f aec1 	bne.w	80031e0 <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2220      	movs	r2, #32
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	e000      	b.n	800347c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800347a:	2302      	movs	r3, #2
  }
}
 800347c:	4618      	mov	r0, r3
 800347e:	3728      	adds	r7, #40	; 0x28
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	00010004 	.word	0x00010004

08003488 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af02      	add	r7, sp, #8
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	607a      	str	r2, [r7, #4]
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	460b      	mov	r3, r1
 8003496:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d006      	beq.n	80034b2 <I2C_MasterRequestWrite+0x2a>
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d003      	beq.n	80034b2 <I2C_MasterRequestWrite+0x2a>
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034b0:	d108      	bne.n	80034c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	e00b      	b.n	80034dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	2b12      	cmp	r3, #18
 80034ca:	d107      	bne.n	80034dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f913 	bl	8003714 <I2C_WaitOnFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e035      	b.n	8003564 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003500:	d108      	bne.n	8003514 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003502:	897b      	ldrh	r3, [r7, #10]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	461a      	mov	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003510:	611a      	str	r2, [r3, #16]
 8003512:	e01b      	b.n	800354c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003514:	897b      	ldrh	r3, [r7, #10]
 8003516:	11db      	asrs	r3, r3, #7
 8003518:	b2db      	uxtb	r3, r3
 800351a:	f003 0306 	and.w	r3, r3, #6
 800351e:	b2db      	uxtb	r3, r3
 8003520:	f063 030f 	orn	r3, r3, #15
 8003524:	b2da      	uxtb	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	490e      	ldr	r1, [pc, #56]	; (800356c <I2C_MasterRequestWrite+0xe4>)
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f945 	bl	80037c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e010      	b.n	8003564 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003542:	897b      	ldrh	r3, [r7, #10]
 8003544:	b2da      	uxtb	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4907      	ldr	r1, [pc, #28]	; (8003570 <I2C_MasterRequestWrite+0xe8>)
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f935 	bl	80037c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	00010008 	.word	0x00010008
 8003570:	00010002 	.word	0x00010002

08003574 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af02      	add	r7, sp, #8
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	4608      	mov	r0, r1
 800357e:	4611      	mov	r1, r2
 8003580:	461a      	mov	r2, r3
 8003582:	4603      	mov	r3, r0
 8003584:	817b      	strh	r3, [r7, #10]
 8003586:	460b      	mov	r3, r1
 8003588:	813b      	strh	r3, [r7, #8]
 800358a:	4613      	mov	r3, r2
 800358c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800359c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 f8aa 	bl	8003714 <I2C_WaitOnFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e09e      	b.n	8003708 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035ca:	897b      	ldrh	r3, [r7, #10]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	461a      	mov	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	6a3a      	ldr	r2, [r7, #32]
 80035de:	494c      	ldr	r1, [pc, #304]	; (8003710 <I2C_RequestMemoryRead+0x19c>)
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 f8ee 	bl	80037c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e08b      	b.n	8003708 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f0:	2300      	movs	r3, #0
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003608:	6a39      	ldr	r1, [r7, #32]
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 f958 	bl	80038c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00d      	beq.n	8003632 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	2b04      	cmp	r3, #4
 800361c:	d107      	bne.n	800362e <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e06a      	b.n	8003708 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d105      	bne.n	8003644 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003638:	893b      	ldrh	r3, [r7, #8]
 800363a:	b2da      	uxtb	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	611a      	str	r2, [r3, #16]
 8003642:	e021      	b.n	8003688 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003644:	893b      	ldrh	r3, [r7, #8]
 8003646:	0a1b      	lsrs	r3, r3, #8
 8003648:	b29b      	uxth	r3, r3
 800364a:	b2da      	uxtb	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003654:	6a39      	ldr	r1, [r7, #32]
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 f932 	bl	80038c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00d      	beq.n	800367e <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	2b04      	cmp	r3, #4
 8003668:	d107      	bne.n	800367a <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003678:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e044      	b.n	8003708 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800367e:	893b      	ldrh	r3, [r7, #8]
 8003680:	b2da      	uxtb	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368a:	6a39      	ldr	r1, [r7, #32]
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 f917 	bl	80038c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00d      	beq.n	80036b4 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	2b04      	cmp	r3, #4
 800369e:	d107      	bne.n	80036b0 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e029      	b.n	8003708 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f81f 	bl	8003714 <I2C_WaitOnFlagUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e013      	b.n	8003708 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036e0:	897b      	ldrh	r3, [r7, #10]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	f043 0301 	orr.w	r3, r3, #1
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	6a3a      	ldr	r2, [r7, #32]
 80036f4:	4906      	ldr	r1, [pc, #24]	; (8003710 <I2C_RequestMemoryRead+0x19c>)
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f863 	bl	80037c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	00010002 	.word	0x00010002

08003714 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	603b      	str	r3, [r7, #0]
 8003720:	4613      	mov	r3, r2
 8003722:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003724:	e025      	b.n	8003772 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372c:	d021      	beq.n	8003772 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372e:	f7fe f8bf 	bl	80018b0 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d302      	bcc.n	8003744 <I2C_WaitOnFlagUntilTimeout+0x30>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d116      	bne.n	8003772 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2220      	movs	r2, #32
 800374e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f043 0220 	orr.w	r2, r3, #32
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e023      	b.n	80037ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	0c1b      	lsrs	r3, r3, #16
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b01      	cmp	r3, #1
 800377a:	d10d      	bne.n	8003798 <I2C_WaitOnFlagUntilTimeout+0x84>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	43da      	mvns	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	4013      	ands	r3, r2
 8003788:	b29b      	uxth	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	bf0c      	ite	eq
 800378e:	2301      	moveq	r3, #1
 8003790:	2300      	movne	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	461a      	mov	r2, r3
 8003796:	e00c      	b.n	80037b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	43da      	mvns	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4013      	ands	r3, r2
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	bf0c      	ite	eq
 80037aa:	2301      	moveq	r3, #1
 80037ac:	2300      	movne	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	461a      	mov	r2, r3
 80037b2:	79fb      	ldrb	r3, [r7, #7]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d0b6      	beq.n	8003726 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	607a      	str	r2, [r7, #4]
 80037ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037d0:	e051      	b.n	8003876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e0:	d123      	bne.n	800382a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f043 0204 	orr.w	r2, r3, #4
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e046      	b.n	80038b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d021      	beq.n	8003876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003832:	f7fe f83d 	bl	80018b0 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	429a      	cmp	r2, r3
 8003840:	d302      	bcc.n	8003848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d116      	bne.n	8003876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f043 0220 	orr.w	r2, r3, #32
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e020      	b.n	80038b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	0c1b      	lsrs	r3, r3, #16
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b01      	cmp	r3, #1
 800387e:	d10c      	bne.n	800389a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	43da      	mvns	r2, r3
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4013      	ands	r3, r2
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	bf14      	ite	ne
 8003892:	2301      	movne	r3, #1
 8003894:	2300      	moveq	r3, #0
 8003896:	b2db      	uxtb	r3, r3
 8003898:	e00b      	b.n	80038b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	43da      	mvns	r2, r3
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	4013      	ands	r3, r2
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	bf14      	ite	ne
 80038ac:	2301      	movne	r3, #1
 80038ae:	2300      	moveq	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d18d      	bne.n	80037d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038cc:	e02d      	b.n	800392a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 f8ce 	bl	8003a70 <I2C_IsAcknowledgeFailed>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e02d      	b.n	800393a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e4:	d021      	beq.n	800392a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e6:	f7fd ffe3 	bl	80018b0 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d302      	bcc.n	80038fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d116      	bne.n	800392a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	f043 0220 	orr.w	r2, r3, #32
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e007      	b.n	800393a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003934:	2b80      	cmp	r3, #128	; 0x80
 8003936:	d1ca      	bne.n	80038ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800394e:	e02d      	b.n	80039ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 f88d 	bl	8003a70 <I2C_IsAcknowledgeFailed>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e02d      	b.n	80039bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003966:	d021      	beq.n	80039ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003968:	f7fd ffa2 	bl	80018b0 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	429a      	cmp	r2, r3
 8003976:	d302      	bcc.n	800397e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d116      	bne.n	80039ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	f043 0220 	orr.w	r2, r3, #32
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e007      	b.n	80039bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	f003 0304 	and.w	r3, r3, #4
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d1ca      	bne.n	8003950 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039d0:	e042      	b.n	8003a58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	2b10      	cmp	r3, #16
 80039de:	d119      	bne.n	8003a14 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f06f 0210 	mvn.w	r2, #16
 80039e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e029      	b.n	8003a68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a14:	f7fd ff4c 	bl	80018b0 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d302      	bcc.n	8003a2a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d116      	bne.n	8003a58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	f043 0220 	orr.w	r2, r3, #32
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e007      	b.n	8003a68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	d1b5      	bne.n	80039d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a86:	d11b      	bne.n	8003ac0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	f043 0204 	orr.w	r2, r3, #4
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e000      	b.n	8003ac2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr

08003acc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d102      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f000 bc6c 	b.w	80043b8 <HAL_RCC_OscConfig+0x8ec>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d022      	beq.n	8003b2e <HAL_RCC_OscConfig+0x62>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d11c      	bne.n	8003b2e <HAL_RCC_OscConfig+0x62>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d116      	bne.n	8003b2e <HAL_RCC_OscConfig+0x62>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0308 	and.w	r3, r3, #8
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d110      	bne.n	8003b2e <HAL_RCC_OscConfig+0x62>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10a      	bne.n	8003b2e <HAL_RCC_OscConfig+0x62>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0310 	and.w	r3, r3, #16
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d104      	bne.n	8003b2e <HAL_RCC_OscConfig+0x62>
 8003b24:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8003b28:	4897      	ldr	r0, [pc, #604]	; (8003d88 <HAL_RCC_OscConfig+0x2bc>)
 8003b2a:	f7fd fae7 	bl	80010fc <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b2e:	4b97      	ldr	r3, [pc, #604]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 030c 	and.w	r3, r3, #12
 8003b36:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b38:	4b94      	ldr	r3, [pc, #592]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b40:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 808e 	beq.w	8003c6c <HAL_RCC_OscConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00c      	beq.n	8003b72 <HAL_RCC_OscConfig+0xa6>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d008      	beq.n	8003b72 <HAL_RCC_OscConfig+0xa6>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b05      	cmp	r3, #5
 8003b66:	d004      	beq.n	8003b72 <HAL_RCC_OscConfig+0xa6>
 8003b68:	f240 1159 	movw	r1, #345	; 0x159
 8003b6c:	4886      	ldr	r0, [pc, #536]	; (8003d88 <HAL_RCC_OscConfig+0x2bc>)
 8003b6e:	f7fd fac5 	bl	80010fc <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d006      	beq.n	8003b86 <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	2b0c      	cmp	r3, #12
 8003b7c:	d110      	bne.n	8003ba0 <HAL_RCC_OscConfig+0xd4>
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b84:	d10c      	bne.n	8003ba0 <HAL_RCC_OscConfig+0xd4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b86:	4b81      	ldr	r3, [pc, #516]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d06b      	beq.n	8003c6a <HAL_RCC_OscConfig+0x19e>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d167      	bne.n	8003c6a <HAL_RCC_OscConfig+0x19e>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	f000 bc0c 	b.w	80043b8 <HAL_RCC_OscConfig+0x8ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d106      	bne.n	8003bb6 <HAL_RCC_OscConfig+0xea>
 8003ba8:	4b78      	ldr	r3, [pc, #480]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a77      	ldr	r2, [pc, #476]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb2:	6013      	str	r3, [r2, #0]
 8003bb4:	e02d      	b.n	8003c12 <HAL_RCC_OscConfig+0x146>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x10c>
 8003bbe:	4b73      	ldr	r3, [pc, #460]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a72      	ldr	r2, [pc, #456]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	4b70      	ldr	r3, [pc, #448]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a6f      	ldr	r2, [pc, #444]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003bd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	e01c      	b.n	8003c12 <HAL_RCC_OscConfig+0x146>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b05      	cmp	r3, #5
 8003bde:	d10c      	bne.n	8003bfa <HAL_RCC_OscConfig+0x12e>
 8003be0:	4b6a      	ldr	r3, [pc, #424]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a69      	ldr	r2, [pc, #420]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003be6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	4b67      	ldr	r3, [pc, #412]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a66      	ldr	r2, [pc, #408]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	e00b      	b.n	8003c12 <HAL_RCC_OscConfig+0x146>
 8003bfa:	4b64      	ldr	r3, [pc, #400]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a63      	ldr	r2, [pc, #396]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	4b61      	ldr	r3, [pc, #388]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a60      	ldr	r2, [pc, #384]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c10:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d013      	beq.n	8003c42 <HAL_RCC_OscConfig+0x176>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1a:	f7fd fe49 	bl	80018b0 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x168>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c22:	f7fd fe45 	bl	80018b0 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b64      	cmp	r3, #100	; 0x64
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x168>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e3c1      	b.n	80043b8 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c34:	4b55      	ldr	r3, [pc, #340]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x156>
 8003c40:	e014      	b.n	8003c6c <HAL_RCC_OscConfig+0x1a0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c42:	f7fd fe35 	bl	80018b0 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x190>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c4a:	f7fd fe31 	bl	80018b0 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b64      	cmp	r3, #100	; 0x64
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e3ad      	b.n	80043b8 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c5c:	4b4b      	ldr	r3, [pc, #300]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1f0      	bne.n	8003c4a <HAL_RCC_OscConfig+0x17e>
 8003c68:	e000      	b.n	8003c6c <HAL_RCC_OscConfig+0x1a0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c6a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d070      	beq.n	8003d5a <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <HAL_RCC_OscConfig+0x1c6>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d004      	beq.n	8003c92 <HAL_RCC_OscConfig+0x1c6>
 8003c88:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003c8c:	483e      	ldr	r0, [pc, #248]	; (8003d88 <HAL_RCC_OscConfig+0x2bc>)
 8003c8e:	f7fd fa35 	bl	80010fc <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	2b1f      	cmp	r3, #31
 8003c98:	d904      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x1d8>
 8003c9a:	f240 118d 	movw	r1, #397	; 0x18d
 8003c9e:	483a      	ldr	r0, [pc, #232]	; (8003d88 <HAL_RCC_OscConfig+0x2bc>)
 8003ca0:	f7fd fa2c 	bl	80010fc <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d005      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x1ea>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	2b0c      	cmp	r3, #12
 8003cae:	d119      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x218>
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d116      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb6:	4b35      	ldr	r3, [pc, #212]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d005      	beq.n	8003cce <HAL_RCC_OscConfig+0x202>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d001      	beq.n	8003cce <HAL_RCC_OscConfig+0x202>
      {
        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e374      	b.n	80043b8 <HAL_RCC_OscConfig+0x8ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cce:	4b2f      	ldr	r3, [pc, #188]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	021b      	lsls	r3, r3, #8
 8003cdc:	492b      	ldr	r1, [pc, #172]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ce2:	e03a      	b.n	8003d5a <HAL_RCC_OscConfig+0x28e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d020      	beq.n	8003d2e <HAL_RCC_OscConfig+0x262>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cec:	4b28      	ldr	r3, [pc, #160]	; (8003d90 <HAL_RCC_OscConfig+0x2c4>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf2:	f7fd fddd 	bl	80018b0 <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x240>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cfa:	f7fd fdd9 	bl	80018b0 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x240>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e355      	b.n	80043b8 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d0c:	4b1f      	ldr	r3, [pc, #124]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCC_OscConfig+0x22e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d18:	4b1c      	ldr	r3, [pc, #112]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	021b      	lsls	r3, r3, #8
 8003d26:	4919      	ldr	r1, [pc, #100]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	604b      	str	r3, [r1, #4]
 8003d2c:	e015      	b.n	8003d5a <HAL_RCC_OscConfig+0x28e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d2e:	4b18      	ldr	r3, [pc, #96]	; (8003d90 <HAL_RCC_OscConfig+0x2c4>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d34:	f7fd fdbc 	bl	80018b0 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x282>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d3c:	f7fd fdb8 	bl	80018b0 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x282>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e334      	b.n	80043b8 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d4e:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0310 	and.w	r3, r3, #16
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 8129 	beq.w	8003fba <HAL_RCC_OscConfig+0x4ee>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f040 80a4 	bne.w	8003eb8 <HAL_RCC_OscConfig+0x3ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d70:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <HAL_RCC_OscConfig+0x2c0>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00b      	beq.n	8003d94 <HAL_RCC_OscConfig+0x2c8>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d107      	bne.n	8003d94 <HAL_RCC_OscConfig+0x2c8>
      {
        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e317      	b.n	80043b8 <HAL_RCC_OscConfig+0x8ec>
 8003d88:	08009950 	.word	0x08009950
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	42470000 	.word	0x42470000
      }
      /* Otherwise, just the calibration and MSI range change are allowed */
      else
      {
       /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	2bff      	cmp	r3, #255	; 0xff
 8003d9a:	d904      	bls.n	8003da6 <HAL_RCC_OscConfig+0x2da>
 8003d9c:	f240 11d7 	movw	r1, #471	; 0x1d7
 8003da0:	48a5      	ldr	r0, [pc, #660]	; (8004038 <HAL_RCC_OscConfig+0x56c>)
 8003da2:	f7fd f9ab 	bl	80010fc <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d022      	beq.n	8003df4 <HAL_RCC_OscConfig+0x328>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db6:	d01d      	beq.n	8003df4 <HAL_RCC_OscConfig+0x328>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dc0:	d018      	beq.n	8003df4 <HAL_RCC_OscConfig+0x328>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003dca:	d013      	beq.n	8003df4 <HAL_RCC_OscConfig+0x328>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd4:	d00e      	beq.n	8003df4 <HAL_RCC_OscConfig+0x328>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003dde:	d009      	beq.n	8003df4 <HAL_RCC_OscConfig+0x328>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003de8:	d004      	beq.n	8003df4 <HAL_RCC_OscConfig+0x328>
 8003dea:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8003dee:	4892      	ldr	r0, [pc, #584]	; (8004038 <HAL_RCC_OscConfig+0x56c>)
 8003df0:	f7fd f984 	bl	80010fc <assert_failed>

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1a      	ldr	r2, [r3, #32]
 8003df8:	4b90      	ldr	r3, [pc, #576]	; (800403c <HAL_RCC_OscConfig+0x570>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d91d      	bls.n	8003e40 <HAL_RCC_OscConfig+0x374>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 fd67 	bl	80048dc <RCC_SetFlashLatencyFromMSIRange>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e2cf      	b.n	80043b8 <HAL_RCC_OscConfig+0x8ec>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e18:	4b88      	ldr	r3, [pc, #544]	; (800403c <HAL_RCC_OscConfig+0x570>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	4985      	ldr	r1, [pc, #532]	; (800403c <HAL_RCC_OscConfig+0x570>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e2a:	4b84      	ldr	r3, [pc, #528]	; (800403c <HAL_RCC_OscConfig+0x570>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	061b      	lsls	r3, r3, #24
 8003e38:	4980      	ldr	r1, [pc, #512]	; (800403c <HAL_RCC_OscConfig+0x570>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	604b      	str	r3, [r1, #4]
 8003e3e:	e01c      	b.n	8003e7a <HAL_RCC_OscConfig+0x3ae>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e40:	4b7e      	ldr	r3, [pc, #504]	; (800403c <HAL_RCC_OscConfig+0x570>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	497b      	ldr	r1, [pc, #492]	; (800403c <HAL_RCC_OscConfig+0x570>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e52:	4b7a      	ldr	r3, [pc, #488]	; (800403c <HAL_RCC_OscConfig+0x570>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	061b      	lsls	r3, r3, #24
 8003e60:	4976      	ldr	r1, [pc, #472]	; (800403c <HAL_RCC_OscConfig+0x570>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 fd36 	bl	80048dc <RCC_SetFlashLatencyFromMSIRange>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e29e      	b.n	80043b8 <HAL_RCC_OscConfig+0x8ec>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	0b5b      	lsrs	r3, r3, #13
 8003e80:	3301      	adds	r3, #1
 8003e82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003e8a:	4a6c      	ldr	r2, [pc, #432]	; (800403c <HAL_RCC_OscConfig+0x570>)
 8003e8c:	6892      	ldr	r2, [r2, #8]
 8003e8e:	0912      	lsrs	r2, r2, #4
 8003e90:	f002 020f 	and.w	r2, r2, #15
 8003e94:	496a      	ldr	r1, [pc, #424]	; (8004040 <HAL_RCC_OscConfig+0x574>)
 8003e96:	5c8a      	ldrb	r2, [r1, r2]
 8003e98:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003e9a:	4a6a      	ldr	r2, [pc, #424]	; (8004044 <HAL_RCC_OscConfig+0x578>)
 8003e9c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e9e:	4b6a      	ldr	r3, [pc, #424]	; (8004048 <HAL_RCC_OscConfig+0x57c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fd f968 	bl	8001178 <HAL_InitTick>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 8083 	beq.w	8003fba <HAL_RCC_OscConfig+0x4ee>
        {
          return status;
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	e27f      	b.n	80043b8 <HAL_RCC_OscConfig+0x8ec>
      }
    }
    else
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d008      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x406>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d004      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x406>
 8003ec8:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003ecc:	485a      	ldr	r0, [pc, #360]	; (8004038 <HAL_RCC_OscConfig+0x56c>)
 8003ece:	f7fd f915 	bl	80010fc <assert_failed>

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d059      	beq.n	8003f8e <HAL_RCC_OscConfig+0x4c2>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003eda:	4b5c      	ldr	r3, [pc, #368]	; (800404c <HAL_RCC_OscConfig+0x580>)
 8003edc:	2201      	movs	r2, #1
 8003ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee0:	f7fd fce6 	bl	80018b0 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ee8:	f7fd fce2 	bl	80018b0 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e25e      	b.n	80043b8 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003efa:	4b50      	ldr	r3, [pc, #320]	; (800403c <HAL_RCC_OscConfig+0x570>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0f0      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x41c>
          }
        }
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	2bff      	cmp	r3, #255	; 0xff
 8003f0c:	d904      	bls.n	8003f18 <HAL_RCC_OscConfig+0x44c>
 8003f0e:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8003f12:	4849      	ldr	r0, [pc, #292]	; (8004038 <HAL_RCC_OscConfig+0x56c>)
 8003f14:	f7fd f8f2 	bl	80010fc <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d022      	beq.n	8003f66 <HAL_RCC_OscConfig+0x49a>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f28:	d01d      	beq.n	8003f66 <HAL_RCC_OscConfig+0x49a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f32:	d018      	beq.n	8003f66 <HAL_RCC_OscConfig+0x49a>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f3c:	d013      	beq.n	8003f66 <HAL_RCC_OscConfig+0x49a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f46:	d00e      	beq.n	8003f66 <HAL_RCC_OscConfig+0x49a>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f50:	d009      	beq.n	8003f66 <HAL_RCC_OscConfig+0x49a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f5a:	d004      	beq.n	8003f66 <HAL_RCC_OscConfig+0x49a>
 8003f5c:	f240 211d 	movw	r1, #541	; 0x21d
 8003f60:	4835      	ldr	r0, [pc, #212]	; (8004038 <HAL_RCC_OscConfig+0x56c>)
 8003f62:	f7fd f8cb 	bl	80010fc <assert_failed>

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f66:	4b35      	ldr	r3, [pc, #212]	; (800403c <HAL_RCC_OscConfig+0x570>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	4932      	ldr	r1, [pc, #200]	; (800403c <HAL_RCC_OscConfig+0x570>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f78:	4b30      	ldr	r3, [pc, #192]	; (800403c <HAL_RCC_OscConfig+0x570>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	061b      	lsls	r3, r3, #24
 8003f86:	492d      	ldr	r1, [pc, #180]	; (800403c <HAL_RCC_OscConfig+0x570>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	604b      	str	r3, [r1, #4]
 8003f8c:	e015      	b.n	8003fba <HAL_RCC_OscConfig+0x4ee>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f8e:	4b2f      	ldr	r3, [pc, #188]	; (800404c <HAL_RCC_OscConfig+0x580>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f94:	f7fd fc8c 	bl	80018b0 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f9c:	f7fd fc88 	bl	80018b0 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x4e2>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e204      	b.n	80043b8 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003fae:	4b23      	ldr	r3, [pc, #140]	; (800403c <HAL_RCC_OscConfig+0x570>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d04c      	beq.n	8004060 <HAL_RCC_OscConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d008      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x514>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d004      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x514>
 8003fd6:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8003fda:	4817      	ldr	r0, [pc, #92]	; (8004038 <HAL_RCC_OscConfig+0x56c>)
 8003fdc:	f7fd f88e 	bl	80010fc <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d016      	beq.n	8004016 <HAL_RCC_OscConfig+0x54a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fe8:	4b19      	ldr	r3, [pc, #100]	; (8004050 <HAL_RCC_OscConfig+0x584>)
 8003fea:	2201      	movs	r2, #1
 8003fec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fee:	f7fd fc5f 	bl	80018b0 <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ff6:	f7fd fc5b 	bl	80018b0 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e1d7      	b.n	80043b8 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004008:	4b0c      	ldr	r3, [pc, #48]	; (800403c <HAL_RCC_OscConfig+0x570>)
 800400a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0f0      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x52a>
 8004014:	e024      	b.n	8004060 <HAL_RCC_OscConfig+0x594>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004016:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <HAL_RCC_OscConfig+0x584>)
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800401c:	f7fd fc48 	bl	80018b0 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004022:	e017      	b.n	8004054 <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004024:	f7fd fc44 	bl	80018b0 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d910      	bls.n	8004054 <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e1c0      	b.n	80043b8 <HAL_RCC_OscConfig+0x8ec>
 8004036:	bf00      	nop
 8004038:	08009950 	.word	0x08009950
 800403c:	40023800 	.word	0x40023800
 8004040:	08009b24 	.word	0x08009b24
 8004044:	20000000 	.word	0x20000000
 8004048:	20000004 	.word	0x20000004
 800404c:	42470020 	.word	0x42470020
 8004050:	42470680 	.word	0x42470680
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004054:	4ba2      	ldr	r3, [pc, #648]	; (80042e0 <HAL_RCC_OscConfig+0x814>)
 8004056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1e1      	bne.n	8004024 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 80b7 	beq.w	80041dc <HAL_RCC_OscConfig+0x710>
  {
    FlagStatus       pwrclkchanged = RESET;
 800406e:	2300      	movs	r3, #0
 8004070:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00c      	beq.n	8004094 <HAL_RCC_OscConfig+0x5c8>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d008      	beq.n	8004094 <HAL_RCC_OscConfig+0x5c8>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2b05      	cmp	r3, #5
 8004088:	d004      	beq.n	8004094 <HAL_RCC_OscConfig+0x5c8>
 800408a:	f44f 711a 	mov.w	r1, #616	; 0x268
 800408e:	4895      	ldr	r0, [pc, #596]	; (80042e4 <HAL_RCC_OscConfig+0x818>)
 8004090:	f7fd f834 	bl	80010fc <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004094:	4b92      	ldr	r3, [pc, #584]	; (80042e0 <HAL_RCC_OscConfig+0x814>)
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10d      	bne.n	80040bc <HAL_RCC_OscConfig+0x5f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040a0:	4b8f      	ldr	r3, [pc, #572]	; (80042e0 <HAL_RCC_OscConfig+0x814>)
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	4a8e      	ldr	r2, [pc, #568]	; (80042e0 <HAL_RCC_OscConfig+0x814>)
 80040a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040aa:	6253      	str	r3, [r2, #36]	; 0x24
 80040ac:	4b8c      	ldr	r3, [pc, #560]	; (80042e0 <HAL_RCC_OscConfig+0x814>)
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b4:	60bb      	str	r3, [r7, #8]
 80040b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040b8:	2301      	movs	r3, #1
 80040ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040bc:	4b8a      	ldr	r3, [pc, #552]	; (80042e8 <HAL_RCC_OscConfig+0x81c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d118      	bne.n	80040fa <HAL_RCC_OscConfig+0x62e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040c8:	4b87      	ldr	r3, [pc, #540]	; (80042e8 <HAL_RCC_OscConfig+0x81c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a86      	ldr	r2, [pc, #536]	; (80042e8 <HAL_RCC_OscConfig+0x81c>)
 80040ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040d4:	f7fd fbec 	bl	80018b0 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x622>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040dc:	f7fd fbe8 	bl	80018b0 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b64      	cmp	r3, #100	; 0x64
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e164      	b.n	80043b8 <HAL_RCC_OscConfig+0x8ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ee:	4b7e      	ldr	r3, [pc, #504]	; (80042e8 <HAL_RCC_OscConfig+0x81c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCC_OscConfig+0x610>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d106      	bne.n	8004110 <HAL_RCC_OscConfig+0x644>
 8004102:	4b77      	ldr	r3, [pc, #476]	; (80042e0 <HAL_RCC_OscConfig+0x814>)
 8004104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004106:	4a76      	ldr	r2, [pc, #472]	; (80042e0 <HAL_RCC_OscConfig+0x814>)
 8004108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410c:	6353      	str	r3, [r2, #52]	; 0x34
 800410e:	e02d      	b.n	800416c <HAL_RCC_OscConfig+0x6a0>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10c      	bne.n	8004132 <HAL_RCC_OscConfig+0x666>
 8004118:	4b71      	ldr	r3, [pc, #452]	; (80042e0 <HAL_RCC_OscConfig+0x814>)
 800411a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411c:	4a70      	ldr	r2, [pc, #448]	; (80042e0 <HAL_RCC_OscConfig+0x814>)
 800411e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004122:	6353      	str	r3, [r2, #52]	; 0x34
 8004124:	4b6e      	ldr	r3, [pc, #440]	; (80042e0 <HAL_RCC_OscConfig+0x814>)
 8004126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004128:	4a6d      	ldr	r2, [pc, #436]	; (80042e0 <HAL_RCC_OscConfig+0x814>)
 800412a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800412e:	6353      	str	r3, [r2, #52]	; 0x34
 8004130:	e01c      	b.n	800416c <HAL_RCC_OscConfig+0x6a0>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	2b05      	cmp	r3, #5
 8004138:	d10c      	bne.n	8004154 <HAL_RCC_OscConfig+0x688>
 800413a:	4b69      	ldr	r3, [pc, #420]	; (80042e0 <HAL_RCC_OscConfig+0x814>)
 800413c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413e:	4a68      	ldr	r2, [pc, #416]	; (80042e0 <HAL_RCC_OscConfig+0x814>)
 8004140:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004144:	6353      	str	r3, [r2, #52]	; 0x34
 8004146:	4b66      	ldr	r3, [pc, #408]	; (80042e0 <HAL_RCC_OscConfig+0x814>)
 8004148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414a:	4a65      	ldr	r2, [pc, #404]	; (80042e0 <HAL_RCC_OscConfig+0x814>)
 800414c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004150:	6353      	str	r3, [r2, #52]	; 0x34
 8004152:	e00b      	b.n	800416c <HAL_RCC_OscConfig+0x6a0>
 8004154:	4b62      	ldr	r3, [pc, #392]	; (80042e0 <HAL_RCC_OscConfig+0x814>)
 8004156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004158:	4a61      	ldr	r2, [pc, #388]	; (80042e0 <HAL_RCC_OscConfig+0x814>)
 800415a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800415e:	6353      	str	r3, [r2, #52]	; 0x34
 8004160:	4b5f      	ldr	r3, [pc, #380]	; (80042e0 <HAL_RCC_OscConfig+0x814>)
 8004162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004164:	4a5e      	ldr	r2, [pc, #376]	; (80042e0 <HAL_RCC_OscConfig+0x814>)
 8004166:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800416a:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d015      	beq.n	80041a0 <HAL_RCC_OscConfig+0x6d4>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004174:	f7fd fb9c 	bl	80018b0 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800417a:	e00a      	b.n	8004192 <HAL_RCC_OscConfig+0x6c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800417c:	f7fd fb98 	bl	80018b0 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	f241 3288 	movw	r2, #5000	; 0x1388
 800418a:	4293      	cmp	r3, r2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e112      	b.n	80043b8 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004192:	4b53      	ldr	r3, [pc, #332]	; (80042e0 <HAL_RCC_OscConfig+0x814>)
 8004194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0ee      	beq.n	800417c <HAL_RCC_OscConfig+0x6b0>
 800419e:	e014      	b.n	80041ca <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a0:	f7fd fb86 	bl	80018b0 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80041a6:	e00a      	b.n	80041be <HAL_RCC_OscConfig+0x6f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041a8:	f7fd fb82 	bl	80018b0 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x6f2>
        {
          return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e0fc      	b.n	80043b8 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80041be:	4b48      	ldr	r3, [pc, #288]	; (80042e0 <HAL_RCC_OscConfig+0x814>)
 80041c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1ee      	bne.n	80041a8 <HAL_RCC_OscConfig+0x6dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041ca:	7ffb      	ldrb	r3, [r7, #31]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d105      	bne.n	80041dc <HAL_RCC_OscConfig+0x710>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d0:	4b43      	ldr	r3, [pc, #268]	; (80042e0 <HAL_RCC_OscConfig+0x814>)
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	4a42      	ldr	r2, [pc, #264]	; (80042e0 <HAL_RCC_OscConfig+0x814>)
 80041d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041da:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00c      	beq.n	80041fe <HAL_RCC_OscConfig+0x732>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d008      	beq.n	80041fe <HAL_RCC_OscConfig+0x732>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d004      	beq.n	80041fe <HAL_RCC_OscConfig+0x732>
 80041f4:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 80041f8:	483a      	ldr	r0, [pc, #232]	; (80042e4 <HAL_RCC_OscConfig+0x818>)
 80041fa:	f7fc ff7f 	bl	80010fc <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 80d7 	beq.w	80043b6 <HAL_RCC_OscConfig+0x8ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	2b0c      	cmp	r3, #12
 800420c:	f000 80b3 	beq.w	8004376 <HAL_RCC_OscConfig+0x8aa>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	2b02      	cmp	r3, #2
 8004216:	f040 8097 	bne.w	8004348 <HAL_RCC_OscConfig+0x87c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421e:	2b00      	cmp	r3, #0
 8004220:	d009      	beq.n	8004236 <HAL_RCC_OscConfig+0x76a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800422a:	d004      	beq.n	8004236 <HAL_RCC_OscConfig+0x76a>
 800422c:	f240 21b5 	movw	r1, #693	; 0x2b5
 8004230:	482c      	ldr	r0, [pc, #176]	; (80042e4 <HAL_RCC_OscConfig+0x818>)
 8004232:	f7fc ff63 	bl	80010fc <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423a:	2b00      	cmp	r3, #0
 800423c:	d02c      	beq.n	8004298 <HAL_RCC_OscConfig+0x7cc>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004246:	d027      	beq.n	8004298 <HAL_RCC_OscConfig+0x7cc>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004250:	d022      	beq.n	8004298 <HAL_RCC_OscConfig+0x7cc>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004256:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800425a:	d01d      	beq.n	8004298 <HAL_RCC_OscConfig+0x7cc>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004264:	d018      	beq.n	8004298 <HAL_RCC_OscConfig+0x7cc>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800426e:	d013      	beq.n	8004298 <HAL_RCC_OscConfig+0x7cc>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004278:	d00e      	beq.n	8004298 <HAL_RCC_OscConfig+0x7cc>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004282:	d009      	beq.n	8004298 <HAL_RCC_OscConfig+0x7cc>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800428c:	d004      	beq.n	8004298 <HAL_RCC_OscConfig+0x7cc>
 800428e:	f240 21b6 	movw	r1, #694	; 0x2b6
 8004292:	4814      	ldr	r0, [pc, #80]	; (80042e4 <HAL_RCC_OscConfig+0x818>)
 8004294:	f7fc ff32 	bl	80010fc <assert_failed>
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042a0:	d00e      	beq.n	80042c0 <HAL_RCC_OscConfig+0x7f4>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042aa:	d009      	beq.n	80042c0 <HAL_RCC_OscConfig+0x7f4>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042b4:	d004      	beq.n	80042c0 <HAL_RCC_OscConfig+0x7f4>
 80042b6:	f240 21b7 	movw	r1, #695	; 0x2b7
 80042ba:	480a      	ldr	r0, [pc, #40]	; (80042e4 <HAL_RCC_OscConfig+0x818>)
 80042bc:	f7fc ff1e 	bl	80010fc <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c0:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <HAL_RCC_OscConfig+0x820>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c6:	f7fd faf3 	bl	80018b0 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042cc:	e010      	b.n	80042f0 <HAL_RCC_OscConfig+0x824>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ce:	f7fd faef 	bl	80018b0 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d909      	bls.n	80042f0 <HAL_RCC_OscConfig+0x824>
          {
            return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e06b      	b.n	80043b8 <HAL_RCC_OscConfig+0x8ec>
 80042e0:	40023800 	.word	0x40023800
 80042e4:	08009950 	.word	0x08009950
 80042e8:	40007000 	.word	0x40007000
 80042ec:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042f0:	4b33      	ldr	r3, [pc, #204]	; (80043c0 <HAL_RCC_OscConfig+0x8f4>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e8      	bne.n	80042ce <HAL_RCC_OscConfig+0x802>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042fc:	4b30      	ldr	r3, [pc, #192]	; (80043c0 <HAL_RCC_OscConfig+0x8f4>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	4319      	orrs	r1, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	430b      	orrs	r3, r1
 8004314:	492a      	ldr	r1, [pc, #168]	; (80043c0 <HAL_RCC_OscConfig+0x8f4>)
 8004316:	4313      	orrs	r3, r2
 8004318:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800431a:	4b2a      	ldr	r3, [pc, #168]	; (80043c4 <HAL_RCC_OscConfig+0x8f8>)
 800431c:	2201      	movs	r2, #1
 800431e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004320:	f7fd fac6 	bl	80018b0 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x86e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004328:	f7fd fac2 	bl	80018b0 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x86e>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e03e      	b.n	80043b8 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800433a:	4b21      	ldr	r3, [pc, #132]	; (80043c0 <HAL_RCC_OscConfig+0x8f4>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0f0      	beq.n	8004328 <HAL_RCC_OscConfig+0x85c>
 8004346:	e036      	b.n	80043b6 <HAL_RCC_OscConfig+0x8ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004348:	4b1e      	ldr	r3, [pc, #120]	; (80043c4 <HAL_RCC_OscConfig+0x8f8>)
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434e:	f7fd faaf 	bl	80018b0 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x89c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004356:	f7fd faab 	bl	80018b0 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x89c>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e027      	b.n	80043b8 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004368:	4b15      	ldr	r3, [pc, #84]	; (80043c0 <HAL_RCC_OscConfig+0x8f4>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1f0      	bne.n	8004356 <HAL_RCC_OscConfig+0x88a>
 8004374:	e01f      	b.n	80043b6 <HAL_RCC_OscConfig+0x8ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_RCC_OscConfig+0x8b6>
      {
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e01a      	b.n	80043b8 <HAL_RCC_OscConfig+0x8ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004382:	4b0f      	ldr	r3, [pc, #60]	; (80043c0 <HAL_RCC_OscConfig+0x8f4>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004392:	429a      	cmp	r2, r3
 8004394:	d10d      	bne.n	80043b2 <HAL_RCC_OscConfig+0x8e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d106      	bne.n	80043b2 <HAL_RCC_OscConfig+0x8e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d001      	beq.n	80043b6 <HAL_RCC_OscConfig+0x8ea>
        {
          return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <HAL_RCC_OscConfig+0x8ec>
        }
      }
    }
  }

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3720      	adds	r7, #32
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40023800 	.word	0x40023800
 80043c4:	42470060 	.word	0x42470060

080043c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e1a4      	b.n	8004726 <HAL_RCC_ClockConfig+0x35e>
  }

  assert_param(IS_FLASH_LATENCY(FLatency));
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d007      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x2a>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d004      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x2a>
 80043e8:	f240 312a 	movw	r1, #810	; 0x32a
 80043ec:	4893      	ldr	r0, [pc, #588]	; (800463c <HAL_RCC_ClockConfig+0x274>)
 80043ee:	f7fc fe85 	bl	80010fc <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043f2:	4b93      	ldr	r3, [pc, #588]	; (8004640 <HAL_RCC_ClockConfig+0x278>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d919      	bls.n	8004434 <HAL_RCC_ClockConfig+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d105      	bne.n	8004412 <HAL_RCC_ClockConfig+0x4a>
 8004406:	4b8e      	ldr	r3, [pc, #568]	; (8004640 <HAL_RCC_ClockConfig+0x278>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a8d      	ldr	r2, [pc, #564]	; (8004640 <HAL_RCC_ClockConfig+0x278>)
 800440c:	f043 0304 	orr.w	r3, r3, #4
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	4b8b      	ldr	r3, [pc, #556]	; (8004640 <HAL_RCC_ClockConfig+0x278>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f023 0201 	bic.w	r2, r3, #1
 800441a:	4989      	ldr	r1, [pc, #548]	; (8004640 <HAL_RCC_ClockConfig+0x278>)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	4313      	orrs	r3, r2
 8004420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004422:	4b87      	ldr	r3, [pc, #540]	; (8004640 <HAL_RCC_ClockConfig+0x278>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d001      	beq.n	8004434 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e178      	b.n	8004726 <HAL_RCC_ClockConfig+0x35e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d031      	beq.n	80044a4 <HAL_RCC_ClockConfig+0xdc>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d024      	beq.n	8004492 <HAL_RCC_ClockConfig+0xca>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2b80      	cmp	r3, #128	; 0x80
 800444e:	d020      	beq.n	8004492 <HAL_RCC_ClockConfig+0xca>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	2b90      	cmp	r3, #144	; 0x90
 8004456:	d01c      	beq.n	8004492 <HAL_RCC_ClockConfig+0xca>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	2ba0      	cmp	r3, #160	; 0xa0
 800445e:	d018      	beq.n	8004492 <HAL_RCC_ClockConfig+0xca>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	2bb0      	cmp	r3, #176	; 0xb0
 8004466:	d014      	beq.n	8004492 <HAL_RCC_ClockConfig+0xca>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	2bc0      	cmp	r3, #192	; 0xc0
 800446e:	d010      	beq.n	8004492 <HAL_RCC_ClockConfig+0xca>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	2bd0      	cmp	r3, #208	; 0xd0
 8004476:	d00c      	beq.n	8004492 <HAL_RCC_ClockConfig+0xca>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	2be0      	cmp	r3, #224	; 0xe0
 800447e:	d008      	beq.n	8004492 <HAL_RCC_ClockConfig+0xca>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	2bf0      	cmp	r3, #240	; 0xf0
 8004486:	d004      	beq.n	8004492 <HAL_RCC_ClockConfig+0xca>
 8004488:	f240 3141 	movw	r1, #833	; 0x341
 800448c:	486b      	ldr	r0, [pc, #428]	; (800463c <HAL_RCC_ClockConfig+0x274>)
 800448e:	f7fc fe35 	bl	80010fc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004492:	4b6c      	ldr	r3, [pc, #432]	; (8004644 <HAL_RCC_ClockConfig+0x27c>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	4969      	ldr	r1, [pc, #420]	; (8004644 <HAL_RCC_ClockConfig+0x27c>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 80a3 	beq.w	80045f8 <HAL_RCC_ClockConfig+0x230>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d010      	beq.n	80044dc <HAL_RCC_ClockConfig+0x114>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d00c      	beq.n	80044dc <HAL_RCC_ClockConfig+0x114>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d008      	beq.n	80044dc <HAL_RCC_ClockConfig+0x114>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d004      	beq.n	80044dc <HAL_RCC_ClockConfig+0x114>
 80044d2:	f44f 7152 	mov.w	r1, #840	; 0x348
 80044d6:	4859      	ldr	r0, [pc, #356]	; (800463c <HAL_RCC_ClockConfig+0x274>)
 80044d8:	f7fc fe10 	bl	80010fc <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d107      	bne.n	80044f4 <HAL_RCC_ClockConfig+0x12c>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044e4:	4b57      	ldr	r3, [pc, #348]	; (8004644 <HAL_RCC_ClockConfig+0x27c>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d121      	bne.n	8004534 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e118      	b.n	8004726 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d107      	bne.n	800450c <HAL_RCC_ClockConfig+0x144>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044fc:	4b51      	ldr	r3, [pc, #324]	; (8004644 <HAL_RCC_ClockConfig+0x27c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d115      	bne.n	8004534 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e10c      	b.n	8004726 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d107      	bne.n	8004524 <HAL_RCC_ClockConfig+0x15c>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004514:	4b4b      	ldr	r3, [pc, #300]	; (8004644 <HAL_RCC_ClockConfig+0x27c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d109      	bne.n	8004534 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e100      	b.n	8004726 <HAL_RCC_ClockConfig+0x35e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004524:	4b47      	ldr	r3, [pc, #284]	; (8004644 <HAL_RCC_ClockConfig+0x27c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e0f8      	b.n	8004726 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004534:	4b43      	ldr	r3, [pc, #268]	; (8004644 <HAL_RCC_ClockConfig+0x27c>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f023 0203 	bic.w	r2, r3, #3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	4940      	ldr	r1, [pc, #256]	; (8004644 <HAL_RCC_ClockConfig+0x27c>)
 8004542:	4313      	orrs	r3, r2
 8004544:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004546:	f7fd f9b3 	bl	80018b0 <HAL_GetTick>
 800454a:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2b02      	cmp	r3, #2
 8004552:	d112      	bne.n	800457a <HAL_RCC_ClockConfig+0x1b2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004554:	e00a      	b.n	800456c <HAL_RCC_ClockConfig+0x1a4>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004556:	f7fd f9ab 	bl	80018b0 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	f241 3288 	movw	r2, #5000	; 0x1388
 8004564:	4293      	cmp	r3, r2
 8004566:	d901      	bls.n	800456c <HAL_RCC_ClockConfig+0x1a4>
        {
          return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e0dc      	b.n	8004726 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800456c:	4b35      	ldr	r3, [pc, #212]	; (8004644 <HAL_RCC_ClockConfig+0x27c>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 030c 	and.w	r3, r3, #12
 8004574:	2b08      	cmp	r3, #8
 8004576:	d1ee      	bne.n	8004556 <HAL_RCC_ClockConfig+0x18e>
 8004578:	e03e      	b.n	80045f8 <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b03      	cmp	r3, #3
 8004580:	d112      	bne.n	80045a8 <HAL_RCC_ClockConfig+0x1e0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004582:	e00a      	b.n	800459a <HAL_RCC_ClockConfig+0x1d2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004584:	f7fd f994 	bl	80018b0 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004592:	4293      	cmp	r3, r2
 8004594:	d901      	bls.n	800459a <HAL_RCC_ClockConfig+0x1d2>
        {
          return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e0c5      	b.n	8004726 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800459a:	4b2a      	ldr	r3, [pc, #168]	; (8004644 <HAL_RCC_ClockConfig+0x27c>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 030c 	and.w	r3, r3, #12
 80045a2:	2b0c      	cmp	r3, #12
 80045a4:	d1ee      	bne.n	8004584 <HAL_RCC_ClockConfig+0x1bc>
 80045a6:	e027      	b.n	80045f8 <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d11d      	bne.n	80045ec <HAL_RCC_ClockConfig+0x224>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80045b0:	e00a      	b.n	80045c8 <HAL_RCC_ClockConfig+0x200>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b2:	f7fd f97d 	bl	80018b0 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_ClockConfig+0x200>
        {
          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e0ae      	b.n	8004726 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80045c8:	4b1e      	ldr	r3, [pc, #120]	; (8004644 <HAL_RCC_ClockConfig+0x27c>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 030c 	and.w	r3, r3, #12
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d1ee      	bne.n	80045b2 <HAL_RCC_ClockConfig+0x1ea>
 80045d4:	e010      	b.n	80045f8 <HAL_RCC_ClockConfig+0x230>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d6:	f7fd f96b 	bl	80018b0 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_ClockConfig+0x224>
        {
          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e09c      	b.n	8004726 <HAL_RCC_ClockConfig+0x35e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80045ec:	4b15      	ldr	r3, [pc, #84]	; (8004644 <HAL_RCC_ClockConfig+0x27c>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 030c 	and.w	r3, r3, #12
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1ee      	bne.n	80045d6 <HAL_RCC_ClockConfig+0x20e>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045f8:	4b11      	ldr	r3, [pc, #68]	; (8004640 <HAL_RCC_ClockConfig+0x278>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	429a      	cmp	r2, r3
 8004604:	d220      	bcs.n	8004648 <HAL_RCC_ClockConfig+0x280>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d105      	bne.n	8004618 <HAL_RCC_ClockConfig+0x250>
 800460c:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <HAL_RCC_ClockConfig+0x278>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a0b      	ldr	r2, [pc, #44]	; (8004640 <HAL_RCC_ClockConfig+0x278>)
 8004612:	f043 0304 	orr.w	r3, r3, #4
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	4b09      	ldr	r3, [pc, #36]	; (8004640 <HAL_RCC_ClockConfig+0x278>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f023 0201 	bic.w	r2, r3, #1
 8004620:	4907      	ldr	r1, [pc, #28]	; (8004640 <HAL_RCC_ClockConfig+0x278>)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	4313      	orrs	r3, r2
 8004626:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <HAL_RCC_ClockConfig+0x278>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	429a      	cmp	r2, r3
 8004634:	d008      	beq.n	8004648 <HAL_RCC_ClockConfig+0x280>
    {
      return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e075      	b.n	8004726 <HAL_RCC_ClockConfig+0x35e>
 800463a:	bf00      	nop
 800463c:	08009950 	.word	0x08009950
 8004640:	40023c00 	.word	0x40023c00
 8004644:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	2b00      	cmp	r3, #0
 8004652:	d025      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x2d8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d018      	beq.n	800468e <HAL_RCC_ClockConfig+0x2c6>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004664:	d013      	beq.n	800468e <HAL_RCC_ClockConfig+0x2c6>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800466e:	d00e      	beq.n	800468e <HAL_RCC_ClockConfig+0x2c6>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004678:	d009      	beq.n	800468e <HAL_RCC_ClockConfig+0x2c6>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004682:	d004      	beq.n	800468e <HAL_RCC_ClockConfig+0x2c6>
 8004684:	f240 31ad 	movw	r1, #941	; 0x3ad
 8004688:	4829      	ldr	r0, [pc, #164]	; (8004730 <HAL_RCC_ClockConfig+0x368>)
 800468a:	f7fc fd37 	bl	80010fc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800468e:	4b29      	ldr	r3, [pc, #164]	; (8004734 <HAL_RCC_ClockConfig+0x36c>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	4926      	ldr	r1, [pc, #152]	; (8004734 <HAL_RCC_ClockConfig+0x36c>)
 800469c:	4313      	orrs	r3, r2
 800469e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d026      	beq.n	80046fa <HAL_RCC_ClockConfig+0x332>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d018      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x31e>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046bc:	d013      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x31e>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80046c6:	d00e      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x31e>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80046d0:	d009      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x31e>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046da:	d004      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x31e>
 80046dc:	f44f 716d 	mov.w	r1, #948	; 0x3b4
 80046e0:	4813      	ldr	r0, [pc, #76]	; (8004730 <HAL_RCC_ClockConfig+0x368>)
 80046e2:	f7fc fd0b 	bl	80010fc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046e6:	4b13      	ldr	r3, [pc, #76]	; (8004734 <HAL_RCC_ClockConfig+0x36c>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	490f      	ldr	r1, [pc, #60]	; (8004734 <HAL_RCC_ClockConfig+0x36c>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046fa:	f000 f823 	bl	8004744 <HAL_RCC_GetSysClockFreq>
 80046fe:	4601      	mov	r1, r0
 8004700:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <HAL_RCC_ClockConfig+0x36c>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	091b      	lsrs	r3, r3, #4
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	4a0b      	ldr	r2, [pc, #44]	; (8004738 <HAL_RCC_ClockConfig+0x370>)
 800470c:	5cd3      	ldrb	r3, [r2, r3]
 800470e:	fa21 f303 	lsr.w	r3, r1, r3
 8004712:	4a0a      	ldr	r2, [pc, #40]	; (800473c <HAL_RCC_ClockConfig+0x374>)
 8004714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004716:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <HAL_RCC_ClockConfig+0x378>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f7fc fd2c 	bl	8001178 <HAL_InitTick>
 8004720:	4603      	mov	r3, r0
 8004722:	72fb      	strb	r3, [r7, #11]

  return status;
 8004724:	7afb      	ldrb	r3, [r7, #11]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	08009950 	.word	0x08009950
 8004734:	40023800 	.word	0x40023800
 8004738:	08009b24 	.word	0x08009b24
 800473c:	20000000 	.word	0x20000000
 8004740:	20000004 	.word	0x20000004

08004744 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004744:	b480      	push	{r7}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800474a:	4b26      	ldr	r3, [pc, #152]	; (80047e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f003 030c 	and.w	r3, r3, #12
 8004756:	2b08      	cmp	r3, #8
 8004758:	d006      	beq.n	8004768 <HAL_RCC_GetSysClockFreq+0x24>
 800475a:	2b0c      	cmp	r3, #12
 800475c:	d007      	beq.n	800476e <HAL_RCC_GetSysClockFreq+0x2a>
 800475e:	2b04      	cmp	r3, #4
 8004760:	d12c      	bne.n	80047bc <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004762:	4b21      	ldr	r3, [pc, #132]	; (80047e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004764:	613b      	str	r3, [r7, #16]
      break;
 8004766:	e037      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004768:	4b20      	ldr	r3, [pc, #128]	; (80047ec <HAL_RCC_GetSysClockFreq+0xa8>)
 800476a:	613b      	str	r3, [r7, #16]
      break;
 800476c:	e034      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	0c9b      	lsrs	r3, r3, #18
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	4a1e      	ldr	r2, [pc, #120]	; (80047f0 <HAL_RCC_GetSysClockFreq+0xac>)
 8004778:	5cd3      	ldrb	r3, [r2, r3]
 800477a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	0d9b      	lsrs	r3, r3, #22
 8004780:	f003 0303 	and.w	r3, r3, #3
 8004784:	3301      	adds	r3, #1
 8004786:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004788:	4b16      	ldr	r3, [pc, #88]	; (80047e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d008      	beq.n	80047a6 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	4a15      	ldr	r2, [pc, #84]	; (80047ec <HAL_RCC_GetSysClockFreq+0xa8>)
 8004798:	fb02 f203 	mul.w	r2, r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	e007      	b.n	80047b6 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	4a0f      	ldr	r2, [pc, #60]	; (80047e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80047aa:	fb02 f203 	mul.w	r2, r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	613b      	str	r3, [r7, #16]
      break;
 80047ba:	e00d      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80047bc:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	0b5b      	lsrs	r3, r3, #13
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	3301      	adds	r3, #1
 80047cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	613b      	str	r3, [r7, #16]
      break;
 80047d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047d8:	693b      	ldr	r3, [r7, #16]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	371c      	adds	r7, #28
 80047de:	46bd      	mov	sp, r7
 80047e0:	bc80      	pop	{r7}
 80047e2:	4770      	bx	lr
 80047e4:	40023800 	.word	0x40023800
 80047e8:	00f42400 	.word	0x00f42400
 80047ec:	007a1200 	.word	0x007a1200
 80047f0:	08009b18 	.word	0x08009b18

080047f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047f8:	4b02      	ldr	r3, [pc, #8]	; (8004804 <HAL_RCC_GetHCLKFreq+0x10>)
 80047fa:	681b      	ldr	r3, [r3, #0]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	46bd      	mov	sp, r7
 8004800:	bc80      	pop	{r7}
 8004802:	4770      	bx	lr
 8004804:	20000000 	.word	0x20000000

08004808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800480c:	f7ff fff2 	bl	80047f4 <HAL_RCC_GetHCLKFreq>
 8004810:	4601      	mov	r1, r0
 8004812:	4b05      	ldr	r3, [pc, #20]	; (8004828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	0a1b      	lsrs	r3, r3, #8
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	4a03      	ldr	r2, [pc, #12]	; (800482c <HAL_RCC_GetPCLK1Freq+0x24>)
 800481e:	5cd3      	ldrb	r3, [r2, r3]
 8004820:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004824:	4618      	mov	r0, r3
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40023800 	.word	0x40023800
 800482c:	08009b34 	.word	0x08009b34

08004830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004834:	f7ff ffde 	bl	80047f4 <HAL_RCC_GetHCLKFreq>
 8004838:	4601      	mov	r1, r0
 800483a:	4b05      	ldr	r3, [pc, #20]	; (8004850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	0adb      	lsrs	r3, r3, #11
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	4a03      	ldr	r2, [pc, #12]	; (8004854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004846:	5cd3      	ldrb	r3, [r2, r3]
 8004848:	fa21 f303 	lsr.w	r3, r1, r3
}
 800484c:	4618      	mov	r0, r3
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40023800 	.word	0x40023800
 8004854:	08009b34 	.word	0x08009b34

08004858 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d104      	bne.n	8004872 <HAL_RCC_GetClockConfig+0x1a>
 8004868:	f240 41fa 	movw	r1, #1274	; 0x4fa
 800486c:	4818      	ldr	r0, [pc, #96]	; (80048d0 <HAL_RCC_GetClockConfig+0x78>)
 800486e:	f7fc fc45 	bl	80010fc <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d104      	bne.n	8004882 <HAL_RCC_GetClockConfig+0x2a>
 8004878:	f240 41fb 	movw	r1, #1275	; 0x4fb
 800487c:	4814      	ldr	r0, [pc, #80]	; (80048d0 <HAL_RCC_GetClockConfig+0x78>)
 800487e:	f7fc fc3d 	bl	80010fc <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	220f      	movs	r2, #15
 8004886:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004888:	4b12      	ldr	r3, [pc, #72]	; (80048d4 <HAL_RCC_GetClockConfig+0x7c>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f003 0203 	and.w	r2, r3, #3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004894:	4b0f      	ldr	r3, [pc, #60]	; (80048d4 <HAL_RCC_GetClockConfig+0x7c>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80048a0:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <HAL_RCC_GetClockConfig+0x7c>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80048ac:	4b09      	ldr	r3, [pc, #36]	; (80048d4 <HAL_RCC_GetClockConfig+0x7c>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	08db      	lsrs	r3, r3, #3
 80048b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80048ba:	4b07      	ldr	r3, [pc, #28]	; (80048d8 <HAL_RCC_GetClockConfig+0x80>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0201 	and.w	r2, r3, #1
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	601a      	str	r2, [r3, #0]
}
 80048c6:	bf00      	nop
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	08009950 	.word	0x08009950
 80048d4:	40023800 	.word	0x40023800
 80048d8:	40023c00 	.word	0x40023c00

080048dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048e4:	2300      	movs	r3, #0
 80048e6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80048e8:	4b29      	ldr	r3, [pc, #164]	; (8004990 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d12c      	bne.n	800494e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048f4:	4b26      	ldr	r3, [pc, #152]	; (8004990 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004900:	4b24      	ldr	r3, [pc, #144]	; (8004994 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	e016      	b.n	800493a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800490c:	4b20      	ldr	r3, [pc, #128]	; (8004990 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	4a1f      	ldr	r2, [pc, #124]	; (8004990 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004916:	6253      	str	r3, [r2, #36]	; 0x24
 8004918:	4b1d      	ldr	r3, [pc, #116]	; (8004990 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004920:	60fb      	str	r3, [r7, #12]
 8004922:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004924:	4b1b      	ldr	r3, [pc, #108]	; (8004994 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800492c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800492e:	4b18      	ldr	r3, [pc, #96]	; (8004990 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	4a17      	ldr	r2, [pc, #92]	; (8004990 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004938:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004940:	d105      	bne.n	800494e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004948:	d101      	bne.n	800494e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800494a:	2301      	movs	r3, #1
 800494c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d105      	bne.n	8004960 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004954:	4b10      	ldr	r3, [pc, #64]	; (8004998 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a0f      	ldr	r2, [pc, #60]	; (8004998 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800495a:	f043 0304 	orr.w	r3, r3, #4
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f023 0201 	bic.w	r2, r3, #1
 8004968:	490b      	ldr	r1, [pc, #44]	; (8004998 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004970:	4b09      	ldr	r3, [pc, #36]	; (8004998 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	429a      	cmp	r2, r3
 800497c:	d001      	beq.n	8004982 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e000      	b.n	8004984 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	371c      	adds	r7, #28
 8004988:	46bd      	mov	sp, r7
 800498a:	bc80      	pop	{r7}
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40023800 	.word	0x40023800
 8004994:	40007000 	.word	0x40007000
 8004998:	40023c00 	.word	0x40023c00

0800499c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e088      	b.n	8004ac0 <HAL_TIM_Base_Init+0x124>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b6:	d02c      	beq.n	8004a12 <HAL_TIM_Base_Init+0x76>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a42      	ldr	r2, [pc, #264]	; (8004ac8 <HAL_TIM_Base_Init+0x12c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d027      	beq.n	8004a12 <HAL_TIM_Base_Init+0x76>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a41      	ldr	r2, [pc, #260]	; (8004acc <HAL_TIM_Base_Init+0x130>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d022      	beq.n	8004a12 <HAL_TIM_Base_Init+0x76>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a3f      	ldr	r2, [pc, #252]	; (8004ad0 <HAL_TIM_Base_Init+0x134>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d01d      	beq.n	8004a12 <HAL_TIM_Base_Init+0x76>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a3e      	ldr	r2, [pc, #248]	; (8004ad4 <HAL_TIM_Base_Init+0x138>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d018      	beq.n	8004a12 <HAL_TIM_Base_Init+0x76>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a3c      	ldr	r2, [pc, #240]	; (8004ad8 <HAL_TIM_Base_Init+0x13c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d013      	beq.n	8004a12 <HAL_TIM_Base_Init+0x76>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a3b      	ldr	r2, [pc, #236]	; (8004adc <HAL_TIM_Base_Init+0x140>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d00e      	beq.n	8004a12 <HAL_TIM_Base_Init+0x76>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a39      	ldr	r2, [pc, #228]	; (8004ae0 <HAL_TIM_Base_Init+0x144>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d009      	beq.n	8004a12 <HAL_TIM_Base_Init+0x76>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a38      	ldr	r2, [pc, #224]	; (8004ae4 <HAL_TIM_Base_Init+0x148>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d004      	beq.n	8004a12 <HAL_TIM_Base_Init+0x76>
 8004a08:	f240 110b 	movw	r1, #267	; 0x10b
 8004a0c:	4836      	ldr	r0, [pc, #216]	; (8004ae8 <HAL_TIM_Base_Init+0x14c>)
 8004a0e:	f7fc fb75 	bl	80010fc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d014      	beq.n	8004a44 <HAL_TIM_Base_Init+0xa8>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2b10      	cmp	r3, #16
 8004a20:	d010      	beq.n	8004a44 <HAL_TIM_Base_Init+0xa8>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	2b20      	cmp	r3, #32
 8004a28:	d00c      	beq.n	8004a44 <HAL_TIM_Base_Init+0xa8>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2b40      	cmp	r3, #64	; 0x40
 8004a30:	d008      	beq.n	8004a44 <HAL_TIM_Base_Init+0xa8>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	2b60      	cmp	r3, #96	; 0x60
 8004a38:	d004      	beq.n	8004a44 <HAL_TIM_Base_Init+0xa8>
 8004a3a:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8004a3e:	482a      	ldr	r0, [pc, #168]	; (8004ae8 <HAL_TIM_Base_Init+0x14c>)
 8004a40:	f7fc fb5c 	bl	80010fc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00e      	beq.n	8004a6a <HAL_TIM_Base_Init+0xce>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a54:	d009      	beq.n	8004a6a <HAL_TIM_Base_Init+0xce>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a5e:	d004      	beq.n	8004a6a <HAL_TIM_Base_Init+0xce>
 8004a60:	f240 110d 	movw	r1, #269	; 0x10d
 8004a64:	4820      	ldr	r0, [pc, #128]	; (8004ae8 <HAL_TIM_Base_Init+0x14c>)
 8004a66:	f7fc fb49 	bl	80010fc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d008      	beq.n	8004a84 <HAL_TIM_Base_Init+0xe8>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	2b80      	cmp	r3, #128	; 0x80
 8004a78:	d004      	beq.n	8004a84 <HAL_TIM_Base_Init+0xe8>
 8004a7a:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004a7e:	481a      	ldr	r0, [pc, #104]	; (8004ae8 <HAL_TIM_Base_Init+0x14c>)
 8004a80:	f7fc fb3c 	bl	80010fc <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d106      	bne.n	8004a9e <HAL_TIM_Base_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f7fc fd83 	bl	80015a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3304      	adds	r3, #4
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	f000 feb5 	bl	8005820 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40000400 	.word	0x40000400
 8004acc:	40000800 	.word	0x40000800
 8004ad0:	40000c00 	.word	0x40000c00
 8004ad4:	40001000 	.word	0x40001000
 8004ad8:	40001400 	.word	0x40001400
 8004adc:	40010800 	.word	0x40010800
 8004ae0:	40010c00 	.word	0x40010c00
 8004ae4:	40011000 	.word	0x40011000
 8004ae8:	08009988 	.word	0x08009988

08004aec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afc:	d02c      	beq.n	8004b58 <HAL_TIM_Base_Start_IT+0x6c>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a24      	ldr	r2, [pc, #144]	; (8004b94 <HAL_TIM_Base_Start_IT+0xa8>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d027      	beq.n	8004b58 <HAL_TIM_Base_Start_IT+0x6c>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a22      	ldr	r2, [pc, #136]	; (8004b98 <HAL_TIM_Base_Start_IT+0xac>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d022      	beq.n	8004b58 <HAL_TIM_Base_Start_IT+0x6c>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a21      	ldr	r2, [pc, #132]	; (8004b9c <HAL_TIM_Base_Start_IT+0xb0>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d01d      	beq.n	8004b58 <HAL_TIM_Base_Start_IT+0x6c>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a1f      	ldr	r2, [pc, #124]	; (8004ba0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d018      	beq.n	8004b58 <HAL_TIM_Base_Start_IT+0x6c>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a1e      	ldr	r2, [pc, #120]	; (8004ba4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d013      	beq.n	8004b58 <HAL_TIM_Base_Start_IT+0x6c>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a1c      	ldr	r2, [pc, #112]	; (8004ba8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00e      	beq.n	8004b58 <HAL_TIM_Base_Start_IT+0x6c>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a1b      	ldr	r2, [pc, #108]	; (8004bac <HAL_TIM_Base_Start_IT+0xc0>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d009      	beq.n	8004b58 <HAL_TIM_Base_Start_IT+0x6c>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a19      	ldr	r2, [pc, #100]	; (8004bb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d004      	beq.n	8004b58 <HAL_TIM_Base_Start_IT+0x6c>
 8004b4e:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 8004b52:	4818      	ldr	r0, [pc, #96]	; (8004bb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b54:	f7fc fad2 	bl	80010fc <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0201 	orr.w	r2, r2, #1
 8004b66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b06      	cmp	r3, #6
 8004b78:	d007      	beq.n	8004b8a <HAL_TIM_Base_Start_IT+0x9e>
  {
    __HAL_TIM_ENABLE(htim);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0201 	orr.w	r2, r2, #1
 8004b88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40000400 	.word	0x40000400
 8004b98:	40000800 	.word	0x40000800
 8004b9c:	40000c00 	.word	0x40000c00
 8004ba0:	40001000 	.word	0x40001000
 8004ba4:	40001400 	.word	0x40001400
 8004ba8:	40010800 	.word	0x40010800
 8004bac:	40010c00 	.word	0x40010c00
 8004bb0:	40011000 	.word	0x40011000
 8004bb4:	08009988 	.word	0x08009988

08004bb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e088      	b.n	8004cdc <HAL_TIM_PWM_Init+0x124>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd2:	d02c      	beq.n	8004c2e <HAL_TIM_PWM_Init+0x76>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a42      	ldr	r2, [pc, #264]	; (8004ce4 <HAL_TIM_PWM_Init+0x12c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d027      	beq.n	8004c2e <HAL_TIM_PWM_Init+0x76>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a41      	ldr	r2, [pc, #260]	; (8004ce8 <HAL_TIM_PWM_Init+0x130>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d022      	beq.n	8004c2e <HAL_TIM_PWM_Init+0x76>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a3f      	ldr	r2, [pc, #252]	; (8004cec <HAL_TIM_PWM_Init+0x134>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d01d      	beq.n	8004c2e <HAL_TIM_PWM_Init+0x76>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a3e      	ldr	r2, [pc, #248]	; (8004cf0 <HAL_TIM_PWM_Init+0x138>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d018      	beq.n	8004c2e <HAL_TIM_PWM_Init+0x76>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a3c      	ldr	r2, [pc, #240]	; (8004cf4 <HAL_TIM_PWM_Init+0x13c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d013      	beq.n	8004c2e <HAL_TIM_PWM_Init+0x76>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a3b      	ldr	r2, [pc, #236]	; (8004cf8 <HAL_TIM_PWM_Init+0x140>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d00e      	beq.n	8004c2e <HAL_TIM_PWM_Init+0x76>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a39      	ldr	r2, [pc, #228]	; (8004cfc <HAL_TIM_PWM_Init+0x144>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d009      	beq.n	8004c2e <HAL_TIM_PWM_Init+0x76>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a38      	ldr	r2, [pc, #224]	; (8004d00 <HAL_TIM_PWM_Init+0x148>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d004      	beq.n	8004c2e <HAL_TIM_PWM_Init+0x76>
 8004c24:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8004c28:	4836      	ldr	r0, [pc, #216]	; (8004d04 <HAL_TIM_PWM_Init+0x14c>)
 8004c2a:	f7fc fa67 	bl	80010fc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d014      	beq.n	8004c60 <HAL_TIM_PWM_Init+0xa8>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	2b10      	cmp	r3, #16
 8004c3c:	d010      	beq.n	8004c60 <HAL_TIM_PWM_Init+0xa8>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	2b20      	cmp	r3, #32
 8004c44:	d00c      	beq.n	8004c60 <HAL_TIM_PWM_Init+0xa8>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	2b40      	cmp	r3, #64	; 0x40
 8004c4c:	d008      	beq.n	8004c60 <HAL_TIM_PWM_Init+0xa8>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	2b60      	cmp	r3, #96	; 0x60
 8004c54:	d004      	beq.n	8004c60 <HAL_TIM_PWM_Init+0xa8>
 8004c56:	f240 4171 	movw	r1, #1137	; 0x471
 8004c5a:	482a      	ldr	r0, [pc, #168]	; (8004d04 <HAL_TIM_PWM_Init+0x14c>)
 8004c5c:	f7fc fa4e 	bl	80010fc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00e      	beq.n	8004c86 <HAL_TIM_PWM_Init+0xce>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c70:	d009      	beq.n	8004c86 <HAL_TIM_PWM_Init+0xce>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c7a:	d004      	beq.n	8004c86 <HAL_TIM_PWM_Init+0xce>
 8004c7c:	f240 4172 	movw	r1, #1138	; 0x472
 8004c80:	4820      	ldr	r0, [pc, #128]	; (8004d04 <HAL_TIM_PWM_Init+0x14c>)
 8004c82:	f7fc fa3b 	bl	80010fc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d008      	beq.n	8004ca0 <HAL_TIM_PWM_Init+0xe8>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	2b80      	cmp	r3, #128	; 0x80
 8004c94:	d004      	beq.n	8004ca0 <HAL_TIM_PWM_Init+0xe8>
 8004c96:	f240 4173 	movw	r1, #1139	; 0x473
 8004c9a:	481a      	ldr	r0, [pc, #104]	; (8004d04 <HAL_TIM_PWM_Init+0x14c>)
 8004c9c:	f7fc fa2e 	bl	80010fc <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d106      	bne.n	8004cba <HAL_TIM_PWM_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f827 	bl	8004d08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	4619      	mov	r1, r3
 8004ccc:	4610      	mov	r0, r2
 8004cce:	f000 fda7 	bl	8005820 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40000400 	.word	0x40000400
 8004ce8:	40000800 	.word	0x40000800
 8004cec:	40000c00 	.word	0x40000c00
 8004cf0:	40001000 	.word	0x40001000
 8004cf4:	40001400 	.word	0x40001400
 8004cf8:	40010800 	.word	0x40010800
 8004cfc:	40010c00 	.word	0x40010c00
 8004d00:	40011000 	.word	0x40011000
 8004d04:	08009988 	.word	0x08009988

08004d08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bc80      	pop	{r7}
 8004d18:	4770      	bx	lr

08004d1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b082      	sub	sp, #8
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d122      	bne.n	8004d76 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d11b      	bne.n	8004d76 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f06f 0202 	mvn.w	r2, #2
 8004d46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	f003 0303 	and.w	r3, r3, #3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 fd44 	bl	80057ea <HAL_TIM_IC_CaptureCallback>
 8004d62:	e005      	b.n	8004d70 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 fd37 	bl	80057d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fd46 	bl	80057fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	f003 0304 	and.w	r3, r3, #4
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d122      	bne.n	8004dca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f003 0304 	and.w	r3, r3, #4
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d11b      	bne.n	8004dca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f06f 0204 	mvn.w	r2, #4
 8004d9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 fd1a 	bl	80057ea <HAL_TIM_IC_CaptureCallback>
 8004db6:	e005      	b.n	8004dc4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 fd0d 	bl	80057d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fd1c 	bl	80057fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f003 0308 	and.w	r3, r3, #8
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d122      	bne.n	8004e1e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b08      	cmp	r3, #8
 8004de4:	d11b      	bne.n	8004e1e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f06f 0208 	mvn.w	r2, #8
 8004dee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2204      	movs	r2, #4
 8004df4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 fcf0 	bl	80057ea <HAL_TIM_IC_CaptureCallback>
 8004e0a:	e005      	b.n	8004e18 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 fce3 	bl	80057d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 fcf2 	bl	80057fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	f003 0310 	and.w	r3, r3, #16
 8004e28:	2b10      	cmp	r3, #16
 8004e2a:	d122      	bne.n	8004e72 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f003 0310 	and.w	r3, r3, #16
 8004e36:	2b10      	cmp	r3, #16
 8004e38:	d11b      	bne.n	8004e72 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f06f 0210 	mvn.w	r2, #16
 8004e42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2208      	movs	r2, #8
 8004e48:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fcc6 	bl	80057ea <HAL_TIM_IC_CaptureCallback>
 8004e5e:	e005      	b.n	8004e6c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 fcb9 	bl	80057d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fcc8 	bl	80057fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d10e      	bne.n	8004e9e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d107      	bne.n	8004e9e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f06f 0201 	mvn.w	r2, #1
 8004e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7fc f917 	bl	80010cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea8:	2b40      	cmp	r3, #64	; 0x40
 8004eaa:	d10e      	bne.n	8004eca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb6:	2b40      	cmp	r3, #64	; 0x40
 8004eb8:	d107      	bne.n	8004eca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 fca2 	bl	800580e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eca:	bf00      	nop
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d010      	beq.n	8004f08 <HAL_TIM_PWM_ConfigChannel+0x34>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d00d      	beq.n	8004f08 <HAL_TIM_PWM_ConfigChannel+0x34>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b08      	cmp	r3, #8
 8004ef0:	d00a      	beq.n	8004f08 <HAL_TIM_PWM_ConfigChannel+0x34>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b0c      	cmp	r3, #12
 8004ef6:	d007      	beq.n	8004f08 <HAL_TIM_PWM_ConfigChannel+0x34>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b3c      	cmp	r3, #60	; 0x3c
 8004efc:	d004      	beq.n	8004f08 <HAL_TIM_PWM_ConfigChannel+0x34>
 8004efe:	f640 5169 	movw	r1, #3433	; 0xd69
 8004f02:	488d      	ldr	r0, [pc, #564]	; (8005138 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8004f04:	f7fc f8fa 	bl	80010fc <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b60      	cmp	r3, #96	; 0x60
 8004f0e:	d008      	beq.n	8004f22 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b70      	cmp	r3, #112	; 0x70
 8004f16:	d004      	beq.n	8004f22 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8004f18:	f640 516a 	movw	r1, #3434	; 0xd6a
 8004f1c:	4886      	ldr	r0, [pc, #536]	; (8005138 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8004f1e:	f7fc f8ed 	bl	80010fc <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d008      	beq.n	8004f3c <HAL_TIM_PWM_ConfigChannel+0x68>
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d004      	beq.n	8004f3c <HAL_TIM_PWM_ConfigChannel+0x68>
 8004f32:	f640 516b 	movw	r1, #3435	; 0xd6b
 8004f36:	4880      	ldr	r0, [pc, #512]	; (8005138 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8004f38:	f7fc f8e0 	bl	80010fc <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d008      	beq.n	8004f56 <HAL_TIM_PWM_ConfigChannel+0x82>
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d004      	beq.n	8004f56 <HAL_TIM_PWM_ConfigChannel+0x82>
 8004f4c:	f640 516c 	movw	r1, #3436	; 0xd6c
 8004f50:	4879      	ldr	r0, [pc, #484]	; (8005138 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8004f52:	f7fc f8d3 	bl	80010fc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d101      	bne.n	8004f64 <HAL_TIM_PWM_ConfigChannel+0x90>
 8004f60:	2302      	movs	r3, #2
 8004f62:	e13b      	b.n	80051dc <HAL_TIM_PWM_ConfigChannel+0x308>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b0c      	cmp	r3, #12
 8004f78:	f200 8126 	bhi.w	80051c8 <HAL_TIM_PWM_ConfigChannel+0x2f4>
 8004f7c:	a201      	add	r2, pc, #4	; (adr r2, 8004f84 <HAL_TIM_PWM_ConfigChannel+0xb0>)
 8004f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f82:	bf00      	nop
 8004f84:	08004fb9 	.word	0x08004fb9
 8004f88:	080051c9 	.word	0x080051c9
 8004f8c:	080051c9 	.word	0x080051c9
 8004f90:	080051c9 	.word	0x080051c9
 8004f94:	08005049 	.word	0x08005049
 8004f98:	080051c9 	.word	0x080051c9
 8004f9c:	080051c9 	.word	0x080051c9
 8004fa0:	080051c9 	.word	0x080051c9
 8004fa4:	080050c7 	.word	0x080050c7
 8004fa8:	080051c9 	.word	0x080051c9
 8004fac:	080051c9 	.word	0x080051c9
 8004fb0:	080051c9 	.word	0x080051c9
 8004fb4:	08005155 	.word	0x08005155
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc0:	d022      	beq.n	8005008 <HAL_TIM_PWM_ConfigChannel+0x134>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a5d      	ldr	r2, [pc, #372]	; (800513c <HAL_TIM_PWM_ConfigChannel+0x268>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d01d      	beq.n	8005008 <HAL_TIM_PWM_ConfigChannel+0x134>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a5b      	ldr	r2, [pc, #364]	; (8005140 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d018      	beq.n	8005008 <HAL_TIM_PWM_ConfigChannel+0x134>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a5a      	ldr	r2, [pc, #360]	; (8005144 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d013      	beq.n	8005008 <HAL_TIM_PWM_ConfigChannel+0x134>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a58      	ldr	r2, [pc, #352]	; (8005148 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00e      	beq.n	8005008 <HAL_TIM_PWM_ConfigChannel+0x134>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a57      	ldr	r2, [pc, #348]	; (800514c <HAL_TIM_PWM_ConfigChannel+0x278>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d009      	beq.n	8005008 <HAL_TIM_PWM_ConfigChannel+0x134>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a55      	ldr	r2, [pc, #340]	; (8005150 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d004      	beq.n	8005008 <HAL_TIM_PWM_ConfigChannel+0x134>
 8004ffe:	f640 5178 	movw	r1, #3448	; 0xd78
 8005002:	484d      	ldr	r0, [pc, #308]	; (8005138 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8005004:	f7fc f87a 	bl	80010fc <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68b9      	ldr	r1, [r7, #8]
 800500e:	4618      	mov	r0, r3
 8005010:	f000 fc76 	bl	8005900 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699a      	ldr	r2, [r3, #24]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0208 	orr.w	r2, r2, #8
 8005022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699a      	ldr	r2, [r3, #24]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0204 	bic.w	r2, r2, #4
 8005032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6999      	ldr	r1, [r3, #24]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	619a      	str	r2, [r3, #24]
      break;
 8005046:	e0c0      	b.n	80051ca <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005050:	d018      	beq.n	8005084 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a39      	ldr	r2, [pc, #228]	; (800513c <HAL_TIM_PWM_ConfigChannel+0x268>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d013      	beq.n	8005084 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a37      	ldr	r2, [pc, #220]	; (8005140 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00e      	beq.n	8005084 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a36      	ldr	r2, [pc, #216]	; (8005144 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d009      	beq.n	8005084 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a34      	ldr	r2, [pc, #208]	; (8005148 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d004      	beq.n	8005084 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 800507a:	f640 5189 	movw	r1, #3465	; 0xd89
 800507e:	482e      	ldr	r0, [pc, #184]	; (8005138 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8005080:	f7fc f83c 	bl	80010fc <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68b9      	ldr	r1, [r7, #8]
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fc74 	bl	8005978 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699a      	ldr	r2, [r3, #24]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800509e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699a      	ldr	r2, [r3, #24]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6999      	ldr	r1, [r3, #24]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	021a      	lsls	r2, r3, #8
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	619a      	str	r2, [r3, #24]
      break;
 80050c4:	e081      	b.n	80051ca <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ce:	d013      	beq.n	80050f8 <HAL_TIM_PWM_ConfigChannel+0x224>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a19      	ldr	r2, [pc, #100]	; (800513c <HAL_TIM_PWM_ConfigChannel+0x268>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00e      	beq.n	80050f8 <HAL_TIM_PWM_ConfigChannel+0x224>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a18      	ldr	r2, [pc, #96]	; (8005140 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d009      	beq.n	80050f8 <HAL_TIM_PWM_ConfigChannel+0x224>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a16      	ldr	r2, [pc, #88]	; (8005144 <HAL_TIM_PWM_ConfigChannel+0x270>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d004      	beq.n	80050f8 <HAL_TIM_PWM_ConfigChannel+0x224>
 80050ee:	f640 519a 	movw	r1, #3482	; 0xd9a
 80050f2:	4811      	ldr	r0, [pc, #68]	; (8005138 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80050f4:	f7fc f802 	bl	80010fc <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68b9      	ldr	r1, [r7, #8]
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fc78 	bl	80059f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	69da      	ldr	r2, [r3, #28]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 0208 	orr.w	r2, r2, #8
 8005112:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	69da      	ldr	r2, [r3, #28]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0204 	bic.w	r2, r2, #4
 8005122:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	69d9      	ldr	r1, [r3, #28]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	61da      	str	r2, [r3, #28]
      break;
 8005136:	e048      	b.n	80051ca <HAL_TIM_PWM_ConfigChannel+0x2f6>
 8005138:	08009988 	.word	0x08009988
 800513c:	40000400 	.word	0x40000400
 8005140:	40000800 	.word	0x40000800
 8005144:	40000c00 	.word	0x40000c00
 8005148:	40010800 	.word	0x40010800
 800514c:	40010c00 	.word	0x40010c00
 8005150:	40011000 	.word	0x40011000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515c:	d013      	beq.n	8005186 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a20      	ldr	r2, [pc, #128]	; (80051e4 <HAL_TIM_PWM_ConfigChannel+0x310>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d00e      	beq.n	8005186 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a1e      	ldr	r2, [pc, #120]	; (80051e8 <HAL_TIM_PWM_ConfigChannel+0x314>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d009      	beq.n	8005186 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a1d      	ldr	r2, [pc, #116]	; (80051ec <HAL_TIM_PWM_ConfigChannel+0x318>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d004      	beq.n	8005186 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 800517c:	f640 51ab 	movw	r1, #3499	; 0xdab
 8005180:	481b      	ldr	r0, [pc, #108]	; (80051f0 <HAL_TIM_PWM_ConfigChannel+0x31c>)
 8005182:	f7fb ffbb 	bl	80010fc <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68b9      	ldr	r1, [r7, #8]
 800518c:	4618      	mov	r0, r3
 800518e:	f000 fc6e 	bl	8005a6e <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	69da      	ldr	r2, [r3, #28]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69da      	ldr	r2, [r3, #28]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	69d9      	ldr	r1, [r3, #28]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	021a      	lsls	r2, r3, #8
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	61da      	str	r2, [r3, #28]
      break;
 80051c6:	e000      	b.n	80051ca <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    default:
      break;
 80051c8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	40000400 	.word	0x40000400
 80051e8:	40000800 	.word	0x40000800
 80051ec:	40000c00 	.word	0x40000c00
 80051f0:	08009988 	.word	0x08009988

080051f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005204:	2b01      	cmp	r3, #1
 8005206:	d101      	bne.n	800520c <HAL_TIM_ConfigClockSource+0x18>
 8005208:	2302      	movs	r3, #2
 800520a:	e2d7      	b.n	80057bc <HAL_TIM_ConfigClockSource+0x5c8>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005224:	d029      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x86>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800522e:	d024      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x86>
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d020      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x86>
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b10      	cmp	r3, #16
 800523e:	d01c      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x86>
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b20      	cmp	r3, #32
 8005246:	d018      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x86>
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b30      	cmp	r3, #48	; 0x30
 800524e:	d014      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x86>
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b40      	cmp	r3, #64	; 0x40
 8005256:	d010      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x86>
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b50      	cmp	r3, #80	; 0x50
 800525e:	d00c      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x86>
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b60      	cmp	r3, #96	; 0x60
 8005266:	d008      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x86>
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b70      	cmp	r3, #112	; 0x70
 800526e:	d004      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x86>
 8005270:	f241 01d0 	movw	r1, #4304	; 0x10d0
 8005274:	4874      	ldr	r0, [pc, #464]	; (8005448 <HAL_TIM_ConfigClockSource+0x254>)
 8005276:	f7fb ff41 	bl	80010fc <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005288:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005290:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b40      	cmp	r3, #64	; 0x40
 80052a0:	f000 820a 	beq.w	80056b8 <HAL_TIM_ConfigClockSource+0x4c4>
 80052a4:	2b40      	cmp	r3, #64	; 0x40
 80052a6:	d80f      	bhi.n	80052c8 <HAL_TIM_ConfigClockSource+0xd4>
 80052a8:	2b10      	cmp	r3, #16
 80052aa:	f000 8256 	beq.w	800575a <HAL_TIM_ConfigClockSource+0x566>
 80052ae:	2b10      	cmp	r3, #16
 80052b0:	d803      	bhi.n	80052ba <HAL_TIM_ConfigClockSource+0xc6>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f000 8251 	beq.w	800575a <HAL_TIM_ConfigClockSource+0x566>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80052b8:	e277      	b.n	80057aa <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 80052ba:	2b20      	cmp	r3, #32
 80052bc:	f000 824d 	beq.w	800575a <HAL_TIM_ConfigClockSource+0x566>
 80052c0:	2b30      	cmp	r3, #48	; 0x30
 80052c2:	f000 824a 	beq.w	800575a <HAL_TIM_ConfigClockSource+0x566>
      break;
 80052c6:	e270      	b.n	80057aa <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 80052c8:	2b70      	cmp	r3, #112	; 0x70
 80052ca:	d04c      	beq.n	8005366 <HAL_TIM_ConfigClockSource+0x172>
 80052cc:	2b70      	cmp	r3, #112	; 0x70
 80052ce:	d806      	bhi.n	80052de <HAL_TIM_ConfigClockSource+0xea>
 80052d0:	2b50      	cmp	r3, #80	; 0x50
 80052d2:	f000 8141 	beq.w	8005558 <HAL_TIM_ConfigClockSource+0x364>
 80052d6:	2b60      	cmp	r3, #96	; 0x60
 80052d8:	f000 818f 	beq.w	80055fa <HAL_TIM_ConfigClockSource+0x406>
      break;
 80052dc:	e265      	b.n	80057aa <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 80052de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e2:	d004      	beq.n	80052ee <HAL_TIM_ConfigClockSource+0xfa>
 80052e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052e8:	f000 80c0 	beq.w	800546c <HAL_TIM_ConfigClockSource+0x278>
      break;
 80052ec:	e25d      	b.n	80057aa <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f6:	f000 8257 	beq.w	80057a8 <HAL_TIM_ConfigClockSource+0x5b4>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a53      	ldr	r2, [pc, #332]	; (800544c <HAL_TIM_ConfigClockSource+0x258>)
 8005300:	4293      	cmp	r3, r2
 8005302:	f000 8251 	beq.w	80057a8 <HAL_TIM_ConfigClockSource+0x5b4>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a51      	ldr	r2, [pc, #324]	; (8005450 <HAL_TIM_ConfigClockSource+0x25c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	f000 824b 	beq.w	80057a8 <HAL_TIM_ConfigClockSource+0x5b4>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a4f      	ldr	r2, [pc, #316]	; (8005454 <HAL_TIM_ConfigClockSource+0x260>)
 8005318:	4293      	cmp	r3, r2
 800531a:	f000 8245 	beq.w	80057a8 <HAL_TIM_ConfigClockSource+0x5b4>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a4d      	ldr	r2, [pc, #308]	; (8005458 <HAL_TIM_ConfigClockSource+0x264>)
 8005324:	4293      	cmp	r3, r2
 8005326:	f000 823f 	beq.w	80057a8 <HAL_TIM_ConfigClockSource+0x5b4>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a4b      	ldr	r2, [pc, #300]	; (800545c <HAL_TIM_ConfigClockSource+0x268>)
 8005330:	4293      	cmp	r3, r2
 8005332:	f000 8239 	beq.w	80057a8 <HAL_TIM_ConfigClockSource+0x5b4>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a49      	ldr	r2, [pc, #292]	; (8005460 <HAL_TIM_ConfigClockSource+0x26c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	f000 8233 	beq.w	80057a8 <HAL_TIM_ConfigClockSource+0x5b4>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a47      	ldr	r2, [pc, #284]	; (8005464 <HAL_TIM_ConfigClockSource+0x270>)
 8005348:	4293      	cmp	r3, r2
 800534a:	f000 822d 	beq.w	80057a8 <HAL_TIM_ConfigClockSource+0x5b4>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a45      	ldr	r2, [pc, #276]	; (8005468 <HAL_TIM_ConfigClockSource+0x274>)
 8005354:	4293      	cmp	r3, r2
 8005356:	f000 8227 	beq.w	80057a8 <HAL_TIM_ConfigClockSource+0x5b4>
 800535a:	f241 01dc 	movw	r1, #4316	; 0x10dc
 800535e:	483a      	ldr	r0, [pc, #232]	; (8005448 <HAL_TIM_ConfigClockSource+0x254>)
 8005360:	f7fb fecc 	bl	80010fc <assert_failed>
      break;
 8005364:	e220      	b.n	80057a8 <HAL_TIM_ConfigClockSource+0x5b4>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800536e:	d018      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a35      	ldr	r2, [pc, #212]	; (800544c <HAL_TIM_ConfigClockSource+0x258>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d013      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0x1ae>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a34      	ldr	r2, [pc, #208]	; (8005450 <HAL_TIM_ConfigClockSource+0x25c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00e      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a32      	ldr	r2, [pc, #200]	; (8005454 <HAL_TIM_ConfigClockSource+0x260>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d009      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0x1ae>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a33      	ldr	r2, [pc, #204]	; (8005460 <HAL_TIM_ConfigClockSource+0x26c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d004      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005398:	f241 01e3 	movw	r1, #4323	; 0x10e3
 800539c:	482a      	ldr	r0, [pc, #168]	; (8005448 <HAL_TIM_ConfigClockSource+0x254>)
 800539e:	f7fb fead 	bl	80010fc <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d013      	beq.n	80053d2 <HAL_TIM_ConfigClockSource+0x1de>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b2:	d00e      	beq.n	80053d2 <HAL_TIM_ConfigClockSource+0x1de>
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053bc:	d009      	beq.n	80053d2 <HAL_TIM_ConfigClockSource+0x1de>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053c6:	d004      	beq.n	80053d2 <HAL_TIM_ConfigClockSource+0x1de>
 80053c8:	f241 01e6 	movw	r1, #4326	; 0x10e6
 80053cc:	481e      	ldr	r0, [pc, #120]	; (8005448 <HAL_TIM_ConfigClockSource+0x254>)
 80053ce:	f7fb fe95 	bl	80010fc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053da:	d014      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0x212>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d010      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0x212>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00c      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0x212>
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d008      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0x212>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b0a      	cmp	r3, #10
 80053fa:	d004      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0x212>
 80053fc:	f241 01e7 	movw	r1, #4327	; 0x10e7
 8005400:	4811      	ldr	r0, [pc, #68]	; (8005448 <HAL_TIM_ConfigClockSource+0x254>)
 8005402:	f7fb fe7b 	bl	80010fc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	2b0f      	cmp	r3, #15
 800540c:	d904      	bls.n	8005418 <HAL_TIM_ConfigClockSource+0x224>
 800540e:	f241 01e8 	movw	r1, #4328	; 0x10e8
 8005412:	480d      	ldr	r0, [pc, #52]	; (8005448 <HAL_TIM_ConfigClockSource+0x254>)
 8005414:	f7fb fe72 	bl	80010fc <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6818      	ldr	r0, [r3, #0]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	6899      	ldr	r1, [r3, #8]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f000 fbd6 	bl	8005bd8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800543a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	609a      	str	r2, [r3, #8]
      break;
 8005444:	e1b1      	b.n	80057aa <HAL_TIM_ConfigClockSource+0x5b6>
 8005446:	bf00      	nop
 8005448:	08009988 	.word	0x08009988
 800544c:	40000400 	.word	0x40000400
 8005450:	40000800 	.word	0x40000800
 8005454:	40000c00 	.word	0x40000c00
 8005458:	40001000 	.word	0x40001000
 800545c:	40001400 	.word	0x40001400
 8005460:	40010800 	.word	0x40010800
 8005464:	40010c00 	.word	0x40010c00
 8005468:	40011000 	.word	0x40011000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005474:	d022      	beq.n	80054bc <HAL_TIM_ConfigClockSource+0x2c8>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a88      	ldr	r2, [pc, #544]	; (800569c <HAL_TIM_ConfigClockSource+0x4a8>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d01d      	beq.n	80054bc <HAL_TIM_ConfigClockSource+0x2c8>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a86      	ldr	r2, [pc, #536]	; (80056a0 <HAL_TIM_ConfigClockSource+0x4ac>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d018      	beq.n	80054bc <HAL_TIM_ConfigClockSource+0x2c8>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a85      	ldr	r2, [pc, #532]	; (80056a4 <HAL_TIM_ConfigClockSource+0x4b0>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d013      	beq.n	80054bc <HAL_TIM_ConfigClockSource+0x2c8>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a83      	ldr	r2, [pc, #524]	; (80056a8 <HAL_TIM_ConfigClockSource+0x4b4>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d00e      	beq.n	80054bc <HAL_TIM_ConfigClockSource+0x2c8>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a82      	ldr	r2, [pc, #520]	; (80056ac <HAL_TIM_ConfigClockSource+0x4b8>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d009      	beq.n	80054bc <HAL_TIM_ConfigClockSource+0x2c8>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a80      	ldr	r2, [pc, #512]	; (80056b0 <HAL_TIM_ConfigClockSource+0x4bc>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d004      	beq.n	80054bc <HAL_TIM_ConfigClockSource+0x2c8>
 80054b2:	f241 01fb 	movw	r1, #4347	; 0x10fb
 80054b6:	487f      	ldr	r0, [pc, #508]	; (80056b4 <HAL_TIM_ConfigClockSource+0x4c0>)
 80054b8:	f7fb fe20 	bl	80010fc <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d013      	beq.n	80054ec <HAL_TIM_ConfigClockSource+0x2f8>
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054cc:	d00e      	beq.n	80054ec <HAL_TIM_ConfigClockSource+0x2f8>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054d6:	d009      	beq.n	80054ec <HAL_TIM_ConfigClockSource+0x2f8>
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054e0:	d004      	beq.n	80054ec <HAL_TIM_ConfigClockSource+0x2f8>
 80054e2:	f241 01fe 	movw	r1, #4350	; 0x10fe
 80054e6:	4873      	ldr	r0, [pc, #460]	; (80056b4 <HAL_TIM_ConfigClockSource+0x4c0>)
 80054e8:	f7fb fe08 	bl	80010fc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054f4:	d014      	beq.n	8005520 <HAL_TIM_ConfigClockSource+0x32c>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d010      	beq.n	8005520 <HAL_TIM_ConfigClockSource+0x32c>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00c      	beq.n	8005520 <HAL_TIM_ConfigClockSource+0x32c>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b02      	cmp	r3, #2
 800550c:	d008      	beq.n	8005520 <HAL_TIM_ConfigClockSource+0x32c>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2b0a      	cmp	r3, #10
 8005514:	d004      	beq.n	8005520 <HAL_TIM_ConfigClockSource+0x32c>
 8005516:	f241 01ff 	movw	r1, #4351	; 0x10ff
 800551a:	4866      	ldr	r0, [pc, #408]	; (80056b4 <HAL_TIM_ConfigClockSource+0x4c0>)
 800551c:	f7fb fdee 	bl	80010fc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	2b0f      	cmp	r3, #15
 8005526:	d904      	bls.n	8005532 <HAL_TIM_ConfigClockSource+0x33e>
 8005528:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 800552c:	4861      	ldr	r0, [pc, #388]	; (80056b4 <HAL_TIM_ConfigClockSource+0x4c0>)
 800552e:	f7fb fde5 	bl	80010fc <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	6899      	ldr	r1, [r3, #8]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f000 fb49 	bl	8005bd8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005554:	609a      	str	r2, [r3, #8]
      break;
 8005556:	e128      	b.n	80057aa <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005560:	d018      	beq.n	8005594 <HAL_TIM_ConfigClockSource+0x3a0>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a4d      	ldr	r2, [pc, #308]	; (800569c <HAL_TIM_ConfigClockSource+0x4a8>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d013      	beq.n	8005594 <HAL_TIM_ConfigClockSource+0x3a0>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a4b      	ldr	r2, [pc, #300]	; (80056a0 <HAL_TIM_ConfigClockSource+0x4ac>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00e      	beq.n	8005594 <HAL_TIM_ConfigClockSource+0x3a0>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a4a      	ldr	r2, [pc, #296]	; (80056a4 <HAL_TIM_ConfigClockSource+0x4b0>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d009      	beq.n	8005594 <HAL_TIM_ConfigClockSource+0x3a0>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a48      	ldr	r2, [pc, #288]	; (80056a8 <HAL_TIM_ConfigClockSource+0x4b4>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d004      	beq.n	8005594 <HAL_TIM_ConfigClockSource+0x3a0>
 800558a:	f241 110f 	movw	r1, #4367	; 0x110f
 800558e:	4849      	ldr	r0, [pc, #292]	; (80056b4 <HAL_TIM_ConfigClockSource+0x4c0>)
 8005590:	f7fb fdb4 	bl	80010fc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800559c:	d014      	beq.n	80055c8 <HAL_TIM_ConfigClockSource+0x3d4>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d010      	beq.n	80055c8 <HAL_TIM_ConfigClockSource+0x3d4>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00c      	beq.n	80055c8 <HAL_TIM_ConfigClockSource+0x3d4>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d008      	beq.n	80055c8 <HAL_TIM_ConfigClockSource+0x3d4>
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2b0a      	cmp	r3, #10
 80055bc:	d004      	beq.n	80055c8 <HAL_TIM_ConfigClockSource+0x3d4>
 80055be:	f241 1112 	movw	r1, #4370	; 0x1112
 80055c2:	483c      	ldr	r0, [pc, #240]	; (80056b4 <HAL_TIM_ConfigClockSource+0x4c0>)
 80055c4:	f7fb fd9a 	bl	80010fc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	2b0f      	cmp	r3, #15
 80055ce:	d904      	bls.n	80055da <HAL_TIM_ConfigClockSource+0x3e6>
 80055d0:	f241 1113 	movw	r1, #4371	; 0x1113
 80055d4:	4837      	ldr	r0, [pc, #220]	; (80056b4 <HAL_TIM_ConfigClockSource+0x4c0>)
 80055d6:	f7fb fd91 	bl	80010fc <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6818      	ldr	r0, [r3, #0]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	6859      	ldr	r1, [r3, #4]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	461a      	mov	r2, r3
 80055e8:	f000 fa7f 	bl	8005aea <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2150      	movs	r1, #80	; 0x50
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 fad6 	bl	8005ba4 <TIM_ITRx_SetConfig>
      break;
 80055f8:	e0d7      	b.n	80057aa <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005602:	d018      	beq.n	8005636 <HAL_TIM_ConfigClockSource+0x442>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a24      	ldr	r2, [pc, #144]	; (800569c <HAL_TIM_ConfigClockSource+0x4a8>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d013      	beq.n	8005636 <HAL_TIM_ConfigClockSource+0x442>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a23      	ldr	r2, [pc, #140]	; (80056a0 <HAL_TIM_ConfigClockSource+0x4ac>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d00e      	beq.n	8005636 <HAL_TIM_ConfigClockSource+0x442>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a21      	ldr	r2, [pc, #132]	; (80056a4 <HAL_TIM_ConfigClockSource+0x4b0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d009      	beq.n	8005636 <HAL_TIM_ConfigClockSource+0x442>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a20      	ldr	r2, [pc, #128]	; (80056a8 <HAL_TIM_ConfigClockSource+0x4b4>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d004      	beq.n	8005636 <HAL_TIM_ConfigClockSource+0x442>
 800562c:	f241 111f 	movw	r1, #4383	; 0x111f
 8005630:	4820      	ldr	r0, [pc, #128]	; (80056b4 <HAL_TIM_ConfigClockSource+0x4c0>)
 8005632:	f7fb fd63 	bl	80010fc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800563e:	d014      	beq.n	800566a <HAL_TIM_ConfigClockSource+0x476>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d010      	beq.n	800566a <HAL_TIM_ConfigClockSource+0x476>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00c      	beq.n	800566a <HAL_TIM_ConfigClockSource+0x476>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	2b02      	cmp	r3, #2
 8005656:	d008      	beq.n	800566a <HAL_TIM_ConfigClockSource+0x476>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	2b0a      	cmp	r3, #10
 800565e:	d004      	beq.n	800566a <HAL_TIM_ConfigClockSource+0x476>
 8005660:	f241 1122 	movw	r1, #4386	; 0x1122
 8005664:	4813      	ldr	r0, [pc, #76]	; (80056b4 <HAL_TIM_ConfigClockSource+0x4c0>)
 8005666:	f7fb fd49 	bl	80010fc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	2b0f      	cmp	r3, #15
 8005670:	d904      	bls.n	800567c <HAL_TIM_ConfigClockSource+0x488>
 8005672:	f241 1123 	movw	r1, #4387	; 0x1123
 8005676:	480f      	ldr	r0, [pc, #60]	; (80056b4 <HAL_TIM_ConfigClockSource+0x4c0>)
 8005678:	f7fb fd40 	bl	80010fc <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6818      	ldr	r0, [r3, #0]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	6859      	ldr	r1, [r3, #4]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	461a      	mov	r2, r3
 800568a:	f000 fa5c 	bl	8005b46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2160      	movs	r1, #96	; 0x60
 8005694:	4618      	mov	r0, r3
 8005696:	f000 fa85 	bl	8005ba4 <TIM_ITRx_SetConfig>
      break;
 800569a:	e086      	b.n	80057aa <HAL_TIM_ConfigClockSource+0x5b6>
 800569c:	40000400 	.word	0x40000400
 80056a0:	40000800 	.word	0x40000800
 80056a4:	40000c00 	.word	0x40000c00
 80056a8:	40010800 	.word	0x40010800
 80056ac:	40010c00 	.word	0x40010c00
 80056b0:	40011000 	.word	0x40011000
 80056b4:	08009988 	.word	0x08009988
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c0:	d018      	beq.n	80056f4 <HAL_TIM_ConfigClockSource+0x500>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a3f      	ldr	r2, [pc, #252]	; (80057c4 <HAL_TIM_ConfigClockSource+0x5d0>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d013      	beq.n	80056f4 <HAL_TIM_ConfigClockSource+0x500>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a3d      	ldr	r2, [pc, #244]	; (80057c8 <HAL_TIM_ConfigClockSource+0x5d4>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00e      	beq.n	80056f4 <HAL_TIM_ConfigClockSource+0x500>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a3c      	ldr	r2, [pc, #240]	; (80057cc <HAL_TIM_ConfigClockSource+0x5d8>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d009      	beq.n	80056f4 <HAL_TIM_ConfigClockSource+0x500>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a3a      	ldr	r2, [pc, #232]	; (80057d0 <HAL_TIM_ConfigClockSource+0x5dc>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d004      	beq.n	80056f4 <HAL_TIM_ConfigClockSource+0x500>
 80056ea:	f241 112f 	movw	r1, #4399	; 0x112f
 80056ee:	4839      	ldr	r0, [pc, #228]	; (80057d4 <HAL_TIM_ConfigClockSource+0x5e0>)
 80056f0:	f7fb fd04 	bl	80010fc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056fc:	d014      	beq.n	8005728 <HAL_TIM_ConfigClockSource+0x534>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d010      	beq.n	8005728 <HAL_TIM_ConfigClockSource+0x534>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00c      	beq.n	8005728 <HAL_TIM_ConfigClockSource+0x534>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	2b02      	cmp	r3, #2
 8005714:	d008      	beq.n	8005728 <HAL_TIM_ConfigClockSource+0x534>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2b0a      	cmp	r3, #10
 800571c:	d004      	beq.n	8005728 <HAL_TIM_ConfigClockSource+0x534>
 800571e:	f241 1132 	movw	r1, #4402	; 0x1132
 8005722:	482c      	ldr	r0, [pc, #176]	; (80057d4 <HAL_TIM_ConfigClockSource+0x5e0>)
 8005724:	f7fb fcea 	bl	80010fc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	2b0f      	cmp	r3, #15
 800572e:	d904      	bls.n	800573a <HAL_TIM_ConfigClockSource+0x546>
 8005730:	f241 1133 	movw	r1, #4403	; 0x1133
 8005734:	4827      	ldr	r0, [pc, #156]	; (80057d4 <HAL_TIM_ConfigClockSource+0x5e0>)
 8005736:	f7fb fce1 	bl	80010fc <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6818      	ldr	r0, [r3, #0]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	6859      	ldr	r1, [r3, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	461a      	mov	r2, r3
 8005748:	f000 f9cf 	bl	8005aea <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2140      	movs	r1, #64	; 0x40
 8005752:	4618      	mov	r0, r3
 8005754:	f000 fa26 	bl	8005ba4 <TIM_ITRx_SetConfig>
      break;
 8005758:	e027      	b.n	80057aa <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005762:	d018      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0x5a2>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a16      	ldr	r2, [pc, #88]	; (80057c4 <HAL_TIM_ConfigClockSource+0x5d0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d013      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0x5a2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a15      	ldr	r2, [pc, #84]	; (80057c8 <HAL_TIM_ConfigClockSource+0x5d4>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d00e      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0x5a2>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a13      	ldr	r2, [pc, #76]	; (80057cc <HAL_TIM_ConfigClockSource+0x5d8>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d009      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0x5a2>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a12      	ldr	r2, [pc, #72]	; (80057d0 <HAL_TIM_ConfigClockSource+0x5dc>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d004      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0x5a2>
 800578c:	f241 1142 	movw	r1, #4418	; 0x1142
 8005790:	4810      	ldr	r0, [pc, #64]	; (80057d4 <HAL_TIM_ConfigClockSource+0x5e0>)
 8005792:	f7fb fcb3 	bl	80010fc <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4619      	mov	r1, r3
 80057a0:	4610      	mov	r0, r2
 80057a2:	f000 f9ff 	bl	8005ba4 <TIM_ITRx_SetConfig>
      break;
 80057a6:	e000      	b.n	80057aa <HAL_TIM_ConfigClockSource+0x5b6>
      break;
 80057a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	40000400 	.word	0x40000400
 80057c8:	40000800 	.word	0x40000800
 80057cc:	40000c00 	.word	0x40000c00
 80057d0:	40010800 	.word	0x40010800
 80057d4:	08009988 	.word	0x08009988

080057d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bc80      	pop	{r7}
 80057e8:	4770      	bx	lr

080057ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b083      	sub	sp, #12
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bc80      	pop	{r7}
 80057fa:	4770      	bx	lr

080057fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	bc80      	pop	{r7}
 800580c:	4770      	bx	lr

0800580e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800580e:	b480      	push	{r7}
 8005810:	b083      	sub	sp, #12
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005816:	bf00      	nop
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	bc80      	pop	{r7}
 800581e:	4770      	bx	lr

08005820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005836:	d00f      	beq.n	8005858 <TIM_Base_SetConfig+0x38>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a2b      	ldr	r2, [pc, #172]	; (80058e8 <TIM_Base_SetConfig+0xc8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00b      	beq.n	8005858 <TIM_Base_SetConfig+0x38>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a2a      	ldr	r2, [pc, #168]	; (80058ec <TIM_Base_SetConfig+0xcc>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d007      	beq.n	8005858 <TIM_Base_SetConfig+0x38>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a29      	ldr	r2, [pc, #164]	; (80058f0 <TIM_Base_SetConfig+0xd0>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d003      	beq.n	8005858 <TIM_Base_SetConfig+0x38>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a28      	ldr	r2, [pc, #160]	; (80058f4 <TIM_Base_SetConfig+0xd4>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d108      	bne.n	800586a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005870:	d017      	beq.n	80058a2 <TIM_Base_SetConfig+0x82>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a1c      	ldr	r2, [pc, #112]	; (80058e8 <TIM_Base_SetConfig+0xc8>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d013      	beq.n	80058a2 <TIM_Base_SetConfig+0x82>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a1b      	ldr	r2, [pc, #108]	; (80058ec <TIM_Base_SetConfig+0xcc>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d00f      	beq.n	80058a2 <TIM_Base_SetConfig+0x82>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a1a      	ldr	r2, [pc, #104]	; (80058f0 <TIM_Base_SetConfig+0xd0>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d00b      	beq.n	80058a2 <TIM_Base_SetConfig+0x82>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a19      	ldr	r2, [pc, #100]	; (80058f4 <TIM_Base_SetConfig+0xd4>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d007      	beq.n	80058a2 <TIM_Base_SetConfig+0x82>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a18      	ldr	r2, [pc, #96]	; (80058f8 <TIM_Base_SetConfig+0xd8>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d003      	beq.n	80058a2 <TIM_Base_SetConfig+0x82>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a17      	ldr	r2, [pc, #92]	; (80058fc <TIM_Base_SetConfig+0xdc>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d108      	bne.n	80058b4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	615a      	str	r2, [r3, #20]
}
 80058de:	bf00      	nop
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bc80      	pop	{r7}
 80058e6:	4770      	bx	lr
 80058e8:	40000400 	.word	0x40000400
 80058ec:	40000800 	.word	0x40000800
 80058f0:	40000c00 	.word	0x40000c00
 80058f4:	40010800 	.word	0x40010800
 80058f8:	40010c00 	.word	0x40010c00
 80058fc:	40011000 	.word	0x40011000

08005900 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	f023 0201 	bic.w	r2, r3, #1
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800592e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0303 	bic.w	r3, r3, #3
 8005936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f023 0302 	bic.w	r3, r3, #2
 8005948:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	621a      	str	r2, [r3, #32]
}
 800596e:	bf00      	nop
 8005970:	371c      	adds	r7, #28
 8005972:	46bd      	mov	sp, r7
 8005974:	bc80      	pop	{r7}
 8005976:	4770      	bx	lr

08005978 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	f023 0210 	bic.w	r2, r3, #16
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	021b      	lsls	r3, r3, #8
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f023 0320 	bic.w	r3, r3, #32
 80059c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	621a      	str	r2, [r3, #32]
}
 80059ea:	bf00      	nop
 80059ec:	371c      	adds	r7, #28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bc80      	pop	{r7}
 80059f2:	4770      	bx	lr

080059f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0303 	bic.w	r3, r3, #3
 8005a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	021b      	lsls	r3, r3, #8
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	621a      	str	r2, [r3, #32]
}
 8005a64:	bf00      	nop
 8005a66:	371c      	adds	r7, #28
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bc80      	pop	{r7}
 8005a6c:	4770      	bx	lr

08005a6e <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b087      	sub	sp, #28
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a9c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	021b      	lsls	r3, r3, #8
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	031b      	lsls	r3, r3, #12
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	621a      	str	r2, [r3, #32]
}
 8005ae0:	bf00      	nop
 8005ae2:	371c      	adds	r7, #28
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bc80      	pop	{r7}
 8005ae8:	4770      	bx	lr

08005aea <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b087      	sub	sp, #28
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	60f8      	str	r0, [r7, #12]
 8005af2:	60b9      	str	r1, [r7, #8]
 8005af4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	f023 0201 	bic.w	r2, r3, #1
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	011b      	lsls	r3, r3, #4
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f023 030a 	bic.w	r3, r3, #10
 8005b26:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	621a      	str	r2, [r3, #32]
}
 8005b3c:	bf00      	nop
 8005b3e:	371c      	adds	r7, #28
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bc80      	pop	{r7}
 8005b44:	4770      	bx	lr

08005b46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b087      	sub	sp, #28
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	60f8      	str	r0, [r7, #12]
 8005b4e:	60b9      	str	r1, [r7, #8]
 8005b50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	f023 0210 	bic.w	r2, r3, #16
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	031b      	lsls	r3, r3, #12
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	621a      	str	r2, [r3, #32]
}
 8005b9a:	bf00      	nop
 8005b9c:	371c      	adds	r7, #28
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bc80      	pop	{r7}
 8005ba2:	4770      	bx	lr

08005ba4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	f043 0307 	orr.w	r3, r3, #7
 8005bc6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	609a      	str	r2, [r3, #8]
}
 8005bce:	bf00      	nop
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bc80      	pop	{r7}
 8005bd6:	4770      	bx	lr

08005bd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	021a      	lsls	r2, r3, #8
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	609a      	str	r2, [r3, #8]
}
 8005c0c:	bf00      	nop
 8005c0e:	371c      	adds	r7, #28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bc80      	pop	{r7}
 8005c14:	4770      	bx	lr
	...

08005c18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c2a:	d017      	beq.n	8005c5c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a41      	ldr	r2, [pc, #260]	; (8005d38 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d012      	beq.n	8005c5c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a40      	ldr	r2, [pc, #256]	; (8005d3c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d00d      	beq.n	8005c5c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a3e      	ldr	r2, [pc, #248]	; (8005d40 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d008      	beq.n	8005c5c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a3d      	ldr	r2, [pc, #244]	; (8005d44 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d003      	beq.n	8005c5c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005c54:	215a      	movs	r1, #90	; 0x5a
 8005c56:	483c      	ldr	r0, [pc, #240]	; (8005d48 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8005c58:	f7fb fa50 	bl	80010fc <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d01f      	beq.n	8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b10      	cmp	r3, #16
 8005c6a:	d01b      	beq.n	8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	d017      	beq.n	8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b30      	cmp	r3, #48	; 0x30
 8005c7a:	d013      	beq.n	8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b40      	cmp	r3, #64	; 0x40
 8005c82:	d00f      	beq.n	8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b50      	cmp	r3, #80	; 0x50
 8005c8a:	d00b      	beq.n	8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b60      	cmp	r3, #96	; 0x60
 8005c92:	d007      	beq.n	8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b70      	cmp	r3, #112	; 0x70
 8005c9a:	d003      	beq.n	8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005c9c:	215b      	movs	r1, #91	; 0x5b
 8005c9e:	482a      	ldr	r0, [pc, #168]	; (8005d48 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8005ca0:	f7fb fa2c 	bl	80010fc <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	2b80      	cmp	r3, #128	; 0x80
 8005caa:	d007      	beq.n	8005cbc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d003      	beq.n	8005cbc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8005cb4:	215c      	movs	r1, #92	; 0x5c
 8005cb6:	4824      	ldr	r0, [pc, #144]	; (8005d48 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8005cb8:	f7fb fa20 	bl	80010fc <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d101      	bne.n	8005cca <HAL_TIMEx_MasterConfigSynchronization+0xb2>
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	e032      	b.n	8005d30 <HAL_TIMEx_MasterConfigSynchronization+0x118>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d02:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	40000400 	.word	0x40000400
 8005d3c:	40000800 	.word	0x40000800
 8005d40:	40000c00 	.word	0x40000c00
 8005d44:	40010800 	.word	0x40010800
 8005d48:	080099c0 	.word	0x080099c0

08005d4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e0aa      	b.n	8005eb4 <HAL_UART_Init+0x168>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d02c      	beq.n	8005dc0 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a54      	ldr	r2, [pc, #336]	; (8005ebc <HAL_UART_Init+0x170>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d00e      	beq.n	8005d8e <HAL_UART_Init+0x42>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a52      	ldr	r2, [pc, #328]	; (8005ec0 <HAL_UART_Init+0x174>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d009      	beq.n	8005d8e <HAL_UART_Init+0x42>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a51      	ldr	r2, [pc, #324]	; (8005ec4 <HAL_UART_Init+0x178>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d004      	beq.n	8005d8e <HAL_UART_Init+0x42>
 8005d84:	f240 1145 	movw	r1, #325	; 0x145
 8005d88:	484f      	ldr	r0, [pc, #316]	; (8005ec8 <HAL_UART_Init+0x17c>)
 8005d8a:	f7fb f9b7 	bl	80010fc <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d032      	beq.n	8005dfc <HAL_UART_Init+0xb0>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d9e:	d02d      	beq.n	8005dfc <HAL_UART_Init+0xb0>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005da8:	d028      	beq.n	8005dfc <HAL_UART_Init+0xb0>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005db2:	d023      	beq.n	8005dfc <HAL_UART_Init+0xb0>
 8005db4:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005db8:	4843      	ldr	r0, [pc, #268]	; (8005ec8 <HAL_UART_Init+0x17c>)
 8005dba:	f7fb f99f 	bl	80010fc <assert_failed>
 8005dbe:	e01d      	b.n	8005dfc <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a3d      	ldr	r2, [pc, #244]	; (8005ebc <HAL_UART_Init+0x170>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d018      	beq.n	8005dfc <HAL_UART_Init+0xb0>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a3c      	ldr	r2, [pc, #240]	; (8005ec0 <HAL_UART_Init+0x174>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d013      	beq.n	8005dfc <HAL_UART_Init+0xb0>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a3a      	ldr	r2, [pc, #232]	; (8005ec4 <HAL_UART_Init+0x178>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00e      	beq.n	8005dfc <HAL_UART_Init+0xb0>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a3a      	ldr	r2, [pc, #232]	; (8005ecc <HAL_UART_Init+0x180>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d009      	beq.n	8005dfc <HAL_UART_Init+0xb0>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a38      	ldr	r2, [pc, #224]	; (8005ed0 <HAL_UART_Init+0x184>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d004      	beq.n	8005dfc <HAL_UART_Init+0xb0>
 8005df2:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8005df6:	4834      	ldr	r0, [pc, #208]	; (8005ec8 <HAL_UART_Init+0x17c>)
 8005df8:	f7fb f980 	bl	80010fc <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d009      	beq.n	8005e18 <HAL_UART_Init+0xcc>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e0c:	d004      	beq.n	8005e18 <HAL_UART_Init+0xcc>
 8005e0e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8005e12:	482d      	ldr	r0, [pc, #180]	; (8005ec8 <HAL_UART_Init+0x17c>)
 8005e14:	f7fb f972 	bl	80010fc <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d009      	beq.n	8005e34 <HAL_UART_Init+0xe8>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	69db      	ldr	r3, [r3, #28]
 8005e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e28:	d004      	beq.n	8005e34 <HAL_UART_Init+0xe8>
 8005e2a:	f240 114d 	movw	r1, #333	; 0x14d
 8005e2e:	4826      	ldr	r0, [pc, #152]	; (8005ec8 <HAL_UART_Init+0x17c>)
 8005e30:	f7fb f964 	bl	80010fc <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d106      	bne.n	8005e4e <HAL_UART_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7fb fc9d 	bl	8001788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2224      	movs	r2, #36	; 0x24
 8005e52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e64:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f9be 	bl	80061e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691a      	ldr	r2, [r3, #16]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e7a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	695a      	ldr	r2, [r3, #20]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e8a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68da      	ldr	r2, [r3, #12]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e9a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2220      	movs	r2, #32
 8005eae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	40013800 	.word	0x40013800
 8005ec0:	40004400 	.word	0x40004400
 8005ec4:	40004800 	.word	0x40004800
 8005ec8:	080099fc 	.word	0x080099fc
 8005ecc:	40004c00 	.word	0x40004c00
 8005ed0:	40005000 	.word	0x40005000

08005ed4 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b088      	sub	sp, #32
 8005ed8:	af02      	add	r7, sp, #8
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	603b      	str	r3, [r7, #0]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b20      	cmp	r3, #32
 8005ef2:	f040 8083 	bne.w	8005ffc <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <HAL_UART_Transmit+0x2e>
 8005efc:	88fb      	ldrh	r3, [r7, #6]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e07b      	b.n	8005ffe <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d101      	bne.n	8005f14 <HAL_UART_Transmit+0x40>
 8005f10:	2302      	movs	r3, #2
 8005f12:	e074      	b.n	8005ffe <HAL_UART_Transmit+0x12a>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2221      	movs	r2, #33	; 0x21
 8005f26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005f2a:	f7fb fcc1 	bl	80018b0 <HAL_GetTick>
 8005f2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	88fa      	ldrh	r2, [r7, #6]
 8005f34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	88fa      	ldrh	r2, [r7, #6]
 8005f3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f3c:	e042      	b.n	8005fc4 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	3b01      	subs	r3, #1
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f54:	d122      	bne.n	8005f9c <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	2180      	movs	r1, #128	; 0x80
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 f8f6 	bl	8006152 <UART_WaitOnFlagUntilTimeout>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e046      	b.n	8005ffe <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f82:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d103      	bne.n	8005f94 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	3302      	adds	r3, #2
 8005f90:	60bb      	str	r3, [r7, #8]
 8005f92:	e017      	b.n	8005fc4 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	3301      	adds	r3, #1
 8005f98:	60bb      	str	r3, [r7, #8]
 8005f9a:	e013      	b.n	8005fc4 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	2180      	movs	r1, #128	; 0x80
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 f8d3 	bl	8006152 <UART_WaitOnFlagUntilTimeout>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e023      	b.n	8005ffe <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	1c5a      	adds	r2, r3, #1
 8005fba:	60ba      	str	r2, [r7, #8]
 8005fbc:	781a      	ldrb	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1b7      	bne.n	8005f3e <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	2140      	movs	r1, #64	; 0x40
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 f8ba 	bl	8006152 <UART_WaitOnFlagUntilTimeout>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e00a      	b.n	8005ffe <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	e000      	b.n	8005ffe <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005ffc:	2302      	movs	r3, #2
  }
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3718      	adds	r7, #24
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b088      	sub	sp, #32
 800600a:	af02      	add	r7, sp, #8
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	603b      	str	r3, [r7, #0]
 8006012:	4613      	mov	r3, r2
 8006014:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b20      	cmp	r3, #32
 8006024:	f040 8090 	bne.w	8006148 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d002      	beq.n	8006034 <HAL_UART_Receive+0x2e>
 800602e:	88fb      	ldrh	r3, [r7, #6]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e088      	b.n	800614a <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800603e:	2b01      	cmp	r3, #1
 8006040:	d101      	bne.n	8006046 <HAL_UART_Receive+0x40>
 8006042:	2302      	movs	r3, #2
 8006044:	e081      	b.n	800614a <HAL_UART_Receive+0x144>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2222      	movs	r2, #34	; 0x22
 8006058:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800605c:	f7fb fc28 	bl	80018b0 <HAL_GetTick>
 8006060:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	88fa      	ldrh	r2, [r7, #6]
 8006066:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	88fa      	ldrh	r2, [r7, #6]
 800606c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800606e:	e05c      	b.n	800612a <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006074:	b29b      	uxth	r3, r3
 8006076:	3b01      	subs	r3, #1
 8006078:	b29a      	uxth	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006086:	d12b      	bne.n	80060e0 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	2200      	movs	r2, #0
 8006090:	2120      	movs	r1, #32
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 f85d 	bl	8006152 <UART_WaitOnFlagUntilTimeout>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e053      	b.n	800614a <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10c      	bne.n	80060c8 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	3302      	adds	r3, #2
 80060c4:	60bb      	str	r3, [r7, #8]
 80060c6:	e030      	b.n	800612a <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	3301      	adds	r3, #1
 80060dc:	60bb      	str	r3, [r7, #8]
 80060de:	e024      	b.n	800612a <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2200      	movs	r2, #0
 80060e8:	2120      	movs	r1, #32
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 f831 	bl	8006152 <UART_WaitOnFlagUntilTimeout>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e027      	b.n	800614a <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d108      	bne.n	8006114 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6859      	ldr	r1, [r3, #4]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	60ba      	str	r2, [r7, #8]
 800610e:	b2ca      	uxtb	r2, r1
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	e00a      	b.n	800612a <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	b2da      	uxtb	r2, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	1c59      	adds	r1, r3, #1
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006126:	b2d2      	uxtb	r2, r2
 8006128:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800612e:	b29b      	uxth	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	d19d      	bne.n	8006070 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2220      	movs	r2, #32
 8006138:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8006144:	2300      	movs	r3, #0
 8006146:	e000      	b.n	800614a <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006148:	2302      	movs	r3, #2
  }
}
 800614a:	4618      	mov	r0, r3
 800614c:	3718      	adds	r7, #24
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	60f8      	str	r0, [r7, #12]
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	603b      	str	r3, [r7, #0]
 800615e:	4613      	mov	r3, r2
 8006160:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006162:	e02c      	b.n	80061be <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616a:	d028      	beq.n	80061be <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d007      	beq.n	8006182 <UART_WaitOnFlagUntilTimeout+0x30>
 8006172:	f7fb fb9d 	bl	80018b0 <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	429a      	cmp	r2, r3
 8006180:	d21d      	bcs.n	80061be <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68da      	ldr	r2, [r3, #12]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006190:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	695a      	ldr	r2, [r3, #20]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0201 	bic.w	r2, r2, #1
 80061a0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2220      	movs	r2, #32
 80061a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2220      	movs	r2, #32
 80061ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e00f      	b.n	80061de <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	4013      	ands	r3, r2
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	bf0c      	ite	eq
 80061ce:	2301      	moveq	r3, #1
 80061d0:	2300      	movne	r3, #0
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	461a      	mov	r2, r3
 80061d6:	79fb      	ldrb	r3, [r7, #7]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d0c3      	beq.n	8006164 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
	...

080061e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	4ab2      	ldr	r2, [pc, #712]	; (80064c0 <UART_SetConfig+0x2d8>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d904      	bls.n	8006204 <UART_SetConfig+0x1c>
 80061fa:	f640 31e2 	movw	r1, #3042	; 0xbe2
 80061fe:	48b1      	ldr	r0, [pc, #708]	; (80064c4 <UART_SetConfig+0x2dc>)
 8006200:	f7fa ff7c 	bl	80010fc <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d009      	beq.n	8006220 <UART_SetConfig+0x38>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006214:	d004      	beq.n	8006220 <UART_SetConfig+0x38>
 8006216:	f640 31e3 	movw	r1, #3043	; 0xbe3
 800621a:	48aa      	ldr	r0, [pc, #680]	; (80064c4 <UART_SetConfig+0x2dc>)
 800621c:	f7fa ff6e 	bl	80010fc <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00e      	beq.n	8006246 <UART_SetConfig+0x5e>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006230:	d009      	beq.n	8006246 <UART_SetConfig+0x5e>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800623a:	d004      	beq.n	8006246 <UART_SetConfig+0x5e>
 800623c:	f640 31e4 	movw	r1, #3044	; 0xbe4
 8006240:	48a0      	ldr	r0, [pc, #640]	; (80064c4 <UART_SetConfig+0x2dc>)
 8006242:	f7fa ff5b 	bl	80010fc <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	695a      	ldr	r2, [r3, #20]
 800624a:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800624e:	4013      	ands	r3, r2
 8006250:	2b00      	cmp	r3, #0
 8006252:	d103      	bne.n	800625c <UART_SetConfig+0x74>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d104      	bne.n	8006266 <UART_SetConfig+0x7e>
 800625c:	f640 31e5 	movw	r1, #3045	; 0xbe5
 8006260:	4898      	ldr	r0, [pc, #608]	; (80064c4 <UART_SetConfig+0x2dc>)
 8006262:	f7fa ff4b 	bl	80010fc <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	68da      	ldr	r2, [r3, #12]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	430a      	orrs	r2, r1
 800627a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	431a      	orrs	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	431a      	orrs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	69db      	ldr	r3, [r3, #28]
 8006290:	4313      	orrs	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800629e:	f023 030c 	bic.w	r3, r3, #12
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	6812      	ldr	r2, [r2, #0]
 80062a6:	68f9      	ldr	r1, [r7, #12]
 80062a8:	430b      	orrs	r3, r1
 80062aa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	699a      	ldr	r2, [r3, #24]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ca:	f040 80a5 	bne.w	8006418 <UART_SetConfig+0x230>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a7d      	ldr	r2, [pc, #500]	; (80064c8 <UART_SetConfig+0x2e0>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d14f      	bne.n	8006378 <UART_SetConfig+0x190>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062d8:	f7fe faaa 	bl	8004830 <HAL_RCC_GetPCLK2Freq>
 80062dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	4613      	mov	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	009a      	lsls	r2, r3, #2
 80062e8:	441a      	add	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	005b      	lsls	r3, r3, #1
 80062f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f4:	4a75      	ldr	r2, [pc, #468]	; (80064cc <UART_SetConfig+0x2e4>)
 80062f6:	fba2 2303 	umull	r2, r3, r2, r3
 80062fa:	095b      	lsrs	r3, r3, #5
 80062fc:	0119      	lsls	r1, r3, #4
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	4613      	mov	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	009a      	lsls	r2, r3, #2
 8006308:	441a      	add	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	005b      	lsls	r3, r3, #1
 8006310:	fbb2 f2f3 	udiv	r2, r2, r3
 8006314:	4b6d      	ldr	r3, [pc, #436]	; (80064cc <UART_SetConfig+0x2e4>)
 8006316:	fba3 0302 	umull	r0, r3, r3, r2
 800631a:	095b      	lsrs	r3, r3, #5
 800631c:	2064      	movs	r0, #100	; 0x64
 800631e:	fb00 f303 	mul.w	r3, r0, r3
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	00db      	lsls	r3, r3, #3
 8006326:	3332      	adds	r3, #50	; 0x32
 8006328:	4a68      	ldr	r2, [pc, #416]	; (80064cc <UART_SetConfig+0x2e4>)
 800632a:	fba2 2303 	umull	r2, r3, r2, r3
 800632e:	095b      	lsrs	r3, r3, #5
 8006330:	005b      	lsls	r3, r3, #1
 8006332:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006336:	4419      	add	r1, r3
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	4613      	mov	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4413      	add	r3, r2
 8006340:	009a      	lsls	r2, r3, #2
 8006342:	441a      	add	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	fbb2 f2f3 	udiv	r2, r2, r3
 800634e:	4b5f      	ldr	r3, [pc, #380]	; (80064cc <UART_SetConfig+0x2e4>)
 8006350:	fba3 0302 	umull	r0, r3, r3, r2
 8006354:	095b      	lsrs	r3, r3, #5
 8006356:	2064      	movs	r0, #100	; 0x64
 8006358:	fb00 f303 	mul.w	r3, r0, r3
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	3332      	adds	r3, #50	; 0x32
 8006362:	4a5a      	ldr	r2, [pc, #360]	; (80064cc <UART_SetConfig+0x2e4>)
 8006364:	fba2 2303 	umull	r2, r3, r2, r3
 8006368:	095b      	lsrs	r3, r3, #5
 800636a:	f003 0207 	and.w	r2, r3, #7
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	440a      	add	r2, r1
 8006374:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006376:	e0f9      	b.n	800656c <UART_SetConfig+0x384>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006378:	f7fe fa46 	bl	8004808 <HAL_RCC_GetPCLK1Freq>
 800637c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	4613      	mov	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	009a      	lsls	r2, r3, #2
 8006388:	441a      	add	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	005b      	lsls	r3, r3, #1
 8006390:	fbb2 f3f3 	udiv	r3, r2, r3
 8006394:	4a4d      	ldr	r2, [pc, #308]	; (80064cc <UART_SetConfig+0x2e4>)
 8006396:	fba2 2303 	umull	r2, r3, r2, r3
 800639a:	095b      	lsrs	r3, r3, #5
 800639c:	0119      	lsls	r1, r3, #4
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	4613      	mov	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4413      	add	r3, r2
 80063a6:	009a      	lsls	r2, r3, #2
 80063a8:	441a      	add	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80063b4:	4b45      	ldr	r3, [pc, #276]	; (80064cc <UART_SetConfig+0x2e4>)
 80063b6:	fba3 0302 	umull	r0, r3, r3, r2
 80063ba:	095b      	lsrs	r3, r3, #5
 80063bc:	2064      	movs	r0, #100	; 0x64
 80063be:	fb00 f303 	mul.w	r3, r0, r3
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	00db      	lsls	r3, r3, #3
 80063c6:	3332      	adds	r3, #50	; 0x32
 80063c8:	4a40      	ldr	r2, [pc, #256]	; (80064cc <UART_SetConfig+0x2e4>)
 80063ca:	fba2 2303 	umull	r2, r3, r2, r3
 80063ce:	095b      	lsrs	r3, r3, #5
 80063d0:	005b      	lsls	r3, r3, #1
 80063d2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063d6:	4419      	add	r1, r3
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	4613      	mov	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	009a      	lsls	r2, r3, #2
 80063e2:	441a      	add	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	005b      	lsls	r3, r3, #1
 80063ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80063ee:	4b37      	ldr	r3, [pc, #220]	; (80064cc <UART_SetConfig+0x2e4>)
 80063f0:	fba3 0302 	umull	r0, r3, r3, r2
 80063f4:	095b      	lsrs	r3, r3, #5
 80063f6:	2064      	movs	r0, #100	; 0x64
 80063f8:	fb00 f303 	mul.w	r3, r0, r3
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	3332      	adds	r3, #50	; 0x32
 8006402:	4a32      	ldr	r2, [pc, #200]	; (80064cc <UART_SetConfig+0x2e4>)
 8006404:	fba2 2303 	umull	r2, r3, r2, r3
 8006408:	095b      	lsrs	r3, r3, #5
 800640a:	f003 0207 	and.w	r2, r3, #7
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	440a      	add	r2, r1
 8006414:	609a      	str	r2, [r3, #8]
}
 8006416:	e0a9      	b.n	800656c <UART_SetConfig+0x384>
    if((huart->Instance == USART1))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a2a      	ldr	r2, [pc, #168]	; (80064c8 <UART_SetConfig+0x2e0>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d156      	bne.n	80064d0 <UART_SetConfig+0x2e8>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006422:	f7fe fa05 	bl	8004830 <HAL_RCC_GetPCLK2Freq>
 8006426:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	4613      	mov	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	009a      	lsls	r2, r3, #2
 8006432:	441a      	add	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	fbb2 f3f3 	udiv	r3, r2, r3
 800643e:	4a23      	ldr	r2, [pc, #140]	; (80064cc <UART_SetConfig+0x2e4>)
 8006440:	fba2 2303 	umull	r2, r3, r2, r3
 8006444:	095b      	lsrs	r3, r3, #5
 8006446:	0119      	lsls	r1, r3, #4
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	4613      	mov	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	009a      	lsls	r2, r3, #2
 8006452:	441a      	add	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	fbb2 f2f3 	udiv	r2, r2, r3
 800645e:	4b1b      	ldr	r3, [pc, #108]	; (80064cc <UART_SetConfig+0x2e4>)
 8006460:	fba3 0302 	umull	r0, r3, r3, r2
 8006464:	095b      	lsrs	r3, r3, #5
 8006466:	2064      	movs	r0, #100	; 0x64
 8006468:	fb00 f303 	mul.w	r3, r0, r3
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	011b      	lsls	r3, r3, #4
 8006470:	3332      	adds	r3, #50	; 0x32
 8006472:	4a16      	ldr	r2, [pc, #88]	; (80064cc <UART_SetConfig+0x2e4>)
 8006474:	fba2 2303 	umull	r2, r3, r2, r3
 8006478:	095b      	lsrs	r3, r3, #5
 800647a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800647e:	4419      	add	r1, r3
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	4613      	mov	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	009a      	lsls	r2, r3, #2
 800648a:	441a      	add	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	fbb2 f2f3 	udiv	r2, r2, r3
 8006496:	4b0d      	ldr	r3, [pc, #52]	; (80064cc <UART_SetConfig+0x2e4>)
 8006498:	fba3 0302 	umull	r0, r3, r3, r2
 800649c:	095b      	lsrs	r3, r3, #5
 800649e:	2064      	movs	r0, #100	; 0x64
 80064a0:	fb00 f303 	mul.w	r3, r0, r3
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	011b      	lsls	r3, r3, #4
 80064a8:	3332      	adds	r3, #50	; 0x32
 80064aa:	4a08      	ldr	r2, [pc, #32]	; (80064cc <UART_SetConfig+0x2e4>)
 80064ac:	fba2 2303 	umull	r2, r3, r2, r3
 80064b0:	095b      	lsrs	r3, r3, #5
 80064b2:	f003 020f 	and.w	r2, r3, #15
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	440a      	add	r2, r1
 80064bc:	609a      	str	r2, [r3, #8]
}
 80064be:	e055      	b.n	800656c <UART_SetConfig+0x384>
 80064c0:	003d0900 	.word	0x003d0900
 80064c4:	080099fc 	.word	0x080099fc
 80064c8:	40013800 	.word	0x40013800
 80064cc:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80064d0:	f7fe f99a 	bl	8004808 <HAL_RCC_GetPCLK1Freq>
 80064d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	4613      	mov	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	009a      	lsls	r2, r3, #2
 80064e0:	441a      	add	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ec:	4a21      	ldr	r2, [pc, #132]	; (8006574 <UART_SetConfig+0x38c>)
 80064ee:	fba2 2303 	umull	r2, r3, r2, r3
 80064f2:	095b      	lsrs	r3, r3, #5
 80064f4:	0119      	lsls	r1, r3, #4
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	4613      	mov	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	009a      	lsls	r2, r3, #2
 8006500:	441a      	add	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	fbb2 f2f3 	udiv	r2, r2, r3
 800650c:	4b19      	ldr	r3, [pc, #100]	; (8006574 <UART_SetConfig+0x38c>)
 800650e:	fba3 0302 	umull	r0, r3, r3, r2
 8006512:	095b      	lsrs	r3, r3, #5
 8006514:	2064      	movs	r0, #100	; 0x64
 8006516:	fb00 f303 	mul.w	r3, r0, r3
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	011b      	lsls	r3, r3, #4
 800651e:	3332      	adds	r3, #50	; 0x32
 8006520:	4a14      	ldr	r2, [pc, #80]	; (8006574 <UART_SetConfig+0x38c>)
 8006522:	fba2 2303 	umull	r2, r3, r2, r3
 8006526:	095b      	lsrs	r3, r3, #5
 8006528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800652c:	4419      	add	r1, r3
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	4613      	mov	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	009a      	lsls	r2, r3, #2
 8006538:	441a      	add	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	fbb2 f2f3 	udiv	r2, r2, r3
 8006544:	4b0b      	ldr	r3, [pc, #44]	; (8006574 <UART_SetConfig+0x38c>)
 8006546:	fba3 0302 	umull	r0, r3, r3, r2
 800654a:	095b      	lsrs	r3, r3, #5
 800654c:	2064      	movs	r0, #100	; 0x64
 800654e:	fb00 f303 	mul.w	r3, r0, r3
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	3332      	adds	r3, #50	; 0x32
 8006558:	4a06      	ldr	r2, [pc, #24]	; (8006574 <UART_SetConfig+0x38c>)
 800655a:	fba2 2303 	umull	r2, r3, r2, r3
 800655e:	095b      	lsrs	r3, r3, #5
 8006560:	f003 020f 	and.w	r2, r3, #15
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	440a      	add	r2, r1
 800656a:	609a      	str	r2, [r3, #8]
}
 800656c:	bf00      	nop
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	51eb851f 	.word	0x51eb851f

08006578 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800657e:	f3ef 8305 	mrs	r3, IPSR
 8006582:	60bb      	str	r3, [r7, #8]
  return(result);
 8006584:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10f      	bne.n	80065aa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800658a:	f3ef 8310 	mrs	r3, PRIMASK
 800658e:	607b      	str	r3, [r7, #4]
  return(result);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d109      	bne.n	80065aa <osKernelInitialize+0x32>
 8006596:	4b10      	ldr	r3, [pc, #64]	; (80065d8 <osKernelInitialize+0x60>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b02      	cmp	r3, #2
 800659c:	d109      	bne.n	80065b2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800659e:	f3ef 8311 	mrs	r3, BASEPRI
 80065a2:	603b      	str	r3, [r7, #0]
  return(result);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80065aa:	f06f 0305 	mvn.w	r3, #5
 80065ae:	60fb      	str	r3, [r7, #12]
 80065b0:	e00c      	b.n	80065cc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80065b2:	4b09      	ldr	r3, [pc, #36]	; (80065d8 <osKernelInitialize+0x60>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d105      	bne.n	80065c6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80065ba:	4b07      	ldr	r3, [pc, #28]	; (80065d8 <osKernelInitialize+0x60>)
 80065bc:	2201      	movs	r2, #1
 80065be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	e002      	b.n	80065cc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80065c6:	f04f 33ff 	mov.w	r3, #4294967295
 80065ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80065cc:	68fb      	ldr	r3, [r7, #12]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bc80      	pop	{r7}
 80065d6:	4770      	bx	lr
 80065d8:	2000004c 	.word	0x2000004c

080065dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065e2:	f3ef 8305 	mrs	r3, IPSR
 80065e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80065e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10f      	bne.n	800660e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065ee:	f3ef 8310 	mrs	r3, PRIMASK
 80065f2:	607b      	str	r3, [r7, #4]
  return(result);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d109      	bne.n	800660e <osKernelStart+0x32>
 80065fa:	4b11      	ldr	r3, [pc, #68]	; (8006640 <osKernelStart+0x64>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d109      	bne.n	8006616 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006602:	f3ef 8311 	mrs	r3, BASEPRI
 8006606:	603b      	str	r3, [r7, #0]
  return(result);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <osKernelStart+0x3a>
    stat = osErrorISR;
 800660e:	f06f 0305 	mvn.w	r3, #5
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	e00e      	b.n	8006634 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006616:	4b0a      	ldr	r3, [pc, #40]	; (8006640 <osKernelStart+0x64>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d107      	bne.n	800662e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800661e:	4b08      	ldr	r3, [pc, #32]	; (8006640 <osKernelStart+0x64>)
 8006620:	2202      	movs	r2, #2
 8006622:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006624:	f001 fb5c 	bl	8007ce0 <vTaskStartScheduler>
      stat = osOK;
 8006628:	2300      	movs	r3, #0
 800662a:	60fb      	str	r3, [r7, #12]
 800662c:	e002      	b.n	8006634 <osKernelStart+0x58>
    } else {
      stat = osError;
 800662e:	f04f 33ff 	mov.w	r3, #4294967295
 8006632:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006634:	68fb      	ldr	r3, [r7, #12]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	2000004c 	.word	0x2000004c

08006644 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006644:	b580      	push	{r7, lr}
 8006646:	b092      	sub	sp, #72	; 0x48
 8006648:	af04      	add	r7, sp, #16
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006650:	2300      	movs	r3, #0
 8006652:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006654:	f3ef 8305 	mrs	r3, IPSR
 8006658:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800665c:	2b00      	cmp	r3, #0
 800665e:	f040 8094 	bne.w	800678a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006662:	f3ef 8310 	mrs	r3, PRIMASK
 8006666:	623b      	str	r3, [r7, #32]
  return(result);
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	2b00      	cmp	r3, #0
 800666c:	f040 808d 	bne.w	800678a <osThreadNew+0x146>
 8006670:	4b48      	ldr	r3, [pc, #288]	; (8006794 <osThreadNew+0x150>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b02      	cmp	r3, #2
 8006676:	d106      	bne.n	8006686 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006678:	f3ef 8311 	mrs	r3, BASEPRI
 800667c:	61fb      	str	r3, [r7, #28]
  return(result);
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	2b00      	cmp	r3, #0
 8006682:	f040 8082 	bne.w	800678a <osThreadNew+0x146>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d07e      	beq.n	800678a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800668c:	2380      	movs	r3, #128	; 0x80
 800668e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006690:	2318      	movs	r3, #24
 8006692:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006694:	2300      	movs	r3, #0
 8006696:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006698:	f107 031b 	add.w	r3, r7, #27
 800669c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800669e:	f04f 33ff 	mov.w	r3, #4294967295
 80066a2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d045      	beq.n	8006736 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d002      	beq.n	80066b8 <osThreadNew+0x74>
        name = attr->name;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d002      	beq.n	80066c6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80066c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d008      	beq.n	80066de <osThreadNew+0x9a>
 80066cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ce:	2b38      	cmp	r3, #56	; 0x38
 80066d0:	d805      	bhi.n	80066de <osThreadNew+0x9a>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <osThreadNew+0x9e>
        return (NULL);
 80066de:	2300      	movs	r3, #0
 80066e0:	e054      	b.n	800678c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	089b      	lsrs	r3, r3, #2
 80066f0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00e      	beq.n	8006718 <osThreadNew+0xd4>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	2b5b      	cmp	r3, #91	; 0x5b
 8006700:	d90a      	bls.n	8006718 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006706:	2b00      	cmp	r3, #0
 8006708:	d006      	beq.n	8006718 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <osThreadNew+0xd4>
        mem = 1;
 8006712:	2301      	movs	r3, #1
 8006714:	62bb      	str	r3, [r7, #40]	; 0x28
 8006716:	e010      	b.n	800673a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10c      	bne.n	800673a <osThreadNew+0xf6>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d108      	bne.n	800673a <osThreadNew+0xf6>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d104      	bne.n	800673a <osThreadNew+0xf6>
          mem = 0;
 8006730:	2300      	movs	r3, #0
 8006732:	62bb      	str	r3, [r7, #40]	; 0x28
 8006734:	e001      	b.n	800673a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006736:	2300      	movs	r3, #0
 8006738:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	2b01      	cmp	r3, #1
 800673e:	d110      	bne.n	8006762 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006748:	9202      	str	r2, [sp, #8]
 800674a:	9301      	str	r3, [sp, #4]
 800674c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006754:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 ffee 	bl	8007738 <xTaskCreateStatic>
 800675c:	4603      	mov	r3, r0
 800675e:	617b      	str	r3, [r7, #20]
 8006760:	e013      	b.n	800678a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006764:	2b00      	cmp	r3, #0
 8006766:	d110      	bne.n	800678a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676a:	b29a      	uxth	r2, r3
 800676c:	f107 0314 	add.w	r3, r7, #20
 8006770:	9301      	str	r3, [sp, #4]
 8006772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f001 f835 	bl	80077ea <xTaskCreate>
 8006780:	4603      	mov	r3, r0
 8006782:	2b01      	cmp	r3, #1
 8006784:	d001      	beq.n	800678a <osThreadNew+0x146>
          hTask = NULL;
 8006786:	2300      	movs	r3, #0
 8006788:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800678a:	697b      	ldr	r3, [r7, #20]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3738      	adds	r7, #56	; 0x38
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	2000004c 	.word	0x2000004c

08006798 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006798:	b580      	push	{r7, lr}
 800679a:	b086      	sub	sp, #24
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067a0:	f3ef 8305 	mrs	r3, IPSR
 80067a4:	613b      	str	r3, [r7, #16]
  return(result);
 80067a6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10f      	bne.n	80067cc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067ac:	f3ef 8310 	mrs	r3, PRIMASK
 80067b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d109      	bne.n	80067cc <osDelay+0x34>
 80067b8:	4b0d      	ldr	r3, [pc, #52]	; (80067f0 <osDelay+0x58>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d109      	bne.n	80067d4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80067c0:	f3ef 8311 	mrs	r3, BASEPRI
 80067c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <osDelay+0x3c>
    stat = osErrorISR;
 80067cc:	f06f 0305 	mvn.w	r3, #5
 80067d0:	617b      	str	r3, [r7, #20]
 80067d2:	e007      	b.n	80067e4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d002      	beq.n	80067e4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f001 f93e 	bl	8007a60 <vTaskDelay>
    }
  }

  return (stat);
 80067e4:	697b      	ldr	r3, [r7, #20]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3718      	adds	r7, #24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	2000004c 	.word	0x2000004c

080067f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4a06      	ldr	r2, [pc, #24]	; (800681c <vApplicationGetIdleTaskMemory+0x28>)
 8006804:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	4a05      	ldr	r2, [pc, #20]	; (8006820 <vApplicationGetIdleTaskMemory+0x2c>)
 800680a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2280      	movs	r2, #128	; 0x80
 8006810:	601a      	str	r2, [r3, #0]
}
 8006812:	bf00      	nop
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	bc80      	pop	{r7}
 800681a:	4770      	bx	lr
 800681c:	20000050 	.word	0x20000050
 8006820:	200000ac 	.word	0x200000ac

08006824 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4a07      	ldr	r2, [pc, #28]	; (8006850 <vApplicationGetTimerTaskMemory+0x2c>)
 8006834:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	4a06      	ldr	r2, [pc, #24]	; (8006854 <vApplicationGetTimerTaskMemory+0x30>)
 800683a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006842:	601a      	str	r2, [r3, #0]
}
 8006844:	bf00      	nop
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	bc80      	pop	{r7}
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	200002ac 	.word	0x200002ac
 8006854:	20000308 	.word	0x20000308

08006858 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 800685e:	2020      	movs	r0, #32
 8006860:	f002 fd88 	bl	8009374 <pvPortMalloc>
 8006864:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00a      	beq.n	8006882 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	3304      	adds	r3, #4
 8006876:	4618      	mov	r0, r3
 8006878:	f000 f99e 	bl	8006bb8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8006882:	687b      	ldr	r3, [r7, #4]
	}
 8006884:	4618      	mov	r0, r3
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b090      	sub	sp, #64	; 0x40
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
 8006898:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800689e:	2300      	movs	r3, #0
 80068a0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80068a2:	2300      	movs	r3, #0
 80068a4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d109      	bne.n	80068c0 <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80068ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	623b      	str	r3, [r7, #32]
 80068be:	e7fe      	b.n	80068be <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d009      	beq.n	80068de <xEventGroupWaitBits+0x52>
 80068ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	61fb      	str	r3, [r7, #28]
 80068dc:	e7fe      	b.n	80068dc <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d109      	bne.n	80068f8 <xEventGroupWaitBits+0x6c>
 80068e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	61bb      	str	r3, [r7, #24]
 80068f6:	e7fe      	b.n	80068f6 <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068f8:	f001 fee4 	bl	80086c4 <xTaskGetSchedulerState>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d102      	bne.n	8006908 <xEventGroupWaitBits+0x7c>
 8006902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <xEventGroupWaitBits+0x80>
 8006908:	2301      	movs	r3, #1
 800690a:	e000      	b.n	800690e <xEventGroupWaitBits+0x82>
 800690c:	2300      	movs	r3, #0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d109      	bne.n	8006926 <xEventGroupWaitBits+0x9a>
 8006912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	617b      	str	r3, [r7, #20]
 8006924:	e7fe      	b.n	8006924 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 8006926:	f001 fa3f 	bl	8007da8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800692a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	68b9      	ldr	r1, [r7, #8]
 8006934:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006936:	f000 f909 	bl	8006b4c <prvTestWaitCondition>
 800693a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800693c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00e      	beq.n	8006960 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8006942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006944:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8006946:	2300      	movs	r3, #0
 8006948:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d028      	beq.n	80069a2 <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	43db      	mvns	r3, r3
 8006958:	401a      	ands	r2, r3
 800695a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800695c:	601a      	str	r2, [r3, #0]
 800695e:	e020      	b.n	80069a2 <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8006960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006962:	2b00      	cmp	r3, #0
 8006964:	d104      	bne.n	8006970 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8006966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006968:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800696a:	2301      	movs	r3, #1
 800696c:	633b      	str	r3, [r7, #48]	; 0x30
 800696e:	e018      	b.n	80069a2 <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8006976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006978:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800697c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d003      	beq.n	800698c <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8006984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006986:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800698a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800698c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698e:	1d18      	adds	r0, r3, #4
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006994:	4313      	orrs	r3, r2
 8006996:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006998:	4619      	mov	r1, r3
 800699a:	f001 fc13 	bl	80081c4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800699e:	2300      	movs	r3, #0
 80069a0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80069a2:	f001 fa0f 	bl	8007dc4 <xTaskResumeAll>
 80069a6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80069a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d031      	beq.n	8006a12 <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d107      	bne.n	80069c4 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 80069b4:	4b19      	ldr	r3, [pc, #100]	; (8006a1c <xEventGroupWaitBits+0x190>)
 80069b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ba:	601a      	str	r2, [r3, #0]
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80069c4:	f001 ff08 	bl	80087d8 <uxTaskResetEventItemValue>
 80069c8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80069ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d11a      	bne.n	8006a0a <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 80069d4:	f002 fbd8 	bl	8009188 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80069d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	68b9      	ldr	r1, [r7, #8]
 80069e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80069e4:	f000 f8b2 	bl	8006b4c <prvTestWaitCondition>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d009      	beq.n	8006a02 <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d006      	beq.n	8006a02 <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80069f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	43db      	mvns	r3, r3
 80069fc:	401a      	ands	r2, r3
 80069fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a00:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8006a02:	2301      	movs	r3, #1
 8006a04:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8006a06:	f002 fbed 	bl	80091e4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006a10:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8006a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3740      	adds	r7, #64	; 0x40
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	e000ed04 	.word	0xe000ed04

08006a20 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b08e      	sub	sp, #56	; 0x38
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8006a32:	2300      	movs	r3, #0
 8006a34:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d109      	bne.n	8006a50 <xEventGroupSetBits+0x30>
 8006a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	613b      	str	r3, [r7, #16]
 8006a4e:	e7fe      	b.n	8006a4e <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d009      	beq.n	8006a6e <xEventGroupSetBits+0x4e>
 8006a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5e:	f383 8811 	msr	BASEPRI, r3
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	60fb      	str	r3, [r7, #12]
 8006a6c:	e7fe      	b.n	8006a6c <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8006a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a70:	3304      	adds	r3, #4
 8006a72:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a76:	3308      	adds	r3, #8
 8006a78:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8006a7a:	f001 f995 	bl	8007da8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	431a      	orrs	r2, r3
 8006a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8006a90:	e03c      	b.n	8006b0c <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8006a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006aa8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006ab0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d108      	bne.n	8006ace <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00b      	beq.n	8006ae0 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006acc:	e008      	b.n	8006ae0 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8006ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d101      	bne.n	8006ae0 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8006adc:	2301      	movs	r3, #1
 8006ade:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8006ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d010      	beq.n	8006b08 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8006af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006b00:	4619      	mov	r1, r3
 8006b02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006b04:	f001 fc24 	bl	8008350 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8006b0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d1be      	bne.n	8006a92 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	43db      	mvns	r3, r3
 8006b1c:	401a      	ands	r2, r3
 8006b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b20:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8006b22:	f001 f94f 	bl	8007dc4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8006b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b28:	681b      	ldr	r3, [r3, #0]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3738      	adds	r7, #56	; 0x38
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b082      	sub	sp, #8
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7ff ff6e 	bl	8006a20 <xEventGroupSetBits>
}
 8006b44:	bf00      	nop
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d107      	bne.n	8006b72 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	4013      	ands	r3, r2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00a      	beq.n	8006b82 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	617b      	str	r3, [r7, #20]
 8006b70:	e007      	b.n	8006b82 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	4013      	ands	r3, r2
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d101      	bne.n	8006b82 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8006b82:	697b      	ldr	r3, [r7, #20]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	371c      	adds	r7, #28
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bc80      	pop	{r7}
 8006b8c:	4770      	bx	lr
	...

08006b90 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	68f9      	ldr	r1, [r7, #12]
 8006ba2:	4804      	ldr	r0, [pc, #16]	; (8006bb4 <xEventGroupSetBitsFromISR+0x24>)
 8006ba4:	f002 f9e2 	bl	8008f6c <xTimerPendFunctionCallFromISR>
 8006ba8:	6178      	str	r0, [r7, #20]

		return xReturn;
 8006baa:	697b      	ldr	r3, [r7, #20]
	}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3718      	adds	r7, #24
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	08006b33 	.word	0x08006b33

08006bb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f103 0208 	add.w	r2, r3, #8
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8006bd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f103 0208 	add.w	r2, r3, #8
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f103 0208 	add.w	r2, r3, #8
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bc80      	pop	{r7}
 8006bf4:	4770      	bx	lr

08006bf6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b083      	sub	sp, #12
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bc80      	pop	{r7}
 8006c0c:	4770      	bx	lr

08006c0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b085      	sub	sp, #20
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	689a      	ldr	r2, [r3, #8]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	601a      	str	r2, [r3, #0]
}
 8006c4a:	bf00      	nop
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bc80      	pop	{r7}
 8006c52:	4770      	bx	lr

08006c54 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6a:	d103      	bne.n	8006c74 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	60fb      	str	r3, [r7, #12]
 8006c72:	e00c      	b.n	8006c8e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	3308      	adds	r3, #8
 8006c78:	60fb      	str	r3, [r7, #12]
 8006c7a:	e002      	b.n	8006c82 <vListInsert+0x2e>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	60fb      	str	r3, [r7, #12]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d2f6      	bcs.n	8006c7c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	685a      	ldr	r2, [r3, #4]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	1c5a      	adds	r2, r3, #1
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	601a      	str	r2, [r3, #0]
}
 8006cba:	bf00      	nop
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bc80      	pop	{r7}
 8006cc2:	4770      	bx	lr

08006cc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	6892      	ldr	r2, [r2, #8]
 8006cda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	6852      	ldr	r2, [r2, #4]
 8006ce4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d103      	bne.n	8006cf8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	1e5a      	subs	r2, r3, #1
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bc80      	pop	{r7}
 8006d14:	4770      	bx	lr
	...

08006d18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d109      	bne.n	8006d40 <xQueueGenericReset+0x28>
 8006d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	60bb      	str	r3, [r7, #8]
 8006d3e:	e7fe      	b.n	8006d3e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006d40:	f002 fa22 	bl	8009188 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4c:	68f9      	ldr	r1, [r7, #12]
 8006d4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006d50:	fb01 f303 	mul.w	r3, r1, r3
 8006d54:	441a      	add	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d70:	3b01      	subs	r3, #1
 8006d72:	68f9      	ldr	r1, [r7, #12]
 8006d74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006d76:	fb01 f303 	mul.w	r3, r1, r3
 8006d7a:	441a      	add	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	22ff      	movs	r2, #255	; 0xff
 8006d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	22ff      	movs	r2, #255	; 0xff
 8006d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d114      	bne.n	8006dc0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d01a      	beq.n	8006dd4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	3310      	adds	r3, #16
 8006da2:	4618      	mov	r0, r3
 8006da4:	f001 fa72 	bl	800828c <xTaskRemoveFromEventList>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d012      	beq.n	8006dd4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006dae:	4b0d      	ldr	r3, [pc, #52]	; (8006de4 <xQueueGenericReset+0xcc>)
 8006db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	e009      	b.n	8006dd4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	3310      	adds	r3, #16
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7ff fef7 	bl	8006bb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	3324      	adds	r3, #36	; 0x24
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7ff fef2 	bl	8006bb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006dd4:	f002 fa06 	bl	80091e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006dd8:	2301      	movs	r3, #1
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	e000ed04 	.word	0xe000ed04

08006de8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b08e      	sub	sp, #56	; 0x38
 8006dec:	af02      	add	r7, sp, #8
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
 8006df4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d109      	bne.n	8006e10 <xQueueGenericCreateStatic+0x28>
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e0e:	e7fe      	b.n	8006e0e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d109      	bne.n	8006e2a <xQueueGenericCreateStatic+0x42>
 8006e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1a:	f383 8811 	msr	BASEPRI, r3
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	f3bf 8f4f 	dsb	sy
 8006e26:	627b      	str	r3, [r7, #36]	; 0x24
 8006e28:	e7fe      	b.n	8006e28 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d002      	beq.n	8006e36 <xQueueGenericCreateStatic+0x4e>
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d001      	beq.n	8006e3a <xQueueGenericCreateStatic+0x52>
 8006e36:	2301      	movs	r3, #1
 8006e38:	e000      	b.n	8006e3c <xQueueGenericCreateStatic+0x54>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d109      	bne.n	8006e54 <xQueueGenericCreateStatic+0x6c>
 8006e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e44:	f383 8811 	msr	BASEPRI, r3
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	623b      	str	r3, [r7, #32]
 8006e52:	e7fe      	b.n	8006e52 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d102      	bne.n	8006e60 <xQueueGenericCreateStatic+0x78>
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <xQueueGenericCreateStatic+0x7c>
 8006e60:	2301      	movs	r3, #1
 8006e62:	e000      	b.n	8006e66 <xQueueGenericCreateStatic+0x7e>
 8006e64:	2300      	movs	r3, #0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d109      	bne.n	8006e7e <xQueueGenericCreateStatic+0x96>
 8006e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	61fb      	str	r3, [r7, #28]
 8006e7c:	e7fe      	b.n	8006e7c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006e7e:	2350      	movs	r3, #80	; 0x50
 8006e80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	2b50      	cmp	r3, #80	; 0x50
 8006e86:	d009      	beq.n	8006e9c <xQueueGenericCreateStatic+0xb4>
 8006e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	61bb      	str	r3, [r7, #24]
 8006e9a:	e7fe      	b.n	8006e9a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00d      	beq.n	8006ec2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006eae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	68b9      	ldr	r1, [r7, #8]
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f000 f842 	bl	8006f46 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3730      	adds	r7, #48	; 0x30
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b08a      	sub	sp, #40	; 0x28
 8006ed0:	af02      	add	r7, sp, #8
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d109      	bne.n	8006ef4 <xQueueGenericCreate+0x28>
 8006ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	613b      	str	r3, [r7, #16]
 8006ef2:	e7fe      	b.n	8006ef2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d102      	bne.n	8006f00 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006efa:	2300      	movs	r3, #0
 8006efc:	61fb      	str	r3, [r7, #28]
 8006efe:	e004      	b.n	8006f0a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	fb02 f303 	mul.w	r3, r2, r3
 8006f08:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	3350      	adds	r3, #80	; 0x50
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f002 fa30 	bl	8009374 <pvPortMalloc>
 8006f14:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00f      	beq.n	8006f3c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	3350      	adds	r3, #80	; 0x50
 8006f20:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f2a:	79fa      	ldrb	r2, [r7, #7]
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	9300      	str	r3, [sp, #0]
 8006f30:	4613      	mov	r3, r2
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	68b9      	ldr	r1, [r7, #8]
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f000 f805 	bl	8006f46 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006f3c:	69bb      	ldr	r3, [r7, #24]
	}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3720      	adds	r7, #32
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b084      	sub	sp, #16
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	60f8      	str	r0, [r7, #12]
 8006f4e:	60b9      	str	r1, [r7, #8]
 8006f50:	607a      	str	r2, [r7, #4]
 8006f52:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d103      	bne.n	8006f62 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	e002      	b.n	8006f68 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006f74:	2101      	movs	r1, #1
 8006f76:	69b8      	ldr	r0, [r7, #24]
 8006f78:	f7ff fece 	bl	8006d18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	78fa      	ldrb	r2, [r7, #3]
 8006f80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006f84:	bf00      	nop
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b08e      	sub	sp, #56	; 0x38
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	607a      	str	r2, [r7, #4]
 8006f98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d109      	bne.n	8006fbc <xQueueGenericSend+0x30>
 8006fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fac:	f383 8811 	msr	BASEPRI, r3
 8006fb0:	f3bf 8f6f 	isb	sy
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fba:	e7fe      	b.n	8006fba <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d103      	bne.n	8006fca <xQueueGenericSend+0x3e>
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <xQueueGenericSend+0x42>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e000      	b.n	8006fd0 <xQueueGenericSend+0x44>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d109      	bne.n	8006fe8 <xQueueGenericSend+0x5c>
 8006fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd8:	f383 8811 	msr	BASEPRI, r3
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8006fe6:	e7fe      	b.n	8006fe6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d103      	bne.n	8006ff6 <xQueueGenericSend+0x6a>
 8006fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d101      	bne.n	8006ffa <xQueueGenericSend+0x6e>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e000      	b.n	8006ffc <xQueueGenericSend+0x70>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d109      	bne.n	8007014 <xQueueGenericSend+0x88>
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	623b      	str	r3, [r7, #32]
 8007012:	e7fe      	b.n	8007012 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007014:	f001 fb56 	bl	80086c4 <xTaskGetSchedulerState>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d102      	bne.n	8007024 <xQueueGenericSend+0x98>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d101      	bne.n	8007028 <xQueueGenericSend+0x9c>
 8007024:	2301      	movs	r3, #1
 8007026:	e000      	b.n	800702a <xQueueGenericSend+0x9e>
 8007028:	2300      	movs	r3, #0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d109      	bne.n	8007042 <xQueueGenericSend+0xb6>
 800702e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	61fb      	str	r3, [r7, #28]
 8007040:	e7fe      	b.n	8007040 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007042:	f002 f8a1 	bl	8009188 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704e:	429a      	cmp	r2, r3
 8007050:	d302      	bcc.n	8007058 <xQueueGenericSend+0xcc>
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b02      	cmp	r3, #2
 8007056:	d129      	bne.n	80070ac <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007058:	683a      	ldr	r2, [r7, #0]
 800705a:	68b9      	ldr	r1, [r7, #8]
 800705c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800705e:	f000 f9ff 	bl	8007460 <prvCopyDataToQueue>
 8007062:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	2b00      	cmp	r3, #0
 800706a:	d010      	beq.n	800708e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800706c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706e:	3324      	adds	r3, #36	; 0x24
 8007070:	4618      	mov	r0, r3
 8007072:	f001 f90b 	bl	800828c <xTaskRemoveFromEventList>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d013      	beq.n	80070a4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800707c:	4b3f      	ldr	r3, [pc, #252]	; (800717c <xQueueGenericSend+0x1f0>)
 800707e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	e00a      	b.n	80070a4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800708e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007090:	2b00      	cmp	r3, #0
 8007092:	d007      	beq.n	80070a4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007094:	4b39      	ldr	r3, [pc, #228]	; (800717c <xQueueGenericSend+0x1f0>)
 8007096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800709a:	601a      	str	r2, [r3, #0]
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80070a4:	f002 f89e 	bl	80091e4 <vPortExitCritical>
				return pdPASS;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e063      	b.n	8007174 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d103      	bne.n	80070ba <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070b2:	f002 f897 	bl	80091e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80070b6:	2300      	movs	r3, #0
 80070b8:	e05c      	b.n	8007174 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d106      	bne.n	80070ce <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070c0:	f107 0314 	add.w	r3, r7, #20
 80070c4:	4618      	mov	r0, r3
 80070c6:	f001 f9a3 	bl	8008410 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070ca:	2301      	movs	r3, #1
 80070cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070ce:	f002 f889 	bl	80091e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070d2:	f000 fe69 	bl	8007da8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070d6:	f002 f857 	bl	8009188 <vPortEnterCritical>
 80070da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070e0:	b25b      	sxtb	r3, r3
 80070e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e6:	d103      	bne.n	80070f0 <xQueueGenericSend+0x164>
 80070e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070f6:	b25b      	sxtb	r3, r3
 80070f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fc:	d103      	bne.n	8007106 <xQueueGenericSend+0x17a>
 80070fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007106:	f002 f86d 	bl	80091e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800710a:	1d3a      	adds	r2, r7, #4
 800710c:	f107 0314 	add.w	r3, r7, #20
 8007110:	4611      	mov	r1, r2
 8007112:	4618      	mov	r0, r3
 8007114:	f001 f992 	bl	800843c <xTaskCheckForTimeOut>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d124      	bne.n	8007168 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800711e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007120:	f000 fa96 	bl	8007650 <prvIsQueueFull>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d018      	beq.n	800715c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800712a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712c:	3310      	adds	r3, #16
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	4611      	mov	r1, r2
 8007132:	4618      	mov	r0, r3
 8007134:	f001 f822 	bl	800817c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007138:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800713a:	f000 fa21 	bl	8007580 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800713e:	f000 fe41 	bl	8007dc4 <xTaskResumeAll>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	f47f af7c 	bne.w	8007042 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800714a:	4b0c      	ldr	r3, [pc, #48]	; (800717c <xQueueGenericSend+0x1f0>)
 800714c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007150:	601a      	str	r2, [r3, #0]
 8007152:	f3bf 8f4f 	dsb	sy
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	e772      	b.n	8007042 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800715c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800715e:	f000 fa0f 	bl	8007580 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007162:	f000 fe2f 	bl	8007dc4 <xTaskResumeAll>
 8007166:	e76c      	b.n	8007042 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800716a:	f000 fa09 	bl	8007580 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800716e:	f000 fe29 	bl	8007dc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007172:	2300      	movs	r3, #0
		}
	}
}
 8007174:	4618      	mov	r0, r3
 8007176:	3738      	adds	r7, #56	; 0x38
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	e000ed04 	.word	0xe000ed04

08007180 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b08e      	sub	sp, #56	; 0x38
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
 800718c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007194:	2b00      	cmp	r3, #0
 8007196:	d109      	bne.n	80071ac <xQueueGenericSendFromISR+0x2c>
 8007198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719c:	f383 8811 	msr	BASEPRI, r3
 80071a0:	f3bf 8f6f 	isb	sy
 80071a4:	f3bf 8f4f 	dsb	sy
 80071a8:	627b      	str	r3, [r7, #36]	; 0x24
 80071aa:	e7fe      	b.n	80071aa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d103      	bne.n	80071ba <xQueueGenericSendFromISR+0x3a>
 80071b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <xQueueGenericSendFromISR+0x3e>
 80071ba:	2301      	movs	r3, #1
 80071bc:	e000      	b.n	80071c0 <xQueueGenericSendFromISR+0x40>
 80071be:	2300      	movs	r3, #0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d109      	bne.n	80071d8 <xQueueGenericSendFromISR+0x58>
 80071c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c8:	f383 8811 	msr	BASEPRI, r3
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	623b      	str	r3, [r7, #32]
 80071d6:	e7fe      	b.n	80071d6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d103      	bne.n	80071e6 <xQueueGenericSendFromISR+0x66>
 80071de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d101      	bne.n	80071ea <xQueueGenericSendFromISR+0x6a>
 80071e6:	2301      	movs	r3, #1
 80071e8:	e000      	b.n	80071ec <xQueueGenericSendFromISR+0x6c>
 80071ea:	2300      	movs	r3, #0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d109      	bne.n	8007204 <xQueueGenericSendFromISR+0x84>
 80071f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	61fb      	str	r3, [r7, #28]
 8007202:	e7fe      	b.n	8007202 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007204:	f002 f87a 	bl	80092fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007208:	f3ef 8211 	mrs	r2, BASEPRI
 800720c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007210:	f383 8811 	msr	BASEPRI, r3
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	61ba      	str	r2, [r7, #24]
 800721e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007220:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007222:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722c:	429a      	cmp	r2, r3
 800722e:	d302      	bcc.n	8007236 <xQueueGenericSendFromISR+0xb6>
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	2b02      	cmp	r3, #2
 8007234:	d12c      	bne.n	8007290 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007238:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800723c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	68b9      	ldr	r1, [r7, #8]
 8007244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007246:	f000 f90b 	bl	8007460 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800724a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800724e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007252:	d112      	bne.n	800727a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007258:	2b00      	cmp	r3, #0
 800725a:	d016      	beq.n	800728a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800725c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725e:	3324      	adds	r3, #36	; 0x24
 8007260:	4618      	mov	r0, r3
 8007262:	f001 f813 	bl	800828c <xTaskRemoveFromEventList>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00e      	beq.n	800728a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00b      	beq.n	800728a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	601a      	str	r2, [r3, #0]
 8007278:	e007      	b.n	800728a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800727a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800727e:	3301      	adds	r3, #1
 8007280:	b2db      	uxtb	r3, r3
 8007282:	b25a      	sxtb	r2, r3
 8007284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800728a:	2301      	movs	r3, #1
 800728c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800728e:	e001      	b.n	8007294 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007290:	2300      	movs	r3, #0
 8007292:	637b      	str	r3, [r7, #52]	; 0x34
 8007294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007296:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800729e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3738      	adds	r7, #56	; 0x38
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b08c      	sub	sp, #48	; 0x30
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80072b4:	2300      	movs	r3, #0
 80072b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80072bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d109      	bne.n	80072d6 <xQueueReceive+0x2e>
	__asm volatile
 80072c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c6:	f383 8811 	msr	BASEPRI, r3
 80072ca:	f3bf 8f6f 	isb	sy
 80072ce:	f3bf 8f4f 	dsb	sy
 80072d2:	623b      	str	r3, [r7, #32]
 80072d4:	e7fe      	b.n	80072d4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d103      	bne.n	80072e4 <xQueueReceive+0x3c>
 80072dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d101      	bne.n	80072e8 <xQueueReceive+0x40>
 80072e4:	2301      	movs	r3, #1
 80072e6:	e000      	b.n	80072ea <xQueueReceive+0x42>
 80072e8:	2300      	movs	r3, #0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d109      	bne.n	8007302 <xQueueReceive+0x5a>
 80072ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f2:	f383 8811 	msr	BASEPRI, r3
 80072f6:	f3bf 8f6f 	isb	sy
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	61fb      	str	r3, [r7, #28]
 8007300:	e7fe      	b.n	8007300 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007302:	f001 f9df 	bl	80086c4 <xTaskGetSchedulerState>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d102      	bne.n	8007312 <xQueueReceive+0x6a>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <xQueueReceive+0x6e>
 8007312:	2301      	movs	r3, #1
 8007314:	e000      	b.n	8007318 <xQueueReceive+0x70>
 8007316:	2300      	movs	r3, #0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d109      	bne.n	8007330 <xQueueReceive+0x88>
 800731c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	61bb      	str	r3, [r7, #24]
 800732e:	e7fe      	b.n	800732e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007330:	f001 ff2a 	bl	8009188 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007338:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	2b00      	cmp	r3, #0
 800733e:	d01f      	beq.n	8007380 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007340:	68b9      	ldr	r1, [r7, #8]
 8007342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007344:	f000 f8f6 	bl	8007534 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734a:	1e5a      	subs	r2, r3, #1
 800734c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00f      	beq.n	8007378 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735a:	3310      	adds	r3, #16
 800735c:	4618      	mov	r0, r3
 800735e:	f000 ff95 	bl	800828c <xTaskRemoveFromEventList>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d007      	beq.n	8007378 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007368:	4b3c      	ldr	r3, [pc, #240]	; (800745c <xQueueReceive+0x1b4>)
 800736a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800736e:	601a      	str	r2, [r3, #0]
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007378:	f001 ff34 	bl	80091e4 <vPortExitCritical>
				return pdPASS;
 800737c:	2301      	movs	r3, #1
 800737e:	e069      	b.n	8007454 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d103      	bne.n	800738e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007386:	f001 ff2d 	bl	80091e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800738a:	2300      	movs	r3, #0
 800738c:	e062      	b.n	8007454 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800738e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007390:	2b00      	cmp	r3, #0
 8007392:	d106      	bne.n	80073a2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007394:	f107 0310 	add.w	r3, r7, #16
 8007398:	4618      	mov	r0, r3
 800739a:	f001 f839 	bl	8008410 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800739e:	2301      	movs	r3, #1
 80073a0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80073a2:	f001 ff1f 	bl	80091e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80073a6:	f000 fcff 	bl	8007da8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80073aa:	f001 feed 	bl	8009188 <vPortEnterCritical>
 80073ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073b4:	b25b      	sxtb	r3, r3
 80073b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ba:	d103      	bne.n	80073c4 <xQueueReceive+0x11c>
 80073bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073ca:	b25b      	sxtb	r3, r3
 80073cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d0:	d103      	bne.n	80073da <xQueueReceive+0x132>
 80073d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073da:	f001 ff03 	bl	80091e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073de:	1d3a      	adds	r2, r7, #4
 80073e0:	f107 0310 	add.w	r3, r7, #16
 80073e4:	4611      	mov	r1, r2
 80073e6:	4618      	mov	r0, r3
 80073e8:	f001 f828 	bl	800843c <xTaskCheckForTimeOut>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d123      	bne.n	800743a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073f4:	f000 f916 	bl	8007624 <prvIsQueueEmpty>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d017      	beq.n	800742e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80073fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007400:	3324      	adds	r3, #36	; 0x24
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	4611      	mov	r1, r2
 8007406:	4618      	mov	r0, r3
 8007408:	f000 feb8 	bl	800817c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800740c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800740e:	f000 f8b7 	bl	8007580 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007412:	f000 fcd7 	bl	8007dc4 <xTaskResumeAll>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d189      	bne.n	8007330 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800741c:	4b0f      	ldr	r3, [pc, #60]	; (800745c <xQueueReceive+0x1b4>)
 800741e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	e780      	b.n	8007330 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800742e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007430:	f000 f8a6 	bl	8007580 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007434:	f000 fcc6 	bl	8007dc4 <xTaskResumeAll>
 8007438:	e77a      	b.n	8007330 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800743a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800743c:	f000 f8a0 	bl	8007580 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007440:	f000 fcc0 	bl	8007dc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007446:	f000 f8ed 	bl	8007624 <prvIsQueueEmpty>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	f43f af6f 	beq.w	8007330 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007452:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007454:	4618      	mov	r0, r3
 8007456:	3730      	adds	r7, #48	; 0x30
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	e000ed04 	.word	0xe000ed04

08007460 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800746c:	2300      	movs	r3, #0
 800746e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007474:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10d      	bne.n	800749a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d14d      	bne.n	8007522 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	4618      	mov	r0, r3
 800748c:	f001 f938 	bl	8008700 <xTaskPriorityDisinherit>
 8007490:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	605a      	str	r2, [r3, #4]
 8007498:	e043      	b.n	8007522 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d119      	bne.n	80074d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6898      	ldr	r0, [r3, #8]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a8:	461a      	mov	r2, r3
 80074aa:	68b9      	ldr	r1, [r7, #8]
 80074ac:	f002 f95e 	bl	800976c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	689a      	ldr	r2, [r3, #8]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b8:	441a      	add	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	689a      	ldr	r2, [r3, #8]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d32b      	bcc.n	8007522 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	609a      	str	r2, [r3, #8]
 80074d2:	e026      	b.n	8007522 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	68d8      	ldr	r0, [r3, #12]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074dc:	461a      	mov	r2, r3
 80074de:	68b9      	ldr	r1, [r7, #8]
 80074e0:	f002 f944 	bl	800976c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	68da      	ldr	r2, [r3, #12]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ec:	425b      	negs	r3, r3
 80074ee:	441a      	add	r2, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	68da      	ldr	r2, [r3, #12]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d207      	bcs.n	8007510 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007508:	425b      	negs	r3, r3
 800750a:	441a      	add	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b02      	cmp	r3, #2
 8007514:	d105      	bne.n	8007522 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d002      	beq.n	8007522 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	3b01      	subs	r3, #1
 8007520:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	1c5a      	adds	r2, r3, #1
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800752a:	697b      	ldr	r3, [r7, #20]
}
 800752c:	4618      	mov	r0, r3
 800752e:	3718      	adds	r7, #24
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	2b00      	cmp	r3, #0
 8007544:	d018      	beq.n	8007578 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68da      	ldr	r2, [r3, #12]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754e:	441a      	add	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	68da      	ldr	r2, [r3, #12]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	429a      	cmp	r2, r3
 800755e:	d303      	bcc.n	8007568 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68d9      	ldr	r1, [r3, #12]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007570:	461a      	mov	r2, r3
 8007572:	6838      	ldr	r0, [r7, #0]
 8007574:	f002 f8fa 	bl	800976c <memcpy>
	}
}
 8007578:	bf00      	nop
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007588:	f001 fdfe 	bl	8009188 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007592:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007594:	e011      	b.n	80075ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759a:	2b00      	cmp	r3, #0
 800759c:	d012      	beq.n	80075c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	3324      	adds	r3, #36	; 0x24
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 fe72 	bl	800828c <xTaskRemoveFromEventList>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80075ae:	f000 ffa5 	bl	80084fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
 80075b4:	3b01      	subs	r3, #1
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	dce9      	bgt.n	8007596 <prvUnlockQueue+0x16>
 80075c2:	e000      	b.n	80075c6 <prvUnlockQueue+0x46>
					break;
 80075c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	22ff      	movs	r2, #255	; 0xff
 80075ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80075ce:	f001 fe09 	bl	80091e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80075d2:	f001 fdd9 	bl	8009188 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80075de:	e011      	b.n	8007604 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d012      	beq.n	800760e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	3310      	adds	r3, #16
 80075ec:	4618      	mov	r0, r3
 80075ee:	f000 fe4d 	bl	800828c <xTaskRemoveFromEventList>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d001      	beq.n	80075fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80075f8:	f000 ff80 	bl	80084fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80075fc:	7bbb      	ldrb	r3, [r7, #14]
 80075fe:	3b01      	subs	r3, #1
 8007600:	b2db      	uxtb	r3, r3
 8007602:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007604:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007608:	2b00      	cmp	r3, #0
 800760a:	dce9      	bgt.n	80075e0 <prvUnlockQueue+0x60>
 800760c:	e000      	b.n	8007610 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800760e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	22ff      	movs	r2, #255	; 0xff
 8007614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007618:	f001 fde4 	bl	80091e4 <vPortExitCritical>
}
 800761c:	bf00      	nop
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800762c:	f001 fdac 	bl	8009188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007634:	2b00      	cmp	r3, #0
 8007636:	d102      	bne.n	800763e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007638:	2301      	movs	r3, #1
 800763a:	60fb      	str	r3, [r7, #12]
 800763c:	e001      	b.n	8007642 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800763e:	2300      	movs	r3, #0
 8007640:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007642:	f001 fdcf 	bl	80091e4 <vPortExitCritical>

	return xReturn;
 8007646:	68fb      	ldr	r3, [r7, #12]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007658:	f001 fd96 	bl	8009188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007664:	429a      	cmp	r2, r3
 8007666:	d102      	bne.n	800766e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007668:	2301      	movs	r3, #1
 800766a:	60fb      	str	r3, [r7, #12]
 800766c:	e001      	b.n	8007672 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800766e:	2300      	movs	r3, #0
 8007670:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007672:	f001 fdb7 	bl	80091e4 <vPortExitCritical>

	return xReturn;
 8007676:	68fb      	ldr	r3, [r7, #12]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800768a:	2300      	movs	r3, #0
 800768c:	60fb      	str	r3, [r7, #12]
 800768e:	e014      	b.n	80076ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007690:	4a0e      	ldr	r2, [pc, #56]	; (80076cc <vQueueAddToRegistry+0x4c>)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10b      	bne.n	80076b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800769c:	490b      	ldr	r1, [pc, #44]	; (80076cc <vQueueAddToRegistry+0x4c>)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	683a      	ldr	r2, [r7, #0]
 80076a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80076a6:	4a09      	ldr	r2, [pc, #36]	; (80076cc <vQueueAddToRegistry+0x4c>)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	00db      	lsls	r3, r3, #3
 80076ac:	4413      	add	r3, r2
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80076b2:	e005      	b.n	80076c0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	3301      	adds	r3, #1
 80076b8:	60fb      	str	r3, [r7, #12]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2b07      	cmp	r3, #7
 80076be:	d9e7      	bls.n	8007690 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80076c0:	bf00      	nop
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bc80      	pop	{r7}
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	20003764 	.word	0x20003764

080076d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80076e0:	f001 fd52 	bl	8009188 <vPortEnterCritical>
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076ea:	b25b      	sxtb	r3, r3
 80076ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f0:	d103      	bne.n	80076fa <vQueueWaitForMessageRestricted+0x2a>
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007700:	b25b      	sxtb	r3, r3
 8007702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007706:	d103      	bne.n	8007710 <vQueueWaitForMessageRestricted+0x40>
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007710:	f001 fd68 	bl	80091e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007718:	2b00      	cmp	r3, #0
 800771a:	d106      	bne.n	800772a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	3324      	adds	r3, #36	; 0x24
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	68b9      	ldr	r1, [r7, #8]
 8007724:	4618      	mov	r0, r3
 8007726:	f000 fd87 	bl	8008238 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800772a:	6978      	ldr	r0, [r7, #20]
 800772c:	f7ff ff28 	bl	8007580 <prvUnlockQueue>
	}
 8007730:	bf00      	nop
 8007732:	3718      	adds	r7, #24
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007738:	b580      	push	{r7, lr}
 800773a:	b08e      	sub	sp, #56	; 0x38
 800773c:	af04      	add	r7, sp, #16
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
 8007744:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007748:	2b00      	cmp	r3, #0
 800774a:	d109      	bne.n	8007760 <xTaskCreateStatic+0x28>
 800774c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007750:	f383 8811 	msr	BASEPRI, r3
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	623b      	str	r3, [r7, #32]
 800775e:	e7fe      	b.n	800775e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007762:	2b00      	cmp	r3, #0
 8007764:	d109      	bne.n	800777a <xTaskCreateStatic+0x42>
 8007766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	61fb      	str	r3, [r7, #28]
 8007778:	e7fe      	b.n	8007778 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800777a:	235c      	movs	r3, #92	; 0x5c
 800777c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	2b5c      	cmp	r3, #92	; 0x5c
 8007782:	d009      	beq.n	8007798 <xTaskCreateStatic+0x60>
 8007784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007788:	f383 8811 	msr	BASEPRI, r3
 800778c:	f3bf 8f6f 	isb	sy
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	61bb      	str	r3, [r7, #24]
 8007796:	e7fe      	b.n	8007796 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779a:	2b00      	cmp	r3, #0
 800779c:	d01e      	beq.n	80077dc <xTaskCreateStatic+0xa4>
 800779e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d01b      	beq.n	80077dc <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80077a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80077a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	2202      	movs	r2, #2
 80077b2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80077b6:	2300      	movs	r3, #0
 80077b8:	9303      	str	r3, [sp, #12]
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	9302      	str	r3, [sp, #8]
 80077be:	f107 0314 	add.w	r3, r7, #20
 80077c2:	9301      	str	r3, [sp, #4]
 80077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	68b9      	ldr	r1, [r7, #8]
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 f850 	bl	8007874 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077d6:	f000 f8d3 	bl	8007980 <prvAddNewTaskToReadyList>
 80077da:	e001      	b.n	80077e0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80077dc:	2300      	movs	r3, #0
 80077de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80077e0:	697b      	ldr	r3, [r7, #20]
	}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3728      	adds	r7, #40	; 0x28
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b08c      	sub	sp, #48	; 0x30
 80077ee:	af04      	add	r7, sp, #16
 80077f0:	60f8      	str	r0, [r7, #12]
 80077f2:	60b9      	str	r1, [r7, #8]
 80077f4:	603b      	str	r3, [r7, #0]
 80077f6:	4613      	mov	r3, r2
 80077f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077fa:	88fb      	ldrh	r3, [r7, #6]
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4618      	mov	r0, r3
 8007800:	f001 fdb8 	bl	8009374 <pvPortMalloc>
 8007804:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00e      	beq.n	800782a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800780c:	205c      	movs	r0, #92	; 0x5c
 800780e:	f001 fdb1 	bl	8009374 <pvPortMalloc>
 8007812:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d003      	beq.n	8007822 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	631a      	str	r2, [r3, #48]	; 0x30
 8007820:	e005      	b.n	800782e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007822:	6978      	ldr	r0, [r7, #20]
 8007824:	f001 fe6c 	bl	8009500 <vPortFree>
 8007828:	e001      	b.n	800782e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800782a:	2300      	movs	r3, #0
 800782c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d017      	beq.n	8007864 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800783c:	88fa      	ldrh	r2, [r7, #6]
 800783e:	2300      	movs	r3, #0
 8007840:	9303      	str	r3, [sp, #12]
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	9302      	str	r3, [sp, #8]
 8007846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007848:	9301      	str	r3, [sp, #4]
 800784a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	68b9      	ldr	r1, [r7, #8]
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f000 f80e 	bl	8007874 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007858:	69f8      	ldr	r0, [r7, #28]
 800785a:	f000 f891 	bl	8007980 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800785e:	2301      	movs	r3, #1
 8007860:	61bb      	str	r3, [r7, #24]
 8007862:	e002      	b.n	800786a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007864:	f04f 33ff 	mov.w	r3, #4294967295
 8007868:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800786a:	69bb      	ldr	r3, [r7, #24]
	}
 800786c:	4618      	mov	r0, r3
 800786e:	3720      	adds	r7, #32
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b088      	sub	sp, #32
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
 8007880:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	461a      	mov	r2, r3
 800788c:	21a5      	movs	r1, #165	; 0xa5
 800788e:	f001 ff78 	bl	8009782 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800789c:	3b01      	subs	r3, #1
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4413      	add	r3, r2
 80078a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	f023 0307 	bic.w	r3, r3, #7
 80078aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	f003 0307 	and.w	r3, r3, #7
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d009      	beq.n	80078ca <prvInitialiseNewTask+0x56>
 80078b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ba:	f383 8811 	msr	BASEPRI, r3
 80078be:	f3bf 8f6f 	isb	sy
 80078c2:	f3bf 8f4f 	dsb	sy
 80078c6:	617b      	str	r3, [r7, #20]
 80078c8:	e7fe      	b.n	80078c8 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078ca:	2300      	movs	r3, #0
 80078cc:	61fb      	str	r3, [r7, #28]
 80078ce:	e012      	b.n	80078f6 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80078d0:	68ba      	ldr	r2, [r7, #8]
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	4413      	add	r3, r2
 80078d6:	7819      	ldrb	r1, [r3, #0]
 80078d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	4413      	add	r3, r2
 80078de:	3334      	adds	r3, #52	; 0x34
 80078e0:	460a      	mov	r2, r1
 80078e2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	4413      	add	r3, r2
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d006      	beq.n	80078fe <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	3301      	adds	r3, #1
 80078f4:	61fb      	str	r3, [r7, #28]
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	2b0f      	cmp	r3, #15
 80078fa:	d9e9      	bls.n	80078d0 <prvInitialiseNewTask+0x5c>
 80078fc:	e000      	b.n	8007900 <prvInitialiseNewTask+0x8c>
		{
			break;
 80078fe:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007902:	2200      	movs	r2, #0
 8007904:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790a:	2b37      	cmp	r3, #55	; 0x37
 800790c:	d901      	bls.n	8007912 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800790e:	2337      	movs	r3, #55	; 0x37
 8007910:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007914:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007916:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800791c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800791e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007920:	2200      	movs	r2, #0
 8007922:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007926:	3304      	adds	r3, #4
 8007928:	4618      	mov	r0, r3
 800792a:	f7ff f964 	bl	8006bf6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	3318      	adds	r3, #24
 8007932:	4618      	mov	r0, r3
 8007934:	f7ff f95f 	bl	8006bf6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800793c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800793e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007940:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007946:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800794c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800794e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007950:	2200      	movs	r2, #0
 8007952:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007956:	2200      	movs	r2, #0
 8007958:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800795c:	683a      	ldr	r2, [r7, #0]
 800795e:	68f9      	ldr	r1, [r7, #12]
 8007960:	69b8      	ldr	r0, [r7, #24]
 8007962:	f001 fb23 	bl	8008fac <pxPortInitialiseStack>
 8007966:	4602      	mov	r2, r0
 8007968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800796c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796e:	2b00      	cmp	r3, #0
 8007970:	d002      	beq.n	8007978 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007976:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007978:	bf00      	nop
 800797a:	3720      	adds	r7, #32
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007988:	f001 fbfe 	bl	8009188 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800798c:	4b2d      	ldr	r3, [pc, #180]	; (8007a44 <prvAddNewTaskToReadyList+0xc4>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3301      	adds	r3, #1
 8007992:	4a2c      	ldr	r2, [pc, #176]	; (8007a44 <prvAddNewTaskToReadyList+0xc4>)
 8007994:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007996:	4b2c      	ldr	r3, [pc, #176]	; (8007a48 <prvAddNewTaskToReadyList+0xc8>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d109      	bne.n	80079b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800799e:	4a2a      	ldr	r2, [pc, #168]	; (8007a48 <prvAddNewTaskToReadyList+0xc8>)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80079a4:	4b27      	ldr	r3, [pc, #156]	; (8007a44 <prvAddNewTaskToReadyList+0xc4>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d110      	bne.n	80079ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80079ac:	f000 fdcc 	bl	8008548 <prvInitialiseTaskLists>
 80079b0:	e00d      	b.n	80079ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80079b2:	4b26      	ldr	r3, [pc, #152]	; (8007a4c <prvAddNewTaskToReadyList+0xcc>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d109      	bne.n	80079ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80079ba:	4b23      	ldr	r3, [pc, #140]	; (8007a48 <prvAddNewTaskToReadyList+0xc8>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d802      	bhi.n	80079ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80079c8:	4a1f      	ldr	r2, [pc, #124]	; (8007a48 <prvAddNewTaskToReadyList+0xc8>)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80079ce:	4b20      	ldr	r3, [pc, #128]	; (8007a50 <prvAddNewTaskToReadyList+0xd0>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3301      	adds	r3, #1
 80079d4:	4a1e      	ldr	r2, [pc, #120]	; (8007a50 <prvAddNewTaskToReadyList+0xd0>)
 80079d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80079d8:	4b1d      	ldr	r3, [pc, #116]	; (8007a50 <prvAddNewTaskToReadyList+0xd0>)
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e4:	4b1b      	ldr	r3, [pc, #108]	; (8007a54 <prvAddNewTaskToReadyList+0xd4>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d903      	bls.n	80079f4 <prvAddNewTaskToReadyList+0x74>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f0:	4a18      	ldr	r2, [pc, #96]	; (8007a54 <prvAddNewTaskToReadyList+0xd4>)
 80079f2:	6013      	str	r3, [r2, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f8:	4613      	mov	r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	4413      	add	r3, r2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4a15      	ldr	r2, [pc, #84]	; (8007a58 <prvAddNewTaskToReadyList+0xd8>)
 8007a02:	441a      	add	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	3304      	adds	r3, #4
 8007a08:	4619      	mov	r1, r3
 8007a0a:	4610      	mov	r0, r2
 8007a0c:	f7ff f8ff 	bl	8006c0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007a10:	f001 fbe8 	bl	80091e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007a14:	4b0d      	ldr	r3, [pc, #52]	; (8007a4c <prvAddNewTaskToReadyList+0xcc>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00e      	beq.n	8007a3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a1c:	4b0a      	ldr	r3, [pc, #40]	; (8007a48 <prvAddNewTaskToReadyList+0xc8>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d207      	bcs.n	8007a3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007a2a:	4b0c      	ldr	r3, [pc, #48]	; (8007a5c <prvAddNewTaskToReadyList+0xdc>)
 8007a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a30:	601a      	str	r2, [r3, #0]
 8007a32:	f3bf 8f4f 	dsb	sy
 8007a36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a3a:	bf00      	nop
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	20000bdc 	.word	0x20000bdc
 8007a48:	20000708 	.word	0x20000708
 8007a4c:	20000be8 	.word	0x20000be8
 8007a50:	20000bf8 	.word	0x20000bf8
 8007a54:	20000be4 	.word	0x20000be4
 8007a58:	2000070c 	.word	0x2000070c
 8007a5c:	e000ed04 	.word	0xe000ed04

08007a60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d016      	beq.n	8007aa0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007a72:	4b13      	ldr	r3, [pc, #76]	; (8007ac0 <vTaskDelay+0x60>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d009      	beq.n	8007a8e <vTaskDelay+0x2e>
 8007a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	60bb      	str	r3, [r7, #8]
 8007a8c:	e7fe      	b.n	8007a8c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007a8e:	f000 f98b 	bl	8007da8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a92:	2100      	movs	r1, #0
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 feb7 	bl	8008808 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a9a:	f000 f993 	bl	8007dc4 <xTaskResumeAll>
 8007a9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d107      	bne.n	8007ab6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007aa6:	4b07      	ldr	r3, [pc, #28]	; (8007ac4 <vTaskDelay+0x64>)
 8007aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aac:	601a      	str	r2, [r3, #0]
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ab6:	bf00      	nop
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	20000c04 	.word	0x20000c04
 8007ac4:	e000ed04 	.word	0xe000ed04

08007ac8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007ad0:	f001 fb5a 	bl	8009188 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d102      	bne.n	8007ae0 <vTaskSuspend+0x18>
 8007ada:	4b2f      	ldr	r3, [pc, #188]	; (8007b98 <vTaskSuspend+0xd0>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	e000      	b.n	8007ae2 <vTaskSuspend+0x1a>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	3304      	adds	r3, #4
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7ff f8eb 	bl	8006cc4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d004      	beq.n	8007b00 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	3318      	adds	r3, #24
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7ff f8e2 	bl	8006cc4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3304      	adds	r3, #4
 8007b04:	4619      	mov	r1, r3
 8007b06:	4825      	ldr	r0, [pc, #148]	; (8007b9c <vTaskSuspend+0xd4>)
 8007b08:	f7ff f881 	bl	8006c0e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d103      	bne.n	8007b20 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007b20:	f001 fb60 	bl	80091e4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007b24:	4b1e      	ldr	r3, [pc, #120]	; (8007ba0 <vTaskSuspend+0xd8>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d005      	beq.n	8007b38 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007b2c:	f001 fb2c 	bl	8009188 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007b30:	f000 fda4 	bl	800867c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007b34:	f001 fb56 	bl	80091e4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007b38:	4b17      	ldr	r3, [pc, #92]	; (8007b98 <vTaskSuspend+0xd0>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d126      	bne.n	8007b90 <vTaskSuspend+0xc8>
		{
			if( xSchedulerRunning != pdFALSE )
 8007b42:	4b17      	ldr	r3, [pc, #92]	; (8007ba0 <vTaskSuspend+0xd8>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d016      	beq.n	8007b78 <vTaskSuspend+0xb0>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007b4a:	4b16      	ldr	r3, [pc, #88]	; (8007ba4 <vTaskSuspend+0xdc>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d009      	beq.n	8007b66 <vTaskSuspend+0x9e>
 8007b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	60bb      	str	r3, [r7, #8]
 8007b64:	e7fe      	b.n	8007b64 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 8007b66:	4b10      	ldr	r3, [pc, #64]	; (8007ba8 <vTaskSuspend+0xe0>)
 8007b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b6c:	601a      	str	r2, [r3, #0]
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b76:	e00b      	b.n	8007b90 <vTaskSuspend+0xc8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8007b78:	4b08      	ldr	r3, [pc, #32]	; (8007b9c <vTaskSuspend+0xd4>)
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	4b0b      	ldr	r3, [pc, #44]	; (8007bac <vTaskSuspend+0xe4>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d103      	bne.n	8007b8c <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
 8007b84:	4b04      	ldr	r3, [pc, #16]	; (8007b98 <vTaskSuspend+0xd0>)
 8007b86:	2200      	movs	r2, #0
 8007b88:	601a      	str	r2, [r3, #0]
	}
 8007b8a:	e001      	b.n	8007b90 <vTaskSuspend+0xc8>
					vTaskSwitchContext();
 8007b8c:	f000 fa8a 	bl	80080a4 <vTaskSwitchContext>
	}
 8007b90:	bf00      	nop
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	20000708 	.word	0x20000708
 8007b9c:	20000bc8 	.word	0x20000bc8
 8007ba0:	20000be8 	.word	0x20000be8
 8007ba4:	20000c04 	.word	0x20000c04
 8007ba8:	e000ed04 	.word	0xe000ed04
 8007bac:	20000bdc 	.word	0x20000bdc

08007bb0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b087      	sub	sp, #28
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d109      	bne.n	8007bda <prvTaskIsTaskSuspended+0x2a>
 8007bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bca:	f383 8811 	msr	BASEPRI, r3
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	60fb      	str	r3, [r7, #12]
 8007bd8:	e7fe      	b.n	8007bd8 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	4a0f      	ldr	r2, [pc, #60]	; (8007c1c <prvTaskIsTaskSuspended+0x6c>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d101      	bne.n	8007be8 <prvTaskIsTaskSuspended+0x38>
 8007be4:	2301      	movs	r3, #1
 8007be6:	e000      	b.n	8007bea <prvTaskIsTaskSuspended+0x3a>
 8007be8:	2300      	movs	r3, #0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00f      	beq.n	8007c0e <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf2:	4a0b      	ldr	r2, [pc, #44]	; (8007c20 <prvTaskIsTaskSuspended+0x70>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d00a      	beq.n	8007c0e <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d101      	bne.n	8007c04 <prvTaskIsTaskSuspended+0x54>
 8007c00:	2301      	movs	r3, #1
 8007c02:	e000      	b.n	8007c06 <prvTaskIsTaskSuspended+0x56>
 8007c04:	2300      	movs	r3, #0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d001      	beq.n	8007c0e <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c0e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007c10:	4618      	mov	r0, r3
 8007c12:	371c      	adds	r7, #28
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bc80      	pop	{r7}
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	20000bc8 	.word	0x20000bc8
 8007c20:	20000b9c 	.word	0x20000b9c

08007c24 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d109      	bne.n	8007c4a <vTaskResume+0x26>
 8007c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	60bb      	str	r3, [r7, #8]
 8007c48:	e7fe      	b.n	8007c48 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d03a      	beq.n	8007cc6 <vTaskResume+0xa2>
 8007c50:	4b1f      	ldr	r3, [pc, #124]	; (8007cd0 <vTaskResume+0xac>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d035      	beq.n	8007cc6 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8007c5a:	f001 fa95 	bl	8009188 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f7ff ffa6 	bl	8007bb0 <prvTaskIsTaskSuspended>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d02b      	beq.n	8007cc2 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	3304      	adds	r3, #4
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7ff f828 	bl	8006cc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c78:	4b16      	ldr	r3, [pc, #88]	; (8007cd4 <vTaskResume+0xb0>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d903      	bls.n	8007c88 <vTaskResume+0x64>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c84:	4a13      	ldr	r2, [pc, #76]	; (8007cd4 <vTaskResume+0xb0>)
 8007c86:	6013      	str	r3, [r2, #0]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4413      	add	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4a10      	ldr	r2, [pc, #64]	; (8007cd8 <vTaskResume+0xb4>)
 8007c96:	441a      	add	r2, r3
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	3304      	adds	r3, #4
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	4610      	mov	r0, r2
 8007ca0:	f7fe ffb5 	bl	8006c0e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca8:	4b09      	ldr	r3, [pc, #36]	; (8007cd0 <vTaskResume+0xac>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d307      	bcc.n	8007cc2 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007cb2:	4b0a      	ldr	r3, [pc, #40]	; (8007cdc <vTaskResume+0xb8>)
 8007cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cb8:	601a      	str	r2, [r3, #0]
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007cc2:	f001 fa8f 	bl	80091e4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007cc6:	bf00      	nop
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	20000708 	.word	0x20000708
 8007cd4:	20000be4 	.word	0x20000be4
 8007cd8:	2000070c 	.word	0x2000070c
 8007cdc:	e000ed04 	.word	0xe000ed04

08007ce0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b08a      	sub	sp, #40	; 0x28
 8007ce4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007cea:	2300      	movs	r3, #0
 8007cec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007cee:	463a      	mov	r2, r7
 8007cf0:	1d39      	adds	r1, r7, #4
 8007cf2:	f107 0308 	add.w	r3, r7, #8
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fe fd7c 	bl	80067f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007cfc:	6839      	ldr	r1, [r7, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	9202      	str	r2, [sp, #8]
 8007d04:	9301      	str	r3, [sp, #4]
 8007d06:	2300      	movs	r3, #0
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	460a      	mov	r2, r1
 8007d0e:	4920      	ldr	r1, [pc, #128]	; (8007d90 <vTaskStartScheduler+0xb0>)
 8007d10:	4820      	ldr	r0, [pc, #128]	; (8007d94 <vTaskStartScheduler+0xb4>)
 8007d12:	f7ff fd11 	bl	8007738 <xTaskCreateStatic>
 8007d16:	4602      	mov	r2, r0
 8007d18:	4b1f      	ldr	r3, [pc, #124]	; (8007d98 <vTaskStartScheduler+0xb8>)
 8007d1a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d1c:	4b1e      	ldr	r3, [pc, #120]	; (8007d98 <vTaskStartScheduler+0xb8>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d002      	beq.n	8007d2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d24:	2301      	movs	r3, #1
 8007d26:	617b      	str	r3, [r7, #20]
 8007d28:	e001      	b.n	8007d2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d102      	bne.n	8007d3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007d34:	f000 fdbc 	bl	80088b0 <xTimerCreateTimerTask>
 8007d38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d115      	bne.n	8007d6c <vTaskStartScheduler+0x8c>
 8007d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007d52:	4b12      	ldr	r3, [pc, #72]	; (8007d9c <vTaskStartScheduler+0xbc>)
 8007d54:	f04f 32ff 	mov.w	r2, #4294967295
 8007d58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007d5a:	4b11      	ldr	r3, [pc, #68]	; (8007da0 <vTaskStartScheduler+0xc0>)
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007d60:	4b10      	ldr	r3, [pc, #64]	; (8007da4 <vTaskStartScheduler+0xc4>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007d66:	f001 f99f 	bl	80090a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007d6a:	e00d      	b.n	8007d88 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d72:	d109      	bne.n	8007d88 <vTaskStartScheduler+0xa8>
 8007d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	60fb      	str	r3, [r7, #12]
 8007d86:	e7fe      	b.n	8007d86 <vTaskStartScheduler+0xa6>
}
 8007d88:	bf00      	nop
 8007d8a:	3718      	adds	r7, #24
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	08009a38 	.word	0x08009a38
 8007d94:	08008515 	.word	0x08008515
 8007d98:	20000c00 	.word	0x20000c00
 8007d9c:	20000bfc 	.word	0x20000bfc
 8007da0:	20000be8 	.word	0x20000be8
 8007da4:	20000be0 	.word	0x20000be0

08007da8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007da8:	b480      	push	{r7}
 8007daa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007dac:	4b04      	ldr	r3, [pc, #16]	; (8007dc0 <vTaskSuspendAll+0x18>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3301      	adds	r3, #1
 8007db2:	4a03      	ldr	r2, [pc, #12]	; (8007dc0 <vTaskSuspendAll+0x18>)
 8007db4:	6013      	str	r3, [r2, #0]
}
 8007db6:	bf00      	nop
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bc80      	pop	{r7}
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	20000c04 	.word	0x20000c04

08007dc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007dd2:	4b41      	ldr	r3, [pc, #260]	; (8007ed8 <xTaskResumeAll+0x114>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d109      	bne.n	8007dee <xTaskResumeAll+0x2a>
 8007dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dde:	f383 8811 	msr	BASEPRI, r3
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	603b      	str	r3, [r7, #0]
 8007dec:	e7fe      	b.n	8007dec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007dee:	f001 f9cb 	bl	8009188 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007df2:	4b39      	ldr	r3, [pc, #228]	; (8007ed8 <xTaskResumeAll+0x114>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	3b01      	subs	r3, #1
 8007df8:	4a37      	ldr	r2, [pc, #220]	; (8007ed8 <xTaskResumeAll+0x114>)
 8007dfa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dfc:	4b36      	ldr	r3, [pc, #216]	; (8007ed8 <xTaskResumeAll+0x114>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d162      	bne.n	8007eca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e04:	4b35      	ldr	r3, [pc, #212]	; (8007edc <xTaskResumeAll+0x118>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d05e      	beq.n	8007eca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e0c:	e02f      	b.n	8007e6e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007e0e:	4b34      	ldr	r3, [pc, #208]	; (8007ee0 <xTaskResumeAll+0x11c>)
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	3318      	adds	r3, #24
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fe ff52 	bl	8006cc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	3304      	adds	r3, #4
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fe ff4d 	bl	8006cc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e2e:	4b2d      	ldr	r3, [pc, #180]	; (8007ee4 <xTaskResumeAll+0x120>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d903      	bls.n	8007e3e <xTaskResumeAll+0x7a>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3a:	4a2a      	ldr	r2, [pc, #168]	; (8007ee4 <xTaskResumeAll+0x120>)
 8007e3c:	6013      	str	r3, [r2, #0]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e42:	4613      	mov	r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4a27      	ldr	r2, [pc, #156]	; (8007ee8 <xTaskResumeAll+0x124>)
 8007e4c:	441a      	add	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	3304      	adds	r3, #4
 8007e52:	4619      	mov	r1, r3
 8007e54:	4610      	mov	r0, r2
 8007e56:	f7fe feda 	bl	8006c0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e5e:	4b23      	ldr	r3, [pc, #140]	; (8007eec <xTaskResumeAll+0x128>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d302      	bcc.n	8007e6e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007e68:	4b21      	ldr	r3, [pc, #132]	; (8007ef0 <xTaskResumeAll+0x12c>)
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e6e:	4b1c      	ldr	r3, [pc, #112]	; (8007ee0 <xTaskResumeAll+0x11c>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1cb      	bne.n	8007e0e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e7c:	f000 fbfe 	bl	800867c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007e80:	4b1c      	ldr	r3, [pc, #112]	; (8007ef4 <xTaskResumeAll+0x130>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d010      	beq.n	8007eae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e8c:	f000 f844 	bl	8007f18 <xTaskIncrementTick>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d002      	beq.n	8007e9c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007e96:	4b16      	ldr	r3, [pc, #88]	; (8007ef0 <xTaskResumeAll+0x12c>)
 8007e98:	2201      	movs	r2, #1
 8007e9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1f1      	bne.n	8007e8c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007ea8:	4b12      	ldr	r3, [pc, #72]	; (8007ef4 <xTaskResumeAll+0x130>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007eae:	4b10      	ldr	r3, [pc, #64]	; (8007ef0 <xTaskResumeAll+0x12c>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d009      	beq.n	8007eca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007eba:	4b0f      	ldr	r3, [pc, #60]	; (8007ef8 <xTaskResumeAll+0x134>)
 8007ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ec0:	601a      	str	r2, [r3, #0]
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007eca:	f001 f98b 	bl	80091e4 <vPortExitCritical>

	return xAlreadyYielded;
 8007ece:	68bb      	ldr	r3, [r7, #8]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	20000c04 	.word	0x20000c04
 8007edc:	20000bdc 	.word	0x20000bdc
 8007ee0:	20000b9c 	.word	0x20000b9c
 8007ee4:	20000be4 	.word	0x20000be4
 8007ee8:	2000070c 	.word	0x2000070c
 8007eec:	20000708 	.word	0x20000708
 8007ef0:	20000bf0 	.word	0x20000bf0
 8007ef4:	20000bec 	.word	0x20000bec
 8007ef8:	e000ed04 	.word	0xe000ed04

08007efc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007f02:	4b04      	ldr	r3, [pc, #16]	; (8007f14 <xTaskGetTickCount+0x18>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007f08:	687b      	ldr	r3, [r7, #4]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	370c      	adds	r7, #12
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bc80      	pop	{r7}
 8007f12:	4770      	bx	lr
 8007f14:	20000be0 	.word	0x20000be0

08007f18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b086      	sub	sp, #24
 8007f1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f22:	4b55      	ldr	r3, [pc, #340]	; (8008078 <xTaskIncrementTick+0x160>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f040 8093 	bne.w	8008052 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f2c:	4b53      	ldr	r3, [pc, #332]	; (800807c <xTaskIncrementTick+0x164>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	3301      	adds	r3, #1
 8007f32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f34:	4a51      	ldr	r2, [pc, #324]	; (800807c <xTaskIncrementTick+0x164>)
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d11f      	bne.n	8007f80 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007f40:	4b4f      	ldr	r3, [pc, #316]	; (8008080 <xTaskIncrementTick+0x168>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d009      	beq.n	8007f5e <xTaskIncrementTick+0x46>
 8007f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4e:	f383 8811 	msr	BASEPRI, r3
 8007f52:	f3bf 8f6f 	isb	sy
 8007f56:	f3bf 8f4f 	dsb	sy
 8007f5a:	603b      	str	r3, [r7, #0]
 8007f5c:	e7fe      	b.n	8007f5c <xTaskIncrementTick+0x44>
 8007f5e:	4b48      	ldr	r3, [pc, #288]	; (8008080 <xTaskIncrementTick+0x168>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	60fb      	str	r3, [r7, #12]
 8007f64:	4b47      	ldr	r3, [pc, #284]	; (8008084 <xTaskIncrementTick+0x16c>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a45      	ldr	r2, [pc, #276]	; (8008080 <xTaskIncrementTick+0x168>)
 8007f6a:	6013      	str	r3, [r2, #0]
 8007f6c:	4a45      	ldr	r2, [pc, #276]	; (8008084 <xTaskIncrementTick+0x16c>)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6013      	str	r3, [r2, #0]
 8007f72:	4b45      	ldr	r3, [pc, #276]	; (8008088 <xTaskIncrementTick+0x170>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3301      	adds	r3, #1
 8007f78:	4a43      	ldr	r2, [pc, #268]	; (8008088 <xTaskIncrementTick+0x170>)
 8007f7a:	6013      	str	r3, [r2, #0]
 8007f7c:	f000 fb7e 	bl	800867c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f80:	4b42      	ldr	r3, [pc, #264]	; (800808c <xTaskIncrementTick+0x174>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d34e      	bcc.n	8008028 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f8a:	4b3d      	ldr	r3, [pc, #244]	; (8008080 <xTaskIncrementTick+0x168>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d101      	bne.n	8007f98 <xTaskIncrementTick+0x80>
 8007f94:	2301      	movs	r3, #1
 8007f96:	e000      	b.n	8007f9a <xTaskIncrementTick+0x82>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d004      	beq.n	8007fa8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f9e:	4b3b      	ldr	r3, [pc, #236]	; (800808c <xTaskIncrementTick+0x174>)
 8007fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fa4:	601a      	str	r2, [r3, #0]
					break;
 8007fa6:	e03f      	b.n	8008028 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007fa8:	4b35      	ldr	r3, [pc, #212]	; (8008080 <xTaskIncrementTick+0x168>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007fb8:	693a      	ldr	r2, [r7, #16]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d203      	bcs.n	8007fc8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007fc0:	4a32      	ldr	r2, [pc, #200]	; (800808c <xTaskIncrementTick+0x174>)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6013      	str	r3, [r2, #0]
						break;
 8007fc6:	e02f      	b.n	8008028 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	3304      	adds	r3, #4
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7fe fe79 	bl	8006cc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d004      	beq.n	8007fe4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	3318      	adds	r3, #24
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fe fe70 	bl	8006cc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe8:	4b29      	ldr	r3, [pc, #164]	; (8008090 <xTaskIncrementTick+0x178>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d903      	bls.n	8007ff8 <xTaskIncrementTick+0xe0>
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff4:	4a26      	ldr	r2, [pc, #152]	; (8008090 <xTaskIncrementTick+0x178>)
 8007ff6:	6013      	str	r3, [r2, #0]
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4413      	add	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4a23      	ldr	r2, [pc, #140]	; (8008094 <xTaskIncrementTick+0x17c>)
 8008006:	441a      	add	r2, r3
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	3304      	adds	r3, #4
 800800c:	4619      	mov	r1, r3
 800800e:	4610      	mov	r0, r2
 8008010:	f7fe fdfd 	bl	8006c0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008018:	4b1f      	ldr	r3, [pc, #124]	; (8008098 <xTaskIncrementTick+0x180>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801e:	429a      	cmp	r2, r3
 8008020:	d3b3      	bcc.n	8007f8a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008022:	2301      	movs	r3, #1
 8008024:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008026:	e7b0      	b.n	8007f8a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008028:	4b1b      	ldr	r3, [pc, #108]	; (8008098 <xTaskIncrementTick+0x180>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800802e:	4919      	ldr	r1, [pc, #100]	; (8008094 <xTaskIncrementTick+0x17c>)
 8008030:	4613      	mov	r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4413      	add	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	440b      	add	r3, r1
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d901      	bls.n	8008044 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8008040:	2301      	movs	r3, #1
 8008042:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8008044:	4b15      	ldr	r3, [pc, #84]	; (800809c <xTaskIncrementTick+0x184>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d109      	bne.n	8008060 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 800804c:	f7f8 fe2a 	bl	8000ca4 <vApplicationTickHook>
 8008050:	e006      	b.n	8008060 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008052:	4b12      	ldr	r3, [pc, #72]	; (800809c <xTaskIncrementTick+0x184>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	3301      	adds	r3, #1
 8008058:	4a10      	ldr	r2, [pc, #64]	; (800809c <xTaskIncrementTick+0x184>)
 800805a:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800805c:	f7f8 fe22 	bl	8000ca4 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008060:	4b0f      	ldr	r3, [pc, #60]	; (80080a0 <xTaskIncrementTick+0x188>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d001      	beq.n	800806c <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 8008068:	2301      	movs	r3, #1
 800806a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800806c:	697b      	ldr	r3, [r7, #20]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3718      	adds	r7, #24
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	20000c04 	.word	0x20000c04
 800807c:	20000be0 	.word	0x20000be0
 8008080:	20000b94 	.word	0x20000b94
 8008084:	20000b98 	.word	0x20000b98
 8008088:	20000bf4 	.word	0x20000bf4
 800808c:	20000bfc 	.word	0x20000bfc
 8008090:	20000be4 	.word	0x20000be4
 8008094:	2000070c 	.word	0x2000070c
 8008098:	20000708 	.word	0x20000708
 800809c:	20000bec 	.word	0x20000bec
 80080a0:	20000bf0 	.word	0x20000bf0

080080a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80080aa:	4b2f      	ldr	r3, [pc, #188]	; (8008168 <vTaskSwitchContext+0xc4>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80080b2:	4b2e      	ldr	r3, [pc, #184]	; (800816c <vTaskSwitchContext+0xc8>)
 80080b4:	2201      	movs	r2, #1
 80080b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80080b8:	e051      	b.n	800815e <vTaskSwitchContext+0xba>
		xYieldPending = pdFALSE;
 80080ba:	4b2c      	ldr	r3, [pc, #176]	; (800816c <vTaskSwitchContext+0xc8>)
 80080bc:	2200      	movs	r2, #0
 80080be:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80080c0:	4b2b      	ldr	r3, [pc, #172]	; (8008170 <vTaskSwitchContext+0xcc>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	4b2a      	ldr	r3, [pc, #168]	; (8008170 <vTaskSwitchContext+0xcc>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d808      	bhi.n	80080e2 <vTaskSwitchContext+0x3e>
 80080d0:	4b27      	ldr	r3, [pc, #156]	; (8008170 <vTaskSwitchContext+0xcc>)
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	4b26      	ldr	r3, [pc, #152]	; (8008170 <vTaskSwitchContext+0xcc>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	3334      	adds	r3, #52	; 0x34
 80080da:	4619      	mov	r1, r3
 80080dc:	4610      	mov	r0, r2
 80080de:	f7f8 fde7 	bl	8000cb0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80080e2:	4b24      	ldr	r3, [pc, #144]	; (8008174 <vTaskSwitchContext+0xd0>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	e00f      	b.n	800810a <vTaskSwitchContext+0x66>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d109      	bne.n	8008104 <vTaskSwitchContext+0x60>
 80080f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	607b      	str	r3, [r7, #4]
 8008102:	e7fe      	b.n	8008102 <vTaskSwitchContext+0x5e>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	3b01      	subs	r3, #1
 8008108:	60fb      	str	r3, [r7, #12]
 800810a:	491b      	ldr	r1, [pc, #108]	; (8008178 <vTaskSwitchContext+0xd4>)
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	4613      	mov	r3, r2
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	4413      	add	r3, r2
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	440b      	add	r3, r1
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d0e5      	beq.n	80080ea <vTaskSwitchContext+0x46>
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	4613      	mov	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4413      	add	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4a13      	ldr	r2, [pc, #76]	; (8008178 <vTaskSwitchContext+0xd4>)
 800812a:	4413      	add	r3, r2
 800812c:	60bb      	str	r3, [r7, #8]
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	605a      	str	r2, [r3, #4]
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	685a      	ldr	r2, [r3, #4]
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	3308      	adds	r3, #8
 8008140:	429a      	cmp	r2, r3
 8008142:	d104      	bne.n	800814e <vTaskSwitchContext+0xaa>
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	685a      	ldr	r2, [r3, #4]
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	605a      	str	r2, [r3, #4]
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	4a06      	ldr	r2, [pc, #24]	; (8008170 <vTaskSwitchContext+0xcc>)
 8008156:	6013      	str	r3, [r2, #0]
 8008158:	4a06      	ldr	r2, [pc, #24]	; (8008174 <vTaskSwitchContext+0xd0>)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6013      	str	r3, [r2, #0]
}
 800815e:	bf00      	nop
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	20000c04 	.word	0x20000c04
 800816c:	20000bf0 	.word	0x20000bf0
 8008170:	20000708 	.word	0x20000708
 8008174:	20000be4 	.word	0x20000be4
 8008178:	2000070c 	.word	0x2000070c

0800817c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d109      	bne.n	80081a0 <vTaskPlaceOnEventList+0x24>
 800818c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008190:	f383 8811 	msr	BASEPRI, r3
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	60fb      	str	r3, [r7, #12]
 800819e:	e7fe      	b.n	800819e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081a0:	4b07      	ldr	r3, [pc, #28]	; (80081c0 <vTaskPlaceOnEventList+0x44>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	3318      	adds	r3, #24
 80081a6:	4619      	mov	r1, r3
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7fe fd53 	bl	8006c54 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80081ae:	2101      	movs	r1, #1
 80081b0:	6838      	ldr	r0, [r7, #0]
 80081b2:	f000 fb29 	bl	8008808 <prvAddCurrentTaskToDelayedList>
}
 80081b6:	bf00      	nop
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	20000708 	.word	0x20000708

080081c4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d109      	bne.n	80081ea <vTaskPlaceOnUnorderedEventList+0x26>
 80081d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081da:	f383 8811 	msr	BASEPRI, r3
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f3bf 8f4f 	dsb	sy
 80081e6:	617b      	str	r3, [r7, #20]
 80081e8:	e7fe      	b.n	80081e8 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80081ea:	4b11      	ldr	r3, [pc, #68]	; (8008230 <vTaskPlaceOnUnorderedEventList+0x6c>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d109      	bne.n	8008206 <vTaskPlaceOnUnorderedEventList+0x42>
 80081f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f6:	f383 8811 	msr	BASEPRI, r3
 80081fa:	f3bf 8f6f 	isb	sy
 80081fe:	f3bf 8f4f 	dsb	sy
 8008202:	613b      	str	r3, [r7, #16]
 8008204:	e7fe      	b.n	8008204 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008206:	4b0b      	ldr	r3, [pc, #44]	; (8008234 <vTaskPlaceOnUnorderedEventList+0x70>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008210:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008212:	4b08      	ldr	r3, [pc, #32]	; (8008234 <vTaskPlaceOnUnorderedEventList+0x70>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3318      	adds	r3, #24
 8008218:	4619      	mov	r1, r3
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f7fe fcf7 	bl	8006c0e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008220:	2101      	movs	r1, #1
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 faf0 	bl	8008808 <prvAddCurrentTaskToDelayedList>
}
 8008228:	bf00      	nop
 800822a:	3718      	adds	r7, #24
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	20000c04 	.word	0x20000c04
 8008234:	20000708 	.word	0x20000708

08008238 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008238:	b580      	push	{r7, lr}
 800823a:	b086      	sub	sp, #24
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d109      	bne.n	800825e <vTaskPlaceOnEventListRestricted+0x26>
 800824a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824e:	f383 8811 	msr	BASEPRI, r3
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	617b      	str	r3, [r7, #20]
 800825c:	e7fe      	b.n	800825c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800825e:	4b0a      	ldr	r3, [pc, #40]	; (8008288 <vTaskPlaceOnEventListRestricted+0x50>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	3318      	adds	r3, #24
 8008264:	4619      	mov	r1, r3
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f7fe fcd1 	bl	8006c0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d002      	beq.n	8008278 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8008272:	f04f 33ff 	mov.w	r3, #4294967295
 8008276:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008278:	6879      	ldr	r1, [r7, #4]
 800827a:	68b8      	ldr	r0, [r7, #8]
 800827c:	f000 fac4 	bl	8008808 <prvAddCurrentTaskToDelayedList>
	}
 8008280:	bf00      	nop
 8008282:	3718      	adds	r7, #24
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	20000708 	.word	0x20000708

0800828c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b086      	sub	sp, #24
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d109      	bne.n	80082b6 <xTaskRemoveFromEventList+0x2a>
 80082a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	e7fe      	b.n	80082b4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	3318      	adds	r3, #24
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fe fd02 	bl	8006cc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082c0:	4b1d      	ldr	r3, [pc, #116]	; (8008338 <xTaskRemoveFromEventList+0xac>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d11d      	bne.n	8008304 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	3304      	adds	r3, #4
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fe fcf9 	bl	8006cc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082d6:	4b19      	ldr	r3, [pc, #100]	; (800833c <xTaskRemoveFromEventList+0xb0>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d903      	bls.n	80082e6 <xTaskRemoveFromEventList+0x5a>
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e2:	4a16      	ldr	r2, [pc, #88]	; (800833c <xTaskRemoveFromEventList+0xb0>)
 80082e4:	6013      	str	r3, [r2, #0]
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ea:	4613      	mov	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4a13      	ldr	r2, [pc, #76]	; (8008340 <xTaskRemoveFromEventList+0xb4>)
 80082f4:	441a      	add	r2, r3
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	3304      	adds	r3, #4
 80082fa:	4619      	mov	r1, r3
 80082fc:	4610      	mov	r0, r2
 80082fe:	f7fe fc86 	bl	8006c0e <vListInsertEnd>
 8008302:	e005      	b.n	8008310 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	3318      	adds	r3, #24
 8008308:	4619      	mov	r1, r3
 800830a:	480e      	ldr	r0, [pc, #56]	; (8008344 <xTaskRemoveFromEventList+0xb8>)
 800830c:	f7fe fc7f 	bl	8006c0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008314:	4b0c      	ldr	r3, [pc, #48]	; (8008348 <xTaskRemoveFromEventList+0xbc>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831a:	429a      	cmp	r2, r3
 800831c:	d905      	bls.n	800832a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800831e:	2301      	movs	r3, #1
 8008320:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008322:	4b0a      	ldr	r3, [pc, #40]	; (800834c <xTaskRemoveFromEventList+0xc0>)
 8008324:	2201      	movs	r2, #1
 8008326:	601a      	str	r2, [r3, #0]
 8008328:	e001      	b.n	800832e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800832a:	2300      	movs	r3, #0
 800832c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800832e:	697b      	ldr	r3, [r7, #20]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3718      	adds	r7, #24
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	20000c04 	.word	0x20000c04
 800833c:	20000be4 	.word	0x20000be4
 8008340:	2000070c 	.word	0x2000070c
 8008344:	20000b9c 	.word	0x20000b9c
 8008348:	20000708 	.word	0x20000708
 800834c:	20000bf0 	.word	0x20000bf0

08008350 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800835a:	4b28      	ldr	r3, [pc, #160]	; (80083fc <vTaskRemoveFromUnorderedEventList+0xac>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d109      	bne.n	8008376 <vTaskRemoveFromUnorderedEventList+0x26>
 8008362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008366:	f383 8811 	msr	BASEPRI, r3
 800836a:	f3bf 8f6f 	isb	sy
 800836e:	f3bf 8f4f 	dsb	sy
 8008372:	613b      	str	r3, [r7, #16]
 8008374:	e7fe      	b.n	8008374 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d109      	bne.n	80083a0 <vTaskRemoveFromUnorderedEventList+0x50>
 800838c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	60fb      	str	r3, [r7, #12]
 800839e:	e7fe      	b.n	800839e <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f7fe fc8f 	bl	8006cc4 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	3304      	adds	r3, #4
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fe fc8a 	bl	8006cc4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b4:	4b12      	ldr	r3, [pc, #72]	; (8008400 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d903      	bls.n	80083c4 <vTaskRemoveFromUnorderedEventList+0x74>
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c0:	4a0f      	ldr	r2, [pc, #60]	; (8008400 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80083c2:	6013      	str	r3, [r2, #0]
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083c8:	4613      	mov	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	4413      	add	r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4a0c      	ldr	r2, [pc, #48]	; (8008404 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80083d2:	441a      	add	r2, r3
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	3304      	adds	r3, #4
 80083d8:	4619      	mov	r1, r3
 80083da:	4610      	mov	r0, r2
 80083dc:	f7fe fc17 	bl	8006c0e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e4:	4b08      	ldr	r3, [pc, #32]	; (8008408 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d902      	bls.n	80083f4 <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80083ee:	4b07      	ldr	r3, [pc, #28]	; (800840c <vTaskRemoveFromUnorderedEventList+0xbc>)
 80083f0:	2201      	movs	r2, #1
 80083f2:	601a      	str	r2, [r3, #0]
	}
}
 80083f4:	bf00      	nop
 80083f6:	3718      	adds	r7, #24
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	20000c04 	.word	0x20000c04
 8008400:	20000be4 	.word	0x20000be4
 8008404:	2000070c 	.word	0x2000070c
 8008408:	20000708 	.word	0x20000708
 800840c:	20000bf0 	.word	0x20000bf0

08008410 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008418:	4b06      	ldr	r3, [pc, #24]	; (8008434 <vTaskInternalSetTimeOutState+0x24>)
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008420:	4b05      	ldr	r3, [pc, #20]	; (8008438 <vTaskInternalSetTimeOutState+0x28>)
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	605a      	str	r2, [r3, #4]
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	bc80      	pop	{r7}
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	20000bf4 	.word	0x20000bf4
 8008438:	20000be0 	.word	0x20000be0

0800843c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b088      	sub	sp, #32
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d109      	bne.n	8008460 <xTaskCheckForTimeOut+0x24>
 800844c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	613b      	str	r3, [r7, #16]
 800845e:	e7fe      	b.n	800845e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d109      	bne.n	800847a <xTaskCheckForTimeOut+0x3e>
 8008466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846a:	f383 8811 	msr	BASEPRI, r3
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	f3bf 8f4f 	dsb	sy
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	e7fe      	b.n	8008478 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800847a:	f000 fe85 	bl	8009188 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800847e:	4b1d      	ldr	r3, [pc, #116]	; (80084f4 <xTaskCheckForTimeOut+0xb8>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	69ba      	ldr	r2, [r7, #24]
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008496:	d102      	bne.n	800849e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008498:	2300      	movs	r3, #0
 800849a:	61fb      	str	r3, [r7, #28]
 800849c:	e023      	b.n	80084e6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	4b15      	ldr	r3, [pc, #84]	; (80084f8 <xTaskCheckForTimeOut+0xbc>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d007      	beq.n	80084ba <xTaskCheckForTimeOut+0x7e>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	69ba      	ldr	r2, [r7, #24]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d302      	bcc.n	80084ba <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80084b4:	2301      	movs	r3, #1
 80084b6:	61fb      	str	r3, [r7, #28]
 80084b8:	e015      	b.n	80084e6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	697a      	ldr	r2, [r7, #20]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d20b      	bcs.n	80084dc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	1ad2      	subs	r2, r2, r3
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f7ff ff9d 	bl	8008410 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80084d6:	2300      	movs	r3, #0
 80084d8:	61fb      	str	r3, [r7, #28]
 80084da:	e004      	b.n	80084e6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	2200      	movs	r2, #0
 80084e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80084e2:	2301      	movs	r3, #1
 80084e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80084e6:	f000 fe7d 	bl	80091e4 <vPortExitCritical>

	return xReturn;
 80084ea:	69fb      	ldr	r3, [r7, #28]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3720      	adds	r7, #32
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	20000be0 	.word	0x20000be0
 80084f8:	20000bf4 	.word	0x20000bf4

080084fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80084fc:	b480      	push	{r7}
 80084fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008500:	4b03      	ldr	r3, [pc, #12]	; (8008510 <vTaskMissedYield+0x14>)
 8008502:	2201      	movs	r2, #1
 8008504:	601a      	str	r2, [r3, #0]
}
 8008506:	bf00      	nop
 8008508:	46bd      	mov	sp, r7
 800850a:	bc80      	pop	{r7}
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	20000bf0 	.word	0x20000bf0

08008514 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800851c:	f000 f854 	bl	80085c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008520:	4b07      	ldr	r3, [pc, #28]	; (8008540 <prvIdleTask+0x2c>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d907      	bls.n	8008538 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008528:	4b06      	ldr	r3, [pc, #24]	; (8008544 <prvIdleTask+0x30>)
 800852a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800852e:	601a      	str	r2, [r3, #0]
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008538:	f7f8 fbae 	bl	8000c98 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800853c:	e7ee      	b.n	800851c <prvIdleTask+0x8>
 800853e:	bf00      	nop
 8008540:	2000070c 	.word	0x2000070c
 8008544:	e000ed04 	.word	0xe000ed04

08008548 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800854e:	2300      	movs	r3, #0
 8008550:	607b      	str	r3, [r7, #4]
 8008552:	e00c      	b.n	800856e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	4613      	mov	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4a12      	ldr	r2, [pc, #72]	; (80085a8 <prvInitialiseTaskLists+0x60>)
 8008560:	4413      	add	r3, r2
 8008562:	4618      	mov	r0, r3
 8008564:	f7fe fb28 	bl	8006bb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	3301      	adds	r3, #1
 800856c:	607b      	str	r3, [r7, #4]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2b37      	cmp	r3, #55	; 0x37
 8008572:	d9ef      	bls.n	8008554 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008574:	480d      	ldr	r0, [pc, #52]	; (80085ac <prvInitialiseTaskLists+0x64>)
 8008576:	f7fe fb1f 	bl	8006bb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800857a:	480d      	ldr	r0, [pc, #52]	; (80085b0 <prvInitialiseTaskLists+0x68>)
 800857c:	f7fe fb1c 	bl	8006bb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008580:	480c      	ldr	r0, [pc, #48]	; (80085b4 <prvInitialiseTaskLists+0x6c>)
 8008582:	f7fe fb19 	bl	8006bb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008586:	480c      	ldr	r0, [pc, #48]	; (80085b8 <prvInitialiseTaskLists+0x70>)
 8008588:	f7fe fb16 	bl	8006bb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800858c:	480b      	ldr	r0, [pc, #44]	; (80085bc <prvInitialiseTaskLists+0x74>)
 800858e:	f7fe fb13 	bl	8006bb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008592:	4b0b      	ldr	r3, [pc, #44]	; (80085c0 <prvInitialiseTaskLists+0x78>)
 8008594:	4a05      	ldr	r2, [pc, #20]	; (80085ac <prvInitialiseTaskLists+0x64>)
 8008596:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008598:	4b0a      	ldr	r3, [pc, #40]	; (80085c4 <prvInitialiseTaskLists+0x7c>)
 800859a:	4a05      	ldr	r2, [pc, #20]	; (80085b0 <prvInitialiseTaskLists+0x68>)
 800859c:	601a      	str	r2, [r3, #0]
}
 800859e:	bf00      	nop
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	2000070c 	.word	0x2000070c
 80085ac:	20000b6c 	.word	0x20000b6c
 80085b0:	20000b80 	.word	0x20000b80
 80085b4:	20000b9c 	.word	0x20000b9c
 80085b8:	20000bb0 	.word	0x20000bb0
 80085bc:	20000bc8 	.word	0x20000bc8
 80085c0:	20000b94 	.word	0x20000b94
 80085c4:	20000b98 	.word	0x20000b98

080085c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80085ce:	e019      	b.n	8008604 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80085d0:	f000 fdda 	bl	8009188 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80085d4:	4b0f      	ldr	r3, [pc, #60]	; (8008614 <prvCheckTasksWaitingTermination+0x4c>)
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	3304      	adds	r3, #4
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fe fb6f 	bl	8006cc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80085e6:	4b0c      	ldr	r3, [pc, #48]	; (8008618 <prvCheckTasksWaitingTermination+0x50>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	4a0a      	ldr	r2, [pc, #40]	; (8008618 <prvCheckTasksWaitingTermination+0x50>)
 80085ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80085f0:	4b0a      	ldr	r3, [pc, #40]	; (800861c <prvCheckTasksWaitingTermination+0x54>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	3b01      	subs	r3, #1
 80085f6:	4a09      	ldr	r2, [pc, #36]	; (800861c <prvCheckTasksWaitingTermination+0x54>)
 80085f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80085fa:	f000 fdf3 	bl	80091e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f80e 	bl	8008620 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008604:	4b05      	ldr	r3, [pc, #20]	; (800861c <prvCheckTasksWaitingTermination+0x54>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1e1      	bne.n	80085d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800860c:	bf00      	nop
 800860e:	3708      	adds	r7, #8
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	20000bb0 	.word	0x20000bb0
 8008618:	20000bdc 	.word	0x20000bdc
 800861c:	20000bc4 	.word	0x20000bc4

08008620 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800862e:	2b00      	cmp	r3, #0
 8008630:	d108      	bne.n	8008644 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008636:	4618      	mov	r0, r3
 8008638:	f000 ff62 	bl	8009500 <vPortFree>
				vPortFree( pxTCB );
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 ff5f 	bl	8009500 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008642:	e017      	b.n	8008674 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800864a:	2b01      	cmp	r3, #1
 800864c:	d103      	bne.n	8008656 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 ff56 	bl	8009500 <vPortFree>
	}
 8008654:	e00e      	b.n	8008674 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800865c:	2b02      	cmp	r3, #2
 800865e:	d009      	beq.n	8008674 <prvDeleteTCB+0x54>
 8008660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	60fb      	str	r3, [r7, #12]
 8008672:	e7fe      	b.n	8008672 <prvDeleteTCB+0x52>
	}
 8008674:	bf00      	nop
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008682:	4b0e      	ldr	r3, [pc, #56]	; (80086bc <prvResetNextTaskUnblockTime+0x40>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d101      	bne.n	8008690 <prvResetNextTaskUnblockTime+0x14>
 800868c:	2301      	movs	r3, #1
 800868e:	e000      	b.n	8008692 <prvResetNextTaskUnblockTime+0x16>
 8008690:	2300      	movs	r3, #0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d004      	beq.n	80086a0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008696:	4b0a      	ldr	r3, [pc, #40]	; (80086c0 <prvResetNextTaskUnblockTime+0x44>)
 8008698:	f04f 32ff 	mov.w	r2, #4294967295
 800869c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800869e:	e008      	b.n	80086b2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80086a0:	4b06      	ldr	r3, [pc, #24]	; (80086bc <prvResetNextTaskUnblockTime+0x40>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	4a04      	ldr	r2, [pc, #16]	; (80086c0 <prvResetNextTaskUnblockTime+0x44>)
 80086b0:	6013      	str	r3, [r2, #0]
}
 80086b2:	bf00      	nop
 80086b4:	370c      	adds	r7, #12
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bc80      	pop	{r7}
 80086ba:	4770      	bx	lr
 80086bc:	20000b94 	.word	0x20000b94
 80086c0:	20000bfc 	.word	0x20000bfc

080086c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80086ca:	4b0b      	ldr	r3, [pc, #44]	; (80086f8 <xTaskGetSchedulerState+0x34>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d102      	bne.n	80086d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80086d2:	2301      	movs	r3, #1
 80086d4:	607b      	str	r3, [r7, #4]
 80086d6:	e008      	b.n	80086ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086d8:	4b08      	ldr	r3, [pc, #32]	; (80086fc <xTaskGetSchedulerState+0x38>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d102      	bne.n	80086e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80086e0:	2302      	movs	r3, #2
 80086e2:	607b      	str	r3, [r7, #4]
 80086e4:	e001      	b.n	80086ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80086e6:	2300      	movs	r3, #0
 80086e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80086ea:	687b      	ldr	r3, [r7, #4]
	}
 80086ec:	4618      	mov	r0, r3
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bc80      	pop	{r7}
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	20000be8 	.word	0x20000be8
 80086fc:	20000c04 	.word	0x20000c04

08008700 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800870c:	2300      	movs	r3, #0
 800870e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d054      	beq.n	80087c0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008716:	4b2d      	ldr	r3, [pc, #180]	; (80087cc <xTaskPriorityDisinherit+0xcc>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	693a      	ldr	r2, [r7, #16]
 800871c:	429a      	cmp	r2, r3
 800871e:	d009      	beq.n	8008734 <xTaskPriorityDisinherit+0x34>
 8008720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008724:	f383 8811 	msr	BASEPRI, r3
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	60fb      	str	r3, [r7, #12]
 8008732:	e7fe      	b.n	8008732 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008738:	2b00      	cmp	r3, #0
 800873a:	d109      	bne.n	8008750 <xTaskPriorityDisinherit+0x50>
 800873c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008740:	f383 8811 	msr	BASEPRI, r3
 8008744:	f3bf 8f6f 	isb	sy
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	60bb      	str	r3, [r7, #8]
 800874e:	e7fe      	b.n	800874e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008754:	1e5a      	subs	r2, r3, #1
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008762:	429a      	cmp	r2, r3
 8008764:	d02c      	beq.n	80087c0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800876a:	2b00      	cmp	r3, #0
 800876c:	d128      	bne.n	80087c0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	3304      	adds	r3, #4
 8008772:	4618      	mov	r0, r3
 8008774:	f7fe faa6 	bl	8006cc4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008784:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008790:	4b0f      	ldr	r3, [pc, #60]	; (80087d0 <xTaskPriorityDisinherit+0xd0>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	429a      	cmp	r2, r3
 8008796:	d903      	bls.n	80087a0 <xTaskPriorityDisinherit+0xa0>
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879c:	4a0c      	ldr	r2, [pc, #48]	; (80087d0 <xTaskPriorityDisinherit+0xd0>)
 800879e:	6013      	str	r3, [r2, #0]
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a4:	4613      	mov	r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4413      	add	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	4a09      	ldr	r2, [pc, #36]	; (80087d4 <xTaskPriorityDisinherit+0xd4>)
 80087ae:	441a      	add	r2, r3
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	3304      	adds	r3, #4
 80087b4:	4619      	mov	r1, r3
 80087b6:	4610      	mov	r0, r2
 80087b8:	f7fe fa29 	bl	8006c0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80087bc:	2301      	movs	r3, #1
 80087be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80087c0:	697b      	ldr	r3, [r7, #20]
	}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3718      	adds	r7, #24
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	20000708 	.word	0x20000708
 80087d0:	20000be4 	.word	0x20000be4
 80087d4:	2000070c 	.word	0x2000070c

080087d8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80087de:	4b09      	ldr	r3, [pc, #36]	; (8008804 <uxTaskResetEventItemValue+0x2c>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087e6:	4b07      	ldr	r3, [pc, #28]	; (8008804 <uxTaskResetEventItemValue+0x2c>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ec:	4b05      	ldr	r3, [pc, #20]	; (8008804 <uxTaskResetEventItemValue+0x2c>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80087f4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80087f6:	687b      	ldr	r3, [r7, #4]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bc80      	pop	{r7}
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	20000708 	.word	0x20000708

08008808 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008812:	4b21      	ldr	r3, [pc, #132]	; (8008898 <prvAddCurrentTaskToDelayedList+0x90>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008818:	4b20      	ldr	r3, [pc, #128]	; (800889c <prvAddCurrentTaskToDelayedList+0x94>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	3304      	adds	r3, #4
 800881e:	4618      	mov	r0, r3
 8008820:	f7fe fa50 	bl	8006cc4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882a:	d10a      	bne.n	8008842 <prvAddCurrentTaskToDelayedList+0x3a>
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d007      	beq.n	8008842 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008832:	4b1a      	ldr	r3, [pc, #104]	; (800889c <prvAddCurrentTaskToDelayedList+0x94>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	3304      	adds	r3, #4
 8008838:	4619      	mov	r1, r3
 800883a:	4819      	ldr	r0, [pc, #100]	; (80088a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800883c:	f7fe f9e7 	bl	8006c0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008840:	e026      	b.n	8008890 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4413      	add	r3, r2
 8008848:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800884a:	4b14      	ldr	r3, [pc, #80]	; (800889c <prvAddCurrentTaskToDelayedList+0x94>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	429a      	cmp	r2, r3
 8008858:	d209      	bcs.n	800886e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800885a:	4b12      	ldr	r3, [pc, #72]	; (80088a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	4b0f      	ldr	r3, [pc, #60]	; (800889c <prvAddCurrentTaskToDelayedList+0x94>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	3304      	adds	r3, #4
 8008864:	4619      	mov	r1, r3
 8008866:	4610      	mov	r0, r2
 8008868:	f7fe f9f4 	bl	8006c54 <vListInsert>
}
 800886c:	e010      	b.n	8008890 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800886e:	4b0e      	ldr	r3, [pc, #56]	; (80088a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	4b0a      	ldr	r3, [pc, #40]	; (800889c <prvAddCurrentTaskToDelayedList+0x94>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	3304      	adds	r3, #4
 8008878:	4619      	mov	r1, r3
 800887a:	4610      	mov	r0, r2
 800887c:	f7fe f9ea 	bl	8006c54 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008880:	4b0a      	ldr	r3, [pc, #40]	; (80088ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	429a      	cmp	r2, r3
 8008888:	d202      	bcs.n	8008890 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800888a:	4a08      	ldr	r2, [pc, #32]	; (80088ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	6013      	str	r3, [r2, #0]
}
 8008890:	bf00      	nop
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	20000be0 	.word	0x20000be0
 800889c:	20000708 	.word	0x20000708
 80088a0:	20000bc8 	.word	0x20000bc8
 80088a4:	20000b98 	.word	0x20000b98
 80088a8:	20000b94 	.word	0x20000b94
 80088ac:	20000bfc 	.word	0x20000bfc

080088b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b08a      	sub	sp, #40	; 0x28
 80088b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80088b6:	2300      	movs	r3, #0
 80088b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80088ba:	f000 fb17 	bl	8008eec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80088be:	4b1c      	ldr	r3, [pc, #112]	; (8008930 <xTimerCreateTimerTask+0x80>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d021      	beq.n	800890a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80088c6:	2300      	movs	r3, #0
 80088c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80088ca:	2300      	movs	r3, #0
 80088cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80088ce:	1d3a      	adds	r2, r7, #4
 80088d0:	f107 0108 	add.w	r1, r7, #8
 80088d4:	f107 030c 	add.w	r3, r7, #12
 80088d8:	4618      	mov	r0, r3
 80088da:	f7fd ffa3 	bl	8006824 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80088de:	6879      	ldr	r1, [r7, #4]
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	9202      	str	r2, [sp, #8]
 80088e6:	9301      	str	r3, [sp, #4]
 80088e8:	2302      	movs	r3, #2
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	2300      	movs	r3, #0
 80088ee:	460a      	mov	r2, r1
 80088f0:	4910      	ldr	r1, [pc, #64]	; (8008934 <xTimerCreateTimerTask+0x84>)
 80088f2:	4811      	ldr	r0, [pc, #68]	; (8008938 <xTimerCreateTimerTask+0x88>)
 80088f4:	f7fe ff20 	bl	8007738 <xTaskCreateStatic>
 80088f8:	4602      	mov	r2, r0
 80088fa:	4b10      	ldr	r3, [pc, #64]	; (800893c <xTimerCreateTimerTask+0x8c>)
 80088fc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80088fe:	4b0f      	ldr	r3, [pc, #60]	; (800893c <xTimerCreateTimerTask+0x8c>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d001      	beq.n	800890a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008906:	2301      	movs	r3, #1
 8008908:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d109      	bne.n	8008924 <xTimerCreateTimerTask+0x74>
 8008910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	613b      	str	r3, [r7, #16]
 8008922:	e7fe      	b.n	8008922 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008924:	697b      	ldr	r3, [r7, #20]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3718      	adds	r7, #24
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	20000c38 	.word	0x20000c38
 8008934:	08009a40 	.word	0x08009a40
 8008938:	08008afd 	.word	0x08008afd
 800893c:	20000c3c 	.word	0x20000c3c

08008940 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008940:	b580      	push	{r7, lr}
 8008942:	b088      	sub	sp, #32
 8008944:	af02      	add	r7, sp, #8
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
 800894c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800894e:	2030      	movs	r0, #48	; 0x30
 8008950:	f000 fd10 	bl	8009374 <pvPortMalloc>
 8008954:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00d      	beq.n	8008978 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	9301      	str	r3, [sp, #4]
 8008960:	6a3b      	ldr	r3, [r7, #32]
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	68b9      	ldr	r1, [r7, #8]
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f000 f809 	bl	8008982 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8008978:	697b      	ldr	r3, [r7, #20]
	}
 800897a:	4618      	mov	r0, r3
 800897c:	3718      	adds	r7, #24
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b086      	sub	sp, #24
 8008986:	af00      	add	r7, sp, #0
 8008988:	60f8      	str	r0, [r7, #12]
 800898a:	60b9      	str	r1, [r7, #8]
 800898c:	607a      	str	r2, [r7, #4]
 800898e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d109      	bne.n	80089aa <prvInitialiseNewTimer+0x28>
 8008996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899a:	f383 8811 	msr	BASEPRI, r3
 800899e:	f3bf 8f6f 	isb	sy
 80089a2:	f3bf 8f4f 	dsb	sy
 80089a6:	617b      	str	r3, [r7, #20]
 80089a8:	e7fe      	b.n	80089a8 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d015      	beq.n	80089dc <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80089b0:	f000 fa9c 	bl	8008eec <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80089b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80089ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089bc:	68ba      	ldr	r2, [r7, #8]
 80089be:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80089c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c8:	683a      	ldr	r2, [r7, #0]
 80089ca:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80089cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ce:	6a3a      	ldr	r2, [r7, #32]
 80089d0:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80089d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d4:	3304      	adds	r3, #4
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fe f90d 	bl	8006bf6 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80089dc:	bf00      	nop
 80089de:	3718      	adds	r7, #24
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b08a      	sub	sp, #40	; 0x28
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	607a      	str	r2, [r7, #4]
 80089f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80089f2:	2300      	movs	r3, #0
 80089f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d109      	bne.n	8008a10 <xTimerGenericCommand+0x2c>
 80089fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a00:	f383 8811 	msr	BASEPRI, r3
 8008a04:	f3bf 8f6f 	isb	sy
 8008a08:	f3bf 8f4f 	dsb	sy
 8008a0c:	623b      	str	r3, [r7, #32]
 8008a0e:	e7fe      	b.n	8008a0e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008a10:	4b19      	ldr	r3, [pc, #100]	; (8008a78 <xTimerGenericCommand+0x94>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d02a      	beq.n	8008a6e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	2b05      	cmp	r3, #5
 8008a28:	dc18      	bgt.n	8008a5c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008a2a:	f7ff fe4b 	bl	80086c4 <xTaskGetSchedulerState>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d109      	bne.n	8008a48 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008a34:	4b10      	ldr	r3, [pc, #64]	; (8008a78 <xTimerGenericCommand+0x94>)
 8008a36:	6818      	ldr	r0, [r3, #0]
 8008a38:	f107 0110 	add.w	r1, r7, #16
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a40:	f7fe faa4 	bl	8006f8c <xQueueGenericSend>
 8008a44:	6278      	str	r0, [r7, #36]	; 0x24
 8008a46:	e012      	b.n	8008a6e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008a48:	4b0b      	ldr	r3, [pc, #44]	; (8008a78 <xTimerGenericCommand+0x94>)
 8008a4a:	6818      	ldr	r0, [r3, #0]
 8008a4c:	f107 0110 	add.w	r1, r7, #16
 8008a50:	2300      	movs	r3, #0
 8008a52:	2200      	movs	r2, #0
 8008a54:	f7fe fa9a 	bl	8006f8c <xQueueGenericSend>
 8008a58:	6278      	str	r0, [r7, #36]	; 0x24
 8008a5a:	e008      	b.n	8008a6e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008a5c:	4b06      	ldr	r3, [pc, #24]	; (8008a78 <xTimerGenericCommand+0x94>)
 8008a5e:	6818      	ldr	r0, [r3, #0]
 8008a60:	f107 0110 	add.w	r1, r7, #16
 8008a64:	2300      	movs	r3, #0
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	f7fe fb8a 	bl	8007180 <xQueueGenericSendFromISR>
 8008a6c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3728      	adds	r7, #40	; 0x28
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	20000c38 	.word	0x20000c38

08008a7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b088      	sub	sp, #32
 8008a80:	af02      	add	r7, sp, #8
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a86:	4b1c      	ldr	r3, [pc, #112]	; (8008af8 <prvProcessExpiredTimer+0x7c>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	3304      	adds	r3, #4
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7fe f915 	bl	8006cc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	69db      	ldr	r3, [r3, #28]
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d121      	bne.n	8008ae6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	699a      	ldr	r2, [r3, #24]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	18d1      	adds	r1, r2, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	683a      	ldr	r2, [r7, #0]
 8008aae:	6978      	ldr	r0, [r7, #20]
 8008ab0:	f000 f8ca 	bl	8008c48 <prvInsertTimerInActiveList>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d015      	beq.n	8008ae6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008aba:	2300      	movs	r3, #0
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	2300      	movs	r3, #0
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	6978      	ldr	r0, [r7, #20]
 8008ac6:	f7ff ff8d 	bl	80089e4 <xTimerGenericCommand>
 8008aca:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d109      	bne.n	8008ae6 <prvProcessExpiredTimer+0x6a>
 8008ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad6:	f383 8811 	msr	BASEPRI, r3
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	f3bf 8f4f 	dsb	sy
 8008ae2:	60fb      	str	r3, [r7, #12]
 8008ae4:	e7fe      	b.n	8008ae4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aea:	6978      	ldr	r0, [r7, #20]
 8008aec:	4798      	blx	r3
}
 8008aee:	bf00      	nop
 8008af0:	3718      	adds	r7, #24
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	20000c30 	.word	0x20000c30

08008afc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 8008b04:	f7f8 f8e4 	bl	8000cd0 <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b08:	f107 0308 	add.w	r3, r7, #8
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 f857 	bl	8008bc0 <prvGetNextExpireTime>
 8008b12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	4619      	mov	r1, r3
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f000 f803 	bl	8008b24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008b1e:	f000 f8d5 	bl	8008ccc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b22:	e7f1      	b.n	8008b08 <prvTimerTask+0xc>

08008b24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008b2e:	f7ff f93b 	bl	8007da8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b32:	f107 0308 	add.w	r3, r7, #8
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 f866 	bl	8008c08 <prvSampleTimeNow>
 8008b3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d130      	bne.n	8008ba6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10a      	bne.n	8008b60 <prvProcessTimerOrBlockTask+0x3c>
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d806      	bhi.n	8008b60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008b52:	f7ff f937 	bl	8007dc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008b56:	68f9      	ldr	r1, [r7, #12]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f7ff ff8f 	bl	8008a7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008b5e:	e024      	b.n	8008baa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d008      	beq.n	8008b78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008b66:	4b13      	ldr	r3, [pc, #76]	; (8008bb4 <prvProcessTimerOrBlockTask+0x90>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	bf0c      	ite	eq
 8008b70:	2301      	moveq	r3, #1
 8008b72:	2300      	movne	r3, #0
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008b78:	4b0f      	ldr	r3, [pc, #60]	; (8008bb8 <prvProcessTimerOrBlockTask+0x94>)
 8008b7a:	6818      	ldr	r0, [r3, #0]
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	683a      	ldr	r2, [r7, #0]
 8008b84:	4619      	mov	r1, r3
 8008b86:	f7fe fda3 	bl	80076d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008b8a:	f7ff f91b 	bl	8007dc4 <xTaskResumeAll>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10a      	bne.n	8008baa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008b94:	4b09      	ldr	r3, [pc, #36]	; (8008bbc <prvProcessTimerOrBlockTask+0x98>)
 8008b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b9a:	601a      	str	r2, [r3, #0]
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	f3bf 8f6f 	isb	sy
}
 8008ba4:	e001      	b.n	8008baa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008ba6:	f7ff f90d 	bl	8007dc4 <xTaskResumeAll>
}
 8008baa:	bf00      	nop
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	20000c34 	.word	0x20000c34
 8008bb8:	20000c38 	.word	0x20000c38
 8008bbc:	e000ed04 	.word	0xe000ed04

08008bc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008bc8:	4b0e      	ldr	r3, [pc, #56]	; (8008c04 <prvGetNextExpireTime+0x44>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	bf0c      	ite	eq
 8008bd2:	2301      	moveq	r3, #1
 8008bd4:	2300      	movne	r3, #0
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	461a      	mov	r2, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d105      	bne.n	8008bf2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008be6:	4b07      	ldr	r3, [pc, #28]	; (8008c04 <prvGetNextExpireTime+0x44>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	60fb      	str	r3, [r7, #12]
 8008bf0:	e001      	b.n	8008bf6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3714      	adds	r7, #20
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bc80      	pop	{r7}
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	20000c30 	.word	0x20000c30

08008c08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008c10:	f7ff f974 	bl	8007efc <xTaskGetTickCount>
 8008c14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008c16:	4b0b      	ldr	r3, [pc, #44]	; (8008c44 <prvSampleTimeNow+0x3c>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d205      	bcs.n	8008c2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008c20:	f000 f904 	bl	8008e2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	601a      	str	r2, [r3, #0]
 8008c2a:	e002      	b.n	8008c32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008c32:	4a04      	ldr	r2, [pc, #16]	; (8008c44 <prvSampleTimeNow+0x3c>)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008c38:	68fb      	ldr	r3, [r7, #12]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	20000c40 	.word	0x20000c40

08008c48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b086      	sub	sp, #24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
 8008c54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008c56:	2300      	movs	r3, #0
 8008c58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	68ba      	ldr	r2, [r7, #8]
 8008c5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d812      	bhi.n	8008c94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	1ad2      	subs	r2, r2, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d302      	bcc.n	8008c82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	617b      	str	r3, [r7, #20]
 8008c80:	e01b      	b.n	8008cba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008c82:	4b10      	ldr	r3, [pc, #64]	; (8008cc4 <prvInsertTimerInActiveList+0x7c>)
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	3304      	adds	r3, #4
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	4610      	mov	r0, r2
 8008c8e:	f7fd ffe1 	bl	8006c54 <vListInsert>
 8008c92:	e012      	b.n	8008cba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d206      	bcs.n	8008caa <prvInsertTimerInActiveList+0x62>
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d302      	bcc.n	8008caa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	617b      	str	r3, [r7, #20]
 8008ca8:	e007      	b.n	8008cba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008caa:	4b07      	ldr	r3, [pc, #28]	; (8008cc8 <prvInsertTimerInActiveList+0x80>)
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3304      	adds	r3, #4
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	4610      	mov	r0, r2
 8008cb6:	f7fd ffcd 	bl	8006c54 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008cba:	697b      	ldr	r3, [r7, #20]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3718      	adds	r7, #24
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	20000c34 	.word	0x20000c34
 8008cc8:	20000c30 	.word	0x20000c30

08008ccc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b08e      	sub	sp, #56	; 0x38
 8008cd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008cd2:	e099      	b.n	8008e08 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	da17      	bge.n	8008d0a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008cda:	1d3b      	adds	r3, r7, #4
 8008cdc:	3304      	adds	r3, #4
 8008cde:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d109      	bne.n	8008cfa <prvProcessReceivedCommands+0x2e>
 8008ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cea:	f383 8811 	msr	BASEPRI, r3
 8008cee:	f3bf 8f6f 	isb	sy
 8008cf2:	f3bf 8f4f 	dsb	sy
 8008cf6:	61fb      	str	r3, [r7, #28]
 8008cf8:	e7fe      	b.n	8008cf8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d00:	6850      	ldr	r0, [r2, #4]
 8008d02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d04:	6892      	ldr	r2, [r2, #8]
 8008d06:	4611      	mov	r1, r2
 8008d08:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	db7a      	blt.n	8008e06 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d16:	695b      	ldr	r3, [r3, #20]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d004      	beq.n	8008d26 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1e:	3304      	adds	r3, #4
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7fd ffcf 	bl	8006cc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d26:	463b      	mov	r3, r7
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7ff ff6d 	bl	8008c08 <prvSampleTimeNow>
 8008d2e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2b09      	cmp	r3, #9
 8008d34:	d868      	bhi.n	8008e08 <prvProcessReceivedCommands+0x13c>
 8008d36:	a201      	add	r2, pc, #4	; (adr r2, 8008d3c <prvProcessReceivedCommands+0x70>)
 8008d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3c:	08008d65 	.word	0x08008d65
 8008d40:	08008d65 	.word	0x08008d65
 8008d44:	08008d65 	.word	0x08008d65
 8008d48:	08008e09 	.word	0x08008e09
 8008d4c:	08008dbf 	.word	0x08008dbf
 8008d50:	08008df5 	.word	0x08008df5
 8008d54:	08008d65 	.word	0x08008d65
 8008d58:	08008d65 	.word	0x08008d65
 8008d5c:	08008e09 	.word	0x08008e09
 8008d60:	08008dbf 	.word	0x08008dbf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	18d1      	adds	r1, r2, r3
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d72:	f7ff ff69 	bl	8008c48 <prvInsertTimerInActiveList>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d045      	beq.n	8008e08 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d82:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d86:	69db      	ldr	r3, [r3, #28]
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d13d      	bne.n	8008e08 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d90:	699b      	ldr	r3, [r3, #24]
 8008d92:	441a      	add	r2, r3
 8008d94:	2300      	movs	r3, #0
 8008d96:	9300      	str	r3, [sp, #0]
 8008d98:	2300      	movs	r3, #0
 8008d9a:	2100      	movs	r1, #0
 8008d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d9e:	f7ff fe21 	bl	80089e4 <xTimerGenericCommand>
 8008da2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008da4:	6a3b      	ldr	r3, [r7, #32]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d12e      	bne.n	8008e08 <prvProcessReceivedCommands+0x13c>
 8008daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dae:	f383 8811 	msr	BASEPRI, r3
 8008db2:	f3bf 8f6f 	isb	sy
 8008db6:	f3bf 8f4f 	dsb	sy
 8008dba:	61bb      	str	r3, [r7, #24]
 8008dbc:	e7fe      	b.n	8008dbc <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc6:	699b      	ldr	r3, [r3, #24]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d109      	bne.n	8008de0 <prvProcessReceivedCommands+0x114>
 8008dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd0:	f383 8811 	msr	BASEPRI, r3
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	617b      	str	r3, [r7, #20]
 8008dde:	e7fe      	b.n	8008dde <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de2:	699a      	ldr	r2, [r3, #24]
 8008de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de6:	18d1      	adds	r1, r2, r3
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dee:	f7ff ff2b 	bl	8008c48 <prvInsertTimerInActiveList>
					break;
 8008df2:	e009      	b.n	8008e08 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d104      	bne.n	8008e08 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8008dfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e00:	f000 fb7e 	bl	8009500 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008e04:	e000      	b.n	8008e08 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008e06:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e08:	4b07      	ldr	r3, [pc, #28]	; (8008e28 <prvProcessReceivedCommands+0x15c>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	1d39      	adds	r1, r7, #4
 8008e0e:	2200      	movs	r2, #0
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7fe fa49 	bl	80072a8 <xQueueReceive>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f47f af5b 	bne.w	8008cd4 <prvProcessReceivedCommands+0x8>
	}
}
 8008e1e:	bf00      	nop
 8008e20:	3730      	adds	r7, #48	; 0x30
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	20000c38 	.word	0x20000c38

08008e2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b088      	sub	sp, #32
 8008e30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e32:	e044      	b.n	8008ebe <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e34:	4b2b      	ldr	r3, [pc, #172]	; (8008ee4 <prvSwitchTimerLists+0xb8>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e3e:	4b29      	ldr	r3, [pc, #164]	; (8008ee4 <prvSwitchTimerLists+0xb8>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	3304      	adds	r3, #4
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7fd ff39 	bl	8006cc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	69db      	ldr	r3, [r3, #28]
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d12d      	bne.n	8008ebe <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	4413      	add	r3, r2
 8008e6a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d90e      	bls.n	8008e92 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e80:	4b18      	ldr	r3, [pc, #96]	; (8008ee4 <prvSwitchTimerLists+0xb8>)
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	3304      	adds	r3, #4
 8008e88:	4619      	mov	r1, r3
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	f7fd fee2 	bl	8006c54 <vListInsert>
 8008e90:	e015      	b.n	8008ebe <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e92:	2300      	movs	r3, #0
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	2300      	movs	r3, #0
 8008e98:	693a      	ldr	r2, [r7, #16]
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f7ff fda1 	bl	80089e4 <xTimerGenericCommand>
 8008ea2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d109      	bne.n	8008ebe <prvSwitchTimerLists+0x92>
 8008eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eae:	f383 8811 	msr	BASEPRI, r3
 8008eb2:	f3bf 8f6f 	isb	sy
 8008eb6:	f3bf 8f4f 	dsb	sy
 8008eba:	603b      	str	r3, [r7, #0]
 8008ebc:	e7fe      	b.n	8008ebc <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ebe:	4b09      	ldr	r3, [pc, #36]	; (8008ee4 <prvSwitchTimerLists+0xb8>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1b5      	bne.n	8008e34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008ec8:	4b06      	ldr	r3, [pc, #24]	; (8008ee4 <prvSwitchTimerLists+0xb8>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008ece:	4b06      	ldr	r3, [pc, #24]	; (8008ee8 <prvSwitchTimerLists+0xbc>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a04      	ldr	r2, [pc, #16]	; (8008ee4 <prvSwitchTimerLists+0xb8>)
 8008ed4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008ed6:	4a04      	ldr	r2, [pc, #16]	; (8008ee8 <prvSwitchTimerLists+0xbc>)
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	6013      	str	r3, [r2, #0]
}
 8008edc:	bf00      	nop
 8008ede:	3718      	adds	r7, #24
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	20000c30 	.word	0x20000c30
 8008ee8:	20000c34 	.word	0x20000c34

08008eec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008ef2:	f000 f949 	bl	8009188 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008ef6:	4b15      	ldr	r3, [pc, #84]	; (8008f4c <prvCheckForValidListAndQueue+0x60>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d120      	bne.n	8008f40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008efe:	4814      	ldr	r0, [pc, #80]	; (8008f50 <prvCheckForValidListAndQueue+0x64>)
 8008f00:	f7fd fe5a 	bl	8006bb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008f04:	4813      	ldr	r0, [pc, #76]	; (8008f54 <prvCheckForValidListAndQueue+0x68>)
 8008f06:	f7fd fe57 	bl	8006bb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008f0a:	4b13      	ldr	r3, [pc, #76]	; (8008f58 <prvCheckForValidListAndQueue+0x6c>)
 8008f0c:	4a10      	ldr	r2, [pc, #64]	; (8008f50 <prvCheckForValidListAndQueue+0x64>)
 8008f0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008f10:	4b12      	ldr	r3, [pc, #72]	; (8008f5c <prvCheckForValidListAndQueue+0x70>)
 8008f12:	4a10      	ldr	r2, [pc, #64]	; (8008f54 <prvCheckForValidListAndQueue+0x68>)
 8008f14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008f16:	2300      	movs	r3, #0
 8008f18:	9300      	str	r3, [sp, #0]
 8008f1a:	4b11      	ldr	r3, [pc, #68]	; (8008f60 <prvCheckForValidListAndQueue+0x74>)
 8008f1c:	4a11      	ldr	r2, [pc, #68]	; (8008f64 <prvCheckForValidListAndQueue+0x78>)
 8008f1e:	2110      	movs	r1, #16
 8008f20:	200a      	movs	r0, #10
 8008f22:	f7fd ff61 	bl	8006de8 <xQueueGenericCreateStatic>
 8008f26:	4602      	mov	r2, r0
 8008f28:	4b08      	ldr	r3, [pc, #32]	; (8008f4c <prvCheckForValidListAndQueue+0x60>)
 8008f2a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008f2c:	4b07      	ldr	r3, [pc, #28]	; (8008f4c <prvCheckForValidListAndQueue+0x60>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d005      	beq.n	8008f40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008f34:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <prvCheckForValidListAndQueue+0x60>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	490b      	ldr	r1, [pc, #44]	; (8008f68 <prvCheckForValidListAndQueue+0x7c>)
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7fe fba0 	bl	8007680 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f40:	f000 f950 	bl	80091e4 <vPortExitCritical>
}
 8008f44:	bf00      	nop
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	20000c38 	.word	0x20000c38
 8008f50:	20000c08 	.word	0x20000c08
 8008f54:	20000c1c 	.word	0x20000c1c
 8008f58:	20000c30 	.word	0x20000c30
 8008f5c:	20000c34 	.word	0x20000c34
 8008f60:	20000ce4 	.word	0x20000ce4
 8008f64:	20000c44 	.word	0x20000c44
 8008f68:	08009a48 	.word	0x08009a48

08008f6c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b08a      	sub	sp, #40	; 0x28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
 8008f78:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8008f7a:	f06f 0301 	mvn.w	r3, #1
 8008f7e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008f8c:	4b06      	ldr	r3, [pc, #24]	; (8008fa8 <xTimerPendFunctionCallFromISR+0x3c>)
 8008f8e:	6818      	ldr	r0, [r3, #0]
 8008f90:	f107 0114 	add.w	r1, r7, #20
 8008f94:	2300      	movs	r3, #0
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	f7fe f8f2 	bl	8007180 <xQueueGenericSendFromISR>
 8008f9c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3728      	adds	r7, #40	; 0x28
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	20000c38 	.word	0x20000c38

08008fac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	3b04      	subs	r3, #4
 8008fbc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008fc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	3b04      	subs	r3, #4
 8008fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	f023 0201 	bic.w	r2, r3, #1
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	3b04      	subs	r3, #4
 8008fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008fdc:	4a08      	ldr	r2, [pc, #32]	; (8009000 <pxPortInitialiseStack+0x54>)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	3b14      	subs	r3, #20
 8008fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	3b20      	subs	r3, #32
 8008ff2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3714      	adds	r7, #20
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bc80      	pop	{r7}
 8008ffe:	4770      	bx	lr
 8009000:	08009005 	.word	0x08009005

08009004 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800900a:	2300      	movs	r3, #0
 800900c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800900e:	4b10      	ldr	r3, [pc, #64]	; (8009050 <prvTaskExitError+0x4c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009016:	d009      	beq.n	800902c <prvTaskExitError+0x28>
 8009018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901c:	f383 8811 	msr	BASEPRI, r3
 8009020:	f3bf 8f6f 	isb	sy
 8009024:	f3bf 8f4f 	dsb	sy
 8009028:	60fb      	str	r3, [r7, #12]
 800902a:	e7fe      	b.n	800902a <prvTaskExitError+0x26>
 800902c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009030:	f383 8811 	msr	BASEPRI, r3
 8009034:	f3bf 8f6f 	isb	sy
 8009038:	f3bf 8f4f 	dsb	sy
 800903c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800903e:	bf00      	nop
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d0fc      	beq.n	8009040 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009046:	bf00      	nop
 8009048:	3714      	adds	r7, #20
 800904a:	46bd      	mov	sp, r7
 800904c:	bc80      	pop	{r7}
 800904e:	4770      	bx	lr
 8009050:	2000000c 	.word	0x2000000c
	...

08009060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009060:	4b07      	ldr	r3, [pc, #28]	; (8009080 <pxCurrentTCBConst2>)
 8009062:	6819      	ldr	r1, [r3, #0]
 8009064:	6808      	ldr	r0, [r1, #0]
 8009066:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800906a:	f380 8809 	msr	PSP, r0
 800906e:	f3bf 8f6f 	isb	sy
 8009072:	f04f 0000 	mov.w	r0, #0
 8009076:	f380 8811 	msr	BASEPRI, r0
 800907a:	f04e 0e0d 	orr.w	lr, lr, #13
 800907e:	4770      	bx	lr

08009080 <pxCurrentTCBConst2>:
 8009080:	20000708 	.word	0x20000708
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009084:	bf00      	nop
 8009086:	bf00      	nop

08009088 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009088:	4806      	ldr	r0, [pc, #24]	; (80090a4 <prvPortStartFirstTask+0x1c>)
 800908a:	6800      	ldr	r0, [r0, #0]
 800908c:	6800      	ldr	r0, [r0, #0]
 800908e:	f380 8808 	msr	MSP, r0
 8009092:	b662      	cpsie	i
 8009094:	b661      	cpsie	f
 8009096:	f3bf 8f4f 	dsb	sy
 800909a:	f3bf 8f6f 	isb	sy
 800909e:	df00      	svc	0
 80090a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80090a2:	bf00      	nop
 80090a4:	e000ed08 	.word	0xe000ed08

080090a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80090ae:	4b31      	ldr	r3, [pc, #196]	; (8009174 <xPortStartScheduler+0xcc>)
 80090b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	22ff      	movs	r2, #255	; 0xff
 80090be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80090c8:	78fb      	ldrb	r3, [r7, #3]
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	4b29      	ldr	r3, [pc, #164]	; (8009178 <xPortStartScheduler+0xd0>)
 80090d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80090d6:	4b29      	ldr	r3, [pc, #164]	; (800917c <xPortStartScheduler+0xd4>)
 80090d8:	2207      	movs	r2, #7
 80090da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80090dc:	e009      	b.n	80090f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80090de:	4b27      	ldr	r3, [pc, #156]	; (800917c <xPortStartScheduler+0xd4>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	3b01      	subs	r3, #1
 80090e4:	4a25      	ldr	r2, [pc, #148]	; (800917c <xPortStartScheduler+0xd4>)
 80090e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80090e8:	78fb      	ldrb	r3, [r7, #3]
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	005b      	lsls	r3, r3, #1
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80090f2:	78fb      	ldrb	r3, [r7, #3]
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090fa:	2b80      	cmp	r3, #128	; 0x80
 80090fc:	d0ef      	beq.n	80090de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80090fe:	4b1f      	ldr	r3, [pc, #124]	; (800917c <xPortStartScheduler+0xd4>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f1c3 0307 	rsb	r3, r3, #7
 8009106:	2b04      	cmp	r3, #4
 8009108:	d009      	beq.n	800911e <xPortStartScheduler+0x76>
 800910a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910e:	f383 8811 	msr	BASEPRI, r3
 8009112:	f3bf 8f6f 	isb	sy
 8009116:	f3bf 8f4f 	dsb	sy
 800911a:	60bb      	str	r3, [r7, #8]
 800911c:	e7fe      	b.n	800911c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800911e:	4b17      	ldr	r3, [pc, #92]	; (800917c <xPortStartScheduler+0xd4>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	021b      	lsls	r3, r3, #8
 8009124:	4a15      	ldr	r2, [pc, #84]	; (800917c <xPortStartScheduler+0xd4>)
 8009126:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009128:	4b14      	ldr	r3, [pc, #80]	; (800917c <xPortStartScheduler+0xd4>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009130:	4a12      	ldr	r2, [pc, #72]	; (800917c <xPortStartScheduler+0xd4>)
 8009132:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	b2da      	uxtb	r2, r3
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800913c:	4b10      	ldr	r3, [pc, #64]	; (8009180 <xPortStartScheduler+0xd8>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a0f      	ldr	r2, [pc, #60]	; (8009180 <xPortStartScheduler+0xd8>)
 8009142:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009146:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009148:	4b0d      	ldr	r3, [pc, #52]	; (8009180 <xPortStartScheduler+0xd8>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a0c      	ldr	r2, [pc, #48]	; (8009180 <xPortStartScheduler+0xd8>)
 800914e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009152:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009154:	f000 f8b0 	bl	80092b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009158:	4b0a      	ldr	r3, [pc, #40]	; (8009184 <xPortStartScheduler+0xdc>)
 800915a:	2200      	movs	r2, #0
 800915c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800915e:	f7ff ff93 	bl	8009088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009162:	f7fe ff9f 	bl	80080a4 <vTaskSwitchContext>
	prvTaskExitError();
 8009166:	f7ff ff4d 	bl	8009004 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	e000e400 	.word	0xe000e400
 8009178:	20000d34 	.word	0x20000d34
 800917c:	20000d38 	.word	0x20000d38
 8009180:	e000ed20 	.word	0xe000ed20
 8009184:	2000000c 	.word	0x2000000c

08009188 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009192:	f383 8811 	msr	BASEPRI, r3
 8009196:	f3bf 8f6f 	isb	sy
 800919a:	f3bf 8f4f 	dsb	sy
 800919e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80091a0:	4b0e      	ldr	r3, [pc, #56]	; (80091dc <vPortEnterCritical+0x54>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	3301      	adds	r3, #1
 80091a6:	4a0d      	ldr	r2, [pc, #52]	; (80091dc <vPortEnterCritical+0x54>)
 80091a8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80091aa:	4b0c      	ldr	r3, [pc, #48]	; (80091dc <vPortEnterCritical+0x54>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d10e      	bne.n	80091d0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80091b2:	4b0b      	ldr	r3, [pc, #44]	; (80091e0 <vPortEnterCritical+0x58>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d009      	beq.n	80091d0 <vPortEnterCritical+0x48>
 80091bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c0:	f383 8811 	msr	BASEPRI, r3
 80091c4:	f3bf 8f6f 	isb	sy
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	603b      	str	r3, [r7, #0]
 80091ce:	e7fe      	b.n	80091ce <vPortEnterCritical+0x46>
	}
}
 80091d0:	bf00      	nop
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bc80      	pop	{r7}
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	2000000c 	.word	0x2000000c
 80091e0:	e000ed04 	.word	0xe000ed04

080091e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80091ea:	4b10      	ldr	r3, [pc, #64]	; (800922c <vPortExitCritical+0x48>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d109      	bne.n	8009206 <vPortExitCritical+0x22>
 80091f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f6:	f383 8811 	msr	BASEPRI, r3
 80091fa:	f3bf 8f6f 	isb	sy
 80091fe:	f3bf 8f4f 	dsb	sy
 8009202:	607b      	str	r3, [r7, #4]
 8009204:	e7fe      	b.n	8009204 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009206:	4b09      	ldr	r3, [pc, #36]	; (800922c <vPortExitCritical+0x48>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	3b01      	subs	r3, #1
 800920c:	4a07      	ldr	r2, [pc, #28]	; (800922c <vPortExitCritical+0x48>)
 800920e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009210:	4b06      	ldr	r3, [pc, #24]	; (800922c <vPortExitCritical+0x48>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d104      	bne.n	8009222 <vPortExitCritical+0x3e>
 8009218:	2300      	movs	r3, #0
 800921a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009222:	bf00      	nop
 8009224:	370c      	adds	r7, #12
 8009226:	46bd      	mov	sp, r7
 8009228:	bc80      	pop	{r7}
 800922a:	4770      	bx	lr
 800922c:	2000000c 	.word	0x2000000c

08009230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009230:	f3ef 8009 	mrs	r0, PSP
 8009234:	f3bf 8f6f 	isb	sy
 8009238:	4b0d      	ldr	r3, [pc, #52]	; (8009270 <pxCurrentTCBConst>)
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009240:	6010      	str	r0, [r2, #0]
 8009242:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009246:	f04f 0050 	mov.w	r0, #80	; 0x50
 800924a:	f380 8811 	msr	BASEPRI, r0
 800924e:	f7fe ff29 	bl	80080a4 <vTaskSwitchContext>
 8009252:	f04f 0000 	mov.w	r0, #0
 8009256:	f380 8811 	msr	BASEPRI, r0
 800925a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800925e:	6819      	ldr	r1, [r3, #0]
 8009260:	6808      	ldr	r0, [r1, #0]
 8009262:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009266:	f380 8809 	msr	PSP, r0
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	4770      	bx	lr

08009270 <pxCurrentTCBConst>:
 8009270:	20000708 	.word	0x20000708
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009274:	bf00      	nop
 8009276:	bf00      	nop

08009278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
	__asm volatile
 800927e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009290:	f7fe fe42 	bl	8007f18 <xTaskIncrementTick>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d003      	beq.n	80092a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800929a:	4b06      	ldr	r3, [pc, #24]	; (80092b4 <SysTick_Handler+0x3c>)
 800929c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092a0:	601a      	str	r2, [r3, #0]
 80092a2:	2300      	movs	r3, #0
 80092a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80092ac:	bf00      	nop
 80092ae:	3708      	adds	r7, #8
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	e000ed04 	.word	0xe000ed04

080092b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80092b8:	b480      	push	{r7}
 80092ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80092bc:	4b0a      	ldr	r3, [pc, #40]	; (80092e8 <vPortSetupTimerInterrupt+0x30>)
 80092be:	2200      	movs	r2, #0
 80092c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80092c2:	4b0a      	ldr	r3, [pc, #40]	; (80092ec <vPortSetupTimerInterrupt+0x34>)
 80092c4:	2200      	movs	r2, #0
 80092c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80092c8:	4b09      	ldr	r3, [pc, #36]	; (80092f0 <vPortSetupTimerInterrupt+0x38>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a09      	ldr	r2, [pc, #36]	; (80092f4 <vPortSetupTimerInterrupt+0x3c>)
 80092ce:	fba2 2303 	umull	r2, r3, r2, r3
 80092d2:	099b      	lsrs	r3, r3, #6
 80092d4:	4a08      	ldr	r2, [pc, #32]	; (80092f8 <vPortSetupTimerInterrupt+0x40>)
 80092d6:	3b01      	subs	r3, #1
 80092d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80092da:	4b03      	ldr	r3, [pc, #12]	; (80092e8 <vPortSetupTimerInterrupt+0x30>)
 80092dc:	2207      	movs	r2, #7
 80092de:	601a      	str	r2, [r3, #0]
}
 80092e0:	bf00      	nop
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bc80      	pop	{r7}
 80092e6:	4770      	bx	lr
 80092e8:	e000e010 	.word	0xe000e010
 80092ec:	e000e018 	.word	0xe000e018
 80092f0:	20000000 	.word	0x20000000
 80092f4:	10624dd3 	.word	0x10624dd3
 80092f8:	e000e014 	.word	0xe000e014

080092fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009302:	f3ef 8305 	mrs	r3, IPSR
 8009306:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2b0f      	cmp	r3, #15
 800930c:	d913      	bls.n	8009336 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800930e:	4a15      	ldr	r2, [pc, #84]	; (8009364 <vPortValidateInterruptPriority+0x68>)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	4413      	add	r3, r2
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009318:	4b13      	ldr	r3, [pc, #76]	; (8009368 <vPortValidateInterruptPriority+0x6c>)
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	7afa      	ldrb	r2, [r7, #11]
 800931e:	429a      	cmp	r2, r3
 8009320:	d209      	bcs.n	8009336 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	607b      	str	r3, [r7, #4]
 8009334:	e7fe      	b.n	8009334 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009336:	4b0d      	ldr	r3, [pc, #52]	; (800936c <vPortValidateInterruptPriority+0x70>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800933e:	4b0c      	ldr	r3, [pc, #48]	; (8009370 <vPortValidateInterruptPriority+0x74>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	429a      	cmp	r2, r3
 8009344:	d909      	bls.n	800935a <vPortValidateInterruptPriority+0x5e>
 8009346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934a:	f383 8811 	msr	BASEPRI, r3
 800934e:	f3bf 8f6f 	isb	sy
 8009352:	f3bf 8f4f 	dsb	sy
 8009356:	603b      	str	r3, [r7, #0]
 8009358:	e7fe      	b.n	8009358 <vPortValidateInterruptPriority+0x5c>
	}
 800935a:	bf00      	nop
 800935c:	3714      	adds	r7, #20
 800935e:	46bd      	mov	sp, r7
 8009360:	bc80      	pop	{r7}
 8009362:	4770      	bx	lr
 8009364:	e000e3f0 	.word	0xe000e3f0
 8009368:	20000d34 	.word	0x20000d34
 800936c:	e000ed0c 	.word	0xe000ed0c
 8009370:	20000d38 	.word	0x20000d38

08009374 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b08a      	sub	sp, #40	; 0x28
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800937c:	2300      	movs	r3, #0
 800937e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009380:	f7fe fd12 	bl	8007da8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009384:	4b59      	ldr	r3, [pc, #356]	; (80094ec <pvPortMalloc+0x178>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d101      	bne.n	8009390 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800938c:	f000 f910 	bl	80095b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009390:	4b57      	ldr	r3, [pc, #348]	; (80094f0 <pvPortMalloc+0x17c>)
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4013      	ands	r3, r2
 8009398:	2b00      	cmp	r3, #0
 800939a:	f040 808c 	bne.w	80094b6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d01c      	beq.n	80093de <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80093a4:	2208      	movs	r2, #8
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4413      	add	r3, r2
 80093aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f003 0307 	and.w	r3, r3, #7
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d013      	beq.n	80093de <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f023 0307 	bic.w	r3, r3, #7
 80093bc:	3308      	adds	r3, #8
 80093be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f003 0307 	and.w	r3, r3, #7
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d009      	beq.n	80093de <pvPortMalloc+0x6a>
 80093ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ce:	f383 8811 	msr	BASEPRI, r3
 80093d2:	f3bf 8f6f 	isb	sy
 80093d6:	f3bf 8f4f 	dsb	sy
 80093da:	617b      	str	r3, [r7, #20]
 80093dc:	e7fe      	b.n	80093dc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d068      	beq.n	80094b6 <pvPortMalloc+0x142>
 80093e4:	4b43      	ldr	r3, [pc, #268]	; (80094f4 <pvPortMalloc+0x180>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d863      	bhi.n	80094b6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80093ee:	4b42      	ldr	r3, [pc, #264]	; (80094f8 <pvPortMalloc+0x184>)
 80093f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80093f2:	4b41      	ldr	r3, [pc, #260]	; (80094f8 <pvPortMalloc+0x184>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093f8:	e004      	b.n	8009404 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80093fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80093fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	429a      	cmp	r2, r3
 800940c:	d903      	bls.n	8009416 <pvPortMalloc+0xa2>
 800940e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d1f1      	bne.n	80093fa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009416:	4b35      	ldr	r3, [pc, #212]	; (80094ec <pvPortMalloc+0x178>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800941c:	429a      	cmp	r2, r3
 800941e:	d04a      	beq.n	80094b6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009420:	6a3b      	ldr	r3, [r7, #32]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2208      	movs	r2, #8
 8009426:	4413      	add	r3, r2
 8009428:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800942a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	6a3b      	ldr	r3, [r7, #32]
 8009430:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009434:	685a      	ldr	r2, [r3, #4]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	1ad2      	subs	r2, r2, r3
 800943a:	2308      	movs	r3, #8
 800943c:	005b      	lsls	r3, r3, #1
 800943e:	429a      	cmp	r2, r3
 8009440:	d91e      	bls.n	8009480 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4413      	add	r3, r2
 8009448:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	f003 0307 	and.w	r3, r3, #7
 8009450:	2b00      	cmp	r3, #0
 8009452:	d009      	beq.n	8009468 <pvPortMalloc+0xf4>
 8009454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009458:	f383 8811 	msr	BASEPRI, r3
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	613b      	str	r3, [r7, #16]
 8009466:	e7fe      	b.n	8009466 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946a:	685a      	ldr	r2, [r3, #4]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	1ad2      	subs	r2, r2, r3
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800947a:	69b8      	ldr	r0, [r7, #24]
 800947c:	f000 f8fa 	bl	8009674 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009480:	4b1c      	ldr	r3, [pc, #112]	; (80094f4 <pvPortMalloc+0x180>)
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	1ad3      	subs	r3, r2, r3
 800948a:	4a1a      	ldr	r2, [pc, #104]	; (80094f4 <pvPortMalloc+0x180>)
 800948c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800948e:	4b19      	ldr	r3, [pc, #100]	; (80094f4 <pvPortMalloc+0x180>)
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	4b1a      	ldr	r3, [pc, #104]	; (80094fc <pvPortMalloc+0x188>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	429a      	cmp	r2, r3
 8009498:	d203      	bcs.n	80094a2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800949a:	4b16      	ldr	r3, [pc, #88]	; (80094f4 <pvPortMalloc+0x180>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a17      	ldr	r2, [pc, #92]	; (80094fc <pvPortMalloc+0x188>)
 80094a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80094a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a4:	685a      	ldr	r2, [r3, #4]
 80094a6:	4b12      	ldr	r3, [pc, #72]	; (80094f0 <pvPortMalloc+0x17c>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	431a      	orrs	r2, r3
 80094ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80094b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b2:	2200      	movs	r2, #0
 80094b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80094b6:	f7fe fc85 	bl	8007dc4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d101      	bne.n	80094c4 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80094c0:	f7f7 fc00 	bl	8000cc4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	f003 0307 	and.w	r3, r3, #7
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d009      	beq.n	80094e2 <pvPortMalloc+0x16e>
 80094ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d2:	f383 8811 	msr	BASEPRI, r3
 80094d6:	f3bf 8f6f 	isb	sy
 80094da:	f3bf 8f4f 	dsb	sy
 80094de:	60fb      	str	r3, [r7, #12]
 80094e0:	e7fe      	b.n	80094e0 <pvPortMalloc+0x16c>
	return pvReturn;
 80094e2:	69fb      	ldr	r3, [r7, #28]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3728      	adds	r7, #40	; 0x28
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	20003544 	.word	0x20003544
 80094f0:	20003550 	.word	0x20003550
 80094f4:	20003548 	.word	0x20003548
 80094f8:	2000353c 	.word	0x2000353c
 80094fc:	2000354c 	.word	0x2000354c

08009500 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b086      	sub	sp, #24
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d046      	beq.n	80095a0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009512:	2308      	movs	r3, #8
 8009514:	425b      	negs	r3, r3
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	4413      	add	r3, r2
 800951a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	685a      	ldr	r2, [r3, #4]
 8009524:	4b20      	ldr	r3, [pc, #128]	; (80095a8 <vPortFree+0xa8>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4013      	ands	r3, r2
 800952a:	2b00      	cmp	r3, #0
 800952c:	d109      	bne.n	8009542 <vPortFree+0x42>
 800952e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009532:	f383 8811 	msr	BASEPRI, r3
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	f3bf 8f4f 	dsb	sy
 800953e:	60fb      	str	r3, [r7, #12]
 8009540:	e7fe      	b.n	8009540 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d009      	beq.n	800955e <vPortFree+0x5e>
 800954a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954e:	f383 8811 	msr	BASEPRI, r3
 8009552:	f3bf 8f6f 	isb	sy
 8009556:	f3bf 8f4f 	dsb	sy
 800955a:	60bb      	str	r3, [r7, #8]
 800955c:	e7fe      	b.n	800955c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	685a      	ldr	r2, [r3, #4]
 8009562:	4b11      	ldr	r3, [pc, #68]	; (80095a8 <vPortFree+0xa8>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4013      	ands	r3, r2
 8009568:	2b00      	cmp	r3, #0
 800956a:	d019      	beq.n	80095a0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d115      	bne.n	80095a0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	685a      	ldr	r2, [r3, #4]
 8009578:	4b0b      	ldr	r3, [pc, #44]	; (80095a8 <vPortFree+0xa8>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	43db      	mvns	r3, r3
 800957e:	401a      	ands	r2, r3
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009584:	f7fe fc10 	bl	8007da8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	685a      	ldr	r2, [r3, #4]
 800958c:	4b07      	ldr	r3, [pc, #28]	; (80095ac <vPortFree+0xac>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4413      	add	r3, r2
 8009592:	4a06      	ldr	r2, [pc, #24]	; (80095ac <vPortFree+0xac>)
 8009594:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009596:	6938      	ldr	r0, [r7, #16]
 8009598:	f000 f86c 	bl	8009674 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800959c:	f7fe fc12 	bl	8007dc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80095a0:	bf00      	nop
 80095a2:	3718      	adds	r7, #24
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	20003550 	.word	0x20003550
 80095ac:	20003548 	.word	0x20003548

080095b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80095b0:	b480      	push	{r7}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80095b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80095ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80095bc:	4b27      	ldr	r3, [pc, #156]	; (800965c <prvHeapInit+0xac>)
 80095be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f003 0307 	and.w	r3, r3, #7
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00c      	beq.n	80095e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	3307      	adds	r3, #7
 80095ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f023 0307 	bic.w	r3, r3, #7
 80095d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80095d8:	68ba      	ldr	r2, [r7, #8]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	1ad3      	subs	r3, r2, r3
 80095de:	4a1f      	ldr	r2, [pc, #124]	; (800965c <prvHeapInit+0xac>)
 80095e0:	4413      	add	r3, r2
 80095e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80095e8:	4a1d      	ldr	r2, [pc, #116]	; (8009660 <prvHeapInit+0xb0>)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80095ee:	4b1c      	ldr	r3, [pc, #112]	; (8009660 <prvHeapInit+0xb0>)
 80095f0:	2200      	movs	r2, #0
 80095f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	68ba      	ldr	r2, [r7, #8]
 80095f8:	4413      	add	r3, r2
 80095fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80095fc:	2208      	movs	r2, #8
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	1a9b      	subs	r3, r3, r2
 8009602:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f023 0307 	bic.w	r3, r3, #7
 800960a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	4a15      	ldr	r2, [pc, #84]	; (8009664 <prvHeapInit+0xb4>)
 8009610:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009612:	4b14      	ldr	r3, [pc, #80]	; (8009664 <prvHeapInit+0xb4>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2200      	movs	r2, #0
 8009618:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800961a:	4b12      	ldr	r3, [pc, #72]	; (8009664 <prvHeapInit+0xb4>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2200      	movs	r2, #0
 8009620:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	1ad2      	subs	r2, r2, r3
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009630:	4b0c      	ldr	r3, [pc, #48]	; (8009664 <prvHeapInit+0xb4>)
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	4a0a      	ldr	r2, [pc, #40]	; (8009668 <prvHeapInit+0xb8>)
 800963e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	4a09      	ldr	r2, [pc, #36]	; (800966c <prvHeapInit+0xbc>)
 8009646:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009648:	4b09      	ldr	r3, [pc, #36]	; (8009670 <prvHeapInit+0xc0>)
 800964a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800964e:	601a      	str	r2, [r3, #0]
}
 8009650:	bf00      	nop
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	bc80      	pop	{r7}
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	20000d3c 	.word	0x20000d3c
 8009660:	2000353c 	.word	0x2000353c
 8009664:	20003544 	.word	0x20003544
 8009668:	2000354c 	.word	0x2000354c
 800966c:	20003548 	.word	0x20003548
 8009670:	20003550 	.word	0x20003550

08009674 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009674:	b480      	push	{r7}
 8009676:	b085      	sub	sp, #20
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800967c:	4b27      	ldr	r3, [pc, #156]	; (800971c <prvInsertBlockIntoFreeList+0xa8>)
 800967e:	60fb      	str	r3, [r7, #12]
 8009680:	e002      	b.n	8009688 <prvInsertBlockIntoFreeList+0x14>
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	60fb      	str	r3, [r7, #12]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	429a      	cmp	r2, r3
 8009690:	d8f7      	bhi.n	8009682 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	68ba      	ldr	r2, [r7, #8]
 800969c:	4413      	add	r3, r2
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d108      	bne.n	80096b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	685a      	ldr	r2, [r3, #4]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	441a      	add	r2, r3
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	441a      	add	r2, r3
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d118      	bne.n	80096fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	4b14      	ldr	r3, [pc, #80]	; (8009720 <prvInsertBlockIntoFreeList+0xac>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d00d      	beq.n	80096f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	685a      	ldr	r2, [r3, #4]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	441a      	add	r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	601a      	str	r2, [r3, #0]
 80096f0:	e008      	b.n	8009704 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80096f2:	4b0b      	ldr	r3, [pc, #44]	; (8009720 <prvInsertBlockIntoFreeList+0xac>)
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	601a      	str	r2, [r3, #0]
 80096fa:	e003      	b.n	8009704 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	429a      	cmp	r2, r3
 800970a:	d002      	beq.n	8009712 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009712:	bf00      	nop
 8009714:	3714      	adds	r7, #20
 8009716:	46bd      	mov	sp, r7
 8009718:	bc80      	pop	{r7}
 800971a:	4770      	bx	lr
 800971c:	2000353c 	.word	0x2000353c
 8009720:	20003544 	.word	0x20003544

08009724 <__libc_init_array>:
 8009724:	b570      	push	{r4, r5, r6, lr}
 8009726:	2500      	movs	r5, #0
 8009728:	4e0c      	ldr	r6, [pc, #48]	; (800975c <__libc_init_array+0x38>)
 800972a:	4c0d      	ldr	r4, [pc, #52]	; (8009760 <__libc_init_array+0x3c>)
 800972c:	1ba4      	subs	r4, r4, r6
 800972e:	10a4      	asrs	r4, r4, #2
 8009730:	42a5      	cmp	r5, r4
 8009732:	d109      	bne.n	8009748 <__libc_init_array+0x24>
 8009734:	f000 f82e 	bl	8009794 <_init>
 8009738:	2500      	movs	r5, #0
 800973a:	4e0a      	ldr	r6, [pc, #40]	; (8009764 <__libc_init_array+0x40>)
 800973c:	4c0a      	ldr	r4, [pc, #40]	; (8009768 <__libc_init_array+0x44>)
 800973e:	1ba4      	subs	r4, r4, r6
 8009740:	10a4      	asrs	r4, r4, #2
 8009742:	42a5      	cmp	r5, r4
 8009744:	d105      	bne.n	8009752 <__libc_init_array+0x2e>
 8009746:	bd70      	pop	{r4, r5, r6, pc}
 8009748:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800974c:	4798      	blx	r3
 800974e:	3501      	adds	r5, #1
 8009750:	e7ee      	b.n	8009730 <__libc_init_array+0xc>
 8009752:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009756:	4798      	blx	r3
 8009758:	3501      	adds	r5, #1
 800975a:	e7f2      	b.n	8009742 <__libc_init_array+0x1e>
 800975c:	08009b3c 	.word	0x08009b3c
 8009760:	08009b3c 	.word	0x08009b3c
 8009764:	08009b3c 	.word	0x08009b3c
 8009768:	08009b40 	.word	0x08009b40

0800976c <memcpy>:
 800976c:	b510      	push	{r4, lr}
 800976e:	1e43      	subs	r3, r0, #1
 8009770:	440a      	add	r2, r1
 8009772:	4291      	cmp	r1, r2
 8009774:	d100      	bne.n	8009778 <memcpy+0xc>
 8009776:	bd10      	pop	{r4, pc}
 8009778:	f811 4b01 	ldrb.w	r4, [r1], #1
 800977c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009780:	e7f7      	b.n	8009772 <memcpy+0x6>

08009782 <memset>:
 8009782:	4603      	mov	r3, r0
 8009784:	4402      	add	r2, r0
 8009786:	4293      	cmp	r3, r2
 8009788:	d100      	bne.n	800978c <memset+0xa>
 800978a:	4770      	bx	lr
 800978c:	f803 1b01 	strb.w	r1, [r3], #1
 8009790:	e7f9      	b.n	8009786 <memset+0x4>
	...

08009794 <_init>:
 8009794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009796:	bf00      	nop
 8009798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800979a:	bc08      	pop	{r3}
 800979c:	469e      	mov	lr, r3
 800979e:	4770      	bx	lr

080097a0 <_fini>:
 80097a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a2:	bf00      	nop
 80097a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097a6:	bc08      	pop	{r3}
 80097a8:	469e      	mov	lr, r3
 80097aa:	4770      	bx	lr
