
Automotive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f6c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  0800a0ac  0800a0ac  0001a0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a45c  0800a45c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800a45c  0800a45c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a45c  0800a45c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a45c  0800a45c  0001a45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a460  0800a460  0001a460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800a464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003808  20000010  0800a474  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003818  0800a474  00023818  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029757  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000051bf  00000000  00000000  00049790  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019e0  00000000  00000000  0004e950  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001760  00000000  00000000  00050330  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001da0d  00000000  00000000  00051a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001da76  00000000  00000000  0006f49d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aa785  00000000  00000000  0008cf13  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00137698  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006724  00000000  00000000  00137714  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a094 	.word	0x0800a094

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	0800a094 	.word	0x0800a094

08000180 <h_bridge_init>:
//htim3 RIGHT ENGINE

// TODO: check algorithm
//https://github.com/japaric/motor-driver/blob/master/src/lib.rs

bool h_bridge_init(void) {
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000184:	2108      	movs	r1, #8
 8000186:	4808      	ldr	r0, [pc, #32]	; (80001a8 <h_bridge_init+0x28>)
 8000188:	f005 f8c6 	bl	8005318 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800018c:	2100      	movs	r1, #0
 800018e:	4807      	ldr	r0, [pc, #28]	; (80001ac <h_bridge_init+0x2c>)
 8000190:	f005 f8c2 	bl	8005318 <HAL_TIM_PWM_Start>

	h_bridge_set_left_duty(0);
 8000194:	2000      	movs	r0, #0
 8000196:	f000 f80b 	bl	80001b0 <h_bridge_set_left_duty>
	h_bridge_set_right_duty(0);
 800019a:	2000      	movs	r0, #0
 800019c:	f000 f82e 	bl	80001fc <h_bridge_set_right_duty>

	return true;
 80001a0:	2301      	movs	r3, #1
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20003658 	.word	0x20003658
 80001ac:	200036d0 	.word	0x200036d0

080001b0 <h_bridge_set_left_duty>:

void h_bridge_set_left_duty(int percent) {
 80001b0:	b480      	push	{r7}
 80001b2:	b085      	sub	sp, #20
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
	if (percent > 100)
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	2b64      	cmp	r3, #100	; 0x64
 80001bc:	dd01      	ble.n	80001c2 <h_bridge_set_left_duty+0x12>
		percent = 100;
 80001be:	2364      	movs	r3, #100	; 0x64
 80001c0:	607b      	str	r3, [r7, #4]

	if (percent < 1)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	dc01      	bgt.n	80001cc <h_bridge_set_left_duty+0x1c>
		percent = 0;
 80001c8:	2300      	movs	r3, #0
 80001ca:	607b      	str	r3, [r7, #4]

	uint32_t value = percent * htim2.Init.Period / 100;
 80001cc:	4b09      	ldr	r3, [pc, #36]	; (80001f4 <h_bridge_set_left_duty+0x44>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	687a      	ldr	r2, [r7, #4]
 80001d2:	fb02 f303 	mul.w	r3, r2, r3
 80001d6:	4a08      	ldr	r2, [pc, #32]	; (80001f8 <h_bridge_set_left_duty+0x48>)
 80001d8:	fba2 2303 	umull	r2, r3, r2, r3
 80001dc:	095b      	lsrs	r3, r3, #5
 80001de:	60fb      	str	r3, [r7, #12]
//	htim2.Instance->CCR1 = value;
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, value);
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <h_bridge_set_left_duty+0x44>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	68fa      	ldr	r2, [r7, #12]
 80001e6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80001e8:	bf00      	nop
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	200036d0 	.word	0x200036d0
 80001f8:	51eb851f 	.word	0x51eb851f

080001fc <h_bridge_set_right_duty>:

void h_bridge_set_right_duty(int percent) {
 80001fc:	b480      	push	{r7}
 80001fe:	b085      	sub	sp, #20
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
	if (percent > 100)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2b64      	cmp	r3, #100	; 0x64
 8000208:	dd01      	ble.n	800020e <h_bridge_set_right_duty+0x12>
		percent = 100;
 800020a:	2364      	movs	r3, #100	; 0x64
 800020c:	607b      	str	r3, [r7, #4]

	if (percent < 1)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	2b00      	cmp	r3, #0
 8000212:	dc01      	bgt.n	8000218 <h_bridge_set_right_duty+0x1c>
		percent = 0;
 8000214:	2300      	movs	r3, #0
 8000216:	607b      	str	r3, [r7, #4]

	uint32_t value = percent * htim3.Init.Period / 100;
 8000218:	4b09      	ldr	r3, [pc, #36]	; (8000240 <h_bridge_set_right_duty+0x44>)
 800021a:	68db      	ldr	r3, [r3, #12]
 800021c:	687a      	ldr	r2, [r7, #4]
 800021e:	fb02 f303 	mul.w	r3, r2, r3
 8000222:	4a08      	ldr	r2, [pc, #32]	; (8000244 <h_bridge_set_right_duty+0x48>)
 8000224:	fba2 2303 	umull	r2, r3, r2, r3
 8000228:	095b      	lsrs	r3, r3, #5
 800022a:	60fb      	str	r3, [r7, #12]
//	htim3.Instance->CCR3 = value;
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, value);
 800022c:	4b04      	ldr	r3, [pc, #16]	; (8000240 <h_bridge_set_right_duty+0x44>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	68fa      	ldr	r2, [r7, #12]
 8000232:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000234:	bf00      	nop
 8000236:	3714      	adds	r7, #20
 8000238:	46bd      	mov	sp, r7
 800023a:	bc80      	pop	{r7}
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	20003658 	.word	0x20003658
 8000244:	51eb851f 	.word	0x51eb851f

08000248 <h_bridge_cw_left>:

void h_bridge_cw_left(void) {
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 800024c:	2201      	movs	r2, #1
 800024e:	2102      	movs	r1, #2
 8000250:	4804      	ldr	r0, [pc, #16]	; (8000264 <h_bridge_cw_left+0x1c>)
 8000252:	f002 fef3 	bl	800303c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 8000256:	2200      	movs	r2, #0
 8000258:	2104      	movs	r1, #4
 800025a:	4802      	ldr	r0, [pc, #8]	; (8000264 <h_bridge_cw_left+0x1c>)
 800025c:	f002 feee 	bl	800303c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8000260:	bf00      	nop
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40020800 	.word	0x40020800

08000268 <h_bridge_cw_right>:

void h_bridge_cw_right(void) {
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 800026c:	2201      	movs	r2, #1
 800026e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000272:	4805      	ldr	r0, [pc, #20]	; (8000288 <h_bridge_cw_right+0x20>)
 8000274:	f002 fee2 	bl	800303c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 8000278:	2200      	movs	r2, #0
 800027a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800027e:	4803      	ldr	r0, [pc, #12]	; (800028c <h_bridge_cw_right+0x24>)
 8000280:	f002 fedc 	bl	800303c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}
 8000288:	40020000 	.word	0x40020000
 800028c:	40020800 	.word	0x40020800

08000290 <h_bridge_ccw_left>:

void h_bridge_ccw_left(void) {
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 8000294:	2200      	movs	r2, #0
 8000296:	2102      	movs	r1, #2
 8000298:	4804      	ldr	r0, [pc, #16]	; (80002ac <h_bridge_ccw_left+0x1c>)
 800029a:	f002 fecf 	bl	800303c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 800029e:	2201      	movs	r2, #1
 80002a0:	2104      	movs	r1, #4
 80002a2:	4802      	ldr	r0, [pc, #8]	; (80002ac <h_bridge_ccw_left+0x1c>)
 80002a4:	f002 feca 	bl	800303c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	40020800 	.word	0x40020800

080002b0 <h_bridge_ccw_right>:

void h_bridge_ccw_right(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 80002b4:	2200      	movs	r2, #0
 80002b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ba:	4805      	ldr	r0, [pc, #20]	; (80002d0 <h_bridge_ccw_right+0x20>)
 80002bc:	f002 febe 	bl	800303c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 80002c0:	2201      	movs	r2, #1
 80002c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002c6:	4803      	ldr	r0, [pc, #12]	; (80002d4 <h_bridge_ccw_right+0x24>)
 80002c8:	f002 feb8 	bl	800303c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40020000 	.word	0x40020000
 80002d4:	40020800 	.word	0x40020800

080002d8 <h_bridge_coast>:

/// Lets the motor coast
void h_bridge_coast(void) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 80002dc:	2200      	movs	r2, #0
 80002de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e2:	480a      	ldr	r0, [pc, #40]	; (800030c <h_bridge_coast+0x34>)
 80002e4:	f002 feaa 	bl	800303c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 80002e8:	2200      	movs	r2, #0
 80002ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ee:	4808      	ldr	r0, [pc, #32]	; (8000310 <h_bridge_coast+0x38>)
 80002f0:	f002 fea4 	bl	800303c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 80002f4:	2200      	movs	r2, #0
 80002f6:	2102      	movs	r1, #2
 80002f8:	4805      	ldr	r0, [pc, #20]	; (8000310 <h_bridge_coast+0x38>)
 80002fa:	f002 fe9f 	bl	800303c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 80002fe:	2200      	movs	r2, #0
 8000300:	2104      	movs	r1, #4
 8000302:	4803      	ldr	r0, [pc, #12]	; (8000310 <h_bridge_coast+0x38>)
 8000304:	f002 fe9a 	bl	800303c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}
 800030c:	40020000 	.word	0x40020000
 8000310:	40020800 	.word	0x40020800

08000314 <QMC5883L_Read_Reg>:
	uint16_t buf = ((buff[1] << 8) | buff[0]);	// U2
	buf = (~buf) + 1; // decimal
	return (int) buf / 100; // our value
}

uint8_t QMC5883L_Read_Reg(uint8_t reg) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b088      	sub	sp, #32
 8000318:	af04      	add	r7, sp, #16
 800031a:	4603      	mov	r3, r0
 800031c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[1];
	HAL_I2C_Mem_Read(QMC5883L_I2C_PORT, QMC5883L_ADDRESS, reg, 1, Buffer, 1,
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	b29a      	uxth	r2, r3
 8000322:	230a      	movs	r3, #10
 8000324:	9302      	str	r3, [sp, #8]
 8000326:	2301      	movs	r3, #1
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	f107 030c 	add.w	r3, r7, #12
 800032e:	9300      	str	r3, [sp, #0]
 8000330:	2301      	movs	r3, #1
 8000332:	213c      	movs	r1, #60	; 0x3c
 8000334:	4803      	ldr	r0, [pc, #12]	; (8000344 <QMC5883L_Read_Reg+0x30>)
 8000336:	f003 f973 	bl	8003620 <HAL_I2C_Mem_Read>
			10);
	return Buffer[0];
 800033a:	7b3b      	ldrb	r3, [r7, #12]
}
 800033c:	4618      	mov	r0, r3
 800033e:	3710      	adds	r7, #16
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	200035c8 	.word	0x200035c8

08000348 <QMC5883L_Write_Reg>:

void QMC5883L_Write_Reg(uint8_t reg, uint8_t data) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af02      	add	r7, sp, #8
 800034e:	4603      	mov	r3, r0
 8000350:	460a      	mov	r2, r1
 8000352:	71fb      	strb	r3, [r7, #7]
 8000354:	4613      	mov	r3, r2
 8000356:	71bb      	strb	r3, [r7, #6]
	uint8_t Buffer[2] = { reg, data };
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	733b      	strb	r3, [r7, #12]
 800035c:	79bb      	ldrb	r3, [r7, #6]
 800035e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(QMC5883L_I2C_PORT, QMC5883L_ADDRESS, Buffer, 2, 10);
 8000360:	f107 020c 	add.w	r2, r7, #12
 8000364:	230a      	movs	r3, #10
 8000366:	9300      	str	r3, [sp, #0]
 8000368:	2302      	movs	r3, #2
 800036a:	213c      	movs	r1, #60	; 0x3c
 800036c:	4803      	ldr	r0, [pc, #12]	; (800037c <QMC5883L_Write_Reg+0x34>)
 800036e:	f003 f859 	bl	8003424 <HAL_I2C_Master_Transmit>
}
 8000372:	bf00      	nop
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	200035c8 	.word	0x200035c8

08000380 <QMC5883L_Read_Data>:

void QMC5883L_Read_Data(int16_t *MagX, int16_t *MagY, int16_t *MagZ) // (-32768 / +32768)
{
 8000380:	b590      	push	{r4, r7, lr}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
 8000386:	60f8      	str	r0, [r7, #12]
 8000388:	60b9      	str	r1, [r7, #8]
 800038a:	607a      	str	r2, [r7, #4]
	*MagX = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_X_LSB)
 800038c:	2004      	movs	r0, #4
 800038e:	f7ff ffc1 	bl	8000314 <QMC5883L_Read_Reg>
 8000392:	4603      	mov	r3, r0
 8000394:	b21c      	sxth	r4, r3
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_X_MSB)) << 8));
 8000396:	2003      	movs	r0, #3
 8000398:	f7ff ffbc 	bl	8000314 <QMC5883L_Read_Reg>
 800039c:	4603      	mov	r3, r0
 800039e:	021b      	lsls	r3, r3, #8
 80003a0:	b21b      	sxth	r3, r3
 80003a2:	4323      	orrs	r3, r4
 80003a4:	b21a      	sxth	r2, r3
	*MagX = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_X_LSB)
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	801a      	strh	r2, [r3, #0]
	*MagY = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Y_LSB)
 80003aa:	2008      	movs	r0, #8
 80003ac:	f7ff ffb2 	bl	8000314 <QMC5883L_Read_Reg>
 80003b0:	4603      	mov	r3, r0
 80003b2:	b21c      	sxth	r4, r3
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Y_MSB)) << 8));
 80003b4:	2007      	movs	r0, #7
 80003b6:	f7ff ffad 	bl	8000314 <QMC5883L_Read_Reg>
 80003ba:	4603      	mov	r3, r0
 80003bc:	021b      	lsls	r3, r3, #8
 80003be:	b21b      	sxth	r3, r3
 80003c0:	4323      	orrs	r3, r4
 80003c2:	b21a      	sxth	r2, r3
	*MagY = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Y_LSB)
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	801a      	strh	r2, [r3, #0]
	*MagZ = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Z_LSB)
 80003c8:	2006      	movs	r0, #6
 80003ca:	f7ff ffa3 	bl	8000314 <QMC5883L_Read_Reg>
 80003ce:	4603      	mov	r3, r0
 80003d0:	b21c      	sxth	r4, r3
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Z_MSB)) << 8));
 80003d2:	2005      	movs	r0, #5
 80003d4:	f7ff ff9e 	bl	8000314 <QMC5883L_Read_Reg>
 80003d8:	4603      	mov	r3, r0
 80003da:	021b      	lsls	r3, r3, #8
 80003dc:	b21b      	sxth	r3, r3
 80003de:	4323      	orrs	r3, r4
 80003e0:	b21a      	sxth	r2, r3
	*MagZ = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Z_LSB)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	801a      	strh	r2, [r3, #0]
}
 80003e6:	bf00      	nop
 80003e8:	3714      	adds	r7, #20
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd90      	pop	{r4, r7, pc}

080003ee <QMC5883L_Initialize>:
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_TEMP_READ_MSB)) << 8))
			/ 100;
}

void QMC5883L_Initialize(_qmc5883l_MODE MODE, _qmc5883l_ODR ODR,
		_qmc5883l_RNG RNG, _qmc5883l_OSR OSR) {
 80003ee:	b590      	push	{r4, r7, lr}
 80003f0:	b083      	sub	sp, #12
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	4604      	mov	r4, r0
 80003f6:	4608      	mov	r0, r1
 80003f8:	4611      	mov	r1, r2
 80003fa:	461a      	mov	r2, r3
 80003fc:	4623      	mov	r3, r4
 80003fe:	71fb      	strb	r3, [r7, #7]
 8000400:	4603      	mov	r3, r0
 8000402:	71bb      	strb	r3, [r7, #6]
 8000404:	460b      	mov	r3, r1
 8000406:	717b      	strb	r3, [r7, #5]
 8000408:	4613      	mov	r3, r2
 800040a:	713b      	strb	r3, [r7, #4]
	QMC5883L_Write_Reg(QMC5883L_CONFIG_3, 0x01);
 800040c:	2101      	movs	r1, #1
 800040e:	200b      	movs	r0, #11
 8000410:	f7ff ff9a 	bl	8000348 <QMC5883L_Write_Reg>
	QMC5883L_Write_Reg(QMC5883L_CONFIG_1, MODE | ODR | RNG | OSR);
 8000414:	79fa      	ldrb	r2, [r7, #7]
 8000416:	79bb      	ldrb	r3, [r7, #6]
 8000418:	4313      	orrs	r3, r2
 800041a:	b2da      	uxtb	r2, r3
 800041c:	797b      	ldrb	r3, [r7, #5]
 800041e:	4313      	orrs	r3, r2
 8000420:	b2da      	uxtb	r2, r3
 8000422:	793b      	ldrb	r3, [r7, #4]
 8000424:	4313      	orrs	r3, r2
 8000426:	b2db      	uxtb	r3, r3
 8000428:	4619      	mov	r1, r3
 800042a:	2009      	movs	r0, #9
 800042c:	f7ff ff8c 	bl	8000348 <QMC5883L_Write_Reg>
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	bd90      	pop	{r4, r7, pc}

08000438 <QMC5883L_InterruptConfig>:

void QMC5883L_Reset() {
	QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x81);
}

void QMC5883L_InterruptConfig(_qmc5883l_INT INT) {
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
	if (INT == INTERRUPT_ENABLE) {
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	2b01      	cmp	r3, #1
 8000446:	d104      	bne.n	8000452 <QMC5883L_InterruptConfig+0x1a>
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x00);
 8000448:	2100      	movs	r1, #0
 800044a:	200a      	movs	r0, #10
 800044c:	f7ff ff7c 	bl	8000348 <QMC5883L_Write_Reg>
	} else {
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x01);
	}
}
 8000450:	e003      	b.n	800045a <QMC5883L_InterruptConfig+0x22>
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x01);
 8000452:	2101      	movs	r1, #1
 8000454:	200a      	movs	r0, #10
 8000456:	f7ff ff77 	bl	8000348 <QMC5883L_Write_Reg>
}
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}

08000462 <device_init>:

#include "device_init.h"
#include "stdint.h"


void device_init(void) {
 8000462:	b480      	push	{r7}
 8000464:	b083      	sub	sp, #12
 8000466:	af00      	add	r7, sp, #0

	uint16_t successCnt = 0;
 8000468:	2300      	movs	r3, #0
 800046a:	80fb      	strh	r3, [r7, #6]
	uint16_t modsToInit = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < /*mod_N*/mod_0; i++) {
 8000470:	2300      	movs	r3, #0
 8000472:	807b      	strh	r3, [r7, #2]
 8000474:	bf00      	nop
		}

		modsToInit++;
	}

	if (modsToInit != successCnt) {
 8000476:	88ba      	ldrh	r2, [r7, #4]
 8000478:	88fb      	ldrh	r3, [r7, #6]
 800047a:	429a      	cmp	r2, r3
 800047c:	d000      	beq.n	8000480 <device_init+0x1e>
		// some kind of error
		while (1)
 800047e:	e7fe      	b.n	800047e <device_init+0x1c>
			; //TODO: call some error handler
	}

}
 8000480:	bf00      	nop
 8000482:	370c      	adds	r7, #12
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
	...

0800048c <rt_init>:
TaskHandle_t rt_tasks[rt_task_N];
QueueHandle_t rt_queues[rt_queue_N];
EventGroupHandle_t rt_evgroups[rt_evgroup_N];
TimerHandle_t rt_timers[rt_timer_N];

void rt_init(void) {
 800048c:	b5b0      	push	{r4, r5, r7, lr}
 800048e:	b08a      	sub	sp, #40	; 0x28
 8000490:	af02      	add	r7, sp, #8

	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 8000492:	2300      	movs	r3, #0
 8000494:	77fb      	strb	r3, [r7, #31]
 8000496:	e02c      	b.n	80004f2 <rt_init+0x66>
		rt_task_def_t const *def = rt_task_def + task;
 8000498:	7ffa      	ldrb	r2, [r7, #31]
 800049a:	4613      	mov	r3, r2
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	4413      	add	r3, r2
 80004a0:	009b      	lsls	r3, r3, #2
 80004a2:	461a      	mov	r2, r3
 80004a4:	4b47      	ldr	r3, [pc, #284]	; (80005c4 <rt_init+0x138>)
 80004a6:	4413      	add	r3, r2
 80004a8:	607b      	str	r3, [r7, #4]
		TaskHandle_t *handle = rt_tasks + task;
 80004aa:	7ffb      	ldrb	r3, [r7, #31]
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	4a46      	ldr	r2, [pc, #280]	; (80005c8 <rt_init+0x13c>)
 80004b0:	4413      	add	r3, r2
 80004b2:	603b      	str	r3, [r7, #0]
		if (def->active) {
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	7c9b      	ldrb	r3, [r3, #18]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d014      	beq.n	80004e6 <rt_init+0x5a>
			if (xTaskCreate(def->pvTaskCode, def->pcName, def->usStackDepth,
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	6818      	ldr	r0, [r3, #0]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	6859      	ldr	r1, [r3, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	8a1c      	ldrh	r4, [r3, #16]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	689d      	ldr	r5, [r3, #8]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	683a      	ldr	r2, [r7, #0]
 80004d2:	9201      	str	r2, [sp, #4]
 80004d4:	9300      	str	r3, [sp, #0]
 80004d6:	462b      	mov	r3, r5
 80004d8:	4622      	mov	r2, r4
 80004da:	f007 fdfa 	bl	80080d2 <xTaskCreate>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d003      	beq.n	80004ec <rt_init+0x60>
					def->pvParameters, def->uxPriority, handle) != pdPASS) {
//				error :-(
				while (1)
 80004e4:	e7fe      	b.n	80004e4 <rt_init+0x58>
					;
			}
		} else {
			*handle = 0;
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 80004ec:	7ffb      	ldrb	r3, [r7, #31]
 80004ee:	3301      	adds	r3, #1
 80004f0:	77fb      	strb	r3, [r7, #31]
 80004f2:	7ffb      	ldrb	r3, [r7, #31]
 80004f4:	2b04      	cmp	r3, #4
 80004f6:	d9cf      	bls.n	8000498 <rt_init+0xc>
		}
	}

	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 80004f8:	2300      	movs	r3, #0
 80004fa:	77bb      	strb	r3, [r7, #30]
 80004fc:	e01c      	b.n	8000538 <rt_init+0xac>
		rt_queue_def_t const *def = rt_queue_def + queue;
 80004fe:	7fbb      	ldrb	r3, [r7, #30]
 8000500:	011b      	lsls	r3, r3, #4
 8000502:	4a32      	ldr	r2, [pc, #200]	; (80005cc <rt_init+0x140>)
 8000504:	4413      	add	r3, r2
 8000506:	60fb      	str	r3, [r7, #12]
		QueueHandle_t *handle = rt_queues + queue;
 8000508:	7fbb      	ldrb	r3, [r7, #30]
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	4a30      	ldr	r2, [pc, #192]	; (80005d0 <rt_init+0x144>)
 800050e:	4413      	add	r3, r2
 8000510:	60bb      	str	r3, [r7, #8]

		if ((*handle = xQueueCreate(def->uxQueueLength, def->uxItemSize))
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	6818      	ldr	r0, [r3, #0]
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	2200      	movs	r2, #0
 800051c:	4619      	mov	r1, r3
 800051e:	f007 f949 	bl	80077b4 <xQueueGenericCreate>
 8000522:	4602      	mov	r2, r0
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d100      	bne.n	8000532 <rt_init+0xa6>
				== 0) {
			while (1)
 8000530:	e7fe      	b.n	8000530 <rt_init+0xa4>
	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 8000532:	7fbb      	ldrb	r3, [r7, #30]
 8000534:	3301      	adds	r3, #1
 8000536:	77bb      	strb	r3, [r7, #30]
 8000538:	7fbb      	ldrb	r3, [r7, #30]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d9df      	bls.n	80004fe <rt_init+0x72>
				;
		}
	}

	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 800053e:	2300      	movs	r3, #0
 8000540:	777b      	strb	r3, [r7, #29]
 8000542:	e020      	b.n	8000586 <rt_init+0xfa>
		rt_timer_def_t const *def = rt_timer_def + timer;
 8000544:	7f7b      	ldrb	r3, [r7, #29]
 8000546:	011b      	lsls	r3, r3, #4
 8000548:	4a22      	ldr	r2, [pc, #136]	; (80005d4 <rt_init+0x148>)
 800054a:	4413      	add	r3, r2
 800054c:	617b      	str	r3, [r7, #20]
		TimerHandle_t *handle = rt_timers + timer;
 800054e:	7f7b      	ldrb	r3, [r7, #29]
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <rt_init+0x14c>)
 8000554:	4413      	add	r3, r2
 8000556:	613b      	str	r3, [r7, #16]

		if ((*handle = xTimerCreate(def->pcTimerName, def->xTimerPeriodInTicks,
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	6818      	ldr	r0, [r3, #0]
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	6859      	ldr	r1, [r3, #4]
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	689a      	ldr	r2, [r3, #8]
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2300      	movs	r3, #0
 800056c:	f008 fe6e 	bl	800924c <xTimerCreate>
 8000570:	4602      	mov	r2, r0
 8000572:	693b      	ldr	r3, [r7, #16]
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	693b      	ldr	r3, [r7, #16]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d100      	bne.n	8000580 <rt_init+0xf4>
				def->uxAutoReload, NULL, def->pxCallbackFunction)) == 0)
			while (1)
 800057e:	e7fe      	b.n	800057e <rt_init+0xf2>
	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 8000580:	7f7b      	ldrb	r3, [r7, #29]
 8000582:	3301      	adds	r3, #1
 8000584:	777b      	strb	r3, [r7, #29]
 8000586:	7f7b      	ldrb	r3, [r7, #29]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d9db      	bls.n	8000544 <rt_init+0xb8>
				;
	}

	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 800058c:	2300      	movs	r3, #0
 800058e:	773b      	strb	r3, [r7, #28]
 8000590:	e011      	b.n	80005b6 <rt_init+0x12a>
			evgroup++) {
		EventGroupHandle_t *handle = rt_evgroups + evgroup;
 8000592:	7f3b      	ldrb	r3, [r7, #28]
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	4a11      	ldr	r2, [pc, #68]	; (80005dc <rt_init+0x150>)
 8000598:	4413      	add	r3, r2
 800059a:	61bb      	str	r3, [r7, #24]

		if ((*handle = xEventGroupCreate()) == 0) {
 800059c:	f006 fdd0 	bl	8007140 <xEventGroupCreate>
 80005a0:	4602      	mov	r2, r0
 80005a2:	69bb      	ldr	r3, [r7, #24]
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	69bb      	ldr	r3, [r7, #24]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d100      	bne.n	80005b0 <rt_init+0x124>
			while (1)
 80005ae:	e7fe      	b.n	80005ae <rt_init+0x122>
			evgroup++) {
 80005b0:	7f3b      	ldrb	r3, [r7, #28]
 80005b2:	3301      	adds	r3, #1
 80005b4:	773b      	strb	r3, [r7, #28]
	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 80005b6:	7f3b      	ldrb	r3, [r7, #28]
 80005b8:	2b02      	cmp	r3, #2
 80005ba:	d9ea      	bls.n	8000592 <rt_init+0x106>
				;
		}
	}

}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bdb0      	pop	{r4, r5, r7, pc}
 80005c4:	0800a370 	.word	0x0800a370
 80005c8:	2000353c 	.word	0x2000353c
 80005cc:	0800a3d4 	.word	0x0800a3d4
 80005d0:	20003564 	.word	0x20003564
 80005d4:	0800a3f4 	.word	0x0800a3f4
 80005d8:	20003550 	.word	0x20003550
 80005dc:	20003558 	.word	0x20003558

080005e0 <rt_evbitwait_any>:

uint32_t rt_evbitwait_any(rt_evgroup_t Ev) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	4a09      	ldr	r2, [pc, #36]	; (8000614 <rt_evbitwait_any+0x34>)
 80005ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f2:	60fb      	str	r3, [r7, #12]

	return xEventGroupWaitBits(Evh, 0x00FFFFFFu, pdTRUE, pdFALSE, portMAX_DELAY);
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2300      	movs	r3, #0
 80005fc:	2201      	movs	r2, #1
 80005fe:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000602:	68f8      	ldr	r0, [r7, #12]
 8000604:	f006 fdb6 	bl	8007174 <xEventGroupWaitBits>
 8000608:	4603      	mov	r3, r0
}
 800060a:	4618      	mov	r0, r3
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20003558 	.word	0x20003558

08000618 <rt_evbit_set>:

void rt_evbit_set(rt_evgroup_t Ev, uint32_t bit) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	6039      	str	r1, [r7, #0]
 8000622:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 8000624:	2201      	movs	r2, #1
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	fa02 f303 	lsl.w	r3, r2, r3
 800062c:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	4a05      	ldr	r2, [pc, #20]	; (8000648 <rt_evbit_set+0x30>)
 8000632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000636:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBits(Evh, msk);
 8000638:	68f9      	ldr	r1, [r7, #12]
 800063a:	68b8      	ldr	r0, [r7, #8]
 800063c:	f006 fe64 	bl	8007308 <xEventGroupSetBits>
}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20003558 	.word	0x20003558

0800064c <rt_evbit_set_from_ISR>:

void rt_evbit_set_from_ISR(rt_evgroup_t Ev, uint32_t bit) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	6039      	str	r1, [r7, #0]
 8000656:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 8000658:	2201      	movs	r2, #1
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	fa02 f303 	lsl.w	r3, r2, r3
 8000660:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	4a06      	ldr	r2, [pc, #24]	; (8000680 <rt_evbit_set_from_ISR+0x34>)
 8000666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800066a:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBitsFromISR(Evh, msk, pdFALSE);
 800066c:	2200      	movs	r2, #0
 800066e:	68f9      	ldr	r1, [r7, #12]
 8000670:	68b8      	ldr	r0, [r7, #8]
 8000672:	f006 ff01 	bl	8007478 <xEventGroupSetBitsFromISR>
	portYIELD_FROM_ISR(pdFALSE);
}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20003558 	.word	0x20003558

08000684 <rt_enqueue_ISR>:
	}

	return false;
}

bool rt_enqueue_ISR(rt_queue_t Q, void const *bf) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	6039      	str	r1, [r7, #0]
 800068e:	71fb      	strb	r3, [r7, #7]
//  assert(Q < rt_queue_N);

	QueueHandle_t Qh = rt_queues[Q];
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	4a0b      	ldr	r2, [pc, #44]	; (80006c0 <rt_enqueue_ISR+0x3c>)
 8000694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000698:	60fb      	str	r3, [r7, #12]
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
	if (xQueueSendToBackFromISR(Qh, bf, &xHigherPriorityTaskWoken) == pdPASS) {
 800069e:	f107 0208 	add.w	r2, r7, #8
 80006a2:	2300      	movs	r3, #0
 80006a4:	6839      	ldr	r1, [r7, #0]
 80006a6:	68f8      	ldr	r0, [r7, #12]
 80006a8:	f007 f9de 	bl	8007a68 <xQueueGenericSendFromISR>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d101      	bne.n	80006b6 <rt_enqueue_ISR+0x32>
		return true;
 80006b2:	2301      	movs	r3, #1
 80006b4:	e000      	b.n	80006b8 <rt_enqueue_ISR+0x34>
	}

	return false;
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20003564 	.word	0x20003564

080006c4 <rt_dequeue>:

bool rt_dequeue(rt_queue_t Q, void *bf) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	6039      	str	r1, [r7, #0]
 80006ce:	71fb      	strb	r3, [r7, #7]
//  assert(Q < rt_queue_N);

	QueueHandle_t Qh = rt_queues[Q];
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	4a0d      	ldr	r2, [pc, #52]	; (8000708 <rt_dequeue+0x44>)
 80006d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006d8:	60fb      	str	r3, [r7, #12]
	TickType_t to = rt_queue_def[Q].timeout_deq;
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	4a0b      	ldr	r2, [pc, #44]	; (800070c <rt_dequeue+0x48>)
 80006de:	011b      	lsls	r3, r3, #4
 80006e0:	4413      	add	r3, r2
 80006e2:	330c      	adds	r3, #12
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	60bb      	str	r3, [r7, #8]

	if (xQueueReceive(Qh, bf, to) == pdPASS) {
 80006e8:	68ba      	ldr	r2, [r7, #8]
 80006ea:	6839      	ldr	r1, [r7, #0]
 80006ec:	68f8      	ldr	r0, [r7, #12]
 80006ee:	f007 fa4f 	bl	8007b90 <xQueueReceive>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d101      	bne.n	80006fc <rt_dequeue+0x38>
		return true;
 80006f8:	2301      	movs	r3, #1
 80006fa:	e000      	b.n	80006fe <rt_dequeue+0x3a>
	}

	return false;
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20003564 	.word	0x20003564
 800070c:	0800a3d4 	.word	0x0800a3d4

08000710 <rt_timer_start_ISR>:

bool rt_timer_start(rt_timer_t t, uint32_t timeout) {
	return xTimerStart(rt_timers[t], timeout);
}

bool rt_timer_start_ISR(rt_timer_t t, BaseType_t *pxHigherPriorityTaskWoken) {
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b085      	sub	sp, #20
 8000714:	af02      	add	r7, sp, #8
 8000716:	4603      	mov	r3, r0
 8000718:	6039      	str	r1, [r7, #0]
 800071a:	71fb      	strb	r3, [r7, #7]
	return xTimerStartFromISR(rt_timers[t], pxHigherPriorityTaskWoken);
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	4a0b      	ldr	r2, [pc, #44]	; (800074c <rt_timer_start_ISR+0x3c>)
 8000720:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000724:	f008 f86c 	bl	8008800 <xTaskGetTickCountFromISR>
 8000728:	4602      	mov	r2, r0
 800072a:	2300      	movs	r3, #0
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	2106      	movs	r1, #6
 8000732:	4620      	mov	r0, r4
 8000734:	f008 fddc 	bl	80092f0 <xTimerGenericCommand>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	bf14      	ite	ne
 800073e:	2301      	movne	r3, #1
 8000740:	2300      	moveq	r3, #0
 8000742:	b2db      	uxtb	r3, r3
}
 8000744:	4618      	mov	r0, r3
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	bd90      	pop	{r4, r7, pc}
 800074c:	20003550 	.word	0x20003550

08000750 <timer_BLE>:
// working all the time, checking if something is received or sending data to android device

/* ************************************************************************** */
// callback
/* ************************************************************************** */
void timer_BLE(TimerHandle_t xTimer) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, (uint8_t*) ble_pData, BLE_MAX_SIZE);
 8000758:	2203      	movs	r2, #3
 800075a:	4904      	ldr	r1, [pc, #16]	; (800076c <timer_BLE+0x1c>)
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <timer_BLE+0x20>)
 800075e:	f006 f81d 	bl	800679c <HAL_UART_Receive_DMA>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	2000356c 	.word	0x2000356c
 8000770:	20003750 	.word	0x20003750

08000774 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
//	__NOP();
//	char ble_pData[BLE_MAX_SIZE];
//	memset(ble_pData, 1, BLE_MAX_SIZE);
//	ble_receive_data(ble_pData);
	xQueueBleData ble_queue = { 0 };
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]

	ble_queue.info = ble_received;
 8000780:	2300      	movs	r3, #0
 8000782:	733b      	strb	r3, [r7, #12]

	memcpy(&ble_queue.command, ble_pData, 1);
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <HAL_UART_RxCpltCallback+0x38>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	737b      	strb	r3, [r7, #13]
	memcpy(&ble_queue.valueReg1, ble_pData + 1, 1);
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <HAL_UART_RxCpltCallback+0x3c>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	73bb      	strb	r3, [r7, #14]
	memcpy(&ble_queue.valueReg2, ble_pData + 2, 1);
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <HAL_UART_RxCpltCallback+0x40>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	73fb      	strb	r3, [r7, #15]

	rt_enqueue_ISR(rt_queue_ble, &ble_queue);
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	4619      	mov	r1, r3
 800079c:	2000      	movs	r0, #0
 800079e:	f7ff ff71 	bl	8000684 <rt_enqueue_ISR>

}
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	2000356c 	.word	0x2000356c
 80007b0:	2000356d 	.word	0x2000356d
 80007b4:	2000356e 	.word	0x2000356e

080007b8 <task_ble>:
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart);

/* ************************************************************************** */
// task
/* ************************************************************************** */
void task_ble(void *pvParameters) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	(void*) pvParameters;

//	int i = 0;
//	const TickType_t xDelay1000ms = pdMS_TO_TICKS(5000);
	bool status;
	xQueueBleData receivedBleData = { 0 };
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]
	char ble_pData[BLE_MAX_SIZE] = { 0 };
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2100      	movs	r1, #0
 80007ca:	460a      	mov	r2, r1
 80007cc:	801a      	strh	r2, [r3, #0]
 80007ce:	460a      	mov	r2, r1
 80007d0:	709a      	strb	r2, [r3, #2]
	uint8_t right_engine;
	for (;;) {

//		vTaskDelay(xDelay1000ms);

		status = rt_dequeue(rt_queue_ble, &receivedBleData);
 80007d2:	f107 0310 	add.w	r3, r7, #16
 80007d6:	4619      	mov	r1, r3
 80007d8:	2000      	movs	r0, #0
 80007da:	f7ff ff73 	bl	80006c4 <rt_dequeue>
 80007de:	4603      	mov	r3, r0
 80007e0:	77fb      	strb	r3, [r7, #31]

		if (status) {
 80007e2:	7ffb      	ldrb	r3, [r7, #31]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d0f4      	beq.n	80007d2 <task_ble+0x1a>
			if (receivedBleData.info == ble_received) {
 80007e8:	7c3b      	ldrb	r3, [r7, #16]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d146      	bne.n	800087c <task_ble+0xc4>
//				memcpy(ble_pData, receivedBleData.value, BLE_MAX_SIZE);

				switch (receivedBleData.command) {
 80007ee:	7c7b      	ldrb	r3, [r7, #17]
 80007f0:	2b02      	cmp	r3, #2
 80007f2:	d008      	beq.n	8000806 <task_ble+0x4e>
 80007f4:	2b03      	cmp	r3, #3
 80007f6:	d00b      	beq.n	8000810 <task_ble+0x58>
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d138      	bne.n	800086e <task_ble+0xb6>
				case BLE_RECEIVED_DO_NOTHING:
					rt_evbit_set(rt_evgroup_state_machine,
 80007fc:	2100      	movs	r1, #0
 80007fe:	2001      	movs	r0, #1
 8000800:	f7ff ff0a 	bl	8000618 <rt_evbit_set>
							evgroup_state_m_do_nothing);
					break;
 8000804:	e03b      	b.n	800087e <task_ble+0xc6>
				case BLE_RECEIVED_AUTO_MANUAL:
					rt_evbit_set(rt_evgroup_state_machine,
 8000806:	2101      	movs	r1, #1
 8000808:	2001      	movs	r0, #1
 800080a:	f7ff ff05 	bl	8000618 <rt_evbit_set>
							evgroup_state_m_auto_manual);
					break;
 800080e:	e036      	b.n	800087e <task_ble+0xc6>
				case BLE_RECEIVED_MOVEMENT:
//					rt_evbit_set(rt_evgroup_state_machine,
//							evgroup_state_m_movement);

					left_engine = receivedBleData.valueReg1;
 8000810:	7cbb      	ldrb	r3, [r7, #18]
 8000812:	77bb      	strb	r3, [r7, #30]
					right_engine = receivedBleData.valueReg2;
 8000814:	7cfb      	ldrb	r3, [r7, #19]
 8000816:	777b      	strb	r3, [r7, #29]
					// 0	1	1	0	0	1	0	0
					// ^
					// ccw
					// --- |        PERCENTAGE       |

					int left = u2_to_decimal(left_engine);
 8000818:	7fbb      	ldrb	r3, [r7, #30]
 800081a:	4618      	mov	r0, r3
 800081c:	f000 f932 	bl	8000a84 <u2_to_decimal>
 8000820:	61b8      	str	r0, [r7, #24]
					int right = u2_to_decimal(right_engine);
 8000822:	7f7b      	ldrb	r3, [r7, #29]
 8000824:	4618      	mov	r0, r3
 8000826:	f000 f92d 	bl	8000a84 <u2_to_decimal>
 800082a:	6178      	str	r0, [r7, #20]

					// left engine
					if (left < 0) {
 800082c:	69bb      	ldr	r3, [r7, #24]
 800082e:	2b00      	cmp	r3, #0
 8000830:	da07      	bge.n	8000842 <task_ble+0x8a>
						h_bridge_ccw_left();
 8000832:	f7ff fd2d 	bl	8000290 <h_bridge_ccw_left>
						h_bridge_set_left_duty(-left);
 8000836:	69bb      	ldr	r3, [r7, #24]
 8000838:	425b      	negs	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff fcb8 	bl	80001b0 <h_bridge_set_left_duty>
 8000840:	e004      	b.n	800084c <task_ble+0x94>
					} else {
						h_bridge_cw_left();
 8000842:	f7ff fd01 	bl	8000248 <h_bridge_cw_left>
						h_bridge_set_left_duty(left);
 8000846:	69b8      	ldr	r0, [r7, #24]
 8000848:	f7ff fcb2 	bl	80001b0 <h_bridge_set_left_duty>
					}

					// right engine
					if (right < 0) {
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	2b00      	cmp	r3, #0
 8000850:	da07      	bge.n	8000862 <task_ble+0xaa>
						h_bridge_ccw_right();
 8000852:	f7ff fd2d 	bl	80002b0 <h_bridge_ccw_right>
						h_bridge_set_right_duty(-right);
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	425b      	negs	r3, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fcce 	bl	80001fc <h_bridge_set_right_duty>
					} else {
						h_bridge_cw_right();
						h_bridge_set_right_duty(right);
					}

					break;
 8000860:	e00d      	b.n	800087e <task_ble+0xc6>
						h_bridge_cw_right();
 8000862:	f7ff fd01 	bl	8000268 <h_bridge_cw_right>
						h_bridge_set_right_duty(right);
 8000866:	6978      	ldr	r0, [r7, #20]
 8000868:	f7ff fcc8 	bl	80001fc <h_bridge_set_right_duty>
					break;
 800086c:	e007      	b.n	800087e <task_ble+0xc6>
				default:
					// unknow -> free
					rt_dequeue(rt_queue_ble, &receivedBleData);
 800086e:	f107 0310 	add.w	r3, r7, #16
 8000872:	4619      	mov	r1, r3
 8000874:	2000      	movs	r0, #0
 8000876:	f7ff ff25 	bl	80006c4 <rt_dequeue>
					break;
 800087a:	e000      	b.n	800087e <task_ble+0xc6>
				}

			}
 800087c:	bf00      	nop

			if (receivedBleData.info == ble_transmit) {
 800087e:	7c3b      	ldrb	r3, [r7, #16]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d1a6      	bne.n	80007d2 <task_ble+0x1a>

//				rt_dequeue(rt_queue_ble, &receivedBleData);
				memcpy(ble_pData, &receivedBleData.command, 1);
 8000884:	7c7b      	ldrb	r3, [r7, #17]
 8000886:	733b      	strb	r3, [r7, #12]
				memcpy(ble_pData + 1, &receivedBleData.valueReg1, 1);
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	3301      	adds	r3, #1
 800088e:	7cba      	ldrb	r2, [r7, #18]
 8000890:	701a      	strb	r2, [r3, #0]
				memcpy(ble_pData + 2, &receivedBleData.valueReg2, 1);
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	3302      	adds	r3, #2
 8000898:	7cfa      	ldrb	r2, [r7, #19]
 800089a:	701a      	strb	r2, [r3, #0]

//				ble_send_data(ble_pData, BLE_MAX_SIZE);
				HAL_UART_Transmit_DMA(&huart3, (uint8_t*) ble_pData,
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2203      	movs	r2, #3
 80008a2:	4619      	mov	r1, r3
 80008a4:	4801      	ldr	r0, [pc, #4]	; (80008ac <task_ble+0xf4>)
 80008a6:	f005 ff0d 	bl	80066c4 <HAL_UART_Transmit_DMA>
		status = rt_dequeue(rt_queue_ble, &receivedBleData);
 80008aa:	e792      	b.n	80007d2 <task_ble+0x1a>
 80008ac:	20003750 	.word	0x20003750

080008b0 <task_eyes>:
 *      Author: Arkadiusz
 */

//#include "task_eyes.h"

void task_eyes(void *pvParameters) {
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 80008b8:	e7fe      	b.n	80008b8 <task_eyes+0x8>

080008ba <task_memory>:
 *      Author: Arkadiusz
 */

//#include "task_memory.h"

void task_memory(void *pvParameters) {
 80008ba:	b480      	push	{r7}
 80008bc:	b083      	sub	sp, #12
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 80008c2:	e7fe      	b.n	80008c2 <task_memory+0x8>

080008c4 <HAL_GPIO_EXTI_Callback>:
static uint32_t ultrasound_time = 0U;
bool ultrasound_was = false;
bool ultrasound_done = false;
uint8_t pData[BLE_MAX_SIZE];
// interrupt pin callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	80fb      	strh	r3, [r7, #6]
//	IRQ_ULTRASOUND_ECHO_Pin
	if (GPIO_Pin & IRQ_ULTRASOUND_ECHO_Pin) {
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	f003 0302 	and.w	r3, r3, #2
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d01e      	beq.n	8000916 <HAL_GPIO_EXTI_Callback+0x52>

		if (ultrasound_was == false) {
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <HAL_GPIO_EXTI_Callback+0x78>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	f083 0301 	eor.w	r3, r3, #1
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d008      	beq.n	80008f8 <HAL_GPIO_EXTI_Callback+0x34>
			ultrasound_time = HAL_GetTick();
 80008e6:	f001 f857 	bl	8001998 <HAL_GetTick>
 80008ea:	4602      	mov	r2, r0
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <HAL_GPIO_EXTI_Callback+0x7c>)
 80008ee:	601a      	str	r2, [r3, #0]
			ultrasound_was = true;
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <HAL_GPIO_EXTI_Callback+0x78>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	701a      	strb	r2, [r3, #0]
 80008f6:	e00e      	b.n	8000916 <HAL_GPIO_EXTI_Callback+0x52>
		} else {
			ultrasound_time = HAL_GetTick() - ultrasound_time;
 80008f8:	f001 f84e 	bl	8001998 <HAL_GetTick>
 80008fc:	4602      	mov	r2, r0
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000906:	6013      	str	r3, [r2, #0]
			ultrasound_was = false;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <HAL_GPIO_EXTI_Callback+0x78>)
 800090a:	2200      	movs	r2, #0
 800090c:	701a      	strb	r2, [r3, #0]
			rt_evbit_set_from_ISR(rt_evgroup_sensors,
 800090e:	2100      	movs	r1, #0
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff fe9b 	bl	800064c <rt_evbit_set_from_ISR>
//			ultrasound_done = true;
		}
	}

//	BLE INTERRUPT -> SOMETHING IS RECEIVED
	if (GPIO_Pin & IRQ_BLE_Pin) {
 8000916:	88fb      	ldrh	r3, [r7, #6]
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	2b00      	cmp	r3, #0
 800091e:	d009      	beq.n	8000934 <HAL_GPIO_EXTI_Callback+0x70>
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]

//		ble_receive_data(pData);
		pxHigherPriorityTaskWoken = pdTRUE;
 8000924:	2301      	movs	r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
		rt_timer_start_ISR(rt_timer_BLE, &pxHigherPriorityTaskWoken);
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	4619      	mov	r1, r3
 800092e:	2000      	movs	r0, #0
 8000930:	f7ff feee 	bl	8000710 <rt_timer_start_ISR>
//			xTimerStartFromISR(rt_timers[T], pxHigherPriorityTaskWoken);

	}
}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000030 	.word	0x20000030
 8000940:	2000002c 	.word	0x2000002c

08000944 <task_sensors>:

void task_sensors(void *pvParameters) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]

//	uint32_t evgroup = 0;

// TODO: delete this line!
//	magnetometer_init();
	QMC5883L_Initialize(MODE_CONTROL_CONTINUOUS, OUTPUT_DATA_RATE_200HZ,
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	2200      	movs	r2, #0
 8000950:	210c      	movs	r1, #12
 8000952:	2000      	movs	r0, #0
 8000954:	f7ff fd4b 	bl	80003ee <QMC5883L_Initialize>
			FULL_SCALE_2G, OVER_SAMPLE_RATIO_128);
	QMC5883L_InterruptConfig(INTERRUPT_DISABLE);
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff fd6d 	bl	8000438 <QMC5883L_InterruptConfig>

	//Mode Register
	//Continuous-Measurement Mode
	QMC5883L_Write_Reg(0x02, 0x00);
 800095e:	2100      	movs	r1, #0
 8000960:	2002      	movs	r0, #2
 8000962:	f7ff fcf1 	bl	8000348 <QMC5883L_Write_Reg>
		// na podstawie na danych zareaguj :)

		// jakis tam bit do ustawienia, np skret w lewo - uzupelnic
//			rt_evbit_set(rt_evgroup_state_machine, (1 << 8));
//		}
		int16_t X = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	823b      	strh	r3, [r7, #16]
		int16_t Y = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	81fb      	strh	r3, [r7, #14]
		int16_t Z = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	81bb      	strh	r3, [r7, #12]

		uint8_t status = QMC5883L_Read_Reg(0x09);
 8000972:	2009      	movs	r0, #9
 8000974:	f7ff fcce 	bl	8000314 <QMC5883L_Read_Reg>
 8000978:	4603      	mov	r3, r0
 800097a:	75fb      	strb	r3, [r7, #23]
		uint8_t temp1 = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	75bb      	strb	r3, [r7, #22]
		uint8_t temp2 = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	757b      	strb	r3, [r7, #21]

		temp1 = QMC5883L_Read_Reg(0x07);
 8000984:	2007      	movs	r0, #7
 8000986:	f7ff fcc5 	bl	8000314 <QMC5883L_Read_Reg>
 800098a:	4603      	mov	r3, r0
 800098c:	75bb      	strb	r3, [r7, #22]
		temp2 = QMC5883L_Read_Reg(0x08);
 800098e:	2008      	movs	r0, #8
 8000990:	f7ff fcc0 	bl	8000314 <QMC5883L_Read_Reg>
 8000994:	4603      	mov	r3, r0
 8000996:	757b      	strb	r3, [r7, #21]

		uint16_t temp = ~((temp2 << 8) | temp1) + 1;
 8000998:	7d7b      	ldrb	r3, [r7, #21]
 800099a:	021b      	lsls	r3, r3, #8
 800099c:	b21a      	sxth	r2, r3
 800099e:	7dbb      	ldrb	r3, [r7, #22]
 80009a0:	b21b      	sxth	r3, r3
 80009a2:	4313      	orrs	r3, r2
 80009a4:	b21b      	sxth	r3, r3
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	425b      	negs	r3, r3
 80009aa:	827b      	strh	r3, [r7, #18]
		temp /= 100;
 80009ac:	8a7b      	ldrh	r3, [r7, #18]
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <task_sensors+0xb4>)
 80009b0:	fba2 2303 	umull	r2, r3, r2, r3
 80009b4:	095b      	lsrs	r3, r3, #5
 80009b6:	827b      	strh	r3, [r7, #18]

		temp += 1;
 80009b8:	8a7b      	ldrh	r3, [r7, #18]
 80009ba:	3301      	adds	r3, #1
 80009bc:	827b      	strh	r3, [r7, #18]

		if (status & (1 << 0)) {
 80009be:	7dfb      	ldrb	r3, [r7, #23]
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d009      	beq.n	80009dc <task_sensors+0x98>
			QMC5883L_Read_Data(&X, &Y, &Z);
 80009c8:	f107 020c 	add.w	r2, r7, #12
 80009cc:	f107 010e 	add.w	r1, r7, #14
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fcd3 	bl	8000380 <QMC5883L_Read_Data>
 80009da:	e005      	b.n	80009e8 <task_sensors+0xa4>
		} else {
			X = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	823b      	strh	r3, [r7, #16]
			Y = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	81fb      	strh	r3, [r7, #14]
			Z = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	81bb      	strh	r3, [r7, #12]
		}

		X++;
 80009e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	3301      	adds	r3, #1
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	b21b      	sxth	r3, r3
 80009f4:	823b      	strh	r3, [r7, #16]
	for (;;) {
 80009f6:	e7b6      	b.n	8000966 <task_sensors+0x22>
 80009f8:	51eb851f 	.word	0x51eb851f

080009fc <task_state_machine>:
#include "runtime.h"
#include "state_machine.h"
#include "h_bridge.h"
#include "bluetooth_le.h"

void task_state_machine(void *pvParameters) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	uint32_t evgroup = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
	bool tasks_disabled = false;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	72fb      	strb	r3, [r7, #11]
//	xQueueBleData receivedBleData = { 0 };

	for (;;) {

		evgroup = rt_evbitwait_any(rt_evgroup_state_machine);
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f7ff fde7 	bl	80005e0 <rt_evbitwait_any>
 8000a12:	60f8      	str	r0, [r7, #12]

		if (evgroup & (1 << evgroup_state_m_do_nothing)) {
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d007      	beq.n	8000a2e <task_state_machine+0x32>

			h_bridge_coast();
 8000a1e:	f7ff fc5b 	bl	80002d8 <h_bridge_coast>
			h_bridge_set_left_duty(0);
 8000a22:	2000      	movs	r0, #0
 8000a24:	f7ff fbc4 	bl	80001b0 <h_bridge_set_left_duty>
			h_bridge_set_right_duty(0);
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f7ff fbe7 	bl	80001fc <h_bridge_set_right_duty>
		}
		if (evgroup & (1 << evgroup_state_m_auto_manual)) {
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	f003 0302 	and.w	r3, r3, #2
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d0e9      	beq.n	8000a0c <task_state_machine+0x10>
			if (tasks_disabled) {
 8000a38:	7afb      	ldrb	r3, [r7, #11]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d00f      	beq.n	8000a5e <task_state_machine+0x62>
				vTaskResume(rt_tasks[rt_task_eyes]);
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <task_state_machine+0x84>)
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f007 fd62 	bl	800850c <vTaskResume>
				vTaskResume(rt_tasks[rt_task_memory]);
 8000a48:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <task_state_machine+0x84>)
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f007 fd5d 	bl	800850c <vTaskResume>
				vTaskResume(rt_tasks[rt_task_sensors]);
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <task_state_machine+0x84>)
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f007 fd58 	bl	800850c <vTaskResume>
 8000a5c:	e7d6      	b.n	8000a0c <task_state_machine+0x10>
			} else {
				vTaskSuspend(rt_tasks[rt_task_eyes]);
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <task_state_machine+0x84>)
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f007 fca4 	bl	80083b0 <vTaskSuspend>
				vTaskSuspend(rt_tasks[rt_task_memory]);
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <task_state_machine+0x84>)
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f007 fc9f 	bl	80083b0 <vTaskSuspend>
				vTaskSuspend(rt_tasks[rt_task_sensors]);
 8000a72:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <task_state_machine+0x84>)
 8000a74:	68db      	ldr	r3, [r3, #12]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f007 fc9a 	bl	80083b0 <vTaskSuspend>
		evgroup = rt_evbitwait_any(rt_evgroup_state_machine);
 8000a7c:	e7c6      	b.n	8000a0c <task_state_machine+0x10>
 8000a7e:	bf00      	nop
 8000a80:	2000353c 	.word	0x2000353c

08000a84 <u2_to_decimal>:
 *      Author: Arkadiusz
 */

#include "utility.h"

int u2_to_decimal(uint8_t u2) {
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]

	char value = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	73fb      	strb	r3, [r7, #15]

	if (u2 & (1 << 7)) {
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	da0a      	bge.n	8000ab0 <u2_to_decimal+0x2c>

		value = u2;
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	73fb      	strb	r3, [r7, #15]
		value = ~value;
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	73fb      	strb	r3, [r7, #15]
		value += 1;
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	73fb      	strb	r3, [r7, #15]
		return (int) -value;
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
 8000aac:	425b      	negs	r3, r3
 8000aae:	e002      	b.n	8000ab6 <u2_to_decimal+0x32>

	} else {
		value = u2;
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	73fb      	strb	r3, [r7, #15]
		return (int) value;
 8000ab4:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000ad0:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <MX_ADC_Init+0xa8>)
 8000ad2:	4a26      	ldr	r2, [pc, #152]	; (8000b6c <MX_ADC_Init+0xac>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ad6:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <MX_ADC_Init+0xa8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000adc:	4b22      	ldr	r3, [pc, #136]	; (8000b68 <MX_ADC_Init+0xa8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ae2:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <MX_ADC_Init+0xa8>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ae8:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <MX_ADC_Init+0xa8>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000aee:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <MX_ADC_Init+0xa8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000af4:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <MX_ADC_Init+0xa8>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000afa:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <MX_ADC_Init+0xa8>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000b00:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <MX_ADC_Init+0xa8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <MX_ADC_Init+0xa8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <MX_ADC_Init+0xa8>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000b14:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_ADC_Init+0xa8>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_ADC_Init+0xa8>)
 8000b1e:	2210      	movs	r2, #16
 8000b20:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_ADC_Init+0xa8>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_ADC_Init+0xa8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000b30:	480d      	ldr	r0, [pc, #52]	; (8000b68 <MX_ADC_Init+0xa8>)
 8000b32:	f000 ff3b 	bl	80019ac <HAL_ADC_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8000b3c:	f000 fae2 	bl	8001104 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b40:	2301      	movs	r3, #1
 8000b42:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b44:	2301      	movs	r3, #1
 8000b46:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_ADC_Init+0xa8>)
 8000b52:	f001 f9cf 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000b5c:	f000 fad2 	bl	8001104 <Error_Handler>
  }

}
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20003570 	.word	0x20003570
 8000b6c:	40012400 	.word	0x40012400

08000b70 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08c      	sub	sp, #48	; 0x30
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a2d      	ldr	r2, [pc, #180]	; (8000c44 <HAL_ADC_MspInit+0xd4>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d154      	bne.n	8000c3c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b92:	4b2d      	ldr	r3, [pc, #180]	; (8000c48 <HAL_ADC_MspInit+0xd8>)
 8000b94:	6a1b      	ldr	r3, [r3, #32]
 8000b96:	4a2c      	ldr	r2, [pc, #176]	; (8000c48 <HAL_ADC_MspInit+0xd8>)
 8000b98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b9c:	6213      	str	r3, [r2, #32]
 8000b9e:	4b2a      	ldr	r3, [pc, #168]	; (8000c48 <HAL_ADC_MspInit+0xd8>)
 8000ba0:	6a1b      	ldr	r3, [r3, #32]
 8000ba2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ba6:	61bb      	str	r3, [r7, #24]
 8000ba8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000baa:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <HAL_ADC_MspInit+0xd8>)
 8000bac:	69db      	ldr	r3, [r3, #28]
 8000bae:	4a26      	ldr	r2, [pc, #152]	; (8000c48 <HAL_ADC_MspInit+0xd8>)
 8000bb0:	f043 0304 	orr.w	r3, r3, #4
 8000bb4:	61d3      	str	r3, [r2, #28]
 8000bb6:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <HAL_ADC_MspInit+0xd8>)
 8000bb8:	69db      	ldr	r3, [r3, #28]
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <HAL_ADC_MspInit+0xd8>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	4a20      	ldr	r2, [pc, #128]	; (8000c48 <HAL_ADC_MspInit+0xd8>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	61d3      	str	r3, [r2, #28]
 8000bce:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <HAL_ADC_MspInit+0xd8>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <HAL_ADC_MspInit+0xd8>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	4a1a      	ldr	r2, [pc, #104]	; (8000c48 <HAL_ADC_MspInit+0xd8>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	61d3      	str	r3, [r2, #28]
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <HAL_ADC_MspInit+0xd8>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA7     ------> ADC_IN7
    PB15     ------> ADC_IN21 
    */
    GPIO_InitStruct.Pin = ADC_BATTERY_VOLTAGE_Pin;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_BATTERY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	4619      	mov	r1, r3
 8000c04:	4811      	ldr	r0, [pc, #68]	; (8000c4c <HAL_ADC_MspInit+0xdc>)
 8000c06:	f001 ffa7 	bl	8002b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_PHOTO_BACK_Pin|ADC_OPTO_LEFT_Pin|ADC_PHOTO_FRONT_Pin;
 8000c0a:	2386      	movs	r3, #134	; 0x86
 8000c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	480c      	ldr	r0, [pc, #48]	; (8000c50 <HAL_ADC_MspInit+0xe0>)
 8000c1e:	f001 ff9b 	bl	8002b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_OPTO_RIGHT_Pin;
 8000c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_OPTO_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 031c 	add.w	r3, r7, #28
 8000c34:	4619      	mov	r1, r3
 8000c36:	4807      	ldr	r0, [pc, #28]	; (8000c54 <HAL_ADC_MspInit+0xe4>)
 8000c38:	f001 ff8e 	bl	8002b58 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	3730      	adds	r7, #48	; 0x30
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40012400 	.word	0x40012400
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020800 	.word	0x40020800
 8000c50:	40020000 	.word	0x40020000
 8000c54:	40020400 	.word	0x40020400

08000c58 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <MX_DMA_Init+0x48>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	4a0f      	ldr	r2, [pc, #60]	; (8000ca0 <MX_DMA_Init+0x48>)
 8000c64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c68:	61d3      	str	r3, [r2, #28]
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <MX_DMA_Init+0x48>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2105      	movs	r1, #5
 8000c7a:	200c      	movs	r0, #12
 8000c7c:	f001 fc9e 	bl	80025bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c80:	200c      	movs	r0, #12
 8000c82:	f001 fcc7 	bl	8002614 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2105      	movs	r1, #5
 8000c8a:	200d      	movs	r0, #13
 8000c8c:	f001 fc96 	bl	80025bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000c90:	200d      	movs	r0, #13
 8000c92:	f001 fcbf 	bl	8002614 <HAL_NVIC_EnableIRQ>

}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800

08000ca4 <vApplicationIdleHook>:
void vApplicationMallocFailedHook(void);
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr

08000cb0 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr

08000cbc <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr

08000cdc <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cec:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <MX_FREERTOS_Init+0x1c>)
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_FREERTOS_Init+0x20>)
 8000cf2:	f006 f91b 	bl	8006f2c <osThreadNew>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <MX_FREERTOS_Init+0x24>)
 8000cfa:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  rt_init();
 8000cfc:	f7ff fbc6 	bl	800048c <rt_init>
  /* USER CODE END RTOS_THREADS */

}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	0800a414 	.word	0x0800a414
 8000d08:	08000d11 	.word	0x08000d11
 8000d0c:	200035c4 	.word	0x200035c4

08000d10 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f006 f9b1 	bl	8007080 <osDelay>
 8000d1e:	e7fb      	b.n	8000d18 <StartDefaultTask+0x8>

08000d20 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d36:	4b72      	ldr	r3, [pc, #456]	; (8000f00 <MX_GPIO_Init+0x1e0>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	4a71      	ldr	r2, [pc, #452]	; (8000f00 <MX_GPIO_Init+0x1e0>)
 8000d3c:	f043 0304 	orr.w	r3, r3, #4
 8000d40:	61d3      	str	r3, [r2, #28]
 8000d42:	4b6f      	ldr	r3, [pc, #444]	; (8000f00 <MX_GPIO_Init+0x1e0>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	f003 0304 	and.w	r3, r3, #4
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d4e:	4b6c      	ldr	r3, [pc, #432]	; (8000f00 <MX_GPIO_Init+0x1e0>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	4a6b      	ldr	r2, [pc, #428]	; (8000f00 <MX_GPIO_Init+0x1e0>)
 8000d54:	f043 0320 	orr.w	r3, r3, #32
 8000d58:	61d3      	str	r3, [r2, #28]
 8000d5a:	4b69      	ldr	r3, [pc, #420]	; (8000f00 <MX_GPIO_Init+0x1e0>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	f003 0320 	and.w	r3, r3, #32
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	4b66      	ldr	r3, [pc, #408]	; (8000f00 <MX_GPIO_Init+0x1e0>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	4a65      	ldr	r2, [pc, #404]	; (8000f00 <MX_GPIO_Init+0x1e0>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	61d3      	str	r3, [r2, #28]
 8000d72:	4b63      	ldr	r3, [pc, #396]	; (8000f00 <MX_GPIO_Init+0x1e0>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	4b60      	ldr	r3, [pc, #384]	; (8000f00 <MX_GPIO_Init+0x1e0>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	4a5f      	ldr	r2, [pc, #380]	; (8000f00 <MX_GPIO_Init+0x1e0>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	61d3      	str	r3, [r2, #28]
 8000d8a:	4b5d      	ldr	r3, [pc, #372]	; (8000f00 <MX_GPIO_Init+0x1e0>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d96:	4b5a      	ldr	r3, [pc, #360]	; (8000f00 <MX_GPIO_Init+0x1e0>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	4a59      	ldr	r2, [pc, #356]	; (8000f00 <MX_GPIO_Init+0x1e0>)
 8000d9c:	f043 0308 	orr.w	r3, r3, #8
 8000da0:	61d3      	str	r3, [r2, #28]
 8000da2:	4b57      	ldr	r3, [pc, #348]	; (8000f00 <MX_GPIO_Init+0x1e0>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	f003 0308 	and.w	r3, r3, #8
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_INa_ENGINE_LEFT_Pin|OUT_INb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_TEST_Pin 
 8000dae:	2200      	movs	r2, #0
 8000db0:	f640 616e 	movw	r1, #3694	; 0xe6e
 8000db4:	4853      	ldr	r0, [pc, #332]	; (8000f04 <MX_GPIO_Init+0x1e4>)
 8000db6:	f002 f941 	bl	800303c <HAL_GPIO_WritePin>
                          |OUT_ULTRASOUND_TRIG_Pin|OUT_INb_ENGINE_RIGHT_Pin|OUT_LED1_Pin|OUT_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f248 7108 	movw	r1, #34568	; 0x8708
 8000dc0:	4851      	ldr	r0, [pc, #324]	; (8000f08 <MX_GPIO_Init+0x1e8>)
 8000dc2:	f002 f93b 	bl	800303c <HAL_GPIO_WritePin>
                          |OUT_LED0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_BLE_EN_GPIO_Port, OUT_BLE_EN_Pin, GPIO_PIN_SET);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2110      	movs	r1, #16
 8000dca:	484e      	ldr	r0, [pc, #312]	; (8000f04 <MX_GPIO_Init+0x1e4>)
 8000dcc:	f002 f936 	bl	800303c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12;
 8000dd0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	4847      	ldr	r0, [pc, #284]	; (8000f04 <MX_GPIO_Init+0x1e4>)
 8000de6:	f001 feb7 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = OUT_INa_ENGINE_LEFT_Pin|OUT_INb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_EN_Pin 
 8000dea:	f640 637e 	movw	r3, #3710	; 0xe7e
 8000dee:	617b      	str	r3, [r7, #20]
                          |OUT_BLE_TEST_Pin|OUT_ULTRASOUND_TRIG_Pin|OUT_INb_ENGINE_RIGHT_Pin|OUT_LED1_Pin 
                          |OUT_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df0:	2301      	movs	r3, #1
 8000df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4619      	mov	r1, r3
 8000e02:	4840      	ldr	r0, [pc, #256]	; (8000f04 <MX_GPIO_Init+0x1e4>)
 8000e04:	f001 fea8 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 8000e08:	f248 7308 	movw	r3, #34568	; 0x8708
 8000e0c:	617b      	str	r3, [r7, #20]
                          |OUT_LED0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4839      	ldr	r0, [pc, #228]	; (8000f08 <MX_GPIO_Init+0x1e8>)
 8000e22:	f001 fe99 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 8000e26:	f241 0370 	movw	r3, #4208	; 0x1070
 8000e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4833      	ldr	r0, [pc, #204]	; (8000f08 <MX_GPIO_Init+0x1e8>)
 8000e3c:	f001 fe8c 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IRQ_BLE_Pin|IRQ_ULTRASOUND_ECHO_Pin;
 8000e40:	2303      	movs	r3, #3
 8000e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e44:	4b31      	ldr	r3, [pc, #196]	; (8000f0c <MX_GPIO_Init+0x1ec>)
 8000e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	482f      	ldr	r0, [pc, #188]	; (8000f10 <MX_GPIO_Init+0x1f0>)
 8000e54:	f001 fe80 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB3 PB4 
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 8000e58:	f242 333c 	movw	r3, #9020	; 0x233c
 8000e5c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4828      	ldr	r0, [pc, #160]	; (8000f10 <MX_GPIO_Init+0x1f0>)
 8000e6e:	f001 fe73 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_LEFT_Pin;
 8000e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_LEFT_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	4822      	ldr	r0, [pc, #136]	; (8000f10 <MX_GPIO_Init+0x1f0>)
 8000e88:	f001 fe66 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_HALL_FRONT_Pin;
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN_HALL_FRONT_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4819      	ldr	r0, [pc, #100]	; (8000f04 <MX_GPIO_Init+0x1e4>)
 8000ea0:	f001 fe5a 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_RIGHT_Pin;
 8000ea4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4813      	ldr	r0, [pc, #76]	; (8000f08 <MX_GPIO_Init+0x1e8>)
 8000eba:	f001 fe4d 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4810      	ldr	r0, [pc, #64]	; (8000f14 <MX_GPIO_Init+0x1f4>)
 8000ed2:	f001 fe41 	bl	8002b58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2105      	movs	r1, #5
 8000eda:	2006      	movs	r0, #6
 8000edc:	f001 fb6e 	bl	80025bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ee0:	2006      	movs	r0, #6
 8000ee2:	f001 fb97 	bl	8002614 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2105      	movs	r1, #5
 8000eea:	2007      	movs	r0, #7
 8000eec:	f001 fb66 	bl	80025bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000ef0:	2007      	movs	r0, #7
 8000ef2:	f001 fb8f 	bl	8002614 <HAL_NVIC_EnableIRQ>

}
 8000ef6:	bf00      	nop
 8000ef8:	3728      	adds	r7, #40	; 0x28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020800 	.word	0x40020800
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	10110000 	.word	0x10110000
 8000f10:	40020400 	.word	0x40020400
 8000f14:	40020c00 	.word	0x40020c00

08000f18 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f1e:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <MX_I2C1_Init+0x54>)
 8000f20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f24:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <MX_I2C1_Init+0x58>)
 8000f26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f56:	f002 f8bb 	bl	80030d0 <HAL_I2C_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f60:	f000 f8d0 	bl	8001104 <Error_Handler>
  }

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200035c8 	.word	0x200035c8
 8000f6c:	40005400 	.word	0x40005400
 8000f70:	000186a0 	.word	0x000186a0

08000f74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <HAL_I2C_MspInit+0x7c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d127      	bne.n	8000fe6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <HAL_I2C_MspInit+0x80>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4a16      	ldr	r2, [pc, #88]	; (8000ff4 <HAL_I2C_MspInit+0x80>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	61d3      	str	r3, [r2, #28]
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <HAL_I2C_MspInit+0x80>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fae:	23c0      	movs	r3, #192	; 0xc0
 8000fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb2:	2312      	movs	r3, #18
 8000fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480b      	ldr	r0, [pc, #44]	; (8000ff8 <HAL_I2C_MspInit+0x84>)
 8000fca:	f001 fdc5 	bl	8002b58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_I2C_MspInit+0x80>)
 8000fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd2:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <HAL_I2C_MspInit+0x80>)
 8000fd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fd8:	6253      	str	r3, [r2, #36]	; 0x24
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_I2C_MspInit+0x80>)
 8000fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3728      	adds	r7, #40	; 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40005400 	.word	0x40005400
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020400 	.word	0x40020400

08000ffc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001000:	f000 fc9f 	bl	8001942 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001004:	f000 f81c 	bl	8001040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001008:	f7ff fe8a 	bl	8000d20 <MX_GPIO_Init>
  MX_DMA_Init();
 800100c:	f7ff fe24 	bl	8000c58 <MX_DMA_Init>
  MX_ADC_Init();
 8001010:	f7ff fd56 	bl	8000ac0 <MX_ADC_Init>
  MX_I2C1_Init();
 8001014:	f7ff ff80 	bl	8000f18 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001018:	f000 f986 	bl	8001328 <MX_TIM2_Init>
  MX_TIM3_Init();
 800101c:	f000 f9f8 	bl	8001410 <MX_TIM3_Init>
  MX_TIM9_Init();
 8001020:	f000 fa6a 	bl	80014f8 <MX_TIM9_Init>
  MX_USART3_UART_Init();
 8001024:	f000 fba4 	bl	8001770 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	device_init();
 8001028:	f7ff fa1b 	bl	8000462 <device_init>
	h_bridge_init();
 800102c:	f7ff f8a8 	bl	8000180 <h_bridge_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001030:	f005 ff16 	bl	8006e60 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 8001034:	f7ff fe58 	bl	8000ce8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001038:	f005 ff44 	bl	8006ec4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800103c:	e7fe      	b.n	800103c <main+0x40>
	...

08001040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b092      	sub	sp, #72	; 0x48
 8001044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	2234      	movs	r2, #52	; 0x34
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f009 f817 	bl	800a082 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <SystemClock_Config+0x9c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800106a:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <SystemClock_Config+0x9c>)
 800106c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001070:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001072:	2303      	movs	r3, #3
 8001074:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001076:	2301      	movs	r3, #1
 8001078:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800107a:	2301      	movs	r3, #1
 800107c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800107e:	2310      	movs	r3, #16
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001082:	2302      	movs	r3, #2
 8001084:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001086:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800108a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800108c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001090:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8001092:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001096:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4618      	mov	r0, r3
 800109e:	f003 f813 	bl	80040c8 <HAL_RCC_OscConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80010a8:	f000 f82c 	bl	8001104 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ac:	230f      	movs	r3, #15
 80010ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b0:	2303      	movs	r3, #3
 80010b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010c0:	463b      	mov	r3, r7
 80010c2:	2101      	movs	r1, #1
 80010c4:	4618      	mov	r0, r3
 80010c6:	f003 fc7d 	bl	80049c4 <HAL_RCC_ClockConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010d0:	f000 f818 	bl	8001104 <Error_Handler>
  }
}
 80010d4:	bf00      	nop
 80010d6:	3748      	adds	r7, #72	; 0x48
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40007000 	.word	0x40007000

080010e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d101      	bne.n	80010f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010f2:	f000 fc3f 	bl	8001974 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40000c00 	.word	0x40000c00

08001104 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_MspInit+0x64>)
 800112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112e:	4a16      	ldr	r2, [pc, #88]	; (8001188 <HAL_MspInit+0x64>)
 8001130:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001134:	6253      	str	r3, [r2, #36]	; 0x24
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <HAL_MspInit+0x64>)
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_MspInit+0x64>)
 8001144:	6a1b      	ldr	r3, [r3, #32]
 8001146:	4a10      	ldr	r2, [pc, #64]	; (8001188 <HAL_MspInit+0x64>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6213      	str	r3, [r2, #32]
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <HAL_MspInit+0x64>)
 8001150:	6a1b      	ldr	r3, [r3, #32]
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <HAL_MspInit+0x64>)
 800115c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <HAL_MspInit+0x64>)
 8001160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001164:	6253      	str	r3, [r2, #36]	; 0x24
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_MspInit+0x64>)
 8001168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	210f      	movs	r1, #15
 8001176:	f06f 0001 	mvn.w	r0, #1
 800117a:	f001 fa1f 	bl	80025bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800

0800118c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08c      	sub	sp, #48	; 0x30
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 800119c:	2200      	movs	r2, #0
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	202e      	movs	r0, #46	; 0x2e
 80011a2:	f001 fa0b 	bl	80025bc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 80011a6:	202e      	movs	r0, #46	; 0x2e
 80011a8:	f001 fa34 	bl	8002614 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80011ac:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <HAL_InitTick+0x9c>)
 80011ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b0:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <HAL_InitTick+0x9c>)
 80011b2:	f043 0308 	orr.w	r3, r3, #8
 80011b6:	6253      	str	r3, [r2, #36]	; 0x24
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <HAL_InitTick+0x9c>)
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	f003 0308 	and.w	r3, r3, #8
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011c4:	f107 0210 	add.w	r2, r7, #16
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4611      	mov	r1, r2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f003 fe40 	bl	8004e54 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011d4:	f003 fe16 	bl	8004e04 <HAL_RCC_GetPCLK1Freq>
 80011d8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80011da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011dc:	4a13      	ldr	r2, [pc, #76]	; (800122c <HAL_InitTick+0xa0>)
 80011de:	fba2 2303 	umull	r2, r3, r2, r3
 80011e2:	0c9b      	lsrs	r3, r3, #18
 80011e4:	3b01      	subs	r3, #1
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <HAL_InitTick+0xa4>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	; (8001234 <HAL_InitTick+0xa8>)
 80011ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <HAL_InitTick+0xa4>)
 80011f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011f4:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80011f6:	4a0e      	ldr	r2, [pc, #56]	; (8001230 <HAL_InitTick+0xa4>)
 80011f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fa:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <HAL_InitTick+0xa4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_InitTick+0xa4>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8001208:	4809      	ldr	r0, [pc, #36]	; (8001230 <HAL_InitTick+0xa4>)
 800120a:	f003 fec5 	bl	8004f98 <HAL_TIM_Base_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d104      	bne.n	800121e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8001214:	4806      	ldr	r0, [pc, #24]	; (8001230 <HAL_InitTick+0xa4>)
 8001216:	f003 ff67 	bl	80050e8 <HAL_TIM_Base_Start_IT>
 800121a:	4603      	mov	r3, r0
 800121c:	e000      	b.n	8001220 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
}
 8001220:	4618      	mov	r0, r3
 8001222:	3730      	adds	r7, #48	; 0x30
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40023800 	.word	0x40023800
 800122c:	431bde83 	.word	0x431bde83
 8001230:	2000361c 	.word	0x2000361c
 8001234:	40000c00 	.word	0x40000c00

08001238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr

08001244 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <HardFault_Handler+0x4>

0800124a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <MemManage_Handler+0x4>

08001250 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <BusFault_Handler+0x4>

08001256 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <UsageFault_Handler+0x4>

0800125c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr

08001268 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800126c:	2001      	movs	r0, #1
 800126e:	f001 ff17 	bl	80030a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}

08001276 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800127a:	2002      	movs	r0, #2
 800127c:	f001 ff10 	bl	80030a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <DMA1_Channel2_IRQHandler+0x10>)
 800128a:	f001 fb87 	bl	800299c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20003790 	.word	0x20003790

08001298 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <DMA1_Channel3_IRQHandler+0x10>)
 800129e:	f001 fb7d 	bl	800299c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2000370c 	.word	0x2000370c

080012ac <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <TIM5_IRQHandler+0x10>)
 80012b2:	f004 f8c5 	bl	8005440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2000361c 	.word	0x2000361c

080012c0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80012c4:	4b15      	ldr	r3, [pc, #84]	; (800131c <SystemInit+0x5c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a14      	ldr	r2, [pc, #80]	; (800131c <SystemInit+0x5c>)
 80012ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ce:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <SystemInit+0x5c>)
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	4911      	ldr	r1, [pc, #68]	; (800131c <SystemInit+0x5c>)
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <SystemInit+0x60>)
 80012d8:	4013      	ands	r3, r2
 80012da:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <SystemInit+0x5c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0e      	ldr	r2, [pc, #56]	; (800131c <SystemInit+0x5c>)
 80012e2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80012e6:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80012ea:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <SystemInit+0x5c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0a      	ldr	r2, [pc, #40]	; (800131c <SystemInit+0x5c>)
 80012f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f6:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <SystemInit+0x5c>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	4a07      	ldr	r2, [pc, #28]	; (800131c <SystemInit+0x5c>)
 80012fe:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001302:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <SystemInit+0x5c>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <SystemInit+0x64>)
 800130c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001310:	609a      	str	r2, [r3, #8]
#endif
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800
 8001320:	88ffc00c 	.word	0x88ffc00c
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132e:	f107 0318 	add.w	r3, r7, #24
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133c:	f107 0310 	add.w	r3, r7, #16
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001346:	463b      	mov	r3, r7
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8001352:	4b2e      	ldr	r3, [pc, #184]	; (800140c <MX_TIM2_Init+0xe4>)
 8001354:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001358:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800135a:	4b2c      	ldr	r3, [pc, #176]	; (800140c <MX_TIM2_Init+0xe4>)
 800135c:	2200      	movs	r2, #0
 800135e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001360:	4b2a      	ldr	r3, [pc, #168]	; (800140c <MX_TIM2_Init+0xe4>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3199;
 8001366:	4b29      	ldr	r3, [pc, #164]	; (800140c <MX_TIM2_Init+0xe4>)
 8001368:	f640 427f 	movw	r2, #3199	; 0xc7f
 800136c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136e:	4b27      	ldr	r3, [pc, #156]	; (800140c <MX_TIM2_Init+0xe4>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001374:	4b25      	ldr	r3, [pc, #148]	; (800140c <MX_TIM2_Init+0xe4>)
 8001376:	2280      	movs	r2, #128	; 0x80
 8001378:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800137a:	4824      	ldr	r0, [pc, #144]	; (800140c <MX_TIM2_Init+0xe4>)
 800137c:	f003 fe0c 	bl	8004f98 <HAL_TIM_Base_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001386:	f7ff febd 	bl	8001104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001390:	f107 0318 	add.w	r3, r7, #24
 8001394:	4619      	mov	r1, r3
 8001396:	481d      	ldr	r0, [pc, #116]	; (800140c <MX_TIM2_Init+0xe4>)
 8001398:	f004 fabe 	bl	8005918 <HAL_TIM_ConfigClockSource>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80013a2:	f7ff feaf 	bl	8001104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013a6:	4819      	ldr	r0, [pc, #100]	; (800140c <MX_TIM2_Init+0xe4>)
 80013a8:	f003 ff04 	bl	80051b4 <HAL_TIM_PWM_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013b2:	f7ff fea7 	bl	8001104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	4619      	mov	r1, r3
 80013c4:	4811      	ldr	r0, [pc, #68]	; (800140c <MX_TIM2_Init+0xe4>)
 80013c6:	f005 f81f 	bl	8006408 <HAL_TIMEx_MasterConfigSynchronization>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80013d0:	f7ff fe98 	bl	8001104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d4:	2360      	movs	r3, #96	; 0x60
 80013d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1599;
 80013d8:	f240 633f 	movw	r3, #1599	; 0x63f
 80013dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80013e2:	2304      	movs	r3, #4
 80013e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e6:	463b      	mov	r3, r7
 80013e8:	2200      	movs	r2, #0
 80013ea:	4619      	mov	r1, r3
 80013ec:	4807      	ldr	r0, [pc, #28]	; (800140c <MX_TIM2_Init+0xe4>)
 80013ee:	f004 f903 	bl	80055f8 <HAL_TIM_PWM_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80013f8:	f7ff fe84 	bl	8001104 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80013fc:	4803      	ldr	r0, [pc, #12]	; (800140c <MX_TIM2_Init+0xe4>)
 80013fe:	f000 f933 	bl	8001668 <HAL_TIM_MspPostInit>

}
 8001402:	bf00      	nop
 8001404:	3728      	adds	r7, #40	; 0x28
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200036d0 	.word	0x200036d0

08001410 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001416:	f107 0318 	add.w	r3, r7, #24
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800142e:	463b      	mov	r3, r7
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 800143a:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <MX_TIM3_Init+0xe0>)
 800143c:	4a2d      	ldr	r2, [pc, #180]	; (80014f4 <MX_TIM3_Init+0xe4>)
 800143e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001440:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <MX_TIM3_Init+0xe0>)
 8001442:	2200      	movs	r2, #0
 8001444:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001446:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <MX_TIM3_Init+0xe0>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3200-1;
 800144c:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <MX_TIM3_Init+0xe0>)
 800144e:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001452:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001454:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <MX_TIM3_Init+0xe0>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800145a:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <MX_TIM3_Init+0xe0>)
 800145c:	2280      	movs	r2, #128	; 0x80
 800145e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001460:	4823      	ldr	r0, [pc, #140]	; (80014f0 <MX_TIM3_Init+0xe0>)
 8001462:	f003 fd99 	bl	8004f98 <HAL_TIM_Base_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 800146c:	f7ff fe4a 	bl	8001104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001474:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001476:	f107 0318 	add.w	r3, r7, #24
 800147a:	4619      	mov	r1, r3
 800147c:	481c      	ldr	r0, [pc, #112]	; (80014f0 <MX_TIM3_Init+0xe0>)
 800147e:	f004 fa4b 	bl	8005918 <HAL_TIM_ConfigClockSource>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001488:	f7ff fe3c 	bl	8001104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800148c:	4818      	ldr	r0, [pc, #96]	; (80014f0 <MX_TIM3_Init+0xe0>)
 800148e:	f003 fe91 	bl	80051b4 <HAL_TIM_PWM_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001498:	f7ff fe34 	bl	8001104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	4619      	mov	r1, r3
 80014aa:	4811      	ldr	r0, [pc, #68]	; (80014f0 <MX_TIM3_Init+0xe0>)
 80014ac:	f004 ffac 	bl	8006408 <HAL_TIMEx_MasterConfigSynchronization>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80014b6:	f7ff fe25 	bl	8001104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ba:	2360      	movs	r3, #96	; 0x60
 80014bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 80014be:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80014c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80014c8:	2304      	movs	r3, #4
 80014ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014cc:	463b      	mov	r3, r7
 80014ce:	2208      	movs	r2, #8
 80014d0:	4619      	mov	r1, r3
 80014d2:	4807      	ldr	r0, [pc, #28]	; (80014f0 <MX_TIM3_Init+0xe0>)
 80014d4:	f004 f890 	bl	80055f8 <HAL_TIM_PWM_ConfigChannel>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80014de:	f7ff fe11 	bl	8001104 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80014e2:	4803      	ldr	r0, [pc, #12]	; (80014f0 <MX_TIM3_Init+0xe0>)
 80014e4:	f000 f8c0 	bl	8001668 <HAL_TIM_MspPostInit>

}
 80014e8:	bf00      	nop
 80014ea:	3728      	adds	r7, #40	; 0x28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20003658 	.word	0x20003658
 80014f4:	40000400 	.word	0x40000400

080014f8 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014fe:	f107 0318 	add.w	r3, r7, #24
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150c:	f107 0310 	add.w	r3, r7, #16
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001516:	463b      	mov	r3, r7
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8001522:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <MX_TIM9_Init+0xe0>)
 8001524:	4a2d      	ldr	r2, [pc, #180]	; (80015dc <MX_TIM9_Init+0xe4>)
 8001526:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001528:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <MX_TIM9_Init+0xe0>)
 800152a:	2200      	movs	r2, #0
 800152c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152e:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <MX_TIM9_Init+0xe0>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 3200;
 8001534:	4b28      	ldr	r3, [pc, #160]	; (80015d8 <MX_TIM9_Init+0xe0>)
 8001536:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 800153a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153c:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <MX_TIM9_Init+0xe0>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001542:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <MX_TIM9_Init+0xe0>)
 8001544:	2280      	movs	r2, #128	; 0x80
 8001546:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001548:	4823      	ldr	r0, [pc, #140]	; (80015d8 <MX_TIM9_Init+0xe0>)
 800154a:	f003 fd25 	bl	8004f98 <HAL_TIM_Base_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 8001554:	f7ff fdd6 	bl	8001104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800155e:	f107 0318 	add.w	r3, r7, #24
 8001562:	4619      	mov	r1, r3
 8001564:	481c      	ldr	r0, [pc, #112]	; (80015d8 <MX_TIM9_Init+0xe0>)
 8001566:	f004 f9d7 	bl	8005918 <HAL_TIM_ConfigClockSource>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM9_Init+0x7c>
  {
    Error_Handler();
 8001570:	f7ff fdc8 	bl	8001104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001574:	4818      	ldr	r0, [pc, #96]	; (80015d8 <MX_TIM9_Init+0xe0>)
 8001576:	f003 fe1d 	bl	80051b4 <HAL_TIM_PWM_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM9_Init+0x8c>
  {
    Error_Handler();
 8001580:	f7ff fdc0 	bl	8001104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	4619      	mov	r1, r3
 8001592:	4811      	ldr	r0, [pc, #68]	; (80015d8 <MX_TIM9_Init+0xe0>)
 8001594:	f004 ff38 	bl	8006408 <HAL_TIMEx_MasterConfigSynchronization>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM9_Init+0xaa>
  {
    Error_Handler();
 800159e:	f7ff fdb1 	bl	8001104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a2:	2360      	movs	r3, #96	; 0x60
 80015a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 80015a6:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80015aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015b4:	463b      	mov	r3, r7
 80015b6:	2204      	movs	r2, #4
 80015b8:	4619      	mov	r1, r3
 80015ba:	4807      	ldr	r0, [pc, #28]	; (80015d8 <MX_TIM9_Init+0xe0>)
 80015bc:	f004 f81c 	bl	80055f8 <HAL_TIM_PWM_ConfigChannel>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM9_Init+0xd2>
  {
    Error_Handler();
 80015c6:	f7ff fd9d 	bl	8001104 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 80015ca:	4803      	ldr	r0, [pc, #12]	; (80015d8 <MX_TIM9_Init+0xe0>)
 80015cc:	f000 f84c 	bl	8001668 <HAL_TIM_MspPostInit>

}
 80015d0:	bf00      	nop
 80015d2:	3728      	adds	r7, #40	; 0x28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20003694 	.word	0x20003694
 80015dc:	40010800 	.word	0x40010800

080015e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015f0:	d10c      	bne.n	800160c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <HAL_TIM_Base_MspInit+0x7c>)
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f6:	4a19      	ldr	r2, [pc, #100]	; (800165c <HAL_TIM_Base_MspInit+0x7c>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6253      	str	r3, [r2, #36]	; 0x24
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <HAL_TIM_Base_MspInit+0x7c>)
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800160a:	e022      	b.n	8001652 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a13      	ldr	r2, [pc, #76]	; (8001660 <HAL_TIM_Base_MspInit+0x80>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d10c      	bne.n	8001630 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <HAL_TIM_Base_MspInit+0x7c>)
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	4a10      	ldr	r2, [pc, #64]	; (800165c <HAL_TIM_Base_MspInit+0x7c>)
 800161c:	f043 0302 	orr.w	r3, r3, #2
 8001620:	6253      	str	r3, [r2, #36]	; 0x24
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <HAL_TIM_Base_MspInit+0x7c>)
 8001624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]
}
 800162e:	e010      	b.n	8001652 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM9)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <HAL_TIM_Base_MspInit+0x84>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d10b      	bne.n	8001652 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_TIM_Base_MspInit+0x7c>)
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	4a07      	ldr	r2, [pc, #28]	; (800165c <HAL_TIM_Base_MspInit+0x7c>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	6213      	str	r3, [r2, #32]
 8001646:	4b05      	ldr	r3, [pc, #20]	; (800165c <HAL_TIM_Base_MspInit+0x7c>)
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
}
 8001652:	bf00      	nop
 8001654:	371c      	adds	r7, #28
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	40023800 	.word	0x40023800
 8001660:	40000400 	.word	0x40000400
 8001664:	40010800 	.word	0x40010800

08001668 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001688:	d11c      	bne.n	80016c4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	4b33      	ldr	r3, [pc, #204]	; (8001758 <HAL_TIM_MspPostInit+0xf0>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	4a32      	ldr	r2, [pc, #200]	; (8001758 <HAL_TIM_MspPostInit+0xf0>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	61d3      	str	r3, [r2, #28]
 8001696:	4b30      	ldr	r3, [pc, #192]	; (8001758 <HAL_TIM_MspPostInit+0xf0>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0-WKUP1     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PWM_ENGINE_LEFT_Pin;
 80016a2:	2301      	movs	r3, #1
 80016a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016b2:	2301      	movs	r3, #1
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_LEFT_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	4827      	ldr	r0, [pc, #156]	; (800175c <HAL_TIM_MspPostInit+0xf4>)
 80016be:	f001 fa4b 	bl	8002b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80016c2:	e044      	b.n	800174e <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a25      	ldr	r2, [pc, #148]	; (8001760 <HAL_TIM_MspPostInit+0xf8>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d11d      	bne.n	800170a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	4b22      	ldr	r3, [pc, #136]	; (8001758 <HAL_TIM_MspPostInit+0xf0>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	4a21      	ldr	r2, [pc, #132]	; (8001758 <HAL_TIM_MspPostInit+0xf0>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	61d3      	str	r3, [r2, #28]
 80016da:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <HAL_TIM_MspPostInit+0xf0>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_ENGINE_RIGHT_Pin;
 80016e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016f8:	2302      	movs	r3, #2
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4619      	mov	r1, r3
 8001702:	4818      	ldr	r0, [pc, #96]	; (8001764 <HAL_TIM_MspPostInit+0xfc>)
 8001704:	f001 fa28 	bl	8002b58 <HAL_GPIO_Init>
}
 8001708:	e021      	b.n	800174e <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM9)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a16      	ldr	r2, [pc, #88]	; (8001768 <HAL_TIM_MspPostInit+0x100>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d11c      	bne.n	800174e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001714:	4b10      	ldr	r3, [pc, #64]	; (8001758 <HAL_TIM_MspPostInit+0xf0>)
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	4a0f      	ldr	r2, [pc, #60]	; (8001758 <HAL_TIM_MspPostInit+0xf0>)
 800171a:	f043 0302 	orr.w	r3, r3, #2
 800171e:	61d3      	str	r3, [r2, #28]
 8001720:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <HAL_TIM_MspPostInit+0xf0>)
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 800172c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800173e:	2303      	movs	r3, #3
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	4808      	ldr	r0, [pc, #32]	; (800176c <HAL_TIM_MspPostInit+0x104>)
 800174a:	f001 fa05 	bl	8002b58 <HAL_GPIO_Init>
}
 800174e:	bf00      	nop
 8001750:	3728      	adds	r7, #40	; 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800
 800175c:	40020000 	.word	0x40020000
 8001760:	40000400 	.word	0x40000400
 8001764:	40020800 	.word	0x40020800
 8001768:	40010800 	.word	0x40010800
 800176c:	40020400 	.word	0x40020400

08001770 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <MX_USART3_UART_Init+0x50>)
 8001778:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 800177c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001780:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 8001796:	220c      	movs	r2, #12
 8001798:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 80017a8:	f004 fec8 	bl	800653c <HAL_UART_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017b2:	f7ff fca7 	bl	8001104 <Error_Handler>
  }

}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20003750 	.word	0x20003750
 80017c0:	40004800 	.word	0x40004800

080017c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a3e      	ldr	r2, [pc, #248]	; (80018dc <HAL_UART_MspInit+0x118>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d175      	bne.n	80018d2 <HAL_UART_MspInit+0x10e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017e6:	4b3e      	ldr	r3, [pc, #248]	; (80018e0 <HAL_UART_MspInit+0x11c>)
 80017e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ea:	4a3d      	ldr	r2, [pc, #244]	; (80018e0 <HAL_UART_MspInit+0x11c>)
 80017ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f0:	6253      	str	r3, [r2, #36]	; 0x24
 80017f2:	4b3b      	ldr	r3, [pc, #236]	; (80018e0 <HAL_UART_MspInit+0x11c>)
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fe:	4b38      	ldr	r3, [pc, #224]	; (80018e0 <HAL_UART_MspInit+0x11c>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	4a37      	ldr	r2, [pc, #220]	; (80018e0 <HAL_UART_MspInit+0x11c>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	61d3      	str	r3, [r2, #28]
 800180a:	4b35      	ldr	r3, [pc, #212]	; (80018e0 <HAL_UART_MspInit+0x11c>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001816:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800181a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001824:	2303      	movs	r3, #3
 8001826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001828:	2307      	movs	r3, #7
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	482c      	ldr	r0, [pc, #176]	; (80018e4 <HAL_UART_MspInit+0x120>)
 8001834:	f001 f990 	bl	8002b58 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001838:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <HAL_UART_MspInit+0x124>)
 800183a:	4a2c      	ldr	r2, [pc, #176]	; (80018ec <HAL_UART_MspInit+0x128>)
 800183c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800183e:	4b2a      	ldr	r3, [pc, #168]	; (80018e8 <HAL_UART_MspInit+0x124>)
 8001840:	2200      	movs	r2, #0
 8001842:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001844:	4b28      	ldr	r3, [pc, #160]	; (80018e8 <HAL_UART_MspInit+0x124>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800184a:	4b27      	ldr	r3, [pc, #156]	; (80018e8 <HAL_UART_MspInit+0x124>)
 800184c:	2280      	movs	r2, #128	; 0x80
 800184e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001850:	4b25      	ldr	r3, [pc, #148]	; (80018e8 <HAL_UART_MspInit+0x124>)
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001856:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <HAL_UART_MspInit+0x124>)
 8001858:	2200      	movs	r2, #0
 800185a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800185c:	4b22      	ldr	r3, [pc, #136]	; (80018e8 <HAL_UART_MspInit+0x124>)
 800185e:	2200      	movs	r2, #0
 8001860:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001862:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <HAL_UART_MspInit+0x124>)
 8001864:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001868:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800186a:	481f      	ldr	r0, [pc, #124]	; (80018e8 <HAL_UART_MspInit+0x124>)
 800186c:	f000 feea 	bl	8002644 <HAL_DMA_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8001876:	f7ff fc45 	bl	8001104 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a1a      	ldr	r2, [pc, #104]	; (80018e8 <HAL_UART_MspInit+0x124>)
 800187e:	635a      	str	r2, [r3, #52]	; 0x34
 8001880:	4a19      	ldr	r2, [pc, #100]	; (80018e8 <HAL_UART_MspInit+0x124>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001886:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <HAL_UART_MspInit+0x12c>)
 8001888:	4a1a      	ldr	r2, [pc, #104]	; (80018f4 <HAL_UART_MspInit+0x130>)
 800188a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800188c:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <HAL_UART_MspInit+0x12c>)
 800188e:	2210      	movs	r2, #16
 8001890:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001892:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <HAL_UART_MspInit+0x12c>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001898:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <HAL_UART_MspInit+0x12c>)
 800189a:	2280      	movs	r2, #128	; 0x80
 800189c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800189e:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <HAL_UART_MspInit+0x12c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_UART_MspInit+0x12c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <HAL_UART_MspInit+0x12c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <HAL_UART_MspInit+0x12c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80018b6:	480e      	ldr	r0, [pc, #56]	; (80018f0 <HAL_UART_MspInit+0x12c>)
 80018b8:	f000 fec4 	bl	8002644 <HAL_DMA_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 80018c2:	f7ff fc1f 	bl	8001104 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a09      	ldr	r2, [pc, #36]	; (80018f0 <HAL_UART_MspInit+0x12c>)
 80018ca:	631a      	str	r2, [r3, #48]	; 0x30
 80018cc:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <HAL_UART_MspInit+0x12c>)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80018d2:	bf00      	nop
 80018d4:	3728      	adds	r7, #40	; 0x28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40004800 	.word	0x40004800
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40020400 	.word	0x40020400
 80018e8:	2000370c 	.word	0x2000370c
 80018ec:	40026030 	.word	0x40026030
 80018f0:	20003790 	.word	0x20003790
 80018f4:	4002601c 	.word	0x4002601c

080018f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80018f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80018fa:	e003      	b.n	8001904 <LoopCopyDataInit>

080018fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80018fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001900:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001902:	3104      	adds	r1, #4

08001904 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001904:	480a      	ldr	r0, [pc, #40]	; (8001930 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001906:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001908:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800190a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800190c:	d3f6      	bcc.n	80018fc <CopyDataInit>
  ldr r2, =_sbss
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001910:	e002      	b.n	8001918 <LoopFillZerobss>

08001912 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001914:	f842 3b04 	str.w	r3, [r2], #4

08001918 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800191a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800191c:	d3f9      	bcc.n	8001912 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800191e:	f7ff fccf 	bl	80012c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001922:	f008 fb7f 	bl	800a024 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001926:	f7ff fb69 	bl	8000ffc <main>
  bx lr
 800192a:	4770      	bx	lr
  ldr r3, =_sidata
 800192c:	0800a464 	.word	0x0800a464
  ldr r0, =_sdata
 8001930:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001934:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8001938:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 800193c:	20003818 	.word	0x20003818

08001940 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001940:	e7fe      	b.n	8001940 <ADC1_IRQHandler>

08001942 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800194c:	2003      	movs	r0, #3
 800194e:	f000 fe15 	bl	800257c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001952:	2000      	movs	r0, #0
 8001954:	f7ff fc1a 	bl	800118c <HAL_InitTick>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	71fb      	strb	r3, [r7, #7]
 8001962:	e001      	b.n	8001968 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001964:	f7ff fbde 	bl	8001124 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001968:	79fb      	ldrb	r3, [r7, #7]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <HAL_IncTick+0x1c>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_IncTick+0x20>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4413      	add	r3, r2
 8001982:	4a03      	ldr	r2, [pc, #12]	; (8001990 <HAL_IncTick+0x1c>)
 8001984:	6013      	str	r3, [r2, #0]
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	200037d4 	.word	0x200037d4
 8001994:	20000008 	.word	0x20000008

08001998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return uwTick;
 800199c:	4b02      	ldr	r3, [pc, #8]	; (80019a8 <HAL_GetTick+0x10>)
 800199e:	681b      	ldr	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	200037d4 	.word	0x200037d4

080019ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08e      	sub	sp, #56	; 0x38
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e282      	b.n	8001ed2 <HAL_ADC_Init+0x526>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a9d      	ldr	r2, [pc, #628]	; (8001c48 <HAL_ADC_Init+0x29c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d004      	beq.n	80019e0 <HAL_ADC_Init+0x34>
 80019d6:	f240 11bd 	movw	r1, #445	; 0x1bd
 80019da:	489c      	ldr	r0, [pc, #624]	; (8001c4c <HAL_ADC_Init+0x2a0>)
 80019dc:	f7ff fb98 	bl	8001110 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00e      	beq.n	8001a06 <HAL_ADC_Init+0x5a>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f0:	d009      	beq.n	8001a06 <HAL_ADC_Init+0x5a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019fa:	d004      	beq.n	8001a06 <HAL_ADC_Init+0x5a>
 80019fc:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8001a00:	4892      	ldr	r0, [pc, #584]	; (8001c4c <HAL_ADC_Init+0x2a0>)
 8001a02:	f7ff fb85 	bl	8001110 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d013      	beq.n	8001a36 <HAL_ADC_Init+0x8a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a16:	d00e      	beq.n	8001a36 <HAL_ADC_Init+0x8a>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a20:	d009      	beq.n	8001a36 <HAL_ADC_Init+0x8a>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001a2a:	d004      	beq.n	8001a36 <HAL_ADC_Init+0x8a>
 8001a2c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8001a30:	4886      	ldr	r0, [pc, #536]	; (8001c4c <HAL_ADC_Init+0x2a0>)
 8001a32:	f7ff fb6d 	bl	8001110 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d009      	beq.n	8001a52 <HAL_ADC_Init+0xa6>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a46:	d004      	beq.n	8001a52 <HAL_ADC_Init+0xa6>
 8001a48:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001a4c:	487f      	ldr	r0, [pc, #508]	; (8001c4c <HAL_ADC_Init+0x2a0>)
 8001a4e:	f7ff fb5f 	bl	8001110 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d009      	beq.n	8001a6e <HAL_ADC_Init+0xc2>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a62:	d004      	beq.n	8001a6e <HAL_ADC_Init+0xc2>
 8001a64:	f240 11c1 	movw	r1, #449	; 0x1c1
 8001a68:	4878      	ldr	r0, [pc, #480]	; (8001c4c <HAL_ADC_Init+0x2a0>)
 8001a6a:	f7ff fb51 	bl	8001110 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a76:	d008      	beq.n	8001a8a <HAL_ADC_Init+0xde>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d004      	beq.n	8001a8a <HAL_ADC_Init+0xde>
 8001a80:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8001a84:	4871      	ldr	r0, [pc, #452]	; (8001c4c <HAL_ADC_Init+0x2a0>)
 8001a86:	f7ff fb43 	bl	8001110 <assert_failed>
  assert_param(IS_ADC_AUTOWAIT(hadc->Init.LowPowerAutoWait));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d020      	beq.n	8001ad4 <HAL_ADC_Init+0x128>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	2b10      	cmp	r3, #16
 8001a98:	d01c      	beq.n	8001ad4 <HAL_ADC_Init+0x128>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	2b20      	cmp	r3, #32
 8001aa0:	d018      	beq.n	8001ad4 <HAL_ADC_Init+0x128>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	2b30      	cmp	r3, #48	; 0x30
 8001aa8:	d014      	beq.n	8001ad4 <HAL_ADC_Init+0x128>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	2b40      	cmp	r3, #64	; 0x40
 8001ab0:	d010      	beq.n	8001ad4 <HAL_ADC_Init+0x128>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	2b50      	cmp	r3, #80	; 0x50
 8001ab8:	d00c      	beq.n	8001ad4 <HAL_ADC_Init+0x128>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	2b60      	cmp	r3, #96	; 0x60
 8001ac0:	d008      	beq.n	8001ad4 <HAL_ADC_Init+0x128>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b70      	cmp	r3, #112	; 0x70
 8001ac8:	d004      	beq.n	8001ad4 <HAL_ADC_Init+0x128>
 8001aca:	f240 11c3 	movw	r1, #451	; 0x1c3
 8001ace:	485f      	ldr	r0, [pc, #380]	; (8001c4c <HAL_ADC_Init+0x2a0>)
 8001ad0:	f7ff fb1e 	bl	8001110 <assert_failed>
  assert_param(IS_ADC_AUTOPOWEROFF(hadc->Init.LowPowerAutoPowerOff));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d013      	beq.n	8001b04 <HAL_ADC_Init+0x158>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ae4:	d00e      	beq.n	8001b04 <HAL_ADC_Init+0x158>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aee:	d009      	beq.n	8001b04 <HAL_ADC_Init+0x158>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001af8:	d004      	beq.n	8001b04 <HAL_ADC_Init+0x158>
 8001afa:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8001afe:	4853      	ldr	r0, [pc, #332]	; (8001c4c <HAL_ADC_Init+0x2a0>)
 8001b00:	f7ff fb06 	bl	8001110 <assert_failed>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_ADC_Init+0x172>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d004      	beq.n	8001b1e <HAL_ADC_Init+0x172>
 8001b14:	f240 11c5 	movw	r1, #453	; 0x1c5
 8001b18:	484c      	ldr	r0, [pc, #304]	; (8001c4c <HAL_ADC_Init+0x2a0>)
 8001b1a:	f7ff faf9 	bl	8001110 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d009      	beq.n	8001b3c <HAL_ADC_Init+0x190>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d004      	beq.n	8001b3c <HAL_ADC_Init+0x190>
 8001b32:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8001b36:	4845      	ldr	r0, [pc, #276]	; (8001c4c <HAL_ADC_Init+0x2a0>)
 8001b38:	f7ff faea 	bl	8001110 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b44:	d03e      	beq.n	8001bc4 <HAL_ADC_Init+0x218>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001b4e:	d039      	beq.n	8001bc4 <HAL_ADC_Init+0x218>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b54:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001b58:	d034      	beq.n	8001bc4 <HAL_ADC_Init+0x218>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b5e:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8001b62:	d02f      	beq.n	8001bc4 <HAL_ADC_Init+0x218>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b6c:	d02a      	beq.n	8001bc4 <HAL_ADC_Init+0x218>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b76:	d025      	beq.n	8001bc4 <HAL_ADC_Init+0x218>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8001b80:	d020      	beq.n	8001bc4 <HAL_ADC_Init+0x218>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b86:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8001b8a:	d01b      	beq.n	8001bc4 <HAL_ADC_Init+0x218>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b90:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001b94:	d016      	beq.n	8001bc4 <HAL_ADC_Init+0x218>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d012      	beq.n	8001bc4 <HAL_ADC_Init+0x218>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba6:	d00d      	beq.n	8001bc4 <HAL_ADC_Init+0x218>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bac:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8001bb0:	d008      	beq.n	8001bc4 <HAL_ADC_Init+0x218>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb6:	2b10      	cmp	r3, #16
 8001bb8:	d004      	beq.n	8001bc4 <HAL_ADC_Init+0x218>
 8001bba:	f240 11c7 	movw	r1, #455	; 0x1c7
 8001bbe:	4823      	ldr	r0, [pc, #140]	; (8001c4c <HAL_ADC_Init+0x2a0>)
 8001bc0:	f7ff faa6 	bl	8001110 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d009      	beq.n	8001be2 <HAL_ADC_Init+0x236>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d004      	beq.n	8001be2 <HAL_ADC_Init+0x236>
 8001bd8:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8001bdc:	481b      	ldr	r0, [pc, #108]	; (8001c4c <HAL_ADC_Init+0x2a0>)
 8001bde:	f7ff fa97 	bl	8001110 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d032      	beq.n	8001c50 <HAL_ADC_Init+0x2a4>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_ADC_Init+0x24e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf6:	2b1c      	cmp	r3, #28
 8001bf8:	d904      	bls.n	8001c04 <HAL_ADC_Init+0x258>
 8001bfa:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8001bfe:	4813      	ldr	r0, [pc, #76]	; (8001c4c <HAL_ADC_Init+0x2a0>)
 8001c00:	f7ff fa86 	bl	8001110 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d009      	beq.n	8001c22 <HAL_ADC_Init+0x276>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d004      	beq.n	8001c22 <HAL_ADC_Init+0x276>
 8001c18:	f240 11cd 	movw	r1, #461	; 0x1cd
 8001c1c:	480b      	ldr	r0, [pc, #44]	; (8001c4c <HAL_ADC_Init+0x2a0>)
 8001c1e:	f7ff fa77 	bl	8001110 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d011      	beq.n	8001c50 <HAL_ADC_Init+0x2a4>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_ADC_Init+0x290>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d909      	bls.n	8001c50 <HAL_ADC_Init+0x2a4>
 8001c3c:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <HAL_ADC_Init+0x2a0>)
 8001c42:	f7ff fa65 	bl	8001110 <assert_failed>
 8001c46:	e003      	b.n	8001c50 <HAL_ADC_Init+0x2a4>
 8001c48:	40012400 	.word	0x40012400
 8001c4c:	0800a150 	.word	0x0800a150
    }
  }
      
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c54:	2b10      	cmp	r3, #16
 8001c56:	d017      	beq.n	8001c88 <HAL_ADC_Init+0x2dc>
  {
    assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d013      	beq.n	8001c88 <HAL_ADC_Init+0x2dc>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c68:	d00e      	beq.n	8001c88 <HAL_ADC_Init+0x2dc>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c72:	d009      	beq.n	8001c88 <HAL_ADC_Init+0x2dc>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001c7c:	d004      	beq.n	8001c88 <HAL_ADC_Init+0x2dc>
 8001c7e:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8001c82:	4896      	ldr	r0, [pc, #600]	; (8001edc <HAL_ADC_Init+0x530>)
 8001c84:	f7ff fa44 	bl	8001110 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d115      	bne.n	8001cbc <HAL_ADC_Init+0x310>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	4b90      	ldr	r3, [pc, #576]	; (8001ee0 <HAL_ADC_Init+0x534>)
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	4a8f      	ldr	r2, [pc, #572]	; (8001ee0 <HAL_ADC_Init+0x534>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6213      	str	r3, [r2, #32]
 8001caa:	4b8d      	ldr	r3, [pc, #564]	; (8001ee0 <HAL_ADC_Init+0x534>)
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7fe ff5a 	bl	8000b70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc0:	f003 0310 	and.w	r3, r3, #16
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f040 80ff 	bne.w	8001ec8 <HAL_ADC_Init+0x51c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cd2:	f023 0302 	bic.w	r3, r3, #2
 8001cd6:	f043 0202 	orr.w	r2, r3, #2
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001cde:	4b81      	ldr	r3, [pc, #516]	; (8001ee4 <HAL_ADC_Init+0x538>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	497e      	ldr	r1, [pc, #504]	; (8001ee4 <HAL_ADC_Init+0x538>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001cf8:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d00:	4619      	mov	r1, r3
 8001d02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d06:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	fa93 f3a3 	rbit	r3, r3
 8001d0e:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001d1c:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001d22:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d32:	fa93 f3a3 	rbit	r3, r3
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	fab3 f383 	clz	r3, r3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001d44:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d50:	2b10      	cmp	r3, #16
 8001d52:	d007      	beq.n	8001d64 <HAL_ADC_Init+0x3b8>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d60:	4313      	orrs	r3, r2
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d6e:	2b40      	cmp	r3, #64	; 0x40
 8001d70:	d04f      	beq.n	8001e12 <HAL_ADC_Init+0x466>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001d84:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6912      	ldr	r2, [r2, #16]
 8001d8a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001d8e:	d003      	beq.n	8001d98 <HAL_ADC_Init+0x3ec>
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6912      	ldr	r2, [r2, #16]
 8001d94:	2a01      	cmp	r2, #1
 8001d96:	d102      	bne.n	8001d9e <HAL_ADC_Init+0x3f2>
 8001d98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d9c:	e000      	b.n	8001da0 <HAL_ADC_Init+0x3f4>
 8001d9e:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001da0:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001da4:	4313      	orrs	r3, r2
 8001da6:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d125      	bne.n	8001dfe <HAL_ADC_Init+0x452>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d114      	bne.n	8001de6 <HAL_ADC_Init+0x43a>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001dc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	fa92 f2a2 	rbit	r2, r2
 8001dce:	617a      	str	r2, [r7, #20]
  return result;
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	fab2 f282 	clz	r2, r2
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	4093      	lsls	r3, r2
 8001dda:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001de0:	4313      	orrs	r3, r2
 8001de2:	633b      	str	r3, [r7, #48]	; 0x30
 8001de4:	e00b      	b.n	8001dfe <HAL_ADC_Init+0x452>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	f043 0220 	orr.w	r2, r3, #32
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df6:	f043 0201 	orr.w	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	4b38      	ldr	r3, [pc, #224]	; (8001ee8 <HAL_ADC_Init+0x53c>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e0e:	430b      	orrs	r3, r1
 8001e10:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	4b34      	ldr	r3, [pc, #208]	; (8001eec <HAL_ADC_Init+0x540>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e22:	430b      	orrs	r3, r1
 8001e24:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e2e:	d003      	beq.n	8001e38 <HAL_ADC_Init+0x48c>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d119      	bne.n	8001e6c <HAL_ADC_Init+0x4c0>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e46:	3b01      	subs	r3, #1
 8001e48:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001e4c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	fa92 f2a2 	rbit	r2, r2
 8001e54:	60fa      	str	r2, [r7, #12]
  return result;
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	fab2 f282 	clz	r2, r2
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	fa03 f202 	lsl.w	r2, r3, r2
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	631a      	str	r2, [r3, #48]	; 0x30
 8001e6a:	e007      	b.n	8001e7c <HAL_ADC_Init+0x4d0>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001e7a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <HAL_ADC_Init+0x544>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d10b      	bne.n	8001ea4 <HAL_ADC_Init+0x4f8>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e96:	f023 0303 	bic.w	r3, r3, #3
 8001e9a:	f043 0201 	orr.w	r2, r3, #1
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ea2:	e014      	b.n	8001ece <HAL_ADC_Init+0x522>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea8:	f023 0312 	bic.w	r3, r3, #18
 8001eac:	f043 0210 	orr.w	r2, r3, #16
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb8:	f043 0201 	orr.w	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001ec6:	e002      	b.n	8001ece <HAL_ADC_Init+0x522>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ece:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3738      	adds	r7, #56	; 0x38
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	0800a150 	.word	0x0800a150
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40012700 	.word	0x40012700
 8001ee8:	fcfc16ff 	.word	0xfcfc16ff
 8001eec:	c0fff189 	.word	0xc0fff189
 8001ef0:	bf80fffe 	.word	0xbf80fffe

08001ef4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a94      	ldr	r2, [pc, #592]	; (800215c <HAL_ADC_ConfigChannel+0x268>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d004      	beq.n	8001f1a <HAL_ADC_ConfigChannel+0x26>
 8001f10:	f240 7191 	movw	r1, #1937	; 0x791
 8001f14:	4892      	ldr	r0, [pc, #584]	; (8002160 <HAL_ADC_ConfigChannel+0x26c>)
 8001f16:	f7ff f8fb 	bl	8001110 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 8081 	beq.w	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d07c      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d078      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d074      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d070      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b05      	cmp	r3, #5
 8001f4a:	d06c      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b06      	cmp	r3, #6
 8001f52:	d068      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b07      	cmp	r3, #7
 8001f5a:	d064      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d060      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b09      	cmp	r3, #9
 8001f6a:	d05c      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b0a      	cmp	r3, #10
 8001f72:	d058      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b0b      	cmp	r3, #11
 8001f7a:	d054      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b0c      	cmp	r3, #12
 8001f82:	d050      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b0d      	cmp	r3, #13
 8001f8a:	d04c      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b0e      	cmp	r3, #14
 8001f92:	d048      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b0f      	cmp	r3, #15
 8001f9a:	d044      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b10      	cmp	r3, #16
 8001fa2:	d040      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b11      	cmp	r3, #17
 8001faa:	d03c      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b12      	cmp	r3, #18
 8001fb2:	d038      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b13      	cmp	r3, #19
 8001fba:	d034      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b14      	cmp	r3, #20
 8001fc2:	d030      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b15      	cmp	r3, #21
 8001fca:	d02c      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b16      	cmp	r3, #22
 8001fd2:	d028      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b17      	cmp	r3, #23
 8001fda:	d024      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b18      	cmp	r3, #24
 8001fe2:	d020      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b19      	cmp	r3, #25
 8001fea:	d01c      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b1a      	cmp	r3, #26
 8001ff2:	d018      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b1b      	cmp	r3, #27
 8001ffa:	d014      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b1c      	cmp	r3, #28
 8002002:	d010      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b1d      	cmp	r3, #29
 800200a:	d00c      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b1e      	cmp	r3, #30
 8002012:	d008      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b1f      	cmp	r3, #31
 800201a:	d004      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x132>
 800201c:	f240 7192 	movw	r1, #1938	; 0x792
 8002020:	484f      	ldr	r0, [pc, #316]	; (8002160 <HAL_ADC_ConfigChannel+0x26c>)
 8002022:	f7ff f875 	bl	8001110 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d070      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d06c      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b03      	cmp	r3, #3
 800203c:	d068      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b04      	cmp	r3, #4
 8002044:	d064      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b05      	cmp	r3, #5
 800204c:	d060      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b06      	cmp	r3, #6
 8002054:	d05c      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b07      	cmp	r3, #7
 800205c:	d058      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b08      	cmp	r3, #8
 8002064:	d054      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b09      	cmp	r3, #9
 800206c:	d050      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b0a      	cmp	r3, #10
 8002074:	d04c      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b0b      	cmp	r3, #11
 800207c:	d048      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b0c      	cmp	r3, #12
 8002084:	d044      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b0d      	cmp	r3, #13
 800208c:	d040      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b0e      	cmp	r3, #14
 8002094:	d03c      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b0f      	cmp	r3, #15
 800209c:	d038      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b10      	cmp	r3, #16
 80020a4:	d034      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b11      	cmp	r3, #17
 80020ac:	d030      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b12      	cmp	r3, #18
 80020b4:	d02c      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b13      	cmp	r3, #19
 80020bc:	d028      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b14      	cmp	r3, #20
 80020c4:	d024      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b15      	cmp	r3, #21
 80020cc:	d020      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b16      	cmp	r3, #22
 80020d4:	d01c      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b17      	cmp	r3, #23
 80020dc:	d018      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b18      	cmp	r3, #24
 80020e4:	d014      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b19      	cmp	r3, #25
 80020ec:	d010      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b1a      	cmp	r3, #26
 80020f4:	d00c      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b1b      	cmp	r3, #27
 80020fc:	d008      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b1c      	cmp	r3, #28
 8002104:	d004      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x21c>
 8002106:	f240 7193 	movw	r1, #1939	; 0x793
 800210a:	4815      	ldr	r0, [pc, #84]	; (8002160 <HAL_ADC_ConfigChannel+0x26c>)
 800210c:	f7ff f800 	bl	8001110 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d025      	beq.n	8002164 <HAL_ADC_ConfigChannel+0x270>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d021      	beq.n	8002164 <HAL_ADC_ConfigChannel+0x270>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d01d      	beq.n	8002164 <HAL_ADC_ConfigChannel+0x270>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d019      	beq.n	8002164 <HAL_ADC_ConfigChannel+0x270>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2b04      	cmp	r3, #4
 8002136:	d015      	beq.n	8002164 <HAL_ADC_ConfigChannel+0x270>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b05      	cmp	r3, #5
 800213e:	d011      	beq.n	8002164 <HAL_ADC_ConfigChannel+0x270>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b06      	cmp	r3, #6
 8002146:	d00d      	beq.n	8002164 <HAL_ADC_ConfigChannel+0x270>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b07      	cmp	r3, #7
 800214e:	d009      	beq.n	8002164 <HAL_ADC_ConfigChannel+0x270>
 8002150:	f240 7194 	movw	r1, #1940	; 0x794
 8002154:	4802      	ldr	r0, [pc, #8]	; (8002160 <HAL_ADC_ConfigChannel+0x26c>)
 8002156:	f7fe ffdb 	bl	8001110 <assert_failed>
 800215a:	e003      	b.n	8002164 <HAL_ADC_ConfigChannel+0x270>
 800215c:	40012400 	.word	0x40012400
 8002160:	0800a150 	.word	0x0800a150
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800216a:	2b01      	cmp	r3, #1
 800216c:	d101      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x27e>
 800216e:	2302      	movs	r3, #2
 8002170:	e14f      	b.n	8002412 <HAL_ADC_ConfigChannel+0x51e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b06      	cmp	r3, #6
 8002180:	d81c      	bhi.n	80021bc <HAL_ADC_ConfigChannel+0x2c8>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	3b05      	subs	r3, #5
 8002194:	221f      	movs	r2, #31
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	4019      	ands	r1, r3
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	3b05      	subs	r3, #5
 80021ae:	fa00 f203 	lsl.w	r2, r0, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40
 80021ba:	e07e      	b.n	80022ba <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b0c      	cmp	r3, #12
 80021c2:	d81c      	bhi.n	80021fe <HAL_ADC_ConfigChannel+0x30a>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	3b23      	subs	r3, #35	; 0x23
 80021d6:	221f      	movs	r2, #31
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	4019      	ands	r1, r3
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	3b23      	subs	r3, #35	; 0x23
 80021f0:	fa00 f203 	lsl.w	r2, r0, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80021fc:	e05d      	b.n	80022ba <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b12      	cmp	r3, #18
 8002204:	d81c      	bhi.n	8002240 <HAL_ADC_ConfigChannel+0x34c>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	3b41      	subs	r3, #65	; 0x41
 8002218:	221f      	movs	r2, #31
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	4019      	ands	r1, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	6818      	ldr	r0, [r3, #0]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	3b41      	subs	r3, #65	; 0x41
 8002232:	fa00 f203 	lsl.w	r2, r0, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	639a      	str	r2, [r3, #56]	; 0x38
 800223e:	e03c      	b.n	80022ba <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b18      	cmp	r3, #24
 8002246:	d81c      	bhi.n	8002282 <HAL_ADC_ConfigChannel+0x38e>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	3b5f      	subs	r3, #95	; 0x5f
 800225a:	221f      	movs	r2, #31
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	4019      	ands	r1, r3
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	3b5f      	subs	r3, #95	; 0x5f
 8002274:	fa00 f203 	lsl.w	r2, r0, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	635a      	str	r2, [r3, #52]	; 0x34
 8002280:	e01b      	b.n	80022ba <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	3b7d      	subs	r3, #125	; 0x7d
 8002294:	221f      	movs	r2, #31
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	4019      	ands	r1, r3
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	3b7d      	subs	r3, #125	; 0x7d
 80022ae:	fa00 f203 	lsl.w	r2, r0, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b09      	cmp	r3, #9
 80022c0:	d81a      	bhi.n	80022f8 <HAL_ADC_ConfigChannel+0x404>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6959      	ldr	r1, [r3, #20]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4613      	mov	r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	2207      	movs	r2, #7
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	4019      	ands	r1, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	6898      	ldr	r0, [r3, #8]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4613      	mov	r3, r2
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4413      	add	r3, r2
 80022ea:	fa00 f203 	lsl.w	r2, r0, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	615a      	str	r2, [r3, #20]
 80022f6:	e05d      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b13      	cmp	r3, #19
 80022fe:	d81c      	bhi.n	800233a <HAL_ADC_ConfigChannel+0x446>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6919      	ldr	r1, [r3, #16]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	4613      	mov	r3, r2
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4413      	add	r3, r2
 8002310:	3b1e      	subs	r3, #30
 8002312:	2207      	movs	r2, #7
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	4019      	ands	r1, r3
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	6898      	ldr	r0, [r3, #8]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4613      	mov	r3, r2
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4413      	add	r3, r2
 800232a:	3b1e      	subs	r3, #30
 800232c:	fa00 f203 	lsl.w	r2, r0, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	611a      	str	r2, [r3, #16]
 8002338:	e03c      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b1d      	cmp	r3, #29
 8002340:	d81c      	bhi.n	800237c <HAL_ADC_ConfigChannel+0x488>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68d9      	ldr	r1, [r3, #12]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4613      	mov	r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4413      	add	r3, r2
 8002352:	3b3c      	subs	r3, #60	; 0x3c
 8002354:	2207      	movs	r2, #7
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	4019      	ands	r1, r3
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6898      	ldr	r0, [r3, #8]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	4613      	mov	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4413      	add	r3, r2
 800236c:	3b3c      	subs	r3, #60	; 0x3c
 800236e:	fa00 f203 	lsl.w	r2, r0, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	e01b      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	4613      	mov	r3, r2
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4413      	add	r3, r2
 800238c:	3b5a      	subs	r3, #90	; 0x5a
 800238e:	2207      	movs	r2, #7
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	4019      	ands	r1, r3
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	6898      	ldr	r0, [r3, #8]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	3b5a      	subs	r3, #90	; 0x5a
 80023a8:	fa00 f203 	lsl.w	r2, r0, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b10      	cmp	r3, #16
 80023ba:	d003      	beq.n	80023c4 <HAL_ADC_ConfigChannel+0x4d0>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023c0:	2b11      	cmp	r3, #17
 80023c2:	d121      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x514>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80023c4:	4b15      	ldr	r3, [pc, #84]	; (800241c <HAL_ADC_ConfigChannel+0x528>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d11b      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x514>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80023d0:	4b12      	ldr	r3, [pc, #72]	; (800241c <HAL_ADC_ConfigChannel+0x528>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a11      	ldr	r2, [pc, #68]	; (800241c <HAL_ADC_ConfigChannel+0x528>)
 80023d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023da:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b10      	cmp	r3, #16
 80023e2:	d111      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x514>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80023e4:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <HAL_ADC_ConfigChannel+0x52c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0e      	ldr	r2, [pc, #56]	; (8002424 <HAL_ADC_ConfigChannel+0x530>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	0c9a      	lsrs	r2, r3, #18
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80023fa:	e002      	b.n	8002402 <HAL_ADC_ConfigChannel+0x50e>
          {
            wait_loop_index--;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	3b01      	subs	r3, #1
 8002400:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1f9      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x508>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002410:	7bfb      	ldrb	r3, [r7, #15]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40012700 	.word	0x40012700
 8002420:	20000000 	.word	0x20000000
 8002424:	431bde83 	.word	0x431bde83

08002428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <__NVIC_SetPriorityGrouping+0x44>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002444:	4013      	ands	r3, r2
 8002446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002450:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245a:	4a04      	ldr	r2, [pc, #16]	; (800246c <__NVIC_SetPriorityGrouping+0x44>)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	60d3      	str	r3, [r2, #12]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002474:	4b04      	ldr	r3, [pc, #16]	; (8002488 <__NVIC_GetPriorityGrouping+0x18>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	f003 0307 	and.w	r3, r3, #7
}
 800247e:	4618      	mov	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	2b00      	cmp	r3, #0
 800249c:	db0b      	blt.n	80024b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	f003 021f 	and.w	r2, r3, #31
 80024a4:	4906      	ldr	r1, [pc, #24]	; (80024c0 <__NVIC_EnableIRQ+0x34>)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	2001      	movs	r0, #1
 80024ae:	fa00 f202 	lsl.w	r2, r0, r2
 80024b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr
 80024c0:	e000e100 	.word	0xe000e100

080024c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	6039      	str	r1, [r7, #0]
 80024ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	db0a      	blt.n	80024ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	490c      	ldr	r1, [pc, #48]	; (8002510 <__NVIC_SetPriority+0x4c>)
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e2:	0112      	lsls	r2, r2, #4
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	440b      	add	r3, r1
 80024e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024ec:	e00a      	b.n	8002504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	4908      	ldr	r1, [pc, #32]	; (8002514 <__NVIC_SetPriority+0x50>)
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	3b04      	subs	r3, #4
 80024fc:	0112      	lsls	r2, r2, #4
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	440b      	add	r3, r1
 8002502:	761a      	strb	r2, [r3, #24]
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	e000e100 	.word	0xe000e100
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002518:	b480      	push	{r7}
 800251a:	b089      	sub	sp, #36	; 0x24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f1c3 0307 	rsb	r3, r3, #7
 8002532:	2b04      	cmp	r3, #4
 8002534:	bf28      	it	cs
 8002536:	2304      	movcs	r3, #4
 8002538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	3304      	adds	r3, #4
 800253e:	2b06      	cmp	r3, #6
 8002540:	d902      	bls.n	8002548 <NVIC_EncodePriority+0x30>
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3b03      	subs	r3, #3
 8002546:	e000      	b.n	800254a <NVIC_EncodePriority+0x32>
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800254c:	f04f 32ff 	mov.w	r2, #4294967295
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43da      	mvns	r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	401a      	ands	r2, r3
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002560:	f04f 31ff 	mov.w	r1, #4294967295
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	fa01 f303 	lsl.w	r3, r1, r3
 800256a:	43d9      	mvns	r1, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002570:	4313      	orrs	r3, r2
         );
}
 8002572:	4618      	mov	r0, r3
 8002574:	3724      	adds	r7, #36	; 0x24
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr

0800257c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b07      	cmp	r3, #7
 8002588:	d00f      	beq.n	80025aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b06      	cmp	r3, #6
 800258e:	d00c      	beq.n	80025aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b05      	cmp	r3, #5
 8002594:	d009      	beq.n	80025aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b04      	cmp	r3, #4
 800259a:	d006      	beq.n	80025aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d003      	beq.n	80025aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80025a2:	21ac      	movs	r1, #172	; 0xac
 80025a4:	4804      	ldr	r0, [pc, #16]	; (80025b8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80025a6:	f7fe fdb3 	bl	8001110 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ff3c 	bl	8002428 <__NVIC_SetPriorityGrouping>
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	0800a188 	.word	0x0800a188

080025bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b0f      	cmp	r3, #15
 80025d2:	d903      	bls.n	80025dc <HAL_NVIC_SetPriority+0x20>
 80025d4:	21c4      	movs	r1, #196	; 0xc4
 80025d6:	480e      	ldr	r0, [pc, #56]	; (8002610 <HAL_NVIC_SetPriority+0x54>)
 80025d8:	f7fe fd9a 	bl	8001110 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2b0f      	cmp	r3, #15
 80025e0:	d903      	bls.n	80025ea <HAL_NVIC_SetPriority+0x2e>
 80025e2:	21c5      	movs	r1, #197	; 0xc5
 80025e4:	480a      	ldr	r0, [pc, #40]	; (8002610 <HAL_NVIC_SetPriority+0x54>)
 80025e6:	f7fe fd93 	bl	8001110 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025ea:	f7ff ff41 	bl	8002470 <__NVIC_GetPriorityGrouping>
 80025ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	68b9      	ldr	r1, [r7, #8]
 80025f4:	6978      	ldr	r0, [r7, #20]
 80025f6:	f7ff ff8f 	bl	8002518 <NVIC_EncodePriority>
 80025fa:	4602      	mov	r2, r0
 80025fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002600:	4611      	mov	r1, r2
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff ff5e 	bl	80024c4 <__NVIC_SetPriority>
}
 8002608:	bf00      	nop
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	0800a188 	.word	0x0800a188

08002614 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	2b00      	cmp	r3, #0
 8002624:	da03      	bge.n	800262e <HAL_NVIC_EnableIRQ+0x1a>
 8002626:	21d8      	movs	r1, #216	; 0xd8
 8002628:	4805      	ldr	r0, [pc, #20]	; (8002640 <HAL_NVIC_EnableIRQ+0x2c>)
 800262a:	f7fe fd71 	bl	8001110 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff ff2a 	bl	800248c <__NVIC_EnableIRQ>
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	0800a188 	.word	0x0800a188

08002644 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e109      	b.n	800286a <HAL_DMA_Init+0x226>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a86      	ldr	r2, [pc, #536]	; (8002874 <HAL_DMA_Init+0x230>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d03a      	beq.n	80026d6 <HAL_DMA_Init+0x92>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a84      	ldr	r2, [pc, #528]	; (8002878 <HAL_DMA_Init+0x234>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d035      	beq.n	80026d6 <HAL_DMA_Init+0x92>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a83      	ldr	r2, [pc, #524]	; (800287c <HAL_DMA_Init+0x238>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d030      	beq.n	80026d6 <HAL_DMA_Init+0x92>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a81      	ldr	r2, [pc, #516]	; (8002880 <HAL_DMA_Init+0x23c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d02b      	beq.n	80026d6 <HAL_DMA_Init+0x92>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a80      	ldr	r2, [pc, #512]	; (8002884 <HAL_DMA_Init+0x240>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d026      	beq.n	80026d6 <HAL_DMA_Init+0x92>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a7e      	ldr	r2, [pc, #504]	; (8002888 <HAL_DMA_Init+0x244>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d021      	beq.n	80026d6 <HAL_DMA_Init+0x92>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a7d      	ldr	r2, [pc, #500]	; (800288c <HAL_DMA_Init+0x248>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d01c      	beq.n	80026d6 <HAL_DMA_Init+0x92>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a7b      	ldr	r2, [pc, #492]	; (8002890 <HAL_DMA_Init+0x24c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d017      	beq.n	80026d6 <HAL_DMA_Init+0x92>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a7a      	ldr	r2, [pc, #488]	; (8002894 <HAL_DMA_Init+0x250>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d012      	beq.n	80026d6 <HAL_DMA_Init+0x92>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a78      	ldr	r2, [pc, #480]	; (8002898 <HAL_DMA_Init+0x254>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d00d      	beq.n	80026d6 <HAL_DMA_Init+0x92>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a77      	ldr	r2, [pc, #476]	; (800289c <HAL_DMA_Init+0x258>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d008      	beq.n	80026d6 <HAL_DMA_Init+0x92>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a75      	ldr	r2, [pc, #468]	; (80028a0 <HAL_DMA_Init+0x25c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d003      	beq.n	80026d6 <HAL_DMA_Init+0x92>
 80026ce:	219a      	movs	r1, #154	; 0x9a
 80026d0:	4874      	ldr	r0, [pc, #464]	; (80028a4 <HAL_DMA_Init+0x260>)
 80026d2:	f7fe fd1d 	bl	8001110 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00c      	beq.n	80026f8 <HAL_DMA_Init+0xb4>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b10      	cmp	r3, #16
 80026e4:	d008      	beq.n	80026f8 <HAL_DMA_Init+0xb4>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026ee:	d003      	beq.n	80026f8 <HAL_DMA_Init+0xb4>
 80026f0:	219b      	movs	r1, #155	; 0x9b
 80026f2:	486c      	ldr	r0, [pc, #432]	; (80028a4 <HAL_DMA_Init+0x260>)
 80026f4:	f7fe fd0c 	bl	8001110 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2b40      	cmp	r3, #64	; 0x40
 80026fe:	d007      	beq.n	8002710 <HAL_DMA_Init+0xcc>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_DMA_Init+0xcc>
 8002708:	219c      	movs	r1, #156	; 0x9c
 800270a:	4866      	ldr	r0, [pc, #408]	; (80028a4 <HAL_DMA_Init+0x260>)
 800270c:	f7fe fd00 	bl	8001110 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	2b80      	cmp	r3, #128	; 0x80
 8002716:	d007      	beq.n	8002728 <HAL_DMA_Init+0xe4>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_DMA_Init+0xe4>
 8002720:	219d      	movs	r1, #157	; 0x9d
 8002722:	4860      	ldr	r0, [pc, #384]	; (80028a4 <HAL_DMA_Init+0x260>)
 8002724:	f7fe fcf4 	bl	8001110 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00d      	beq.n	800274c <HAL_DMA_Init+0x108>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002738:	d008      	beq.n	800274c <HAL_DMA_Init+0x108>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002742:	d003      	beq.n	800274c <HAL_DMA_Init+0x108>
 8002744:	219e      	movs	r1, #158	; 0x9e
 8002746:	4857      	ldr	r0, [pc, #348]	; (80028a4 <HAL_DMA_Init+0x260>)
 8002748:	f7fe fce2 	bl	8001110 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00d      	beq.n	8002770 <HAL_DMA_Init+0x12c>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800275c:	d008      	beq.n	8002770 <HAL_DMA_Init+0x12c>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002766:	d003      	beq.n	8002770 <HAL_DMA_Init+0x12c>
 8002768:	219f      	movs	r1, #159	; 0x9f
 800276a:	484e      	ldr	r0, [pc, #312]	; (80028a4 <HAL_DMA_Init+0x260>)
 800276c:	f7fe fcd0 	bl	8001110 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d007      	beq.n	8002788 <HAL_DMA_Init+0x144>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	2b20      	cmp	r3, #32
 800277e:	d003      	beq.n	8002788 <HAL_DMA_Init+0x144>
 8002780:	21a0      	movs	r1, #160	; 0xa0
 8002782:	4848      	ldr	r0, [pc, #288]	; (80028a4 <HAL_DMA_Init+0x260>)
 8002784:	f7fe fcc4 	bl	8001110 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d012      	beq.n	80027b6 <HAL_DMA_Init+0x172>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002798:	d00d      	beq.n	80027b6 <HAL_DMA_Init+0x172>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027a2:	d008      	beq.n	80027b6 <HAL_DMA_Init+0x172>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80027ac:	d003      	beq.n	80027b6 <HAL_DMA_Init+0x172>
 80027ae:	21a1      	movs	r1, #161	; 0xa1
 80027b0:	483c      	ldr	r0, [pc, #240]	; (80028a4 <HAL_DMA_Init+0x260>)
 80027b2:	f7fe fcad 	bl	8001110 <assert_failed>

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	4b3a      	ldr	r3, [pc, #232]	; (80028a8 <HAL_DMA_Init+0x264>)
 80027be:	429a      	cmp	r2, r3
 80027c0:	d80f      	bhi.n	80027e2 <HAL_DMA_Init+0x19e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	4b38      	ldr	r3, [pc, #224]	; (80028ac <HAL_DMA_Init+0x268>)
 80027ca:	4413      	add	r3, r2
 80027cc:	4a38      	ldr	r2, [pc, #224]	; (80028b0 <HAL_DMA_Init+0x26c>)
 80027ce:	fba2 2303 	umull	r2, r3, r2, r3
 80027d2:	091b      	lsrs	r3, r3, #4
 80027d4:	009a      	lsls	r2, r3, #2
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a35      	ldr	r2, [pc, #212]	; (80028b4 <HAL_DMA_Init+0x270>)
 80027de:	63da      	str	r2, [r3, #60]	; 0x3c
 80027e0:	e00e      	b.n	8002800 <HAL_DMA_Init+0x1bc>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	4b33      	ldr	r3, [pc, #204]	; (80028b8 <HAL_DMA_Init+0x274>)
 80027ea:	4413      	add	r3, r2
 80027ec:	4a30      	ldr	r2, [pc, #192]	; (80028b0 <HAL_DMA_Init+0x26c>)
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	091b      	lsrs	r3, r3, #4
 80027f4:	009a      	lsls	r2, r3, #2
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a2f      	ldr	r2, [pc, #188]	; (80028bc <HAL_DMA_Init+0x278>)
 80027fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002824:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002830:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800283c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4313      	orrs	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40026008 	.word	0x40026008
 8002878:	4002601c 	.word	0x4002601c
 800287c:	40026030 	.word	0x40026030
 8002880:	40026044 	.word	0x40026044
 8002884:	40026058 	.word	0x40026058
 8002888:	4002606c 	.word	0x4002606c
 800288c:	40026080 	.word	0x40026080
 8002890:	40026408 	.word	0x40026408
 8002894:	4002641c 	.word	0x4002641c
 8002898:	40026430 	.word	0x40026430
 800289c:	40026444 	.word	0x40026444
 80028a0:	40026458 	.word	0x40026458
 80028a4:	0800a1c4 	.word	0x0800a1c4
 80028a8:	40026407 	.word	0x40026407
 80028ac:	bffd9ff8 	.word	0xbffd9ff8
 80028b0:	cccccccd 	.word	0xcccccccd
 80028b4:	40026000 	.word	0x40026000
 80028b8:	bffd9bf8 	.word	0xbffd9bf8
 80028bc:	40026400 	.word	0x40026400

080028c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
 80028cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_DMA_Start_IT+0x20>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028de:	d304      	bcc.n	80028ea <HAL_DMA_Start_IT+0x2a>
 80028e0:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 80028e4:	482c      	ldr	r0, [pc, #176]	; (8002998 <HAL_DMA_Start_IT+0xd8>)
 80028e6:	f7fe fc13 	bl	8001110 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_DMA_Start_IT+0x38>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e04b      	b.n	8002990 <HAL_DMA_Start_IT+0xd0>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b01      	cmp	r3, #1
 800290a:	d13a      	bne.n	8002982 <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0201 	bic.w	r2, r2, #1
 8002928:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	68b9      	ldr	r1, [r7, #8]
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 f8e2 	bl	8002afa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293a:	2b00      	cmp	r3, #0
 800293c:	d008      	beq.n	8002950 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 020e 	orr.w	r2, r2, #14
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	e00f      	b.n	8002970 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0204 	bic.w	r2, r2, #4
 800295e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 020a 	orr.w	r2, r2, #10
 800296e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0201 	orr.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	e005      	b.n	800298e <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800298a:	2302      	movs	r3, #2
 800298c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800298e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	0800a1c4 	.word	0x0800a1c4

0800299c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	f003 031c 	and.w	r3, r3, #28
 80029bc:	2204      	movs	r2, #4
 80029be:	409a      	lsls	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d026      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x7a>
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d021      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d107      	bne.n	80029f0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0204 	bic.w	r2, r2, #4
 80029ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	f003 021c 	and.w	r2, r3, #28
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fc:	2104      	movs	r1, #4
 80029fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002a02:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d071      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002a14:	e06c      	b.n	8002af0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f003 031c 	and.w	r3, r3, #28
 8002a1e:	2202      	movs	r2, #2
 8002a20:	409a      	lsls	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4013      	ands	r3, r2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d02e      	beq.n	8002a88 <HAL_DMA_IRQHandler+0xec>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d029      	beq.n	8002a88 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10b      	bne.n	8002a5a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 020a 	bic.w	r2, r2, #10
 8002a50:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f003 021c 	and.w	r2, r3, #28
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a66:	2102      	movs	r1, #2
 8002a68:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d038      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a86:	e033      	b.n	8002af0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	f003 031c 	and.w	r3, r3, #28
 8002a90:	2208      	movs	r2, #8
 8002a92:	409a      	lsls	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d02a      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x156>
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d025      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 020e 	bic.w	r2, r2, #14
 8002ab4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f003 021c 	and.w	r2, r3, #28
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d004      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
}
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b085      	sub	sp, #20
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	607a      	str	r2, [r7, #4]
 8002b06:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	f003 021c 	and.w	r2, r3, #28
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b14:	2101      	movs	r1, #1
 8002b16:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b10      	cmp	r3, #16
 8002b2a:	d108      	bne.n	8002b3e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b3c:	e007      	b.n	8002b4e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	60da      	str	r2, [r3, #12]
}
 8002b4e:	bf00      	nop
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a3f      	ldr	r2, [pc, #252]	; (8002c70 <HAL_GPIO_Init+0x118>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d01f      	beq.n	8002bb6 <HAL_GPIO_Init+0x5e>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a3e      	ldr	r2, [pc, #248]	; (8002c74 <HAL_GPIO_Init+0x11c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d01b      	beq.n	8002bb6 <HAL_GPIO_Init+0x5e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a3d      	ldr	r2, [pc, #244]	; (8002c78 <HAL_GPIO_Init+0x120>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d017      	beq.n	8002bb6 <HAL_GPIO_Init+0x5e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a3c      	ldr	r2, [pc, #240]	; (8002c7c <HAL_GPIO_Init+0x124>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d013      	beq.n	8002bb6 <HAL_GPIO_Init+0x5e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a3b      	ldr	r2, [pc, #236]	; (8002c80 <HAL_GPIO_Init+0x128>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00f      	beq.n	8002bb6 <HAL_GPIO_Init+0x5e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a3a      	ldr	r2, [pc, #232]	; (8002c84 <HAL_GPIO_Init+0x12c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d00b      	beq.n	8002bb6 <HAL_GPIO_Init+0x5e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a39      	ldr	r2, [pc, #228]	; (8002c88 <HAL_GPIO_Init+0x130>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d007      	beq.n	8002bb6 <HAL_GPIO_Init+0x5e>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a38      	ldr	r2, [pc, #224]	; (8002c8c <HAL_GPIO_Init+0x134>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0x5e>
 8002bae:	21b9      	movs	r1, #185	; 0xb9
 8002bb0:	4837      	ldr	r0, [pc, #220]	; (8002c90 <HAL_GPIO_Init+0x138>)
 8002bb2:	f7fe faad 	bl	8001110 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_GPIO_Init+0x74>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	0c1b      	lsrs	r3, r3, #16
 8002bc6:	041b      	lsls	r3, r3, #16
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_GPIO_Init+0x7c>
 8002bcc:	21ba      	movs	r1, #186	; 0xba
 8002bce:	4830      	ldr	r0, [pc, #192]	; (8002c90 <HAL_GPIO_Init+0x138>)
 8002bd0:	f7fe fa9e 	bl	8001110 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d035      	beq.n	8002c48 <HAL_GPIO_Init+0xf0>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d031      	beq.n	8002c48 <HAL_GPIO_Init+0xf0>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b11      	cmp	r3, #17
 8002bea:	d02d      	beq.n	8002c48 <HAL_GPIO_Init+0xf0>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d029      	beq.n	8002c48 <HAL_GPIO_Init+0xf0>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b12      	cmp	r3, #18
 8002bfa:	d025      	beq.n	8002c48 <HAL_GPIO_Init+0xf0>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	4a24      	ldr	r2, [pc, #144]	; (8002c94 <HAL_GPIO_Init+0x13c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d020      	beq.n	8002c48 <HAL_GPIO_Init+0xf0>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	4a23      	ldr	r2, [pc, #140]	; (8002c98 <HAL_GPIO_Init+0x140>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d01b      	beq.n	8002c48 <HAL_GPIO_Init+0xf0>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	4a21      	ldr	r2, [pc, #132]	; (8002c9c <HAL_GPIO_Init+0x144>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d016      	beq.n	8002c48 <HAL_GPIO_Init+0xf0>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	4a20      	ldr	r2, [pc, #128]	; (8002ca0 <HAL_GPIO_Init+0x148>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d011      	beq.n	8002c48 <HAL_GPIO_Init+0xf0>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	4a1e      	ldr	r2, [pc, #120]	; (8002ca4 <HAL_GPIO_Init+0x14c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d00c      	beq.n	8002c48 <HAL_GPIO_Init+0xf0>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4a1d      	ldr	r2, [pc, #116]	; (8002ca8 <HAL_GPIO_Init+0x150>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d007      	beq.n	8002c48 <HAL_GPIO_Init+0xf0>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d003      	beq.n	8002c48 <HAL_GPIO_Init+0xf0>
 8002c40:	21bb      	movs	r1, #187	; 0xbb
 8002c42:	4813      	ldr	r0, [pc, #76]	; (8002c90 <HAL_GPIO_Init+0x138>)
 8002c44:	f7fe fa64 	bl	8001110 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 81e4 	beq.w	800301a <HAL_GPIO_Init+0x4c2>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	f000 81df 	beq.w	800301a <HAL_GPIO_Init+0x4c2>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	f000 81da 	beq.w	800301a <HAL_GPIO_Init+0x4c2>
 8002c66:	21bc      	movs	r1, #188	; 0xbc
 8002c68:	4809      	ldr	r0, [pc, #36]	; (8002c90 <HAL_GPIO_Init+0x138>)
 8002c6a:	f7fe fa51 	bl	8001110 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002c6e:	e1d4      	b.n	800301a <HAL_GPIO_Init+0x4c2>
 8002c70:	40020000 	.word	0x40020000
 8002c74:	40020400 	.word	0x40020400
 8002c78:	40020800 	.word	0x40020800
 8002c7c:	40020c00 	.word	0x40020c00
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40021800 	.word	0x40021800
 8002c88:	40021c00 	.word	0x40021c00
 8002c8c:	40021400 	.word	0x40021400
 8002c90:	0800a1fc 	.word	0x0800a1fc
 8002c94:	10110000 	.word	0x10110000
 8002c98:	10210000 	.word	0x10210000
 8002c9c:	10310000 	.word	0x10310000
 8002ca0:	10120000 	.word	0x10120000
 8002ca4:	10220000 	.word	0x10220000
 8002ca8:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 81a8 	beq.w	8003014 <HAL_GPIO_Init+0x4bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d003      	beq.n	8002cd4 <HAL_GPIO_Init+0x17c>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b12      	cmp	r3, #18
 8002cd2:	d14f      	bne.n	8002d74 <HAL_GPIO_Init+0x21c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a92      	ldr	r2, [pc, #584]	; (8002f20 <HAL_GPIO_Init+0x3c8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d01f      	beq.n	8002d1c <HAL_GPIO_Init+0x1c4>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a91      	ldr	r2, [pc, #580]	; (8002f24 <HAL_GPIO_Init+0x3cc>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d01b      	beq.n	8002d1c <HAL_GPIO_Init+0x1c4>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a90      	ldr	r2, [pc, #576]	; (8002f28 <HAL_GPIO_Init+0x3d0>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d017      	beq.n	8002d1c <HAL_GPIO_Init+0x1c4>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a8f      	ldr	r2, [pc, #572]	; (8002f2c <HAL_GPIO_Init+0x3d4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d013      	beq.n	8002d1c <HAL_GPIO_Init+0x1c4>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a8e      	ldr	r2, [pc, #568]	; (8002f30 <HAL_GPIO_Init+0x3d8>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d00f      	beq.n	8002d1c <HAL_GPIO_Init+0x1c4>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a8d      	ldr	r2, [pc, #564]	; (8002f34 <HAL_GPIO_Init+0x3dc>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d00b      	beq.n	8002d1c <HAL_GPIO_Init+0x1c4>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a8c      	ldr	r2, [pc, #560]	; (8002f38 <HAL_GPIO_Init+0x3e0>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d007      	beq.n	8002d1c <HAL_GPIO_Init+0x1c4>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a8b      	ldr	r2, [pc, #556]	; (8002f3c <HAL_GPIO_Init+0x3e4>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d003      	beq.n	8002d1c <HAL_GPIO_Init+0x1c4>
 8002d14:	21cb      	movs	r1, #203	; 0xcb
 8002d16:	488a      	ldr	r0, [pc, #552]	; (8002f40 <HAL_GPIO_Init+0x3e8>)
 8002d18:	f7fe f9fa 	bl	8001110 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	2b0f      	cmp	r3, #15
 8002d22:	d903      	bls.n	8002d2c <HAL_GPIO_Init+0x1d4>
 8002d24:	21cc      	movs	r1, #204	; 0xcc
 8002d26:	4886      	ldr	r0, [pc, #536]	; (8002f40 <HAL_GPIO_Init+0x3e8>)
 8002d28:	f7fe f9f2 	bl	8001110 <assert_failed>
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	08da      	lsrs	r2, r3, #3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3208      	adds	r2, #8
 8002d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	220f      	movs	r2, #15
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	08da      	lsrs	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3208      	adds	r2, #8
 8002d6e:	6939      	ldr	r1, [r7, #16]
 8002d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	2203      	movs	r2, #3
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 0203 	and.w	r2, r3, #3
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d00b      	beq.n	8002dc8 <HAL_GPIO_Init+0x270>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d007      	beq.n	8002dc8 <HAL_GPIO_Init+0x270>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dbc:	2b11      	cmp	r3, #17
 8002dbe:	d003      	beq.n	8002dc8 <HAL_GPIO_Init+0x270>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b12      	cmp	r3, #18
 8002dc6:	d144      	bne.n	8002e52 <HAL_GPIO_Init+0x2fa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00f      	beq.n	8002df0 <HAL_GPIO_Init+0x298>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d00b      	beq.n	8002df0 <HAL_GPIO_Init+0x298>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d007      	beq.n	8002df0 <HAL_GPIO_Init+0x298>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d003      	beq.n	8002df0 <HAL_GPIO_Init+0x298>
 8002de8:	21e1      	movs	r1, #225	; 0xe1
 8002dea:	4855      	ldr	r0, [pc, #340]	; (8002f40 <HAL_GPIO_Init+0x3e8>)
 8002dec:	f7fe f990 	bl	8001110 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	4013      	ands	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002e26:	2201      	movs	r2, #1
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4013      	ands	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	091b      	lsrs	r3, r3, #4
 8002e3c:	f003 0201 	and.w	r2, r3, #1
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4013      	ands	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 80c2 	beq.w	8003014 <HAL_GPIO_Init+0x4bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e90:	4b2c      	ldr	r3, [pc, #176]	; (8002f44 <HAL_GPIO_Init+0x3ec>)
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	4a2b      	ldr	r2, [pc, #172]	; (8002f44 <HAL_GPIO_Init+0x3ec>)
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	6213      	str	r3, [r2, #32]
 8002e9c:	4b29      	ldr	r3, [pc, #164]	; (8002f44 <HAL_GPIO_Init+0x3ec>)
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8002ea8:	4a27      	ldr	r2, [pc, #156]	; (8002f48 <HAL_GPIO_Init+0x3f0>)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	089b      	lsrs	r3, r3, #2
 8002eae:	3302      	adds	r3, #2
 8002eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	220f      	movs	r2, #15
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a14      	ldr	r2, [pc, #80]	; (8002f20 <HAL_GPIO_Init+0x3c8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d03b      	beq.n	8002f4c <HAL_GPIO_Init+0x3f4>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a13      	ldr	r2, [pc, #76]	; (8002f24 <HAL_GPIO_Init+0x3cc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d01f      	beq.n	8002f1c <HAL_GPIO_Init+0x3c4>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a12      	ldr	r2, [pc, #72]	; (8002f28 <HAL_GPIO_Init+0x3d0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d019      	beq.n	8002f18 <HAL_GPIO_Init+0x3c0>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a11      	ldr	r2, [pc, #68]	; (8002f2c <HAL_GPIO_Init+0x3d4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d013      	beq.n	8002f14 <HAL_GPIO_Init+0x3bc>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a10      	ldr	r2, [pc, #64]	; (8002f30 <HAL_GPIO_Init+0x3d8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d00d      	beq.n	8002f10 <HAL_GPIO_Init+0x3b8>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a11      	ldr	r2, [pc, #68]	; (8002f3c <HAL_GPIO_Init+0x3e4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d007      	beq.n	8002f0c <HAL_GPIO_Init+0x3b4>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a0d      	ldr	r2, [pc, #52]	; (8002f34 <HAL_GPIO_Init+0x3dc>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d101      	bne.n	8002f08 <HAL_GPIO_Init+0x3b0>
 8002f04:	2306      	movs	r3, #6
 8002f06:	e022      	b.n	8002f4e <HAL_GPIO_Init+0x3f6>
 8002f08:	2307      	movs	r3, #7
 8002f0a:	e020      	b.n	8002f4e <HAL_GPIO_Init+0x3f6>
 8002f0c:	2305      	movs	r3, #5
 8002f0e:	e01e      	b.n	8002f4e <HAL_GPIO_Init+0x3f6>
 8002f10:	2304      	movs	r3, #4
 8002f12:	e01c      	b.n	8002f4e <HAL_GPIO_Init+0x3f6>
 8002f14:	2303      	movs	r3, #3
 8002f16:	e01a      	b.n	8002f4e <HAL_GPIO_Init+0x3f6>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e018      	b.n	8002f4e <HAL_GPIO_Init+0x3f6>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e016      	b.n	8002f4e <HAL_GPIO_Init+0x3f6>
 8002f20:	40020000 	.word	0x40020000
 8002f24:	40020400 	.word	0x40020400
 8002f28:	40020800 	.word	0x40020800
 8002f2c:	40020c00 	.word	0x40020c00
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40021800 	.word	0x40021800
 8002f38:	40021c00 	.word	0x40021c00
 8002f3c:	40021400 	.word	0x40021400
 8002f40:	0800a1fc 	.word	0x0800a1fc
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40010000 	.word	0x40010000
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	f002 0203 	and.w	r2, r2, #3
 8002f54:	0092      	lsls	r2, r2, #2
 8002f56:	4093      	lsls	r3, r2
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f5e:	4935      	ldr	r1, [pc, #212]	; (8003034 <HAL_GPIO_Init+0x4dc>)
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	089b      	lsrs	r3, r3, #2
 8002f64:	3302      	adds	r3, #2
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f6c:	4b32      	ldr	r3, [pc, #200]	; (8003038 <HAL_GPIO_Init+0x4e0>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	43db      	mvns	r3, r3
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_GPIO_Init+0x438>
        {
          SET_BIT(temp, iocurrent); 
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f90:	4a29      	ldr	r2, [pc, #164]	; (8003038 <HAL_GPIO_Init+0x4e0>)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f96:	4b28      	ldr	r3, [pc, #160]	; (8003038 <HAL_GPIO_Init+0x4e0>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_GPIO_Init+0x462>
        {
          SET_BIT(temp, iocurrent); 
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002fba:	4a1f      	ldr	r2, [pc, #124]	; (8003038 <HAL_GPIO_Init+0x4e0>)
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fc0:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <HAL_GPIO_Init+0x4e0>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_GPIO_Init+0x48c>
        {
          SET_BIT(temp, iocurrent); 
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002fe4:	4a14      	ldr	r2, [pc, #80]	; (8003038 <HAL_GPIO_Init+0x4e0>)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fea:	4b13      	ldr	r3, [pc, #76]	; (8003038 <HAL_GPIO_Init+0x4e0>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_GPIO_Init+0x4b6>
        {
          SET_BIT(temp, iocurrent); 
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800300e:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <HAL_GPIO_Init+0x4e0>)
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	3301      	adds	r3, #1
 8003018:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	fa22 f303 	lsr.w	r3, r2, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	f47f ae41 	bne.w	8002cac <HAL_GPIO_Init+0x154>
  } 
}
 800302a:	bf00      	nop
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40010000 	.word	0x40010000
 8003038:	40010400 	.word	0x40010400

0800303c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	807b      	strh	r3, [r7, #2]
 8003048:	4613      	mov	r3, r2
 800304a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800304c:	887b      	ldrh	r3, [r7, #2]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d004      	beq.n	800305c <HAL_GPIO_WritePin+0x20>
 8003052:	887b      	ldrh	r3, [r7, #2]
 8003054:	0c1b      	lsrs	r3, r3, #16
 8003056:	041b      	lsls	r3, r3, #16
 8003058:	2b00      	cmp	r3, #0
 800305a:	d004      	beq.n	8003066 <HAL_GPIO_WritePin+0x2a>
 800305c:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8003060:	480e      	ldr	r0, [pc, #56]	; (800309c <HAL_GPIO_WritePin+0x60>)
 8003062:	f7fe f855 	bl	8001110 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003066:	787b      	ldrb	r3, [r7, #1]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d007      	beq.n	800307c <HAL_GPIO_WritePin+0x40>
 800306c:	787b      	ldrb	r3, [r7, #1]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d004      	beq.n	800307c <HAL_GPIO_WritePin+0x40>
 8003072:	f240 11a5 	movw	r1, #421	; 0x1a5
 8003076:	4809      	ldr	r0, [pc, #36]	; (800309c <HAL_GPIO_WritePin+0x60>)
 8003078:	f7fe f84a 	bl	8001110 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800307c:	787b      	ldrb	r3, [r7, #1]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003082:	887a      	ldrh	r2, [r7, #2]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8003088:	e003      	b.n	8003092 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800308a:	887b      	ldrh	r3, [r7, #2]
 800308c:	041a      	lsls	r2, r3, #16
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	619a      	str	r2, [r3, #24]
}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	0800a1fc 	.word	0x0800a1fc

080030a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80030aa:	4b08      	ldr	r3, [pc, #32]	; (80030cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030ac:	695a      	ldr	r2, [r3, #20]
 80030ae:	88fb      	ldrh	r3, [r7, #6]
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d006      	beq.n	80030c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030b6:	4a05      	ldr	r2, [pc, #20]	; (80030cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030b8:	88fb      	ldrh	r3, [r7, #6]
 80030ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030bc:	88fb      	ldrh	r3, [r7, #6]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fd fc00 	bl	80008c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80030c4:	bf00      	nop
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40010400 	.word	0x40010400

080030d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e19b      	b.n	800341a <HAL_I2C_Init+0x34a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a98      	ldr	r2, [pc, #608]	; (8003348 <HAL_I2C_Init+0x278>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d009      	beq.n	8003100 <HAL_I2C_Init+0x30>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a96      	ldr	r2, [pc, #600]	; (800334c <HAL_I2C_Init+0x27c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d004      	beq.n	8003100 <HAL_I2C_Init+0x30>
 80030f6:	f240 11bb 	movw	r1, #443	; 0x1bb
 80030fa:	4895      	ldr	r0, [pc, #596]	; (8003350 <HAL_I2C_Init+0x280>)
 80030fc:	f7fe f808 	bl	8001110 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d004      	beq.n	8003112 <HAL_I2C_Init+0x42>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	4a91      	ldr	r2, [pc, #580]	; (8003354 <HAL_I2C_Init+0x284>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d904      	bls.n	800311c <HAL_I2C_Init+0x4c>
 8003112:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8003116:	488e      	ldr	r0, [pc, #568]	; (8003350 <HAL_I2C_Init+0x280>)
 8003118:	f7fd fffa 	bl	8001110 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d009      	beq.n	8003138 <HAL_I2C_Init+0x68>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800312c:	d004      	beq.n	8003138 <HAL_I2C_Init+0x68>
 800312e:	f240 11bd 	movw	r1, #445	; 0x1bd
 8003132:	4887      	ldr	r0, [pc, #540]	; (8003350 <HAL_I2C_Init+0x280>)
 8003134:	f7fd ffec 	bl	8001110 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003140:	f023 0303 	bic.w	r3, r3, #3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d004      	beq.n	8003152 <HAL_I2C_Init+0x82>
 8003148:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800314c:	4880      	ldr	r0, [pc, #512]	; (8003350 <HAL_I2C_Init+0x280>)
 800314e:	f7fd ffdf 	bl	8001110 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800315a:	d009      	beq.n	8003170 <HAL_I2C_Init+0xa0>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003164:	d004      	beq.n	8003170 <HAL_I2C_Init+0xa0>
 8003166:	f240 11bf 	movw	r1, #447	; 0x1bf
 800316a:	4879      	ldr	r0, [pc, #484]	; (8003350 <HAL_I2C_Init+0x280>)
 800316c:	f7fd ffd0 	bl	8001110 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d008      	beq.n	800318a <HAL_I2C_Init+0xba>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d004      	beq.n	800318a <HAL_I2C_Init+0xba>
 8003180:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8003184:	4872      	ldr	r0, [pc, #456]	; (8003350 <HAL_I2C_Init+0x280>)
 8003186:	f7fd ffc3 	bl	8001110 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003192:	2b00      	cmp	r3, #0
 8003194:	d004      	beq.n	80031a0 <HAL_I2C_Init+0xd0>
 8003196:	f240 11c1 	movw	r1, #449	; 0x1c1
 800319a:	486d      	ldr	r0, [pc, #436]	; (8003350 <HAL_I2C_Init+0x280>)
 800319c:	f7fd ffb8 	bl	8001110 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <HAL_I2C_Init+0xea>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	2b40      	cmp	r3, #64	; 0x40
 80031ae:	d004      	beq.n	80031ba <HAL_I2C_Init+0xea>
 80031b0:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80031b4:	4866      	ldr	r0, [pc, #408]	; (8003350 <HAL_I2C_Init+0x280>)
 80031b6:	f7fd ffab 	bl	8001110 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d008      	beq.n	80031d4 <HAL_I2C_Init+0x104>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	2b80      	cmp	r3, #128	; 0x80
 80031c8:	d004      	beq.n	80031d4 <HAL_I2C_Init+0x104>
 80031ca:	f240 11c3 	movw	r1, #451	; 0x1c3
 80031ce:	4860      	ldr	r0, [pc, #384]	; (8003350 <HAL_I2C_Init+0x280>)
 80031d0:	f7fd ff9e 	bl	8001110 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d106      	bne.n	80031ee <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7fd fec3 	bl	8000f74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2224      	movs	r2, #36	; 0x24
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0201 	bic.w	r2, r2, #1
 8003204:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003206:	f001 fdfd 	bl	8004e04 <HAL_RCC_GetPCLK1Freq>
 800320a:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	4a51      	ldr	r2, [pc, #324]	; (8003358 <HAL_I2C_Init+0x288>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d807      	bhi.n	8003226 <HAL_I2C_Init+0x156>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4a50      	ldr	r2, [pc, #320]	; (800335c <HAL_I2C_Init+0x28c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	bf94      	ite	ls
 800321e:	2301      	movls	r3, #1
 8003220:	2300      	movhi	r3, #0
 8003222:	b2db      	uxtb	r3, r3
 8003224:	e006      	b.n	8003234 <HAL_I2C_Init+0x164>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4a4d      	ldr	r2, [pc, #308]	; (8003360 <HAL_I2C_Init+0x290>)
 800322a:	4293      	cmp	r3, r2
 800322c:	bf94      	ite	ls
 800322e:	2301      	movls	r3, #1
 8003230:	2300      	movhi	r3, #0
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_I2C_Init+0x16c>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0ee      	b.n	800341a <HAL_I2C_Init+0x34a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4a49      	ldr	r2, [pc, #292]	; (8003364 <HAL_I2C_Init+0x294>)
 8003240:	fba2 2303 	umull	r2, r3, r2, r3
 8003244:	0c9b      	lsrs	r3, r3, #18
 8003246:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	430a      	orrs	r2, r1
 800325a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	4a3b      	ldr	r2, [pc, #236]	; (8003358 <HAL_I2C_Init+0x288>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d802      	bhi.n	8003276 <HAL_I2C_Init+0x1a6>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	3301      	adds	r3, #1
 8003274:	e009      	b.n	800328a <HAL_I2C_Init+0x1ba>
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800327c:	fb02 f303 	mul.w	r3, r2, r3
 8003280:	4a39      	ldr	r2, [pc, #228]	; (8003368 <HAL_I2C_Init+0x298>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	099b      	lsrs	r3, r3, #6
 8003288:	3301      	adds	r3, #1
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6812      	ldr	r2, [r2, #0]
 800328e:	430b      	orrs	r3, r1
 8003290:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800329c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	492c      	ldr	r1, [pc, #176]	; (8003358 <HAL_I2C_Init+0x288>)
 80032a6:	428b      	cmp	r3, r1
 80032a8:	d80d      	bhi.n	80032c6 <HAL_I2C_Init+0x1f6>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1e59      	subs	r1, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80032b8:	3301      	adds	r3, #1
 80032ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032be:	2b04      	cmp	r3, #4
 80032c0:	bf38      	it	cc
 80032c2:	2304      	movcc	r3, #4
 80032c4:	e062      	b.n	800338c <HAL_I2C_Init+0x2bc>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d111      	bne.n	80032f2 <HAL_I2C_Init+0x222>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1e58      	subs	r0, r3, #1
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6859      	ldr	r1, [r3, #4]
 80032d6:	460b      	mov	r3, r1
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	440b      	add	r3, r1
 80032dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80032e0:	3301      	adds	r3, #1
 80032e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	bf0c      	ite	eq
 80032ea:	2301      	moveq	r3, #1
 80032ec:	2300      	movne	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	e012      	b.n	8003318 <HAL_I2C_Init+0x248>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1e58      	subs	r0, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6859      	ldr	r1, [r3, #4]
 80032fa:	460b      	mov	r3, r1
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	0099      	lsls	r1, r3, #2
 8003302:	440b      	add	r3, r1
 8003304:	fbb0 f3f3 	udiv	r3, r0, r3
 8003308:	3301      	adds	r3, #1
 800330a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800330e:	2b00      	cmp	r3, #0
 8003310:	bf0c      	ite	eq
 8003312:	2301      	moveq	r3, #1
 8003314:	2300      	movne	r3, #0
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_I2C_Init+0x250>
 800331c:	2301      	movs	r3, #1
 800331e:	e035      	b.n	800338c <HAL_I2C_Init+0x2bc>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d121      	bne.n	800336c <HAL_I2C_Init+0x29c>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	1e58      	subs	r0, r3, #1
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6859      	ldr	r1, [r3, #4]
 8003330:	460b      	mov	r3, r1
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	440b      	add	r3, r1
 8003336:	fbb0 f3f3 	udiv	r3, r0, r3
 800333a:	3301      	adds	r3, #1
 800333c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003340:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003344:	e022      	b.n	800338c <HAL_I2C_Init+0x2bc>
 8003346:	bf00      	nop
 8003348:	40005400 	.word	0x40005400
 800334c:	40005800 	.word	0x40005800
 8003350:	0800a238 	.word	0x0800a238
 8003354:	00061a80 	.word	0x00061a80
 8003358:	000186a0 	.word	0x000186a0
 800335c:	001e847f 	.word	0x001e847f
 8003360:	003d08ff 	.word	0x003d08ff
 8003364:	431bde83 	.word	0x431bde83
 8003368:	10624dd3 	.word	0x10624dd3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1e58      	subs	r0, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6859      	ldr	r1, [r3, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	0099      	lsls	r1, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003382:	3301      	adds	r3, #1
 8003384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003388:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	6809      	ldr	r1, [r1, #0]
 8003390:	4313      	orrs	r3, r2
 8003392:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69da      	ldr	r2, [r3, #28]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6911      	ldr	r1, [r2, #16]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	68d2      	ldr	r2, [r2, #12]
 80033c6:	4311      	orrs	r1, r2
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	430b      	orrs	r3, r1
 80033ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695a      	ldr	r2, [r3, #20]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2220      	movs	r2, #32
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop

08003424 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b088      	sub	sp, #32
 8003428:	af02      	add	r7, sp, #8
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	607a      	str	r2, [r7, #4]
 800342e:	461a      	mov	r2, r3
 8003430:	460b      	mov	r3, r1
 8003432:	817b      	strh	r3, [r7, #10]
 8003434:	4613      	mov	r3, r2
 8003436:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003438:	f7fe faae 	bl	8001998 <HAL_GetTick>
 800343c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b20      	cmp	r3, #32
 8003448:	f040 80e0 	bne.w	800360c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	2319      	movs	r3, #25
 8003452:	2201      	movs	r2, #1
 8003454:	4970      	ldr	r1, [pc, #448]	; (8003618 <HAL_I2C_Master_Transmit+0x1f4>)
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 fc5a 	bl	8003d10 <I2C_WaitOnFlagUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003462:	2302      	movs	r3, #2
 8003464:	e0d3      	b.n	800360e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_I2C_Master_Transmit+0x50>
 8003470:	2302      	movs	r3, #2
 8003472:	e0cc      	b.n	800360e <HAL_I2C_Master_Transmit+0x1ea>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b01      	cmp	r3, #1
 8003488:	d007      	beq.n	800349a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 0201 	orr.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2221      	movs	r2, #33	; 0x21
 80034ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2210      	movs	r2, #16
 80034b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	893a      	ldrh	r2, [r7, #8]
 80034ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4a50      	ldr	r2, [pc, #320]	; (800361c <HAL_I2C_Master_Transmit+0x1f8>)
 80034da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034dc:	8979      	ldrh	r1, [r7, #10]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	6a3a      	ldr	r2, [r7, #32]
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 face 	bl	8003a84 <I2C_MasterRequestWrite>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e08d      	b.n	800360e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034f2:	2300      	movs	r3, #0
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003508:	e066      	b.n	80035d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	6a39      	ldr	r1, [r7, #32]
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 fcd4 	bl	8003ebc <I2C_WaitOnTXEFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00d      	beq.n	8003536 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	2b04      	cmp	r3, #4
 8003520:	d107      	bne.n	8003532 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003530:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e06b      	b.n	800360e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	781a      	ldrb	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003550:	b29b      	uxth	r3, r3
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355e:	3b01      	subs	r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b04      	cmp	r3, #4
 8003572:	d11b      	bne.n	80035ac <HAL_I2C_Master_Transmit+0x188>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003578:	2b00      	cmp	r3, #0
 800357a:	d017      	beq.n	80035ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	781a      	ldrb	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	6a39      	ldr	r1, [r7, #32]
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 fcc4 	bl	8003f3e <I2C_WaitOnBTFFlagUntilTimeout>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00d      	beq.n	80035d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d107      	bne.n	80035d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e01a      	b.n	800360e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d194      	bne.n	800350a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	e000      	b.n	800360e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800360c:	2302      	movs	r3, #2
  }
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	00100002 	.word	0x00100002
 800361c:	ffff0000 	.word	0xffff0000

08003620 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08c      	sub	sp, #48	; 0x30
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	4608      	mov	r0, r1
 800362a:	4611      	mov	r1, r2
 800362c:	461a      	mov	r2, r3
 800362e:	4603      	mov	r3, r0
 8003630:	817b      	strh	r3, [r7, #10]
 8003632:	460b      	mov	r3, r1
 8003634:	813b      	strh	r3, [r7, #8]
 8003636:	4613      	mov	r3, r2
 8003638:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800363a:	f7fe f9ad 	bl	8001998 <HAL_GetTick>
 800363e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d007      	beq.n	8003656 <HAL_I2C_Mem_Read+0x36>
 8003646:	88fb      	ldrh	r3, [r7, #6]
 8003648:	2b10      	cmp	r3, #16
 800364a:	d004      	beq.n	8003656 <HAL_I2C_Mem_Read+0x36>
 800364c:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8003650:	4881      	ldr	r0, [pc, #516]	; (8003858 <HAL_I2C_Mem_Read+0x238>)
 8003652:	f7fd fd5d 	bl	8001110 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b20      	cmp	r3, #32
 8003660:	f040 8209 	bne.w	8003a76 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	2319      	movs	r3, #25
 800366a:	2201      	movs	r2, #1
 800366c:	497b      	ldr	r1, [pc, #492]	; (800385c <HAL_I2C_Mem_Read+0x23c>)
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 fb4e 	bl	8003d10 <I2C_WaitOnFlagUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 800367a:	2302      	movs	r3, #2
 800367c:	e1fc      	b.n	8003a78 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_I2C_Mem_Read+0x6c>
 8003688:	2302      	movs	r3, #2
 800368a:	e1f5      	b.n	8003a78 <HAL_I2C_Mem_Read+0x458>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d007      	beq.n	80036b2 <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0201 	orr.w	r2, r2, #1
 80036b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036c0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2222      	movs	r2, #34	; 0x22
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2240      	movs	r2, #64	; 0x40
 80036ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80036e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4a5b      	ldr	r2, [pc, #364]	; (8003860 <HAL_I2C_Mem_Read+0x240>)
 80036f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036f4:	88f8      	ldrh	r0, [r7, #6]
 80036f6:	893a      	ldrh	r2, [r7, #8]
 80036f8:	8979      	ldrh	r1, [r7, #10]
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	9301      	str	r3, [sp, #4]
 80036fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	4603      	mov	r3, r0
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 fa33 	bl	8003b70 <I2C_RequestMemoryRead>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e1b1      	b.n	8003a78 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003718:	2b00      	cmp	r3, #0
 800371a:	d113      	bne.n	8003744 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800371c:	2300      	movs	r3, #0
 800371e:	623b      	str	r3, [r7, #32]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	623b      	str	r3, [r7, #32]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	623b      	str	r3, [r7, #32]
 8003730:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	e185      	b.n	8003a50 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003748:	2b01      	cmp	r3, #1
 800374a:	d11b      	bne.n	8003784 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800375a:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800375c:	2300      	movs	r3, #0
 800375e:	61fb      	str	r3, [r7, #28]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	61fb      	str	r3, [r7, #28]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	61fb      	str	r3, [r7, #28]
 8003770:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	e165      	b.n	8003a50 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003788:	2b02      	cmp	r3, #2
 800378a:	d11b      	bne.n	80037c4 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800379a:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037aa:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ac:	2300      	movs	r3, #0
 80037ae:	61bb      	str	r3, [r7, #24]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	61bb      	str	r3, [r7, #24]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	61bb      	str	r3, [r7, #24]
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	e145      	b.n	8003a50 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80037da:	e139      	b.n	8003a50 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	f200 80f2 	bhi.w	80039ca <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d123      	bne.n	8003836 <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 fbe4 	bl	8003fc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e13a      	b.n	8003a78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003834:	e10c      	b.n	8003a50 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383a:	2b02      	cmp	r3, #2
 800383c:	d14f      	bne.n	80038de <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003844:	2200      	movs	r2, #0
 8003846:	4907      	ldr	r1, [pc, #28]	; (8003864 <HAL_I2C_Mem_Read+0x244>)
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 fa61 	bl	8003d10 <I2C_WaitOnFlagUntilTimeout>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d009      	beq.n	8003868 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e10f      	b.n	8003a78 <HAL_I2C_Mem_Read+0x458>
 8003858:	0800a238 	.word	0x0800a238
 800385c:	00100002 	.word	0x00100002
 8003860:	ffff0000 	.word	0xffff0000
 8003864:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003876:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691a      	ldr	r2, [r3, #16]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	1c5a      	adds	r2, r3, #1
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038dc:	e0b8      	b.n	8003a50 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e4:	2200      	movs	r2, #0
 80038e6:	4966      	ldr	r1, [pc, #408]	; (8003a80 <HAL_I2C_Mem_Read+0x460>)
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 fa11 	bl	8003d10 <I2C_WaitOnFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0bf      	b.n	8003a78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003906:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691a      	ldr	r2, [r3, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003940:	2200      	movs	r2, #0
 8003942:	494f      	ldr	r1, [pc, #316]	; (8003a80 <HAL_I2C_Mem_Read+0x460>)
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 f9e3 	bl	8003d10 <I2C_WaitOnFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e091      	b.n	8003a78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003962:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	691a      	ldr	r2, [r3, #16]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398c:	b29b      	uxth	r3, r3
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039be:	b29b      	uxth	r3, r3
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039c8:	e042      	b.n	8003a50 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 faf6 	bl	8003fc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e04c      	b.n	8003a78 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d118      	bne.n	8003a50 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f47f aec1 	bne.w	80037dc <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	e000      	b.n	8003a78 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003a76:	2302      	movs	r3, #2
  }
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3728      	adds	r7, #40	; 0x28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	00010004 	.word	0x00010004

08003a84 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	607a      	str	r2, [r7, #4]
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	460b      	mov	r3, r1
 8003a92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a98:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d006      	beq.n	8003aae <I2C_MasterRequestWrite+0x2a>
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d003      	beq.n	8003aae <I2C_MasterRequestWrite+0x2a>
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003aac:	d108      	bne.n	8003ac0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	e00b      	b.n	8003ad8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac4:	2b12      	cmp	r3, #18
 8003ac6:	d107      	bne.n	8003ad8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ad6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 f913 	bl	8003d10 <I2C_WaitOnFlagUntilTimeout>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e035      	b.n	8003b60 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003afc:	d108      	bne.n	8003b10 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003afe:	897b      	ldrh	r3, [r7, #10]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	461a      	mov	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b0c:	611a      	str	r2, [r3, #16]
 8003b0e:	e01b      	b.n	8003b48 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b10:	897b      	ldrh	r3, [r7, #10]
 8003b12:	11db      	asrs	r3, r3, #7
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f003 0306 	and.w	r3, r3, #6
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	f063 030f 	orn	r3, r3, #15
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	490e      	ldr	r1, [pc, #56]	; (8003b68 <I2C_MasterRequestWrite+0xe4>)
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 f945 	bl	8003dbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e010      	b.n	8003b60 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b3e:	897b      	ldrh	r3, [r7, #10]
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	4907      	ldr	r1, [pc, #28]	; (8003b6c <I2C_MasterRequestWrite+0xe8>)
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f935 	bl	8003dbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	00010008 	.word	0x00010008
 8003b6c:	00010002 	.word	0x00010002

08003b70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	4608      	mov	r0, r1
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4603      	mov	r3, r0
 8003b80:	817b      	strh	r3, [r7, #10]
 8003b82:	460b      	mov	r3, r1
 8003b84:	813b      	strh	r3, [r7, #8]
 8003b86:	4613      	mov	r3, r2
 8003b88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ba8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 f8aa 	bl	8003d10 <I2C_WaitOnFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e09e      	b.n	8003d04 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bc6:	897b      	ldrh	r3, [r7, #10]
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	461a      	mov	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	6a3a      	ldr	r2, [r7, #32]
 8003bda:	494c      	ldr	r1, [pc, #304]	; (8003d0c <I2C_RequestMemoryRead+0x19c>)
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 f8ee 	bl	8003dbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e08b      	b.n	8003d04 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c04:	6a39      	ldr	r1, [r7, #32]
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 f958 	bl	8003ebc <I2C_WaitOnTXEFlagUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00d      	beq.n	8003c2e <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d107      	bne.n	8003c2a <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e06a      	b.n	8003d04 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d105      	bne.n	8003c40 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c34:	893b      	ldrh	r3, [r7, #8]
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	611a      	str	r2, [r3, #16]
 8003c3e:	e021      	b.n	8003c84 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c40:	893b      	ldrh	r3, [r7, #8]
 8003c42:	0a1b      	lsrs	r3, r3, #8
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c50:	6a39      	ldr	r1, [r7, #32]
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 f932 	bl	8003ebc <I2C_WaitOnTXEFlagUntilTimeout>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00d      	beq.n	8003c7a <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d107      	bne.n	8003c76 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e044      	b.n	8003d04 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c7a:	893b      	ldrh	r3, [r7, #8]
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c86:	6a39      	ldr	r1, [r7, #32]
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 f917 	bl	8003ebc <I2C_WaitOnTXEFlagUntilTimeout>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00d      	beq.n	8003cb0 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d107      	bne.n	8003cac <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003caa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e029      	b.n	8003d04 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cbe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 f81f 	bl	8003d10 <I2C_WaitOnFlagUntilTimeout>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e013      	b.n	8003d04 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003cdc:	897b      	ldrh	r3, [r7, #10]
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	6a3a      	ldr	r2, [r7, #32]
 8003cf0:	4906      	ldr	r1, [pc, #24]	; (8003d0c <I2C_RequestMemoryRead+0x19c>)
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f863 	bl	8003dbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	00010002 	.word	0x00010002

08003d10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d20:	e025      	b.n	8003d6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d28:	d021      	beq.n	8003d6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d2a:	f7fd fe35 	bl	8001998 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d302      	bcc.n	8003d40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d116      	bne.n	8003d6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f043 0220 	orr.w	r2, r3, #32
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e023      	b.n	8003db6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	0c1b      	lsrs	r3, r3, #16
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d10d      	bne.n	8003d94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	43da      	mvns	r2, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	4013      	ands	r3, r2
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	bf0c      	ite	eq
 8003d8a:	2301      	moveq	r3, #1
 8003d8c:	2300      	movne	r3, #0
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	461a      	mov	r2, r3
 8003d92:	e00c      	b.n	8003dae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	43da      	mvns	r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	bf0c      	ite	eq
 8003da6:	2301      	moveq	r3, #1
 8003da8:	2300      	movne	r3, #0
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d0b6      	beq.n	8003d22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	60f8      	str	r0, [r7, #12]
 8003dc6:	60b9      	str	r1, [r7, #8]
 8003dc8:	607a      	str	r2, [r7, #4]
 8003dca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dcc:	e051      	b.n	8003e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ddc:	d123      	bne.n	8003e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003df6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f043 0204 	orr.w	r2, r3, #4
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e046      	b.n	8003eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2c:	d021      	beq.n	8003e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2e:	f7fd fdb3 	bl	8001998 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d302      	bcc.n	8003e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d116      	bne.n	8003e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	f043 0220 	orr.w	r2, r3, #32
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e020      	b.n	8003eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	0c1b      	lsrs	r3, r3, #16
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d10c      	bne.n	8003e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	43da      	mvns	r2, r3
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4013      	ands	r3, r2
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	bf14      	ite	ne
 8003e8e:	2301      	movne	r3, #1
 8003e90:	2300      	moveq	r3, #0
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	e00b      	b.n	8003eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	43da      	mvns	r2, r3
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	bf14      	ite	ne
 8003ea8:	2301      	movne	r3, #1
 8003eaa:	2300      	moveq	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d18d      	bne.n	8003dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ec8:	e02d      	b.n	8003f26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 f8ce 	bl	800406c <I2C_IsAcknowledgeFailed>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e02d      	b.n	8003f36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee0:	d021      	beq.n	8003f26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee2:	f7fd fd59 	bl	8001998 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d302      	bcc.n	8003ef8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d116      	bne.n	8003f26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f043 0220 	orr.w	r2, r3, #32
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e007      	b.n	8003f36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f30:	2b80      	cmp	r3, #128	; 0x80
 8003f32:	d1ca      	bne.n	8003eca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	60f8      	str	r0, [r7, #12]
 8003f46:	60b9      	str	r1, [r7, #8]
 8003f48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f4a:	e02d      	b.n	8003fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 f88d 	bl	800406c <I2C_IsAcknowledgeFailed>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e02d      	b.n	8003fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f62:	d021      	beq.n	8003fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f64:	f7fd fd18 	bl	8001998 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d302      	bcc.n	8003f7a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d116      	bne.n	8003fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	f043 0220 	orr.w	r2, r3, #32
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e007      	b.n	8003fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d1ca      	bne.n	8003f4c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fcc:	e042      	b.n	8004054 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	f003 0310 	and.w	r3, r3, #16
 8003fd8:	2b10      	cmp	r3, #16
 8003fda:	d119      	bne.n	8004010 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0210 	mvn.w	r2, #16
 8003fe4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e029      	b.n	8004064 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004010:	f7fd fcc2 	bl	8001998 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	429a      	cmp	r2, r3
 800401e:	d302      	bcc.n	8004026 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d116      	bne.n	8004054 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	f043 0220 	orr.w	r2, r3, #32
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e007      	b.n	8004064 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405e:	2b40      	cmp	r3, #64	; 0x40
 8004060:	d1b5      	bne.n	8003fce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800407e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004082:	d11b      	bne.n	80040bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800408c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	f043 0204 	orr.w	r2, r3, #4
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr

080040c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d102      	bne.n	80040dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	f000 bc6c 	b.w	80049b4 <HAL_RCC_OscConfig+0x8ec>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d022      	beq.n	800412a <HAL_RCC_OscConfig+0x62>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d11c      	bne.n	800412a <HAL_RCC_OscConfig+0x62>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d116      	bne.n	800412a <HAL_RCC_OscConfig+0x62>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b00      	cmp	r3, #0
 8004106:	d110      	bne.n	800412a <HAL_RCC_OscConfig+0x62>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10a      	bne.n	800412a <HAL_RCC_OscConfig+0x62>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	2b00      	cmp	r3, #0
 800411e:	d104      	bne.n	800412a <HAL_RCC_OscConfig+0x62>
 8004120:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004124:	4897      	ldr	r0, [pc, #604]	; (8004384 <HAL_RCC_OscConfig+0x2bc>)
 8004126:	f7fc fff3 	bl	8001110 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800412a:	4b97      	ldr	r3, [pc, #604]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 030c 	and.w	r3, r3, #12
 8004132:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004134:	4b94      	ldr	r3, [pc, #592]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800413c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 808e 	beq.w	8004268 <HAL_RCC_OscConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00c      	beq.n	800416e <HAL_RCC_OscConfig+0xa6>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d008      	beq.n	800416e <HAL_RCC_OscConfig+0xa6>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b05      	cmp	r3, #5
 8004162:	d004      	beq.n	800416e <HAL_RCC_OscConfig+0xa6>
 8004164:	f240 1159 	movw	r1, #345	; 0x159
 8004168:	4886      	ldr	r0, [pc, #536]	; (8004384 <HAL_RCC_OscConfig+0x2bc>)
 800416a:	f7fc ffd1 	bl	8001110 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	2b08      	cmp	r3, #8
 8004172:	d006      	beq.n	8004182 <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	2b0c      	cmp	r3, #12
 8004178:	d110      	bne.n	800419c <HAL_RCC_OscConfig+0xd4>
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004180:	d10c      	bne.n	800419c <HAL_RCC_OscConfig+0xd4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004182:	4b81      	ldr	r3, [pc, #516]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d06b      	beq.n	8004266 <HAL_RCC_OscConfig+0x19e>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d167      	bne.n	8004266 <HAL_RCC_OscConfig+0x19e>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	f000 bc0c 	b.w	80049b4 <HAL_RCC_OscConfig+0x8ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d106      	bne.n	80041b2 <HAL_RCC_OscConfig+0xea>
 80041a4:	4b78      	ldr	r3, [pc, #480]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a77      	ldr	r2, [pc, #476]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 80041aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ae:	6013      	str	r3, [r2, #0]
 80041b0:	e02d      	b.n	800420e <HAL_RCC_OscConfig+0x146>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCC_OscConfig+0x10c>
 80041ba:	4b73      	ldr	r3, [pc, #460]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a72      	ldr	r2, [pc, #456]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 80041c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	4b70      	ldr	r3, [pc, #448]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a6f      	ldr	r2, [pc, #444]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 80041cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	e01c      	b.n	800420e <HAL_RCC_OscConfig+0x146>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b05      	cmp	r3, #5
 80041da:	d10c      	bne.n	80041f6 <HAL_RCC_OscConfig+0x12e>
 80041dc:	4b6a      	ldr	r3, [pc, #424]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a69      	ldr	r2, [pc, #420]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 80041e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	4b67      	ldr	r3, [pc, #412]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a66      	ldr	r2, [pc, #408]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 80041ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f2:	6013      	str	r3, [r2, #0]
 80041f4:	e00b      	b.n	800420e <HAL_RCC_OscConfig+0x146>
 80041f6:	4b64      	ldr	r3, [pc, #400]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a63      	ldr	r2, [pc, #396]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 80041fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	4b61      	ldr	r3, [pc, #388]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a60      	ldr	r2, [pc, #384]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 8004208:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800420c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d013      	beq.n	800423e <HAL_RCC_OscConfig+0x176>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004216:	f7fd fbbf 	bl	8001998 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x168>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800421e:	f7fd fbbb 	bl	8001998 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b64      	cmp	r3, #100	; 0x64
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x168>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e3c1      	b.n	80049b4 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004230:	4b55      	ldr	r3, [pc, #340]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0x156>
 800423c:	e014      	b.n	8004268 <HAL_RCC_OscConfig+0x1a0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423e:	f7fd fbab 	bl	8001998 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x190>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004246:	f7fd fba7 	bl	8001998 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b64      	cmp	r3, #100	; 0x64
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e3ad      	b.n	80049b4 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004258:	4b4b      	ldr	r3, [pc, #300]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1f0      	bne.n	8004246 <HAL_RCC_OscConfig+0x17e>
 8004264:	e000      	b.n	8004268 <HAL_RCC_OscConfig+0x1a0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004266:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d070      	beq.n	8004356 <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_RCC_OscConfig+0x1c6>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d004      	beq.n	800428e <HAL_RCC_OscConfig+0x1c6>
 8004284:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8004288:	483e      	ldr	r0, [pc, #248]	; (8004384 <HAL_RCC_OscConfig+0x2bc>)
 800428a:	f7fc ff41 	bl	8001110 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	2b1f      	cmp	r3, #31
 8004294:	d904      	bls.n	80042a0 <HAL_RCC_OscConfig+0x1d8>
 8004296:	f240 118d 	movw	r1, #397	; 0x18d
 800429a:	483a      	ldr	r0, [pc, #232]	; (8004384 <HAL_RCC_OscConfig+0x2bc>)
 800429c:	f7fc ff38 	bl	8001110 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d005      	beq.n	80042b2 <HAL_RCC_OscConfig+0x1ea>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	2b0c      	cmp	r3, #12
 80042aa:	d119      	bne.n	80042e0 <HAL_RCC_OscConfig+0x218>
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d116      	bne.n	80042e0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042b2:	4b35      	ldr	r3, [pc, #212]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d005      	beq.n	80042ca <HAL_RCC_OscConfig+0x202>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d001      	beq.n	80042ca <HAL_RCC_OscConfig+0x202>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e374      	b.n	80049b4 <HAL_RCC_OscConfig+0x8ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ca:	4b2f      	ldr	r3, [pc, #188]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	021b      	lsls	r3, r3, #8
 80042d8:	492b      	ldr	r1, [pc, #172]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042de:	e03a      	b.n	8004356 <HAL_RCC_OscConfig+0x28e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d020      	beq.n	800432a <HAL_RCC_OscConfig+0x262>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042e8:	4b28      	ldr	r3, [pc, #160]	; (800438c <HAL_RCC_OscConfig+0x2c4>)
 80042ea:	2201      	movs	r2, #1
 80042ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ee:	f7fd fb53 	bl	8001998 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x240>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042f6:	f7fd fb4f 	bl	8001998 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x240>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e355      	b.n	80049b4 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004308:	4b1f      	ldr	r3, [pc, #124]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0f0      	beq.n	80042f6 <HAL_RCC_OscConfig+0x22e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004314:	4b1c      	ldr	r3, [pc, #112]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	4919      	ldr	r1, [pc, #100]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 8004324:	4313      	orrs	r3, r2
 8004326:	604b      	str	r3, [r1, #4]
 8004328:	e015      	b.n	8004356 <HAL_RCC_OscConfig+0x28e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800432a:	4b18      	ldr	r3, [pc, #96]	; (800438c <HAL_RCC_OscConfig+0x2c4>)
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004330:	f7fd fb32 	bl	8001998 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x282>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004338:	f7fd fb2e 	bl	8001998 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x282>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e334      	b.n	80049b4 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800434a:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 8129 	beq.w	80045b6 <HAL_RCC_OscConfig+0x4ee>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	2b00      	cmp	r3, #0
 8004368:	f040 80a4 	bne.w	80044b4 <HAL_RCC_OscConfig+0x3ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800436c:	4b06      	ldr	r3, [pc, #24]	; (8004388 <HAL_RCC_OscConfig+0x2c0>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00b      	beq.n	8004390 <HAL_RCC_OscConfig+0x2c8>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d107      	bne.n	8004390 <HAL_RCC_OscConfig+0x2c8>
      {
        return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e317      	b.n	80049b4 <HAL_RCC_OscConfig+0x8ec>
 8004384:	0800a270 	.word	0x0800a270
 8004388:	40023800 	.word	0x40023800
 800438c:	42470000 	.word	0x42470000
      }
      /* Otherwise, just the calibration and MSI range change are allowed */
      else
      {
       /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	2bff      	cmp	r3, #255	; 0xff
 8004396:	d904      	bls.n	80043a2 <HAL_RCC_OscConfig+0x2da>
 8004398:	f240 11d7 	movw	r1, #471	; 0x1d7
 800439c:	48a5      	ldr	r0, [pc, #660]	; (8004634 <HAL_RCC_OscConfig+0x56c>)
 800439e:	f7fc feb7 	bl	8001110 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d022      	beq.n	80043f0 <HAL_RCC_OscConfig+0x328>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043b2:	d01d      	beq.n	80043f0 <HAL_RCC_OscConfig+0x328>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043bc:	d018      	beq.n	80043f0 <HAL_RCC_OscConfig+0x328>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80043c6:	d013      	beq.n	80043f0 <HAL_RCC_OscConfig+0x328>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d0:	d00e      	beq.n	80043f0 <HAL_RCC_OscConfig+0x328>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80043da:	d009      	beq.n	80043f0 <HAL_RCC_OscConfig+0x328>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80043e4:	d004      	beq.n	80043f0 <HAL_RCC_OscConfig+0x328>
 80043e6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80043ea:	4892      	ldr	r0, [pc, #584]	; (8004634 <HAL_RCC_OscConfig+0x56c>)
 80043ec:	f7fc fe90 	bl	8001110 <assert_failed>

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1a      	ldr	r2, [r3, #32]
 80043f4:	4b90      	ldr	r3, [pc, #576]	; (8004638 <HAL_RCC_OscConfig+0x570>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d91d      	bls.n	800443c <HAL_RCC_OscConfig+0x374>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	4618      	mov	r0, r3
 8004406:	f000 fd67 	bl	8004ed8 <RCC_SetFlashLatencyFromMSIRange>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e2cf      	b.n	80049b4 <HAL_RCC_OscConfig+0x8ec>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004414:	4b88      	ldr	r3, [pc, #544]	; (8004638 <HAL_RCC_OscConfig+0x570>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	4985      	ldr	r1, [pc, #532]	; (8004638 <HAL_RCC_OscConfig+0x570>)
 8004422:	4313      	orrs	r3, r2
 8004424:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004426:	4b84      	ldr	r3, [pc, #528]	; (8004638 <HAL_RCC_OscConfig+0x570>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	061b      	lsls	r3, r3, #24
 8004434:	4980      	ldr	r1, [pc, #512]	; (8004638 <HAL_RCC_OscConfig+0x570>)
 8004436:	4313      	orrs	r3, r2
 8004438:	604b      	str	r3, [r1, #4]
 800443a:	e01c      	b.n	8004476 <HAL_RCC_OscConfig+0x3ae>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800443c:	4b7e      	ldr	r3, [pc, #504]	; (8004638 <HAL_RCC_OscConfig+0x570>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	497b      	ldr	r1, [pc, #492]	; (8004638 <HAL_RCC_OscConfig+0x570>)
 800444a:	4313      	orrs	r3, r2
 800444c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800444e:	4b7a      	ldr	r3, [pc, #488]	; (8004638 <HAL_RCC_OscConfig+0x570>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	061b      	lsls	r3, r3, #24
 800445c:	4976      	ldr	r1, [pc, #472]	; (8004638 <HAL_RCC_OscConfig+0x570>)
 800445e:	4313      	orrs	r3, r2
 8004460:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fd36 	bl	8004ed8 <RCC_SetFlashLatencyFromMSIRange>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e29e      	b.n	80049b4 <HAL_RCC_OscConfig+0x8ec>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	0b5b      	lsrs	r3, r3, #13
 800447c:	3301      	adds	r3, #1
 800447e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004486:	4a6c      	ldr	r2, [pc, #432]	; (8004638 <HAL_RCC_OscConfig+0x570>)
 8004488:	6892      	ldr	r2, [r2, #8]
 800448a:	0912      	lsrs	r2, r2, #4
 800448c:	f002 020f 	and.w	r2, r2, #15
 8004490:	496a      	ldr	r1, [pc, #424]	; (800463c <HAL_RCC_OscConfig+0x574>)
 8004492:	5c8a      	ldrb	r2, [r1, r2]
 8004494:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004496:	4a6a      	ldr	r2, [pc, #424]	; (8004640 <HAL_RCC_OscConfig+0x578>)
 8004498:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800449a:	4b6a      	ldr	r3, [pc, #424]	; (8004644 <HAL_RCC_OscConfig+0x57c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fc fe74 	bl	800118c <HAL_InitTick>
 80044a4:	4603      	mov	r3, r0
 80044a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 8083 	beq.w	80045b6 <HAL_RCC_OscConfig+0x4ee>
        {
          return status;
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
 80044b2:	e27f      	b.n	80049b4 <HAL_RCC_OscConfig+0x8ec>
      }
    }
    else
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d008      	beq.n	80044ce <HAL_RCC_OscConfig+0x406>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d004      	beq.n	80044ce <HAL_RCC_OscConfig+0x406>
 80044c4:	f44f 7102 	mov.w	r1, #520	; 0x208
 80044c8:	485a      	ldr	r0, [pc, #360]	; (8004634 <HAL_RCC_OscConfig+0x56c>)
 80044ca:	f7fc fe21 	bl	8001110 <assert_failed>

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d059      	beq.n	800458a <HAL_RCC_OscConfig+0x4c2>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044d6:	4b5c      	ldr	r3, [pc, #368]	; (8004648 <HAL_RCC_OscConfig+0x580>)
 80044d8:	2201      	movs	r2, #1
 80044da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044dc:	f7fd fa5c 	bl	8001998 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044e4:	f7fd fa58 	bl	8001998 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e25e      	b.n	80049b4 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80044f6:	4b50      	ldr	r3, [pc, #320]	; (8004638 <HAL_RCC_OscConfig+0x570>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0f0      	beq.n	80044e4 <HAL_RCC_OscConfig+0x41c>
          }
        }
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	2bff      	cmp	r3, #255	; 0xff
 8004508:	d904      	bls.n	8004514 <HAL_RCC_OscConfig+0x44c>
 800450a:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800450e:	4849      	ldr	r0, [pc, #292]	; (8004634 <HAL_RCC_OscConfig+0x56c>)
 8004510:	f7fc fdfe 	bl	8001110 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d022      	beq.n	8004562 <HAL_RCC_OscConfig+0x49a>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004524:	d01d      	beq.n	8004562 <HAL_RCC_OscConfig+0x49a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800452e:	d018      	beq.n	8004562 <HAL_RCC_OscConfig+0x49a>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004538:	d013      	beq.n	8004562 <HAL_RCC_OscConfig+0x49a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004542:	d00e      	beq.n	8004562 <HAL_RCC_OscConfig+0x49a>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800454c:	d009      	beq.n	8004562 <HAL_RCC_OscConfig+0x49a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004556:	d004      	beq.n	8004562 <HAL_RCC_OscConfig+0x49a>
 8004558:	f240 211d 	movw	r1, #541	; 0x21d
 800455c:	4835      	ldr	r0, [pc, #212]	; (8004634 <HAL_RCC_OscConfig+0x56c>)
 800455e:	f7fc fdd7 	bl	8001110 <assert_failed>

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004562:	4b35      	ldr	r3, [pc, #212]	; (8004638 <HAL_RCC_OscConfig+0x570>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	4932      	ldr	r1, [pc, #200]	; (8004638 <HAL_RCC_OscConfig+0x570>)
 8004570:	4313      	orrs	r3, r2
 8004572:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004574:	4b30      	ldr	r3, [pc, #192]	; (8004638 <HAL_RCC_OscConfig+0x570>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	061b      	lsls	r3, r3, #24
 8004582:	492d      	ldr	r1, [pc, #180]	; (8004638 <HAL_RCC_OscConfig+0x570>)
 8004584:	4313      	orrs	r3, r2
 8004586:	604b      	str	r3, [r1, #4]
 8004588:	e015      	b.n	80045b6 <HAL_RCC_OscConfig+0x4ee>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800458a:	4b2f      	ldr	r3, [pc, #188]	; (8004648 <HAL_RCC_OscConfig+0x580>)
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004590:	f7fd fa02 	bl	8001998 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x4e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004598:	f7fd f9fe 	bl	8001998 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x4e2>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e204      	b.n	80049b4 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80045aa:	4b23      	ldr	r3, [pc, #140]	; (8004638 <HAL_RCC_OscConfig+0x570>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f0      	bne.n	8004598 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d04c      	beq.n	800465c <HAL_RCC_OscConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d008      	beq.n	80045dc <HAL_RCC_OscConfig+0x514>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d004      	beq.n	80045dc <HAL_RCC_OscConfig+0x514>
 80045d2:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80045d6:	4817      	ldr	r0, [pc, #92]	; (8004634 <HAL_RCC_OscConfig+0x56c>)
 80045d8:	f7fc fd9a 	bl	8001110 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d016      	beq.n	8004612 <HAL_RCC_OscConfig+0x54a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045e4:	4b19      	ldr	r3, [pc, #100]	; (800464c <HAL_RCC_OscConfig+0x584>)
 80045e6:	2201      	movs	r2, #1
 80045e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ea:	f7fd f9d5 	bl	8001998 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045f2:	f7fd f9d1 	bl	8001998 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e1d7      	b.n	80049b4 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004604:	4b0c      	ldr	r3, [pc, #48]	; (8004638 <HAL_RCC_OscConfig+0x570>)
 8004606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCC_OscConfig+0x52a>
 8004610:	e024      	b.n	800465c <HAL_RCC_OscConfig+0x594>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004612:	4b0e      	ldr	r3, [pc, #56]	; (800464c <HAL_RCC_OscConfig+0x584>)
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004618:	f7fd f9be 	bl	8001998 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800461e:	e017      	b.n	8004650 <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004620:	f7fd f9ba 	bl	8001998 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d910      	bls.n	8004650 <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e1c0      	b.n	80049b4 <HAL_RCC_OscConfig+0x8ec>
 8004632:	bf00      	nop
 8004634:	0800a270 	.word	0x0800a270
 8004638:	40023800 	.word	0x40023800
 800463c:	0800a444 	.word	0x0800a444
 8004640:	20000000 	.word	0x20000000
 8004644:	20000004 	.word	0x20000004
 8004648:	42470020 	.word	0x42470020
 800464c:	42470680 	.word	0x42470680
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004650:	4ba2      	ldr	r3, [pc, #648]	; (80048dc <HAL_RCC_OscConfig+0x814>)
 8004652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e1      	bne.n	8004620 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 80b7 	beq.w	80047d8 <HAL_RCC_OscConfig+0x710>
  {
    FlagStatus       pwrclkchanged = RESET;
 800466a:	2300      	movs	r3, #0
 800466c:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00c      	beq.n	8004690 <HAL_RCC_OscConfig+0x5c8>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d008      	beq.n	8004690 <HAL_RCC_OscConfig+0x5c8>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b05      	cmp	r3, #5
 8004684:	d004      	beq.n	8004690 <HAL_RCC_OscConfig+0x5c8>
 8004686:	f44f 711a 	mov.w	r1, #616	; 0x268
 800468a:	4895      	ldr	r0, [pc, #596]	; (80048e0 <HAL_RCC_OscConfig+0x818>)
 800468c:	f7fc fd40 	bl	8001110 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004690:	4b92      	ldr	r3, [pc, #584]	; (80048dc <HAL_RCC_OscConfig+0x814>)
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10d      	bne.n	80046b8 <HAL_RCC_OscConfig+0x5f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800469c:	4b8f      	ldr	r3, [pc, #572]	; (80048dc <HAL_RCC_OscConfig+0x814>)
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	4a8e      	ldr	r2, [pc, #568]	; (80048dc <HAL_RCC_OscConfig+0x814>)
 80046a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a6:	6253      	str	r3, [r2, #36]	; 0x24
 80046a8:	4b8c      	ldr	r3, [pc, #560]	; (80048dc <HAL_RCC_OscConfig+0x814>)
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b0:	60bb      	str	r3, [r7, #8]
 80046b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046b4:	2301      	movs	r3, #1
 80046b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b8:	4b8a      	ldr	r3, [pc, #552]	; (80048e4 <HAL_RCC_OscConfig+0x81c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d118      	bne.n	80046f6 <HAL_RCC_OscConfig+0x62e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046c4:	4b87      	ldr	r3, [pc, #540]	; (80048e4 <HAL_RCC_OscConfig+0x81c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a86      	ldr	r2, [pc, #536]	; (80048e4 <HAL_RCC_OscConfig+0x81c>)
 80046ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d0:	f7fd f962 	bl	8001998 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x622>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d8:	f7fd f95e 	bl	8001998 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b64      	cmp	r3, #100	; 0x64
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e164      	b.n	80049b4 <HAL_RCC_OscConfig+0x8ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ea:	4b7e      	ldr	r3, [pc, #504]	; (80048e4 <HAL_RCC_OscConfig+0x81c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0f0      	beq.n	80046d8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d106      	bne.n	800470c <HAL_RCC_OscConfig+0x644>
 80046fe:	4b77      	ldr	r3, [pc, #476]	; (80048dc <HAL_RCC_OscConfig+0x814>)
 8004700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004702:	4a76      	ldr	r2, [pc, #472]	; (80048dc <HAL_RCC_OscConfig+0x814>)
 8004704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004708:	6353      	str	r3, [r2, #52]	; 0x34
 800470a:	e02d      	b.n	8004768 <HAL_RCC_OscConfig+0x6a0>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10c      	bne.n	800472e <HAL_RCC_OscConfig+0x666>
 8004714:	4b71      	ldr	r3, [pc, #452]	; (80048dc <HAL_RCC_OscConfig+0x814>)
 8004716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004718:	4a70      	ldr	r2, [pc, #448]	; (80048dc <HAL_RCC_OscConfig+0x814>)
 800471a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800471e:	6353      	str	r3, [r2, #52]	; 0x34
 8004720:	4b6e      	ldr	r3, [pc, #440]	; (80048dc <HAL_RCC_OscConfig+0x814>)
 8004722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004724:	4a6d      	ldr	r2, [pc, #436]	; (80048dc <HAL_RCC_OscConfig+0x814>)
 8004726:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800472a:	6353      	str	r3, [r2, #52]	; 0x34
 800472c:	e01c      	b.n	8004768 <HAL_RCC_OscConfig+0x6a0>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2b05      	cmp	r3, #5
 8004734:	d10c      	bne.n	8004750 <HAL_RCC_OscConfig+0x688>
 8004736:	4b69      	ldr	r3, [pc, #420]	; (80048dc <HAL_RCC_OscConfig+0x814>)
 8004738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473a:	4a68      	ldr	r2, [pc, #416]	; (80048dc <HAL_RCC_OscConfig+0x814>)
 800473c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004740:	6353      	str	r3, [r2, #52]	; 0x34
 8004742:	4b66      	ldr	r3, [pc, #408]	; (80048dc <HAL_RCC_OscConfig+0x814>)
 8004744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004746:	4a65      	ldr	r2, [pc, #404]	; (80048dc <HAL_RCC_OscConfig+0x814>)
 8004748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800474c:	6353      	str	r3, [r2, #52]	; 0x34
 800474e:	e00b      	b.n	8004768 <HAL_RCC_OscConfig+0x6a0>
 8004750:	4b62      	ldr	r3, [pc, #392]	; (80048dc <HAL_RCC_OscConfig+0x814>)
 8004752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004754:	4a61      	ldr	r2, [pc, #388]	; (80048dc <HAL_RCC_OscConfig+0x814>)
 8004756:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800475a:	6353      	str	r3, [r2, #52]	; 0x34
 800475c:	4b5f      	ldr	r3, [pc, #380]	; (80048dc <HAL_RCC_OscConfig+0x814>)
 800475e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004760:	4a5e      	ldr	r2, [pc, #376]	; (80048dc <HAL_RCC_OscConfig+0x814>)
 8004762:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004766:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d015      	beq.n	800479c <HAL_RCC_OscConfig+0x6d4>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004770:	f7fd f912 	bl	8001998 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004776:	e00a      	b.n	800478e <HAL_RCC_OscConfig+0x6c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004778:	f7fd f90e 	bl	8001998 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	f241 3288 	movw	r2, #5000	; 0x1388
 8004786:	4293      	cmp	r3, r2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e112      	b.n	80049b4 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800478e:	4b53      	ldr	r3, [pc, #332]	; (80048dc <HAL_RCC_OscConfig+0x814>)
 8004790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004792:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0ee      	beq.n	8004778 <HAL_RCC_OscConfig+0x6b0>
 800479a:	e014      	b.n	80047c6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800479c:	f7fd f8fc 	bl	8001998 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047a2:	e00a      	b.n	80047ba <HAL_RCC_OscConfig+0x6f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047a4:	f7fd f8f8 	bl	8001998 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x6f2>
        {
          return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e0fc      	b.n	80049b4 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047ba:	4b48      	ldr	r3, [pc, #288]	; (80048dc <HAL_RCC_OscConfig+0x814>)
 80047bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1ee      	bne.n	80047a4 <HAL_RCC_OscConfig+0x6dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047c6:	7ffb      	ldrb	r3, [r7, #31]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d105      	bne.n	80047d8 <HAL_RCC_OscConfig+0x710>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047cc:	4b43      	ldr	r3, [pc, #268]	; (80048dc <HAL_RCC_OscConfig+0x814>)
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	4a42      	ldr	r2, [pc, #264]	; (80048dc <HAL_RCC_OscConfig+0x814>)
 80047d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047d6:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00c      	beq.n	80047fa <HAL_RCC_OscConfig+0x732>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d008      	beq.n	80047fa <HAL_RCC_OscConfig+0x732>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d004      	beq.n	80047fa <HAL_RCC_OscConfig+0x732>
 80047f0:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 80047f4:	483a      	ldr	r0, [pc, #232]	; (80048e0 <HAL_RCC_OscConfig+0x818>)
 80047f6:	f7fc fc8b 	bl	8001110 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 80d7 	beq.w	80049b2 <HAL_RCC_OscConfig+0x8ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	2b0c      	cmp	r3, #12
 8004808:	f000 80b3 	beq.w	8004972 <HAL_RCC_OscConfig+0x8aa>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	2b02      	cmp	r3, #2
 8004812:	f040 8097 	bne.w	8004944 <HAL_RCC_OscConfig+0x87c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481a:	2b00      	cmp	r3, #0
 800481c:	d009      	beq.n	8004832 <HAL_RCC_OscConfig+0x76a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004826:	d004      	beq.n	8004832 <HAL_RCC_OscConfig+0x76a>
 8004828:	f240 21b5 	movw	r1, #693	; 0x2b5
 800482c:	482c      	ldr	r0, [pc, #176]	; (80048e0 <HAL_RCC_OscConfig+0x818>)
 800482e:	f7fc fc6f 	bl	8001110 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004836:	2b00      	cmp	r3, #0
 8004838:	d02c      	beq.n	8004894 <HAL_RCC_OscConfig+0x7cc>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004842:	d027      	beq.n	8004894 <HAL_RCC_OscConfig+0x7cc>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800484c:	d022      	beq.n	8004894 <HAL_RCC_OscConfig+0x7cc>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004856:	d01d      	beq.n	8004894 <HAL_RCC_OscConfig+0x7cc>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004860:	d018      	beq.n	8004894 <HAL_RCC_OscConfig+0x7cc>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004866:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800486a:	d013      	beq.n	8004894 <HAL_RCC_OscConfig+0x7cc>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004870:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004874:	d00e      	beq.n	8004894 <HAL_RCC_OscConfig+0x7cc>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800487e:	d009      	beq.n	8004894 <HAL_RCC_OscConfig+0x7cc>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004888:	d004      	beq.n	8004894 <HAL_RCC_OscConfig+0x7cc>
 800488a:	f240 21b6 	movw	r1, #694	; 0x2b6
 800488e:	4814      	ldr	r0, [pc, #80]	; (80048e0 <HAL_RCC_OscConfig+0x818>)
 8004890:	f7fc fc3e 	bl	8001110 <assert_failed>
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800489c:	d00e      	beq.n	80048bc <HAL_RCC_OscConfig+0x7f4>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048a6:	d009      	beq.n	80048bc <HAL_RCC_OscConfig+0x7f4>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048b0:	d004      	beq.n	80048bc <HAL_RCC_OscConfig+0x7f4>
 80048b2:	f240 21b7 	movw	r1, #695	; 0x2b7
 80048b6:	480a      	ldr	r0, [pc, #40]	; (80048e0 <HAL_RCC_OscConfig+0x818>)
 80048b8:	f7fc fc2a 	bl	8001110 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048bc:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <HAL_RCC_OscConfig+0x820>)
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c2:	f7fd f869 	bl	8001998 <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048c8:	e010      	b.n	80048ec <HAL_RCC_OscConfig+0x824>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ca:	f7fd f865 	bl	8001998 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d909      	bls.n	80048ec <HAL_RCC_OscConfig+0x824>
          {
            return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e06b      	b.n	80049b4 <HAL_RCC_OscConfig+0x8ec>
 80048dc:	40023800 	.word	0x40023800
 80048e0:	0800a270 	.word	0x0800a270
 80048e4:	40007000 	.word	0x40007000
 80048e8:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048ec:	4b33      	ldr	r3, [pc, #204]	; (80049bc <HAL_RCC_OscConfig+0x8f4>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e8      	bne.n	80048ca <HAL_RCC_OscConfig+0x802>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048f8:	4b30      	ldr	r3, [pc, #192]	; (80049bc <HAL_RCC_OscConfig+0x8f4>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004908:	4319      	orrs	r1, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	430b      	orrs	r3, r1
 8004910:	492a      	ldr	r1, [pc, #168]	; (80049bc <HAL_RCC_OscConfig+0x8f4>)
 8004912:	4313      	orrs	r3, r2
 8004914:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004916:	4b2a      	ldr	r3, [pc, #168]	; (80049c0 <HAL_RCC_OscConfig+0x8f8>)
 8004918:	2201      	movs	r2, #1
 800491a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491c:	f7fd f83c 	bl	8001998 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x86e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004924:	f7fd f838 	bl	8001998 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x86e>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e03e      	b.n	80049b4 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004936:	4b21      	ldr	r3, [pc, #132]	; (80049bc <HAL_RCC_OscConfig+0x8f4>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0f0      	beq.n	8004924 <HAL_RCC_OscConfig+0x85c>
 8004942:	e036      	b.n	80049b2 <HAL_RCC_OscConfig+0x8ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004944:	4b1e      	ldr	r3, [pc, #120]	; (80049c0 <HAL_RCC_OscConfig+0x8f8>)
 8004946:	2200      	movs	r2, #0
 8004948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494a:	f7fd f825 	bl	8001998 <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x89c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004952:	f7fd f821 	bl	8001998 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x89c>
          {
            return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e027      	b.n	80049b4 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004964:	4b15      	ldr	r3, [pc, #84]	; (80049bc <HAL_RCC_OscConfig+0x8f4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1f0      	bne.n	8004952 <HAL_RCC_OscConfig+0x88a>
 8004970:	e01f      	b.n	80049b2 <HAL_RCC_OscConfig+0x8ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	2b01      	cmp	r3, #1
 8004978:	d101      	bne.n	800497e <HAL_RCC_OscConfig+0x8b6>
      {
        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e01a      	b.n	80049b4 <HAL_RCC_OscConfig+0x8ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800497e:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <HAL_RCC_OscConfig+0x8f4>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498e:	429a      	cmp	r2, r3
 8004990:	d10d      	bne.n	80049ae <HAL_RCC_OscConfig+0x8e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499c:	429a      	cmp	r2, r3
 800499e:	d106      	bne.n	80049ae <HAL_RCC_OscConfig+0x8e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d001      	beq.n	80049b2 <HAL_RCC_OscConfig+0x8ea>
        {
          return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e000      	b.n	80049b4 <HAL_RCC_OscConfig+0x8ec>
        }
      }
    }
  }

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3720      	adds	r7, #32
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40023800 	.word	0x40023800
 80049c0:	42470060 	.word	0x42470060

080049c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e1a4      	b.n	8004d22 <HAL_RCC_ClockConfig+0x35e>
  }

  assert_param(IS_FLASH_LATENCY(FLatency));
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d007      	beq.n	80049ee <HAL_RCC_ClockConfig+0x2a>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d004      	beq.n	80049ee <HAL_RCC_ClockConfig+0x2a>
 80049e4:	f240 312a 	movw	r1, #810	; 0x32a
 80049e8:	4893      	ldr	r0, [pc, #588]	; (8004c38 <HAL_RCC_ClockConfig+0x274>)
 80049ea:	f7fc fb91 	bl	8001110 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049ee:	4b93      	ldr	r3, [pc, #588]	; (8004c3c <HAL_RCC_ClockConfig+0x278>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d919      	bls.n	8004a30 <HAL_RCC_ClockConfig+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d105      	bne.n	8004a0e <HAL_RCC_ClockConfig+0x4a>
 8004a02:	4b8e      	ldr	r3, [pc, #568]	; (8004c3c <HAL_RCC_ClockConfig+0x278>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a8d      	ldr	r2, [pc, #564]	; (8004c3c <HAL_RCC_ClockConfig+0x278>)
 8004a08:	f043 0304 	orr.w	r3, r3, #4
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	4b8b      	ldr	r3, [pc, #556]	; (8004c3c <HAL_RCC_ClockConfig+0x278>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f023 0201 	bic.w	r2, r3, #1
 8004a16:	4989      	ldr	r1, [pc, #548]	; (8004c3c <HAL_RCC_ClockConfig+0x278>)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1e:	4b87      	ldr	r3, [pc, #540]	; (8004c3c <HAL_RCC_ClockConfig+0x278>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d001      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e178      	b.n	8004d22 <HAL_RCC_ClockConfig+0x35e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d031      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0xdc>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d024      	beq.n	8004a8e <HAL_RCC_ClockConfig+0xca>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	2b80      	cmp	r3, #128	; 0x80
 8004a4a:	d020      	beq.n	8004a8e <HAL_RCC_ClockConfig+0xca>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	2b90      	cmp	r3, #144	; 0x90
 8004a52:	d01c      	beq.n	8004a8e <HAL_RCC_ClockConfig+0xca>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	2ba0      	cmp	r3, #160	; 0xa0
 8004a5a:	d018      	beq.n	8004a8e <HAL_RCC_ClockConfig+0xca>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	2bb0      	cmp	r3, #176	; 0xb0
 8004a62:	d014      	beq.n	8004a8e <HAL_RCC_ClockConfig+0xca>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	2bc0      	cmp	r3, #192	; 0xc0
 8004a6a:	d010      	beq.n	8004a8e <HAL_RCC_ClockConfig+0xca>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	2bd0      	cmp	r3, #208	; 0xd0
 8004a72:	d00c      	beq.n	8004a8e <HAL_RCC_ClockConfig+0xca>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2be0      	cmp	r3, #224	; 0xe0
 8004a7a:	d008      	beq.n	8004a8e <HAL_RCC_ClockConfig+0xca>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2bf0      	cmp	r3, #240	; 0xf0
 8004a82:	d004      	beq.n	8004a8e <HAL_RCC_ClockConfig+0xca>
 8004a84:	f240 3141 	movw	r1, #833	; 0x341
 8004a88:	486b      	ldr	r0, [pc, #428]	; (8004c38 <HAL_RCC_ClockConfig+0x274>)
 8004a8a:	f7fc fb41 	bl	8001110 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a8e:	4b6c      	ldr	r3, [pc, #432]	; (8004c40 <HAL_RCC_ClockConfig+0x27c>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	4969      	ldr	r1, [pc, #420]	; (8004c40 <HAL_RCC_ClockConfig+0x27c>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 80a3 	beq.w	8004bf4 <HAL_RCC_ClockConfig+0x230>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d010      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x114>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d00c      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x114>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d008      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x114>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d004      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x114>
 8004ace:	f44f 7152 	mov.w	r1, #840	; 0x348
 8004ad2:	4859      	ldr	r0, [pc, #356]	; (8004c38 <HAL_RCC_ClockConfig+0x274>)
 8004ad4:	f7fc fb1c 	bl	8001110 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d107      	bne.n	8004af0 <HAL_RCC_ClockConfig+0x12c>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ae0:	4b57      	ldr	r3, [pc, #348]	; (8004c40 <HAL_RCC_ClockConfig+0x27c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d121      	bne.n	8004b30 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e118      	b.n	8004d22 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b03      	cmp	r3, #3
 8004af6:	d107      	bne.n	8004b08 <HAL_RCC_ClockConfig+0x144>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004af8:	4b51      	ldr	r3, [pc, #324]	; (8004c40 <HAL_RCC_ClockConfig+0x27c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d115      	bne.n	8004b30 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e10c      	b.n	8004d22 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d107      	bne.n	8004b20 <HAL_RCC_ClockConfig+0x15c>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b10:	4b4b      	ldr	r3, [pc, #300]	; (8004c40 <HAL_RCC_ClockConfig+0x27c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d109      	bne.n	8004b30 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e100      	b.n	8004d22 <HAL_RCC_ClockConfig+0x35e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004b20:	4b47      	ldr	r3, [pc, #284]	; (8004c40 <HAL_RCC_ClockConfig+0x27c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e0f8      	b.n	8004d22 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b30:	4b43      	ldr	r3, [pc, #268]	; (8004c40 <HAL_RCC_ClockConfig+0x27c>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f023 0203 	bic.w	r2, r3, #3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	4940      	ldr	r1, [pc, #256]	; (8004c40 <HAL_RCC_ClockConfig+0x27c>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b42:	f7fc ff29 	bl	8001998 <HAL_GetTick>
 8004b46:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d112      	bne.n	8004b76 <HAL_RCC_ClockConfig+0x1b2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b50:	e00a      	b.n	8004b68 <HAL_RCC_ClockConfig+0x1a4>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b52:	f7fc ff21 	bl	8001998 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_ClockConfig+0x1a4>
        {
          return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e0dc      	b.n	8004d22 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b68:	4b35      	ldr	r3, [pc, #212]	; (8004c40 <HAL_RCC_ClockConfig+0x27c>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f003 030c 	and.w	r3, r3, #12
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d1ee      	bne.n	8004b52 <HAL_RCC_ClockConfig+0x18e>
 8004b74:	e03e      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d112      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0x1e0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b7e:	e00a      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1d2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b80:	f7fc ff0a 	bl	8001998 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_ClockConfig+0x1d2>
        {
          return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e0c5      	b.n	8004d22 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b96:	4b2a      	ldr	r3, [pc, #168]	; (8004c40 <HAL_RCC_ClockConfig+0x27c>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 030c 	and.w	r3, r3, #12
 8004b9e:	2b0c      	cmp	r3, #12
 8004ba0:	d1ee      	bne.n	8004b80 <HAL_RCC_ClockConfig+0x1bc>
 8004ba2:	e027      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d11d      	bne.n	8004be8 <HAL_RCC_ClockConfig+0x224>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bac:	e00a      	b.n	8004bc4 <HAL_RCC_ClockConfig+0x200>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bae:	f7fc fef3 	bl	8001998 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_ClockConfig+0x200>
        {
          return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e0ae      	b.n	8004d22 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bc4:	4b1e      	ldr	r3, [pc, #120]	; (8004c40 <HAL_RCC_ClockConfig+0x27c>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 030c 	and.w	r3, r3, #12
 8004bcc:	2b04      	cmp	r3, #4
 8004bce:	d1ee      	bne.n	8004bae <HAL_RCC_ClockConfig+0x1ea>
 8004bd0:	e010      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x230>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bd2:	f7fc fee1 	bl	8001998 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_ClockConfig+0x224>
        {
          return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e09c      	b.n	8004d22 <HAL_RCC_ClockConfig+0x35e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004be8:	4b15      	ldr	r3, [pc, #84]	; (8004c40 <HAL_RCC_ClockConfig+0x27c>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 030c 	and.w	r3, r3, #12
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1ee      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0x20e>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bf4:	4b11      	ldr	r3, [pc, #68]	; (8004c3c <HAL_RCC_ClockConfig+0x278>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d220      	bcs.n	8004c44 <HAL_RCC_ClockConfig+0x280>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d105      	bne.n	8004c14 <HAL_RCC_ClockConfig+0x250>
 8004c08:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <HAL_RCC_ClockConfig+0x278>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a0b      	ldr	r2, [pc, #44]	; (8004c3c <HAL_RCC_ClockConfig+0x278>)
 8004c0e:	f043 0304 	orr.w	r3, r3, #4
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <HAL_RCC_ClockConfig+0x278>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f023 0201 	bic.w	r2, r3, #1
 8004c1c:	4907      	ldr	r1, [pc, #28]	; (8004c3c <HAL_RCC_ClockConfig+0x278>)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c24:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <HAL_RCC_ClockConfig+0x278>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d008      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x280>
    {
      return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e075      	b.n	8004d22 <HAL_RCC_ClockConfig+0x35e>
 8004c36:	bf00      	nop
 8004c38:	0800a270 	.word	0x0800a270
 8004c3c:	40023c00 	.word	0x40023c00
 8004c40:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d025      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x2d8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d018      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x2c6>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c60:	d013      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x2c6>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004c6a:	d00e      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x2c6>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c74:	d009      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x2c6>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c7e:	d004      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x2c6>
 8004c80:	f240 31ad 	movw	r1, #941	; 0x3ad
 8004c84:	4829      	ldr	r0, [pc, #164]	; (8004d2c <HAL_RCC_ClockConfig+0x368>)
 8004c86:	f7fc fa43 	bl	8001110 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c8a:	4b29      	ldr	r3, [pc, #164]	; (8004d30 <HAL_RCC_ClockConfig+0x36c>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	4926      	ldr	r1, [pc, #152]	; (8004d30 <HAL_RCC_ClockConfig+0x36c>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0308 	and.w	r3, r3, #8
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d026      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0x332>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d018      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x31e>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb8:	d013      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x31e>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004cc2:	d00e      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x31e>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ccc:	d009      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x31e>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cd6:	d004      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x31e>
 8004cd8:	f44f 716d 	mov.w	r1, #948	; 0x3b4
 8004cdc:	4813      	ldr	r0, [pc, #76]	; (8004d2c <HAL_RCC_ClockConfig+0x368>)
 8004cde:	f7fc fa17 	bl	8001110 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ce2:	4b13      	ldr	r3, [pc, #76]	; (8004d30 <HAL_RCC_ClockConfig+0x36c>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	490f      	ldr	r1, [pc, #60]	; (8004d30 <HAL_RCC_ClockConfig+0x36c>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cf6:	f000 f823 	bl	8004d40 <HAL_RCC_GetSysClockFreq>
 8004cfa:	4601      	mov	r1, r0
 8004cfc:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <HAL_RCC_ClockConfig+0x36c>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	091b      	lsrs	r3, r3, #4
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	4a0b      	ldr	r2, [pc, #44]	; (8004d34 <HAL_RCC_ClockConfig+0x370>)
 8004d08:	5cd3      	ldrb	r3, [r2, r3]
 8004d0a:	fa21 f303 	lsr.w	r3, r1, r3
 8004d0e:	4a0a      	ldr	r2, [pc, #40]	; (8004d38 <HAL_RCC_ClockConfig+0x374>)
 8004d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d12:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <HAL_RCC_ClockConfig+0x378>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fc fa38 	bl	800118c <HAL_InitTick>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d20:	7afb      	ldrb	r3, [r7, #11]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	0800a270 	.word	0x0800a270
 8004d30:	40023800 	.word	0x40023800
 8004d34:	0800a444 	.word	0x0800a444
 8004d38:	20000000 	.word	0x20000000
 8004d3c:	20000004 	.word	0x20000004

08004d40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004d46:	4b26      	ldr	r3, [pc, #152]	; (8004de0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f003 030c 	and.w	r3, r3, #12
 8004d52:	2b08      	cmp	r3, #8
 8004d54:	d006      	beq.n	8004d64 <HAL_RCC_GetSysClockFreq+0x24>
 8004d56:	2b0c      	cmp	r3, #12
 8004d58:	d007      	beq.n	8004d6a <HAL_RCC_GetSysClockFreq+0x2a>
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d12c      	bne.n	8004db8 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d5e:	4b21      	ldr	r3, [pc, #132]	; (8004de4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d60:	613b      	str	r3, [r7, #16]
      break;
 8004d62:	e037      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d64:	4b20      	ldr	r3, [pc, #128]	; (8004de8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004d66:	613b      	str	r3, [r7, #16]
      break;
 8004d68:	e034      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	0c9b      	lsrs	r3, r3, #18
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	4a1e      	ldr	r2, [pc, #120]	; (8004dec <HAL_RCC_GetSysClockFreq+0xac>)
 8004d74:	5cd3      	ldrb	r3, [r2, r3]
 8004d76:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	0d9b      	lsrs	r3, r3, #22
 8004d7c:	f003 0303 	and.w	r3, r3, #3
 8004d80:	3301      	adds	r3, #1
 8004d82:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d84:	4b16      	ldr	r3, [pc, #88]	; (8004de0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d008      	beq.n	8004da2 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4a15      	ldr	r2, [pc, #84]	; (8004de8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004d94:	fb02 f203 	mul.w	r2, r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	e007      	b.n	8004db2 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	4a0f      	ldr	r2, [pc, #60]	; (8004de4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004da6:	fb02 f203 	mul.w	r2, r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	613b      	str	r3, [r7, #16]
      break;
 8004db6:	e00d      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004db8:	4b09      	ldr	r3, [pc, #36]	; (8004de0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	0b5b      	lsrs	r3, r3, #13
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	613b      	str	r3, [r7, #16]
      break;
 8004dd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dd4:	693b      	ldr	r3, [r7, #16]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	371c      	adds	r7, #28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bc80      	pop	{r7}
 8004dde:	4770      	bx	lr
 8004de0:	40023800 	.word	0x40023800
 8004de4:	00f42400 	.word	0x00f42400
 8004de8:	007a1200 	.word	0x007a1200
 8004dec:	0800a438 	.word	0x0800a438

08004df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004df4:	4b02      	ldr	r3, [pc, #8]	; (8004e00 <HAL_RCC_GetHCLKFreq+0x10>)
 8004df6:	681b      	ldr	r3, [r3, #0]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bc80      	pop	{r7}
 8004dfe:	4770      	bx	lr
 8004e00:	20000000 	.word	0x20000000

08004e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e08:	f7ff fff2 	bl	8004df0 <HAL_RCC_GetHCLKFreq>
 8004e0c:	4601      	mov	r1, r0
 8004e0e:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	0a1b      	lsrs	r3, r3, #8
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	4a03      	ldr	r2, [pc, #12]	; (8004e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e1a:	5cd3      	ldrb	r3, [r2, r3]
 8004e1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40023800 	.word	0x40023800
 8004e28:	0800a454 	.word	0x0800a454

08004e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e30:	f7ff ffde 	bl	8004df0 <HAL_RCC_GetHCLKFreq>
 8004e34:	4601      	mov	r1, r0
 8004e36:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	0adb      	lsrs	r3, r3, #11
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	4a03      	ldr	r2, [pc, #12]	; (8004e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e42:	5cd3      	ldrb	r3, [r2, r3]
 8004e44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	0800a454 	.word	0x0800a454

08004e54 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d104      	bne.n	8004e6e <HAL_RCC_GetClockConfig+0x1a>
 8004e64:	f240 41fa 	movw	r1, #1274	; 0x4fa
 8004e68:	4818      	ldr	r0, [pc, #96]	; (8004ecc <HAL_RCC_GetClockConfig+0x78>)
 8004e6a:	f7fc f951 	bl	8001110 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d104      	bne.n	8004e7e <HAL_RCC_GetClockConfig+0x2a>
 8004e74:	f240 41fb 	movw	r1, #1275	; 0x4fb
 8004e78:	4814      	ldr	r0, [pc, #80]	; (8004ecc <HAL_RCC_GetClockConfig+0x78>)
 8004e7a:	f7fc f949 	bl	8001110 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	220f      	movs	r2, #15
 8004e82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e84:	4b12      	ldr	r3, [pc, #72]	; (8004ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f003 0203 	and.w	r2, r3, #3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e90:	4b0f      	ldr	r3, [pc, #60]	; (8004ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e9c:	4b0c      	ldr	r3, [pc, #48]	; (8004ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004ea8:	4b09      	ldr	r3, [pc, #36]	; (8004ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	08db      	lsrs	r3, r3, #3
 8004eae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004eb6:	4b07      	ldr	r3, [pc, #28]	; (8004ed4 <HAL_RCC_GetClockConfig+0x80>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0201 	and.w	r2, r3, #1
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	601a      	str	r2, [r3, #0]
}
 8004ec2:	bf00      	nop
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	0800a270 	.word	0x0800a270
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	40023c00 	.word	0x40023c00

08004ed8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004ee4:	4b29      	ldr	r3, [pc, #164]	; (8004f8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d12c      	bne.n	8004f4a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ef0:	4b26      	ldr	r3, [pc, #152]	; (8004f8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d005      	beq.n	8004f08 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004efc:	4b24      	ldr	r3, [pc, #144]	; (8004f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	e016      	b.n	8004f36 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f08:	4b20      	ldr	r3, [pc, #128]	; (8004f8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	4a1f      	ldr	r2, [pc, #124]	; (8004f8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f12:	6253      	str	r3, [r2, #36]	; 0x24
 8004f14:	4b1d      	ldr	r3, [pc, #116]	; (8004f8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004f20:	4b1b      	ldr	r3, [pc, #108]	; (8004f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004f28:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f2a:	4b18      	ldr	r3, [pc, #96]	; (8004f8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	4a17      	ldr	r2, [pc, #92]	; (8004f8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f34:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004f3c:	d105      	bne.n	8004f4a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f44:	d101      	bne.n	8004f4a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004f46:	2301      	movs	r3, #1
 8004f48:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d105      	bne.n	8004f5c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004f50:	4b10      	ldr	r3, [pc, #64]	; (8004f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a0f      	ldr	r2, [pc, #60]	; (8004f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f56:	f043 0304 	orr.w	r3, r3, #4
 8004f5a:	6013      	str	r3, [r2, #0]
 8004f5c:	4b0d      	ldr	r3, [pc, #52]	; (8004f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f023 0201 	bic.w	r2, r3, #1
 8004f64:	490b      	ldr	r1, [pc, #44]	; (8004f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f6c:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d001      	beq.n	8004f7e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e000      	b.n	8004f80 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	371c      	adds	r7, #28
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bc80      	pop	{r7}
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40023800 	.word	0x40023800
 8004f90:	40007000 	.word	0x40007000
 8004f94:	40023c00 	.word	0x40023c00

08004f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e088      	b.n	80050bc <HAL_TIM_Base_Init+0x124>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb2:	d02c      	beq.n	800500e <HAL_TIM_Base_Init+0x76>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a42      	ldr	r2, [pc, #264]	; (80050c4 <HAL_TIM_Base_Init+0x12c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d027      	beq.n	800500e <HAL_TIM_Base_Init+0x76>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a41      	ldr	r2, [pc, #260]	; (80050c8 <HAL_TIM_Base_Init+0x130>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d022      	beq.n	800500e <HAL_TIM_Base_Init+0x76>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a3f      	ldr	r2, [pc, #252]	; (80050cc <HAL_TIM_Base_Init+0x134>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d01d      	beq.n	800500e <HAL_TIM_Base_Init+0x76>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a3e      	ldr	r2, [pc, #248]	; (80050d0 <HAL_TIM_Base_Init+0x138>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d018      	beq.n	800500e <HAL_TIM_Base_Init+0x76>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a3c      	ldr	r2, [pc, #240]	; (80050d4 <HAL_TIM_Base_Init+0x13c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d013      	beq.n	800500e <HAL_TIM_Base_Init+0x76>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a3b      	ldr	r2, [pc, #236]	; (80050d8 <HAL_TIM_Base_Init+0x140>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d00e      	beq.n	800500e <HAL_TIM_Base_Init+0x76>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a39      	ldr	r2, [pc, #228]	; (80050dc <HAL_TIM_Base_Init+0x144>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d009      	beq.n	800500e <HAL_TIM_Base_Init+0x76>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a38      	ldr	r2, [pc, #224]	; (80050e0 <HAL_TIM_Base_Init+0x148>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d004      	beq.n	800500e <HAL_TIM_Base_Init+0x76>
 8005004:	f240 110b 	movw	r1, #267	; 0x10b
 8005008:	4836      	ldr	r0, [pc, #216]	; (80050e4 <HAL_TIM_Base_Init+0x14c>)
 800500a:	f7fc f881 	bl	8001110 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d014      	beq.n	8005040 <HAL_TIM_Base_Init+0xa8>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	2b10      	cmp	r3, #16
 800501c:	d010      	beq.n	8005040 <HAL_TIM_Base_Init+0xa8>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	2b20      	cmp	r3, #32
 8005024:	d00c      	beq.n	8005040 <HAL_TIM_Base_Init+0xa8>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2b40      	cmp	r3, #64	; 0x40
 800502c:	d008      	beq.n	8005040 <HAL_TIM_Base_Init+0xa8>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	2b60      	cmp	r3, #96	; 0x60
 8005034:	d004      	beq.n	8005040 <HAL_TIM_Base_Init+0xa8>
 8005036:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800503a:	482a      	ldr	r0, [pc, #168]	; (80050e4 <HAL_TIM_Base_Init+0x14c>)
 800503c:	f7fc f868 	bl	8001110 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00e      	beq.n	8005066 <HAL_TIM_Base_Init+0xce>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005050:	d009      	beq.n	8005066 <HAL_TIM_Base_Init+0xce>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800505a:	d004      	beq.n	8005066 <HAL_TIM_Base_Init+0xce>
 800505c:	f240 110d 	movw	r1, #269	; 0x10d
 8005060:	4820      	ldr	r0, [pc, #128]	; (80050e4 <HAL_TIM_Base_Init+0x14c>)
 8005062:	f7fc f855 	bl	8001110 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d008      	beq.n	8005080 <HAL_TIM_Base_Init+0xe8>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	2b80      	cmp	r3, #128	; 0x80
 8005074:	d004      	beq.n	8005080 <HAL_TIM_Base_Init+0xe8>
 8005076:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800507a:	481a      	ldr	r0, [pc, #104]	; (80050e4 <HAL_TIM_Base_Init+0x14c>)
 800507c:	f7fc f848 	bl	8001110 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d106      	bne.n	800509a <HAL_TIM_Base_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7fc faa3 	bl	80015e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2202      	movs	r2, #2
 800509e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	3304      	adds	r3, #4
 80050aa:	4619      	mov	r1, r3
 80050ac:	4610      	mov	r0, r2
 80050ae:	f000 ff49 	bl	8005f44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40000400 	.word	0x40000400
 80050c8:	40000800 	.word	0x40000800
 80050cc:	40000c00 	.word	0x40000c00
 80050d0:	40001000 	.word	0x40001000
 80050d4:	40001400 	.word	0x40001400
 80050d8:	40010800 	.word	0x40010800
 80050dc:	40010c00 	.word	0x40010c00
 80050e0:	40011000 	.word	0x40011000
 80050e4:	0800a2a8 	.word	0x0800a2a8

080050e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f8:	d02c      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x6c>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a24      	ldr	r2, [pc, #144]	; (8005190 <HAL_TIM_Base_Start_IT+0xa8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d027      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x6c>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a22      	ldr	r2, [pc, #136]	; (8005194 <HAL_TIM_Base_Start_IT+0xac>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d022      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x6c>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a21      	ldr	r2, [pc, #132]	; (8005198 <HAL_TIM_Base_Start_IT+0xb0>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d01d      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x6c>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a1f      	ldr	r2, [pc, #124]	; (800519c <HAL_TIM_Base_Start_IT+0xb4>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d018      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x6c>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a1e      	ldr	r2, [pc, #120]	; (80051a0 <HAL_TIM_Base_Start_IT+0xb8>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d013      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x6c>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a1c      	ldr	r2, [pc, #112]	; (80051a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00e      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x6c>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a1b      	ldr	r2, [pc, #108]	; (80051a8 <HAL_TIM_Base_Start_IT+0xc0>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d009      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x6c>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a19      	ldr	r2, [pc, #100]	; (80051ac <HAL_TIM_Base_Start_IT+0xc4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d004      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x6c>
 800514a:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 800514e:	4818      	ldr	r0, [pc, #96]	; (80051b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005150:	f7fb ffde 	bl	8001110 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0201 	orr.w	r2, r2, #1
 8005162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b06      	cmp	r3, #6
 8005174:	d007      	beq.n	8005186 <HAL_TIM_Base_Start_IT+0x9e>
  {
    __HAL_TIM_ENABLE(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0201 	orr.w	r2, r2, #1
 8005184:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40000400 	.word	0x40000400
 8005194:	40000800 	.word	0x40000800
 8005198:	40000c00 	.word	0x40000c00
 800519c:	40001000 	.word	0x40001000
 80051a0:	40001400 	.word	0x40001400
 80051a4:	40010800 	.word	0x40010800
 80051a8:	40010c00 	.word	0x40010c00
 80051ac:	40011000 	.word	0x40011000
 80051b0:	0800a2a8 	.word	0x0800a2a8

080051b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e088      	b.n	80052d8 <HAL_TIM_PWM_Init+0x124>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ce:	d02c      	beq.n	800522a <HAL_TIM_PWM_Init+0x76>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a42      	ldr	r2, [pc, #264]	; (80052e0 <HAL_TIM_PWM_Init+0x12c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d027      	beq.n	800522a <HAL_TIM_PWM_Init+0x76>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a41      	ldr	r2, [pc, #260]	; (80052e4 <HAL_TIM_PWM_Init+0x130>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d022      	beq.n	800522a <HAL_TIM_PWM_Init+0x76>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a3f      	ldr	r2, [pc, #252]	; (80052e8 <HAL_TIM_PWM_Init+0x134>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d01d      	beq.n	800522a <HAL_TIM_PWM_Init+0x76>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a3e      	ldr	r2, [pc, #248]	; (80052ec <HAL_TIM_PWM_Init+0x138>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d018      	beq.n	800522a <HAL_TIM_PWM_Init+0x76>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a3c      	ldr	r2, [pc, #240]	; (80052f0 <HAL_TIM_PWM_Init+0x13c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d013      	beq.n	800522a <HAL_TIM_PWM_Init+0x76>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a3b      	ldr	r2, [pc, #236]	; (80052f4 <HAL_TIM_PWM_Init+0x140>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d00e      	beq.n	800522a <HAL_TIM_PWM_Init+0x76>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a39      	ldr	r2, [pc, #228]	; (80052f8 <HAL_TIM_PWM_Init+0x144>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d009      	beq.n	800522a <HAL_TIM_PWM_Init+0x76>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a38      	ldr	r2, [pc, #224]	; (80052fc <HAL_TIM_PWM_Init+0x148>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d004      	beq.n	800522a <HAL_TIM_PWM_Init+0x76>
 8005220:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8005224:	4836      	ldr	r0, [pc, #216]	; (8005300 <HAL_TIM_PWM_Init+0x14c>)
 8005226:	f7fb ff73 	bl	8001110 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d014      	beq.n	800525c <HAL_TIM_PWM_Init+0xa8>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	2b10      	cmp	r3, #16
 8005238:	d010      	beq.n	800525c <HAL_TIM_PWM_Init+0xa8>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	2b20      	cmp	r3, #32
 8005240:	d00c      	beq.n	800525c <HAL_TIM_PWM_Init+0xa8>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	2b40      	cmp	r3, #64	; 0x40
 8005248:	d008      	beq.n	800525c <HAL_TIM_PWM_Init+0xa8>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	2b60      	cmp	r3, #96	; 0x60
 8005250:	d004      	beq.n	800525c <HAL_TIM_PWM_Init+0xa8>
 8005252:	f240 4171 	movw	r1, #1137	; 0x471
 8005256:	482a      	ldr	r0, [pc, #168]	; (8005300 <HAL_TIM_PWM_Init+0x14c>)
 8005258:	f7fb ff5a 	bl	8001110 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00e      	beq.n	8005282 <HAL_TIM_PWM_Init+0xce>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800526c:	d009      	beq.n	8005282 <HAL_TIM_PWM_Init+0xce>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005276:	d004      	beq.n	8005282 <HAL_TIM_PWM_Init+0xce>
 8005278:	f240 4172 	movw	r1, #1138	; 0x472
 800527c:	4820      	ldr	r0, [pc, #128]	; (8005300 <HAL_TIM_PWM_Init+0x14c>)
 800527e:	f7fb ff47 	bl	8001110 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d008      	beq.n	800529c <HAL_TIM_PWM_Init+0xe8>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	2b80      	cmp	r3, #128	; 0x80
 8005290:	d004      	beq.n	800529c <HAL_TIM_PWM_Init+0xe8>
 8005292:	f240 4173 	movw	r1, #1139	; 0x473
 8005296:	481a      	ldr	r0, [pc, #104]	; (8005300 <HAL_TIM_PWM_Init+0x14c>)
 8005298:	f7fb ff3a 	bl	8001110 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d106      	bne.n	80052b6 <HAL_TIM_PWM_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f827 	bl	8005304 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2202      	movs	r2, #2
 80052ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3304      	adds	r3, #4
 80052c6:	4619      	mov	r1, r3
 80052c8:	4610      	mov	r0, r2
 80052ca:	f000 fe3b 	bl	8005f44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40000400 	.word	0x40000400
 80052e4:	40000800 	.word	0x40000800
 80052e8:	40000c00 	.word	0x40000c00
 80052ec:	40001000 	.word	0x40001000
 80052f0:	40001400 	.word	0x40001400
 80052f4:	40010800 	.word	0x40010800
 80052f8:	40010c00 	.word	0x40010c00
 80052fc:	40011000 	.word	0x40011000
 8005300:	0800a2a8 	.word	0x0800a2a8

08005304 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	bc80      	pop	{r7}
 8005314:	4770      	bx	lr
	...

08005318 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800532a:	d10b      	bne.n	8005344 <HAL_TIM_PWM_Start+0x2c>
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d05b      	beq.n	80053ea <HAL_TIM_PWM_Start+0xd2>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b04      	cmp	r3, #4
 8005336:	d058      	beq.n	80053ea <HAL_TIM_PWM_Start+0xd2>
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2b08      	cmp	r3, #8
 800533c:	d055      	beq.n	80053ea <HAL_TIM_PWM_Start+0xd2>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b0c      	cmp	r3, #12
 8005342:	d052      	beq.n	80053ea <HAL_TIM_PWM_Start+0xd2>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a36      	ldr	r2, [pc, #216]	; (8005424 <HAL_TIM_PWM_Start+0x10c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d10b      	bne.n	8005366 <HAL_TIM_PWM_Start+0x4e>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d04a      	beq.n	80053ea <HAL_TIM_PWM_Start+0xd2>
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	2b04      	cmp	r3, #4
 8005358:	d047      	beq.n	80053ea <HAL_TIM_PWM_Start+0xd2>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b08      	cmp	r3, #8
 800535e:	d044      	beq.n	80053ea <HAL_TIM_PWM_Start+0xd2>
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	2b0c      	cmp	r3, #12
 8005364:	d041      	beq.n	80053ea <HAL_TIM_PWM_Start+0xd2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a2f      	ldr	r2, [pc, #188]	; (8005428 <HAL_TIM_PWM_Start+0x110>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d10b      	bne.n	8005388 <HAL_TIM_PWM_Start+0x70>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d039      	beq.n	80053ea <HAL_TIM_PWM_Start+0xd2>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b04      	cmp	r3, #4
 800537a:	d036      	beq.n	80053ea <HAL_TIM_PWM_Start+0xd2>
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	2b08      	cmp	r3, #8
 8005380:	d033      	beq.n	80053ea <HAL_TIM_PWM_Start+0xd2>
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	2b0c      	cmp	r3, #12
 8005386:	d030      	beq.n	80053ea <HAL_TIM_PWM_Start+0xd2>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a27      	ldr	r2, [pc, #156]	; (800542c <HAL_TIM_PWM_Start+0x114>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d10b      	bne.n	80053aa <HAL_TIM_PWM_Start+0x92>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d028      	beq.n	80053ea <HAL_TIM_PWM_Start+0xd2>
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2b04      	cmp	r3, #4
 800539c:	d025      	beq.n	80053ea <HAL_TIM_PWM_Start+0xd2>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d022      	beq.n	80053ea <HAL_TIM_PWM_Start+0xd2>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2b0c      	cmp	r3, #12
 80053a8:	d01f      	beq.n	80053ea <HAL_TIM_PWM_Start+0xd2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a20      	ldr	r2, [pc, #128]	; (8005430 <HAL_TIM_PWM_Start+0x118>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d105      	bne.n	80053c0 <HAL_TIM_PWM_Start+0xa8>
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d017      	beq.n	80053ea <HAL_TIM_PWM_Start+0xd2>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b04      	cmp	r3, #4
 80053be:	d014      	beq.n	80053ea <HAL_TIM_PWM_Start+0xd2>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a1b      	ldr	r2, [pc, #108]	; (8005434 <HAL_TIM_PWM_Start+0x11c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d102      	bne.n	80053d0 <HAL_TIM_PWM_Start+0xb8>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00c      	beq.n	80053ea <HAL_TIM_PWM_Start+0xd2>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a18      	ldr	r2, [pc, #96]	; (8005438 <HAL_TIM_PWM_Start+0x120>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d102      	bne.n	80053e0 <HAL_TIM_PWM_Start+0xc8>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d004      	beq.n	80053ea <HAL_TIM_PWM_Start+0xd2>
 80053e0:	f44f 619d 	mov.w	r1, #1256	; 0x4e8
 80053e4:	4815      	ldr	r0, [pc, #84]	; (800543c <HAL_TIM_PWM_Start+0x124>)
 80053e6:	f7fb fe93 	bl	8001110 <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2201      	movs	r2, #1
 80053f0:	6839      	ldr	r1, [r7, #0]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 ffa2 	bl	800633c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b06      	cmp	r3, #6
 8005408:	d007      	beq.n	800541a <HAL_TIM_PWM_Start+0x102>
  {
    __HAL_TIM_ENABLE(htim);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f042 0201 	orr.w	r2, r2, #1
 8005418:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	40000400 	.word	0x40000400
 8005428:	40000800 	.word	0x40000800
 800542c:	40000c00 	.word	0x40000c00
 8005430:	40010800 	.word	0x40010800
 8005434:	40010c00 	.word	0x40010c00
 8005438:	40011000 	.word	0x40011000
 800543c:	0800a2a8 	.word	0x0800a2a8

08005440 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b02      	cmp	r3, #2
 8005454:	d122      	bne.n	800549c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b02      	cmp	r3, #2
 8005462:	d11b      	bne.n	800549c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f06f 0202 	mvn.w	r2, #2
 800546c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fd43 	bl	8005f0e <HAL_TIM_IC_CaptureCallback>
 8005488:	e005      	b.n	8005496 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fd36 	bl	8005efc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 fd45 	bl	8005f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f003 0304 	and.w	r3, r3, #4
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d122      	bne.n	80054f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d11b      	bne.n	80054f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f06f 0204 	mvn.w	r2, #4
 80054c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2202      	movs	r2, #2
 80054c6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fd19 	bl	8005f0e <HAL_TIM_IC_CaptureCallback>
 80054dc:	e005      	b.n	80054ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fd0c 	bl	8005efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fd1b 	bl	8005f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f003 0308 	and.w	r3, r3, #8
 80054fa:	2b08      	cmp	r3, #8
 80054fc:	d122      	bne.n	8005544 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f003 0308 	and.w	r3, r3, #8
 8005508:	2b08      	cmp	r3, #8
 800550a:	d11b      	bne.n	8005544 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f06f 0208 	mvn.w	r2, #8
 8005514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2204      	movs	r2, #4
 800551a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fcef 	bl	8005f0e <HAL_TIM_IC_CaptureCallback>
 8005530:	e005      	b.n	800553e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fce2 	bl	8005efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 fcf1 	bl	8005f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f003 0310 	and.w	r3, r3, #16
 800554e:	2b10      	cmp	r3, #16
 8005550:	d122      	bne.n	8005598 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f003 0310 	and.w	r3, r3, #16
 800555c:	2b10      	cmp	r3, #16
 800555e:	d11b      	bne.n	8005598 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f06f 0210 	mvn.w	r2, #16
 8005568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2208      	movs	r2, #8
 800556e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fcc5 	bl	8005f0e <HAL_TIM_IC_CaptureCallback>
 8005584:	e005      	b.n	8005592 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fcb8 	bl	8005efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 fcc7 	bl	8005f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d10e      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d107      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0201 	mvn.w	r2, #1
 80055bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7fb fd8e 	bl	80010e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ce:	2b40      	cmp	r3, #64	; 0x40
 80055d0:	d10e      	bne.n	80055f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055dc:	2b40      	cmp	r3, #64	; 0x40
 80055de:	d107      	bne.n	80055f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fca1 	bl	8005f32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055f0:	bf00      	nop
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d010      	beq.n	800562c <HAL_TIM_PWM_ConfigChannel+0x34>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b04      	cmp	r3, #4
 800560e:	d00d      	beq.n	800562c <HAL_TIM_PWM_ConfigChannel+0x34>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b08      	cmp	r3, #8
 8005614:	d00a      	beq.n	800562c <HAL_TIM_PWM_ConfigChannel+0x34>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b0c      	cmp	r3, #12
 800561a:	d007      	beq.n	800562c <HAL_TIM_PWM_ConfigChannel+0x34>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b3c      	cmp	r3, #60	; 0x3c
 8005620:	d004      	beq.n	800562c <HAL_TIM_PWM_ConfigChannel+0x34>
 8005622:	f640 5169 	movw	r1, #3433	; 0xd69
 8005626:	488d      	ldr	r0, [pc, #564]	; (800585c <HAL_TIM_PWM_ConfigChannel+0x264>)
 8005628:	f7fb fd72 	bl	8001110 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b60      	cmp	r3, #96	; 0x60
 8005632:	d008      	beq.n	8005646 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b70      	cmp	r3, #112	; 0x70
 800563a:	d004      	beq.n	8005646 <HAL_TIM_PWM_ConfigChannel+0x4e>
 800563c:	f640 516a 	movw	r1, #3434	; 0xd6a
 8005640:	4886      	ldr	r0, [pc, #536]	; (800585c <HAL_TIM_PWM_ConfigChannel+0x264>)
 8005642:	f7fb fd65 	bl	8001110 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d008      	beq.n	8005660 <HAL_TIM_PWM_ConfigChannel+0x68>
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	2b02      	cmp	r3, #2
 8005654:	d004      	beq.n	8005660 <HAL_TIM_PWM_ConfigChannel+0x68>
 8005656:	f640 516b 	movw	r1, #3435	; 0xd6b
 800565a:	4880      	ldr	r0, [pc, #512]	; (800585c <HAL_TIM_PWM_ConfigChannel+0x264>)
 800565c:	f7fb fd58 	bl	8001110 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d008      	beq.n	800567a <HAL_TIM_PWM_ConfigChannel+0x82>
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	2b04      	cmp	r3, #4
 800566e:	d004      	beq.n	800567a <HAL_TIM_PWM_ConfigChannel+0x82>
 8005670:	f640 516c 	movw	r1, #3436	; 0xd6c
 8005674:	4879      	ldr	r0, [pc, #484]	; (800585c <HAL_TIM_PWM_ConfigChannel+0x264>)
 8005676:	f7fb fd4b 	bl	8001110 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_TIM_PWM_ConfigChannel+0x90>
 8005684:	2302      	movs	r3, #2
 8005686:	e13b      	b.n	8005900 <HAL_TIM_PWM_ConfigChannel+0x308>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b0c      	cmp	r3, #12
 800569c:	f200 8126 	bhi.w	80058ec <HAL_TIM_PWM_ConfigChannel+0x2f4>
 80056a0:	a201      	add	r2, pc, #4	; (adr r2, 80056a8 <HAL_TIM_PWM_ConfigChannel+0xb0>)
 80056a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a6:	bf00      	nop
 80056a8:	080056dd 	.word	0x080056dd
 80056ac:	080058ed 	.word	0x080058ed
 80056b0:	080058ed 	.word	0x080058ed
 80056b4:	080058ed 	.word	0x080058ed
 80056b8:	0800576d 	.word	0x0800576d
 80056bc:	080058ed 	.word	0x080058ed
 80056c0:	080058ed 	.word	0x080058ed
 80056c4:	080058ed 	.word	0x080058ed
 80056c8:	080057eb 	.word	0x080057eb
 80056cc:	080058ed 	.word	0x080058ed
 80056d0:	080058ed 	.word	0x080058ed
 80056d4:	080058ed 	.word	0x080058ed
 80056d8:	08005879 	.word	0x08005879
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e4:	d022      	beq.n	800572c <HAL_TIM_PWM_ConfigChannel+0x134>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a5d      	ldr	r2, [pc, #372]	; (8005860 <HAL_TIM_PWM_ConfigChannel+0x268>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d01d      	beq.n	800572c <HAL_TIM_PWM_ConfigChannel+0x134>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a5b      	ldr	r2, [pc, #364]	; (8005864 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d018      	beq.n	800572c <HAL_TIM_PWM_ConfigChannel+0x134>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a5a      	ldr	r2, [pc, #360]	; (8005868 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d013      	beq.n	800572c <HAL_TIM_PWM_ConfigChannel+0x134>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a58      	ldr	r2, [pc, #352]	; (800586c <HAL_TIM_PWM_ConfigChannel+0x274>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00e      	beq.n	800572c <HAL_TIM_PWM_ConfigChannel+0x134>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a57      	ldr	r2, [pc, #348]	; (8005870 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d009      	beq.n	800572c <HAL_TIM_PWM_ConfigChannel+0x134>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a55      	ldr	r2, [pc, #340]	; (8005874 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d004      	beq.n	800572c <HAL_TIM_PWM_ConfigChannel+0x134>
 8005722:	f640 5178 	movw	r1, #3448	; 0xd78
 8005726:	484d      	ldr	r0, [pc, #308]	; (800585c <HAL_TIM_PWM_ConfigChannel+0x264>)
 8005728:	f7fb fcf2 	bl	8001110 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68b9      	ldr	r1, [r7, #8]
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fc76 	bl	8006024 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699a      	ldr	r2, [r3, #24]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0208 	orr.w	r2, r2, #8
 8005746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	699a      	ldr	r2, [r3, #24]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 0204 	bic.w	r2, r2, #4
 8005756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6999      	ldr	r1, [r3, #24]
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	619a      	str	r2, [r3, #24]
      break;
 800576a:	e0c0      	b.n	80058ee <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005774:	d018      	beq.n	80057a8 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a39      	ldr	r2, [pc, #228]	; (8005860 <HAL_TIM_PWM_ConfigChannel+0x268>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d013      	beq.n	80057a8 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a37      	ldr	r2, [pc, #220]	; (8005864 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d00e      	beq.n	80057a8 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a36      	ldr	r2, [pc, #216]	; (8005868 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d009      	beq.n	80057a8 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a34      	ldr	r2, [pc, #208]	; (800586c <HAL_TIM_PWM_ConfigChannel+0x274>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d004      	beq.n	80057a8 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 800579e:	f640 5189 	movw	r1, #3465	; 0xd89
 80057a2:	482e      	ldr	r0, [pc, #184]	; (800585c <HAL_TIM_PWM_ConfigChannel+0x264>)
 80057a4:	f7fb fcb4 	bl	8001110 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68b9      	ldr	r1, [r7, #8]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 fc74 	bl	800609c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	699a      	ldr	r2, [r3, #24]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699a      	ldr	r2, [r3, #24]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6999      	ldr	r1, [r3, #24]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	021a      	lsls	r2, r3, #8
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	619a      	str	r2, [r3, #24]
      break;
 80057e8:	e081      	b.n	80058ee <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f2:	d013      	beq.n	800581c <HAL_TIM_PWM_ConfigChannel+0x224>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a19      	ldr	r2, [pc, #100]	; (8005860 <HAL_TIM_PWM_ConfigChannel+0x268>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d00e      	beq.n	800581c <HAL_TIM_PWM_ConfigChannel+0x224>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a18      	ldr	r2, [pc, #96]	; (8005864 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d009      	beq.n	800581c <HAL_TIM_PWM_ConfigChannel+0x224>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a16      	ldr	r2, [pc, #88]	; (8005868 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d004      	beq.n	800581c <HAL_TIM_PWM_ConfigChannel+0x224>
 8005812:	f640 519a 	movw	r1, #3482	; 0xd9a
 8005816:	4811      	ldr	r0, [pc, #68]	; (800585c <HAL_TIM_PWM_ConfigChannel+0x264>)
 8005818:	f7fb fc7a 	bl	8001110 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68b9      	ldr	r1, [r7, #8]
 8005822:	4618      	mov	r0, r3
 8005824:	f000 fc78 	bl	8006118 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	69da      	ldr	r2, [r3, #28]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0208 	orr.w	r2, r2, #8
 8005836:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	69da      	ldr	r2, [r3, #28]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0204 	bic.w	r2, r2, #4
 8005846:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	69d9      	ldr	r1, [r3, #28]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	61da      	str	r2, [r3, #28]
      break;
 800585a:	e048      	b.n	80058ee <HAL_TIM_PWM_ConfigChannel+0x2f6>
 800585c:	0800a2a8 	.word	0x0800a2a8
 8005860:	40000400 	.word	0x40000400
 8005864:	40000800 	.word	0x40000800
 8005868:	40000c00 	.word	0x40000c00
 800586c:	40010800 	.word	0x40010800
 8005870:	40010c00 	.word	0x40010c00
 8005874:	40011000 	.word	0x40011000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005880:	d013      	beq.n	80058aa <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a20      	ldr	r2, [pc, #128]	; (8005908 <HAL_TIM_PWM_ConfigChannel+0x310>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d00e      	beq.n	80058aa <HAL_TIM_PWM_ConfigChannel+0x2b2>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a1e      	ldr	r2, [pc, #120]	; (800590c <HAL_TIM_PWM_ConfigChannel+0x314>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d009      	beq.n	80058aa <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a1d      	ldr	r2, [pc, #116]	; (8005910 <HAL_TIM_PWM_ConfigChannel+0x318>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d004      	beq.n	80058aa <HAL_TIM_PWM_ConfigChannel+0x2b2>
 80058a0:	f640 51ab 	movw	r1, #3499	; 0xdab
 80058a4:	481b      	ldr	r0, [pc, #108]	; (8005914 <HAL_TIM_PWM_ConfigChannel+0x31c>)
 80058a6:	f7fb fc33 	bl	8001110 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68b9      	ldr	r1, [r7, #8]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 fc6e 	bl	8006192 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69da      	ldr	r2, [r3, #28]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	69da      	ldr	r2, [r3, #28]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69d9      	ldr	r1, [r3, #28]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	021a      	lsls	r2, r3, #8
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	61da      	str	r2, [r3, #28]
      break;
 80058ea:	e000      	b.n	80058ee <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    default:
      break;
 80058ec:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	40000400 	.word	0x40000400
 800590c:	40000800 	.word	0x40000800
 8005910:	40000c00 	.word	0x40000c00
 8005914:	0800a2a8 	.word	0x0800a2a8

08005918 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005928:	2b01      	cmp	r3, #1
 800592a:	d101      	bne.n	8005930 <HAL_TIM_ConfigClockSource+0x18>
 800592c:	2302      	movs	r3, #2
 800592e:	e2d7      	b.n	8005ee0 <HAL_TIM_ConfigClockSource+0x5c8>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005948:	d029      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x86>
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005952:	d024      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x86>
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d020      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x86>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b10      	cmp	r3, #16
 8005962:	d01c      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x86>
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b20      	cmp	r3, #32
 800596a:	d018      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x86>
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b30      	cmp	r3, #48	; 0x30
 8005972:	d014      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x86>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b40      	cmp	r3, #64	; 0x40
 800597a:	d010      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x86>
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b50      	cmp	r3, #80	; 0x50
 8005982:	d00c      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x86>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b60      	cmp	r3, #96	; 0x60
 800598a:	d008      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x86>
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b70      	cmp	r3, #112	; 0x70
 8005992:	d004      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x86>
 8005994:	f241 01d0 	movw	r1, #4304	; 0x10d0
 8005998:	4874      	ldr	r0, [pc, #464]	; (8005b6c <HAL_TIM_ConfigClockSource+0x254>)
 800599a:	f7fb fbb9 	bl	8001110 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059ac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059b4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b40      	cmp	r3, #64	; 0x40
 80059c4:	f000 820a 	beq.w	8005ddc <HAL_TIM_ConfigClockSource+0x4c4>
 80059c8:	2b40      	cmp	r3, #64	; 0x40
 80059ca:	d80f      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0xd4>
 80059cc:	2b10      	cmp	r3, #16
 80059ce:	f000 8256 	beq.w	8005e7e <HAL_TIM_ConfigClockSource+0x566>
 80059d2:	2b10      	cmp	r3, #16
 80059d4:	d803      	bhi.n	80059de <HAL_TIM_ConfigClockSource+0xc6>
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 8251 	beq.w	8005e7e <HAL_TIM_ConfigClockSource+0x566>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80059dc:	e277      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 80059de:	2b20      	cmp	r3, #32
 80059e0:	f000 824d 	beq.w	8005e7e <HAL_TIM_ConfigClockSource+0x566>
 80059e4:	2b30      	cmp	r3, #48	; 0x30
 80059e6:	f000 824a 	beq.w	8005e7e <HAL_TIM_ConfigClockSource+0x566>
      break;
 80059ea:	e270      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 80059ec:	2b70      	cmp	r3, #112	; 0x70
 80059ee:	d04c      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0x172>
 80059f0:	2b70      	cmp	r3, #112	; 0x70
 80059f2:	d806      	bhi.n	8005a02 <HAL_TIM_ConfigClockSource+0xea>
 80059f4:	2b50      	cmp	r3, #80	; 0x50
 80059f6:	f000 8141 	beq.w	8005c7c <HAL_TIM_ConfigClockSource+0x364>
 80059fa:	2b60      	cmp	r3, #96	; 0x60
 80059fc:	f000 818f 	beq.w	8005d1e <HAL_TIM_ConfigClockSource+0x406>
      break;
 8005a00:	e265      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 8005a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a06:	d004      	beq.n	8005a12 <HAL_TIM_ConfigClockSource+0xfa>
 8005a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a0c:	f000 80c0 	beq.w	8005b90 <HAL_TIM_ConfigClockSource+0x278>
      break;
 8005a10:	e25d      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a1a:	f000 8257 	beq.w	8005ecc <HAL_TIM_ConfigClockSource+0x5b4>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a53      	ldr	r2, [pc, #332]	; (8005b70 <HAL_TIM_ConfigClockSource+0x258>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	f000 8251 	beq.w	8005ecc <HAL_TIM_ConfigClockSource+0x5b4>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a51      	ldr	r2, [pc, #324]	; (8005b74 <HAL_TIM_ConfigClockSource+0x25c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	f000 824b 	beq.w	8005ecc <HAL_TIM_ConfigClockSource+0x5b4>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a4f      	ldr	r2, [pc, #316]	; (8005b78 <HAL_TIM_ConfigClockSource+0x260>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	f000 8245 	beq.w	8005ecc <HAL_TIM_ConfigClockSource+0x5b4>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a4d      	ldr	r2, [pc, #308]	; (8005b7c <HAL_TIM_ConfigClockSource+0x264>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	f000 823f 	beq.w	8005ecc <HAL_TIM_ConfigClockSource+0x5b4>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a4b      	ldr	r2, [pc, #300]	; (8005b80 <HAL_TIM_ConfigClockSource+0x268>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	f000 8239 	beq.w	8005ecc <HAL_TIM_ConfigClockSource+0x5b4>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a49      	ldr	r2, [pc, #292]	; (8005b84 <HAL_TIM_ConfigClockSource+0x26c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	f000 8233 	beq.w	8005ecc <HAL_TIM_ConfigClockSource+0x5b4>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a47      	ldr	r2, [pc, #284]	; (8005b88 <HAL_TIM_ConfigClockSource+0x270>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	f000 822d 	beq.w	8005ecc <HAL_TIM_ConfigClockSource+0x5b4>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a45      	ldr	r2, [pc, #276]	; (8005b8c <HAL_TIM_ConfigClockSource+0x274>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	f000 8227 	beq.w	8005ecc <HAL_TIM_ConfigClockSource+0x5b4>
 8005a7e:	f241 01dc 	movw	r1, #4316	; 0x10dc
 8005a82:	483a      	ldr	r0, [pc, #232]	; (8005b6c <HAL_TIM_ConfigClockSource+0x254>)
 8005a84:	f7fb fb44 	bl	8001110 <assert_failed>
      break;
 8005a88:	e220      	b.n	8005ecc <HAL_TIM_ConfigClockSource+0x5b4>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a92:	d018      	beq.n	8005ac6 <HAL_TIM_ConfigClockSource+0x1ae>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a35      	ldr	r2, [pc, #212]	; (8005b70 <HAL_TIM_ConfigClockSource+0x258>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d013      	beq.n	8005ac6 <HAL_TIM_ConfigClockSource+0x1ae>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a34      	ldr	r2, [pc, #208]	; (8005b74 <HAL_TIM_ConfigClockSource+0x25c>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d00e      	beq.n	8005ac6 <HAL_TIM_ConfigClockSource+0x1ae>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a32      	ldr	r2, [pc, #200]	; (8005b78 <HAL_TIM_ConfigClockSource+0x260>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d009      	beq.n	8005ac6 <HAL_TIM_ConfigClockSource+0x1ae>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a33      	ldr	r2, [pc, #204]	; (8005b84 <HAL_TIM_ConfigClockSource+0x26c>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d004      	beq.n	8005ac6 <HAL_TIM_ConfigClockSource+0x1ae>
 8005abc:	f241 01e3 	movw	r1, #4323	; 0x10e3
 8005ac0:	482a      	ldr	r0, [pc, #168]	; (8005b6c <HAL_TIM_ConfigClockSource+0x254>)
 8005ac2:	f7fb fb25 	bl	8001110 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d013      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0x1de>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad6:	d00e      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0x1de>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ae0:	d009      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0x1de>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005aea:	d004      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0x1de>
 8005aec:	f241 01e6 	movw	r1, #4326	; 0x10e6
 8005af0:	481e      	ldr	r0, [pc, #120]	; (8005b6c <HAL_TIM_ConfigClockSource+0x254>)
 8005af2:	f7fb fb0d 	bl	8001110 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005afe:	d014      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0x212>
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d010      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0x212>
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00c      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0x212>
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d008      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0x212>
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	2b0a      	cmp	r3, #10
 8005b1e:	d004      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0x212>
 8005b20:	f241 01e7 	movw	r1, #4327	; 0x10e7
 8005b24:	4811      	ldr	r0, [pc, #68]	; (8005b6c <HAL_TIM_ConfigClockSource+0x254>)
 8005b26:	f7fb faf3 	bl	8001110 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	2b0f      	cmp	r3, #15
 8005b30:	d904      	bls.n	8005b3c <HAL_TIM_ConfigClockSource+0x224>
 8005b32:	f241 01e8 	movw	r1, #4328	; 0x10e8
 8005b36:	480d      	ldr	r0, [pc, #52]	; (8005b6c <HAL_TIM_ConfigClockSource+0x254>)
 8005b38:	f7fb faea 	bl	8001110 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6818      	ldr	r0, [r3, #0]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	6899      	ldr	r1, [r3, #8]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f000 fbd6 	bl	80062fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b5e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	609a      	str	r2, [r3, #8]
      break;
 8005b68:	e1b1      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x5b6>
 8005b6a:	bf00      	nop
 8005b6c:	0800a2a8 	.word	0x0800a2a8
 8005b70:	40000400 	.word	0x40000400
 8005b74:	40000800 	.word	0x40000800
 8005b78:	40000c00 	.word	0x40000c00
 8005b7c:	40001000 	.word	0x40001000
 8005b80:	40001400 	.word	0x40001400
 8005b84:	40010800 	.word	0x40010800
 8005b88:	40010c00 	.word	0x40010c00
 8005b8c:	40011000 	.word	0x40011000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b98:	d022      	beq.n	8005be0 <HAL_TIM_ConfigClockSource+0x2c8>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a88      	ldr	r2, [pc, #544]	; (8005dc0 <HAL_TIM_ConfigClockSource+0x4a8>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d01d      	beq.n	8005be0 <HAL_TIM_ConfigClockSource+0x2c8>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a86      	ldr	r2, [pc, #536]	; (8005dc4 <HAL_TIM_ConfigClockSource+0x4ac>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d018      	beq.n	8005be0 <HAL_TIM_ConfigClockSource+0x2c8>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a85      	ldr	r2, [pc, #532]	; (8005dc8 <HAL_TIM_ConfigClockSource+0x4b0>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d013      	beq.n	8005be0 <HAL_TIM_ConfigClockSource+0x2c8>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a83      	ldr	r2, [pc, #524]	; (8005dcc <HAL_TIM_ConfigClockSource+0x4b4>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d00e      	beq.n	8005be0 <HAL_TIM_ConfigClockSource+0x2c8>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a82      	ldr	r2, [pc, #520]	; (8005dd0 <HAL_TIM_ConfigClockSource+0x4b8>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d009      	beq.n	8005be0 <HAL_TIM_ConfigClockSource+0x2c8>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a80      	ldr	r2, [pc, #512]	; (8005dd4 <HAL_TIM_ConfigClockSource+0x4bc>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d004      	beq.n	8005be0 <HAL_TIM_ConfigClockSource+0x2c8>
 8005bd6:	f241 01fb 	movw	r1, #4347	; 0x10fb
 8005bda:	487f      	ldr	r0, [pc, #508]	; (8005dd8 <HAL_TIM_ConfigClockSource+0x4c0>)
 8005bdc:	f7fb fa98 	bl	8001110 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d013      	beq.n	8005c10 <HAL_TIM_ConfigClockSource+0x2f8>
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf0:	d00e      	beq.n	8005c10 <HAL_TIM_ConfigClockSource+0x2f8>
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bfa:	d009      	beq.n	8005c10 <HAL_TIM_ConfigClockSource+0x2f8>
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c04:	d004      	beq.n	8005c10 <HAL_TIM_ConfigClockSource+0x2f8>
 8005c06:	f241 01fe 	movw	r1, #4350	; 0x10fe
 8005c0a:	4873      	ldr	r0, [pc, #460]	; (8005dd8 <HAL_TIM_ConfigClockSource+0x4c0>)
 8005c0c:	f7fb fa80 	bl	8001110 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c18:	d014      	beq.n	8005c44 <HAL_TIM_ConfigClockSource+0x32c>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d010      	beq.n	8005c44 <HAL_TIM_ConfigClockSource+0x32c>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00c      	beq.n	8005c44 <HAL_TIM_ConfigClockSource+0x32c>
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d008      	beq.n	8005c44 <HAL_TIM_ConfigClockSource+0x32c>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	2b0a      	cmp	r3, #10
 8005c38:	d004      	beq.n	8005c44 <HAL_TIM_ConfigClockSource+0x32c>
 8005c3a:	f241 01ff 	movw	r1, #4351	; 0x10ff
 8005c3e:	4866      	ldr	r0, [pc, #408]	; (8005dd8 <HAL_TIM_ConfigClockSource+0x4c0>)
 8005c40:	f7fb fa66 	bl	8001110 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	2b0f      	cmp	r3, #15
 8005c4a:	d904      	bls.n	8005c56 <HAL_TIM_ConfigClockSource+0x33e>
 8005c4c:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8005c50:	4861      	ldr	r0, [pc, #388]	; (8005dd8 <HAL_TIM_ConfigClockSource+0x4c0>)
 8005c52:	f7fb fa5d 	bl	8001110 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6818      	ldr	r0, [r3, #0]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	6899      	ldr	r1, [r3, #8]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f000 fb49 	bl	80062fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c78:	609a      	str	r2, [r3, #8]
      break;
 8005c7a:	e128      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c84:	d018      	beq.n	8005cb8 <HAL_TIM_ConfigClockSource+0x3a0>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a4d      	ldr	r2, [pc, #308]	; (8005dc0 <HAL_TIM_ConfigClockSource+0x4a8>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d013      	beq.n	8005cb8 <HAL_TIM_ConfigClockSource+0x3a0>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a4b      	ldr	r2, [pc, #300]	; (8005dc4 <HAL_TIM_ConfigClockSource+0x4ac>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d00e      	beq.n	8005cb8 <HAL_TIM_ConfigClockSource+0x3a0>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a4a      	ldr	r2, [pc, #296]	; (8005dc8 <HAL_TIM_ConfigClockSource+0x4b0>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d009      	beq.n	8005cb8 <HAL_TIM_ConfigClockSource+0x3a0>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a48      	ldr	r2, [pc, #288]	; (8005dcc <HAL_TIM_ConfigClockSource+0x4b4>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d004      	beq.n	8005cb8 <HAL_TIM_ConfigClockSource+0x3a0>
 8005cae:	f241 110f 	movw	r1, #4367	; 0x110f
 8005cb2:	4849      	ldr	r0, [pc, #292]	; (8005dd8 <HAL_TIM_ConfigClockSource+0x4c0>)
 8005cb4:	f7fb fa2c 	bl	8001110 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cc0:	d014      	beq.n	8005cec <HAL_TIM_ConfigClockSource+0x3d4>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d010      	beq.n	8005cec <HAL_TIM_ConfigClockSource+0x3d4>
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00c      	beq.n	8005cec <HAL_TIM_ConfigClockSource+0x3d4>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d008      	beq.n	8005cec <HAL_TIM_ConfigClockSource+0x3d4>
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	2b0a      	cmp	r3, #10
 8005ce0:	d004      	beq.n	8005cec <HAL_TIM_ConfigClockSource+0x3d4>
 8005ce2:	f241 1112 	movw	r1, #4370	; 0x1112
 8005ce6:	483c      	ldr	r0, [pc, #240]	; (8005dd8 <HAL_TIM_ConfigClockSource+0x4c0>)
 8005ce8:	f7fb fa12 	bl	8001110 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	2b0f      	cmp	r3, #15
 8005cf2:	d904      	bls.n	8005cfe <HAL_TIM_ConfigClockSource+0x3e6>
 8005cf4:	f241 1113 	movw	r1, #4371	; 0x1113
 8005cf8:	4837      	ldr	r0, [pc, #220]	; (8005dd8 <HAL_TIM_ConfigClockSource+0x4c0>)
 8005cfa:	f7fb fa09 	bl	8001110 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6818      	ldr	r0, [r3, #0]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	6859      	ldr	r1, [r3, #4]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	f000 fa7f 	bl	800620e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2150      	movs	r1, #80	; 0x50
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 fad6 	bl	80062c8 <TIM_ITRx_SetConfig>
      break;
 8005d1c:	e0d7      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d26:	d018      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0x442>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a24      	ldr	r2, [pc, #144]	; (8005dc0 <HAL_TIM_ConfigClockSource+0x4a8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d013      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0x442>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a23      	ldr	r2, [pc, #140]	; (8005dc4 <HAL_TIM_ConfigClockSource+0x4ac>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d00e      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0x442>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a21      	ldr	r2, [pc, #132]	; (8005dc8 <HAL_TIM_ConfigClockSource+0x4b0>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d009      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0x442>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a20      	ldr	r2, [pc, #128]	; (8005dcc <HAL_TIM_ConfigClockSource+0x4b4>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d004      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0x442>
 8005d50:	f241 111f 	movw	r1, #4383	; 0x111f
 8005d54:	4820      	ldr	r0, [pc, #128]	; (8005dd8 <HAL_TIM_ConfigClockSource+0x4c0>)
 8005d56:	f7fb f9db 	bl	8001110 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d62:	d014      	beq.n	8005d8e <HAL_TIM_ConfigClockSource+0x476>
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d010      	beq.n	8005d8e <HAL_TIM_ConfigClockSource+0x476>
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00c      	beq.n	8005d8e <HAL_TIM_ConfigClockSource+0x476>
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d008      	beq.n	8005d8e <HAL_TIM_ConfigClockSource+0x476>
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	2b0a      	cmp	r3, #10
 8005d82:	d004      	beq.n	8005d8e <HAL_TIM_ConfigClockSource+0x476>
 8005d84:	f241 1122 	movw	r1, #4386	; 0x1122
 8005d88:	4813      	ldr	r0, [pc, #76]	; (8005dd8 <HAL_TIM_ConfigClockSource+0x4c0>)
 8005d8a:	f7fb f9c1 	bl	8001110 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	2b0f      	cmp	r3, #15
 8005d94:	d904      	bls.n	8005da0 <HAL_TIM_ConfigClockSource+0x488>
 8005d96:	f241 1123 	movw	r1, #4387	; 0x1123
 8005d9a:	480f      	ldr	r0, [pc, #60]	; (8005dd8 <HAL_TIM_ConfigClockSource+0x4c0>)
 8005d9c:	f7fb f9b8 	bl	8001110 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6818      	ldr	r0, [r3, #0]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	6859      	ldr	r1, [r3, #4]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	461a      	mov	r2, r3
 8005dae:	f000 fa5c 	bl	800626a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2160      	movs	r1, #96	; 0x60
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 fa85 	bl	80062c8 <TIM_ITRx_SetConfig>
      break;
 8005dbe:	e086      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x5b6>
 8005dc0:	40000400 	.word	0x40000400
 8005dc4:	40000800 	.word	0x40000800
 8005dc8:	40000c00 	.word	0x40000c00
 8005dcc:	40010800 	.word	0x40010800
 8005dd0:	40010c00 	.word	0x40010c00
 8005dd4:	40011000 	.word	0x40011000
 8005dd8:	0800a2a8 	.word	0x0800a2a8
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de4:	d018      	beq.n	8005e18 <HAL_TIM_ConfigClockSource+0x500>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a3f      	ldr	r2, [pc, #252]	; (8005ee8 <HAL_TIM_ConfigClockSource+0x5d0>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d013      	beq.n	8005e18 <HAL_TIM_ConfigClockSource+0x500>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a3d      	ldr	r2, [pc, #244]	; (8005eec <HAL_TIM_ConfigClockSource+0x5d4>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00e      	beq.n	8005e18 <HAL_TIM_ConfigClockSource+0x500>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a3c      	ldr	r2, [pc, #240]	; (8005ef0 <HAL_TIM_ConfigClockSource+0x5d8>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d009      	beq.n	8005e18 <HAL_TIM_ConfigClockSource+0x500>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a3a      	ldr	r2, [pc, #232]	; (8005ef4 <HAL_TIM_ConfigClockSource+0x5dc>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d004      	beq.n	8005e18 <HAL_TIM_ConfigClockSource+0x500>
 8005e0e:	f241 112f 	movw	r1, #4399	; 0x112f
 8005e12:	4839      	ldr	r0, [pc, #228]	; (8005ef8 <HAL_TIM_ConfigClockSource+0x5e0>)
 8005e14:	f7fb f97c 	bl	8001110 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e20:	d014      	beq.n	8005e4c <HAL_TIM_ConfigClockSource+0x534>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d010      	beq.n	8005e4c <HAL_TIM_ConfigClockSource+0x534>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00c      	beq.n	8005e4c <HAL_TIM_ConfigClockSource+0x534>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d008      	beq.n	8005e4c <HAL_TIM_ConfigClockSource+0x534>
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	2b0a      	cmp	r3, #10
 8005e40:	d004      	beq.n	8005e4c <HAL_TIM_ConfigClockSource+0x534>
 8005e42:	f241 1132 	movw	r1, #4402	; 0x1132
 8005e46:	482c      	ldr	r0, [pc, #176]	; (8005ef8 <HAL_TIM_ConfigClockSource+0x5e0>)
 8005e48:	f7fb f962 	bl	8001110 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	2b0f      	cmp	r3, #15
 8005e52:	d904      	bls.n	8005e5e <HAL_TIM_ConfigClockSource+0x546>
 8005e54:	f241 1133 	movw	r1, #4403	; 0x1133
 8005e58:	4827      	ldr	r0, [pc, #156]	; (8005ef8 <HAL_TIM_ConfigClockSource+0x5e0>)
 8005e5a:	f7fb f959 	bl	8001110 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6818      	ldr	r0, [r3, #0]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	6859      	ldr	r1, [r3, #4]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f000 f9cf 	bl	800620e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2140      	movs	r1, #64	; 0x40
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 fa26 	bl	80062c8 <TIM_ITRx_SetConfig>
      break;
 8005e7c:	e027      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e86:	d018      	beq.n	8005eba <HAL_TIM_ConfigClockSource+0x5a2>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a16      	ldr	r2, [pc, #88]	; (8005ee8 <HAL_TIM_ConfigClockSource+0x5d0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d013      	beq.n	8005eba <HAL_TIM_ConfigClockSource+0x5a2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a15      	ldr	r2, [pc, #84]	; (8005eec <HAL_TIM_ConfigClockSource+0x5d4>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00e      	beq.n	8005eba <HAL_TIM_ConfigClockSource+0x5a2>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a13      	ldr	r2, [pc, #76]	; (8005ef0 <HAL_TIM_ConfigClockSource+0x5d8>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d009      	beq.n	8005eba <HAL_TIM_ConfigClockSource+0x5a2>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a12      	ldr	r2, [pc, #72]	; (8005ef4 <HAL_TIM_ConfigClockSource+0x5dc>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d004      	beq.n	8005eba <HAL_TIM_ConfigClockSource+0x5a2>
 8005eb0:	f241 1142 	movw	r1, #4418	; 0x1142
 8005eb4:	4810      	ldr	r0, [pc, #64]	; (8005ef8 <HAL_TIM_ConfigClockSource+0x5e0>)
 8005eb6:	f7fb f92b 	bl	8001110 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	f000 f9ff 	bl	80062c8 <TIM_ITRx_SetConfig>
      break;
 8005eca:	e000      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x5b6>
      break;
 8005ecc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	40000400 	.word	0x40000400
 8005eec:	40000800 	.word	0x40000800
 8005ef0:	40000c00 	.word	0x40000c00
 8005ef4:	40010800 	.word	0x40010800
 8005ef8:	0800a2a8 	.word	0x0800a2a8

08005efc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bc80      	pop	{r7}
 8005f0c:	4770      	bx	lr

08005f0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b083      	sub	sp, #12
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bc80      	pop	{r7}
 8005f1e:	4770      	bx	lr

08005f20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bc80      	pop	{r7}
 8005f30:	4770      	bx	lr

08005f32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b083      	sub	sp, #12
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bc80      	pop	{r7}
 8005f42:	4770      	bx	lr

08005f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f5a:	d00f      	beq.n	8005f7c <TIM_Base_SetConfig+0x38>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a2b      	ldr	r2, [pc, #172]	; (800600c <TIM_Base_SetConfig+0xc8>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d00b      	beq.n	8005f7c <TIM_Base_SetConfig+0x38>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a2a      	ldr	r2, [pc, #168]	; (8006010 <TIM_Base_SetConfig+0xcc>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d007      	beq.n	8005f7c <TIM_Base_SetConfig+0x38>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a29      	ldr	r2, [pc, #164]	; (8006014 <TIM_Base_SetConfig+0xd0>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d003      	beq.n	8005f7c <TIM_Base_SetConfig+0x38>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a28      	ldr	r2, [pc, #160]	; (8006018 <TIM_Base_SetConfig+0xd4>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d108      	bne.n	8005f8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f94:	d017      	beq.n	8005fc6 <TIM_Base_SetConfig+0x82>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a1c      	ldr	r2, [pc, #112]	; (800600c <TIM_Base_SetConfig+0xc8>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d013      	beq.n	8005fc6 <TIM_Base_SetConfig+0x82>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a1b      	ldr	r2, [pc, #108]	; (8006010 <TIM_Base_SetConfig+0xcc>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00f      	beq.n	8005fc6 <TIM_Base_SetConfig+0x82>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a1a      	ldr	r2, [pc, #104]	; (8006014 <TIM_Base_SetConfig+0xd0>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00b      	beq.n	8005fc6 <TIM_Base_SetConfig+0x82>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a19      	ldr	r2, [pc, #100]	; (8006018 <TIM_Base_SetConfig+0xd4>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d007      	beq.n	8005fc6 <TIM_Base_SetConfig+0x82>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a18      	ldr	r2, [pc, #96]	; (800601c <TIM_Base_SetConfig+0xd8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d003      	beq.n	8005fc6 <TIM_Base_SetConfig+0x82>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a17      	ldr	r2, [pc, #92]	; (8006020 <TIM_Base_SetConfig+0xdc>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d108      	bne.n	8005fd8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	615a      	str	r2, [r3, #20]
}
 8006002:	bf00      	nop
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	bc80      	pop	{r7}
 800600a:	4770      	bx	lr
 800600c:	40000400 	.word	0x40000400
 8006010:	40000800 	.word	0x40000800
 8006014:	40000c00 	.word	0x40000c00
 8006018:	40010800 	.word	0x40010800
 800601c:	40010c00 	.word	0x40010c00
 8006020:	40011000 	.word	0x40011000

08006024 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	f023 0201 	bic.w	r2, r3, #1
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f023 0303 	bic.w	r3, r3, #3
 800605a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	4313      	orrs	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f023 0302 	bic.w	r3, r3, #2
 800606c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	4313      	orrs	r3, r2
 8006076:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	621a      	str	r2, [r3, #32]
}
 8006092:	bf00      	nop
 8006094:	371c      	adds	r7, #28
 8006096:	46bd      	mov	sp, r7
 8006098:	bc80      	pop	{r7}
 800609a:	4770      	bx	lr

0800609c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800609c:	b480      	push	{r7}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	f023 0210 	bic.w	r2, r3, #16
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	021b      	lsls	r3, r3, #8
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	4313      	orrs	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f023 0320 	bic.w	r3, r3, #32
 80060e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	011b      	lsls	r3, r3, #4
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	621a      	str	r2, [r3, #32]
}
 800610e:	bf00      	nop
 8006110:	371c      	adds	r7, #28
 8006112:	46bd      	mov	sp, r7
 8006114:	bc80      	pop	{r7}
 8006116:	4770      	bx	lr

08006118 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 0303 	bic.w	r3, r3, #3
 800614e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	021b      	lsls	r3, r3, #8
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	4313      	orrs	r3, r2
 800616c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	621a      	str	r2, [r3, #32]
}
 8006188:	bf00      	nop
 800618a:	371c      	adds	r7, #28
 800618c:	46bd      	mov	sp, r7
 800618e:	bc80      	pop	{r7}
 8006190:	4770      	bx	lr

08006192 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006192:	b480      	push	{r7}
 8006194:	b087      	sub	sp, #28
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061c8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	021b      	lsls	r3, r3, #8
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	031b      	lsls	r3, r3, #12
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	685a      	ldr	r2, [r3, #4]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	621a      	str	r2, [r3, #32]
}
 8006204:	bf00      	nop
 8006206:	371c      	adds	r7, #28
 8006208:	46bd      	mov	sp, r7
 800620a:	bc80      	pop	{r7}
 800620c:	4770      	bx	lr

0800620e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800620e:	b480      	push	{r7}
 8006210:	b087      	sub	sp, #28
 8006212:	af00      	add	r7, sp, #0
 8006214:	60f8      	str	r0, [r7, #12]
 8006216:	60b9      	str	r1, [r7, #8]
 8006218:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	f023 0201 	bic.w	r2, r3, #1
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006238:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	011b      	lsls	r3, r3, #4
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	4313      	orrs	r3, r2
 8006242:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f023 030a 	bic.w	r3, r3, #10
 800624a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	621a      	str	r2, [r3, #32]
}
 8006260:	bf00      	nop
 8006262:	371c      	adds	r7, #28
 8006264:	46bd      	mov	sp, r7
 8006266:	bc80      	pop	{r7}
 8006268:	4770      	bx	lr

0800626a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800626a:	b480      	push	{r7}
 800626c:	b087      	sub	sp, #28
 800626e:	af00      	add	r7, sp, #0
 8006270:	60f8      	str	r0, [r7, #12]
 8006272:	60b9      	str	r1, [r7, #8]
 8006274:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	f023 0210 	bic.w	r2, r3, #16
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006294:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	031b      	lsls	r3, r3, #12
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	4313      	orrs	r3, r2
 800629e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	011b      	lsls	r3, r3, #4
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	621a      	str	r2, [r3, #32]
}
 80062be:	bf00      	nop
 80062c0:	371c      	adds	r7, #28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bc80      	pop	{r7}
 80062c6:	4770      	bx	lr

080062c8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	f043 0307 	orr.w	r3, r3, #7
 80062ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	609a      	str	r2, [r3, #8]
}
 80062f2:	bf00      	nop
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bc80      	pop	{r7}
 80062fa:	4770      	bx	lr

080062fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006316:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	021a      	lsls	r2, r3, #8
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	431a      	orrs	r2, r3
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	4313      	orrs	r3, r2
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	4313      	orrs	r3, r2
 8006328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	609a      	str	r2, [r3, #8]
}
 8006330:	bf00      	nop
 8006332:	371c      	adds	r7, #28
 8006334:	46bd      	mov	sp, r7
 8006336:	bc80      	pop	{r7}
 8006338:	4770      	bx	lr
	...

0800633c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800634e:	d01c      	beq.n	800638a <TIM_CCxChannelCmd+0x4e>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4a26      	ldr	r2, [pc, #152]	; (80063ec <TIM_CCxChannelCmd+0xb0>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d018      	beq.n	800638a <TIM_CCxChannelCmd+0x4e>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4a25      	ldr	r2, [pc, #148]	; (80063f0 <TIM_CCxChannelCmd+0xb4>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d014      	beq.n	800638a <TIM_CCxChannelCmd+0x4e>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4a24      	ldr	r2, [pc, #144]	; (80063f4 <TIM_CCxChannelCmd+0xb8>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d010      	beq.n	800638a <TIM_CCxChannelCmd+0x4e>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4a23      	ldr	r2, [pc, #140]	; (80063f8 <TIM_CCxChannelCmd+0xbc>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d00c      	beq.n	800638a <TIM_CCxChannelCmd+0x4e>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4a22      	ldr	r2, [pc, #136]	; (80063fc <TIM_CCxChannelCmd+0xc0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d008      	beq.n	800638a <TIM_CCxChannelCmd+0x4e>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4a21      	ldr	r2, [pc, #132]	; (8006400 <TIM_CCxChannelCmd+0xc4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d004      	beq.n	800638a <TIM_CCxChannelCmd+0x4e>
 8006380:	f641 0169 	movw	r1, #6249	; 0x1869
 8006384:	481f      	ldr	r0, [pc, #124]	; (8006404 <TIM_CCxChannelCmd+0xc8>)
 8006386:	f7fa fec3 	bl	8001110 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d010      	beq.n	80063b2 <TIM_CCxChannelCmd+0x76>
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	2b04      	cmp	r3, #4
 8006394:	d00d      	beq.n	80063b2 <TIM_CCxChannelCmd+0x76>
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	2b08      	cmp	r3, #8
 800639a:	d00a      	beq.n	80063b2 <TIM_CCxChannelCmd+0x76>
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2b0c      	cmp	r3, #12
 80063a0:	d007      	beq.n	80063b2 <TIM_CCxChannelCmd+0x76>
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b3c      	cmp	r3, #60	; 0x3c
 80063a6:	d004      	beq.n	80063b2 <TIM_CCxChannelCmd+0x76>
 80063a8:	f641 016a 	movw	r1, #6250	; 0x186a
 80063ac:	4815      	ldr	r0, [pc, #84]	; (8006404 <TIM_CCxChannelCmd+0xc8>)
 80063ae:	f7fa feaf 	bl	8001110 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	f003 031f 	and.w	r3, r3, #31
 80063b8:	2201      	movs	r2, #1
 80063ba:	fa02 f303 	lsl.w	r3, r2, r3
 80063be:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a1a      	ldr	r2, [r3, #32]
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	43db      	mvns	r3, r3
 80063c8:	401a      	ands	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6a1a      	ldr	r2, [r3, #32]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	f003 031f 	and.w	r3, r3, #31
 80063d8:	6879      	ldr	r1, [r7, #4]
 80063da:	fa01 f303 	lsl.w	r3, r1, r3
 80063de:	431a      	orrs	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	621a      	str	r2, [r3, #32]
}
 80063e4:	bf00      	nop
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	40000400 	.word	0x40000400
 80063f0:	40000800 	.word	0x40000800
 80063f4:	40000c00 	.word	0x40000c00
 80063f8:	40010800 	.word	0x40010800
 80063fc:	40010c00 	.word	0x40010c00
 8006400:	40011000 	.word	0x40011000
 8006404:	0800a2a8 	.word	0x0800a2a8

08006408 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800641a:	d017      	beq.n	800644c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a41      	ldr	r2, [pc, #260]	; (8006528 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d012      	beq.n	800644c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a40      	ldr	r2, [pc, #256]	; (800652c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d00d      	beq.n	800644c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a3e      	ldr	r2, [pc, #248]	; (8006530 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d008      	beq.n	800644c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a3d      	ldr	r2, [pc, #244]	; (8006534 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d003      	beq.n	800644c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8006444:	215a      	movs	r1, #90	; 0x5a
 8006446:	483c      	ldr	r0, [pc, #240]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006448:	f7fa fe62 	bl	8001110 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d01f      	beq.n	8006494 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b10      	cmp	r3, #16
 800645a:	d01b      	beq.n	8006494 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b20      	cmp	r3, #32
 8006462:	d017      	beq.n	8006494 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b30      	cmp	r3, #48	; 0x30
 800646a:	d013      	beq.n	8006494 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b40      	cmp	r3, #64	; 0x40
 8006472:	d00f      	beq.n	8006494 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b50      	cmp	r3, #80	; 0x50
 800647a:	d00b      	beq.n	8006494 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b60      	cmp	r3, #96	; 0x60
 8006482:	d007      	beq.n	8006494 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2b70      	cmp	r3, #112	; 0x70
 800648a:	d003      	beq.n	8006494 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800648c:	215b      	movs	r1, #91	; 0x5b
 800648e:	482a      	ldr	r0, [pc, #168]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006490:	f7fa fe3e 	bl	8001110 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	2b80      	cmp	r3, #128	; 0x80
 800649a:	d007      	beq.n	80064ac <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80064a4:	215c      	movs	r1, #92	; 0x5c
 80064a6:	4824      	ldr	r0, [pc, #144]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80064a8:	f7fa fe32 	bl	8001110 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d101      	bne.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0xb2>
 80064b6:	2302      	movs	r3, #2
 80064b8:	e032      	b.n	8006520 <HAL_TIMEx_MasterConfigSynchronization+0x118>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2202      	movs	r2, #2
 80064c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064f2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	40000400 	.word	0x40000400
 800652c:	40000800 	.word	0x40000800
 8006530:	40000c00 	.word	0x40000c00
 8006534:	40010800 	.word	0x40010800
 8006538:	0800a2e0 	.word	0x0800a2e0

0800653c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e0aa      	b.n	80066a4 <HAL_UART_Init+0x168>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d02c      	beq.n	80065b0 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a54      	ldr	r2, [pc, #336]	; (80066ac <HAL_UART_Init+0x170>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d00e      	beq.n	800657e <HAL_UART_Init+0x42>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a52      	ldr	r2, [pc, #328]	; (80066b0 <HAL_UART_Init+0x174>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d009      	beq.n	800657e <HAL_UART_Init+0x42>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a51      	ldr	r2, [pc, #324]	; (80066b4 <HAL_UART_Init+0x178>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d004      	beq.n	800657e <HAL_UART_Init+0x42>
 8006574:	f240 1145 	movw	r1, #325	; 0x145
 8006578:	484f      	ldr	r0, [pc, #316]	; (80066b8 <HAL_UART_Init+0x17c>)
 800657a:	f7fa fdc9 	bl	8001110 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d032      	beq.n	80065ec <HAL_UART_Init+0xb0>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800658e:	d02d      	beq.n	80065ec <HAL_UART_Init+0xb0>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006598:	d028      	beq.n	80065ec <HAL_UART_Init+0xb0>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065a2:	d023      	beq.n	80065ec <HAL_UART_Init+0xb0>
 80065a4:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80065a8:	4843      	ldr	r0, [pc, #268]	; (80066b8 <HAL_UART_Init+0x17c>)
 80065aa:	f7fa fdb1 	bl	8001110 <assert_failed>
 80065ae:	e01d      	b.n	80065ec <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a3d      	ldr	r2, [pc, #244]	; (80066ac <HAL_UART_Init+0x170>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d018      	beq.n	80065ec <HAL_UART_Init+0xb0>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a3c      	ldr	r2, [pc, #240]	; (80066b0 <HAL_UART_Init+0x174>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d013      	beq.n	80065ec <HAL_UART_Init+0xb0>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a3a      	ldr	r2, [pc, #232]	; (80066b4 <HAL_UART_Init+0x178>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00e      	beq.n	80065ec <HAL_UART_Init+0xb0>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a3a      	ldr	r2, [pc, #232]	; (80066bc <HAL_UART_Init+0x180>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d009      	beq.n	80065ec <HAL_UART_Init+0xb0>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a38      	ldr	r2, [pc, #224]	; (80066c0 <HAL_UART_Init+0x184>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d004      	beq.n	80065ec <HAL_UART_Init+0xb0>
 80065e2:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80065e6:	4834      	ldr	r0, [pc, #208]	; (80066b8 <HAL_UART_Init+0x17c>)
 80065e8:	f7fa fd92 	bl	8001110 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d009      	beq.n	8006608 <HAL_UART_Init+0xcc>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065fc:	d004      	beq.n	8006608 <HAL_UART_Init+0xcc>
 80065fe:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8006602:	482d      	ldr	r0, [pc, #180]	; (80066b8 <HAL_UART_Init+0x17c>)
 8006604:	f7fa fd84 	bl	8001110 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d009      	beq.n	8006624 <HAL_UART_Init+0xe8>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006618:	d004      	beq.n	8006624 <HAL_UART_Init+0xe8>
 800661a:	f240 114d 	movw	r1, #333	; 0x14d
 800661e:	4826      	ldr	r0, [pc, #152]	; (80066b8 <HAL_UART_Init+0x17c>)
 8006620:	f7fa fd76 	bl	8001110 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b00      	cmp	r3, #0
 800662e:	d106      	bne.n	800663e <HAL_UART_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7fb f8c3 	bl	80017c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2224      	movs	r2, #36	; 0x24
 8006642:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68da      	ldr	r2, [r3, #12]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006654:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fa3a 	bl	8006ad0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	691a      	ldr	r2, [r3, #16]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800666a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	695a      	ldr	r2, [r3, #20]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800667a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800668a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2220      	movs	r2, #32
 8006696:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2220      	movs	r2, #32
 800669e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	40013800 	.word	0x40013800
 80066b0:	40004400 	.word	0x40004400
 80066b4:	40004800 	.word	0x40004800
 80066b8:	0800a31c 	.word	0x0800a31c
 80066bc:	40004c00 	.word	0x40004c00
 80066c0:	40005000 	.word	0x40005000

080066c4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	4613      	mov	r3, r2
 80066d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b20      	cmp	r3, #32
 80066dc:	d153      	bne.n	8006786 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d002      	beq.n	80066ea <HAL_UART_Transmit_DMA+0x26>
 80066e4:	88fb      	ldrh	r3, [r7, #6]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e04c      	b.n	8006788 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d101      	bne.n	80066fc <HAL_UART_Transmit_DMA+0x38>
 80066f8:	2302      	movs	r3, #2
 80066fa:	e045      	b.n	8006788 <HAL_UART_Transmit_DMA+0xc4>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	88fa      	ldrh	r2, [r7, #6]
 800670e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	88fa      	ldrh	r2, [r7, #6]
 8006714:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2221      	movs	r2, #33	; 0x21
 8006720:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006728:	4a19      	ldr	r2, [pc, #100]	; (8006790 <HAL_UART_Transmit_DMA+0xcc>)
 800672a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006730:	4a18      	ldr	r2, [pc, #96]	; (8006794 <HAL_UART_Transmit_DMA+0xd0>)
 8006732:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006738:	4a17      	ldr	r2, [pc, #92]	; (8006798 <HAL_UART_Transmit_DMA+0xd4>)
 800673a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006740:	2200      	movs	r2, #0
 8006742:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8006744:	f107 0308 	add.w	r3, r7, #8
 8006748:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	6819      	ldr	r1, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3304      	adds	r3, #4
 8006758:	461a      	mov	r2, r3
 800675a:	88fb      	ldrh	r3, [r7, #6]
 800675c:	f7fc f8b0 	bl	80028c0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006768:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	695a      	ldr	r2, [r3, #20]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006780:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	e000      	b.n	8006788 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8006786:	2302      	movs	r3, #2
  }
}
 8006788:	4618      	mov	r0, r3
 800678a:	3718      	adds	r7, #24
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	080068e5 	.word	0x080068e5
 8006794:	08006937 	.word	0x08006937
 8006798:	080069d7 	.word	0x080069d7

0800679c <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	4613      	mov	r3, r2
 80067a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b20      	cmp	r3, #32
 80067b4:	d166      	bne.n	8006884 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <HAL_UART_Receive_DMA+0x26>
 80067bc:	88fb      	ldrh	r3, [r7, #6]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e05f      	b.n	8006886 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d101      	bne.n	80067d4 <HAL_UART_Receive_DMA+0x38>
 80067d0:	2302      	movs	r3, #2
 80067d2:	e058      	b.n	8006886 <HAL_UART_Receive_DMA+0xea>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	88fa      	ldrh	r2, [r7, #6]
 80067e6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2222      	movs	r2, #34	; 0x22
 80067f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067fa:	4a25      	ldr	r2, [pc, #148]	; (8006890 <HAL_UART_Receive_DMA+0xf4>)
 80067fc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006802:	4a24      	ldr	r2, [pc, #144]	; (8006894 <HAL_UART_Receive_DMA+0xf8>)
 8006804:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800680a:	4a23      	ldr	r2, [pc, #140]	; (8006898 <HAL_UART_Receive_DMA+0xfc>)
 800680c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006812:	2200      	movs	r2, #0
 8006814:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8006816:	f107 0308 	add.w	r3, r7, #8
 800681a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	3304      	adds	r3, #4
 8006826:	4619      	mov	r1, r3
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	88fb      	ldrh	r3, [r7, #6]
 800682e:	f7fc f847 	bl	80028c0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006832:	2300      	movs	r3, #0
 8006834:	613b      	str	r3, [r7, #16]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	613b      	str	r3, [r7, #16]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	613b      	str	r3, [r7, #16]
 8006846:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68da      	ldr	r2, [r3, #12]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800685e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	695a      	ldr	r2, [r3, #20]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0201 	orr.w	r2, r2, #1
 800686e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	695a      	ldr	r2, [r3, #20]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800687e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006880:	2300      	movs	r3, #0
 8006882:	e000      	b.n	8006886 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006884:	2302      	movs	r3, #2
  }
}
 8006886:	4618      	mov	r0, r3
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	08006953 	.word	0x08006953
 8006894:	080069bb 	.word	0x080069bb
 8006898:	080069d7 	.word	0x080069d7

0800689c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bc80      	pop	{r7}
 80068ac:	4770      	bx	lr

080068ae <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b083      	sub	sp, #12
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80068b6:	bf00      	nop
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bc80      	pop	{r7}
 80068be:	4770      	bx	lr

080068c0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bc80      	pop	{r7}
 80068d0:	4770      	bx	lr

080068d2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80068da:	bf00      	nop
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	bc80      	pop	{r7}
 80068e2:	4770      	bx	lr

080068e4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0320 	and.w	r3, r3, #32
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d113      	bne.n	8006928 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	695a      	ldr	r2, [r3, #20]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006914:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68da      	ldr	r2, [r3, #12]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006924:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006926:	e002      	b.n	800692e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f7ff ffb7 	bl	800689c <HAL_UART_TxCpltCallback>
}
 800692e:	bf00      	nop
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b084      	sub	sp, #16
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006942:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f7ff ffb2 	bl	80068ae <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800694a:	bf00      	nop
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b084      	sub	sp, #16
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0320 	and.w	r3, r3, #32
 800696a:	2b00      	cmp	r3, #0
 800696c:	d11e      	bne.n	80069ac <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68da      	ldr	r2, [r3, #12]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006982:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	695a      	ldr	r2, [r3, #20]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0201 	bic.w	r2, r2, #1
 8006992:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	695a      	ldr	r2, [r3, #20]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069a2:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f7f9 fee1 	bl	8000774 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069b2:	bf00      	nop
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b084      	sub	sp, #16
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f7ff ff79 	bl	80068c0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069ce:	bf00      	nop
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b084      	sub	sp, #16
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80069de:	2300      	movs	r3, #0
 80069e0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f2:	2b80      	cmp	r3, #128	; 0x80
 80069f4:	bf0c      	ite	eq
 80069f6:	2301      	moveq	r3, #1
 80069f8:	2300      	movne	r3, #0
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b21      	cmp	r3, #33	; 0x21
 8006a08:	d108      	bne.n	8006a1c <UART_DMAError+0x46>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d005      	beq.n	8006a1c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2200      	movs	r2, #0
 8006a14:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006a16:	68b8      	ldr	r0, [r7, #8]
 8006a18:	f000 f827 	bl	8006a6a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a26:	2b40      	cmp	r3, #64	; 0x40
 8006a28:	bf0c      	ite	eq
 8006a2a:	2301      	moveq	r3, #1
 8006a2c:	2300      	movne	r3, #0
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b22      	cmp	r3, #34	; 0x22
 8006a3c:	d108      	bne.n	8006a50 <UART_DMAError+0x7a>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d005      	beq.n	8006a50 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	2200      	movs	r2, #0
 8006a48:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006a4a:	68b8      	ldr	r0, [r7, #8]
 8006a4c:	f000 f822 	bl	8006a94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a54:	f043 0210 	orr.w	r2, r3, #16
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a5c:	68b8      	ldr	r0, [r7, #8]
 8006a5e:	f7ff ff38 	bl	80068d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a62:	bf00      	nop
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b083      	sub	sp, #12
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68da      	ldr	r2, [r3, #12]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006a80:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2220      	movs	r2, #32
 8006a86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006a8a:	bf00      	nop
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bc80      	pop	{r7}
 8006a92:	4770      	bx	lr

08006a94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006aaa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	695a      	ldr	r2, [r3, #20]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0201 	bic.w	r2, r2, #1
 8006aba:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bc80      	pop	{r7}
 8006acc:	4770      	bx	lr
	...

08006ad0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	4ab2      	ldr	r2, [pc, #712]	; (8006da8 <UART_SetConfig+0x2d8>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d904      	bls.n	8006aec <UART_SetConfig+0x1c>
 8006ae2:	f640 31e2 	movw	r1, #3042	; 0xbe2
 8006ae6:	48b1      	ldr	r0, [pc, #708]	; (8006dac <UART_SetConfig+0x2dc>)
 8006ae8:	f7fa fb12 	bl	8001110 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d009      	beq.n	8006b08 <UART_SetConfig+0x38>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006afc:	d004      	beq.n	8006b08 <UART_SetConfig+0x38>
 8006afe:	f640 31e3 	movw	r1, #3043	; 0xbe3
 8006b02:	48aa      	ldr	r0, [pc, #680]	; (8006dac <UART_SetConfig+0x2dc>)
 8006b04:	f7fa fb04 	bl	8001110 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00e      	beq.n	8006b2e <UART_SetConfig+0x5e>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b18:	d009      	beq.n	8006b2e <UART_SetConfig+0x5e>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006b22:	d004      	beq.n	8006b2e <UART_SetConfig+0x5e>
 8006b24:	f640 31e4 	movw	r1, #3044	; 0xbe4
 8006b28:	48a0      	ldr	r0, [pc, #640]	; (8006dac <UART_SetConfig+0x2dc>)
 8006b2a:	f7fa faf1 	bl	8001110 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	695a      	ldr	r2, [r3, #20]
 8006b32:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8006b36:	4013      	ands	r3, r2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d103      	bne.n	8006b44 <UART_SetConfig+0x74>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d104      	bne.n	8006b4e <UART_SetConfig+0x7e>
 8006b44:	f640 31e5 	movw	r1, #3045	; 0xbe5
 8006b48:	4898      	ldr	r0, [pc, #608]	; (8006dac <UART_SetConfig+0x2dc>)
 8006b4a:	f7fa fae1 	bl	8001110 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68da      	ldr	r2, [r3, #12]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	431a      	orrs	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	69db      	ldr	r3, [r3, #28]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006b86:	f023 030c 	bic.w	r3, r3, #12
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	6812      	ldr	r2, [r2, #0]
 8006b8e:	68f9      	ldr	r1, [r7, #12]
 8006b90:	430b      	orrs	r3, r1
 8006b92:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	699a      	ldr	r2, [r3, #24]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	69db      	ldr	r3, [r3, #28]
 8006bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bb2:	f040 80a5 	bne.w	8006d00 <UART_SetConfig+0x230>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a7d      	ldr	r2, [pc, #500]	; (8006db0 <UART_SetConfig+0x2e0>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d14f      	bne.n	8006c60 <UART_SetConfig+0x190>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bc0:	f7fe f934 	bl	8004e2c <HAL_RCC_GetPCLK2Freq>
 8006bc4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	009a      	lsls	r2, r3, #2
 8006bd0:	441a      	add	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	005b      	lsls	r3, r3, #1
 8006bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bdc:	4a75      	ldr	r2, [pc, #468]	; (8006db4 <UART_SetConfig+0x2e4>)
 8006bde:	fba2 2303 	umull	r2, r3, r2, r3
 8006be2:	095b      	lsrs	r3, r3, #5
 8006be4:	0119      	lsls	r1, r3, #4
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	4613      	mov	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	009a      	lsls	r2, r3, #2
 8006bf0:	441a      	add	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	005b      	lsls	r3, r3, #1
 8006bf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006bfc:	4b6d      	ldr	r3, [pc, #436]	; (8006db4 <UART_SetConfig+0x2e4>)
 8006bfe:	fba3 0302 	umull	r0, r3, r3, r2
 8006c02:	095b      	lsrs	r3, r3, #5
 8006c04:	2064      	movs	r0, #100	; 0x64
 8006c06:	fb00 f303 	mul.w	r3, r0, r3
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	3332      	adds	r3, #50	; 0x32
 8006c10:	4a68      	ldr	r2, [pc, #416]	; (8006db4 <UART_SetConfig+0x2e4>)
 8006c12:	fba2 2303 	umull	r2, r3, r2, r3
 8006c16:	095b      	lsrs	r3, r3, #5
 8006c18:	005b      	lsls	r3, r3, #1
 8006c1a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c1e:	4419      	add	r1, r3
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	4613      	mov	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4413      	add	r3, r2
 8006c28:	009a      	lsls	r2, r3, #2
 8006c2a:	441a      	add	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	005b      	lsls	r3, r3, #1
 8006c32:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c36:	4b5f      	ldr	r3, [pc, #380]	; (8006db4 <UART_SetConfig+0x2e4>)
 8006c38:	fba3 0302 	umull	r0, r3, r3, r2
 8006c3c:	095b      	lsrs	r3, r3, #5
 8006c3e:	2064      	movs	r0, #100	; 0x64
 8006c40:	fb00 f303 	mul.w	r3, r0, r3
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	3332      	adds	r3, #50	; 0x32
 8006c4a:	4a5a      	ldr	r2, [pc, #360]	; (8006db4 <UART_SetConfig+0x2e4>)
 8006c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c50:	095b      	lsrs	r3, r3, #5
 8006c52:	f003 0207 	and.w	r2, r3, #7
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	440a      	add	r2, r1
 8006c5c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006c5e:	e0f9      	b.n	8006e54 <UART_SetConfig+0x384>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c60:	f7fe f8d0 	bl	8004e04 <HAL_RCC_GetPCLK1Freq>
 8006c64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	009a      	lsls	r2, r3, #2
 8006c70:	441a      	add	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	005b      	lsls	r3, r3, #1
 8006c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c7c:	4a4d      	ldr	r2, [pc, #308]	; (8006db4 <UART_SetConfig+0x2e4>)
 8006c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c82:	095b      	lsrs	r3, r3, #5
 8006c84:	0119      	lsls	r1, r3, #4
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	009a      	lsls	r2, r3, #2
 8006c90:	441a      	add	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	005b      	lsls	r3, r3, #1
 8006c98:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c9c:	4b45      	ldr	r3, [pc, #276]	; (8006db4 <UART_SetConfig+0x2e4>)
 8006c9e:	fba3 0302 	umull	r0, r3, r3, r2
 8006ca2:	095b      	lsrs	r3, r3, #5
 8006ca4:	2064      	movs	r0, #100	; 0x64
 8006ca6:	fb00 f303 	mul.w	r3, r0, r3
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	00db      	lsls	r3, r3, #3
 8006cae:	3332      	adds	r3, #50	; 0x32
 8006cb0:	4a40      	ldr	r2, [pc, #256]	; (8006db4 <UART_SetConfig+0x2e4>)
 8006cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb6:	095b      	lsrs	r3, r3, #5
 8006cb8:	005b      	lsls	r3, r3, #1
 8006cba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006cbe:	4419      	add	r1, r3
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009a      	lsls	r2, r3, #2
 8006cca:	441a      	add	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	005b      	lsls	r3, r3, #1
 8006cd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cd6:	4b37      	ldr	r3, [pc, #220]	; (8006db4 <UART_SetConfig+0x2e4>)
 8006cd8:	fba3 0302 	umull	r0, r3, r3, r2
 8006cdc:	095b      	lsrs	r3, r3, #5
 8006cde:	2064      	movs	r0, #100	; 0x64
 8006ce0:	fb00 f303 	mul.w	r3, r0, r3
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	00db      	lsls	r3, r3, #3
 8006ce8:	3332      	adds	r3, #50	; 0x32
 8006cea:	4a32      	ldr	r2, [pc, #200]	; (8006db4 <UART_SetConfig+0x2e4>)
 8006cec:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf0:	095b      	lsrs	r3, r3, #5
 8006cf2:	f003 0207 	and.w	r2, r3, #7
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	440a      	add	r2, r1
 8006cfc:	609a      	str	r2, [r3, #8]
}
 8006cfe:	e0a9      	b.n	8006e54 <UART_SetConfig+0x384>
    if((huart->Instance == USART1))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a2a      	ldr	r2, [pc, #168]	; (8006db0 <UART_SetConfig+0x2e0>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d156      	bne.n	8006db8 <UART_SetConfig+0x2e8>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d0a:	f7fe f88f 	bl	8004e2c <HAL_RCC_GetPCLK2Freq>
 8006d0e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	4613      	mov	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	009a      	lsls	r2, r3, #2
 8006d1a:	441a      	add	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d26:	4a23      	ldr	r2, [pc, #140]	; (8006db4 <UART_SetConfig+0x2e4>)
 8006d28:	fba2 2303 	umull	r2, r3, r2, r3
 8006d2c:	095b      	lsrs	r3, r3, #5
 8006d2e:	0119      	lsls	r1, r3, #4
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	4613      	mov	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	009a      	lsls	r2, r3, #2
 8006d3a:	441a      	add	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d46:	4b1b      	ldr	r3, [pc, #108]	; (8006db4 <UART_SetConfig+0x2e4>)
 8006d48:	fba3 0302 	umull	r0, r3, r3, r2
 8006d4c:	095b      	lsrs	r3, r3, #5
 8006d4e:	2064      	movs	r0, #100	; 0x64
 8006d50:	fb00 f303 	mul.w	r3, r0, r3
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	011b      	lsls	r3, r3, #4
 8006d58:	3332      	adds	r3, #50	; 0x32
 8006d5a:	4a16      	ldr	r2, [pc, #88]	; (8006db4 <UART_SetConfig+0x2e4>)
 8006d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d60:	095b      	lsrs	r3, r3, #5
 8006d62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d66:	4419      	add	r1, r3
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	009a      	lsls	r2, r3, #2
 8006d72:	441a      	add	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d7e:	4b0d      	ldr	r3, [pc, #52]	; (8006db4 <UART_SetConfig+0x2e4>)
 8006d80:	fba3 0302 	umull	r0, r3, r3, r2
 8006d84:	095b      	lsrs	r3, r3, #5
 8006d86:	2064      	movs	r0, #100	; 0x64
 8006d88:	fb00 f303 	mul.w	r3, r0, r3
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	011b      	lsls	r3, r3, #4
 8006d90:	3332      	adds	r3, #50	; 0x32
 8006d92:	4a08      	ldr	r2, [pc, #32]	; (8006db4 <UART_SetConfig+0x2e4>)
 8006d94:	fba2 2303 	umull	r2, r3, r2, r3
 8006d98:	095b      	lsrs	r3, r3, #5
 8006d9a:	f003 020f 	and.w	r2, r3, #15
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	440a      	add	r2, r1
 8006da4:	609a      	str	r2, [r3, #8]
}
 8006da6:	e055      	b.n	8006e54 <UART_SetConfig+0x384>
 8006da8:	003d0900 	.word	0x003d0900
 8006dac:	0800a31c 	.word	0x0800a31c
 8006db0:	40013800 	.word	0x40013800
 8006db4:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8006db8:	f7fe f824 	bl	8004e04 <HAL_RCC_GetPCLK1Freq>
 8006dbc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	009a      	lsls	r2, r3, #2
 8006dc8:	441a      	add	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd4:	4a21      	ldr	r2, [pc, #132]	; (8006e5c <UART_SetConfig+0x38c>)
 8006dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dda:	095b      	lsrs	r3, r3, #5
 8006ddc:	0119      	lsls	r1, r3, #4
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	4613      	mov	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	009a      	lsls	r2, r3, #2
 8006de8:	441a      	add	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	fbb2 f2f3 	udiv	r2, r2, r3
 8006df4:	4b19      	ldr	r3, [pc, #100]	; (8006e5c <UART_SetConfig+0x38c>)
 8006df6:	fba3 0302 	umull	r0, r3, r3, r2
 8006dfa:	095b      	lsrs	r3, r3, #5
 8006dfc:	2064      	movs	r0, #100	; 0x64
 8006dfe:	fb00 f303 	mul.w	r3, r0, r3
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	011b      	lsls	r3, r3, #4
 8006e06:	3332      	adds	r3, #50	; 0x32
 8006e08:	4a14      	ldr	r2, [pc, #80]	; (8006e5c <UART_SetConfig+0x38c>)
 8006e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e0e:	095b      	lsrs	r3, r3, #5
 8006e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e14:	4419      	add	r1, r3
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	009a      	lsls	r2, r3, #2
 8006e20:	441a      	add	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e2c:	4b0b      	ldr	r3, [pc, #44]	; (8006e5c <UART_SetConfig+0x38c>)
 8006e2e:	fba3 0302 	umull	r0, r3, r3, r2
 8006e32:	095b      	lsrs	r3, r3, #5
 8006e34:	2064      	movs	r0, #100	; 0x64
 8006e36:	fb00 f303 	mul.w	r3, r0, r3
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	011b      	lsls	r3, r3, #4
 8006e3e:	3332      	adds	r3, #50	; 0x32
 8006e40:	4a06      	ldr	r2, [pc, #24]	; (8006e5c <UART_SetConfig+0x38c>)
 8006e42:	fba2 2303 	umull	r2, r3, r2, r3
 8006e46:	095b      	lsrs	r3, r3, #5
 8006e48:	f003 020f 	and.w	r2, r3, #15
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	440a      	add	r2, r1
 8006e52:	609a      	str	r2, [r3, #8]
}
 8006e54:	bf00      	nop
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	51eb851f 	.word	0x51eb851f

08006e60 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e66:	f3ef 8305 	mrs	r3, IPSR
 8006e6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e6c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10f      	bne.n	8006e92 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e72:	f3ef 8310 	mrs	r3, PRIMASK
 8006e76:	607b      	str	r3, [r7, #4]
  return(result);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d109      	bne.n	8006e92 <osKernelInitialize+0x32>
 8006e7e:	4b10      	ldr	r3, [pc, #64]	; (8006ec0 <osKernelInitialize+0x60>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d109      	bne.n	8006e9a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e86:	f3ef 8311 	mrs	r3, BASEPRI
 8006e8a:	603b      	str	r3, [r7, #0]
  return(result);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006e92:	f06f 0305 	mvn.w	r3, #5
 8006e96:	60fb      	str	r3, [r7, #12]
 8006e98:	e00c      	b.n	8006eb4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006e9a:	4b09      	ldr	r3, [pc, #36]	; (8006ec0 <osKernelInitialize+0x60>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d105      	bne.n	8006eae <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006ea2:	4b07      	ldr	r3, [pc, #28]	; (8006ec0 <osKernelInitialize+0x60>)
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	60fb      	str	r3, [r7, #12]
 8006eac:	e002      	b.n	8006eb4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006eae:	f04f 33ff 	mov.w	r3, #4294967295
 8006eb2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bc80      	pop	{r7}
 8006ebe:	4770      	bx	lr
 8006ec0:	20000034 	.word	0x20000034

08006ec4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006eca:	f3ef 8305 	mrs	r3, IPSR
 8006ece:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ed0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d10f      	bne.n	8006ef6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8006eda:	607b      	str	r3, [r7, #4]
  return(result);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d109      	bne.n	8006ef6 <osKernelStart+0x32>
 8006ee2:	4b11      	ldr	r3, [pc, #68]	; (8006f28 <osKernelStart+0x64>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d109      	bne.n	8006efe <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006eea:	f3ef 8311 	mrs	r3, BASEPRI
 8006eee:	603b      	str	r3, [r7, #0]
  return(result);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <osKernelStart+0x3a>
    stat = osErrorISR;
 8006ef6:	f06f 0305 	mvn.w	r3, #5
 8006efa:	60fb      	str	r3, [r7, #12]
 8006efc:	e00e      	b.n	8006f1c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006efe:	4b0a      	ldr	r3, [pc, #40]	; (8006f28 <osKernelStart+0x64>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d107      	bne.n	8006f16 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006f06:	4b08      	ldr	r3, [pc, #32]	; (8006f28 <osKernelStart+0x64>)
 8006f08:	2202      	movs	r2, #2
 8006f0a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006f0c:	f001 fb5c 	bl	80085c8 <vTaskStartScheduler>
      stat = osOK;
 8006f10:	2300      	movs	r3, #0
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	e002      	b.n	8006f1c <osKernelStart+0x58>
    } else {
      stat = osError;
 8006f16:	f04f 33ff 	mov.w	r3, #4294967295
 8006f1a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20000034 	.word	0x20000034

08006f2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b092      	sub	sp, #72	; 0x48
 8006f30:	af04      	add	r7, sp, #16
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f3c:	f3ef 8305 	mrs	r3, IPSR
 8006f40:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f040 8094 	bne.w	8007072 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8006f4e:	623b      	str	r3, [r7, #32]
  return(result);
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f040 808d 	bne.w	8007072 <osThreadNew+0x146>
 8006f58:	4b48      	ldr	r3, [pc, #288]	; (800707c <osThreadNew+0x150>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d106      	bne.n	8006f6e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f60:	f3ef 8311 	mrs	r3, BASEPRI
 8006f64:	61fb      	str	r3, [r7, #28]
  return(result);
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f040 8082 	bne.w	8007072 <osThreadNew+0x146>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d07e      	beq.n	8007072 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006f74:	2380      	movs	r3, #128	; 0x80
 8006f76:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006f78:	2318      	movs	r3, #24
 8006f7a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006f80:	f107 031b 	add.w	r3, r7, #27
 8006f84:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006f86:	f04f 33ff 	mov.w	r3, #4294967295
 8006f8a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d045      	beq.n	800701e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d002      	beq.n	8006fa0 <osThreadNew+0x74>
        name = attr->name;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d002      	beq.n	8006fae <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d008      	beq.n	8006fc6 <osThreadNew+0x9a>
 8006fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb6:	2b38      	cmp	r3, #56	; 0x38
 8006fb8:	d805      	bhi.n	8006fc6 <osThreadNew+0x9a>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <osThreadNew+0x9e>
        return (NULL);
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	e054      	b.n	8007074 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	695b      	ldr	r3, [r3, #20]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	089b      	lsrs	r3, r3, #2
 8006fd8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00e      	beq.n	8007000 <osThreadNew+0xd4>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	2b5b      	cmp	r3, #91	; 0x5b
 8006fe8:	d90a      	bls.n	8007000 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d006      	beq.n	8007000 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d002      	beq.n	8007000 <osThreadNew+0xd4>
        mem = 1;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ffe:	e010      	b.n	8007022 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10c      	bne.n	8007022 <osThreadNew+0xf6>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d108      	bne.n	8007022 <osThreadNew+0xf6>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d104      	bne.n	8007022 <osThreadNew+0xf6>
          mem = 0;
 8007018:	2300      	movs	r3, #0
 800701a:	62bb      	str	r3, [r7, #40]	; 0x28
 800701c:	e001      	b.n	8007022 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800701e:	2300      	movs	r3, #0
 8007020:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8007022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007024:	2b01      	cmp	r3, #1
 8007026:	d110      	bne.n	800704a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007030:	9202      	str	r2, [sp, #8]
 8007032:	9301      	str	r3, [sp, #4]
 8007034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800703c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 ffee 	bl	8008020 <xTaskCreateStatic>
 8007044:	4603      	mov	r3, r0
 8007046:	617b      	str	r3, [r7, #20]
 8007048:	e013      	b.n	8007072 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800704a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704c:	2b00      	cmp	r3, #0
 800704e:	d110      	bne.n	8007072 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007052:	b29a      	uxth	r2, r3
 8007054:	f107 0314 	add.w	r3, r7, #20
 8007058:	9301      	str	r3, [sp, #4]
 800705a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f001 f835 	bl	80080d2 <xTaskCreate>
 8007068:	4603      	mov	r3, r0
 800706a:	2b01      	cmp	r3, #1
 800706c:	d001      	beq.n	8007072 <osThreadNew+0x146>
          hTask = NULL;
 800706e:	2300      	movs	r3, #0
 8007070:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007072:	697b      	ldr	r3, [r7, #20]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3738      	adds	r7, #56	; 0x38
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	20000034 	.word	0x20000034

08007080 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007088:	f3ef 8305 	mrs	r3, IPSR
 800708c:	613b      	str	r3, [r7, #16]
  return(result);
 800708e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10f      	bne.n	80070b4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007094:	f3ef 8310 	mrs	r3, PRIMASK
 8007098:	60fb      	str	r3, [r7, #12]
  return(result);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d109      	bne.n	80070b4 <osDelay+0x34>
 80070a0:	4b0d      	ldr	r3, [pc, #52]	; (80070d8 <osDelay+0x58>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d109      	bne.n	80070bc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070a8:	f3ef 8311 	mrs	r3, BASEPRI
 80070ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d003      	beq.n	80070bc <osDelay+0x3c>
    stat = osErrorISR;
 80070b4:	f06f 0305 	mvn.w	r3, #5
 80070b8:	617b      	str	r3, [r7, #20]
 80070ba:	e007      	b.n	80070cc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80070bc:	2300      	movs	r3, #0
 80070be:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d002      	beq.n	80070cc <osDelay+0x4c>
      vTaskDelay(ticks);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f001 f93e 	bl	8008348 <vTaskDelay>
    }
  }

  return (stat);
 80070cc:	697b      	ldr	r3, [r7, #20]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3718      	adds	r7, #24
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	20000034 	.word	0x20000034

080070dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	4a06      	ldr	r2, [pc, #24]	; (8007104 <vApplicationGetIdleTaskMemory+0x28>)
 80070ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	4a05      	ldr	r2, [pc, #20]	; (8007108 <vApplicationGetIdleTaskMemory+0x2c>)
 80070f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2280      	movs	r2, #128	; 0x80
 80070f8:	601a      	str	r2, [r3, #0]
}
 80070fa:	bf00      	nop
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	bc80      	pop	{r7}
 8007102:	4770      	bx	lr
 8007104:	20000038 	.word	0x20000038
 8007108:	20000094 	.word	0x20000094

0800710c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	4a07      	ldr	r2, [pc, #28]	; (8007138 <vApplicationGetTimerTaskMemory+0x2c>)
 800711c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	4a06      	ldr	r2, [pc, #24]	; (800713c <vApplicationGetTimerTaskMemory+0x30>)
 8007122:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f44f 7280 	mov.w	r2, #256	; 0x100
 800712a:	601a      	str	r2, [r3, #0]
}
 800712c:	bf00      	nop
 800712e:	3714      	adds	r7, #20
 8007130:	46bd      	mov	sp, r7
 8007132:	bc80      	pop	{r7}
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	20000294 	.word	0x20000294
 800713c:	200002f0 	.word	0x200002f0

08007140 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8007146:	2020      	movs	r0, #32
 8007148:	f002 fd94 	bl	8009c74 <pvPortMalloc>
 800714c:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00a      	beq.n	800716a <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	3304      	adds	r3, #4
 800715e:	4618      	mov	r0, r3
 8007160:	f000 f99e 	bl	80074a0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800716a:	687b      	ldr	r3, [r7, #4]
	}
 800716c:	4618      	mov	r0, r3
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b090      	sub	sp, #64	; 0x40
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	607a      	str	r2, [r7, #4]
 8007180:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8007186:	2300      	movs	r3, #0
 8007188:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800718a:	2300      	movs	r3, #0
 800718c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d109      	bne.n	80071a8 <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	623b      	str	r3, [r7, #32]
 80071a6:	e7fe      	b.n	80071a6 <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d009      	beq.n	80071c6 <xEventGroupWaitBits+0x52>
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	61fb      	str	r3, [r7, #28]
 80071c4:	e7fe      	b.n	80071c4 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d109      	bne.n	80071e0 <xEventGroupWaitBits+0x6c>
 80071cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	61bb      	str	r3, [r7, #24]
 80071de:	e7fe      	b.n	80071de <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071e0:	f001 fef6 	bl	8008fd0 <xTaskGetSchedulerState>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d102      	bne.n	80071f0 <xEventGroupWaitBits+0x7c>
 80071ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <xEventGroupWaitBits+0x80>
 80071f0:	2301      	movs	r3, #1
 80071f2:	e000      	b.n	80071f6 <xEventGroupWaitBits+0x82>
 80071f4:	2300      	movs	r3, #0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d109      	bne.n	800720e <xEventGroupWaitBits+0x9a>
 80071fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	617b      	str	r3, [r7, #20]
 800720c:	e7fe      	b.n	800720c <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 800720e:	f001 fa3f 	bl	8008690 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8007212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	68b9      	ldr	r1, [r7, #8]
 800721c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800721e:	f000 f909 	bl	8007434 <prvTestWaitCondition>
 8007222:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8007224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00e      	beq.n	8007248 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800722a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800722e:	2300      	movs	r3, #0
 8007230:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d028      	beq.n	800728a <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	43db      	mvns	r3, r3
 8007240:	401a      	ands	r2, r3
 8007242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	e020      	b.n	800728a <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8007248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800724a:	2b00      	cmp	r3, #0
 800724c:	d104      	bne.n	8007258 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800724e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007250:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8007252:	2301      	movs	r3, #1
 8007254:	633b      	str	r3, [r7, #48]	; 0x30
 8007256:	e018      	b.n	800728a <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800725e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007260:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007264:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800726c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007272:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8007274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007276:	1d18      	adds	r0, r3, #4
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727c:	4313      	orrs	r3, r2
 800727e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007280:	4619      	mov	r1, r3
 8007282:	f001 fc25 	bl	8008ad0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8007286:	2300      	movs	r3, #0
 8007288:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800728a:	f001 fa0f 	bl	80086ac <xTaskResumeAll>
 800728e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8007290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007292:	2b00      	cmp	r3, #0
 8007294:	d031      	beq.n	80072fa <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	2b00      	cmp	r3, #0
 800729a:	d107      	bne.n	80072ac <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 800729c:	4b19      	ldr	r3, [pc, #100]	; (8007304 <xEventGroupWaitBits+0x190>)
 800729e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80072ac:	f001 ff1a 	bl	80090e4 <uxTaskResetEventItemValue>
 80072b0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80072b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d11a      	bne.n	80072f2 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 80072bc:	f002 fbe4 	bl	8009a88 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80072c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	68b9      	ldr	r1, [r7, #8]
 80072ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80072cc:	f000 f8b2 	bl	8007434 <prvTestWaitCondition>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d009      	beq.n	80072ea <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d006      	beq.n	80072ea <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80072dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	43db      	mvns	r3, r3
 80072e4:	401a      	ands	r2, r3
 80072e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80072ea:	2301      	movs	r3, #1
 80072ec:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80072ee:	f002 fbf9 	bl	8009ae4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80072f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80072f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80072fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3740      	adds	r7, #64	; 0x40
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	e000ed04 	.word	0xe000ed04

08007308 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b08e      	sub	sp, #56	; 0x38
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8007312:	2300      	movs	r3, #0
 8007314:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800731a:	2300      	movs	r3, #0
 800731c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d109      	bne.n	8007338 <xEventGroupSetBits+0x30>
 8007324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	613b      	str	r3, [r7, #16]
 8007336:	e7fe      	b.n	8007336 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d009      	beq.n	8007356 <xEventGroupSetBits+0x4e>
 8007342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007346:	f383 8811 	msr	BASEPRI, r3
 800734a:	f3bf 8f6f 	isb	sy
 800734e:	f3bf 8f4f 	dsb	sy
 8007352:	60fb      	str	r3, [r7, #12]
 8007354:	e7fe      	b.n	8007354 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8007356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007358:	3304      	adds	r3, #4
 800735a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800735c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735e:	3308      	adds	r3, #8
 8007360:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8007362:	f001 f995 	bl	8008690 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8007366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800736c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	431a      	orrs	r2, r3
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8007378:	e03c      	b.n	80073f4 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 800737a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8007380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8007386:	2300      	movs	r3, #0
 8007388:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007390:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007398:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d108      	bne.n	80073b6 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80073a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	4013      	ands	r3, r2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00b      	beq.n	80073c8 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 80073b0:	2301      	movs	r3, #1
 80073b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073b4:	e008      	b.n	80073c8 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80073b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	4013      	ands	r3, r2
 80073be:	69ba      	ldr	r2, [r7, #24]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d101      	bne.n	80073c8 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80073c4:	2301      	movs	r3, #1
 80073c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80073c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d010      	beq.n	80073f0 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d003      	beq.n	80073e0 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80073d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	4313      	orrs	r3, r2
 80073de:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80073e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80073e8:	4619      	mov	r1, r3
 80073ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80073ec:	f001 fc36 	bl	8008c5c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80073f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d1be      	bne.n	800737a <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80073fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007402:	43db      	mvns	r3, r3
 8007404:	401a      	ands	r2, r3
 8007406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007408:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800740a:	f001 f94f 	bl	80086ac <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007410:	681b      	ldr	r3, [r3, #0]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3738      	adds	r7, #56	; 0x38
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b082      	sub	sp, #8
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7ff ff6e 	bl	8007308 <xEventGroupSetBits>
}
 800742c:	bf00      	nop
 800742e:	3708      	adds	r7, #8
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8007434:	b480      	push	{r7}
 8007436:	b087      	sub	sp, #28
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8007440:	2300      	movs	r3, #0
 8007442:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d107      	bne.n	800745a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	4013      	ands	r3, r2
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00a      	beq.n	800746a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007454:	2301      	movs	r3, #1
 8007456:	617b      	str	r3, [r7, #20]
 8007458:	e007      	b.n	800746a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	4013      	ands	r3, r2
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	429a      	cmp	r2, r3
 8007464:	d101      	bne.n	800746a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007466:	2301      	movs	r3, #1
 8007468:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800746a:	697b      	ldr	r3, [r7, #20]
}
 800746c:	4618      	mov	r0, r3
 800746e:	371c      	adds	r7, #28
 8007470:	46bd      	mov	sp, r7
 8007472:	bc80      	pop	{r7}
 8007474:	4770      	bx	lr
	...

08007478 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	68f9      	ldr	r1, [r7, #12]
 800748a:	4804      	ldr	r0, [pc, #16]	; (800749c <xEventGroupSetBitsFromISR+0x24>)
 800748c:	f002 f9f4 	bl	8009878 <xTimerPendFunctionCallFromISR>
 8007490:	6178      	str	r0, [r7, #20]

		return xReturn;
 8007492:	697b      	ldr	r3, [r7, #20]
	}
 8007494:	4618      	mov	r0, r3
 8007496:	3718      	adds	r7, #24
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	0800741b 	.word	0x0800741b

080074a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f103 0208 	add.w	r2, r3, #8
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f04f 32ff 	mov.w	r2, #4294967295
 80074b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f103 0208 	add.w	r2, r3, #8
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f103 0208 	add.w	r2, r3, #8
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	bc80      	pop	{r7}
 80074dc:	4770      	bx	lr

080074de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80074de:	b480      	push	{r7}
 80074e0:	b083      	sub	sp, #12
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bc80      	pop	{r7}
 80074f4:	4770      	bx	lr

080074f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074f6:	b480      	push	{r7}
 80074f8:	b085      	sub	sp, #20
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
 80074fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	689a      	ldr	r2, [r3, #8]
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	683a      	ldr	r2, [r7, #0]
 800751a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	1c5a      	adds	r2, r3, #1
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	601a      	str	r2, [r3, #0]
}
 8007532:	bf00      	nop
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	bc80      	pop	{r7}
 800753a:	4770      	bx	lr

0800753c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007552:	d103      	bne.n	800755c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	60fb      	str	r3, [r7, #12]
 800755a:	e00c      	b.n	8007576 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	3308      	adds	r3, #8
 8007560:	60fb      	str	r3, [r7, #12]
 8007562:	e002      	b.n	800756a <vListInsert+0x2e>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	60fb      	str	r3, [r7, #12]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	429a      	cmp	r2, r3
 8007574:	d2f6      	bcs.n	8007564 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	683a      	ldr	r2, [r7, #0]
 8007584:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	1c5a      	adds	r2, r3, #1
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	601a      	str	r2, [r3, #0]
}
 80075a2:	bf00      	nop
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bc80      	pop	{r7}
 80075aa:	4770      	bx	lr

080075ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	6892      	ldr	r2, [r2, #8]
 80075c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	6852      	ldr	r2, [r2, #4]
 80075cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d103      	bne.n	80075e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	689a      	ldr	r2, [r3, #8]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	1e5a      	subs	r2, r3, #1
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3714      	adds	r7, #20
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bc80      	pop	{r7}
 80075fc:	4770      	bx	lr
	...

08007600 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d109      	bne.n	8007628 <xQueueGenericReset+0x28>
 8007614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007618:	f383 8811 	msr	BASEPRI, r3
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	60bb      	str	r3, [r7, #8]
 8007626:	e7fe      	b.n	8007626 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007628:	f002 fa2e 	bl	8009a88 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007634:	68f9      	ldr	r1, [r7, #12]
 8007636:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007638:	fb01 f303 	mul.w	r3, r1, r3
 800763c:	441a      	add	r2, r3
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007658:	3b01      	subs	r3, #1
 800765a:	68f9      	ldr	r1, [r7, #12]
 800765c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800765e:	fb01 f303 	mul.w	r3, r1, r3
 8007662:	441a      	add	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	22ff      	movs	r2, #255	; 0xff
 800766c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	22ff      	movs	r2, #255	; 0xff
 8007674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d114      	bne.n	80076a8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d01a      	beq.n	80076bc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	3310      	adds	r3, #16
 800768a:	4618      	mov	r0, r3
 800768c:	f001 fa84 	bl	8008b98 <xTaskRemoveFromEventList>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d012      	beq.n	80076bc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007696:	4b0d      	ldr	r3, [pc, #52]	; (80076cc <xQueueGenericReset+0xcc>)
 8007698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800769c:	601a      	str	r2, [r3, #0]
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	e009      	b.n	80076bc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	3310      	adds	r3, #16
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7ff fef7 	bl	80074a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3324      	adds	r3, #36	; 0x24
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7ff fef2 	bl	80074a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80076bc:	f002 fa12 	bl	8009ae4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80076c0:	2301      	movs	r3, #1
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	e000ed04 	.word	0xe000ed04

080076d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b08e      	sub	sp, #56	; 0x38
 80076d4:	af02      	add	r7, sp, #8
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	607a      	str	r2, [r7, #4]
 80076dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d109      	bne.n	80076f8 <xQueueGenericCreateStatic+0x28>
 80076e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e8:	f383 8811 	msr	BASEPRI, r3
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80076f6:	e7fe      	b.n	80076f6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d109      	bne.n	8007712 <xQueueGenericCreateStatic+0x42>
 80076fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	627b      	str	r3, [r7, #36]	; 0x24
 8007710:	e7fe      	b.n	8007710 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d002      	beq.n	800771e <xQueueGenericCreateStatic+0x4e>
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d001      	beq.n	8007722 <xQueueGenericCreateStatic+0x52>
 800771e:	2301      	movs	r3, #1
 8007720:	e000      	b.n	8007724 <xQueueGenericCreateStatic+0x54>
 8007722:	2300      	movs	r3, #0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d109      	bne.n	800773c <xQueueGenericCreateStatic+0x6c>
 8007728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772c:	f383 8811 	msr	BASEPRI, r3
 8007730:	f3bf 8f6f 	isb	sy
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	623b      	str	r3, [r7, #32]
 800773a:	e7fe      	b.n	800773a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d102      	bne.n	8007748 <xQueueGenericCreateStatic+0x78>
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d101      	bne.n	800774c <xQueueGenericCreateStatic+0x7c>
 8007748:	2301      	movs	r3, #1
 800774a:	e000      	b.n	800774e <xQueueGenericCreateStatic+0x7e>
 800774c:	2300      	movs	r3, #0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d109      	bne.n	8007766 <xQueueGenericCreateStatic+0x96>
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	61fb      	str	r3, [r7, #28]
 8007764:	e7fe      	b.n	8007764 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007766:	2350      	movs	r3, #80	; 0x50
 8007768:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	2b50      	cmp	r3, #80	; 0x50
 800776e:	d009      	beq.n	8007784 <xQueueGenericCreateStatic+0xb4>
 8007770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007774:	f383 8811 	msr	BASEPRI, r3
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	61bb      	str	r3, [r7, #24]
 8007782:	e7fe      	b.n	8007782 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00d      	beq.n	80077aa <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007790:	2201      	movs	r2, #1
 8007792:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007796:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800779a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	4613      	mov	r3, r2
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	68b9      	ldr	r1, [r7, #8]
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f000 f842 	bl	800782e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80077aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3730      	adds	r7, #48	; 0x30
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b08a      	sub	sp, #40	; 0x28
 80077b8:	af02      	add	r7, sp, #8
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	4613      	mov	r3, r2
 80077c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d109      	bne.n	80077dc <xQueueGenericCreate+0x28>
 80077c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077cc:	f383 8811 	msr	BASEPRI, r3
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	613b      	str	r3, [r7, #16]
 80077da:	e7fe      	b.n	80077da <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d102      	bne.n	80077e8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80077e2:	2300      	movs	r3, #0
 80077e4:	61fb      	str	r3, [r7, #28]
 80077e6:	e004      	b.n	80077f2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	fb02 f303 	mul.w	r3, r2, r3
 80077f0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	3350      	adds	r3, #80	; 0x50
 80077f6:	4618      	mov	r0, r3
 80077f8:	f002 fa3c 	bl	8009c74 <pvPortMalloc>
 80077fc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00f      	beq.n	8007824 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	3350      	adds	r3, #80	; 0x50
 8007808:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007812:	79fa      	ldrb	r2, [r7, #7]
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	4613      	mov	r3, r2
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	68b9      	ldr	r1, [r7, #8]
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f000 f805 	bl	800782e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007824:	69bb      	ldr	r3, [r7, #24]
	}
 8007826:	4618      	mov	r0, r3
 8007828:	3720      	adds	r7, #32
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b084      	sub	sp, #16
 8007832:	af00      	add	r7, sp, #0
 8007834:	60f8      	str	r0, [r7, #12]
 8007836:	60b9      	str	r1, [r7, #8]
 8007838:	607a      	str	r2, [r7, #4]
 800783a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d103      	bne.n	800784a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	69ba      	ldr	r2, [r7, #24]
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	e002      	b.n	8007850 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800785c:	2101      	movs	r1, #1
 800785e:	69b8      	ldr	r0, [r7, #24]
 8007860:	f7ff fece 	bl	8007600 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	78fa      	ldrb	r2, [r7, #3]
 8007868:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800786c:	bf00      	nop
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b08e      	sub	sp, #56	; 0x38
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
 8007880:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007882:	2300      	movs	r3, #0
 8007884:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800788a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788c:	2b00      	cmp	r3, #0
 800788e:	d109      	bne.n	80078a4 <xQueueGenericSend+0x30>
 8007890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80078a2:	e7fe      	b.n	80078a2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d103      	bne.n	80078b2 <xQueueGenericSend+0x3e>
 80078aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <xQueueGenericSend+0x42>
 80078b2:	2301      	movs	r3, #1
 80078b4:	e000      	b.n	80078b8 <xQueueGenericSend+0x44>
 80078b6:	2300      	movs	r3, #0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d109      	bne.n	80078d0 <xQueueGenericSend+0x5c>
 80078bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c0:	f383 8811 	msr	BASEPRI, r3
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	627b      	str	r3, [r7, #36]	; 0x24
 80078ce:	e7fe      	b.n	80078ce <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d103      	bne.n	80078de <xQueueGenericSend+0x6a>
 80078d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d101      	bne.n	80078e2 <xQueueGenericSend+0x6e>
 80078de:	2301      	movs	r3, #1
 80078e0:	e000      	b.n	80078e4 <xQueueGenericSend+0x70>
 80078e2:	2300      	movs	r3, #0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d109      	bne.n	80078fc <xQueueGenericSend+0x88>
 80078e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	623b      	str	r3, [r7, #32]
 80078fa:	e7fe      	b.n	80078fa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078fc:	f001 fb68 	bl	8008fd0 <xTaskGetSchedulerState>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d102      	bne.n	800790c <xQueueGenericSend+0x98>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <xQueueGenericSend+0x9c>
 800790c:	2301      	movs	r3, #1
 800790e:	e000      	b.n	8007912 <xQueueGenericSend+0x9e>
 8007910:	2300      	movs	r3, #0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d109      	bne.n	800792a <xQueueGenericSend+0xb6>
 8007916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791a:	f383 8811 	msr	BASEPRI, r3
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	f3bf 8f4f 	dsb	sy
 8007926:	61fb      	str	r3, [r7, #28]
 8007928:	e7fe      	b.n	8007928 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800792a:	f002 f8ad 	bl	8009a88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007936:	429a      	cmp	r2, r3
 8007938:	d302      	bcc.n	8007940 <xQueueGenericSend+0xcc>
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	2b02      	cmp	r3, #2
 800793e:	d129      	bne.n	8007994 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007940:	683a      	ldr	r2, [r7, #0]
 8007942:	68b9      	ldr	r1, [r7, #8]
 8007944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007946:	f000 f9ff 	bl	8007d48 <prvCopyDataToQueue>
 800794a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800794c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007950:	2b00      	cmp	r3, #0
 8007952:	d010      	beq.n	8007976 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007956:	3324      	adds	r3, #36	; 0x24
 8007958:	4618      	mov	r0, r3
 800795a:	f001 f91d 	bl	8008b98 <xTaskRemoveFromEventList>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d013      	beq.n	800798c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007964:	4b3f      	ldr	r3, [pc, #252]	; (8007a64 <xQueueGenericSend+0x1f0>)
 8007966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800796a:	601a      	str	r2, [r3, #0]
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	f3bf 8f6f 	isb	sy
 8007974:	e00a      	b.n	800798c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007978:	2b00      	cmp	r3, #0
 800797a:	d007      	beq.n	800798c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800797c:	4b39      	ldr	r3, [pc, #228]	; (8007a64 <xQueueGenericSend+0x1f0>)
 800797e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007982:	601a      	str	r2, [r3, #0]
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800798c:	f002 f8aa 	bl	8009ae4 <vPortExitCritical>
				return pdPASS;
 8007990:	2301      	movs	r3, #1
 8007992:	e063      	b.n	8007a5c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d103      	bne.n	80079a2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800799a:	f002 f8a3 	bl	8009ae4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800799e:	2300      	movs	r3, #0
 80079a0:	e05c      	b.n	8007a5c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80079a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d106      	bne.n	80079b6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80079a8:	f107 0314 	add.w	r3, r7, #20
 80079ac:	4618      	mov	r0, r3
 80079ae:	f001 f9b5 	bl	8008d1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80079b2:	2301      	movs	r3, #1
 80079b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80079b6:	f002 f895 	bl	8009ae4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80079ba:	f000 fe69 	bl	8008690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079be:	f002 f863 	bl	8009a88 <vPortEnterCritical>
 80079c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079c8:	b25b      	sxtb	r3, r3
 80079ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ce:	d103      	bne.n	80079d8 <xQueueGenericSend+0x164>
 80079d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079de:	b25b      	sxtb	r3, r3
 80079e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e4:	d103      	bne.n	80079ee <xQueueGenericSend+0x17a>
 80079e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079ee:	f002 f879 	bl	8009ae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079f2:	1d3a      	adds	r2, r7, #4
 80079f4:	f107 0314 	add.w	r3, r7, #20
 80079f8:	4611      	mov	r1, r2
 80079fa:	4618      	mov	r0, r3
 80079fc:	f001 f9a4 	bl	8008d48 <xTaskCheckForTimeOut>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d124      	bne.n	8007a50 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007a06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a08:	f000 fa96 	bl	8007f38 <prvIsQueueFull>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d018      	beq.n	8007a44 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a14:	3310      	adds	r3, #16
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	4611      	mov	r1, r2
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f001 f834 	bl	8008a88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007a20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a22:	f000 fa21 	bl	8007e68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007a26:	f000 fe41 	bl	80086ac <xTaskResumeAll>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f47f af7c 	bne.w	800792a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007a32:	4b0c      	ldr	r3, [pc, #48]	; (8007a64 <xQueueGenericSend+0x1f0>)
 8007a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a38:	601a      	str	r2, [r3, #0]
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	f3bf 8f6f 	isb	sy
 8007a42:	e772      	b.n	800792a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007a44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a46:	f000 fa0f 	bl	8007e68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a4a:	f000 fe2f 	bl	80086ac <xTaskResumeAll>
 8007a4e:	e76c      	b.n	800792a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a52:	f000 fa09 	bl	8007e68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a56:	f000 fe29 	bl	80086ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007a5a:	2300      	movs	r3, #0
		}
	}
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3738      	adds	r7, #56	; 0x38
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	e000ed04 	.word	0xe000ed04

08007a68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b08e      	sub	sp, #56	; 0x38
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
 8007a74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d109      	bne.n	8007a94 <xQueueGenericSendFromISR+0x2c>
 8007a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	627b      	str	r3, [r7, #36]	; 0x24
 8007a92:	e7fe      	b.n	8007a92 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d103      	bne.n	8007aa2 <xQueueGenericSendFromISR+0x3a>
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d101      	bne.n	8007aa6 <xQueueGenericSendFromISR+0x3e>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e000      	b.n	8007aa8 <xQueueGenericSendFromISR+0x40>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d109      	bne.n	8007ac0 <xQueueGenericSendFromISR+0x58>
 8007aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	623b      	str	r3, [r7, #32]
 8007abe:	e7fe      	b.n	8007abe <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d103      	bne.n	8007ace <xQueueGenericSendFromISR+0x66>
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d101      	bne.n	8007ad2 <xQueueGenericSendFromISR+0x6a>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e000      	b.n	8007ad4 <xQueueGenericSendFromISR+0x6c>
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d109      	bne.n	8007aec <xQueueGenericSendFromISR+0x84>
 8007ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007adc:	f383 8811 	msr	BASEPRI, r3
 8007ae0:	f3bf 8f6f 	isb	sy
 8007ae4:	f3bf 8f4f 	dsb	sy
 8007ae8:	61fb      	str	r3, [r7, #28]
 8007aea:	e7fe      	b.n	8007aea <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007aec:	f002 f886 	bl	8009bfc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007af0:	f3ef 8211 	mrs	r2, BASEPRI
 8007af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	61ba      	str	r2, [r7, #24]
 8007b06:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007b08:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d302      	bcc.n	8007b1e <xQueueGenericSendFromISR+0xb6>
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d12c      	bne.n	8007b78 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b28:	683a      	ldr	r2, [r7, #0]
 8007b2a:	68b9      	ldr	r1, [r7, #8]
 8007b2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b2e:	f000 f90b 	bl	8007d48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007b32:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3a:	d112      	bne.n	8007b62 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d016      	beq.n	8007b72 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b46:	3324      	adds	r3, #36	; 0x24
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f001 f825 	bl	8008b98 <xTaskRemoveFromEventList>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00e      	beq.n	8007b72 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00b      	beq.n	8007b72 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	601a      	str	r2, [r3, #0]
 8007b60:	e007      	b.n	8007b72 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b66:	3301      	adds	r3, #1
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	b25a      	sxtb	r2, r3
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b72:	2301      	movs	r3, #1
 8007b74:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007b76:	e001      	b.n	8007b7c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3738      	adds	r7, #56	; 0x38
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08c      	sub	sp, #48	; 0x30
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d109      	bne.n	8007bbe <xQueueReceive+0x2e>
	__asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	623b      	str	r3, [r7, #32]
 8007bbc:	e7fe      	b.n	8007bbc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d103      	bne.n	8007bcc <xQueueReceive+0x3c>
 8007bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d101      	bne.n	8007bd0 <xQueueReceive+0x40>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e000      	b.n	8007bd2 <xQueueReceive+0x42>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d109      	bne.n	8007bea <xQueueReceive+0x5a>
 8007bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	61fb      	str	r3, [r7, #28]
 8007be8:	e7fe      	b.n	8007be8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007bea:	f001 f9f1 	bl	8008fd0 <xTaskGetSchedulerState>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d102      	bne.n	8007bfa <xQueueReceive+0x6a>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <xQueueReceive+0x6e>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e000      	b.n	8007c00 <xQueueReceive+0x70>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d109      	bne.n	8007c18 <xQueueReceive+0x88>
 8007c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	61bb      	str	r3, [r7, #24]
 8007c16:	e7fe      	b.n	8007c16 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c18:	f001 ff36 	bl	8009a88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c20:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d01f      	beq.n	8007c68 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c28:	68b9      	ldr	r1, [r7, #8]
 8007c2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c2c:	f000 f8f6 	bl	8007e1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c32:	1e5a      	subs	r2, r3, #1
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00f      	beq.n	8007c60 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c42:	3310      	adds	r3, #16
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 ffa7 	bl	8008b98 <xTaskRemoveFromEventList>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d007      	beq.n	8007c60 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c50:	4b3c      	ldr	r3, [pc, #240]	; (8007d44 <xQueueReceive+0x1b4>)
 8007c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c56:	601a      	str	r2, [r3, #0]
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c60:	f001 ff40 	bl	8009ae4 <vPortExitCritical>
				return pdPASS;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e069      	b.n	8007d3c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d103      	bne.n	8007c76 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c6e:	f001 ff39 	bl	8009ae4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c72:	2300      	movs	r3, #0
 8007c74:	e062      	b.n	8007d3c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d106      	bne.n	8007c8a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c7c:	f107 0310 	add.w	r3, r7, #16
 8007c80:	4618      	mov	r0, r3
 8007c82:	f001 f84b 	bl	8008d1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c86:	2301      	movs	r3, #1
 8007c88:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c8a:	f001 ff2b 	bl	8009ae4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c8e:	f000 fcff 	bl	8008690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c92:	f001 fef9 	bl	8009a88 <vPortEnterCritical>
 8007c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c9c:	b25b      	sxtb	r3, r3
 8007c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca2:	d103      	bne.n	8007cac <xQueueReceive+0x11c>
 8007ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cb2:	b25b      	sxtb	r3, r3
 8007cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb8:	d103      	bne.n	8007cc2 <xQueueReceive+0x132>
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cc2:	f001 ff0f 	bl	8009ae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cc6:	1d3a      	adds	r2, r7, #4
 8007cc8:	f107 0310 	add.w	r3, r7, #16
 8007ccc:	4611      	mov	r1, r2
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f001 f83a 	bl	8008d48 <xTaskCheckForTimeOut>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d123      	bne.n	8007d22 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cdc:	f000 f916 	bl	8007f0c <prvIsQueueEmpty>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d017      	beq.n	8007d16 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce8:	3324      	adds	r3, #36	; 0x24
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	4611      	mov	r1, r2
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 feca 	bl	8008a88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cf6:	f000 f8b7 	bl	8007e68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cfa:	f000 fcd7 	bl	80086ac <xTaskResumeAll>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d189      	bne.n	8007c18 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007d04:	4b0f      	ldr	r3, [pc, #60]	; (8007d44 <xQueueReceive+0x1b4>)
 8007d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	f3bf 8f6f 	isb	sy
 8007d14:	e780      	b.n	8007c18 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007d16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d18:	f000 f8a6 	bl	8007e68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d1c:	f000 fcc6 	bl	80086ac <xTaskResumeAll>
 8007d20:	e77a      	b.n	8007c18 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007d22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d24:	f000 f8a0 	bl	8007e68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d28:	f000 fcc0 	bl	80086ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d2e:	f000 f8ed 	bl	8007f0c <prvIsQueueEmpty>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f43f af6f 	beq.w	8007c18 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d3a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3730      	adds	r7, #48	; 0x30
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	e000ed04 	.word	0xe000ed04

08007d48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007d54:	2300      	movs	r3, #0
 8007d56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d10d      	bne.n	8007d82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d14d      	bne.n	8007e0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	4618      	mov	r0, r3
 8007d74:	f001 f94a 	bl	800900c <xTaskPriorityDisinherit>
 8007d78:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	605a      	str	r2, [r3, #4]
 8007d80:	e043      	b.n	8007e0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d119      	bne.n	8007dbc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6898      	ldr	r0, [r3, #8]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d90:	461a      	mov	r2, r3
 8007d92:	68b9      	ldr	r1, [r7, #8]
 8007d94:	f002 f96a 	bl	800a06c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	689a      	ldr	r2, [r3, #8]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da0:	441a      	add	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	689a      	ldr	r2, [r3, #8]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d32b      	bcc.n	8007e0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	609a      	str	r2, [r3, #8]
 8007dba:	e026      	b.n	8007e0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	68d8      	ldr	r0, [r3, #12]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	68b9      	ldr	r1, [r7, #8]
 8007dc8:	f002 f950 	bl	800a06c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	68da      	ldr	r2, [r3, #12]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd4:	425b      	negs	r3, r3
 8007dd6:	441a      	add	r2, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	68da      	ldr	r2, [r3, #12]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d207      	bcs.n	8007df8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df0:	425b      	negs	r3, r3
 8007df2:	441a      	add	r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d105      	bne.n	8007e0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d002      	beq.n	8007e0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	3b01      	subs	r3, #1
 8007e08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	1c5a      	adds	r2, r3, #1
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007e12:	697b      	ldr	r3, [r7, #20]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3718      	adds	r7, #24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d018      	beq.n	8007e60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68da      	ldr	r2, [r3, #12]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e36:	441a      	add	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68da      	ldr	r2, [r3, #12]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d303      	bcc.n	8007e50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	68d9      	ldr	r1, [r3, #12]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e58:	461a      	mov	r2, r3
 8007e5a:	6838      	ldr	r0, [r7, #0]
 8007e5c:	f002 f906 	bl	800a06c <memcpy>
	}
}
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007e70:	f001 fe0a 	bl	8009a88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e7c:	e011      	b.n	8007ea2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d012      	beq.n	8007eac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	3324      	adds	r3, #36	; 0x24
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f000 fe84 	bl	8008b98 <xTaskRemoveFromEventList>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d001      	beq.n	8007e9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007e96:	f000 ffb7 	bl	8008e08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	dce9      	bgt.n	8007e7e <prvUnlockQueue+0x16>
 8007eaa:	e000      	b.n	8007eae <prvUnlockQueue+0x46>
					break;
 8007eac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	22ff      	movs	r2, #255	; 0xff
 8007eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007eb6:	f001 fe15 	bl	8009ae4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007eba:	f001 fde5 	bl	8009a88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ec4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ec6:	e011      	b.n	8007eec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d012      	beq.n	8007ef6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	3310      	adds	r3, #16
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f000 fe5f 	bl	8008b98 <xTaskRemoveFromEventList>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d001      	beq.n	8007ee4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ee0:	f000 ff92 	bl	8008e08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ee4:	7bbb      	ldrb	r3, [r7, #14]
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007eec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	dce9      	bgt.n	8007ec8 <prvUnlockQueue+0x60>
 8007ef4:	e000      	b.n	8007ef8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007ef6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	22ff      	movs	r2, #255	; 0xff
 8007efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007f00:	f001 fdf0 	bl	8009ae4 <vPortExitCritical>
}
 8007f04:	bf00      	nop
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f14:	f001 fdb8 	bl	8009a88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d102      	bne.n	8007f26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007f20:	2301      	movs	r3, #1
 8007f22:	60fb      	str	r3, [r7, #12]
 8007f24:	e001      	b.n	8007f2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007f26:	2300      	movs	r3, #0
 8007f28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f2a:	f001 fddb 	bl	8009ae4 <vPortExitCritical>

	return xReturn;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f40:	f001 fda2 	bl	8009a88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d102      	bne.n	8007f56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007f50:	2301      	movs	r3, #1
 8007f52:	60fb      	str	r3, [r7, #12]
 8007f54:	e001      	b.n	8007f5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007f56:	2300      	movs	r3, #0
 8007f58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f5a:	f001 fdc3 	bl	8009ae4 <vPortExitCritical>

	return xReturn;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f72:	2300      	movs	r3, #0
 8007f74:	60fb      	str	r3, [r7, #12]
 8007f76:	e014      	b.n	8007fa2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007f78:	4a0e      	ldr	r2, [pc, #56]	; (8007fb4 <vQueueAddToRegistry+0x4c>)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10b      	bne.n	8007f9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007f84:	490b      	ldr	r1, [pc, #44]	; (8007fb4 <vQueueAddToRegistry+0x4c>)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	683a      	ldr	r2, [r7, #0]
 8007f8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007f8e:	4a09      	ldr	r2, [pc, #36]	; (8007fb4 <vQueueAddToRegistry+0x4c>)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	00db      	lsls	r3, r3, #3
 8007f94:	4413      	add	r3, r2
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007f9a:	e005      	b.n	8007fa8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	60fb      	str	r3, [r7, #12]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2b07      	cmp	r3, #7
 8007fa6:	d9e7      	bls.n	8007f78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007fa8:	bf00      	nop
 8007faa:	3714      	adds	r7, #20
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bc80      	pop	{r7}
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	200037d8 	.word	0x200037d8

08007fb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b086      	sub	sp, #24
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007fc8:	f001 fd5e 	bl	8009a88 <vPortEnterCritical>
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fd2:	b25b      	sxtb	r3, r3
 8007fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd8:	d103      	bne.n	8007fe2 <vQueueWaitForMessageRestricted+0x2a>
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fe8:	b25b      	sxtb	r3, r3
 8007fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fee:	d103      	bne.n	8007ff8 <vQueueWaitForMessageRestricted+0x40>
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ff8:	f001 fd74 	bl	8009ae4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008000:	2b00      	cmp	r3, #0
 8008002:	d106      	bne.n	8008012 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	3324      	adds	r3, #36	; 0x24
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	68b9      	ldr	r1, [r7, #8]
 800800c:	4618      	mov	r0, r3
 800800e:	f000 fd99 	bl	8008b44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008012:	6978      	ldr	r0, [r7, #20]
 8008014:	f7ff ff28 	bl	8007e68 <prvUnlockQueue>
	}
 8008018:	bf00      	nop
 800801a:	3718      	adds	r7, #24
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008020:	b580      	push	{r7, lr}
 8008022:	b08e      	sub	sp, #56	; 0x38
 8008024:	af04      	add	r7, sp, #16
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
 800802c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800802e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008030:	2b00      	cmp	r3, #0
 8008032:	d109      	bne.n	8008048 <xTaskCreateStatic+0x28>
 8008034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	623b      	str	r3, [r7, #32]
 8008046:	e7fe      	b.n	8008046 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804a:	2b00      	cmp	r3, #0
 800804c:	d109      	bne.n	8008062 <xTaskCreateStatic+0x42>
 800804e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	61fb      	str	r3, [r7, #28]
 8008060:	e7fe      	b.n	8008060 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008062:	235c      	movs	r3, #92	; 0x5c
 8008064:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	2b5c      	cmp	r3, #92	; 0x5c
 800806a:	d009      	beq.n	8008080 <xTaskCreateStatic+0x60>
 800806c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008070:	f383 8811 	msr	BASEPRI, r3
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	61bb      	str	r3, [r7, #24]
 800807e:	e7fe      	b.n	800807e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008082:	2b00      	cmp	r3, #0
 8008084:	d01e      	beq.n	80080c4 <xTaskCreateStatic+0xa4>
 8008086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008088:	2b00      	cmp	r3, #0
 800808a:	d01b      	beq.n	80080c4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800808c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008094:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008098:	2202      	movs	r2, #2
 800809a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800809e:	2300      	movs	r3, #0
 80080a0:	9303      	str	r3, [sp, #12]
 80080a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a4:	9302      	str	r3, [sp, #8]
 80080a6:	f107 0314 	add.w	r3, r7, #20
 80080aa:	9301      	str	r3, [sp, #4]
 80080ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	68b9      	ldr	r1, [r7, #8]
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f000 f850 	bl	800815c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080be:	f000 f8d3 	bl	8008268 <prvAddNewTaskToReadyList>
 80080c2:	e001      	b.n	80080c8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80080c4:	2300      	movs	r3, #0
 80080c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80080c8:	697b      	ldr	r3, [r7, #20]
	}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3728      	adds	r7, #40	; 0x28
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b08c      	sub	sp, #48	; 0x30
 80080d6:	af04      	add	r7, sp, #16
 80080d8:	60f8      	str	r0, [r7, #12]
 80080da:	60b9      	str	r1, [r7, #8]
 80080dc:	603b      	str	r3, [r7, #0]
 80080de:	4613      	mov	r3, r2
 80080e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080e2:	88fb      	ldrh	r3, [r7, #6]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4618      	mov	r0, r3
 80080e8:	f001 fdc4 	bl	8009c74 <pvPortMalloc>
 80080ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00e      	beq.n	8008112 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80080f4:	205c      	movs	r0, #92	; 0x5c
 80080f6:	f001 fdbd 	bl	8009c74 <pvPortMalloc>
 80080fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d003      	beq.n	800810a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	631a      	str	r2, [r3, #48]	; 0x30
 8008108:	e005      	b.n	8008116 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800810a:	6978      	ldr	r0, [r7, #20]
 800810c:	f001 fe78 	bl	8009e00 <vPortFree>
 8008110:	e001      	b.n	8008116 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008112:	2300      	movs	r3, #0
 8008114:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d017      	beq.n	800814c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	2200      	movs	r2, #0
 8008120:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008124:	88fa      	ldrh	r2, [r7, #6]
 8008126:	2300      	movs	r3, #0
 8008128:	9303      	str	r3, [sp, #12]
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	9302      	str	r3, [sp, #8]
 800812e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008130:	9301      	str	r3, [sp, #4]
 8008132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	68b9      	ldr	r1, [r7, #8]
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f000 f80e 	bl	800815c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008140:	69f8      	ldr	r0, [r7, #28]
 8008142:	f000 f891 	bl	8008268 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008146:	2301      	movs	r3, #1
 8008148:	61bb      	str	r3, [r7, #24]
 800814a:	e002      	b.n	8008152 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800814c:	f04f 33ff 	mov.w	r3, #4294967295
 8008150:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008152:	69bb      	ldr	r3, [r7, #24]
	}
 8008154:	4618      	mov	r0, r3
 8008156:	3720      	adds	r7, #32
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b088      	sub	sp, #32
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
 8008168:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800816a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	461a      	mov	r2, r3
 8008174:	21a5      	movs	r1, #165	; 0xa5
 8008176:	f001 ff84 	bl	800a082 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008184:	3b01      	subs	r3, #1
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	f023 0307 	bic.w	r3, r3, #7
 8008192:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	f003 0307 	and.w	r3, r3, #7
 800819a:	2b00      	cmp	r3, #0
 800819c:	d009      	beq.n	80081b2 <prvInitialiseNewTask+0x56>
 800819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	617b      	str	r3, [r7, #20]
 80081b0:	e7fe      	b.n	80081b0 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081b2:	2300      	movs	r3, #0
 80081b4:	61fb      	str	r3, [r7, #28]
 80081b6:	e012      	b.n	80081de <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	4413      	add	r3, r2
 80081be:	7819      	ldrb	r1, [r3, #0]
 80081c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	4413      	add	r3, r2
 80081c6:	3334      	adds	r3, #52	; 0x34
 80081c8:	460a      	mov	r2, r1
 80081ca:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	4413      	add	r3, r2
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d006      	beq.n	80081e6 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	3301      	adds	r3, #1
 80081dc:	61fb      	str	r3, [r7, #28]
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	2b0f      	cmp	r3, #15
 80081e2:	d9e9      	bls.n	80081b8 <prvInitialiseNewTask+0x5c>
 80081e4:	e000      	b.n	80081e8 <prvInitialiseNewTask+0x8c>
		{
			break;
 80081e6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80081e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80081f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f2:	2b37      	cmp	r3, #55	; 0x37
 80081f4:	d901      	bls.n	80081fa <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80081f6:	2337      	movs	r3, #55	; 0x37
 80081f8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80081fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081fe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008204:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008208:	2200      	movs	r2, #0
 800820a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800820c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820e:	3304      	adds	r3, #4
 8008210:	4618      	mov	r0, r3
 8008212:	f7ff f964 	bl	80074de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008218:	3318      	adds	r3, #24
 800821a:	4618      	mov	r0, r3
 800821c:	f7ff f95f 	bl	80074de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008224:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008228:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800822c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008234:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008238:	2200      	movs	r2, #0
 800823a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800823c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823e:	2200      	movs	r2, #0
 8008240:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008244:	683a      	ldr	r2, [r7, #0]
 8008246:	68f9      	ldr	r1, [r7, #12]
 8008248:	69b8      	ldr	r0, [r7, #24]
 800824a:	f001 fb35 	bl	80098b8 <pxPortInitialiseStack>
 800824e:	4602      	mov	r2, r0
 8008250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008252:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008256:	2b00      	cmp	r3, #0
 8008258:	d002      	beq.n	8008260 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800825a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800825e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008260:	bf00      	nop
 8008262:	3720      	adds	r7, #32
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008270:	f001 fc0a 	bl	8009a88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008274:	4b2d      	ldr	r3, [pc, #180]	; (800832c <prvAddNewTaskToReadyList+0xc4>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	3301      	adds	r3, #1
 800827a:	4a2c      	ldr	r2, [pc, #176]	; (800832c <prvAddNewTaskToReadyList+0xc4>)
 800827c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800827e:	4b2c      	ldr	r3, [pc, #176]	; (8008330 <prvAddNewTaskToReadyList+0xc8>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d109      	bne.n	800829a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008286:	4a2a      	ldr	r2, [pc, #168]	; (8008330 <prvAddNewTaskToReadyList+0xc8>)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800828c:	4b27      	ldr	r3, [pc, #156]	; (800832c <prvAddNewTaskToReadyList+0xc4>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d110      	bne.n	80082b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008294:	f000 fdde 	bl	8008e54 <prvInitialiseTaskLists>
 8008298:	e00d      	b.n	80082b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800829a:	4b26      	ldr	r3, [pc, #152]	; (8008334 <prvAddNewTaskToReadyList+0xcc>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d109      	bne.n	80082b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80082a2:	4b23      	ldr	r3, [pc, #140]	; (8008330 <prvAddNewTaskToReadyList+0xc8>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d802      	bhi.n	80082b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80082b0:	4a1f      	ldr	r2, [pc, #124]	; (8008330 <prvAddNewTaskToReadyList+0xc8>)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80082b6:	4b20      	ldr	r3, [pc, #128]	; (8008338 <prvAddNewTaskToReadyList+0xd0>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	3301      	adds	r3, #1
 80082bc:	4a1e      	ldr	r2, [pc, #120]	; (8008338 <prvAddNewTaskToReadyList+0xd0>)
 80082be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80082c0:	4b1d      	ldr	r3, [pc, #116]	; (8008338 <prvAddNewTaskToReadyList+0xd0>)
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082cc:	4b1b      	ldr	r3, [pc, #108]	; (800833c <prvAddNewTaskToReadyList+0xd4>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d903      	bls.n	80082dc <prvAddNewTaskToReadyList+0x74>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d8:	4a18      	ldr	r2, [pc, #96]	; (800833c <prvAddNewTaskToReadyList+0xd4>)
 80082da:	6013      	str	r3, [r2, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e0:	4613      	mov	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4a15      	ldr	r2, [pc, #84]	; (8008340 <prvAddNewTaskToReadyList+0xd8>)
 80082ea:	441a      	add	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	3304      	adds	r3, #4
 80082f0:	4619      	mov	r1, r3
 80082f2:	4610      	mov	r0, r2
 80082f4:	f7ff f8ff 	bl	80074f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80082f8:	f001 fbf4 	bl	8009ae4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80082fc:	4b0d      	ldr	r3, [pc, #52]	; (8008334 <prvAddNewTaskToReadyList+0xcc>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00e      	beq.n	8008322 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008304:	4b0a      	ldr	r3, [pc, #40]	; (8008330 <prvAddNewTaskToReadyList+0xc8>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830e:	429a      	cmp	r2, r3
 8008310:	d207      	bcs.n	8008322 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008312:	4b0c      	ldr	r3, [pc, #48]	; (8008344 <prvAddNewTaskToReadyList+0xdc>)
 8008314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008318:	601a      	str	r2, [r3, #0]
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008322:	bf00      	nop
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	20000bc4 	.word	0x20000bc4
 8008330:	200006f0 	.word	0x200006f0
 8008334:	20000bd0 	.word	0x20000bd0
 8008338:	20000be0 	.word	0x20000be0
 800833c:	20000bcc 	.word	0x20000bcc
 8008340:	200006f4 	.word	0x200006f4
 8008344:	e000ed04 	.word	0xe000ed04

08008348 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008350:	2300      	movs	r3, #0
 8008352:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d016      	beq.n	8008388 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800835a:	4b13      	ldr	r3, [pc, #76]	; (80083a8 <vTaskDelay+0x60>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d009      	beq.n	8008376 <vTaskDelay+0x2e>
 8008362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008366:	f383 8811 	msr	BASEPRI, r3
 800836a:	f3bf 8f6f 	isb	sy
 800836e:	f3bf 8f4f 	dsb	sy
 8008372:	60bb      	str	r3, [r7, #8]
 8008374:	e7fe      	b.n	8008374 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008376:	f000 f98b 	bl	8008690 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800837a:	2100      	movs	r1, #0
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fec9 	bl	8009114 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008382:	f000 f993 	bl	80086ac <xTaskResumeAll>
 8008386:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d107      	bne.n	800839e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800838e:	4b07      	ldr	r3, [pc, #28]	; (80083ac <vTaskDelay+0x64>)
 8008390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008394:	601a      	str	r2, [r3, #0]
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800839e:	bf00      	nop
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	20000bec 	.word	0x20000bec
 80083ac:	e000ed04 	.word	0xe000ed04

080083b0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80083b8:	f001 fb66 	bl	8009a88 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d102      	bne.n	80083c8 <vTaskSuspend+0x18>
 80083c2:	4b2f      	ldr	r3, [pc, #188]	; (8008480 <vTaskSuspend+0xd0>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	e000      	b.n	80083ca <vTaskSuspend+0x1a>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	3304      	adds	r3, #4
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7ff f8eb 	bl	80075ac <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d004      	beq.n	80083e8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	3318      	adds	r3, #24
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7ff f8e2 	bl	80075ac <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	3304      	adds	r3, #4
 80083ec:	4619      	mov	r1, r3
 80083ee:	4825      	ldr	r0, [pc, #148]	; (8008484 <vTaskSuspend+0xd4>)
 80083f0:	f7ff f881 	bl	80074f6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d103      	bne.n	8008408 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8008408:	f001 fb6c 	bl	8009ae4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800840c:	4b1e      	ldr	r3, [pc, #120]	; (8008488 <vTaskSuspend+0xd8>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d005      	beq.n	8008420 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8008414:	f001 fb38 	bl	8009a88 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8008418:	f000 fdb6 	bl	8008f88 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800841c:	f001 fb62 	bl	8009ae4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8008420:	4b17      	ldr	r3, [pc, #92]	; (8008480 <vTaskSuspend+0xd0>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	429a      	cmp	r2, r3
 8008428:	d126      	bne.n	8008478 <vTaskSuspend+0xc8>
		{
			if( xSchedulerRunning != pdFALSE )
 800842a:	4b17      	ldr	r3, [pc, #92]	; (8008488 <vTaskSuspend+0xd8>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d016      	beq.n	8008460 <vTaskSuspend+0xb0>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8008432:	4b16      	ldr	r3, [pc, #88]	; (800848c <vTaskSuspend+0xdc>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d009      	beq.n	800844e <vTaskSuspend+0x9e>
 800843a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843e:	f383 8811 	msr	BASEPRI, r3
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	f3bf 8f4f 	dsb	sy
 800844a:	60bb      	str	r3, [r7, #8]
 800844c:	e7fe      	b.n	800844c <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 800844e:	4b10      	ldr	r3, [pc, #64]	; (8008490 <vTaskSuspend+0xe0>)
 8008450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008454:	601a      	str	r2, [r3, #0]
 8008456:	f3bf 8f4f 	dsb	sy
 800845a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800845e:	e00b      	b.n	8008478 <vTaskSuspend+0xc8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8008460:	4b08      	ldr	r3, [pc, #32]	; (8008484 <vTaskSuspend+0xd4>)
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	4b0b      	ldr	r3, [pc, #44]	; (8008494 <vTaskSuspend+0xe4>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	429a      	cmp	r2, r3
 800846a:	d103      	bne.n	8008474 <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
 800846c:	4b04      	ldr	r3, [pc, #16]	; (8008480 <vTaskSuspend+0xd0>)
 800846e:	2200      	movs	r2, #0
 8008470:	601a      	str	r2, [r3, #0]
	}
 8008472:	e001      	b.n	8008478 <vTaskSuspend+0xc8>
					vTaskSwitchContext();
 8008474:	f000 fa9c 	bl	80089b0 <vTaskSwitchContext>
	}
 8008478:	bf00      	nop
 800847a:	3710      	adds	r7, #16
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	200006f0 	.word	0x200006f0
 8008484:	20000bb0 	.word	0x20000bb0
 8008488:	20000bd0 	.word	0x20000bd0
 800848c:	20000bec 	.word	0x20000bec
 8008490:	e000ed04 	.word	0xe000ed04
 8008494:	20000bc4 	.word	0x20000bc4

08008498 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8008498:	b480      	push	{r7}
 800849a:	b087      	sub	sp, #28
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80084a0:	2300      	movs	r3, #0
 80084a2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d109      	bne.n	80084c2 <prvTaskIsTaskSuspended+0x2a>
 80084ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	60fb      	str	r3, [r7, #12]
 80084c0:	e7fe      	b.n	80084c0 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	695b      	ldr	r3, [r3, #20]
 80084c6:	4a0f      	ldr	r2, [pc, #60]	; (8008504 <prvTaskIsTaskSuspended+0x6c>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d101      	bne.n	80084d0 <prvTaskIsTaskSuspended+0x38>
 80084cc:	2301      	movs	r3, #1
 80084ce:	e000      	b.n	80084d2 <prvTaskIsTaskSuspended+0x3a>
 80084d0:	2300      	movs	r3, #0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00f      	beq.n	80084f6 <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084da:	4a0b      	ldr	r2, [pc, #44]	; (8008508 <prvTaskIsTaskSuspended+0x70>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d00a      	beq.n	80084f6 <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d101      	bne.n	80084ec <prvTaskIsTaskSuspended+0x54>
 80084e8:	2301      	movs	r3, #1
 80084ea:	e000      	b.n	80084ee <prvTaskIsTaskSuspended+0x56>
 80084ec:	2300      	movs	r3, #0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d001      	beq.n	80084f6 <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 80084f2:	2301      	movs	r3, #1
 80084f4:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80084f6:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80084f8:	4618      	mov	r0, r3
 80084fa:	371c      	adds	r7, #28
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bc80      	pop	{r7}
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	20000bb0 	.word	0x20000bb0
 8008508:	20000b84 	.word	0x20000b84

0800850c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d109      	bne.n	8008532 <vTaskResume+0x26>
 800851e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	60bb      	str	r3, [r7, #8]
 8008530:	e7fe      	b.n	8008530 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d03a      	beq.n	80085ae <vTaskResume+0xa2>
 8008538:	4b1f      	ldr	r3, [pc, #124]	; (80085b8 <vTaskResume+0xac>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	429a      	cmp	r2, r3
 8008540:	d035      	beq.n	80085ae <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8008542:	f001 faa1 	bl	8009a88 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	f7ff ffa6 	bl	8008498 <prvTaskIsTaskSuspended>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d02b      	beq.n	80085aa <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	3304      	adds	r3, #4
 8008556:	4618      	mov	r0, r3
 8008558:	f7ff f828 	bl	80075ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008560:	4b16      	ldr	r3, [pc, #88]	; (80085bc <vTaskResume+0xb0>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	429a      	cmp	r2, r3
 8008566:	d903      	bls.n	8008570 <vTaskResume+0x64>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856c:	4a13      	ldr	r2, [pc, #76]	; (80085bc <vTaskResume+0xb0>)
 800856e:	6013      	str	r3, [r2, #0]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008574:	4613      	mov	r3, r2
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	4413      	add	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4a10      	ldr	r2, [pc, #64]	; (80085c0 <vTaskResume+0xb4>)
 800857e:	441a      	add	r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	3304      	adds	r3, #4
 8008584:	4619      	mov	r1, r3
 8008586:	4610      	mov	r0, r2
 8008588:	f7fe ffb5 	bl	80074f6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008590:	4b09      	ldr	r3, [pc, #36]	; (80085b8 <vTaskResume+0xac>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008596:	429a      	cmp	r2, r3
 8008598:	d307      	bcc.n	80085aa <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800859a:	4b0a      	ldr	r3, [pc, #40]	; (80085c4 <vTaskResume+0xb8>)
 800859c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085a0:	601a      	str	r2, [r3, #0]
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80085aa:	f001 fa9b 	bl	8009ae4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80085ae:	bf00      	nop
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	200006f0 	.word	0x200006f0
 80085bc:	20000bcc 	.word	0x20000bcc
 80085c0:	200006f4 	.word	0x200006f4
 80085c4:	e000ed04 	.word	0xe000ed04

080085c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b08a      	sub	sp, #40	; 0x28
 80085cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80085ce:	2300      	movs	r3, #0
 80085d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80085d2:	2300      	movs	r3, #0
 80085d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80085d6:	463a      	mov	r2, r7
 80085d8:	1d39      	adds	r1, r7, #4
 80085da:	f107 0308 	add.w	r3, r7, #8
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fe fd7c 	bl	80070dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	9202      	str	r2, [sp, #8]
 80085ec:	9301      	str	r3, [sp, #4]
 80085ee:	2300      	movs	r3, #0
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	2300      	movs	r3, #0
 80085f4:	460a      	mov	r2, r1
 80085f6:	4920      	ldr	r1, [pc, #128]	; (8008678 <vTaskStartScheduler+0xb0>)
 80085f8:	4820      	ldr	r0, [pc, #128]	; (800867c <vTaskStartScheduler+0xb4>)
 80085fa:	f7ff fd11 	bl	8008020 <xTaskCreateStatic>
 80085fe:	4602      	mov	r2, r0
 8008600:	4b1f      	ldr	r3, [pc, #124]	; (8008680 <vTaskStartScheduler+0xb8>)
 8008602:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008604:	4b1e      	ldr	r3, [pc, #120]	; (8008680 <vTaskStartScheduler+0xb8>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d002      	beq.n	8008612 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800860c:	2301      	movs	r3, #1
 800860e:	617b      	str	r3, [r7, #20]
 8008610:	e001      	b.n	8008616 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008612:	2300      	movs	r3, #0
 8008614:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d102      	bne.n	8008622 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800861c:	f000 fdce 	bl	80091bc <xTimerCreateTimerTask>
 8008620:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d115      	bne.n	8008654 <vTaskStartScheduler+0x8c>
 8008628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862c:	f383 8811 	msr	BASEPRI, r3
 8008630:	f3bf 8f6f 	isb	sy
 8008634:	f3bf 8f4f 	dsb	sy
 8008638:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800863a:	4b12      	ldr	r3, [pc, #72]	; (8008684 <vTaskStartScheduler+0xbc>)
 800863c:	f04f 32ff 	mov.w	r2, #4294967295
 8008640:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008642:	4b11      	ldr	r3, [pc, #68]	; (8008688 <vTaskStartScheduler+0xc0>)
 8008644:	2201      	movs	r2, #1
 8008646:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008648:	4b10      	ldr	r3, [pc, #64]	; (800868c <vTaskStartScheduler+0xc4>)
 800864a:	2200      	movs	r2, #0
 800864c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800864e:	f001 f9ab 	bl	80099a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008652:	e00d      	b.n	8008670 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865a:	d109      	bne.n	8008670 <vTaskStartScheduler+0xa8>
 800865c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	60fb      	str	r3, [r7, #12]
 800866e:	e7fe      	b.n	800866e <vTaskStartScheduler+0xa6>
}
 8008670:	bf00      	nop
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	0800a358 	.word	0x0800a358
 800867c:	08008e21 	.word	0x08008e21
 8008680:	20000be8 	.word	0x20000be8
 8008684:	20000be4 	.word	0x20000be4
 8008688:	20000bd0 	.word	0x20000bd0
 800868c:	20000bc8 	.word	0x20000bc8

08008690 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008690:	b480      	push	{r7}
 8008692:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008694:	4b04      	ldr	r3, [pc, #16]	; (80086a8 <vTaskSuspendAll+0x18>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	3301      	adds	r3, #1
 800869a:	4a03      	ldr	r2, [pc, #12]	; (80086a8 <vTaskSuspendAll+0x18>)
 800869c:	6013      	str	r3, [r2, #0]
}
 800869e:	bf00      	nop
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bc80      	pop	{r7}
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	20000bec 	.word	0x20000bec

080086ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80086b2:	2300      	movs	r3, #0
 80086b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80086b6:	2300      	movs	r3, #0
 80086b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80086ba:	4b41      	ldr	r3, [pc, #260]	; (80087c0 <xTaskResumeAll+0x114>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d109      	bne.n	80086d6 <xTaskResumeAll+0x2a>
 80086c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c6:	f383 8811 	msr	BASEPRI, r3
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	603b      	str	r3, [r7, #0]
 80086d4:	e7fe      	b.n	80086d4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80086d6:	f001 f9d7 	bl	8009a88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80086da:	4b39      	ldr	r3, [pc, #228]	; (80087c0 <xTaskResumeAll+0x114>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	3b01      	subs	r3, #1
 80086e0:	4a37      	ldr	r2, [pc, #220]	; (80087c0 <xTaskResumeAll+0x114>)
 80086e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086e4:	4b36      	ldr	r3, [pc, #216]	; (80087c0 <xTaskResumeAll+0x114>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d162      	bne.n	80087b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80086ec:	4b35      	ldr	r3, [pc, #212]	; (80087c4 <xTaskResumeAll+0x118>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d05e      	beq.n	80087b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086f4:	e02f      	b.n	8008756 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80086f6:	4b34      	ldr	r3, [pc, #208]	; (80087c8 <xTaskResumeAll+0x11c>)
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	3318      	adds	r3, #24
 8008702:	4618      	mov	r0, r3
 8008704:	f7fe ff52 	bl	80075ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	3304      	adds	r3, #4
 800870c:	4618      	mov	r0, r3
 800870e:	f7fe ff4d 	bl	80075ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008716:	4b2d      	ldr	r3, [pc, #180]	; (80087cc <xTaskResumeAll+0x120>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	429a      	cmp	r2, r3
 800871c:	d903      	bls.n	8008726 <xTaskResumeAll+0x7a>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008722:	4a2a      	ldr	r2, [pc, #168]	; (80087cc <xTaskResumeAll+0x120>)
 8008724:	6013      	str	r3, [r2, #0]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800872a:	4613      	mov	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4413      	add	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4a27      	ldr	r2, [pc, #156]	; (80087d0 <xTaskResumeAll+0x124>)
 8008734:	441a      	add	r2, r3
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	3304      	adds	r3, #4
 800873a:	4619      	mov	r1, r3
 800873c:	4610      	mov	r0, r2
 800873e:	f7fe feda 	bl	80074f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008746:	4b23      	ldr	r3, [pc, #140]	; (80087d4 <xTaskResumeAll+0x128>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874c:	429a      	cmp	r2, r3
 800874e:	d302      	bcc.n	8008756 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008750:	4b21      	ldr	r3, [pc, #132]	; (80087d8 <xTaskResumeAll+0x12c>)
 8008752:	2201      	movs	r2, #1
 8008754:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008756:	4b1c      	ldr	r3, [pc, #112]	; (80087c8 <xTaskResumeAll+0x11c>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1cb      	bne.n	80086f6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d001      	beq.n	8008768 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008764:	f000 fc10 	bl	8008f88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008768:	4b1c      	ldr	r3, [pc, #112]	; (80087dc <xTaskResumeAll+0x130>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d010      	beq.n	8008796 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008774:	f000 f856 	bl	8008824 <xTaskIncrementTick>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d002      	beq.n	8008784 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800877e:	4b16      	ldr	r3, [pc, #88]	; (80087d8 <xTaskResumeAll+0x12c>)
 8008780:	2201      	movs	r2, #1
 8008782:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	3b01      	subs	r3, #1
 8008788:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1f1      	bne.n	8008774 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008790:	4b12      	ldr	r3, [pc, #72]	; (80087dc <xTaskResumeAll+0x130>)
 8008792:	2200      	movs	r2, #0
 8008794:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008796:	4b10      	ldr	r3, [pc, #64]	; (80087d8 <xTaskResumeAll+0x12c>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d009      	beq.n	80087b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800879e:	2301      	movs	r3, #1
 80087a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80087a2:	4b0f      	ldr	r3, [pc, #60]	; (80087e0 <xTaskResumeAll+0x134>)
 80087a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087a8:	601a      	str	r2, [r3, #0]
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087b2:	f001 f997 	bl	8009ae4 <vPortExitCritical>

	return xAlreadyYielded;
 80087b6:	68bb      	ldr	r3, [r7, #8]
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	20000bec 	.word	0x20000bec
 80087c4:	20000bc4 	.word	0x20000bc4
 80087c8:	20000b84 	.word	0x20000b84
 80087cc:	20000bcc 	.word	0x20000bcc
 80087d0:	200006f4 	.word	0x200006f4
 80087d4:	200006f0 	.word	0x200006f0
 80087d8:	20000bd8 	.word	0x20000bd8
 80087dc:	20000bd4 	.word	0x20000bd4
 80087e0:	e000ed04 	.word	0xe000ed04

080087e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80087ea:	4b04      	ldr	r3, [pc, #16]	; (80087fc <xTaskGetTickCount+0x18>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80087f0:	687b      	ldr	r3, [r7, #4]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bc80      	pop	{r7}
 80087fa:	4770      	bx	lr
 80087fc:	20000bc8 	.word	0x20000bc8

08008800 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008806:	f001 f9f9 	bl	8009bfc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800880a:	2300      	movs	r3, #0
 800880c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800880e:	4b04      	ldr	r3, [pc, #16]	; (8008820 <xTaskGetTickCountFromISR+0x20>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008814:	683b      	ldr	r3, [r7, #0]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20000bc8 	.word	0x20000bc8

08008824 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b086      	sub	sp, #24
 8008828:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800882a:	2300      	movs	r3, #0
 800882c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800882e:	4b55      	ldr	r3, [pc, #340]	; (8008984 <xTaskIncrementTick+0x160>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	f040 8093 	bne.w	800895e <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008838:	4b53      	ldr	r3, [pc, #332]	; (8008988 <xTaskIncrementTick+0x164>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	3301      	adds	r3, #1
 800883e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008840:	4a51      	ldr	r2, [pc, #324]	; (8008988 <xTaskIncrementTick+0x164>)
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d11f      	bne.n	800888c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800884c:	4b4f      	ldr	r3, [pc, #316]	; (800898c <xTaskIncrementTick+0x168>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d009      	beq.n	800886a <xTaskIncrementTick+0x46>
 8008856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885a:	f383 8811 	msr	BASEPRI, r3
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	603b      	str	r3, [r7, #0]
 8008868:	e7fe      	b.n	8008868 <xTaskIncrementTick+0x44>
 800886a:	4b48      	ldr	r3, [pc, #288]	; (800898c <xTaskIncrementTick+0x168>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	60fb      	str	r3, [r7, #12]
 8008870:	4b47      	ldr	r3, [pc, #284]	; (8008990 <xTaskIncrementTick+0x16c>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a45      	ldr	r2, [pc, #276]	; (800898c <xTaskIncrementTick+0x168>)
 8008876:	6013      	str	r3, [r2, #0]
 8008878:	4a45      	ldr	r2, [pc, #276]	; (8008990 <xTaskIncrementTick+0x16c>)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6013      	str	r3, [r2, #0]
 800887e:	4b45      	ldr	r3, [pc, #276]	; (8008994 <xTaskIncrementTick+0x170>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	3301      	adds	r3, #1
 8008884:	4a43      	ldr	r2, [pc, #268]	; (8008994 <xTaskIncrementTick+0x170>)
 8008886:	6013      	str	r3, [r2, #0]
 8008888:	f000 fb7e 	bl	8008f88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800888c:	4b42      	ldr	r3, [pc, #264]	; (8008998 <xTaskIncrementTick+0x174>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	693a      	ldr	r2, [r7, #16]
 8008892:	429a      	cmp	r2, r3
 8008894:	d34e      	bcc.n	8008934 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008896:	4b3d      	ldr	r3, [pc, #244]	; (800898c <xTaskIncrementTick+0x168>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d101      	bne.n	80088a4 <xTaskIncrementTick+0x80>
 80088a0:	2301      	movs	r3, #1
 80088a2:	e000      	b.n	80088a6 <xTaskIncrementTick+0x82>
 80088a4:	2300      	movs	r3, #0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d004      	beq.n	80088b4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088aa:	4b3b      	ldr	r3, [pc, #236]	; (8008998 <xTaskIncrementTick+0x174>)
 80088ac:	f04f 32ff 	mov.w	r2, #4294967295
 80088b0:	601a      	str	r2, [r3, #0]
					break;
 80088b2:	e03f      	b.n	8008934 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80088b4:	4b35      	ldr	r3, [pc, #212]	; (800898c <xTaskIncrementTick+0x168>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d203      	bcs.n	80088d4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80088cc:	4a32      	ldr	r2, [pc, #200]	; (8008998 <xTaskIncrementTick+0x174>)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6013      	str	r3, [r2, #0]
						break;
 80088d2:	e02f      	b.n	8008934 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	3304      	adds	r3, #4
 80088d8:	4618      	mov	r0, r3
 80088da:	f7fe fe67 	bl	80075ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d004      	beq.n	80088f0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	3318      	adds	r3, #24
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fe fe5e 	bl	80075ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f4:	4b29      	ldr	r3, [pc, #164]	; (800899c <xTaskIncrementTick+0x178>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d903      	bls.n	8008904 <xTaskIncrementTick+0xe0>
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008900:	4a26      	ldr	r2, [pc, #152]	; (800899c <xTaskIncrementTick+0x178>)
 8008902:	6013      	str	r3, [r2, #0]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008908:	4613      	mov	r3, r2
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	4413      	add	r3, r2
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	4a23      	ldr	r2, [pc, #140]	; (80089a0 <xTaskIncrementTick+0x17c>)
 8008912:	441a      	add	r2, r3
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	3304      	adds	r3, #4
 8008918:	4619      	mov	r1, r3
 800891a:	4610      	mov	r0, r2
 800891c:	f7fe fdeb 	bl	80074f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008924:	4b1f      	ldr	r3, [pc, #124]	; (80089a4 <xTaskIncrementTick+0x180>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892a:	429a      	cmp	r2, r3
 800892c:	d3b3      	bcc.n	8008896 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800892e:	2301      	movs	r3, #1
 8008930:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008932:	e7b0      	b.n	8008896 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008934:	4b1b      	ldr	r3, [pc, #108]	; (80089a4 <xTaskIncrementTick+0x180>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800893a:	4919      	ldr	r1, [pc, #100]	; (80089a0 <xTaskIncrementTick+0x17c>)
 800893c:	4613      	mov	r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	440b      	add	r3, r1
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2b01      	cmp	r3, #1
 800894a:	d901      	bls.n	8008950 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800894c:	2301      	movs	r3, #1
 800894e:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8008950:	4b15      	ldr	r3, [pc, #84]	; (80089a8 <xTaskIncrementTick+0x184>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d109      	bne.n	800896c <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 8008958:	f7f8 f9aa 	bl	8000cb0 <vApplicationTickHook>
 800895c:	e006      	b.n	800896c <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800895e:	4b12      	ldr	r3, [pc, #72]	; (80089a8 <xTaskIncrementTick+0x184>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	3301      	adds	r3, #1
 8008964:	4a10      	ldr	r2, [pc, #64]	; (80089a8 <xTaskIncrementTick+0x184>)
 8008966:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8008968:	f7f8 f9a2 	bl	8000cb0 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800896c:	4b0f      	ldr	r3, [pc, #60]	; (80089ac <xTaskIncrementTick+0x188>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d001      	beq.n	8008978 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 8008974:	2301      	movs	r3, #1
 8008976:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008978:	697b      	ldr	r3, [r7, #20]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3718      	adds	r7, #24
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	20000bec 	.word	0x20000bec
 8008988:	20000bc8 	.word	0x20000bc8
 800898c:	20000b7c 	.word	0x20000b7c
 8008990:	20000b80 	.word	0x20000b80
 8008994:	20000bdc 	.word	0x20000bdc
 8008998:	20000be4 	.word	0x20000be4
 800899c:	20000bcc 	.word	0x20000bcc
 80089a0:	200006f4 	.word	0x200006f4
 80089a4:	200006f0 	.word	0x200006f0
 80089a8:	20000bd4 	.word	0x20000bd4
 80089ac:	20000bd8 	.word	0x20000bd8

080089b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80089b6:	4b2f      	ldr	r3, [pc, #188]	; (8008a74 <vTaskSwitchContext+0xc4>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d003      	beq.n	80089c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80089be:	4b2e      	ldr	r3, [pc, #184]	; (8008a78 <vTaskSwitchContext+0xc8>)
 80089c0:	2201      	movs	r2, #1
 80089c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80089c4:	e051      	b.n	8008a6a <vTaskSwitchContext+0xba>
		xYieldPending = pdFALSE;
 80089c6:	4b2c      	ldr	r3, [pc, #176]	; (8008a78 <vTaskSwitchContext+0xc8>)
 80089c8:	2200      	movs	r2, #0
 80089ca:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80089cc:	4b2b      	ldr	r3, [pc, #172]	; (8008a7c <vTaskSwitchContext+0xcc>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	4b2a      	ldr	r3, [pc, #168]	; (8008a7c <vTaskSwitchContext+0xcc>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d8:	429a      	cmp	r2, r3
 80089da:	d808      	bhi.n	80089ee <vTaskSwitchContext+0x3e>
 80089dc:	4b27      	ldr	r3, [pc, #156]	; (8008a7c <vTaskSwitchContext+0xcc>)
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	4b26      	ldr	r3, [pc, #152]	; (8008a7c <vTaskSwitchContext+0xcc>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	3334      	adds	r3, #52	; 0x34
 80089e6:	4619      	mov	r1, r3
 80089e8:	4610      	mov	r0, r2
 80089ea:	f7f8 f967 	bl	8000cbc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80089ee:	4b24      	ldr	r3, [pc, #144]	; (8008a80 <vTaskSwitchContext+0xd0>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	60fb      	str	r3, [r7, #12]
 80089f4:	e00f      	b.n	8008a16 <vTaskSwitchContext+0x66>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d109      	bne.n	8008a10 <vTaskSwitchContext+0x60>
 80089fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a00:	f383 8811 	msr	BASEPRI, r3
 8008a04:	f3bf 8f6f 	isb	sy
 8008a08:	f3bf 8f4f 	dsb	sy
 8008a0c:	607b      	str	r3, [r7, #4]
 8008a0e:	e7fe      	b.n	8008a0e <vTaskSwitchContext+0x5e>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	3b01      	subs	r3, #1
 8008a14:	60fb      	str	r3, [r7, #12]
 8008a16:	491b      	ldr	r1, [pc, #108]	; (8008a84 <vTaskSwitchContext+0xd4>)
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4413      	add	r3, r2
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	440b      	add	r3, r1
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d0e5      	beq.n	80089f6 <vTaskSwitchContext+0x46>
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4413      	add	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4a13      	ldr	r2, [pc, #76]	; (8008a84 <vTaskSwitchContext+0xd4>)
 8008a36:	4413      	add	r3, r2
 8008a38:	60bb      	str	r3, [r7, #8]
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	685a      	ldr	r2, [r3, #4]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	605a      	str	r2, [r3, #4]
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	685a      	ldr	r2, [r3, #4]
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	3308      	adds	r3, #8
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d104      	bne.n	8008a5a <vTaskSwitchContext+0xaa>
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	605a      	str	r2, [r3, #4]
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	4a06      	ldr	r2, [pc, #24]	; (8008a7c <vTaskSwitchContext+0xcc>)
 8008a62:	6013      	str	r3, [r2, #0]
 8008a64:	4a06      	ldr	r2, [pc, #24]	; (8008a80 <vTaskSwitchContext+0xd0>)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6013      	str	r3, [r2, #0]
}
 8008a6a:	bf00      	nop
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	20000bec 	.word	0x20000bec
 8008a78:	20000bd8 	.word	0x20000bd8
 8008a7c:	200006f0 	.word	0x200006f0
 8008a80:	20000bcc 	.word	0x20000bcc
 8008a84:	200006f4 	.word	0x200006f4

08008a88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d109      	bne.n	8008aac <vTaskPlaceOnEventList+0x24>
 8008a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9c:	f383 8811 	msr	BASEPRI, r3
 8008aa0:	f3bf 8f6f 	isb	sy
 8008aa4:	f3bf 8f4f 	dsb	sy
 8008aa8:	60fb      	str	r3, [r7, #12]
 8008aaa:	e7fe      	b.n	8008aaa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008aac:	4b07      	ldr	r3, [pc, #28]	; (8008acc <vTaskPlaceOnEventList+0x44>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	3318      	adds	r3, #24
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7fe fd41 	bl	800753c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008aba:	2101      	movs	r1, #1
 8008abc:	6838      	ldr	r0, [r7, #0]
 8008abe:	f000 fb29 	bl	8009114 <prvAddCurrentTaskToDelayedList>
}
 8008ac2:	bf00      	nop
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	200006f0 	.word	0x200006f0

08008ad0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b086      	sub	sp, #24
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d109      	bne.n	8008af6 <vTaskPlaceOnUnorderedEventList+0x26>
 8008ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	617b      	str	r3, [r7, #20]
 8008af4:	e7fe      	b.n	8008af4 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8008af6:	4b11      	ldr	r3, [pc, #68]	; (8008b3c <vTaskPlaceOnUnorderedEventList+0x6c>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d109      	bne.n	8008b12 <vTaskPlaceOnUnorderedEventList+0x42>
 8008afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	613b      	str	r3, [r7, #16]
 8008b10:	e7fe      	b.n	8008b10 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008b12:	4b0b      	ldr	r3, [pc, #44]	; (8008b40 <vTaskPlaceOnUnorderedEventList+0x70>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008b1c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b1e:	4b08      	ldr	r3, [pc, #32]	; (8008b40 <vTaskPlaceOnUnorderedEventList+0x70>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	3318      	adds	r3, #24
 8008b24:	4619      	mov	r1, r3
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f7fe fce5 	bl	80074f6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 faf0 	bl	8009114 <prvAddCurrentTaskToDelayedList>
}
 8008b34:	bf00      	nop
 8008b36:	3718      	adds	r7, #24
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	20000bec 	.word	0x20000bec
 8008b40:	200006f0 	.word	0x200006f0

08008b44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d109      	bne.n	8008b6a <vTaskPlaceOnEventListRestricted+0x26>
 8008b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5a:	f383 8811 	msr	BASEPRI, r3
 8008b5e:	f3bf 8f6f 	isb	sy
 8008b62:	f3bf 8f4f 	dsb	sy
 8008b66:	617b      	str	r3, [r7, #20]
 8008b68:	e7fe      	b.n	8008b68 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b6a:	4b0a      	ldr	r3, [pc, #40]	; (8008b94 <vTaskPlaceOnEventListRestricted+0x50>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	3318      	adds	r3, #24
 8008b70:	4619      	mov	r1, r3
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f7fe fcbf 	bl	80074f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d002      	beq.n	8008b84 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8008b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b82:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b84:	6879      	ldr	r1, [r7, #4]
 8008b86:	68b8      	ldr	r0, [r7, #8]
 8008b88:	f000 fac4 	bl	8009114 <prvAddCurrentTaskToDelayedList>
	}
 8008b8c:	bf00      	nop
 8008b8e:	3718      	adds	r7, #24
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	200006f0 	.word	0x200006f0

08008b98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d109      	bne.n	8008bc2 <xTaskRemoveFromEventList+0x2a>
 8008bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	60fb      	str	r3, [r7, #12]
 8008bc0:	e7fe      	b.n	8008bc0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	3318      	adds	r3, #24
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fe fcf0 	bl	80075ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bcc:	4b1d      	ldr	r3, [pc, #116]	; (8008c44 <xTaskRemoveFromEventList+0xac>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d11d      	bne.n	8008c10 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	3304      	adds	r3, #4
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7fe fce7 	bl	80075ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be2:	4b19      	ldr	r3, [pc, #100]	; (8008c48 <xTaskRemoveFromEventList+0xb0>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d903      	bls.n	8008bf2 <xTaskRemoveFromEventList+0x5a>
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bee:	4a16      	ldr	r2, [pc, #88]	; (8008c48 <xTaskRemoveFromEventList+0xb0>)
 8008bf0:	6013      	str	r3, [r2, #0]
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4413      	add	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4a13      	ldr	r2, [pc, #76]	; (8008c4c <xTaskRemoveFromEventList+0xb4>)
 8008c00:	441a      	add	r2, r3
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	3304      	adds	r3, #4
 8008c06:	4619      	mov	r1, r3
 8008c08:	4610      	mov	r0, r2
 8008c0a:	f7fe fc74 	bl	80074f6 <vListInsertEnd>
 8008c0e:	e005      	b.n	8008c1c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	3318      	adds	r3, #24
 8008c14:	4619      	mov	r1, r3
 8008c16:	480e      	ldr	r0, [pc, #56]	; (8008c50 <xTaskRemoveFromEventList+0xb8>)
 8008c18:	f7fe fc6d 	bl	80074f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c20:	4b0c      	ldr	r3, [pc, #48]	; (8008c54 <xTaskRemoveFromEventList+0xbc>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d905      	bls.n	8008c36 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c2e:	4b0a      	ldr	r3, [pc, #40]	; (8008c58 <xTaskRemoveFromEventList+0xc0>)
 8008c30:	2201      	movs	r2, #1
 8008c32:	601a      	str	r2, [r3, #0]
 8008c34:	e001      	b.n	8008c3a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008c36:	2300      	movs	r3, #0
 8008c38:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008c3a:	697b      	ldr	r3, [r7, #20]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3718      	adds	r7, #24
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	20000bec 	.word	0x20000bec
 8008c48:	20000bcc 	.word	0x20000bcc
 8008c4c:	200006f4 	.word	0x200006f4
 8008c50:	20000b84 	.word	0x20000b84
 8008c54:	200006f0 	.word	0x200006f0
 8008c58:	20000bd8 	.word	0x20000bd8

08008c5c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b086      	sub	sp, #24
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8008c66:	4b28      	ldr	r3, [pc, #160]	; (8008d08 <vTaskRemoveFromUnorderedEventList+0xac>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d109      	bne.n	8008c82 <vTaskRemoveFromUnorderedEventList+0x26>
 8008c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	613b      	str	r3, [r7, #16]
 8008c80:	e7fe      	b.n	8008c80 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d109      	bne.n	8008cac <vTaskRemoveFromUnorderedEventList+0x50>
 8008c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9c:	f383 8811 	msr	BASEPRI, r3
 8008ca0:	f3bf 8f6f 	isb	sy
 8008ca4:	f3bf 8f4f 	dsb	sy
 8008ca8:	60fb      	str	r3, [r7, #12]
 8008caa:	e7fe      	b.n	8008caa <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f7fe fc7d 	bl	80075ac <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	3304      	adds	r3, #4
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7fe fc78 	bl	80075ac <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc0:	4b12      	ldr	r3, [pc, #72]	; (8008d0c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d903      	bls.n	8008cd0 <vTaskRemoveFromUnorderedEventList+0x74>
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ccc:	4a0f      	ldr	r2, [pc, #60]	; (8008d0c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8008cce:	6013      	str	r3, [r2, #0]
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	4413      	add	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4a0c      	ldr	r2, [pc, #48]	; (8008d10 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8008cde:	441a      	add	r2, r3
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	f7fe fc05 	bl	80074f6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf0:	4b08      	ldr	r3, [pc, #32]	; (8008d14 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d902      	bls.n	8008d00 <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8008cfa:	4b07      	ldr	r3, [pc, #28]	; (8008d18 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	601a      	str	r2, [r3, #0]
	}
}
 8008d00:	bf00      	nop
 8008d02:	3718      	adds	r7, #24
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	20000bec 	.word	0x20000bec
 8008d0c:	20000bcc 	.word	0x20000bcc
 8008d10:	200006f4 	.word	0x200006f4
 8008d14:	200006f0 	.word	0x200006f0
 8008d18:	20000bd8 	.word	0x20000bd8

08008d1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d24:	4b06      	ldr	r3, [pc, #24]	; (8008d40 <vTaskInternalSetTimeOutState+0x24>)
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d2c:	4b05      	ldr	r3, [pc, #20]	; (8008d44 <vTaskInternalSetTimeOutState+0x28>)
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	605a      	str	r2, [r3, #4]
}
 8008d34:	bf00      	nop
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bc80      	pop	{r7}
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	20000bdc 	.word	0x20000bdc
 8008d44:	20000bc8 	.word	0x20000bc8

08008d48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b088      	sub	sp, #32
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d109      	bne.n	8008d6c <xTaskCheckForTimeOut+0x24>
 8008d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5c:	f383 8811 	msr	BASEPRI, r3
 8008d60:	f3bf 8f6f 	isb	sy
 8008d64:	f3bf 8f4f 	dsb	sy
 8008d68:	613b      	str	r3, [r7, #16]
 8008d6a:	e7fe      	b.n	8008d6a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d109      	bne.n	8008d86 <xTaskCheckForTimeOut+0x3e>
 8008d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d76:	f383 8811 	msr	BASEPRI, r3
 8008d7a:	f3bf 8f6f 	isb	sy
 8008d7e:	f3bf 8f4f 	dsb	sy
 8008d82:	60fb      	str	r3, [r7, #12]
 8008d84:	e7fe      	b.n	8008d84 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008d86:	f000 fe7f 	bl	8009a88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d8a:	4b1d      	ldr	r3, [pc, #116]	; (8008e00 <xTaskCheckForTimeOut+0xb8>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	69ba      	ldr	r2, [r7, #24]
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da2:	d102      	bne.n	8008daa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008da4:	2300      	movs	r3, #0
 8008da6:	61fb      	str	r3, [r7, #28]
 8008da8:	e023      	b.n	8008df2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	4b15      	ldr	r3, [pc, #84]	; (8008e04 <xTaskCheckForTimeOut+0xbc>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d007      	beq.n	8008dc6 <xTaskCheckForTimeOut+0x7e>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	69ba      	ldr	r2, [r7, #24]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d302      	bcc.n	8008dc6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	61fb      	str	r3, [r7, #28]
 8008dc4:	e015      	b.n	8008df2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d20b      	bcs.n	8008de8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	1ad2      	subs	r2, r2, r3
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f7ff ff9d 	bl	8008d1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008de2:	2300      	movs	r3, #0
 8008de4:	61fb      	str	r3, [r7, #28]
 8008de6:	e004      	b.n	8008df2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	2200      	movs	r2, #0
 8008dec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008dee:	2301      	movs	r3, #1
 8008df0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008df2:	f000 fe77 	bl	8009ae4 <vPortExitCritical>

	return xReturn;
 8008df6:	69fb      	ldr	r3, [r7, #28]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3720      	adds	r7, #32
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	20000bc8 	.word	0x20000bc8
 8008e04:	20000bdc 	.word	0x20000bdc

08008e08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e08:	b480      	push	{r7}
 8008e0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e0c:	4b03      	ldr	r3, [pc, #12]	; (8008e1c <vTaskMissedYield+0x14>)
 8008e0e:	2201      	movs	r2, #1
 8008e10:	601a      	str	r2, [r3, #0]
}
 8008e12:	bf00      	nop
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bc80      	pop	{r7}
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	20000bd8 	.word	0x20000bd8

08008e20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e28:	f000 f854 	bl	8008ed4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e2c:	4b07      	ldr	r3, [pc, #28]	; (8008e4c <prvIdleTask+0x2c>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d907      	bls.n	8008e44 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008e34:	4b06      	ldr	r3, [pc, #24]	; (8008e50 <prvIdleTask+0x30>)
 8008e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e3a:	601a      	str	r2, [r3, #0]
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008e44:	f7f7 ff2e 	bl	8000ca4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008e48:	e7ee      	b.n	8008e28 <prvIdleTask+0x8>
 8008e4a:	bf00      	nop
 8008e4c:	200006f4 	.word	0x200006f4
 8008e50:	e000ed04 	.word	0xe000ed04

08008e54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	607b      	str	r3, [r7, #4]
 8008e5e:	e00c      	b.n	8008e7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	4613      	mov	r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	4413      	add	r3, r2
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	4a12      	ldr	r2, [pc, #72]	; (8008eb4 <prvInitialiseTaskLists+0x60>)
 8008e6c:	4413      	add	r3, r2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7fe fb16 	bl	80074a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	3301      	adds	r3, #1
 8008e78:	607b      	str	r3, [r7, #4]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2b37      	cmp	r3, #55	; 0x37
 8008e7e:	d9ef      	bls.n	8008e60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e80:	480d      	ldr	r0, [pc, #52]	; (8008eb8 <prvInitialiseTaskLists+0x64>)
 8008e82:	f7fe fb0d 	bl	80074a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e86:	480d      	ldr	r0, [pc, #52]	; (8008ebc <prvInitialiseTaskLists+0x68>)
 8008e88:	f7fe fb0a 	bl	80074a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e8c:	480c      	ldr	r0, [pc, #48]	; (8008ec0 <prvInitialiseTaskLists+0x6c>)
 8008e8e:	f7fe fb07 	bl	80074a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e92:	480c      	ldr	r0, [pc, #48]	; (8008ec4 <prvInitialiseTaskLists+0x70>)
 8008e94:	f7fe fb04 	bl	80074a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e98:	480b      	ldr	r0, [pc, #44]	; (8008ec8 <prvInitialiseTaskLists+0x74>)
 8008e9a:	f7fe fb01 	bl	80074a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e9e:	4b0b      	ldr	r3, [pc, #44]	; (8008ecc <prvInitialiseTaskLists+0x78>)
 8008ea0:	4a05      	ldr	r2, [pc, #20]	; (8008eb8 <prvInitialiseTaskLists+0x64>)
 8008ea2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ea4:	4b0a      	ldr	r3, [pc, #40]	; (8008ed0 <prvInitialiseTaskLists+0x7c>)
 8008ea6:	4a05      	ldr	r2, [pc, #20]	; (8008ebc <prvInitialiseTaskLists+0x68>)
 8008ea8:	601a      	str	r2, [r3, #0]
}
 8008eaa:	bf00      	nop
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	200006f4 	.word	0x200006f4
 8008eb8:	20000b54 	.word	0x20000b54
 8008ebc:	20000b68 	.word	0x20000b68
 8008ec0:	20000b84 	.word	0x20000b84
 8008ec4:	20000b98 	.word	0x20000b98
 8008ec8:	20000bb0 	.word	0x20000bb0
 8008ecc:	20000b7c 	.word	0x20000b7c
 8008ed0:	20000b80 	.word	0x20000b80

08008ed4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008eda:	e019      	b.n	8008f10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008edc:	f000 fdd4 	bl	8009a88 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008ee0:	4b0f      	ldr	r3, [pc, #60]	; (8008f20 <prvCheckTasksWaitingTermination+0x4c>)
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	3304      	adds	r3, #4
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7fe fb5d 	bl	80075ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ef2:	4b0c      	ldr	r3, [pc, #48]	; (8008f24 <prvCheckTasksWaitingTermination+0x50>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	4a0a      	ldr	r2, [pc, #40]	; (8008f24 <prvCheckTasksWaitingTermination+0x50>)
 8008efa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008efc:	4b0a      	ldr	r3, [pc, #40]	; (8008f28 <prvCheckTasksWaitingTermination+0x54>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3b01      	subs	r3, #1
 8008f02:	4a09      	ldr	r2, [pc, #36]	; (8008f28 <prvCheckTasksWaitingTermination+0x54>)
 8008f04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f06:	f000 fded 	bl	8009ae4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f80e 	bl	8008f2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f10:	4b05      	ldr	r3, [pc, #20]	; (8008f28 <prvCheckTasksWaitingTermination+0x54>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1e1      	bne.n	8008edc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f18:	bf00      	nop
 8008f1a:	3708      	adds	r7, #8
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	20000b98 	.word	0x20000b98
 8008f24:	20000bc4 	.word	0x20000bc4
 8008f28:	20000bac 	.word	0x20000bac

08008f2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d108      	bne.n	8008f50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 ff5c 	bl	8009e00 <vPortFree>
				vPortFree( pxTCB );
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 ff59 	bl	8009e00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f4e:	e017      	b.n	8008f80 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d103      	bne.n	8008f62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 ff50 	bl	8009e00 <vPortFree>
	}
 8008f60:	e00e      	b.n	8008f80 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008f68:	2b02      	cmp	r3, #2
 8008f6a:	d009      	beq.n	8008f80 <prvDeleteTCB+0x54>
 8008f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f70:	f383 8811 	msr	BASEPRI, r3
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	f3bf 8f4f 	dsb	sy
 8008f7c:	60fb      	str	r3, [r7, #12]
 8008f7e:	e7fe      	b.n	8008f7e <prvDeleteTCB+0x52>
	}
 8008f80:	bf00      	nop
 8008f82:	3710      	adds	r7, #16
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f8e:	4b0e      	ldr	r3, [pc, #56]	; (8008fc8 <prvResetNextTaskUnblockTime+0x40>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d101      	bne.n	8008f9c <prvResetNextTaskUnblockTime+0x14>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e000      	b.n	8008f9e <prvResetNextTaskUnblockTime+0x16>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d004      	beq.n	8008fac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008fa2:	4b0a      	ldr	r3, [pc, #40]	; (8008fcc <prvResetNextTaskUnblockTime+0x44>)
 8008fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008faa:	e008      	b.n	8008fbe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008fac:	4b06      	ldr	r3, [pc, #24]	; (8008fc8 <prvResetNextTaskUnblockTime+0x40>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	4a04      	ldr	r2, [pc, #16]	; (8008fcc <prvResetNextTaskUnblockTime+0x44>)
 8008fbc:	6013      	str	r3, [r2, #0]
}
 8008fbe:	bf00      	nop
 8008fc0:	370c      	adds	r7, #12
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bc80      	pop	{r7}
 8008fc6:	4770      	bx	lr
 8008fc8:	20000b7c 	.word	0x20000b7c
 8008fcc:	20000be4 	.word	0x20000be4

08008fd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008fd6:	4b0b      	ldr	r3, [pc, #44]	; (8009004 <xTaskGetSchedulerState+0x34>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d102      	bne.n	8008fe4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	607b      	str	r3, [r7, #4]
 8008fe2:	e008      	b.n	8008ff6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fe4:	4b08      	ldr	r3, [pc, #32]	; (8009008 <xTaskGetSchedulerState+0x38>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d102      	bne.n	8008ff2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008fec:	2302      	movs	r3, #2
 8008fee:	607b      	str	r3, [r7, #4]
 8008ff0:	e001      	b.n	8008ff6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008ff6:	687b      	ldr	r3, [r7, #4]
	}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bc80      	pop	{r7}
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	20000bd0 	.word	0x20000bd0
 8009008:	20000bec 	.word	0x20000bec

0800900c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800900c:	b580      	push	{r7, lr}
 800900e:	b086      	sub	sp, #24
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009018:	2300      	movs	r3, #0
 800901a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d054      	beq.n	80090cc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009022:	4b2d      	ldr	r3, [pc, #180]	; (80090d8 <xTaskPriorityDisinherit+0xcc>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	693a      	ldr	r2, [r7, #16]
 8009028:	429a      	cmp	r2, r3
 800902a:	d009      	beq.n	8009040 <xTaskPriorityDisinherit+0x34>
 800902c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009030:	f383 8811 	msr	BASEPRI, r3
 8009034:	f3bf 8f6f 	isb	sy
 8009038:	f3bf 8f4f 	dsb	sy
 800903c:	60fb      	str	r3, [r7, #12]
 800903e:	e7fe      	b.n	800903e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009044:	2b00      	cmp	r3, #0
 8009046:	d109      	bne.n	800905c <xTaskPriorityDisinherit+0x50>
 8009048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904c:	f383 8811 	msr	BASEPRI, r3
 8009050:	f3bf 8f6f 	isb	sy
 8009054:	f3bf 8f4f 	dsb	sy
 8009058:	60bb      	str	r3, [r7, #8]
 800905a:	e7fe      	b.n	800905a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009060:	1e5a      	subs	r2, r3, #1
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800906e:	429a      	cmp	r2, r3
 8009070:	d02c      	beq.n	80090cc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009076:	2b00      	cmp	r3, #0
 8009078:	d128      	bne.n	80090cc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	3304      	adds	r3, #4
 800907e:	4618      	mov	r0, r3
 8009080:	f7fe fa94 	bl	80075ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009090:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800909c:	4b0f      	ldr	r3, [pc, #60]	; (80090dc <xTaskPriorityDisinherit+0xd0>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d903      	bls.n	80090ac <xTaskPriorityDisinherit+0xa0>
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a8:	4a0c      	ldr	r2, [pc, #48]	; (80090dc <xTaskPriorityDisinherit+0xd0>)
 80090aa:	6013      	str	r3, [r2, #0]
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b0:	4613      	mov	r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4413      	add	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4a09      	ldr	r2, [pc, #36]	; (80090e0 <xTaskPriorityDisinherit+0xd4>)
 80090ba:	441a      	add	r2, r3
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	3304      	adds	r3, #4
 80090c0:	4619      	mov	r1, r3
 80090c2:	4610      	mov	r0, r2
 80090c4:	f7fe fa17 	bl	80074f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80090c8:	2301      	movs	r3, #1
 80090ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80090cc:	697b      	ldr	r3, [r7, #20]
	}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3718      	adds	r7, #24
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	200006f0 	.word	0x200006f0
 80090dc:	20000bcc 	.word	0x20000bcc
 80090e0:	200006f4 	.word	0x200006f4

080090e4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80090ea:	4b09      	ldr	r3, [pc, #36]	; (8009110 <uxTaskResetEventItemValue+0x2c>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090f2:	4b07      	ldr	r3, [pc, #28]	; (8009110 <uxTaskResetEventItemValue+0x2c>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f8:	4b05      	ldr	r3, [pc, #20]	; (8009110 <uxTaskResetEventItemValue+0x2c>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8009100:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8009102:	687b      	ldr	r3, [r7, #4]
}
 8009104:	4618      	mov	r0, r3
 8009106:	370c      	adds	r7, #12
 8009108:	46bd      	mov	sp, r7
 800910a:	bc80      	pop	{r7}
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	200006f0 	.word	0x200006f0

08009114 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800911e:	4b21      	ldr	r3, [pc, #132]	; (80091a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009124:	4b20      	ldr	r3, [pc, #128]	; (80091a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	3304      	adds	r3, #4
 800912a:	4618      	mov	r0, r3
 800912c:	f7fe fa3e 	bl	80075ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009136:	d10a      	bne.n	800914e <prvAddCurrentTaskToDelayedList+0x3a>
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d007      	beq.n	800914e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800913e:	4b1a      	ldr	r3, [pc, #104]	; (80091a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3304      	adds	r3, #4
 8009144:	4619      	mov	r1, r3
 8009146:	4819      	ldr	r0, [pc, #100]	; (80091ac <prvAddCurrentTaskToDelayedList+0x98>)
 8009148:	f7fe f9d5 	bl	80074f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800914c:	e026      	b.n	800919c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4413      	add	r3, r2
 8009154:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009156:	4b14      	ldr	r3, [pc, #80]	; (80091a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68ba      	ldr	r2, [r7, #8]
 800915c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	429a      	cmp	r2, r3
 8009164:	d209      	bcs.n	800917a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009166:	4b12      	ldr	r3, [pc, #72]	; (80091b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	4b0f      	ldr	r3, [pc, #60]	; (80091a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	3304      	adds	r3, #4
 8009170:	4619      	mov	r1, r3
 8009172:	4610      	mov	r0, r2
 8009174:	f7fe f9e2 	bl	800753c <vListInsert>
}
 8009178:	e010      	b.n	800919c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800917a:	4b0e      	ldr	r3, [pc, #56]	; (80091b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	4b0a      	ldr	r3, [pc, #40]	; (80091a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	3304      	adds	r3, #4
 8009184:	4619      	mov	r1, r3
 8009186:	4610      	mov	r0, r2
 8009188:	f7fe f9d8 	bl	800753c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800918c:	4b0a      	ldr	r3, [pc, #40]	; (80091b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	429a      	cmp	r2, r3
 8009194:	d202      	bcs.n	800919c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009196:	4a08      	ldr	r2, [pc, #32]	; (80091b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	6013      	str	r3, [r2, #0]
}
 800919c:	bf00      	nop
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	20000bc8 	.word	0x20000bc8
 80091a8:	200006f0 	.word	0x200006f0
 80091ac:	20000bb0 	.word	0x20000bb0
 80091b0:	20000b80 	.word	0x20000b80
 80091b4:	20000b7c 	.word	0x20000b7c
 80091b8:	20000be4 	.word	0x20000be4

080091bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b08a      	sub	sp, #40	; 0x28
 80091c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80091c2:	2300      	movs	r3, #0
 80091c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80091c6:	f000 fb17 	bl	80097f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80091ca:	4b1c      	ldr	r3, [pc, #112]	; (800923c <xTimerCreateTimerTask+0x80>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d021      	beq.n	8009216 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80091d2:	2300      	movs	r3, #0
 80091d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80091d6:	2300      	movs	r3, #0
 80091d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80091da:	1d3a      	adds	r2, r7, #4
 80091dc:	f107 0108 	add.w	r1, r7, #8
 80091e0:	f107 030c 	add.w	r3, r7, #12
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7fd ff91 	bl	800710c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80091ea:	6879      	ldr	r1, [r7, #4]
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	9202      	str	r2, [sp, #8]
 80091f2:	9301      	str	r3, [sp, #4]
 80091f4:	2302      	movs	r3, #2
 80091f6:	9300      	str	r3, [sp, #0]
 80091f8:	2300      	movs	r3, #0
 80091fa:	460a      	mov	r2, r1
 80091fc:	4910      	ldr	r1, [pc, #64]	; (8009240 <xTimerCreateTimerTask+0x84>)
 80091fe:	4811      	ldr	r0, [pc, #68]	; (8009244 <xTimerCreateTimerTask+0x88>)
 8009200:	f7fe ff0e 	bl	8008020 <xTaskCreateStatic>
 8009204:	4602      	mov	r2, r0
 8009206:	4b10      	ldr	r3, [pc, #64]	; (8009248 <xTimerCreateTimerTask+0x8c>)
 8009208:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800920a:	4b0f      	ldr	r3, [pc, #60]	; (8009248 <xTimerCreateTimerTask+0x8c>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d001      	beq.n	8009216 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009212:	2301      	movs	r3, #1
 8009214:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d109      	bne.n	8009230 <xTimerCreateTimerTask+0x74>
 800921c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009220:	f383 8811 	msr	BASEPRI, r3
 8009224:	f3bf 8f6f 	isb	sy
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	613b      	str	r3, [r7, #16]
 800922e:	e7fe      	b.n	800922e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8009230:	697b      	ldr	r3, [r7, #20]
}
 8009232:	4618      	mov	r0, r3
 8009234:	3718      	adds	r7, #24
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	20000c20 	.word	0x20000c20
 8009240:	0800a360 	.word	0x0800a360
 8009244:	08009409 	.word	0x08009409
 8009248:	20000c24 	.word	0x20000c24

0800924c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800924c:	b580      	push	{r7, lr}
 800924e:	b088      	sub	sp, #32
 8009250:	af02      	add	r7, sp, #8
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	607a      	str	r2, [r7, #4]
 8009258:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800925a:	2030      	movs	r0, #48	; 0x30
 800925c:	f000 fd0a 	bl	8009c74 <pvPortMalloc>
 8009260:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00d      	beq.n	8009284 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	9301      	str	r3, [sp, #4]
 800926c:	6a3b      	ldr	r3, [r7, #32]
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	68b9      	ldr	r1, [r7, #8]
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f000 f809 	bl	800928e <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	2200      	movs	r2, #0
 8009280:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8009284:	697b      	ldr	r3, [r7, #20]
	}
 8009286:	4618      	mov	r0, r3
 8009288:	3718      	adds	r7, #24
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b086      	sub	sp, #24
 8009292:	af00      	add	r7, sp, #0
 8009294:	60f8      	str	r0, [r7, #12]
 8009296:	60b9      	str	r1, [r7, #8]
 8009298:	607a      	str	r2, [r7, #4]
 800929a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d109      	bne.n	80092b6 <prvInitialiseNewTimer+0x28>
 80092a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a6:	f383 8811 	msr	BASEPRI, r3
 80092aa:	f3bf 8f6f 	isb	sy
 80092ae:	f3bf 8f4f 	dsb	sy
 80092b2:	617b      	str	r3, [r7, #20]
 80092b4:	e7fe      	b.n	80092b4 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80092b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d015      	beq.n	80092e8 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80092bc:	f000 fa9c 	bl	80097f8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80092c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c2:	68fa      	ldr	r2, [r7, #12]
 80092c4:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80092c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c8:	68ba      	ldr	r2, [r7, #8]
 80092ca:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80092cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80092d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d4:	683a      	ldr	r2, [r7, #0]
 80092d6:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80092d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092da:	6a3a      	ldr	r2, [r7, #32]
 80092dc:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80092de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e0:	3304      	adds	r3, #4
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fe f8fb 	bl	80074de <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80092e8:	bf00      	nop
 80092ea:	3718      	adds	r7, #24
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b08a      	sub	sp, #40	; 0x28
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	607a      	str	r2, [r7, #4]
 80092fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80092fe:	2300      	movs	r3, #0
 8009300:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d109      	bne.n	800931c <xTimerGenericCommand+0x2c>
 8009308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930c:	f383 8811 	msr	BASEPRI, r3
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	623b      	str	r3, [r7, #32]
 800931a:	e7fe      	b.n	800931a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800931c:	4b19      	ldr	r3, [pc, #100]	; (8009384 <xTimerGenericCommand+0x94>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d02a      	beq.n	800937a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	2b05      	cmp	r3, #5
 8009334:	dc18      	bgt.n	8009368 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009336:	f7ff fe4b 	bl	8008fd0 <xTaskGetSchedulerState>
 800933a:	4603      	mov	r3, r0
 800933c:	2b02      	cmp	r3, #2
 800933e:	d109      	bne.n	8009354 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009340:	4b10      	ldr	r3, [pc, #64]	; (8009384 <xTimerGenericCommand+0x94>)
 8009342:	6818      	ldr	r0, [r3, #0]
 8009344:	f107 0110 	add.w	r1, r7, #16
 8009348:	2300      	movs	r3, #0
 800934a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800934c:	f7fe fa92 	bl	8007874 <xQueueGenericSend>
 8009350:	6278      	str	r0, [r7, #36]	; 0x24
 8009352:	e012      	b.n	800937a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009354:	4b0b      	ldr	r3, [pc, #44]	; (8009384 <xTimerGenericCommand+0x94>)
 8009356:	6818      	ldr	r0, [r3, #0]
 8009358:	f107 0110 	add.w	r1, r7, #16
 800935c:	2300      	movs	r3, #0
 800935e:	2200      	movs	r2, #0
 8009360:	f7fe fa88 	bl	8007874 <xQueueGenericSend>
 8009364:	6278      	str	r0, [r7, #36]	; 0x24
 8009366:	e008      	b.n	800937a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009368:	4b06      	ldr	r3, [pc, #24]	; (8009384 <xTimerGenericCommand+0x94>)
 800936a:	6818      	ldr	r0, [r3, #0]
 800936c:	f107 0110 	add.w	r1, r7, #16
 8009370:	2300      	movs	r3, #0
 8009372:	683a      	ldr	r2, [r7, #0]
 8009374:	f7fe fb78 	bl	8007a68 <xQueueGenericSendFromISR>
 8009378:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800937a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800937c:	4618      	mov	r0, r3
 800937e:	3728      	adds	r7, #40	; 0x28
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	20000c20 	.word	0x20000c20

08009388 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b088      	sub	sp, #32
 800938c:	af02      	add	r7, sp, #8
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009392:	4b1c      	ldr	r3, [pc, #112]	; (8009404 <prvProcessExpiredTimer+0x7c>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	3304      	adds	r3, #4
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7fe f903 	bl	80075ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	69db      	ldr	r3, [r3, #28]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d121      	bne.n	80093f2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	699a      	ldr	r2, [r3, #24]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	18d1      	adds	r1, r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	683a      	ldr	r2, [r7, #0]
 80093ba:	6978      	ldr	r0, [r7, #20]
 80093bc:	f000 f8ca 	bl	8009554 <prvInsertTimerInActiveList>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d015      	beq.n	80093f2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093c6:	2300      	movs	r3, #0
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	2300      	movs	r3, #0
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	2100      	movs	r1, #0
 80093d0:	6978      	ldr	r0, [r7, #20]
 80093d2:	f7ff ff8d 	bl	80092f0 <xTimerGenericCommand>
 80093d6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d109      	bne.n	80093f2 <prvProcessExpiredTimer+0x6a>
 80093de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e2:	f383 8811 	msr	BASEPRI, r3
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	60fb      	str	r3, [r7, #12]
 80093f0:	e7fe      	b.n	80093f0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f6:	6978      	ldr	r0, [r7, #20]
 80093f8:	4798      	blx	r3
}
 80093fa:	bf00      	nop
 80093fc:	3718      	adds	r7, #24
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	20000c18 	.word	0x20000c18

08009408 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 8009410:	f7f7 fc64 	bl	8000cdc <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009414:	f107 0308 	add.w	r3, r7, #8
 8009418:	4618      	mov	r0, r3
 800941a:	f000 f857 	bl	80094cc <prvGetNextExpireTime>
 800941e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	4619      	mov	r1, r3
 8009424:	68f8      	ldr	r0, [r7, #12]
 8009426:	f000 f803 	bl	8009430 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800942a:	f000 f8d5 	bl	80095d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800942e:	e7f1      	b.n	8009414 <prvTimerTask+0xc>

08009430 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800943a:	f7ff f929 	bl	8008690 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800943e:	f107 0308 	add.w	r3, r7, #8
 8009442:	4618      	mov	r0, r3
 8009444:	f000 f866 	bl	8009514 <prvSampleTimeNow>
 8009448:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d130      	bne.n	80094b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d10a      	bne.n	800946c <prvProcessTimerOrBlockTask+0x3c>
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	429a      	cmp	r2, r3
 800945c:	d806      	bhi.n	800946c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800945e:	f7ff f925 	bl	80086ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009462:	68f9      	ldr	r1, [r7, #12]
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f7ff ff8f 	bl	8009388 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800946a:	e024      	b.n	80094b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d008      	beq.n	8009484 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009472:	4b13      	ldr	r3, [pc, #76]	; (80094c0 <prvProcessTimerOrBlockTask+0x90>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	bf0c      	ite	eq
 800947c:	2301      	moveq	r3, #1
 800947e:	2300      	movne	r3, #0
 8009480:	b2db      	uxtb	r3, r3
 8009482:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009484:	4b0f      	ldr	r3, [pc, #60]	; (80094c4 <prvProcessTimerOrBlockTask+0x94>)
 8009486:	6818      	ldr	r0, [r3, #0]
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	1ad3      	subs	r3, r2, r3
 800948e:	683a      	ldr	r2, [r7, #0]
 8009490:	4619      	mov	r1, r3
 8009492:	f7fe fd91 	bl	8007fb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009496:	f7ff f909 	bl	80086ac <xTaskResumeAll>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10a      	bne.n	80094b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80094a0:	4b09      	ldr	r3, [pc, #36]	; (80094c8 <prvProcessTimerOrBlockTask+0x98>)
 80094a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094a6:	601a      	str	r2, [r3, #0]
 80094a8:	f3bf 8f4f 	dsb	sy
 80094ac:	f3bf 8f6f 	isb	sy
}
 80094b0:	e001      	b.n	80094b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80094b2:	f7ff f8fb 	bl	80086ac <xTaskResumeAll>
}
 80094b6:	bf00      	nop
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	20000c1c 	.word	0x20000c1c
 80094c4:	20000c20 	.word	0x20000c20
 80094c8:	e000ed04 	.word	0xe000ed04

080094cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80094d4:	4b0e      	ldr	r3, [pc, #56]	; (8009510 <prvGetNextExpireTime+0x44>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	bf0c      	ite	eq
 80094de:	2301      	moveq	r3, #1
 80094e0:	2300      	movne	r3, #0
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	461a      	mov	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d105      	bne.n	80094fe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094f2:	4b07      	ldr	r3, [pc, #28]	; (8009510 <prvGetNextExpireTime+0x44>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	60fb      	str	r3, [r7, #12]
 80094fc:	e001      	b.n	8009502 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80094fe:	2300      	movs	r3, #0
 8009500:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009502:	68fb      	ldr	r3, [r7, #12]
}
 8009504:	4618      	mov	r0, r3
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	bc80      	pop	{r7}
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	20000c18 	.word	0x20000c18

08009514 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800951c:	f7ff f962 	bl	80087e4 <xTaskGetTickCount>
 8009520:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009522:	4b0b      	ldr	r3, [pc, #44]	; (8009550 <prvSampleTimeNow+0x3c>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	429a      	cmp	r2, r3
 800952a:	d205      	bcs.n	8009538 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800952c:	f000 f904 	bl	8009738 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	601a      	str	r2, [r3, #0]
 8009536:	e002      	b.n	800953e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800953e:	4a04      	ldr	r2, [pc, #16]	; (8009550 <prvSampleTimeNow+0x3c>)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009544:	68fb      	ldr	r3, [r7, #12]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	20000c28 	.word	0x20000c28

08009554 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b086      	sub	sp, #24
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	607a      	str	r2, [r7, #4]
 8009560:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009562:	2300      	movs	r3, #0
 8009564:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	68ba      	ldr	r2, [r7, #8]
 800956a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009572:	68ba      	ldr	r2, [r7, #8]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	429a      	cmp	r2, r3
 8009578:	d812      	bhi.n	80095a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	1ad2      	subs	r2, r2, r3
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	699b      	ldr	r3, [r3, #24]
 8009584:	429a      	cmp	r2, r3
 8009586:	d302      	bcc.n	800958e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009588:	2301      	movs	r3, #1
 800958a:	617b      	str	r3, [r7, #20]
 800958c:	e01b      	b.n	80095c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800958e:	4b10      	ldr	r3, [pc, #64]	; (80095d0 <prvInsertTimerInActiveList+0x7c>)
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	3304      	adds	r3, #4
 8009596:	4619      	mov	r1, r3
 8009598:	4610      	mov	r0, r2
 800959a:	f7fd ffcf 	bl	800753c <vListInsert>
 800959e:	e012      	b.n	80095c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d206      	bcs.n	80095b6 <prvInsertTimerInActiveList+0x62>
 80095a8:	68ba      	ldr	r2, [r7, #8]
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d302      	bcc.n	80095b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80095b0:	2301      	movs	r3, #1
 80095b2:	617b      	str	r3, [r7, #20]
 80095b4:	e007      	b.n	80095c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095b6:	4b07      	ldr	r3, [pc, #28]	; (80095d4 <prvInsertTimerInActiveList+0x80>)
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	3304      	adds	r3, #4
 80095be:	4619      	mov	r1, r3
 80095c0:	4610      	mov	r0, r2
 80095c2:	f7fd ffbb 	bl	800753c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80095c6:	697b      	ldr	r3, [r7, #20]
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3718      	adds	r7, #24
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	20000c1c 	.word	0x20000c1c
 80095d4:	20000c18 	.word	0x20000c18

080095d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b08e      	sub	sp, #56	; 0x38
 80095dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095de:	e099      	b.n	8009714 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	da17      	bge.n	8009616 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80095e6:	1d3b      	adds	r3, r7, #4
 80095e8:	3304      	adds	r3, #4
 80095ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80095ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d109      	bne.n	8009606 <prvProcessReceivedCommands+0x2e>
 80095f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f6:	f383 8811 	msr	BASEPRI, r3
 80095fa:	f3bf 8f6f 	isb	sy
 80095fe:	f3bf 8f4f 	dsb	sy
 8009602:	61fb      	str	r3, [r7, #28]
 8009604:	e7fe      	b.n	8009604 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800960c:	6850      	ldr	r0, [r2, #4]
 800960e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009610:	6892      	ldr	r2, [r2, #8]
 8009612:	4611      	mov	r1, r2
 8009614:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2b00      	cmp	r3, #0
 800961a:	db7a      	blt.n	8009712 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009622:	695b      	ldr	r3, [r3, #20]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d004      	beq.n	8009632 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962a:	3304      	adds	r3, #4
 800962c:	4618      	mov	r0, r3
 800962e:	f7fd ffbd 	bl	80075ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009632:	463b      	mov	r3, r7
 8009634:	4618      	mov	r0, r3
 8009636:	f7ff ff6d 	bl	8009514 <prvSampleTimeNow>
 800963a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2b09      	cmp	r3, #9
 8009640:	d868      	bhi.n	8009714 <prvProcessReceivedCommands+0x13c>
 8009642:	a201      	add	r2, pc, #4	; (adr r2, 8009648 <prvProcessReceivedCommands+0x70>)
 8009644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009648:	08009671 	.word	0x08009671
 800964c:	08009671 	.word	0x08009671
 8009650:	08009671 	.word	0x08009671
 8009654:	08009715 	.word	0x08009715
 8009658:	080096cb 	.word	0x080096cb
 800965c:	08009701 	.word	0x08009701
 8009660:	08009671 	.word	0x08009671
 8009664:	08009671 	.word	0x08009671
 8009668:	08009715 	.word	0x08009715
 800966c:	080096cb 	.word	0x080096cb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	18d1      	adds	r1, r2, r3
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800967c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800967e:	f7ff ff69 	bl	8009554 <prvInsertTimerInActiveList>
 8009682:	4603      	mov	r3, r0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d045      	beq.n	8009714 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800968e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009692:	69db      	ldr	r3, [r3, #28]
 8009694:	2b01      	cmp	r3, #1
 8009696:	d13d      	bne.n	8009714 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009698:	68ba      	ldr	r2, [r7, #8]
 800969a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969c:	699b      	ldr	r3, [r3, #24]
 800969e:	441a      	add	r2, r3
 80096a0:	2300      	movs	r3, #0
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	2300      	movs	r3, #0
 80096a6:	2100      	movs	r1, #0
 80096a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096aa:	f7ff fe21 	bl	80092f0 <xTimerGenericCommand>
 80096ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80096b0:	6a3b      	ldr	r3, [r7, #32]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d12e      	bne.n	8009714 <prvProcessReceivedCommands+0x13c>
 80096b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ba:	f383 8811 	msr	BASEPRI, r3
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	f3bf 8f4f 	dsb	sy
 80096c6:	61bb      	str	r3, [r7, #24]
 80096c8:	e7fe      	b.n	80096c8 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80096d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d109      	bne.n	80096ec <prvProcessReceivedCommands+0x114>
 80096d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096dc:	f383 8811 	msr	BASEPRI, r3
 80096e0:	f3bf 8f6f 	isb	sy
 80096e4:	f3bf 8f4f 	dsb	sy
 80096e8:	617b      	str	r3, [r7, #20]
 80096ea:	e7fe      	b.n	80096ea <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80096ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ee:	699a      	ldr	r2, [r3, #24]
 80096f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f2:	18d1      	adds	r1, r2, r3
 80096f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096fa:	f7ff ff2b 	bl	8009554 <prvInsertTimerInActiveList>
					break;
 80096fe:	e009      	b.n	8009714 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009702:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009706:	2b00      	cmp	r3, #0
 8009708:	d104      	bne.n	8009714 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800970a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800970c:	f000 fb78 	bl	8009e00 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009710:	e000      	b.n	8009714 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009712:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009714:	4b07      	ldr	r3, [pc, #28]	; (8009734 <prvProcessReceivedCommands+0x15c>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	1d39      	adds	r1, r7, #4
 800971a:	2200      	movs	r2, #0
 800971c:	4618      	mov	r0, r3
 800971e:	f7fe fa37 	bl	8007b90 <xQueueReceive>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	f47f af5b 	bne.w	80095e0 <prvProcessReceivedCommands+0x8>
	}
}
 800972a:	bf00      	nop
 800972c:	3730      	adds	r7, #48	; 0x30
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	20000c20 	.word	0x20000c20

08009738 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b088      	sub	sp, #32
 800973c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800973e:	e044      	b.n	80097ca <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009740:	4b2b      	ldr	r3, [pc, #172]	; (80097f0 <prvSwitchTimerLists+0xb8>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800974a:	4b29      	ldr	r3, [pc, #164]	; (80097f0 <prvSwitchTimerLists+0xb8>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	3304      	adds	r3, #4
 8009758:	4618      	mov	r0, r3
 800975a:	f7fd ff27 	bl	80075ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	69db      	ldr	r3, [r3, #28]
 800976a:	2b01      	cmp	r3, #1
 800976c:	d12d      	bne.n	80097ca <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	699b      	ldr	r3, [r3, #24]
 8009772:	693a      	ldr	r2, [r7, #16]
 8009774:	4413      	add	r3, r2
 8009776:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009778:	68ba      	ldr	r2, [r7, #8]
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	429a      	cmp	r2, r3
 800977e:	d90e      	bls.n	800979e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	68fa      	ldr	r2, [r7, #12]
 800978a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800978c:	4b18      	ldr	r3, [pc, #96]	; (80097f0 <prvSwitchTimerLists+0xb8>)
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	3304      	adds	r3, #4
 8009794:	4619      	mov	r1, r3
 8009796:	4610      	mov	r0, r2
 8009798:	f7fd fed0 	bl	800753c <vListInsert>
 800979c:	e015      	b.n	80097ca <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800979e:	2300      	movs	r3, #0
 80097a0:	9300      	str	r3, [sp, #0]
 80097a2:	2300      	movs	r3, #0
 80097a4:	693a      	ldr	r2, [r7, #16]
 80097a6:	2100      	movs	r1, #0
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f7ff fda1 	bl	80092f0 <xTimerGenericCommand>
 80097ae:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d109      	bne.n	80097ca <prvSwitchTimerLists+0x92>
 80097b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ba:	f383 8811 	msr	BASEPRI, r3
 80097be:	f3bf 8f6f 	isb	sy
 80097c2:	f3bf 8f4f 	dsb	sy
 80097c6:	603b      	str	r3, [r7, #0]
 80097c8:	e7fe      	b.n	80097c8 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097ca:	4b09      	ldr	r3, [pc, #36]	; (80097f0 <prvSwitchTimerLists+0xb8>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1b5      	bne.n	8009740 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80097d4:	4b06      	ldr	r3, [pc, #24]	; (80097f0 <prvSwitchTimerLists+0xb8>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80097da:	4b06      	ldr	r3, [pc, #24]	; (80097f4 <prvSwitchTimerLists+0xbc>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a04      	ldr	r2, [pc, #16]	; (80097f0 <prvSwitchTimerLists+0xb8>)
 80097e0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80097e2:	4a04      	ldr	r2, [pc, #16]	; (80097f4 <prvSwitchTimerLists+0xbc>)
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	6013      	str	r3, [r2, #0]
}
 80097e8:	bf00      	nop
 80097ea:	3718      	adds	r7, #24
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	20000c18 	.word	0x20000c18
 80097f4:	20000c1c 	.word	0x20000c1c

080097f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80097fe:	f000 f943 	bl	8009a88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009802:	4b15      	ldr	r3, [pc, #84]	; (8009858 <prvCheckForValidListAndQueue+0x60>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d120      	bne.n	800984c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800980a:	4814      	ldr	r0, [pc, #80]	; (800985c <prvCheckForValidListAndQueue+0x64>)
 800980c:	f7fd fe48 	bl	80074a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009810:	4813      	ldr	r0, [pc, #76]	; (8009860 <prvCheckForValidListAndQueue+0x68>)
 8009812:	f7fd fe45 	bl	80074a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009816:	4b13      	ldr	r3, [pc, #76]	; (8009864 <prvCheckForValidListAndQueue+0x6c>)
 8009818:	4a10      	ldr	r2, [pc, #64]	; (800985c <prvCheckForValidListAndQueue+0x64>)
 800981a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800981c:	4b12      	ldr	r3, [pc, #72]	; (8009868 <prvCheckForValidListAndQueue+0x70>)
 800981e:	4a10      	ldr	r2, [pc, #64]	; (8009860 <prvCheckForValidListAndQueue+0x68>)
 8009820:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009822:	2300      	movs	r3, #0
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	4b11      	ldr	r3, [pc, #68]	; (800986c <prvCheckForValidListAndQueue+0x74>)
 8009828:	4a11      	ldr	r2, [pc, #68]	; (8009870 <prvCheckForValidListAndQueue+0x78>)
 800982a:	2110      	movs	r1, #16
 800982c:	200a      	movs	r0, #10
 800982e:	f7fd ff4f 	bl	80076d0 <xQueueGenericCreateStatic>
 8009832:	4602      	mov	r2, r0
 8009834:	4b08      	ldr	r3, [pc, #32]	; (8009858 <prvCheckForValidListAndQueue+0x60>)
 8009836:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009838:	4b07      	ldr	r3, [pc, #28]	; (8009858 <prvCheckForValidListAndQueue+0x60>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d005      	beq.n	800984c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009840:	4b05      	ldr	r3, [pc, #20]	; (8009858 <prvCheckForValidListAndQueue+0x60>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	490b      	ldr	r1, [pc, #44]	; (8009874 <prvCheckForValidListAndQueue+0x7c>)
 8009846:	4618      	mov	r0, r3
 8009848:	f7fe fb8e 	bl	8007f68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800984c:	f000 f94a 	bl	8009ae4 <vPortExitCritical>
}
 8009850:	bf00      	nop
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	20000c20 	.word	0x20000c20
 800985c:	20000bf0 	.word	0x20000bf0
 8009860:	20000c04 	.word	0x20000c04
 8009864:	20000c18 	.word	0x20000c18
 8009868:	20000c1c 	.word	0x20000c1c
 800986c:	20000ccc 	.word	0x20000ccc
 8009870:	20000c2c 	.word	0x20000c2c
 8009874:	0800a368 	.word	0x0800a368

08009878 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009878:	b580      	push	{r7, lr}
 800987a:	b08a      	sub	sp, #40	; 0x28
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	607a      	str	r2, [r7, #4]
 8009884:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8009886:	f06f 0301 	mvn.w	r3, #1
 800988a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009898:	4b06      	ldr	r3, [pc, #24]	; (80098b4 <xTimerPendFunctionCallFromISR+0x3c>)
 800989a:	6818      	ldr	r0, [r3, #0]
 800989c:	f107 0114 	add.w	r1, r7, #20
 80098a0:	2300      	movs	r3, #0
 80098a2:	683a      	ldr	r2, [r7, #0]
 80098a4:	f7fe f8e0 	bl	8007a68 <xQueueGenericSendFromISR>
 80098a8:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80098aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3728      	adds	r7, #40	; 0x28
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	20000c20 	.word	0x20000c20

080098b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	3b04      	subs	r3, #4
 80098c8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80098d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	3b04      	subs	r3, #4
 80098d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	f023 0201 	bic.w	r2, r3, #1
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	3b04      	subs	r3, #4
 80098e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80098e8:	4a08      	ldr	r2, [pc, #32]	; (800990c <pxPortInitialiseStack+0x54>)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	3b14      	subs	r3, #20
 80098f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	3b20      	subs	r3, #32
 80098fe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009900:	68fb      	ldr	r3, [r7, #12]
}
 8009902:	4618      	mov	r0, r3
 8009904:	3714      	adds	r7, #20
 8009906:	46bd      	mov	sp, r7
 8009908:	bc80      	pop	{r7}
 800990a:	4770      	bx	lr
 800990c:	08009911 	.word	0x08009911

08009910 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009916:	2300      	movs	r3, #0
 8009918:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800991a:	4b10      	ldr	r3, [pc, #64]	; (800995c <prvTaskExitError+0x4c>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009922:	d009      	beq.n	8009938 <prvTaskExitError+0x28>
 8009924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009928:	f383 8811 	msr	BASEPRI, r3
 800992c:	f3bf 8f6f 	isb	sy
 8009930:	f3bf 8f4f 	dsb	sy
 8009934:	60fb      	str	r3, [r7, #12]
 8009936:	e7fe      	b.n	8009936 <prvTaskExitError+0x26>
 8009938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993c:	f383 8811 	msr	BASEPRI, r3
 8009940:	f3bf 8f6f 	isb	sy
 8009944:	f3bf 8f4f 	dsb	sy
 8009948:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800994a:	bf00      	nop
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d0fc      	beq.n	800994c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009952:	bf00      	nop
 8009954:	3714      	adds	r7, #20
 8009956:	46bd      	mov	sp, r7
 8009958:	bc80      	pop	{r7}
 800995a:	4770      	bx	lr
 800995c:	2000000c 	.word	0x2000000c

08009960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009960:	4b07      	ldr	r3, [pc, #28]	; (8009980 <pxCurrentTCBConst2>)
 8009962:	6819      	ldr	r1, [r3, #0]
 8009964:	6808      	ldr	r0, [r1, #0]
 8009966:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800996a:	f380 8809 	msr	PSP, r0
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f04f 0000 	mov.w	r0, #0
 8009976:	f380 8811 	msr	BASEPRI, r0
 800997a:	f04e 0e0d 	orr.w	lr, lr, #13
 800997e:	4770      	bx	lr

08009980 <pxCurrentTCBConst2>:
 8009980:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009984:	bf00      	nop
 8009986:	bf00      	nop

08009988 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009988:	4806      	ldr	r0, [pc, #24]	; (80099a4 <prvPortStartFirstTask+0x1c>)
 800998a:	6800      	ldr	r0, [r0, #0]
 800998c:	6800      	ldr	r0, [r0, #0]
 800998e:	f380 8808 	msr	MSP, r0
 8009992:	b662      	cpsie	i
 8009994:	b661      	cpsie	f
 8009996:	f3bf 8f4f 	dsb	sy
 800999a:	f3bf 8f6f 	isb	sy
 800999e:	df00      	svc	0
 80099a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80099a2:	bf00      	nop
 80099a4:	e000ed08 	.word	0xe000ed08

080099a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80099ae:	4b31      	ldr	r3, [pc, #196]	; (8009a74 <xPortStartScheduler+0xcc>)
 80099b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	22ff      	movs	r2, #255	; 0xff
 80099be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80099c8:	78fb      	ldrb	r3, [r7, #3]
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80099d0:	b2da      	uxtb	r2, r3
 80099d2:	4b29      	ldr	r3, [pc, #164]	; (8009a78 <xPortStartScheduler+0xd0>)
 80099d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80099d6:	4b29      	ldr	r3, [pc, #164]	; (8009a7c <xPortStartScheduler+0xd4>)
 80099d8:	2207      	movs	r2, #7
 80099da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099dc:	e009      	b.n	80099f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80099de:	4b27      	ldr	r3, [pc, #156]	; (8009a7c <xPortStartScheduler+0xd4>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	3b01      	subs	r3, #1
 80099e4:	4a25      	ldr	r2, [pc, #148]	; (8009a7c <xPortStartScheduler+0xd4>)
 80099e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80099e8:	78fb      	ldrb	r3, [r7, #3]
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	005b      	lsls	r3, r3, #1
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099f2:	78fb      	ldrb	r3, [r7, #3]
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099fa:	2b80      	cmp	r3, #128	; 0x80
 80099fc:	d0ef      	beq.n	80099de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80099fe:	4b1f      	ldr	r3, [pc, #124]	; (8009a7c <xPortStartScheduler+0xd4>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f1c3 0307 	rsb	r3, r3, #7
 8009a06:	2b04      	cmp	r3, #4
 8009a08:	d009      	beq.n	8009a1e <xPortStartScheduler+0x76>
 8009a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0e:	f383 8811 	msr	BASEPRI, r3
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	60bb      	str	r3, [r7, #8]
 8009a1c:	e7fe      	b.n	8009a1c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a1e:	4b17      	ldr	r3, [pc, #92]	; (8009a7c <xPortStartScheduler+0xd4>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	021b      	lsls	r3, r3, #8
 8009a24:	4a15      	ldr	r2, [pc, #84]	; (8009a7c <xPortStartScheduler+0xd4>)
 8009a26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a28:	4b14      	ldr	r3, [pc, #80]	; (8009a7c <xPortStartScheduler+0xd4>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a30:	4a12      	ldr	r2, [pc, #72]	; (8009a7c <xPortStartScheduler+0xd4>)
 8009a32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	b2da      	uxtb	r2, r3
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a3c:	4b10      	ldr	r3, [pc, #64]	; (8009a80 <xPortStartScheduler+0xd8>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a0f      	ldr	r2, [pc, #60]	; (8009a80 <xPortStartScheduler+0xd8>)
 8009a42:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009a46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a48:	4b0d      	ldr	r3, [pc, #52]	; (8009a80 <xPortStartScheduler+0xd8>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a0c      	ldr	r2, [pc, #48]	; (8009a80 <xPortStartScheduler+0xd8>)
 8009a4e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009a52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a54:	f000 f8b0 	bl	8009bb8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a58:	4b0a      	ldr	r3, [pc, #40]	; (8009a84 <xPortStartScheduler+0xdc>)
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a5e:	f7ff ff93 	bl	8009988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a62:	f7fe ffa5 	bl	80089b0 <vTaskSwitchContext>
	prvTaskExitError();
 8009a66:	f7ff ff53 	bl	8009910 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	e000e400 	.word	0xe000e400
 8009a78:	20000d1c 	.word	0x20000d1c
 8009a7c:	20000d20 	.word	0x20000d20
 8009a80:	e000ed20 	.word	0xe000ed20
 8009a84:	2000000c 	.word	0x2000000c

08009a88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009aa0:	4b0e      	ldr	r3, [pc, #56]	; (8009adc <vPortEnterCritical+0x54>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	4a0d      	ldr	r2, [pc, #52]	; (8009adc <vPortEnterCritical+0x54>)
 8009aa8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009aaa:	4b0c      	ldr	r3, [pc, #48]	; (8009adc <vPortEnterCritical+0x54>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d10e      	bne.n	8009ad0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ab2:	4b0b      	ldr	r3, [pc, #44]	; (8009ae0 <vPortEnterCritical+0x58>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d009      	beq.n	8009ad0 <vPortEnterCritical+0x48>
 8009abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac0:	f383 8811 	msr	BASEPRI, r3
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	603b      	str	r3, [r7, #0]
 8009ace:	e7fe      	b.n	8009ace <vPortEnterCritical+0x46>
	}
}
 8009ad0:	bf00      	nop
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bc80      	pop	{r7}
 8009ad8:	4770      	bx	lr
 8009ada:	bf00      	nop
 8009adc:	2000000c 	.word	0x2000000c
 8009ae0:	e000ed04 	.word	0xe000ed04

08009ae4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009aea:	4b10      	ldr	r3, [pc, #64]	; (8009b2c <vPortExitCritical+0x48>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d109      	bne.n	8009b06 <vPortExitCritical+0x22>
 8009af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af6:	f383 8811 	msr	BASEPRI, r3
 8009afa:	f3bf 8f6f 	isb	sy
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	607b      	str	r3, [r7, #4]
 8009b04:	e7fe      	b.n	8009b04 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009b06:	4b09      	ldr	r3, [pc, #36]	; (8009b2c <vPortExitCritical+0x48>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	4a07      	ldr	r2, [pc, #28]	; (8009b2c <vPortExitCritical+0x48>)
 8009b0e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b10:	4b06      	ldr	r3, [pc, #24]	; (8009b2c <vPortExitCritical+0x48>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d104      	bne.n	8009b22 <vPortExitCritical+0x3e>
 8009b18:	2300      	movs	r3, #0
 8009b1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b22:	bf00      	nop
 8009b24:	370c      	adds	r7, #12
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bc80      	pop	{r7}
 8009b2a:	4770      	bx	lr
 8009b2c:	2000000c 	.word	0x2000000c

08009b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b30:	f3ef 8009 	mrs	r0, PSP
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	4b0d      	ldr	r3, [pc, #52]	; (8009b70 <pxCurrentTCBConst>)
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009b40:	6010      	str	r0, [r2, #0]
 8009b42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009b46:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009b4a:	f380 8811 	msr	BASEPRI, r0
 8009b4e:	f7fe ff2f 	bl	80089b0 <vTaskSwitchContext>
 8009b52:	f04f 0000 	mov.w	r0, #0
 8009b56:	f380 8811 	msr	BASEPRI, r0
 8009b5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009b5e:	6819      	ldr	r1, [r3, #0]
 8009b60:	6808      	ldr	r0, [r1, #0]
 8009b62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009b66:	f380 8809 	msr	PSP, r0
 8009b6a:	f3bf 8f6f 	isb	sy
 8009b6e:	4770      	bx	lr

08009b70 <pxCurrentTCBConst>:
 8009b70:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b74:	bf00      	nop
 8009b76:	bf00      	nop

08009b78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b82:	f383 8811 	msr	BASEPRI, r3
 8009b86:	f3bf 8f6f 	isb	sy
 8009b8a:	f3bf 8f4f 	dsb	sy
 8009b8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b90:	f7fe fe48 	bl	8008824 <xTaskIncrementTick>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d003      	beq.n	8009ba2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b9a:	4b06      	ldr	r3, [pc, #24]	; (8009bb4 <SysTick_Handler+0x3c>)
 8009b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009bac:	bf00      	nop
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	e000ed04 	.word	0xe000ed04

08009bb8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009bb8:	b480      	push	{r7}
 8009bba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009bbc:	4b0a      	ldr	r3, [pc, #40]	; (8009be8 <vPortSetupTimerInterrupt+0x30>)
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009bc2:	4b0a      	ldr	r3, [pc, #40]	; (8009bec <vPortSetupTimerInterrupt+0x34>)
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009bc8:	4b09      	ldr	r3, [pc, #36]	; (8009bf0 <vPortSetupTimerInterrupt+0x38>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a09      	ldr	r2, [pc, #36]	; (8009bf4 <vPortSetupTimerInterrupt+0x3c>)
 8009bce:	fba2 2303 	umull	r2, r3, r2, r3
 8009bd2:	099b      	lsrs	r3, r3, #6
 8009bd4:	4a08      	ldr	r2, [pc, #32]	; (8009bf8 <vPortSetupTimerInterrupt+0x40>)
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009bda:	4b03      	ldr	r3, [pc, #12]	; (8009be8 <vPortSetupTimerInterrupt+0x30>)
 8009bdc:	2207      	movs	r2, #7
 8009bde:	601a      	str	r2, [r3, #0]
}
 8009be0:	bf00      	nop
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bc80      	pop	{r7}
 8009be6:	4770      	bx	lr
 8009be8:	e000e010 	.word	0xe000e010
 8009bec:	e000e018 	.word	0xe000e018
 8009bf0:	20000000 	.word	0x20000000
 8009bf4:	10624dd3 	.word	0x10624dd3
 8009bf8:	e000e014 	.word	0xe000e014

08009bfc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c02:	f3ef 8305 	mrs	r3, IPSR
 8009c06:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2b0f      	cmp	r3, #15
 8009c0c:	d913      	bls.n	8009c36 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009c0e:	4a15      	ldr	r2, [pc, #84]	; (8009c64 <vPortValidateInterruptPriority+0x68>)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	4413      	add	r3, r2
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c18:	4b13      	ldr	r3, [pc, #76]	; (8009c68 <vPortValidateInterruptPriority+0x6c>)
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	7afa      	ldrb	r2, [r7, #11]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d209      	bcs.n	8009c36 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	607b      	str	r3, [r7, #4]
 8009c34:	e7fe      	b.n	8009c34 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c36:	4b0d      	ldr	r3, [pc, #52]	; (8009c6c <vPortValidateInterruptPriority+0x70>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009c3e:	4b0c      	ldr	r3, [pc, #48]	; (8009c70 <vPortValidateInterruptPriority+0x74>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d909      	bls.n	8009c5a <vPortValidateInterruptPriority+0x5e>
 8009c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4a:	f383 8811 	msr	BASEPRI, r3
 8009c4e:	f3bf 8f6f 	isb	sy
 8009c52:	f3bf 8f4f 	dsb	sy
 8009c56:	603b      	str	r3, [r7, #0]
 8009c58:	e7fe      	b.n	8009c58 <vPortValidateInterruptPriority+0x5c>
	}
 8009c5a:	bf00      	nop
 8009c5c:	3714      	adds	r7, #20
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bc80      	pop	{r7}
 8009c62:	4770      	bx	lr
 8009c64:	e000e3f0 	.word	0xe000e3f0
 8009c68:	20000d1c 	.word	0x20000d1c
 8009c6c:	e000ed0c 	.word	0xe000ed0c
 8009c70:	20000d20 	.word	0x20000d20

08009c74 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b08a      	sub	sp, #40	; 0x28
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c80:	f7fe fd06 	bl	8008690 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c84:	4b59      	ldr	r3, [pc, #356]	; (8009dec <pvPortMalloc+0x178>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d101      	bne.n	8009c90 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c8c:	f000 f910 	bl	8009eb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c90:	4b57      	ldr	r3, [pc, #348]	; (8009df0 <pvPortMalloc+0x17c>)
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4013      	ands	r3, r2
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f040 808c 	bne.w	8009db6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d01c      	beq.n	8009cde <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009ca4:	2208      	movs	r2, #8
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4413      	add	r3, r2
 8009caa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f003 0307 	and.w	r3, r3, #7
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d013      	beq.n	8009cde <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f023 0307 	bic.w	r3, r3, #7
 8009cbc:	3308      	adds	r3, #8
 8009cbe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f003 0307 	and.w	r3, r3, #7
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d009      	beq.n	8009cde <pvPortMalloc+0x6a>
 8009cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cce:	f383 8811 	msr	BASEPRI, r3
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	f3bf 8f4f 	dsb	sy
 8009cda:	617b      	str	r3, [r7, #20]
 8009cdc:	e7fe      	b.n	8009cdc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d068      	beq.n	8009db6 <pvPortMalloc+0x142>
 8009ce4:	4b43      	ldr	r3, [pc, #268]	; (8009df4 <pvPortMalloc+0x180>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d863      	bhi.n	8009db6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009cee:	4b42      	ldr	r3, [pc, #264]	; (8009df8 <pvPortMalloc+0x184>)
 8009cf0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009cf2:	4b41      	ldr	r3, [pc, #260]	; (8009df8 <pvPortMalloc+0x184>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cf8:	e004      	b.n	8009d04 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d903      	bls.n	8009d16 <pvPortMalloc+0xa2>
 8009d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d1f1      	bne.n	8009cfa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009d16:	4b35      	ldr	r3, [pc, #212]	; (8009dec <pvPortMalloc+0x178>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d04a      	beq.n	8009db6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009d20:	6a3b      	ldr	r3, [r7, #32]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2208      	movs	r2, #8
 8009d26:	4413      	add	r3, r2
 8009d28:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	6a3b      	ldr	r3, [r7, #32]
 8009d30:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d34:	685a      	ldr	r2, [r3, #4]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	1ad2      	subs	r2, r2, r3
 8009d3a:	2308      	movs	r3, #8
 8009d3c:	005b      	lsls	r3, r3, #1
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d91e      	bls.n	8009d80 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4413      	add	r3, r2
 8009d48:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	f003 0307 	and.w	r3, r3, #7
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d009      	beq.n	8009d68 <pvPortMalloc+0xf4>
 8009d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d58:	f383 8811 	msr	BASEPRI, r3
 8009d5c:	f3bf 8f6f 	isb	sy
 8009d60:	f3bf 8f4f 	dsb	sy
 8009d64:	613b      	str	r3, [r7, #16]
 8009d66:	e7fe      	b.n	8009d66 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6a:	685a      	ldr	r2, [r3, #4]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	1ad2      	subs	r2, r2, r3
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d7a:	69b8      	ldr	r0, [r7, #24]
 8009d7c:	f000 f8fa 	bl	8009f74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d80:	4b1c      	ldr	r3, [pc, #112]	; (8009df4 <pvPortMalloc+0x180>)
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	1ad3      	subs	r3, r2, r3
 8009d8a:	4a1a      	ldr	r2, [pc, #104]	; (8009df4 <pvPortMalloc+0x180>)
 8009d8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d8e:	4b19      	ldr	r3, [pc, #100]	; (8009df4 <pvPortMalloc+0x180>)
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	4b1a      	ldr	r3, [pc, #104]	; (8009dfc <pvPortMalloc+0x188>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d203      	bcs.n	8009da2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d9a:	4b16      	ldr	r3, [pc, #88]	; (8009df4 <pvPortMalloc+0x180>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a17      	ldr	r2, [pc, #92]	; (8009dfc <pvPortMalloc+0x188>)
 8009da0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da4:	685a      	ldr	r2, [r3, #4]
 8009da6:	4b12      	ldr	r3, [pc, #72]	; (8009df0 <pvPortMalloc+0x17c>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	431a      	orrs	r2, r3
 8009dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db2:	2200      	movs	r2, #0
 8009db4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009db6:	f7fe fc79 	bl	80086ac <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8009dba:	69fb      	ldr	r3, [r7, #28]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d101      	bne.n	8009dc4 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8009dc0:	f7f6 ff86 	bl	8000cd0 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	f003 0307 	and.w	r3, r3, #7
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d009      	beq.n	8009de2 <pvPortMalloc+0x16e>
 8009dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	60fb      	str	r3, [r7, #12]
 8009de0:	e7fe      	b.n	8009de0 <pvPortMalloc+0x16c>
	return pvReturn;
 8009de2:	69fb      	ldr	r3, [r7, #28]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3728      	adds	r7, #40	; 0x28
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	2000352c 	.word	0x2000352c
 8009df0:	20003538 	.word	0x20003538
 8009df4:	20003530 	.word	0x20003530
 8009df8:	20003524 	.word	0x20003524
 8009dfc:	20003534 	.word	0x20003534

08009e00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b086      	sub	sp, #24
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d046      	beq.n	8009ea0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009e12:	2308      	movs	r3, #8
 8009e14:	425b      	negs	r3, r3
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	4413      	add	r3, r2
 8009e1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	685a      	ldr	r2, [r3, #4]
 8009e24:	4b20      	ldr	r3, [pc, #128]	; (8009ea8 <vPortFree+0xa8>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4013      	ands	r3, r2
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d109      	bne.n	8009e42 <vPortFree+0x42>
 8009e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e32:	f383 8811 	msr	BASEPRI, r3
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	f3bf 8f4f 	dsb	sy
 8009e3e:	60fb      	str	r3, [r7, #12]
 8009e40:	e7fe      	b.n	8009e40 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d009      	beq.n	8009e5e <vPortFree+0x5e>
 8009e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4e:	f383 8811 	msr	BASEPRI, r3
 8009e52:	f3bf 8f6f 	isb	sy
 8009e56:	f3bf 8f4f 	dsb	sy
 8009e5a:	60bb      	str	r3, [r7, #8]
 8009e5c:	e7fe      	b.n	8009e5c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	685a      	ldr	r2, [r3, #4]
 8009e62:	4b11      	ldr	r3, [pc, #68]	; (8009ea8 <vPortFree+0xa8>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4013      	ands	r3, r2
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d019      	beq.n	8009ea0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d115      	bne.n	8009ea0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	685a      	ldr	r2, [r3, #4]
 8009e78:	4b0b      	ldr	r3, [pc, #44]	; (8009ea8 <vPortFree+0xa8>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	43db      	mvns	r3, r3
 8009e7e:	401a      	ands	r2, r3
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e84:	f7fe fc04 	bl	8008690 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	685a      	ldr	r2, [r3, #4]
 8009e8c:	4b07      	ldr	r3, [pc, #28]	; (8009eac <vPortFree+0xac>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4413      	add	r3, r2
 8009e92:	4a06      	ldr	r2, [pc, #24]	; (8009eac <vPortFree+0xac>)
 8009e94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e96:	6938      	ldr	r0, [r7, #16]
 8009e98:	f000 f86c 	bl	8009f74 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009e9c:	f7fe fc06 	bl	80086ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009ea0:	bf00      	nop
 8009ea2:	3718      	adds	r7, #24
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	20003538 	.word	0x20003538
 8009eac:	20003530 	.word	0x20003530

08009eb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009eb6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009eba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009ebc:	4b27      	ldr	r3, [pc, #156]	; (8009f5c <prvHeapInit+0xac>)
 8009ebe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f003 0307 	and.w	r3, r3, #7
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00c      	beq.n	8009ee4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	3307      	adds	r3, #7
 8009ece:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f023 0307 	bic.w	r3, r3, #7
 8009ed6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ed8:	68ba      	ldr	r2, [r7, #8]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	4a1f      	ldr	r2, [pc, #124]	; (8009f5c <prvHeapInit+0xac>)
 8009ee0:	4413      	add	r3, r2
 8009ee2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ee8:	4a1d      	ldr	r2, [pc, #116]	; (8009f60 <prvHeapInit+0xb0>)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009eee:	4b1c      	ldr	r3, [pc, #112]	; (8009f60 <prvHeapInit+0xb0>)
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	68ba      	ldr	r2, [r7, #8]
 8009ef8:	4413      	add	r3, r2
 8009efa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009efc:	2208      	movs	r2, #8
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	1a9b      	subs	r3, r3, r2
 8009f02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f023 0307 	bic.w	r3, r3, #7
 8009f0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	4a15      	ldr	r2, [pc, #84]	; (8009f64 <prvHeapInit+0xb4>)
 8009f10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009f12:	4b14      	ldr	r3, [pc, #80]	; (8009f64 <prvHeapInit+0xb4>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2200      	movs	r2, #0
 8009f18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f1a:	4b12      	ldr	r3, [pc, #72]	; (8009f64 <prvHeapInit+0xb4>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	1ad2      	subs	r2, r2, r3
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f30:	4b0c      	ldr	r3, [pc, #48]	; (8009f64 <prvHeapInit+0xb4>)
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	4a0a      	ldr	r2, [pc, #40]	; (8009f68 <prvHeapInit+0xb8>)
 8009f3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	4a09      	ldr	r2, [pc, #36]	; (8009f6c <prvHeapInit+0xbc>)
 8009f46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f48:	4b09      	ldr	r3, [pc, #36]	; (8009f70 <prvHeapInit+0xc0>)
 8009f4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009f4e:	601a      	str	r2, [r3, #0]
}
 8009f50:	bf00      	nop
 8009f52:	3714      	adds	r7, #20
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bc80      	pop	{r7}
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	20000d24 	.word	0x20000d24
 8009f60:	20003524 	.word	0x20003524
 8009f64:	2000352c 	.word	0x2000352c
 8009f68:	20003534 	.word	0x20003534
 8009f6c:	20003530 	.word	0x20003530
 8009f70:	20003538 	.word	0x20003538

08009f74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f7c:	4b27      	ldr	r3, [pc, #156]	; (800a01c <prvInsertBlockIntoFreeList+0xa8>)
 8009f7e:	60fb      	str	r3, [r7, #12]
 8009f80:	e002      	b.n	8009f88 <prvInsertBlockIntoFreeList+0x14>
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	60fb      	str	r3, [r7, #12]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d8f7      	bhi.n	8009f82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d108      	bne.n	8009fb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	685a      	ldr	r2, [r3, #4]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	441a      	add	r2, r3
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	68ba      	ldr	r2, [r7, #8]
 8009fc0:	441a      	add	r2, r3
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d118      	bne.n	8009ffc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	4b14      	ldr	r3, [pc, #80]	; (800a020 <prvInsertBlockIntoFreeList+0xac>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d00d      	beq.n	8009ff2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	685a      	ldr	r2, [r3, #4]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	441a      	add	r2, r3
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	601a      	str	r2, [r3, #0]
 8009ff0:	e008      	b.n	800a004 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ff2:	4b0b      	ldr	r3, [pc, #44]	; (800a020 <prvInsertBlockIntoFreeList+0xac>)
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	601a      	str	r2, [r3, #0]
 8009ffa:	e003      	b.n	800a004 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a004:	68fa      	ldr	r2, [r7, #12]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d002      	beq.n	800a012 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a012:	bf00      	nop
 800a014:	3714      	adds	r7, #20
 800a016:	46bd      	mov	sp, r7
 800a018:	bc80      	pop	{r7}
 800a01a:	4770      	bx	lr
 800a01c:	20003524 	.word	0x20003524
 800a020:	2000352c 	.word	0x2000352c

0800a024 <__libc_init_array>:
 800a024:	b570      	push	{r4, r5, r6, lr}
 800a026:	2500      	movs	r5, #0
 800a028:	4e0c      	ldr	r6, [pc, #48]	; (800a05c <__libc_init_array+0x38>)
 800a02a:	4c0d      	ldr	r4, [pc, #52]	; (800a060 <__libc_init_array+0x3c>)
 800a02c:	1ba4      	subs	r4, r4, r6
 800a02e:	10a4      	asrs	r4, r4, #2
 800a030:	42a5      	cmp	r5, r4
 800a032:	d109      	bne.n	800a048 <__libc_init_array+0x24>
 800a034:	f000 f82e 	bl	800a094 <_init>
 800a038:	2500      	movs	r5, #0
 800a03a:	4e0a      	ldr	r6, [pc, #40]	; (800a064 <__libc_init_array+0x40>)
 800a03c:	4c0a      	ldr	r4, [pc, #40]	; (800a068 <__libc_init_array+0x44>)
 800a03e:	1ba4      	subs	r4, r4, r6
 800a040:	10a4      	asrs	r4, r4, #2
 800a042:	42a5      	cmp	r5, r4
 800a044:	d105      	bne.n	800a052 <__libc_init_array+0x2e>
 800a046:	bd70      	pop	{r4, r5, r6, pc}
 800a048:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a04c:	4798      	blx	r3
 800a04e:	3501      	adds	r5, #1
 800a050:	e7ee      	b.n	800a030 <__libc_init_array+0xc>
 800a052:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a056:	4798      	blx	r3
 800a058:	3501      	adds	r5, #1
 800a05a:	e7f2      	b.n	800a042 <__libc_init_array+0x1e>
 800a05c:	0800a45c 	.word	0x0800a45c
 800a060:	0800a45c 	.word	0x0800a45c
 800a064:	0800a45c 	.word	0x0800a45c
 800a068:	0800a460 	.word	0x0800a460

0800a06c <memcpy>:
 800a06c:	b510      	push	{r4, lr}
 800a06e:	1e43      	subs	r3, r0, #1
 800a070:	440a      	add	r2, r1
 800a072:	4291      	cmp	r1, r2
 800a074:	d100      	bne.n	800a078 <memcpy+0xc>
 800a076:	bd10      	pop	{r4, pc}
 800a078:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a07c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a080:	e7f7      	b.n	800a072 <memcpy+0x6>

0800a082 <memset>:
 800a082:	4603      	mov	r3, r0
 800a084:	4402      	add	r2, r0
 800a086:	4293      	cmp	r3, r2
 800a088:	d100      	bne.n	800a08c <memset+0xa>
 800a08a:	4770      	bx	lr
 800a08c:	f803 1b01 	strb.w	r1, [r3], #1
 800a090:	e7f9      	b.n	800a086 <memset+0x4>
	...

0800a094 <_init>:
 800a094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a096:	bf00      	nop
 800a098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a09a:	bc08      	pop	{r3}
 800a09c:	469e      	mov	lr, r3
 800a09e:	4770      	bx	lr

0800a0a0 <_fini>:
 800a0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a2:	bf00      	nop
 800a0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0a6:	bc08      	pop	{r3}
 800a0a8:	469e      	mov	lr, r3
 800a0aa:	4770      	bx	lr
