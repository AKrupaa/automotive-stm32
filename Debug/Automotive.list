
Automotive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b80  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08007cc0  08007cc0  00017cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fe0  08007fe0  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  08007fe0  08007fe0  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007fe0  08007fe0  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fe0  08007fe0  00017fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fe4  08007fe4  00017fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08007fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b88  200000d4  080080bc  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c5c  080080bc  00021c5c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ac7d  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000055dc  00000000  00000000  0004ad7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001990  00000000  00000000  00050358  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016b8  00000000  00000000  00051ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f04f  00000000  00000000  000533a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001cf15  00000000  00000000  000723ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a98b5  00000000  00000000  0008f304  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00138bb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065a0  00000000  00000000  00138c34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000d4 	.word	0x200000d4
 800015c:	00000000 	.word	0x00000000
 8000160:	08007ca8 	.word	0x08007ca8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000d8 	.word	0x200000d8
 800017c:	08007ca8 	.word	0x08007ca8

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <h_bridge_init>:
//#define RIGHT_PWM_HANDLER htim3
//#define RIGHT_PWM_CHANNEL
//#define SERVO_PWM_HANDLER htim2
//#define LEFT_PWM_HANDLER htim9
//htim3 RIGHT ENGINE
bool h_bridge_init(void) {
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
	;

//	htim2->Instance->CCR1
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80001a8:	2108      	movs	r1, #8
 80001aa:	4809      	ldr	r0, [pc, #36]	; (80001d0 <h_bridge_init+0x2c>)
 80001ac:	f003 fc6a 	bl	8003a84 <HAL_TIM_PWM_Start>
//	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 80001b0:	2104      	movs	r1, #4
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <h_bridge_init+0x30>)
 80001b4:	f003 fc66 	bl	8003a84 <HAL_TIM_PWM_Start>
	htim9.Instance->CCR2 = 0;
 80001b8:	4b06      	ldr	r3, [pc, #24]	; (80001d4 <h_bridge_init+0x30>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	2200      	movs	r2, #0
 80001be:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR3 = 0;
 80001c0:	4b03      	ldr	r3, [pc, #12]	; (80001d0 <h_bridge_init+0x2c>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	2200      	movs	r2, #0
 80001c6:	63da      	str	r2, [r3, #60]	; 0x3c
	return true;
 80001c8:	2301      	movs	r3, #1
}
 80001ca:	4618      	mov	r0, r3
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	20001b20 	.word	0x20001b20
 80001d4:	20001b5c 	.word	0x20001b5c

080001d8 <ble_init>:

/**
 *
 * @return true when initialized
 */
bool ble_init(void) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0

	//	close
	//	HAL_GPIO_WritePin(OUT_BLE_EN_GPIO_Port, OUT_BLE_EN_Pin, GPIO_PIN_SET);
	//	turn on serial communication
	//	HAL_GPIO_WritePin(OUT_BLE_EN_GPIO_Port, OUT_BLE_EN_Pin, GPIO_PIN_RESET);
	ble_turn_off_transmittion;
 80001de:	2201      	movs	r2, #1
 80001e0:	2110      	movs	r1, #16
 80001e2:	480d      	ldr	r0, [pc, #52]	; (8000218 <ble_init+0x40>)
 80001e4:	f001 feca 	bl	8001f7c <HAL_GPIO_WritePin>
	ble_turn_on_transmittion;
 80001e8:	2200      	movs	r2, #0
 80001ea:	2110      	movs	r1, #16
 80001ec:	480a      	ldr	r0, [pc, #40]	; (8000218 <ble_init+0x40>)
 80001ee:	f001 fec5 	bl	8001f7c <HAL_GPIO_WritePin>

	bool status = ble_test_command();
 80001f2:	f000 f813 	bl	800021c <ble_test_command>
 80001f6:	4603      	mov	r3, r0
 80001f8:	71fb      	strb	r3, [r7, #7]
	ble_turn_off_transmittion;
 80001fa:	2201      	movs	r2, #1
 80001fc:	2110      	movs	r1, #16
 80001fe:	4806      	ldr	r0, [pc, #24]	; (8000218 <ble_init+0x40>)
 8000200:	f001 febc 	bl	8001f7c <HAL_GPIO_WritePin>

	if (status)
 8000204:	79fb      	ldrb	r3, [r7, #7]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <ble_init+0x36>
		return true;
 800020a:	2301      	movs	r3, #1
 800020c:	e000      	b.n	8000210 <ble_init+0x38>
	else
		return false;
 800020e:	2300      	movs	r3, #0

}
 8000210:	4618      	mov	r0, r3
 8000212:	3708      	adds	r7, #8
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40020800 	.word	0x40020800

0800021c <ble_test_command>:

/**
 *
 * @return true otherwise false if not OK
 */
bool ble_test_command(void) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0

//	const char *OK = (char*) malloc(sizeof(char)*)

	char *pData = (char*) malloc(sizeof(char) * 4);
 8000222:	2004      	movs	r0, #4
 8000224:	f007 fc64 	bl	8007af0 <malloc>
 8000228:	4603      	mov	r3, r0
 800022a:	607b      	str	r3, [r7, #4]

//	char *strcpy (char* strTo, const char* strFrom);

	strcpy(pData, "AT\r");
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a2d      	ldr	r2, [pc, #180]	; (80002e4 <ble_test_command+0xc8>)
 8000230:	6810      	ldr	r0, [r2, #0]
 8000232:	6018      	str	r0, [r3, #0]

	ble_turn_on_transmittion;
 8000234:	2200      	movs	r2, #0
 8000236:	2110      	movs	r1, #16
 8000238:	482b      	ldr	r0, [pc, #172]	; (80002e8 <ble_test_command+0xcc>)
 800023a:	f001 fe9f 	bl	8001f7c <HAL_GPIO_WritePin>
	if (HAL_UART_Transmit(&huart3, (uint8_t*) pData, strlen(pData),
 800023e:	6878      	ldr	r0, [r7, #4]
 8000240:	f7ff ffa8 	bl	8000194 <strlen>
 8000244:	4603      	mov	r3, r0
 8000246:	b29a      	uxth	r2, r3
 8000248:	f04f 33ff 	mov.w	r3, #4294967295
 800024c:	6879      	ldr	r1, [r7, #4]
 800024e:	4827      	ldr	r0, [pc, #156]	; (80002ec <ble_test_command+0xd0>)
 8000250:	f004 f968 	bl	8004524 <HAL_UART_Transmit>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d009      	beq.n	800026e <ble_test_command+0x52>
	HAL_MAX_DELAY) != HAL_OK) {
		ble_turn_off_transmittion;
 800025a:	2201      	movs	r2, #1
 800025c:	2110      	movs	r1, #16
 800025e:	4822      	ldr	r0, [pc, #136]	; (80002e8 <ble_test_command+0xcc>)
 8000260:	f001 fe8c 	bl	8001f7c <HAL_GPIO_WritePin>
		free(pData);
 8000264:	6878      	ldr	r0, [r7, #4]
 8000266:	f007 fc4b 	bl	8007b00 <free>
		return false;
 800026a:	2300      	movs	r3, #0
 800026c:	e036      	b.n	80002dc <ble_test_command+0xc0>
	}

	ble_turn_off_transmittion;
 800026e:	2201      	movs	r2, #1
 8000270:	2110      	movs	r1, #16
 8000272:	481d      	ldr	r0, [pc, #116]	; (80002e8 <ble_test_command+0xcc>)
 8000274:	f001 fe82 	bl	8001f7c <HAL_GPIO_WritePin>

	ble_turn_on_transmittion;
 8000278:	2200      	movs	r2, #0
 800027a:	2110      	movs	r1, #16
 800027c:	481a      	ldr	r0, [pc, #104]	; (80002e8 <ble_test_command+0xcc>)
 800027e:	f001 fe7d 	bl	8001f7c <HAL_GPIO_WritePin>

	if (HAL_UART_Receive(&huart3, (uint8_t*) pData, strlen(pData),
 8000282:	6878      	ldr	r0, [r7, #4]
 8000284:	f7ff ff86 	bl	8000194 <strlen>
 8000288:	4603      	mov	r3, r0
 800028a:	b29a      	uxth	r2, r3
 800028c:	f04f 33ff 	mov.w	r3, #4294967295
 8000290:	6879      	ldr	r1, [r7, #4]
 8000292:	4816      	ldr	r0, [pc, #88]	; (80002ec <ble_test_command+0xd0>)
 8000294:	f004 f9df 	bl	8004656 <HAL_UART_Receive>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d009      	beq.n	80002b2 <ble_test_command+0x96>
	HAL_MAX_DELAY) != HAL_OK) {
		ble_turn_off_transmittion;
 800029e:	2201      	movs	r2, #1
 80002a0:	2110      	movs	r1, #16
 80002a2:	4811      	ldr	r0, [pc, #68]	; (80002e8 <ble_test_command+0xcc>)
 80002a4:	f001 fe6a 	bl	8001f7c <HAL_GPIO_WritePin>
		free(pData);
 80002a8:	6878      	ldr	r0, [r7, #4]
 80002aa:	f007 fc29 	bl	8007b00 <free>
		return false;
 80002ae:	2300      	movs	r3, #0
 80002b0:	e014      	b.n	80002dc <ble_test_command+0xc0>
	}

	ble_turn_off_transmittion;
 80002b2:	2201      	movs	r2, #1
 80002b4:	2110      	movs	r1, #16
 80002b6:	480c      	ldr	r0, [pc, #48]	; (80002e8 <ble_test_command+0xcc>)
 80002b8:	f001 fe60 	bl	8001f7c <HAL_GPIO_WritePin>

	if (strcmp(pData, its_OK) == 0) {
 80002bc:	490c      	ldr	r1, [pc, #48]	; (80002f0 <ble_test_command+0xd4>)
 80002be:	6878      	ldr	r0, [r7, #4]
 80002c0:	f7ff ff5e 	bl	8000180 <strcmp>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d104      	bne.n	80002d4 <ble_test_command+0xb8>
		free(pData);
 80002ca:	6878      	ldr	r0, [r7, #4]
 80002cc:	f007 fc18 	bl	8007b00 <free>
		return true;
 80002d0:	2301      	movs	r3, #1
 80002d2:	e003      	b.n	80002dc <ble_test_command+0xc0>
	} else {
		free(pData);
 80002d4:	6878      	ldr	r0, [r7, #4]
 80002d6:	f007 fc13 	bl	8007b00 <free>
		return false;
 80002da:	2300      	movs	r3, #0
	}

}
 80002dc:	4618      	mov	r0, r3
 80002de:	3708      	adds	r7, #8
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	08007cc0 	.word	0x08007cc0
 80002e8:	40020800 	.word	0x40020800
 80002ec:	20001bd4 	.word	0x20001bd4
 80002f0:	08007ef0 	.word	0x08007ef0

080002f4 <eeprom_init>:
 */

#include "eeprom.h"
#include "i2c.h"

bool eeprom_init(void) {
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
	;
	return true;
 80002f8:	2301      	movs	r3, #1
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr

08000302 <hall_init>:

/**
 *
 * @return true
 */
bool hall_init(void) {
 8000302:	b480      	push	{r7}
 8000304:	af00      	add	r7, sp, #0
	;
	return true;
 8000306:	2301      	movs	r3, #1
}
 8000308:	4618      	mov	r0, r3
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr

08000310 <magnetometer_init>:
#define MAGNETOMETR_CONTROL1_REGISTER 0x09
#define MAGNETOMETR_CONTROL2_REGISTER 0x0A
#define MAGNETOMETR_PERIOD_REGISTER 0x0B
#define MAGNETOMETR_CHIP_ID_REGISTER 0x0D

bool magnetometer_init(void) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
	uint8_t buff = 0;
 8000316:	2300      	movs	r3, #0
 8000318:	71fb      	strb	r3, [r7, #7]

	magnetometer_read(MAGNETOMETR_CHIP_ID_REGISTER, &buff, 1);
 800031a:	1dfb      	adds	r3, r7, #7
 800031c:	2201      	movs	r2, #1
 800031e:	4619      	mov	r1, r3
 8000320:	200d      	movs	r0, #13
 8000322:	f000 f85d 	bl	80003e0 <magnetometer_read>
	if (buff != 0xFF)
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	2bff      	cmp	r3, #255	; 0xff
 800032a:	d001      	beq.n	8000330 <magnetometer_init+0x20>
		return false;
 800032c:	2300      	movs	r3, #0
 800032e:	e038      	b.n	80003a2 <magnetometer_init+0x92>

	// soft restart
	magnetometer_read(MAGNETOMETR_CONTROL2_REGISTER, &buff, 1);
 8000330:	1dfb      	adds	r3, r7, #7
 8000332:	2201      	movs	r2, #1
 8000334:	4619      	mov	r1, r3
 8000336:	200a      	movs	r0, #10
 8000338:	f000 f852 	bl	80003e0 <magnetometer_read>
	buff |= (0b1 << 7); // soft restart
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000342:	b2db      	uxtb	r3, r3
 8000344:	71fb      	strb	r3, [r7, #7]
	magnetometer_write(MAGNETOMETR_CONTROL2_REGISTER, &buff, 1);
 8000346:	1dfb      	adds	r3, r7, #7
 8000348:	2201      	movs	r2, #1
 800034a:	4619      	mov	r1, r3
 800034c:	200a      	movs	r0, #10
 800034e:	f000 f82d 	bl	80003ac <magnetometer_write>

	magnetometer_read(MAGNETOMETR_CONTROL1_REGISTER, &buff, 1);
 8000352:	1dfb      	adds	r3, r7, #7
 8000354:	2201      	movs	r2, #1
 8000356:	4619      	mov	r1, r3
 8000358:	2009      	movs	r0, #9
 800035a:	f000 f841 	bl	80003e0 <magnetometer_read>
	buff |= (0b10 << 0); // Continuous mode
 800035e:	79fb      	ldrb	r3, [r7, #7]
 8000360:	f043 0302 	orr.w	r3, r3, #2
 8000364:	b2db      	uxtb	r3, r3
 8000366:	71fb      	strb	r3, [r7, #7]
	magnetometer_write(MAGNETOMETR_CONTROL1_REGISTER, &buff, 1);
 8000368:	1dfb      	adds	r3, r7, #7
 800036a:	2201      	movs	r2, #1
 800036c:	4619      	mov	r1, r3
 800036e:	2009      	movs	r0, #9
 8000370:	f000 f81c 	bl	80003ac <magnetometer_write>

	magnetometer_read(MAGNETOMETR_CONTROL2_REGISTER, &buff, 1);
 8000374:	1dfb      	adds	r3, r7, #7
 8000376:	2201      	movs	r2, #1
 8000378:	4619      	mov	r1, r3
 800037a:	200a      	movs	r0, #10
 800037c:	f000 f830 	bl	80003e0 <magnetometer_read>
	buff |= (0b1 << 0); // disable interrupt PIN
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	f043 0301 	orr.w	r3, r3, #1
 8000386:	b2db      	uxtb	r3, r3
 8000388:	71fb      	strb	r3, [r7, #7]
	buff |= (0b1 << 6); // Enable pointer roll-over function
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000390:	b2db      	uxtb	r3, r3
 8000392:	71fb      	strb	r3, [r7, #7]
	magnetometer_write(MAGNETOMETR_CONTROL2_REGISTER, &buff, 1);
 8000394:	1dfb      	adds	r3, r7, #7
 8000396:	2201      	movs	r2, #1
 8000398:	4619      	mov	r1, r3
 800039a:	200a      	movs	r0, #10
 800039c:	f000 f806 	bl	80003ac <magnetometer_write>
	return true;
 80003a0:	2301      	movs	r3, #1
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
	...

080003ac <magnetometer_write>:

bool magnetometer_write(uint8_t reg_address, uint8_t *pData, uint16_t size) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af02      	add	r7, sp, #8
 80003b2:	4603      	mov	r3, r0
 80003b4:	6039      	str	r1, [r7, #0]
 80003b6:	71fb      	strb	r3, [r7, #7]
 80003b8:	4613      	mov	r3, r2
 80003ba:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, MAGNETOMETR_DEVICE_ADDRESS, pData, size,
 80003bc:	88ba      	ldrh	r2, [r7, #4]
 80003be:	f04f 33ff 	mov.w	r3, #4294967295
 80003c2:	9300      	str	r3, [sp, #0]
 80003c4:	4613      	mov	r3, r2
 80003c6:	683a      	ldr	r2, [r7, #0]
 80003c8:	210d      	movs	r1, #13
 80003ca:	4804      	ldr	r0, [pc, #16]	; (80003dc <magnetometer_write+0x30>)
 80003cc:	f001 ff2e 	bl	800222c <HAL_I2C_Master_Transmit>
	HAL_MAX_DELAY);
	return true;
 80003d0:	2301      	movs	r3, #1
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20001a90 	.word	0x20001a90

080003e0 <magnetometer_read>:
bool magnetometer_read(uint8_t reg_address, uint8_t *buff, uint16_t size) {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af02      	add	r7, sp, #8
 80003e6:	4603      	mov	r3, r0
 80003e8:	6039      	str	r1, [r7, #0]
 80003ea:	71fb      	strb	r3, [r7, #7]
 80003ec:	4613      	mov	r3, r2
 80003ee:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Receive(&hi2c1, MAGNETOMETR_DEVICE_ADDRESS, buff, size,
 80003f0:	88ba      	ldrh	r2, [r7, #4]
 80003f2:	f04f 33ff 	mov.w	r3, #4294967295
 80003f6:	9300      	str	r3, [sp, #0]
 80003f8:	4613      	mov	r3, r2
 80003fa:	683a      	ldr	r2, [r7, #0]
 80003fc:	210d      	movs	r1, #13
 80003fe:	4804      	ldr	r0, [pc, #16]	; (8000410 <magnetometer_read+0x30>)
 8000400:	f002 f812 	bl	8002428 <HAL_I2C_Master_Receive>
	HAL_MAX_DELAY);
	return true;
 8000404:	2301      	movs	r3, #1
}
 8000406:	4618      	mov	r0, r3
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20001a90 	.word	0x20001a90

08000414 <servo_init>:
 *      Author: Arkadiusz
 */
#include "servo.h"
#include "tim.h"

bool servo_init(void) {
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000418:	2100      	movs	r1, #0
 800041a:	4805      	ldr	r0, [pc, #20]	; (8000430 <servo_init+0x1c>)
 800041c:	f003 fb32 	bl	8003a84 <HAL_TIM_PWM_Start>
	htim2.Instance->CCR1 = 0;
 8000420:	4b03      	ldr	r3, [pc, #12]	; (8000430 <servo_init+0x1c>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2200      	movs	r2, #0
 8000426:	635a      	str	r2, [r3, #52]	; 0x34
	return true;
 8000428:	2301      	movs	r3, #1
}
 800042a:	4618      	mov	r0, r3
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	20001b98 	.word	0x20001b98

08000434 <optocoupler_init>:
 *  Created on: Mar 28, 2021
 *      Author: Arkadiusz
 */

#include "optocoupler.h"
bool optocoupler_init(void) {
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
	;
	return true;
 8000438:	2301      	movs	r3, #1
}
 800043a:	4618      	mov	r0, r3
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr

08000442 <ultrasound_init>:

#define MAX_SENSOR_DISTANCE 500 // Maximum sensor distance can be as high as 500cm, no reason to wait for ping longer than sound takes to travel this distance and back. Default=500
#define US_ROUNDTRIP_CM 57      // Microseconds (uS) it takes sound to travel round-trip 1cm (2cm total), uses integer to save compiled code space. Default=57
#define US_ROUNDTRIP_IN 146     // Microseconds (uS) it takes sound to travel round-trip 1 inch (2 inches total), uses integer to save compiled code space. Defalult=146

bool ultrasound_init(void) {
 8000442:	b480      	push	{r7}
 8000444:	af00      	add	r7, sp, #0
	;
	return true;
 8000446:	2301      	movs	r3, #1
}
 8000448:	4618      	mov	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr

08000450 <device_init>:

#include "device_init.h"
#include "stdint.h"


void device_init(void) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0

	uint16_t successCnt = 0;
 8000456:	2300      	movs	r3, #0
 8000458:	80fb      	strh	r3, [r7, #6]
	uint16_t modsToInit = 0;
 800045a:	2300      	movs	r3, #0
 800045c:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < mod_N; i++) {
 800045e:	2300      	movs	r3, #0
 8000460:	807b      	strh	r3, [r7, #2]
 8000462:	e01f      	b.n	80004a4 <device_init+0x54>
		if (modules_cfg[i].active == true) {
 8000464:	887a      	ldrh	r2, [r7, #2]
 8000466:	4915      	ldr	r1, [pc, #84]	; (80004bc <device_init+0x6c>)
 8000468:	4613      	mov	r3, r2
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	4413      	add	r3, r2
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	440b      	add	r3, r1
 8000472:	3308      	adds	r3, #8
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d00e      	beq.n	8000498 <device_init+0x48>

			if (modules_cfg[i].init_function() == true) {
 800047a:	887a      	ldrh	r2, [r7, #2]
 800047c:	490f      	ldr	r1, [pc, #60]	; (80004bc <device_init+0x6c>)
 800047e:	4613      	mov	r3, r2
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	4413      	add	r3, r2
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	440b      	add	r3, r1
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4798      	blx	r3
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d002      	beq.n	8000498 <device_init+0x48>
				successCnt++;
 8000492:	88fb      	ldrh	r3, [r7, #6]
 8000494:	3301      	adds	r3, #1
 8000496:	80fb      	strh	r3, [r7, #6]
			}
		}

		modsToInit++;
 8000498:	88bb      	ldrh	r3, [r7, #4]
 800049a:	3301      	adds	r3, #1
 800049c:	80bb      	strh	r3, [r7, #4]
	for (uint16_t i = 0; i < mod_N; i++) {
 800049e:	887b      	ldrh	r3, [r7, #2]
 80004a0:	3301      	adds	r3, #1
 80004a2:	807b      	strh	r3, [r7, #2]
 80004a4:	887b      	ldrh	r3, [r7, #2]
 80004a6:	2b07      	cmp	r3, #7
 80004a8:	d9dc      	bls.n	8000464 <device_init+0x14>
	}

	if (modsToInit != successCnt) {
 80004aa:	88ba      	ldrh	r2, [r7, #4]
 80004ac:	88fb      	ldrh	r3, [r7, #6]
 80004ae:	429a      	cmp	r2, r3
 80004b0:	d000      	beq.n	80004b4 <device_init+0x64>
		// some kind of error
		while (1)
 80004b2:	e7fe      	b.n	80004b2 <device_init+0x62>
			; //TODO: call some error handler
	}

}
 80004b4:	bf00      	nop
 80004b6:	3708      	adds	r7, #8
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	20000000 	.word	0x20000000

080004c0 <rt_init>:
TaskHandle_t rt_tasks[rt_task_N];
QueueHandle_t rt_queues[rt_queue_N];
EventGroupHandle_t rt_evgroups[rt_evgroup_N];
TimerHandle_t rt_timers[rt_timer_N];

void rt_init(void) {
 80004c0:	b5b0      	push	{r4, r5, r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af02      	add	r7, sp, #8

	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 80004c6:	2300      	movs	r3, #0
 80004c8:	77fb      	strb	r3, [r7, #31]
 80004ca:	e02c      	b.n	8000526 <rt_init+0x66>
		rt_task_def_t const *def = rt_task_def + task;
 80004cc:	7ffa      	ldrb	r2, [r7, #31]
 80004ce:	4613      	mov	r3, r2
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	4413      	add	r3, r2
 80004d4:	009b      	lsls	r3, r3, #2
 80004d6:	461a      	mov	r2, r3
 80004d8:	4b47      	ldr	r3, [pc, #284]	; (80005f8 <rt_init+0x138>)
 80004da:	4413      	add	r3, r2
 80004dc:	607b      	str	r3, [r7, #4]
		TaskHandle_t *handle = rt_tasks + task;
 80004de:	7ffb      	ldrb	r3, [r7, #31]
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	4a46      	ldr	r2, [pc, #280]	; (80005fc <rt_init+0x13c>)
 80004e4:	4413      	add	r3, r2
 80004e6:	603b      	str	r3, [r7, #0]
		if (def->active) {
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	7c9b      	ldrb	r3, [r3, #18]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d014      	beq.n	800051a <rt_init+0x5a>
			if (xTaskCreate(def->pvTaskCode, def->pcName, def->usStackDepth,
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	6818      	ldr	r0, [r3, #0]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	6859      	ldr	r1, [r3, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	8a1c      	ldrh	r4, [r3, #16]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	689d      	ldr	r5, [r3, #8]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	683a      	ldr	r2, [r7, #0]
 8000506:	9201      	str	r2, [sp, #4]
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	462b      	mov	r3, r5
 800050c:	4622      	mov	r2, r4
 800050e:	f005 fc54 	bl	8005dba <xTaskCreate>
 8000512:	4603      	mov	r3, r0
 8000514:	2b01      	cmp	r3, #1
 8000516:	d003      	beq.n	8000520 <rt_init+0x60>
					def->pvParameters, def->uxPriority, handle) != pdPASS) {
//				error :-(
				while (1)
 8000518:	e7fe      	b.n	8000518 <rt_init+0x58>
					;
			}
		} else {
			*handle = 0;
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 8000520:	7ffb      	ldrb	r3, [r7, #31]
 8000522:	3301      	adds	r3, #1
 8000524:	77fb      	strb	r3, [r7, #31]
 8000526:	7ffb      	ldrb	r3, [r7, #31]
 8000528:	2b04      	cmp	r3, #4
 800052a:	d9cf      	bls.n	80004cc <rt_init+0xc>
		}
	}

	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 800052c:	2300      	movs	r3, #0
 800052e:	77bb      	strb	r3, [r7, #30]
 8000530:	e01c      	b.n	800056c <rt_init+0xac>
		rt_queue_def_t const *def = rt_queue_def + queue;
 8000532:	7fbb      	ldrb	r3, [r7, #30]
 8000534:	011b      	lsls	r3, r3, #4
 8000536:	4a32      	ldr	r2, [pc, #200]	; (8000600 <rt_init+0x140>)
 8000538:	4413      	add	r3, r2
 800053a:	60fb      	str	r3, [r7, #12]
		QueueHandle_t *handle = rt_queues + queue;
 800053c:	7fbb      	ldrb	r3, [r7, #30]
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	4a30      	ldr	r2, [pc, #192]	; (8000604 <rt_init+0x144>)
 8000542:	4413      	add	r3, r2
 8000544:	60bb      	str	r3, [r7, #8]

		if ((*handle = xQueueCreate(def->uxQueueLength, def->uxItemSize))
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	6818      	ldr	r0, [r3, #0]
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	2200      	movs	r2, #0
 8000550:	4619      	mov	r1, r3
 8000552:	f004 ffa3 	bl	800549c <xQueueGenericCreate>
 8000556:	4602      	mov	r2, r0
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d100      	bne.n	8000566 <rt_init+0xa6>
				== 0) {
			while (1)
 8000564:	e7fe      	b.n	8000564 <rt_init+0xa4>
	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 8000566:	7fbb      	ldrb	r3, [r7, #30]
 8000568:	3301      	adds	r3, #1
 800056a:	77bb      	strb	r3, [r7, #30]
 800056c:	7fbb      	ldrb	r3, [r7, #30]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d9df      	bls.n	8000532 <rt_init+0x72>
				;
		}
	}

	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 8000572:	2300      	movs	r3, #0
 8000574:	777b      	strb	r3, [r7, #29]
 8000576:	e020      	b.n	80005ba <rt_init+0xfa>
		rt_timer_def_t const *def = rt_timer_def + timer;
 8000578:	7f7b      	ldrb	r3, [r7, #29]
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	4a22      	ldr	r2, [pc, #136]	; (8000608 <rt_init+0x148>)
 800057e:	4413      	add	r3, r2
 8000580:	617b      	str	r3, [r7, #20]
		TimerHandle_t *handle = rt_timers + timer;
 8000582:	7f7b      	ldrb	r3, [r7, #29]
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	4a21      	ldr	r2, [pc, #132]	; (800060c <rt_init+0x14c>)
 8000588:	4413      	add	r3, r2
 800058a:	613b      	str	r3, [r7, #16]

		if ((*handle = xTimerCreate(def->pcTimerName, def->xTimerPeriodInTicks,
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	6818      	ldr	r0, [r3, #0]
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	6859      	ldr	r1, [r3, #4]
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	689a      	ldr	r2, [r3, #8]
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2300      	movs	r3, #0
 80005a0:	f006 fb90 	bl	8006cc4 <xTimerCreate>
 80005a4:	4602      	mov	r2, r0
 80005a6:	693b      	ldr	r3, [r7, #16]
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	693b      	ldr	r3, [r7, #16]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d100      	bne.n	80005b4 <rt_init+0xf4>
				def->uxAutoReload, NULL, def->pxCallbackFunction)) == 0)
			while (1)
 80005b2:	e7fe      	b.n	80005b2 <rt_init+0xf2>
	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 80005b4:	7f7b      	ldrb	r3, [r7, #29]
 80005b6:	3301      	adds	r3, #1
 80005b8:	777b      	strb	r3, [r7, #29]
 80005ba:	7f7b      	ldrb	r3, [r7, #29]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d9db      	bls.n	8000578 <rt_init+0xb8>
				;
	}

	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 80005c0:	2300      	movs	r3, #0
 80005c2:	773b      	strb	r3, [r7, #28]
 80005c4:	e011      	b.n	80005ea <rt_init+0x12a>
			evgroup++) {
		EventGroupHandle_t *handle = rt_evgroups + evgroup;
 80005c6:	7f3b      	ldrb	r3, [r7, #28]
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	4a11      	ldr	r2, [pc, #68]	; (8000610 <rt_init+0x150>)
 80005cc:	4413      	add	r3, r2
 80005ce:	61bb      	str	r3, [r7, #24]

		if ((*handle = xEventGroupCreate()) == 0) {
 80005d0:	f004 fc2a 	bl	8004e28 <xEventGroupCreate>
 80005d4:	4602      	mov	r2, r0
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	69bb      	ldr	r3, [r7, #24]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d100      	bne.n	80005e4 <rt_init+0x124>
			while (1)
 80005e2:	e7fe      	b.n	80005e2 <rt_init+0x122>
			evgroup++) {
 80005e4:	7f3b      	ldrb	r3, [r7, #28]
 80005e6:	3301      	adds	r3, #1
 80005e8:	773b      	strb	r3, [r7, #28]
	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 80005ea:	7f3b      	ldrb	r3, [r7, #28]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d9ea      	bls.n	80005c6 <rt_init+0x106>
				;
		}
	}

}
 80005f0:	bf00      	nop
 80005f2:	3720      	adds	r7, #32
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bdb0      	pop	{r4, r5, r7, pc}
 80005f8:	08007ef4 	.word	0x08007ef4
 80005fc:	20001a0c 	.word	0x20001a0c
 8000600:	08007f58 	.word	0x08007f58
 8000604:	20001a30 	.word	0x20001a30
 8000608:	08007f78 	.word	0x08007f78
 800060c:	20001a20 	.word	0x20001a20
 8000610:	20001a28 	.word	0x20001a28

08000614 <rt_evbitwait_any>:

uint32_t rt_evbitwait_any(rt_evgroup_t Ev) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af02      	add	r7, sp, #8
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	4a09      	ldr	r2, [pc, #36]	; (8000648 <rt_evbitwait_any+0x34>)
 8000622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000626:	60fb      	str	r3, [r7, #12]

	return xEventGroupWaitBits(Evh, 0x00FFFFFFu, pdTRUE, pdFALSE, portMAX_DELAY);
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2300      	movs	r3, #0
 8000630:	2201      	movs	r2, #1
 8000632:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000636:	68f8      	ldr	r0, [r7, #12]
 8000638:	f004 fc10 	bl	8004e5c <xEventGroupWaitBits>
 800063c:	4603      	mov	r3, r0
}
 800063e:	4618      	mov	r0, r3
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20001a28 	.word	0x20001a28

0800064c <rt_evbit_set>:

void rt_evbit_set(rt_evgroup_t Ev, uint32_t bit) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	6039      	str	r1, [r7, #0]
 8000656:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 8000658:	2201      	movs	r2, #1
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	fa02 f303 	lsl.w	r3, r2, r3
 8000660:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	4a05      	ldr	r2, [pc, #20]	; (800067c <rt_evbit_set+0x30>)
 8000666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800066a:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBits(Evh, msk);
 800066c:	68f9      	ldr	r1, [r7, #12]
 800066e:	68b8      	ldr	r0, [r7, #8]
 8000670:	f004 fcbe 	bl	8004ff0 <xEventGroupSetBits>
}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20001a28 	.word	0x20001a28

08000680 <rt_evbit_set_from_ISR>:

void rt_evbit_set_from_ISR(rt_evgroup_t Ev, uint32_t bit) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	6039      	str	r1, [r7, #0]
 800068a:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 800068c:	2201      	movs	r2, #1
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	fa02 f303 	lsl.w	r3, r2, r3
 8000694:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	4a06      	ldr	r2, [pc, #24]	; (80006b4 <rt_evbit_set_from_ISR+0x34>)
 800069a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800069e:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBitsFromISR(Evh, msk, pdFALSE);
 80006a0:	2200      	movs	r2, #0
 80006a2:	68f9      	ldr	r1, [r7, #12]
 80006a4:	68b8      	ldr	r0, [r7, #8]
 80006a6:	f004 fd5b 	bl	8005160 <xEventGroupSetBitsFromISR>
	portYIELD_FROM_ISR(pdFALSE);
}
 80006aa:	bf00      	nop
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20001a28 	.word	0x20001a28

080006b8 <task_ble>:
 *      Author: Arkadiusz
 */

//#include "task_ble.h"

void task_ble(void *pvParameters) {
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 80006c0:	e7fe      	b.n	80006c0 <task_ble+0x8>

080006c2 <task_eyes>:
 *      Author: Arkadiusz
 */

//#include "task_eyes.h"

void task_eyes(void *pvParameters) {
 80006c2:	b480      	push	{r7}
 80006c4:	b083      	sub	sp, #12
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 80006ca:	e7fe      	b.n	80006ca <task_eyes+0x8>

080006cc <task_memory>:
 *      Author: Arkadiusz
 */

//#include "task_memory.h"

void task_memory(void *pvParameters) {
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 80006d4:	e7fe      	b.n	80006d4 <task_memory+0x8>
	...

080006d8 <HAL_GPIO_EXTI_Callback>:
static uint32_t ultrasound_time = 0U;
bool ultrasound_was = false;
bool ultrasound_done = false;

// interrupt pin callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	80fb      	strh	r3, [r7, #6]
//	IRQ_ULTRASOUND_ECHO_Pin
	if (GPIO_Pin & (1 << IRQ_ULTRASOUND_ECHO_Pin)) {
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d01e      	beq.n	800072a <HAL_GPIO_EXTI_Callback+0x52>

		if (ultrasound_was == false) {
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <HAL_GPIO_EXTI_Callback+0x5c>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	f083 0301 	eor.w	r3, r3, #1
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d008      	beq.n	800070c <HAL_GPIO_EXTI_Callback+0x34>
			ultrasound_time = HAL_GetTick();
 80006fa:	f000 ff15 	bl	8001528 <HAL_GetTick>
 80006fe:	4602      	mov	r2, r0
 8000700:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <HAL_GPIO_EXTI_Callback+0x60>)
 8000702:	601a      	str	r2, [r3, #0]
			ultrasound_was = true;
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000706:	2201      	movs	r2, #1
 8000708:	701a      	strb	r2, [r3, #0]
			rt_evbit_set_from_ISR(rt_evgroup_sensors,
					evgroup_ultrasound_evbit_echo);
//			ultrasound_done = true;
		}
	}
}
 800070a:	e00e      	b.n	800072a <HAL_GPIO_EXTI_Callback+0x52>
			ultrasound_time = HAL_GetTick() - ultrasound_time;
 800070c:	f000 ff0c 	bl	8001528 <HAL_GetTick>
 8000710:	4602      	mov	r2, r0
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <HAL_GPIO_EXTI_Callback+0x60>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	4a07      	ldr	r2, [pc, #28]	; (8000738 <HAL_GPIO_EXTI_Callback+0x60>)
 800071a:	6013      	str	r3, [r2, #0]
			ultrasound_was = false;
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <HAL_GPIO_EXTI_Callback+0x5c>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
			rt_evbit_set_from_ISR(rt_evgroup_sensors,
 8000722:	2100      	movs	r1, #0
 8000724:	2000      	movs	r0, #0
 8000726:	f7ff ffab 	bl	8000680 <rt_evbit_set_from_ISR>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200000f4 	.word	0x200000f4
 8000738:	200000f0 	.word	0x200000f0

0800073c <task_sensors>:

void task_sensors(void *pvParameters) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	(void*) pvParameters;

	uint32_t evgroup = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
		// ultrasound measurment
//		ultrasound_trig();
//		if ( ultrasound_done ) {
//		}

		evgroup = rt_evbitwait_any(rt_evgroup_sensors);
 8000748:	2000      	movs	r0, #0
 800074a:	f7ff ff63 	bl	8000614 <rt_evbitwait_any>
 800074e:	60f8      	str	r0, [r7, #12]

		if (evgroup & (1 << evgroup_ultrasound_evbit_echo)) {
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	2b00      	cmp	r3, #0
 8000758:	d0f6      	beq.n	8000748 <task_sensors+0xc>
			// obsluga sensora ultradzwiekowego
			// policz odleglosc
			// na podstawie na danych zareaguj :)

			// jakis tam bit do ustawienia, np skret w lewo - uzupelnic
			rt_evbit_set(rt_evgroup_state_machine, (1 << 8));
 800075a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075e:	2001      	movs	r0, #1
 8000760:	f7ff ff74 	bl	800064c <rt_evbit_set>
		evgroup = rt_evbitwait_any(rt_evgroup_sensors);
 8000764:	e7f0      	b.n	8000748 <task_sensors+0xc>

08000766 <task_state_machine>:
 */

//#include "task_state_machine.h"
#include "runtime.h"
#define jakis_tam_bit 12
void task_state_machine(void *pvParameters) {
 8000766:	b580      	push	{r7, lr}
 8000768:	b084      	sub	sp, #16
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	uint32_t evgroup = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]

	for (;;) {

		evgroup = rt_evbitwait_any(rt_evgroup_sensors);
 8000772:	2000      	movs	r0, #0
 8000774:	f7ff ff4e 	bl	8000614 <rt_evbitwait_any>
 8000778:	60f8      	str	r0, [r7, #12]
 800077a:	e7fa      	b.n	8000772 <task_state_machine+0xc>

0800077c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 800078c:	4b25      	ldr	r3, [pc, #148]	; (8000824 <MX_ADC_Init+0xa8>)
 800078e:	4a26      	ldr	r2, [pc, #152]	; (8000828 <MX_ADC_Init+0xac>)
 8000790:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000792:	4b24      	ldr	r3, [pc, #144]	; (8000824 <MX_ADC_Init+0xa8>)
 8000794:	2200      	movs	r2, #0
 8000796:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000798:	4b22      	ldr	r3, [pc, #136]	; (8000824 <MX_ADC_Init+0xa8>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079e:	4b21      	ldr	r3, [pc, #132]	; (8000824 <MX_ADC_Init+0xa8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007a4:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <MX_ADC_Init+0xa8>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007aa:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <MX_ADC_Init+0xa8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80007b0:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <MX_ADC_Init+0xa8>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80007b6:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_ADC_Init+0xa8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80007bc:	4b19      	ldr	r3, [pc, #100]	; (8000824 <MX_ADC_Init+0xa8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_ADC_Init+0xa8>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_ADC_Init+0xa8>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_ADC_Init+0xa8>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_ADC_Init+0xa8>)
 80007da:	2210      	movs	r2, #16
 80007dc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_ADC_Init+0xa8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_ADC_Init+0xa8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <MX_ADC_Init+0xa8>)
 80007ee:	f000 fea5 	bl	800153c <HAL_ADC_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ADC_Init+0x80>
  {
    Error_Handler();
 80007f8:	f000 fa96 	bl	8000d28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007fc:	2301      	movs	r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000800:	2301      	movs	r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	4619      	mov	r1, r3
 800080c:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_ADC_Init+0xa8>)
 800080e:	f000 ffdb 	bl	80017c8 <HAL_ADC_ConfigChannel>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000818:	f000 fa86 	bl	8000d28 <Error_Handler>
  }

}
 800081c:	bf00      	nop
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20001a38 	.word	0x20001a38
 8000828:	40012400 	.word	0x40012400

0800082c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a2d      	ldr	r2, [pc, #180]	; (8000900 <HAL_ADC_MspInit+0xd4>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d154      	bne.n	80008f8 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800084e:	4b2d      	ldr	r3, [pc, #180]	; (8000904 <HAL_ADC_MspInit+0xd8>)
 8000850:	6a1b      	ldr	r3, [r3, #32]
 8000852:	4a2c      	ldr	r2, [pc, #176]	; (8000904 <HAL_ADC_MspInit+0xd8>)
 8000854:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000858:	6213      	str	r3, [r2, #32]
 800085a:	4b2a      	ldr	r3, [pc, #168]	; (8000904 <HAL_ADC_MspInit+0xd8>)
 800085c:	6a1b      	ldr	r3, [r3, #32]
 800085e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000862:	61bb      	str	r3, [r7, #24]
 8000864:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	4b27      	ldr	r3, [pc, #156]	; (8000904 <HAL_ADC_MspInit+0xd8>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	4a26      	ldr	r2, [pc, #152]	; (8000904 <HAL_ADC_MspInit+0xd8>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	61d3      	str	r3, [r2, #28]
 8000872:	4b24      	ldr	r3, [pc, #144]	; (8000904 <HAL_ADC_MspInit+0xd8>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b21      	ldr	r3, [pc, #132]	; (8000904 <HAL_ADC_MspInit+0xd8>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	4a20      	ldr	r2, [pc, #128]	; (8000904 <HAL_ADC_MspInit+0xd8>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	61d3      	str	r3, [r2, #28]
 800088a:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <HAL_ADC_MspInit+0xd8>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <HAL_ADC_MspInit+0xd8>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	4a1a      	ldr	r2, [pc, #104]	; (8000904 <HAL_ADC_MspInit+0xd8>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	61d3      	str	r3, [r2, #28]
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <HAL_ADC_MspInit+0xd8>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA7     ------> ADC_IN7
    PB15     ------> ADC_IN21 
    */
    GPIO_InitStruct.Pin = ADC_BATTERY_VOLTAGE_Pin;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008b2:	2303      	movs	r3, #3
 80008b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_BATTERY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4811      	ldr	r0, [pc, #68]	; (8000908 <HAL_ADC_MspInit+0xdc>)
 80008c2:	f001 f9cd 	bl	8001c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_PHOTO_BACK_Pin|ADC_OPTO_LEFT_Pin|ADC_PHOTO_FRONT_Pin;
 80008c6:	2386      	movs	r3, #134	; 0x86
 80008c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ca:	2303      	movs	r3, #3
 80008cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	480c      	ldr	r0, [pc, #48]	; (800090c <HAL_ADC_MspInit+0xe0>)
 80008da:	f001 f9c1 	bl	8001c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_OPTO_RIGHT_Pin;
 80008de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e4:	2303      	movs	r3, #3
 80008e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_OPTO_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4807      	ldr	r0, [pc, #28]	; (8000910 <HAL_ADC_MspInit+0xe4>)
 80008f4:	f001 f9b4 	bl	8001c60 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008f8:	bf00      	nop
 80008fa:	3730      	adds	r7, #48	; 0x30
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40012400 	.word	0x40012400
 8000904:	40023800 	.word	0x40023800
 8000908:	40020800 	.word	0x40020800
 800090c:	40020000 	.word	0x40020000
 8000910:	40020400 	.word	0x40020400

08000914 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000918:	4a05      	ldr	r2, [pc, #20]	; (8000930 <MX_FREERTOS_Init+0x1c>)
 800091a:	2100      	movs	r1, #0
 800091c:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_FREERTOS_Init+0x20>)
 800091e:	f004 f979 	bl	8004c14 <osThreadNew>
 8000922:	4602      	mov	r2, r0
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <MX_FREERTOS_Init+0x24>)
 8000926:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  rt_init();
 8000928:	f7ff fdca 	bl	80004c0 <rt_init>
  /* USER CODE END RTOS_THREADS */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	08007f98 	.word	0x08007f98
 8000934:	0800093d 	.word	0x0800093d
 8000938:	20001a8c 	.word	0x20001a8c

0800093c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000944:	2001      	movs	r0, #1
 8000946:	f004 fa0f 	bl	8004d68 <osDelay>
 800094a:	e7fb      	b.n	8000944 <StartDefaultTask+0x8>

0800094c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	4b72      	ldr	r3, [pc, #456]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	4a71      	ldr	r2, [pc, #452]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 8000968:	f043 0304 	orr.w	r3, r3, #4
 800096c:	61d3      	str	r3, [r2, #28]
 800096e:	4b6f      	ldr	r3, [pc, #444]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	f003 0304 	and.w	r3, r3, #4
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800097a:	4b6c      	ldr	r3, [pc, #432]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	4a6b      	ldr	r2, [pc, #428]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	61d3      	str	r3, [r2, #28]
 8000986:	4b69      	ldr	r3, [pc, #420]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	f003 0320 	and.w	r3, r3, #32
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b66      	ldr	r3, [pc, #408]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	4a65      	ldr	r2, [pc, #404]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	61d3      	str	r3, [r2, #28]
 800099e:	4b63      	ldr	r3, [pc, #396]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	4b60      	ldr	r3, [pc, #384]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	4a5f      	ldr	r2, [pc, #380]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	61d3      	str	r3, [r2, #28]
 80009b6:	4b5d      	ldr	r3, [pc, #372]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c2:	4b5a      	ldr	r3, [pc, #360]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	4a59      	ldr	r2, [pc, #356]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	61d3      	str	r3, [r2, #28]
 80009ce:	4b57      	ldr	r3, [pc, #348]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	f003 0308 	and.w	r3, r3, #8
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_INa_ENGINE_LEFT_Pin|OUT_INnb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_TEST_Pin 
 80009da:	2200      	movs	r2, #0
 80009dc:	f640 616e 	movw	r1, #3694	; 0xe6e
 80009e0:	4853      	ldr	r0, [pc, #332]	; (8000b30 <MX_GPIO_Init+0x1e4>)
 80009e2:	f001 facb 	bl	8001f7c <HAL_GPIO_WritePin>
                          |OUT_ULTRASOUND_TRIG_Pin|OUT_INb_RIGHT_Pin|OUT_LED1_Pin|OUT_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 80009e6:	2200      	movs	r2, #0
 80009e8:	f248 7108 	movw	r1, #34568	; 0x8708
 80009ec:	4851      	ldr	r0, [pc, #324]	; (8000b34 <MX_GPIO_Init+0x1e8>)
 80009ee:	f001 fac5 	bl	8001f7c <HAL_GPIO_WritePin>
                          |OUT_LED0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_BLE_EN_GPIO_Port, OUT_BLE_EN_Pin, GPIO_PIN_SET);
 80009f2:	2201      	movs	r2, #1
 80009f4:	2110      	movs	r1, #16
 80009f6:	484e      	ldr	r0, [pc, #312]	; (8000b30 <MX_GPIO_Init+0x1e4>)
 80009f8:	f001 fac0 	bl	8001f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12;
 80009fc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a02:	2303      	movs	r3, #3
 8000a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4847      	ldr	r0, [pc, #284]	; (8000b30 <MX_GPIO_Init+0x1e4>)
 8000a12:	f001 f925 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = OUT_INa_ENGINE_LEFT_Pin|OUT_INnb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_EN_Pin 
 8000a16:	f640 637e 	movw	r3, #3710	; 0xe7e
 8000a1a:	617b      	str	r3, [r7, #20]
                          |OUT_BLE_TEST_Pin|OUT_ULTRASOUND_TRIG_Pin|OUT_INb_RIGHT_Pin|OUT_LED1_Pin 
                          |OUT_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4840      	ldr	r0, [pc, #256]	; (8000b30 <MX_GPIO_Init+0x1e4>)
 8000a30:	f001 f916 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 8000a34:	f248 7308 	movw	r3, #34568	; 0x8708
 8000a38:	617b      	str	r3, [r7, #20]
                          |OUT_LED0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4839      	ldr	r0, [pc, #228]	; (8000b34 <MX_GPIO_Init+0x1e8>)
 8000a4e:	f001 f907 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 8000a52:	f241 0370 	movw	r3, #4208	; 0x1070
 8000a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	4833      	ldr	r0, [pc, #204]	; (8000b34 <MX_GPIO_Init+0x1e8>)
 8000a68:	f001 f8fa 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IRQ_BLE_Pin|IRQ_ULTRASOUND_ECHO_Pin;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a70:	4b31      	ldr	r3, [pc, #196]	; (8000b38 <MX_GPIO_Init+0x1ec>)
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	482f      	ldr	r0, [pc, #188]	; (8000b3c <MX_GPIO_Init+0x1f0>)
 8000a80:	f001 f8ee 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB3 PB4 
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 8000a84:	f242 333c 	movw	r3, #9020	; 0x233c
 8000a88:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	4828      	ldr	r0, [pc, #160]	; (8000b3c <MX_GPIO_Init+0x1f0>)
 8000a9a:	f001 f8e1 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_LEFT_Pin;
 8000a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_LEFT_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4822      	ldr	r0, [pc, #136]	; (8000b3c <MX_GPIO_Init+0x1f0>)
 8000ab4:	f001 f8d4 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_HALL_FRONT_Pin;
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN_HALL_FRONT_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4819      	ldr	r0, [pc, #100]	; (8000b30 <MX_GPIO_Init+0x1e4>)
 8000acc:	f001 f8c8 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_RIGHT_Pin;
 8000ad0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4813      	ldr	r0, [pc, #76]	; (8000b34 <MX_GPIO_Init+0x1e8>)
 8000ae6:	f001 f8bb 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aea:	2304      	movs	r3, #4
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aee:	2303      	movs	r3, #3
 8000af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	4810      	ldr	r0, [pc, #64]	; (8000b40 <MX_GPIO_Init+0x1f4>)
 8000afe:	f001 f8af 	bl	8001c60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2105      	movs	r1, #5
 8000b06:	2006      	movs	r0, #6
 8000b08:	f001 f87f 	bl	8001c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b0c:	2006      	movs	r0, #6
 8000b0e:	f001 f898 	bl	8001c42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2105      	movs	r1, #5
 8000b16:	2007      	movs	r0, #7
 8000b18:	f001 f877 	bl	8001c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b1c:	2007      	movs	r0, #7
 8000b1e:	f001 f890 	bl	8001c42 <HAL_NVIC_EnableIRQ>

}
 8000b22:	bf00      	nop
 8000b24:	3728      	adds	r7, #40	; 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020800 	.word	0x40020800
 8000b34:	40020000 	.word	0x40020000
 8000b38:	10110000 	.word	0x10110000
 8000b3c:	40020400 	.word	0x40020400
 8000b40:	40020c00 	.word	0x40020c00

08000b44 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b4a:	4a13      	ldr	r2, [pc, #76]	; (8000b98 <MX_I2C1_Init+0x54>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b50:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <MX_I2C1_Init+0x58>)
 8000b52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b68:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b80:	4804      	ldr	r0, [pc, #16]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b82:	f001 fa2b 	bl	8001fdc <HAL_I2C_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b8c:	f000 f8cc 	bl	8000d28 <Error_Handler>
  }

}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20001a90 	.word	0x20001a90
 8000b98:	40005400 	.word	0x40005400
 8000b9c:	000186a0 	.word	0x000186a0

08000ba0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <HAL_I2C_MspInit+0x7c>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d127      	bne.n	8000c12 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <HAL_I2C_MspInit+0x80>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	4a16      	ldr	r2, [pc, #88]	; (8000c20 <HAL_I2C_MspInit+0x80>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	61d3      	str	r3, [r2, #28]
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <HAL_I2C_MspInit+0x80>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bda:	23c0      	movs	r3, #192	; 0xc0
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bde:	2312      	movs	r3, #18
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bea:	2304      	movs	r3, #4
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480b      	ldr	r0, [pc, #44]	; (8000c24 <HAL_I2C_MspInit+0x84>)
 8000bf6:	f001 f833 	bl	8001c60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_I2C_MspInit+0x80>)
 8000bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bfe:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <HAL_I2C_MspInit+0x80>)
 8000c00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c04:	6253      	str	r3, [r2, #36]	; 0x24
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_I2C_MspInit+0x80>)
 8000c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	; 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40005400 	.word	0x40005400
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020400 	.word	0x40020400

08000c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c2c:	f000 fc51 	bl	80014d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c30:	f000 f818 	bl	8000c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c34:	f7ff fe8a 	bl	800094c <MX_GPIO_Init>
  MX_ADC_Init();
 8000c38:	f7ff fda0 	bl	800077c <MX_ADC_Init>
  MX_I2C1_Init();
 8000c3c:	f7ff ff82 	bl	8000b44 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000c40:	f000 f992 	bl	8000f68 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c44:	f000 fa02 	bl	800104c <MX_TIM3_Init>
  MX_TIM9_Init();
 8000c48:	f000 fa74 	bl	8001134 <MX_TIM9_Init>
  MX_USART3_UART_Init();
 8000c4c:	f000 fbae 	bl	80013ac <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	device_init();
 8000c50:	f7ff fbfe 	bl	8000450 <device_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000c54:	f003 ff78 	bl	8004b48 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 8000c58:	f7ff fe5c 	bl	8000914 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000c5c:	f003 ffa6 	bl	8004bac <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000c60:	e7fe      	b.n	8000c60 <main+0x38>
	...

08000c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b092      	sub	sp, #72	; 0x48
 8000c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	2234      	movs	r2, #52	; 0x34
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f006 ff57 	bl	8007b26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c78:	463b      	mov	r3, r7
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c86:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <SystemClock_Config+0x9c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000c8e:	4a1c      	ldr	r2, [pc, #112]	; (8000d00 <SystemClock_Config+0x9c>)
 8000c90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c94:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c96:	2303      	movs	r3, #3
 8000c98:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca2:	2310      	movs	r3, #16
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000caa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000cb0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000cb4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000cb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f002 f8df 	bl	8002e84 <HAL_RCC_OscConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000ccc:	f000 f82c 	bl	8000d28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f002 fbfb 	bl	80034e4 <HAL_RCC_ClockConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cf4:	f000 f818 	bl	8000d28 <Error_Handler>
  }
}
 8000cf8:	bf00      	nop
 8000cfa:	3748      	adds	r7, #72	; 0x48
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40007000 	.word	0x40007000

08000d04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d101      	bne.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d16:	f000 fbf5 	bl	8001504 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40000c00 	.word	0x40000c00

08000d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr

08000d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <HAL_MspInit+0x64>)
 8000d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3e:	4a16      	ldr	r2, [pc, #88]	; (8000d98 <HAL_MspInit+0x64>)
 8000d40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d44:	6253      	str	r3, [r2, #36]	; 0x24
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <HAL_MspInit+0x64>)
 8000d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_MspInit+0x64>)
 8000d54:	6a1b      	ldr	r3, [r3, #32]
 8000d56:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <HAL_MspInit+0x64>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6213      	str	r3, [r2, #32]
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <HAL_MspInit+0x64>)
 8000d60:	6a1b      	ldr	r3, [r3, #32]
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <HAL_MspInit+0x64>)
 8000d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <HAL_MspInit+0x64>)
 8000d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d74:	6253      	str	r3, [r2, #36]	; 0x24
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <HAL_MspInit+0x64>)
 8000d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	210f      	movs	r1, #15
 8000d86:	f06f 0001 	mvn.w	r0, #1
 8000d8a:	f000 ff3e 	bl	8001c0a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800

08000d9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	; 0x30
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8000dac:	2200      	movs	r2, #0
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	202e      	movs	r0, #46	; 0x2e
 8000db2:	f000 ff2a 	bl	8001c0a <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8000db6:	202e      	movs	r0, #46	; 0x2e
 8000db8:	f000 ff43 	bl	8001c42 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000dbc:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <HAL_InitTick+0x9c>)
 8000dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc0:	4a1d      	ldr	r2, [pc, #116]	; (8000e38 <HAL_InitTick+0x9c>)
 8000dc2:	f043 0308 	orr.w	r3, r3, #8
 8000dc6:	6253      	str	r3, [r2, #36]	; 0x24
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <HAL_InitTick+0x9c>)
 8000dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dcc:	f003 0308 	and.w	r3, r3, #8
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dd4:	f107 0210 	add.w	r2, r7, #16
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4611      	mov	r1, r2
 8000dde:	4618      	mov	r0, r3
 8000de0:	f002 fd3e 	bl	8003860 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000de4:	f002 fd14 	bl	8003810 <HAL_RCC_GetPCLK1Freq>
 8000de8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dec:	4a13      	ldr	r2, [pc, #76]	; (8000e3c <HAL_InitTick+0xa0>)
 8000dee:	fba2 2303 	umull	r2, r3, r2, r3
 8000df2:	0c9b      	lsrs	r3, r3, #18
 8000df4:	3b01      	subs	r3, #1
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <HAL_InitTick+0xa4>)
 8000dfa:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <HAL_InitTick+0xa8>)
 8000dfc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <HAL_InitTick+0xa4>)
 8000e00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e04:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000e06:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <HAL_InitTick+0xa4>)
 8000e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e0a:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <HAL_InitTick+0xa4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <HAL_InitTick+0xa4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000e18:	4809      	ldr	r0, [pc, #36]	; (8000e40 <HAL_InitTick+0xa4>)
 8000e1a:	f002 fdb1 	bl	8003980 <HAL_TIM_Base_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d104      	bne.n	8000e2e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000e24:	4806      	ldr	r0, [pc, #24]	; (8000e40 <HAL_InitTick+0xa4>)
 8000e26:	f002 fdd6 	bl	80039d6 <HAL_TIM_Base_Start_IT>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	e000      	b.n	8000e30 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3730      	adds	r7, #48	; 0x30
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	431bde83 	.word	0x431bde83
 8000e40:	20001ae4 	.word	0x20001ae4
 8000e44:	40000c00 	.word	0x40000c00

08000e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <HardFault_Handler+0x4>

08000e5a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <MemManage_Handler+0x4>

08000e60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <BusFault_Handler+0x4>

08000e66 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <UsageFault_Handler+0x4>

08000e6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f001 f895 	bl	8001fac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000e8a:	2002      	movs	r0, #2
 8000e8c:	f001 f88e 	bl	8001fac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <TIM5_IRQHandler+0x10>)
 8000e9a:	f002 fe15 	bl	8003ac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20001ae4 	.word	0x20001ae4

08000ea8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <_sbrk+0x50>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <_sbrk+0x16>
		heap_end = &end;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <_sbrk+0x50>)
 8000eba:	4a10      	ldr	r2, [pc, #64]	; (8000efc <_sbrk+0x54>)
 8000ebc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <_sbrk+0x50>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <_sbrk+0x50>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4413      	add	r3, r2
 8000ecc:	466a      	mov	r2, sp
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d907      	bls.n	8000ee2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000ed2:	f006 fde3 	bl	8007a9c <__errno>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	230c      	movs	r3, #12
 8000eda:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000edc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee0:	e006      	b.n	8000ef0 <_sbrk+0x48>
	}

	heap_end += incr;
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <_sbrk+0x50>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	4a03      	ldr	r2, [pc, #12]	; (8000ef8 <_sbrk+0x50>)
 8000eec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000eee:	68fb      	ldr	r3, [r7, #12]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200000f8 	.word	0x200000f8
 8000efc:	20001c60 	.word	0x20001c60

08000f00 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <SystemInit+0x5c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a14      	ldr	r2, [pc, #80]	; (8000f5c <SystemInit+0x5c>)
 8000f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0e:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <SystemInit+0x5c>)
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	4911      	ldr	r1, [pc, #68]	; (8000f5c <SystemInit+0x5c>)
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <SystemInit+0x60>)
 8000f18:	4013      	ands	r3, r2
 8000f1a:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <SystemInit+0x5c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <SystemInit+0x5c>)
 8000f22:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000f26:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000f2a:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <SystemInit+0x5c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <SystemInit+0x5c>)
 8000f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f36:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <SystemInit+0x5c>)
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <SystemInit+0x5c>)
 8000f3e:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000f42:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <SystemInit+0x5c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <SystemInit+0x64>)
 8000f4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f50:	609a      	str	r2, [r3, #8]
#endif
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	88ffc00c 	.word	0x88ffc00c
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f6e:	f107 0318 	add.w	r3, r7, #24
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f7c:	f107 0310 	add.w	r3, r7, #16
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f86:	463b      	mov	r3, r7
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8000f92:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <MX_TIM2_Init+0xe0>)
 8000f94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f9a:	4b2b      	ldr	r3, [pc, #172]	; (8001048 <MX_TIM2_Init+0xe0>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa0:	4b29      	ldr	r3, [pc, #164]	; (8001048 <MX_TIM2_Init+0xe0>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3200;
 8000fa6:	4b28      	ldr	r3, [pc, #160]	; (8001048 <MX_TIM2_Init+0xe0>)
 8000fa8:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000fac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fae:	4b26      	ldr	r3, [pc, #152]	; (8001048 <MX_TIM2_Init+0xe0>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fb4:	4b24      	ldr	r3, [pc, #144]	; (8001048 <MX_TIM2_Init+0xe0>)
 8000fb6:	2280      	movs	r2, #128	; 0x80
 8000fb8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fba:	4823      	ldr	r0, [pc, #140]	; (8001048 <MX_TIM2_Init+0xe0>)
 8000fbc:	f002 fce0 	bl	8003980 <HAL_TIM_Base_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000fc6:	f7ff feaf 	bl	8000d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fce:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fd0:	f107 0318 	add.w	r3, r7, #24
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481c      	ldr	r0, [pc, #112]	; (8001048 <MX_TIM2_Init+0xe0>)
 8000fd8:	f002 ff18 	bl	8003e0c <HAL_TIM_ConfigClockSource>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000fe2:	f7ff fea1 	bl	8000d28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fe6:	4818      	ldr	r0, [pc, #96]	; (8001048 <MX_TIM2_Init+0xe0>)
 8000fe8:	f002 fd18 	bl	8003a1c <HAL_TIM_PWM_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ff2:	f7ff fe99 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4619      	mov	r1, r3
 8001004:	4810      	ldr	r0, [pc, #64]	; (8001048 <MX_TIM2_Init+0xe0>)
 8001006:	f003 f9fc 	bl	8004402 <HAL_TIMEx_MasterConfigSynchronization>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001010:	f7ff fe8a 	bl	8000d28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001014:	2360      	movs	r3, #96	; 0x60
 8001016:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	2200      	movs	r2, #0
 8001028:	4619      	mov	r1, r3
 800102a:	4807      	ldr	r0, [pc, #28]	; (8001048 <MX_TIM2_Init+0xe0>)
 800102c:	f002 fe28 	bl	8003c80 <HAL_TIM_PWM_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001036:	f7ff fe77 	bl	8000d28 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800103a:	4803      	ldr	r0, [pc, #12]	; (8001048 <MX_TIM2_Init+0xe0>)
 800103c:	f000 f932 	bl	80012a4 <HAL_TIM_MspPostInit>

}
 8001040:	bf00      	nop
 8001042:	3728      	adds	r7, #40	; 0x28
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20001b98 	.word	0x20001b98

0800104c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	; 0x28
 8001050:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001052:	f107 0318 	add.w	r3, r7, #24
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800106a:	463b      	mov	r3, r7
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8001076:	4b2d      	ldr	r3, [pc, #180]	; (800112c <MX_TIM3_Init+0xe0>)
 8001078:	4a2d      	ldr	r2, [pc, #180]	; (8001130 <MX_TIM3_Init+0xe4>)
 800107a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800107c:	4b2b      	ldr	r3, [pc, #172]	; (800112c <MX_TIM3_Init+0xe0>)
 800107e:	2200      	movs	r2, #0
 8001080:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001082:	4b2a      	ldr	r3, [pc, #168]	; (800112c <MX_TIM3_Init+0xe0>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3200;
 8001088:	4b28      	ldr	r3, [pc, #160]	; (800112c <MX_TIM3_Init+0xe0>)
 800108a:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 800108e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001090:	4b26      	ldr	r3, [pc, #152]	; (800112c <MX_TIM3_Init+0xe0>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001096:	4b25      	ldr	r3, [pc, #148]	; (800112c <MX_TIM3_Init+0xe0>)
 8001098:	2280      	movs	r2, #128	; 0x80
 800109a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800109c:	4823      	ldr	r0, [pc, #140]	; (800112c <MX_TIM3_Init+0xe0>)
 800109e:	f002 fc6f 	bl	8003980 <HAL_TIM_Base_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80010a8:	f7ff fe3e 	bl	8000d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010b2:	f107 0318 	add.w	r3, r7, #24
 80010b6:	4619      	mov	r1, r3
 80010b8:	481c      	ldr	r0, [pc, #112]	; (800112c <MX_TIM3_Init+0xe0>)
 80010ba:	f002 fea7 	bl	8003e0c <HAL_TIM_ConfigClockSource>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80010c4:	f7ff fe30 	bl	8000d28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010c8:	4818      	ldr	r0, [pc, #96]	; (800112c <MX_TIM3_Init+0xe0>)
 80010ca:	f002 fca7 	bl	8003a1c <HAL_TIM_PWM_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80010d4:	f7ff fe28 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4619      	mov	r1, r3
 80010e6:	4811      	ldr	r0, [pc, #68]	; (800112c <MX_TIM3_Init+0xe0>)
 80010e8:	f003 f98b 	bl	8004402 <HAL_TIMEx_MasterConfigSynchronization>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80010f2:	f7ff fe19 	bl	8000d28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010f6:	2360      	movs	r3, #96	; 0x60
 80010f8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001106:	463b      	mov	r3, r7
 8001108:	2208      	movs	r2, #8
 800110a:	4619      	mov	r1, r3
 800110c:	4807      	ldr	r0, [pc, #28]	; (800112c <MX_TIM3_Init+0xe0>)
 800110e:	f002 fdb7 	bl	8003c80 <HAL_TIM_PWM_ConfigChannel>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001118:	f7ff fe06 	bl	8000d28 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800111c:	4803      	ldr	r0, [pc, #12]	; (800112c <MX_TIM3_Init+0xe0>)
 800111e:	f000 f8c1 	bl	80012a4 <HAL_TIM_MspPostInit>

}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20001b20 	.word	0x20001b20
 8001130:	40000400 	.word	0x40000400

08001134 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113a:	f107 0318 	add.w	r3, r7, #24
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001152:	463b      	mov	r3, r7
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 800115e:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <MX_TIM9_Init+0xe0>)
 8001160:	4a2d      	ldr	r2, [pc, #180]	; (8001218 <MX_TIM9_Init+0xe4>)
 8001162:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 32768;
 8001164:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <MX_TIM9_Init+0xe0>)
 8001166:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800116a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116c:	4b29      	ldr	r3, [pc, #164]	; (8001214 <MX_TIM9_Init+0xe0>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 19;
 8001172:	4b28      	ldr	r3, [pc, #160]	; (8001214 <MX_TIM9_Init+0xe0>)
 8001174:	2213      	movs	r2, #19
 8001176:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001178:	4b26      	ldr	r3, [pc, #152]	; (8001214 <MX_TIM9_Init+0xe0>)
 800117a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800117e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001180:	4b24      	ldr	r3, [pc, #144]	; (8001214 <MX_TIM9_Init+0xe0>)
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001186:	4823      	ldr	r0, [pc, #140]	; (8001214 <MX_TIM9_Init+0xe0>)
 8001188:	f002 fbfa 	bl	8003980 <HAL_TIM_Base_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001192:	f7ff fdc9 	bl	8000d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800119c:	f107 0318 	add.w	r3, r7, #24
 80011a0:	4619      	mov	r1, r3
 80011a2:	481c      	ldr	r0, [pc, #112]	; (8001214 <MX_TIM9_Init+0xe0>)
 80011a4:	f002 fe32 	bl	8003e0c <HAL_TIM_ConfigClockSource>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM9_Init+0x7e>
  {
    Error_Handler();
 80011ae:	f7ff fdbb 	bl	8000d28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80011b2:	4818      	ldr	r0, [pc, #96]	; (8001214 <MX_TIM9_Init+0xe0>)
 80011b4:	f002 fc32 	bl	8003a1c <HAL_TIM_PWM_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM9_Init+0x8e>
  {
    Error_Handler();
 80011be:	f7ff fdb3 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 80011ca:	f107 0310 	add.w	r3, r7, #16
 80011ce:	4619      	mov	r1, r3
 80011d0:	4810      	ldr	r0, [pc, #64]	; (8001214 <MX_TIM9_Init+0xe0>)
 80011d2:	f003 f916 	bl	8004402 <HAL_TIMEx_MasterConfigSynchronization>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM9_Init+0xac>
  {
    Error_Handler();
 80011dc:	f7ff fda4 	bl	8000d28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e0:	2360      	movs	r3, #96	; 0x60
 80011e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011f0:	463b      	mov	r3, r7
 80011f2:	2204      	movs	r2, #4
 80011f4:	4619      	mov	r1, r3
 80011f6:	4807      	ldr	r0, [pc, #28]	; (8001214 <MX_TIM9_Init+0xe0>)
 80011f8:	f002 fd42 	bl	8003c80 <HAL_TIM_PWM_ConfigChannel>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM9_Init+0xd2>
  {
    Error_Handler();
 8001202:	f7ff fd91 	bl	8000d28 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 8001206:	4803      	ldr	r0, [pc, #12]	; (8001214 <MX_TIM9_Init+0xe0>)
 8001208:	f000 f84c 	bl	80012a4 <HAL_TIM_MspPostInit>

}
 800120c:	bf00      	nop
 800120e:	3728      	adds	r7, #40	; 0x28
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20001b5c 	.word	0x20001b5c
 8001218:	40010800 	.word	0x40010800

0800121c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800121c:	b480      	push	{r7}
 800121e:	b087      	sub	sp, #28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800122c:	d10c      	bne.n	8001248 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800122e:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <HAL_TIM_Base_MspInit+0x7c>)
 8001230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001232:	4a19      	ldr	r2, [pc, #100]	; (8001298 <HAL_TIM_Base_MspInit+0x7c>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6253      	str	r3, [r2, #36]	; 0x24
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <HAL_TIM_Base_MspInit+0x7c>)
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001246:	e022      	b.n	800128e <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a13      	ldr	r2, [pc, #76]	; (800129c <HAL_TIM_Base_MspInit+0x80>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d10c      	bne.n	800126c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <HAL_TIM_Base_MspInit+0x7c>)
 8001254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001256:	4a10      	ldr	r2, [pc, #64]	; (8001298 <HAL_TIM_Base_MspInit+0x7c>)
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	6253      	str	r3, [r2, #36]	; 0x24
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <HAL_TIM_Base_MspInit+0x7c>)
 8001260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
}
 800126a:	e010      	b.n	800128e <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM9)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <HAL_TIM_Base_MspInit+0x84>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d10b      	bne.n	800128e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_TIM_Base_MspInit+0x7c>)
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	4a07      	ldr	r2, [pc, #28]	; (8001298 <HAL_TIM_Base_MspInit+0x7c>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6213      	str	r3, [r2, #32]
 8001282:	4b05      	ldr	r3, [pc, #20]	; (8001298 <HAL_TIM_Base_MspInit+0x7c>)
 8001284:	6a1b      	ldr	r3, [r3, #32]
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
}
 800128e:	bf00      	nop
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	40023800 	.word	0x40023800
 800129c:	40000400 	.word	0x40000400
 80012a0:	40010800 	.word	0x40010800

080012a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c4:	d11c      	bne.n	8001300 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	4b33      	ldr	r3, [pc, #204]	; (8001394 <HAL_TIM_MspPostInit+0xf0>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	4a32      	ldr	r2, [pc, #200]	; (8001394 <HAL_TIM_MspPostInit+0xf0>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	61d3      	str	r3, [r2, #28]
 80012d2:	4b30      	ldr	r3, [pc, #192]	; (8001394 <HAL_TIM_MspPostInit+0xf0>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0-WKUP1     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PWM_ENGINE_LEFT_Pin;
 80012de:	2301      	movs	r3, #1
 80012e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012ee:	2301      	movs	r3, #1
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_LEFT_GPIO_Port, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	4827      	ldr	r0, [pc, #156]	; (8001398 <HAL_TIM_MspPostInit+0xf4>)
 80012fa:	f000 fcb1 	bl	8001c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80012fe:	e044      	b.n	800138a <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a25      	ldr	r2, [pc, #148]	; (800139c <HAL_TIM_MspPostInit+0xf8>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d11d      	bne.n	8001346 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800130a:	4b22      	ldr	r3, [pc, #136]	; (8001394 <HAL_TIM_MspPostInit+0xf0>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	4a21      	ldr	r2, [pc, #132]	; (8001394 <HAL_TIM_MspPostInit+0xf0>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	61d3      	str	r3, [r2, #28]
 8001316:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <HAL_TIM_MspPostInit+0xf0>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_ENGINE_RIGHT_Pin;
 8001322:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001334:	2302      	movs	r3, #2
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	4818      	ldr	r0, [pc, #96]	; (80013a0 <HAL_TIM_MspPostInit+0xfc>)
 8001340:	f000 fc8e 	bl	8001c60 <HAL_GPIO_Init>
}
 8001344:	e021      	b.n	800138a <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM9)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a16      	ldr	r2, [pc, #88]	; (80013a4 <HAL_TIM_MspPostInit+0x100>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d11c      	bne.n	800138a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001350:	4b10      	ldr	r3, [pc, #64]	; (8001394 <HAL_TIM_MspPostInit+0xf0>)
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <HAL_TIM_MspPostInit+0xf0>)
 8001356:	f043 0302 	orr.w	r3, r3, #2
 800135a:	61d3      	str	r3, [r2, #28]
 800135c:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <HAL_TIM_MspPostInit+0xf0>)
 800135e:	69db      	ldr	r3, [r3, #28]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 8001368:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800136c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800137a:	2303      	movs	r3, #3
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	4808      	ldr	r0, [pc, #32]	; (80013a8 <HAL_TIM_MspPostInit+0x104>)
 8001386:	f000 fc6b 	bl	8001c60 <HAL_GPIO_Init>
}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	; 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40020000 	.word	0x40020000
 800139c:	40000400 	.word	0x40000400
 80013a0:	40020800 	.word	0x40020800
 80013a4:	40010800 	.word	0x40010800
 80013a8:	40020400 	.word	0x40020400

080013ac <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <MX_USART3_UART_Init+0x4c>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	; (80013fc <MX_USART3_UART_Init+0x50>)
 80013b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <MX_USART3_UART_Init+0x4c>)
 80013b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <MX_USART3_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <MX_USART3_UART_Init+0x4c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <MX_USART3_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <MX_USART3_UART_Init+0x4c>)
 80013d2:	220c      	movs	r2, #12
 80013d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <MX_USART3_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <MX_USART3_UART_Init+0x4c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <MX_USART3_UART_Init+0x4c>)
 80013e4:	f003 f851 	bl	800448a <HAL_UART_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80013ee:	f7ff fc9b 	bl	8000d28 <Error_Handler>
  }

}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20001bd4 	.word	0x20001bd4
 80013fc:	40004800 	.word	0x40004800

08001400 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	; 0x28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a17      	ldr	r2, [pc, #92]	; (800147c <HAL_UART_MspInit+0x7c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d128      	bne.n	8001474 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <HAL_UART_MspInit+0x80>)
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	4a16      	ldr	r2, [pc, #88]	; (8001480 <HAL_UART_MspInit+0x80>)
 8001428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800142c:	6253      	str	r3, [r2, #36]	; 0x24
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <HAL_UART_MspInit+0x80>)
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <HAL_UART_MspInit+0x80>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	4a10      	ldr	r2, [pc, #64]	; (8001480 <HAL_UART_MspInit+0x80>)
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	61d3      	str	r3, [r2, #28]
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <HAL_UART_MspInit+0x80>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001452:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001464:	2307      	movs	r3, #7
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <HAL_UART_MspInit+0x84>)
 8001470:	f000 fbf6 	bl	8001c60 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001474:	bf00      	nop
 8001476:	3728      	adds	r7, #40	; 0x28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40004800 	.word	0x40004800
 8001480:	40023800 	.word	0x40023800
 8001484:	40020400 	.word	0x40020400

08001488 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001488:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800148a:	e003      	b.n	8001494 <LoopCopyDataInit>

0800148c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800148e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001490:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001492:	3104      	adds	r1, #4

08001494 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001494:	480a      	ldr	r0, [pc, #40]	; (80014c0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001498:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800149a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800149c:	d3f6      	bcc.n	800148c <CopyDataInit>
  ldr r2, =_sbss
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80014a0:	e002      	b.n	80014a8 <LoopFillZerobss>

080014a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80014a4:	f842 3b04 	str.w	r3, [r2], #4

080014a8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80014aa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80014ac:	d3f9      	bcc.n	80014a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014ae:	f7ff fd27 	bl	8000f00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014b2:	f006 faf9 	bl	8007aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014b6:	f7ff fbb7 	bl	8000c28 <main>
  bx lr
 80014ba:	4770      	bx	lr
  ldr r3, =_sidata
 80014bc:	08007fe8 	.word	0x08007fe8
  ldr r0, =_sdata
 80014c0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80014c4:	200000d4 	.word	0x200000d4
  ldr r2, =_sbss
 80014c8:	200000d4 	.word	0x200000d4
  ldr r3, = _ebss
 80014cc:	20001c5c 	.word	0x20001c5c

080014d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014d0:	e7fe      	b.n	80014d0 <ADC1_IRQHandler>

080014d2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014dc:	2003      	movs	r0, #3
 80014de:	f000 fb89 	bl	8001bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014e2:	2000      	movs	r0, #0
 80014e4:	f7ff fc5a 	bl	8000d9c <HAL_InitTick>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d002      	beq.n	80014f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	71fb      	strb	r3, [r7, #7]
 80014f2:	e001      	b.n	80014f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014f4:	f7ff fc1e 	bl	8000d34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014f8:	79fb      	ldrb	r3, [r7, #7]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_IncTick+0x1c>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_IncTick+0x20>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4413      	add	r3, r2
 8001512:	4a03      	ldr	r2, [pc, #12]	; (8001520 <HAL_IncTick+0x1c>)
 8001514:	6013      	str	r3, [r2, #0]
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20001c14 	.word	0x20001c14
 8001524:	20000068 	.word	0x20000068

08001528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return uwTick;
 800152c:	4b02      	ldr	r3, [pc, #8]	; (8001538 <HAL_GetTick+0x10>)
 800152e:	681b      	ldr	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	20001c14 	.word	0x20001c14

0800153c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08e      	sub	sp, #56	; 0x38
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e127      	b.n	80017ac <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	2b00      	cmp	r3, #0
 8001568:	d115      	bne.n	8001596 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001578:	4b8e      	ldr	r3, [pc, #568]	; (80017b4 <HAL_ADC_Init+0x278>)
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	4a8d      	ldr	r2, [pc, #564]	; (80017b4 <HAL_ADC_Init+0x278>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6213      	str	r3, [r2, #32]
 8001584:	4b8b      	ldr	r3, [pc, #556]	; (80017b4 <HAL_ADC_Init+0x278>)
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff f94b 	bl	800082c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	f003 0310 	and.w	r3, r3, #16
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f040 80ff 	bne.w	80017a2 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015ac:	f023 0302 	bic.w	r3, r3, #2
 80015b0:	f043 0202 	orr.w	r2, r3, #2
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80015b8:	4b7f      	ldr	r3, [pc, #508]	; (80017b8 <HAL_ADC_Init+0x27c>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	497c      	ldr	r1, [pc, #496]	; (80017b8 <HAL_ADC_Init+0x27c>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80015d2:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015da:	4619      	mov	r1, r3
 80015dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e0:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	fa93 f3a3 	rbit	r3, r3
 80015e8:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	fab3 f383 	clz	r3, r3
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80015f6:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80015fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001604:	4619      	mov	r1, r3
 8001606:	2302      	movs	r3, #2
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160c:	fa93 f3a3 	rbit	r3, r3
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	fab3 f383 	clz	r3, r3
 8001618:	b2db      	uxtb	r3, r3
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800161e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001622:	4313      	orrs	r3, r2
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162a:	2b10      	cmp	r3, #16
 800162c:	d007      	beq.n	800163e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001636:	4313      	orrs	r3, r2
 8001638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800163a:	4313      	orrs	r3, r2
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001648:	2b40      	cmp	r3, #64	; 0x40
 800164a:	d04f      	beq.n	80016ec <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001652:	4313      	orrs	r3, r2
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800165e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6912      	ldr	r2, [r2, #16]
 8001664:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001668:	d003      	beq.n	8001672 <HAL_ADC_Init+0x136>
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6912      	ldr	r2, [r2, #16]
 800166e:	2a01      	cmp	r2, #1
 8001670:	d102      	bne.n	8001678 <HAL_ADC_Init+0x13c>
 8001672:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001676:	e000      	b.n	800167a <HAL_ADC_Init+0x13e>
 8001678:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800167a:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800167c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800167e:	4313      	orrs	r3, r2
 8001680:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001688:	2b01      	cmp	r3, #1
 800168a:	d125      	bne.n	80016d8 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001692:	2b00      	cmp	r3, #0
 8001694:	d114      	bne.n	80016c0 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	3b01      	subs	r3, #1
 800169c:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80016a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	fa92 f2a2 	rbit	r2, r2
 80016a8:	617a      	str	r2, [r7, #20]
  return result;
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	fab2 f282 	clz	r2, r2
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	4093      	lsls	r3, r2
 80016b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016ba:	4313      	orrs	r3, r2
 80016bc:	633b      	str	r3, [r7, #48]	; 0x30
 80016be:	e00b      	b.n	80016d8 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c4:	f043 0220 	orr.w	r2, r3, #32
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016d0:	f043 0201 	orr.w	r2, r3, #1
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	4b37      	ldr	r3, [pc, #220]	; (80017bc <HAL_ADC_Init+0x280>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80016e8:	430b      	orrs	r3, r1
 80016ea:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	4b33      	ldr	r3, [pc, #204]	; (80017c0 <HAL_ADC_Init+0x284>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80016fc:	430b      	orrs	r3, r1
 80016fe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001708:	d003      	beq.n	8001712 <HAL_ADC_Init+0x1d6>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d119      	bne.n	8001746 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001718:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001720:	3b01      	subs	r3, #1
 8001722:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001726:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	fa92 f2a2 	rbit	r2, r2
 800172e:	60fa      	str	r2, [r7, #12]
  return result;
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	fab2 f282 	clz	r2, r2
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	fa03 f202 	lsl.w	r2, r3, r2
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	631a      	str	r2, [r3, #48]	; 0x30
 8001744:	e007      	b.n	8001756 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001754:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HAL_ADC_Init+0x288>)
 800175e:	4013      	ands	r3, r2
 8001760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001762:	429a      	cmp	r2, r3
 8001764:	d10b      	bne.n	800177e <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001770:	f023 0303 	bic.w	r3, r3, #3
 8001774:	f043 0201 	orr.w	r2, r3, #1
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	64da      	str	r2, [r3, #76]	; 0x4c
 800177c:	e014      	b.n	80017a8 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	f023 0312 	bic.w	r3, r3, #18
 8001786:	f043 0210 	orr.w	r2, r3, #16
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001792:	f043 0201 	orr.w	r2, r3, #1
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80017a0:	e002      	b.n	80017a8 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3738      	adds	r7, #56	; 0x38
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40012700 	.word	0x40012700
 80017bc:	fcfc16ff 	.word	0xfcfc16ff
 80017c0:	c0fff189 	.word	0xc0fff189
 80017c4:	bf80fffe 	.word	0xbf80fffe

080017c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d101      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x20>
 80017e4:	2302      	movs	r3, #2
 80017e6:	e14f      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x2c0>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b06      	cmp	r3, #6
 80017f6:	d81c      	bhi.n	8001832 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	3b05      	subs	r3, #5
 800180a:	221f      	movs	r2, #31
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	4019      	ands	r1, r3
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	6818      	ldr	r0, [r3, #0]
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	3b05      	subs	r3, #5
 8001824:	fa00 f203 	lsl.w	r2, r0, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	641a      	str	r2, [r3, #64]	; 0x40
 8001830:	e07e      	b.n	8001930 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b0c      	cmp	r3, #12
 8001838:	d81c      	bhi.n	8001874 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	3b23      	subs	r3, #35	; 0x23
 800184c:	221f      	movs	r2, #31
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	4019      	ands	r1, r3
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	6818      	ldr	r0, [r3, #0]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	3b23      	subs	r3, #35	; 0x23
 8001866:	fa00 f203 	lsl.w	r2, r0, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	63da      	str	r2, [r3, #60]	; 0x3c
 8001872:	e05d      	b.n	8001930 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b12      	cmp	r3, #18
 800187a:	d81c      	bhi.n	80018b6 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	3b41      	subs	r3, #65	; 0x41
 800188e:	221f      	movs	r2, #31
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	4019      	ands	r1, r3
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	3b41      	subs	r3, #65	; 0x41
 80018a8:	fa00 f203 	lsl.w	r2, r0, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	639a      	str	r2, [r3, #56]	; 0x38
 80018b4:	e03c      	b.n	8001930 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b18      	cmp	r3, #24
 80018bc:	d81c      	bhi.n	80018f8 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	3b5f      	subs	r3, #95	; 0x5f
 80018d0:	221f      	movs	r2, #31
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	4019      	ands	r1, r3
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	3b5f      	subs	r3, #95	; 0x5f
 80018ea:	fa00 f203 	lsl.w	r2, r0, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	635a      	str	r2, [r3, #52]	; 0x34
 80018f6:	e01b      	b.n	8001930 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	3b7d      	subs	r3, #125	; 0x7d
 800190a:	221f      	movs	r2, #31
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	4019      	ands	r1, r3
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	6818      	ldr	r0, [r3, #0]
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	3b7d      	subs	r3, #125	; 0x7d
 8001924:	fa00 f203 	lsl.w	r2, r0, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b09      	cmp	r3, #9
 8001936:	d81a      	bhi.n	800196e <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6959      	ldr	r1, [r3, #20]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	2207      	movs	r2, #7
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	4019      	ands	r1, r3
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	6898      	ldr	r0, [r3, #8]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4613      	mov	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4413      	add	r3, r2
 8001960:	fa00 f203 	lsl.w	r2, r0, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	615a      	str	r2, [r3, #20]
 800196c:	e05d      	b.n	8001a2a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b13      	cmp	r3, #19
 8001974:	d81c      	bhi.n	80019b0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6919      	ldr	r1, [r3, #16]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4613      	mov	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	3b1e      	subs	r3, #30
 8001988:	2207      	movs	r2, #7
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	4019      	ands	r1, r3
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	6898      	ldr	r0, [r3, #8]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4613      	mov	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4413      	add	r3, r2
 80019a0:	3b1e      	subs	r3, #30
 80019a2:	fa00 f203 	lsl.w	r2, r0, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	430a      	orrs	r2, r1
 80019ac:	611a      	str	r2, [r3, #16]
 80019ae:	e03c      	b.n	8001a2a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b1d      	cmp	r3, #29
 80019b6:	d81c      	bhi.n	80019f2 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68d9      	ldr	r1, [r3, #12]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4613      	mov	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4413      	add	r3, r2
 80019c8:	3b3c      	subs	r3, #60	; 0x3c
 80019ca:	2207      	movs	r2, #7
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	4019      	ands	r1, r3
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	6898      	ldr	r0, [r3, #8]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4613      	mov	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4413      	add	r3, r2
 80019e2:	3b3c      	subs	r3, #60	; 0x3c
 80019e4:	fa00 f203 	lsl.w	r2, r0, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	60da      	str	r2, [r3, #12]
 80019f0:	e01b      	b.n	8001a2a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4613      	mov	r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4413      	add	r3, r2
 8001a02:	3b5a      	subs	r3, #90	; 0x5a
 8001a04:	2207      	movs	r2, #7
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	4019      	ands	r1, r3
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	6898      	ldr	r0, [r3, #8]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	4613      	mov	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3b5a      	subs	r3, #90	; 0x5a
 8001a1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b10      	cmp	r3, #16
 8001a30:	d003      	beq.n	8001a3a <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a36:	2b11      	cmp	r3, #17
 8001a38:	d121      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001a3a:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <HAL_ADC_ConfigChannel+0x2cc>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d11b      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001a46:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <HAL_ADC_ConfigChannel+0x2cc>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <HAL_ADC_ConfigChannel+0x2cc>)
 8001a4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a50:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b10      	cmp	r3, #16
 8001a58:	d111      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <HAL_ADC_ConfigChannel+0x2d0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a0f      	ldr	r2, [pc, #60]	; (8001a9c <HAL_ADC_ConfigChannel+0x2d4>)
 8001a60:	fba2 2303 	umull	r2, r3, r2, r3
 8001a64:	0c9a      	lsrs	r2, r3, #18
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001a70:	e002      	b.n	8001a78 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f9      	bne.n	8001a72 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40012700 	.word	0x40012700
 8001a98:	20000060 	.word	0x20000060
 8001a9c:	431bde83 	.word	0x431bde83

08001aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001abc:	4013      	ands	r3, r2
 8001abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ad2:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	60d3      	str	r3, [r2, #12]
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <__NVIC_GetPriorityGrouping+0x18>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	0a1b      	lsrs	r3, r3, #8
 8001af2:	f003 0307 	and.w	r3, r3, #7
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	db0b      	blt.n	8001b2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	f003 021f 	and.w	r2, r3, #31
 8001b1c:	4906      	ldr	r1, [pc, #24]	; (8001b38 <__NVIC_EnableIRQ+0x34>)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	095b      	lsrs	r3, r3, #5
 8001b24:	2001      	movs	r0, #1
 8001b26:	fa00 f202 	lsl.w	r2, r0, r2
 8001b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	e000e100 	.word	0xe000e100

08001b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	6039      	str	r1, [r7, #0]
 8001b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	db0a      	blt.n	8001b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	490c      	ldr	r1, [pc, #48]	; (8001b88 <__NVIC_SetPriority+0x4c>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	0112      	lsls	r2, r2, #4
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	440b      	add	r3, r1
 8001b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b64:	e00a      	b.n	8001b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4908      	ldr	r1, [pc, #32]	; (8001b8c <__NVIC_SetPriority+0x50>)
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	3b04      	subs	r3, #4
 8001b74:	0112      	lsls	r2, r2, #4
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	440b      	add	r3, r1
 8001b7a:	761a      	strb	r2, [r3, #24]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000e100 	.word	0xe000e100
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b089      	sub	sp, #36	; 0x24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f1c3 0307 	rsb	r3, r3, #7
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	bf28      	it	cs
 8001bae:	2304      	movcs	r3, #4
 8001bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d902      	bls.n	8001bc0 <NVIC_EncodePriority+0x30>
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3b03      	subs	r3, #3
 8001bbe:	e000      	b.n	8001bc2 <NVIC_EncodePriority+0x32>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fa01 f303 	lsl.w	r3, r1, r3
 8001be2:	43d9      	mvns	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	4313      	orrs	r3, r2
         );
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3724      	adds	r7, #36	; 0x24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff ff4f 	bl	8001aa0 <__NVIC_SetPriorityGrouping>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b086      	sub	sp, #24
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c1c:	f7ff ff64 	bl	8001ae8 <__NVIC_GetPriorityGrouping>
 8001c20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	6978      	ldr	r0, [r7, #20]
 8001c28:	f7ff ffb2 	bl	8001b90 <NVIC_EncodePriority>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c32:	4611      	mov	r1, r2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff81 	bl	8001b3c <__NVIC_SetPriority>
}
 8001c3a:	bf00      	nop
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff57 	bl	8001b04 <__NVIC_EnableIRQ>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001c76:	e160      	b.n	8001f3a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	4013      	ands	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 8152 	beq.w	8001f34 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x40>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b12      	cmp	r3, #18
 8001c9e:	d123      	bne.n	8001ce8 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	08da      	lsrs	r2, r3, #3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3208      	adds	r2, #8
 8001ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	220f      	movs	r2, #15
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	08da      	lsrs	r2, r3, #3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3208      	adds	r2, #8
 8001ce2:	6939      	ldr	r1, [r7, #16]
 8001ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 0203 	and.w	r2, r3, #3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d00b      	beq.n	8001d3c <HAL_GPIO_Init+0xdc>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d007      	beq.n	8001d3c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d30:	2b11      	cmp	r3, #17
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b12      	cmp	r3, #18
 8001d3a:	d130      	bne.n	8001d9e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001d72:	2201      	movs	r2, #1
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	091b      	lsrs	r3, r3, #4
 8001d88:	f003 0201 	and.w	r2, r3, #1
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	2203      	movs	r2, #3
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 80ac 	beq.w	8001f34 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ddc:	4b5d      	ldr	r3, [pc, #372]	; (8001f54 <HAL_GPIO_Init+0x2f4>)
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	4a5c      	ldr	r2, [pc, #368]	; (8001f54 <HAL_GPIO_Init+0x2f4>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6213      	str	r3, [r2, #32]
 8001de8:	4b5a      	ldr	r3, [pc, #360]	; (8001f54 <HAL_GPIO_Init+0x2f4>)
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8001df4:	4a58      	ldr	r2, [pc, #352]	; (8001f58 <HAL_GPIO_Init+0x2f8>)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	089b      	lsrs	r3, r3, #2
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	220f      	movs	r2, #15
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a50      	ldr	r2, [pc, #320]	; (8001f5c <HAL_GPIO_Init+0x2fc>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d025      	beq.n	8001e6c <HAL_GPIO_Init+0x20c>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a4f      	ldr	r2, [pc, #316]	; (8001f60 <HAL_GPIO_Init+0x300>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d01f      	beq.n	8001e68 <HAL_GPIO_Init+0x208>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a4e      	ldr	r2, [pc, #312]	; (8001f64 <HAL_GPIO_Init+0x304>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d019      	beq.n	8001e64 <HAL_GPIO_Init+0x204>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a4d      	ldr	r2, [pc, #308]	; (8001f68 <HAL_GPIO_Init+0x308>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d013      	beq.n	8001e60 <HAL_GPIO_Init+0x200>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a4c      	ldr	r2, [pc, #304]	; (8001f6c <HAL_GPIO_Init+0x30c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d00d      	beq.n	8001e5c <HAL_GPIO_Init+0x1fc>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a4b      	ldr	r2, [pc, #300]	; (8001f70 <HAL_GPIO_Init+0x310>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d007      	beq.n	8001e58 <HAL_GPIO_Init+0x1f8>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a4a      	ldr	r2, [pc, #296]	; (8001f74 <HAL_GPIO_Init+0x314>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d101      	bne.n	8001e54 <HAL_GPIO_Init+0x1f4>
 8001e50:	2306      	movs	r3, #6
 8001e52:	e00c      	b.n	8001e6e <HAL_GPIO_Init+0x20e>
 8001e54:	2307      	movs	r3, #7
 8001e56:	e00a      	b.n	8001e6e <HAL_GPIO_Init+0x20e>
 8001e58:	2305      	movs	r3, #5
 8001e5a:	e008      	b.n	8001e6e <HAL_GPIO_Init+0x20e>
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	e006      	b.n	8001e6e <HAL_GPIO_Init+0x20e>
 8001e60:	2303      	movs	r3, #3
 8001e62:	e004      	b.n	8001e6e <HAL_GPIO_Init+0x20e>
 8001e64:	2302      	movs	r3, #2
 8001e66:	e002      	b.n	8001e6e <HAL_GPIO_Init+0x20e>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <HAL_GPIO_Init+0x20e>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	f002 0203 	and.w	r2, r2, #3
 8001e74:	0092      	lsls	r2, r2, #2
 8001e76:	4093      	lsls	r3, r2
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e7e:	4936      	ldr	r1, [pc, #216]	; (8001f58 <HAL_GPIO_Init+0x2f8>)
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	089b      	lsrs	r3, r3, #2
 8001e84:	3302      	adds	r3, #2
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e8c:	4b3a      	ldr	r3, [pc, #232]	; (8001f78 <HAL_GPIO_Init+0x318>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001eb0:	4a31      	ldr	r2, [pc, #196]	; (8001f78 <HAL_GPIO_Init+0x318>)
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001eb6:	4b30      	ldr	r3, [pc, #192]	; (8001f78 <HAL_GPIO_Init+0x318>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001eda:	4a27      	ldr	r2, [pc, #156]	; (8001f78 <HAL_GPIO_Init+0x318>)
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ee0:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_GPIO_Init+0x318>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f04:	4a1c      	ldr	r2, [pc, #112]	; (8001f78 <HAL_GPIO_Init+0x318>)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f0a:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <HAL_GPIO_Init+0x318>)
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	43db      	mvns	r3, r3
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f2e:	4a12      	ldr	r2, [pc, #72]	; (8001f78 <HAL_GPIO_Init+0x318>)
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	3301      	adds	r3, #1
 8001f38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f47f ae97 	bne.w	8001c78 <HAL_GPIO_Init+0x18>
  } 
}
 8001f4a:	bf00      	nop
 8001f4c:	371c      	adds	r7, #28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40010000 	.word	0x40010000
 8001f5c:	40020000 	.word	0x40020000
 8001f60:	40020400 	.word	0x40020400
 8001f64:	40020800 	.word	0x40020800
 8001f68:	40020c00 	.word	0x40020c00
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40021400 	.word	0x40021400
 8001f74:	40021800 	.word	0x40021800
 8001f78:	40010400 	.word	0x40010400

08001f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	807b      	strh	r3, [r7, #2]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f8c:	787b      	ldrb	r3, [r7, #1]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f92:	887a      	ldrh	r2, [r7, #2]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001f98:	e003      	b.n	8001fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001f9a:	887b      	ldrh	r3, [r7, #2]
 8001f9c:	041a      	lsls	r2, r3, #16
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	619a      	str	r2, [r3, #24]
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fb8:	695a      	ldr	r2, [r3, #20]
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d006      	beq.n	8001fd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fc2:	4a05      	ldr	r2, [pc, #20]	; (8001fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fc8:	88fb      	ldrh	r3, [r7, #6]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fb84 	bl	80006d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40010400 	.word	0x40010400

08001fdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e10f      	b.n	800220e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d106      	bne.n	8002008 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7fe fdcc 	bl	8000ba0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2224      	movs	r2, #36	; 0x24
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0201 	bic.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002020:	f001 fbf6 	bl	8003810 <HAL_RCC_GetPCLK1Freq>
 8002024:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	4a7b      	ldr	r2, [pc, #492]	; (8002218 <HAL_I2C_Init+0x23c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d807      	bhi.n	8002040 <HAL_I2C_Init+0x64>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4a7a      	ldr	r2, [pc, #488]	; (800221c <HAL_I2C_Init+0x240>)
 8002034:	4293      	cmp	r3, r2
 8002036:	bf94      	ite	ls
 8002038:	2301      	movls	r3, #1
 800203a:	2300      	movhi	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	e006      	b.n	800204e <HAL_I2C_Init+0x72>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4a77      	ldr	r2, [pc, #476]	; (8002220 <HAL_I2C_Init+0x244>)
 8002044:	4293      	cmp	r3, r2
 8002046:	bf94      	ite	ls
 8002048:	2301      	movls	r3, #1
 800204a:	2300      	movhi	r3, #0
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e0db      	b.n	800220e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4a72      	ldr	r2, [pc, #456]	; (8002224 <HAL_I2C_Init+0x248>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	0c9b      	lsrs	r3, r3, #18
 8002060:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	430a      	orrs	r2, r1
 8002074:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4a64      	ldr	r2, [pc, #400]	; (8002218 <HAL_I2C_Init+0x23c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d802      	bhi.n	8002090 <HAL_I2C_Init+0xb4>
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	3301      	adds	r3, #1
 800208e:	e009      	b.n	80020a4 <HAL_I2C_Init+0xc8>
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002096:	fb02 f303 	mul.w	r3, r2, r3
 800209a:	4a63      	ldr	r2, [pc, #396]	; (8002228 <HAL_I2C_Init+0x24c>)
 800209c:	fba2 2303 	umull	r2, r3, r2, r3
 80020a0:	099b      	lsrs	r3, r3, #6
 80020a2:	3301      	adds	r3, #1
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	430b      	orrs	r3, r1
 80020aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4956      	ldr	r1, [pc, #344]	; (8002218 <HAL_I2C_Init+0x23c>)
 80020c0:	428b      	cmp	r3, r1
 80020c2:	d80d      	bhi.n	80020e0 <HAL_I2C_Init+0x104>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1e59      	subs	r1, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80020d2:	3301      	adds	r3, #1
 80020d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d8:	2b04      	cmp	r3, #4
 80020da:	bf38      	it	cc
 80020dc:	2304      	movcc	r3, #4
 80020de:	e04f      	b.n	8002180 <HAL_I2C_Init+0x1a4>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d111      	bne.n	800210c <HAL_I2C_Init+0x130>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	1e58      	subs	r0, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6859      	ldr	r1, [r3, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	440b      	add	r3, r1
 80020f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020fa:	3301      	adds	r3, #1
 80020fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf0c      	ite	eq
 8002104:	2301      	moveq	r3, #1
 8002106:	2300      	movne	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	e012      	b.n	8002132 <HAL_I2C_Init+0x156>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	1e58      	subs	r0, r3, #1
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6859      	ldr	r1, [r3, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	0099      	lsls	r1, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002122:	3301      	adds	r3, #1
 8002124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002128:	2b00      	cmp	r3, #0
 800212a:	bf0c      	ite	eq
 800212c:	2301      	moveq	r3, #1
 800212e:	2300      	movne	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_I2C_Init+0x15e>
 8002136:	2301      	movs	r3, #1
 8002138:	e022      	b.n	8002180 <HAL_I2C_Init+0x1a4>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10e      	bne.n	8002160 <HAL_I2C_Init+0x184>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1e58      	subs	r0, r3, #1
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6859      	ldr	r1, [r3, #4]
 800214a:	460b      	mov	r3, r1
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	440b      	add	r3, r1
 8002150:	fbb0 f3f3 	udiv	r3, r0, r3
 8002154:	3301      	adds	r3, #1
 8002156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800215a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800215e:	e00f      	b.n	8002180 <HAL_I2C_Init+0x1a4>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	1e58      	subs	r0, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6859      	ldr	r1, [r3, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	0099      	lsls	r1, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	fbb0 f3f3 	udiv	r3, r0, r3
 8002176:	3301      	adds	r3, #1
 8002178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800217c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	6809      	ldr	r1, [r1, #0]
 8002184:	4313      	orrs	r3, r2
 8002186:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69da      	ldr	r2, [r3, #28]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6911      	ldr	r1, [r2, #16]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68d2      	ldr	r2, [r2, #12]
 80021ba:	4311      	orrs	r1, r2
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	430b      	orrs	r3, r1
 80021c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695a      	ldr	r2, [r3, #20]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2220      	movs	r2, #32
 80021fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	000186a0 	.word	0x000186a0
 800221c:	001e847f 	.word	0x001e847f
 8002220:	003d08ff 	.word	0x003d08ff
 8002224:	431bde83 	.word	0x431bde83
 8002228:	10624dd3 	.word	0x10624dd3

0800222c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af02      	add	r7, sp, #8
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	607a      	str	r2, [r7, #4]
 8002236:	461a      	mov	r2, r3
 8002238:	460b      	mov	r3, r1
 800223a:	817b      	strh	r3, [r7, #10]
 800223c:	4613      	mov	r3, r2
 800223e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002240:	f7ff f972 	bl	8001528 <HAL_GetTick>
 8002244:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b20      	cmp	r3, #32
 8002250:	f040 80e0 	bne.w	8002414 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	2319      	movs	r3, #25
 800225a:	2201      	movs	r2, #1
 800225c:	4970      	ldr	r1, [pc, #448]	; (8002420 <HAL_I2C_Master_Transmit+0x1f4>)
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 fc34 	bl	8002acc <I2C_WaitOnFlagUntilTimeout>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800226a:	2302      	movs	r3, #2
 800226c:	e0d3      	b.n	8002416 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_I2C_Master_Transmit+0x50>
 8002278:	2302      	movs	r3, #2
 800227a:	e0cc      	b.n	8002416 <HAL_I2C_Master_Transmit+0x1ea>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b01      	cmp	r3, #1
 8002290:	d007      	beq.n	80022a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0201 	orr.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2221      	movs	r2, #33	; 0x21
 80022b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2210      	movs	r2, #16
 80022be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	893a      	ldrh	r2, [r7, #8]
 80022d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4a50      	ldr	r2, [pc, #320]	; (8002424 <HAL_I2C_Master_Transmit+0x1f8>)
 80022e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022e4:	8979      	ldrh	r1, [r7, #10]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	6a3a      	ldr	r2, [r7, #32]
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 fac2 	bl	8002874 <I2C_MasterRequestWrite>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e08d      	b.n	8002416 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002310:	e066      	b.n	80023e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	6a39      	ldr	r1, [r7, #32]
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 fcae 	bl	8002c78 <I2C_WaitOnTXEFlagUntilTimeout>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00d      	beq.n	800233e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	2b04      	cmp	r3, #4
 8002328:	d107      	bne.n	800233a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002338:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e06b      	b.n	8002416 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	781a      	ldrb	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002358:	b29b      	uxth	r3, r3
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002366:	3b01      	subs	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b04      	cmp	r3, #4
 800237a:	d11b      	bne.n	80023b4 <HAL_I2C_Master_Transmit+0x188>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002380:	2b00      	cmp	r3, #0
 8002382:	d017      	beq.n	80023b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	781a      	ldrb	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239e:	b29b      	uxth	r3, r3
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	6a39      	ldr	r1, [r7, #32]
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 fc9e 	bl	8002cfa <I2C_WaitOnBTFFlagUntilTimeout>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00d      	beq.n	80023e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d107      	bne.n	80023dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e01a      	b.n	8002416 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d194      	bne.n	8002312 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	e000      	b.n	8002416 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002414:	2302      	movs	r3, #2
  }
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	00100002 	.word	0x00100002
 8002424:	ffff0000 	.word	0xffff0000

08002428 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08c      	sub	sp, #48	; 0x30
 800242c:	af02      	add	r7, sp, #8
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	607a      	str	r2, [r7, #4]
 8002432:	461a      	mov	r2, r3
 8002434:	460b      	mov	r3, r1
 8002436:	817b      	strh	r3, [r7, #10]
 8002438:	4613      	mov	r3, r2
 800243a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800243c:	f7ff f874 	bl	8001528 <HAL_GetTick>
 8002440:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b20      	cmp	r3, #32
 800244c:	f040 820b 	bne.w	8002866 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	2319      	movs	r3, #25
 8002456:	2201      	movs	r2, #1
 8002458:	497c      	ldr	r1, [pc, #496]	; (800264c <HAL_I2C_Master_Receive+0x224>)
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 fb36 	bl	8002acc <I2C_WaitOnFlagUntilTimeout>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002466:	2302      	movs	r3, #2
 8002468:	e1fe      	b.n	8002868 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_I2C_Master_Receive+0x50>
 8002474:	2302      	movs	r3, #2
 8002476:	e1f7      	b.n	8002868 <HAL_I2C_Master_Receive+0x440>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b01      	cmp	r3, #1
 800248c:	d007      	beq.n	800249e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 0201 	orr.w	r2, r2, #1
 800249c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2222      	movs	r2, #34	; 0x22
 80024b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2210      	movs	r2, #16
 80024ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	893a      	ldrh	r2, [r7, #8]
 80024ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4a5c      	ldr	r2, [pc, #368]	; (8002650 <HAL_I2C_Master_Receive+0x228>)
 80024de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024e0:	8979      	ldrh	r1, [r7, #10]
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 fa3a 	bl	8002960 <I2C_MasterRequestRead>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e1b8      	b.n	8002868 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d113      	bne.n	8002526 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024fe:	2300      	movs	r3, #0
 8002500:	623b      	str	r3, [r7, #32]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	623b      	str	r3, [r7, #32]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	623b      	str	r3, [r7, #32]
 8002512:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	e18c      	b.n	8002840 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252a:	2b01      	cmp	r3, #1
 800252c:	d11b      	bne.n	8002566 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800253c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	e16c      	b.n	8002840 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256a:	2b02      	cmp	r3, #2
 800256c:	d11b      	bne.n	80025a6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800257c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800258c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800258e:	2300      	movs	r3, #0
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	61bb      	str	r3, [r7, #24]
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	e14c      	b.n	8002840 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80025cc:	e138      	b.n	8002840 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	f200 80f1 	bhi.w	80027ba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d123      	bne.n	8002628 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 fbc9 	bl	8002d7c <I2C_WaitOnRXNEFlagUntilTimeout>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e139      	b.n	8002868 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691a      	ldr	r2, [r3, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002610:	3b01      	subs	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261c:	b29b      	uxth	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002626:	e10b      	b.n	8002840 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262c:	2b02      	cmp	r3, #2
 800262e:	d14e      	bne.n	80026ce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002636:	2200      	movs	r2, #0
 8002638:	4906      	ldr	r1, [pc, #24]	; (8002654 <HAL_I2C_Master_Receive+0x22c>)
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 fa46 	bl	8002acc <I2C_WaitOnFlagUntilTimeout>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d008      	beq.n	8002658 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e10e      	b.n	8002868 <HAL_I2C_Master_Receive+0x440>
 800264a:	bf00      	nop
 800264c:	00100002 	.word	0x00100002
 8002650:	ffff0000 	.word	0xffff0000
 8002654:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002666:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002690:	b29b      	uxth	r3, r3
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026cc:	e0b8      	b.n	8002840 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d4:	2200      	movs	r2, #0
 80026d6:	4966      	ldr	r1, [pc, #408]	; (8002870 <HAL_I2C_Master_Receive+0x448>)
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 f9f7 	bl	8002acc <I2C_WaitOnFlagUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0bf      	b.n	8002868 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691a      	ldr	r2, [r3, #16]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002720:	b29b      	uxth	r3, r3
 8002722:	3b01      	subs	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002730:	2200      	movs	r2, #0
 8002732:	494f      	ldr	r1, [pc, #316]	; (8002870 <HAL_I2C_Master_Receive+0x448>)
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 f9c9 	bl	8002acc <I2C_WaitOnFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e091      	b.n	8002868 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002752:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277c:	b29b      	uxth	r3, r3
 800277e:	3b01      	subs	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027b8:	e042      	b.n	8002840 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 fadc 	bl	8002d7c <I2C_WaitOnRXNEFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e04c      	b.n	8002868 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b04      	cmp	r3, #4
 800280c:	d118      	bne.n	8002840 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002836:	b29b      	uxth	r3, r3
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002844:	2b00      	cmp	r3, #0
 8002846:	f47f aec2 	bne.w	80025ce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	e000      	b.n	8002868 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002866:	2302      	movs	r3, #2
  }
}
 8002868:	4618      	mov	r0, r3
 800286a:	3728      	adds	r7, #40	; 0x28
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	00010004 	.word	0x00010004

08002874 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af02      	add	r7, sp, #8
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	460b      	mov	r3, r1
 8002882:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002888:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2b08      	cmp	r3, #8
 800288e:	d006      	beq.n	800289e <I2C_MasterRequestWrite+0x2a>
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d003      	beq.n	800289e <I2C_MasterRequestWrite+0x2a>
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800289c:	d108      	bne.n	80028b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	e00b      	b.n	80028c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	2b12      	cmp	r3, #18
 80028b6:	d107      	bne.n	80028c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f8f9 	bl	8002acc <I2C_WaitOnFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e035      	b.n	8002950 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028ec:	d108      	bne.n	8002900 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028ee:	897b      	ldrh	r3, [r7, #10]
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	461a      	mov	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028fc:	611a      	str	r2, [r3, #16]
 80028fe:	e01b      	b.n	8002938 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002900:	897b      	ldrh	r3, [r7, #10]
 8002902:	11db      	asrs	r3, r3, #7
 8002904:	b2db      	uxtb	r3, r3
 8002906:	f003 0306 	and.w	r3, r3, #6
 800290a:	b2db      	uxtb	r3, r3
 800290c:	f063 030f 	orn	r3, r3, #15
 8002910:	b2da      	uxtb	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	490e      	ldr	r1, [pc, #56]	; (8002958 <I2C_MasterRequestWrite+0xe4>)
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f92b 	bl	8002b7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e010      	b.n	8002950 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800292e:	897b      	ldrh	r3, [r7, #10]
 8002930:	b2da      	uxtb	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	4907      	ldr	r1, [pc, #28]	; (800295c <I2C_MasterRequestWrite+0xe8>)
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 f91b 	bl	8002b7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	00010008 	.word	0x00010008
 800295c:	00010002 	.word	0x00010002

08002960 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	460b      	mov	r3, r1
 800296e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002984:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2b08      	cmp	r3, #8
 800298a:	d006      	beq.n	800299a <I2C_MasterRequestRead+0x3a>
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d003      	beq.n	800299a <I2C_MasterRequestRead+0x3a>
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002998:	d108      	bne.n	80029ac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	e00b      	b.n	80029c4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	2b11      	cmp	r3, #17
 80029b2:	d107      	bne.n	80029c4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 f87b 	bl	8002acc <I2C_WaitOnFlagUntilTimeout>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e06d      	b.n	8002abc <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029e8:	d108      	bne.n	80029fc <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80029ea:	897b      	ldrh	r3, [r7, #10]
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	611a      	str	r2, [r3, #16]
 80029fa:	e053      	b.n	8002aa4 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029fc:	897b      	ldrh	r3, [r7, #10]
 80029fe:	11db      	asrs	r3, r3, #7
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	f003 0306 	and.w	r3, r3, #6
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f063 030f 	orn	r3, r3, #15
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	492a      	ldr	r1, [pc, #168]	; (8002ac4 <I2C_MasterRequestRead+0x164>)
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 f8ad 	bl	8002b7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e048      	b.n	8002abc <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a2a:	897b      	ldrh	r3, [r7, #10]
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	4923      	ldr	r1, [pc, #140]	; (8002ac8 <I2C_MasterRequestRead+0x168>)
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 f89d 	bl	8002b7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e038      	b.n	8002abc <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a6e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 f825 	bl	8002acc <I2C_WaitOnFlagUntilTimeout>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e017      	b.n	8002abc <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002a8c:	897b      	ldrh	r3, [r7, #10]
 8002a8e:	11db      	asrs	r3, r3, #7
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	f003 0306 	and.w	r3, r3, #6
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f063 030e 	orn	r3, r3, #14
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	4907      	ldr	r1, [pc, #28]	; (8002ac8 <I2C_MasterRequestRead+0x168>)
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 f865 	bl	8002b7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	00010008 	.word	0x00010008
 8002ac8:	00010002 	.word	0x00010002

08002acc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	603b      	str	r3, [r7, #0]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002adc:	e025      	b.n	8002b2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae4:	d021      	beq.n	8002b2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae6:	f7fe fd1f 	bl	8001528 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d302      	bcc.n	8002afc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d116      	bne.n	8002b2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f043 0220 	orr.w	r2, r3, #32
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e023      	b.n	8002b72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	0c1b      	lsrs	r3, r3, #16
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d10d      	bne.n	8002b50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	43da      	mvns	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	bf0c      	ite	eq
 8002b46:	2301      	moveq	r3, #1
 8002b48:	2300      	movne	r3, #0
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	e00c      	b.n	8002b6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	43da      	mvns	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	bf0c      	ite	eq
 8002b62:	2301      	moveq	r3, #1
 8002b64:	2300      	movne	r3, #0
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	461a      	mov	r2, r3
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d0b6      	beq.n	8002ade <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
 8002b86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b88:	e051      	b.n	8002c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b98:	d123      	bne.n	8002be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f043 0204 	orr.w	r2, r3, #4
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e046      	b.n	8002c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be8:	d021      	beq.n	8002c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bea:	f7fe fc9d 	bl	8001528 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d302      	bcc.n	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d116      	bne.n	8002c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f043 0220 	orr.w	r2, r3, #32
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e020      	b.n	8002c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	0c1b      	lsrs	r3, r3, #16
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d10c      	bne.n	8002c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	43da      	mvns	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4013      	ands	r3, r2
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	bf14      	ite	ne
 8002c4a:	2301      	movne	r3, #1
 8002c4c:	2300      	moveq	r3, #0
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	e00b      	b.n	8002c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	43da      	mvns	r2, r3
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	bf14      	ite	ne
 8002c64:	2301      	movne	r3, #1
 8002c66:	2300      	moveq	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d18d      	bne.n	8002b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c84:	e02d      	b.n	8002ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 f8ce 	bl	8002e28 <I2C_IsAcknowledgeFailed>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e02d      	b.n	8002cf2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9c:	d021      	beq.n	8002ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9e:	f7fe fc43 	bl	8001528 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d302      	bcc.n	8002cb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d116      	bne.n	8002ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f043 0220 	orr.w	r2, r3, #32
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e007      	b.n	8002cf2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cec:	2b80      	cmp	r3, #128	; 0x80
 8002cee:	d1ca      	bne.n	8002c86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	60f8      	str	r0, [r7, #12]
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d06:	e02d      	b.n	8002d64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 f88d 	bl	8002e28 <I2C_IsAcknowledgeFailed>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e02d      	b.n	8002d74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1e:	d021      	beq.n	8002d64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d20:	f7fe fc02 	bl	8001528 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d302      	bcc.n	8002d36 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d116      	bne.n	8002d64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	f043 0220 	orr.w	r2, r3, #32
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e007      	b.n	8002d74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d1ca      	bne.n	8002d08 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d88:	e042      	b.n	8002e10 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	2b10      	cmp	r3, #16
 8002d96:	d119      	bne.n	8002dcc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f06f 0210 	mvn.w	r2, #16
 8002da0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e029      	b.n	8002e20 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dcc:	f7fe fbac 	bl	8001528 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d302      	bcc.n	8002de2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d116      	bne.n	8002e10 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	f043 0220 	orr.w	r2, r3, #32
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e007      	b.n	8002e20 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1a:	2b40      	cmp	r3, #64	; 0x40
 8002e1c:	d1b5      	bne.n	8002d8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3e:	d11b      	bne.n	8002e78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	f043 0204 	orr.w	r2, r3, #4
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e000      	b.n	8002e7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e31d      	b.n	80034d2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e96:	4b94      	ldr	r3, [pc, #592]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ea0:	4b91      	ldr	r3, [pc, #580]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d07b      	beq.n	8002fae <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d006      	beq.n	8002eca <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	2b0c      	cmp	r3, #12
 8002ec0:	d10f      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x5e>
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec8:	d10b      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eca:	4b87      	ldr	r3, [pc, #540]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d06a      	beq.n	8002fac <HAL_RCC_OscConfig+0x128>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d166      	bne.n	8002fac <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e2f7      	b.n	80034d2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d106      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x74>
 8002eea:	4b7f      	ldr	r3, [pc, #508]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a7e      	ldr	r2, [pc, #504]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 8002ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	e02d      	b.n	8002f54 <HAL_RCC_OscConfig+0xd0>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10c      	bne.n	8002f1a <HAL_RCC_OscConfig+0x96>
 8002f00:	4b79      	ldr	r3, [pc, #484]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a78      	ldr	r2, [pc, #480]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 8002f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	4b76      	ldr	r3, [pc, #472]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a75      	ldr	r2, [pc, #468]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 8002f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	e01c      	b.n	8002f54 <HAL_RCC_OscConfig+0xd0>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b05      	cmp	r3, #5
 8002f20:	d10c      	bne.n	8002f3c <HAL_RCC_OscConfig+0xb8>
 8002f22:	4b71      	ldr	r3, [pc, #452]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a70      	ldr	r2, [pc, #448]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 8002f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	4b6e      	ldr	r3, [pc, #440]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a6d      	ldr	r2, [pc, #436]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 8002f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	e00b      	b.n	8002f54 <HAL_RCC_OscConfig+0xd0>
 8002f3c:	4b6a      	ldr	r3, [pc, #424]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a69      	ldr	r2, [pc, #420]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 8002f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	4b67      	ldr	r3, [pc, #412]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a66      	ldr	r2, [pc, #408]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 8002f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d013      	beq.n	8002f84 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7fe fae4 	bl	8001528 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f64:	f7fe fae0 	bl	8001528 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	; 0x64
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e2ad      	b.n	80034d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f76:	4b5c      	ldr	r3, [pc, #368]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0f0      	beq.n	8002f64 <HAL_RCC_OscConfig+0xe0>
 8002f82:	e014      	b.n	8002fae <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f84:	f7fe fad0 	bl	8001528 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7fe facc 	bl	8001528 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	; 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e299      	b.n	80034d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f9e:	4b52      	ldr	r3, [pc, #328]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x108>
 8002faa:	e000      	b.n	8002fae <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d05a      	beq.n	8003070 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	2b0c      	cmp	r3, #12
 8002fc4:	d119      	bne.n	8002ffa <HAL_RCC_OscConfig+0x176>
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d116      	bne.n	8002ffa <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fcc:	4b46      	ldr	r3, [pc, #280]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x160>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d001      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e276      	b.n	80034d2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe4:	4b40      	ldr	r3, [pc, #256]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	021b      	lsls	r3, r3, #8
 8002ff2:	493d      	ldr	r1, [pc, #244]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff8:	e03a      	b.n	8003070 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d020      	beq.n	8003044 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003002:	4b3a      	ldr	r3, [pc, #232]	; (80030ec <HAL_RCC_OscConfig+0x268>)
 8003004:	2201      	movs	r2, #1
 8003006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003008:	f7fe fa8e 	bl	8001528 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003010:	f7fe fa8a 	bl	8001528 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e257      	b.n	80034d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003022:	4b31      	ldr	r3, [pc, #196]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302e:	4b2e      	ldr	r3, [pc, #184]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	021b      	lsls	r3, r3, #8
 800303c:	492a      	ldr	r1, [pc, #168]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 800303e:	4313      	orrs	r3, r2
 8003040:	604b      	str	r3, [r1, #4]
 8003042:	e015      	b.n	8003070 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003044:	4b29      	ldr	r3, [pc, #164]	; (80030ec <HAL_RCC_OscConfig+0x268>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304a:	f7fe fa6d 	bl	8001528 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003052:	f7fe fa69 	bl	8001528 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e236      	b.n	80034d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003064:	4b20      	ldr	r3, [pc, #128]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f0      	bne.n	8003052 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 80b8 	beq.w	80031ee <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d170      	bne.n	8003166 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003084:	4b18      	ldr	r3, [pc, #96]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_RCC_OscConfig+0x218>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e21a      	b.n	80034d2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a1a      	ldr	r2, [r3, #32]
 80030a0:	4b11      	ldr	r3, [pc, #68]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d921      	bls.n	80030f0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fc05 	bl	80038c0 <RCC_SetFlashLatencyFromMSIRange>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e208      	b.n	80034d2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030c0:	4b09      	ldr	r3, [pc, #36]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	4906      	ldr	r1, [pc, #24]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030d2:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	061b      	lsls	r3, r3, #24
 80030e0:	4901      	ldr	r1, [pc, #4]	; (80030e8 <HAL_RCC_OscConfig+0x264>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	604b      	str	r3, [r1, #4]
 80030e6:	e020      	b.n	800312a <HAL_RCC_OscConfig+0x2a6>
 80030e8:	40023800 	.word	0x40023800
 80030ec:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030f0:	4ba4      	ldr	r3, [pc, #656]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	49a1      	ldr	r1, [pc, #644]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003102:	4ba0      	ldr	r3, [pc, #640]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	061b      	lsls	r3, r3, #24
 8003110:	499c      	ldr	r1, [pc, #624]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 8003112:	4313      	orrs	r3, r2
 8003114:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fbd0 	bl	80038c0 <RCC_SetFlashLatencyFromMSIRange>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e1d3      	b.n	80034d2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	0b5b      	lsrs	r3, r3, #13
 8003130:	3301      	adds	r3, #1
 8003132:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800313a:	4a92      	ldr	r2, [pc, #584]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 800313c:	6892      	ldr	r2, [r2, #8]
 800313e:	0912      	lsrs	r2, r2, #4
 8003140:	f002 020f 	and.w	r2, r2, #15
 8003144:	4990      	ldr	r1, [pc, #576]	; (8003388 <HAL_RCC_OscConfig+0x504>)
 8003146:	5c8a      	ldrb	r2, [r1, r2]
 8003148:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800314a:	4a90      	ldr	r2, [pc, #576]	; (800338c <HAL_RCC_OscConfig+0x508>)
 800314c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800314e:	4b90      	ldr	r3, [pc, #576]	; (8003390 <HAL_RCC_OscConfig+0x50c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd fe22 	bl	8000d9c <HAL_InitTick>
 8003158:	4603      	mov	r3, r0
 800315a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d045      	beq.n	80031ee <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	e1b5      	b.n	80034d2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d029      	beq.n	80031c2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800316e:	4b89      	ldr	r3, [pc, #548]	; (8003394 <HAL_RCC_OscConfig+0x510>)
 8003170:	2201      	movs	r2, #1
 8003172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003174:	f7fe f9d8 	bl	8001528 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800317c:	f7fe f9d4 	bl	8001528 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e1a1      	b.n	80034d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800318e:	4b7d      	ldr	r3, [pc, #500]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800319a:	4b7a      	ldr	r3, [pc, #488]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	4977      	ldr	r1, [pc, #476]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ac:	4b75      	ldr	r3, [pc, #468]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	061b      	lsls	r3, r3, #24
 80031ba:	4972      	ldr	r1, [pc, #456]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	604b      	str	r3, [r1, #4]
 80031c0:	e015      	b.n	80031ee <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031c2:	4b74      	ldr	r3, [pc, #464]	; (8003394 <HAL_RCC_OscConfig+0x510>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c8:	f7fe f9ae 	bl	8001528 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031d0:	f7fe f9aa 	bl	8001528 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e177      	b.n	80034d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80031e2:	4b68      	ldr	r3, [pc, #416]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f0      	bne.n	80031d0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d030      	beq.n	800325c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d016      	beq.n	8003230 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003202:	4b65      	ldr	r3, [pc, #404]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 8003204:	2201      	movs	r2, #1
 8003206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003208:	f7fe f98e 	bl	8001528 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003210:	f7fe f98a 	bl	8001528 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e157      	b.n	80034d2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003222:	4b58      	ldr	r3, [pc, #352]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 8003224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0f0      	beq.n	8003210 <HAL_RCC_OscConfig+0x38c>
 800322e:	e015      	b.n	800325c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003230:	4b59      	ldr	r3, [pc, #356]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003236:	f7fe f977 	bl	8001528 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800323e:	f7fe f973 	bl	8001528 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e140      	b.n	80034d2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003250:	4b4c      	ldr	r3, [pc, #304]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 8003252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1f0      	bne.n	800323e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 80b5 	beq.w	80033d4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800326a:	2300      	movs	r3, #0
 800326c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800326e:	4b45      	ldr	r3, [pc, #276]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10d      	bne.n	8003296 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800327a:	4b42      	ldr	r3, [pc, #264]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	4a41      	ldr	r2, [pc, #260]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 8003280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003284:	6253      	str	r3, [r2, #36]	; 0x24
 8003286:	4b3f      	ldr	r3, [pc, #252]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003292:	2301      	movs	r3, #1
 8003294:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003296:	4b41      	ldr	r3, [pc, #260]	; (800339c <HAL_RCC_OscConfig+0x518>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d118      	bne.n	80032d4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032a2:	4b3e      	ldr	r3, [pc, #248]	; (800339c <HAL_RCC_OscConfig+0x518>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a3d      	ldr	r2, [pc, #244]	; (800339c <HAL_RCC_OscConfig+0x518>)
 80032a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ae:	f7fe f93b 	bl	8001528 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b6:	f7fe f937 	bl	8001528 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b64      	cmp	r3, #100	; 0x64
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e104      	b.n	80034d2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c8:	4b34      	ldr	r3, [pc, #208]	; (800339c <HAL_RCC_OscConfig+0x518>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0f0      	beq.n	80032b6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d106      	bne.n	80032ea <HAL_RCC_OscConfig+0x466>
 80032dc:	4b29      	ldr	r3, [pc, #164]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 80032de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e0:	4a28      	ldr	r2, [pc, #160]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 80032e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e6:	6353      	str	r3, [r2, #52]	; 0x34
 80032e8:	e02d      	b.n	8003346 <HAL_RCC_OscConfig+0x4c2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10c      	bne.n	800330c <HAL_RCC_OscConfig+0x488>
 80032f2:	4b24      	ldr	r3, [pc, #144]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 80032f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f6:	4a23      	ldr	r2, [pc, #140]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 80032f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032fc:	6353      	str	r3, [r2, #52]	; 0x34
 80032fe:	4b21      	ldr	r3, [pc, #132]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 8003300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003302:	4a20      	ldr	r2, [pc, #128]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 8003304:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003308:	6353      	str	r3, [r2, #52]	; 0x34
 800330a:	e01c      	b.n	8003346 <HAL_RCC_OscConfig+0x4c2>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b05      	cmp	r3, #5
 8003312:	d10c      	bne.n	800332e <HAL_RCC_OscConfig+0x4aa>
 8003314:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 8003316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003318:	4a1a      	ldr	r2, [pc, #104]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 800331a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800331e:	6353      	str	r3, [r2, #52]	; 0x34
 8003320:	4b18      	ldr	r3, [pc, #96]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 8003322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003324:	4a17      	ldr	r2, [pc, #92]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 8003326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800332a:	6353      	str	r3, [r2, #52]	; 0x34
 800332c:	e00b      	b.n	8003346 <HAL_RCC_OscConfig+0x4c2>
 800332e:	4b15      	ldr	r3, [pc, #84]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 8003330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003332:	4a14      	ldr	r2, [pc, #80]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 8003334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003338:	6353      	str	r3, [r2, #52]	; 0x34
 800333a:	4b12      	ldr	r3, [pc, #72]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 800333c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333e:	4a11      	ldr	r2, [pc, #68]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 8003340:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003344:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d015      	beq.n	800337a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334e:	f7fe f8eb 	bl	8001528 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003354:	e00a      	b.n	800336c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003356:	f7fe f8e7 	bl	8001528 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	f241 3288 	movw	r2, #5000	; 0x1388
 8003364:	4293      	cmp	r3, r2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e0b2      	b.n	80034d2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800336c:	4b05      	ldr	r3, [pc, #20]	; (8003384 <HAL_RCC_OscConfig+0x500>)
 800336e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0ee      	beq.n	8003356 <HAL_RCC_OscConfig+0x4d2>
 8003378:	e023      	b.n	80033c2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337a:	f7fe f8d5 	bl	8001528 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003380:	e019      	b.n	80033b6 <HAL_RCC_OscConfig+0x532>
 8003382:	bf00      	nop
 8003384:	40023800 	.word	0x40023800
 8003388:	08007fc8 	.word	0x08007fc8
 800338c:	20000060 	.word	0x20000060
 8003390:	20000064 	.word	0x20000064
 8003394:	42470020 	.word	0x42470020
 8003398:	42470680 	.word	0x42470680
 800339c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a0:	f7fe f8c2 	bl	8001528 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e08d      	b.n	80034d2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033b6:	4b49      	ldr	r3, [pc, #292]	; (80034dc <HAL_RCC_OscConfig+0x658>)
 80033b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1ee      	bne.n	80033a0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033c2:	7ffb      	ldrb	r3, [r7, #31]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d105      	bne.n	80033d4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c8:	4b44      	ldr	r3, [pc, #272]	; (80034dc <HAL_RCC_OscConfig+0x658>)
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	4a43      	ldr	r2, [pc, #268]	; (80034dc <HAL_RCC_OscConfig+0x658>)
 80033ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d079      	beq.n	80034d0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	2b0c      	cmp	r3, #12
 80033e0:	d056      	beq.n	8003490 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d13b      	bne.n	8003462 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ea:	4b3d      	ldr	r3, [pc, #244]	; (80034e0 <HAL_RCC_OscConfig+0x65c>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f0:	f7fe f89a 	bl	8001528 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f8:	f7fe f896 	bl	8001528 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e063      	b.n	80034d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800340a:	4b34      	ldr	r3, [pc, #208]	; (80034dc <HAL_RCC_OscConfig+0x658>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f0      	bne.n	80033f8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003416:	4b31      	ldr	r3, [pc, #196]	; (80034dc <HAL_RCC_OscConfig+0x658>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	4319      	orrs	r1, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	430b      	orrs	r3, r1
 800342e:	492b      	ldr	r1, [pc, #172]	; (80034dc <HAL_RCC_OscConfig+0x658>)
 8003430:	4313      	orrs	r3, r2
 8003432:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003434:	4b2a      	ldr	r3, [pc, #168]	; (80034e0 <HAL_RCC_OscConfig+0x65c>)
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343a:	f7fe f875 	bl	8001528 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003442:	f7fe f871 	bl	8001528 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e03e      	b.n	80034d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003454:	4b21      	ldr	r3, [pc, #132]	; (80034dc <HAL_RCC_OscConfig+0x658>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x5be>
 8003460:	e036      	b.n	80034d0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003462:	4b1f      	ldr	r3, [pc, #124]	; (80034e0 <HAL_RCC_OscConfig+0x65c>)
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003468:	f7fe f85e 	bl	8001528 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003470:	f7fe f85a 	bl	8001528 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e027      	b.n	80034d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003482:	4b16      	ldr	r3, [pc, #88]	; (80034dc <HAL_RCC_OscConfig+0x658>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x5ec>
 800348e:	e01f      	b.n	80034d0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e01a      	b.n	80034d2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800349c:	4b0f      	ldr	r3, [pc, #60]	; (80034dc <HAL_RCC_OscConfig+0x658>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d10d      	bne.n	80034cc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d106      	bne.n	80034cc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3720      	adds	r7, #32
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40023800 	.word	0x40023800
 80034e0:	42470060 	.word	0x42470060

080034e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e11a      	b.n	800372e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034f8:	4b8f      	ldr	r3, [pc, #572]	; (8003738 <HAL_RCC_ClockConfig+0x254>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d919      	bls.n	800353a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d105      	bne.n	8003518 <HAL_RCC_ClockConfig+0x34>
 800350c:	4b8a      	ldr	r3, [pc, #552]	; (8003738 <HAL_RCC_ClockConfig+0x254>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a89      	ldr	r2, [pc, #548]	; (8003738 <HAL_RCC_ClockConfig+0x254>)
 8003512:	f043 0304 	orr.w	r3, r3, #4
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	4b87      	ldr	r3, [pc, #540]	; (8003738 <HAL_RCC_ClockConfig+0x254>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f023 0201 	bic.w	r2, r3, #1
 8003520:	4985      	ldr	r1, [pc, #532]	; (8003738 <HAL_RCC_ClockConfig+0x254>)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	4313      	orrs	r3, r2
 8003526:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003528:	4b83      	ldr	r3, [pc, #524]	; (8003738 <HAL_RCC_ClockConfig+0x254>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d001      	beq.n	800353a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e0f9      	b.n	800372e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d008      	beq.n	8003558 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003546:	4b7d      	ldr	r3, [pc, #500]	; (800373c <HAL_RCC_ClockConfig+0x258>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	497a      	ldr	r1, [pc, #488]	; (800373c <HAL_RCC_ClockConfig+0x258>)
 8003554:	4313      	orrs	r3, r2
 8003556:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 808e 	beq.w	8003682 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d107      	bne.n	800357e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800356e:	4b73      	ldr	r3, [pc, #460]	; (800373c <HAL_RCC_ClockConfig+0x258>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d121      	bne.n	80035be <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e0d7      	b.n	800372e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b03      	cmp	r3, #3
 8003584:	d107      	bne.n	8003596 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003586:	4b6d      	ldr	r3, [pc, #436]	; (800373c <HAL_RCC_ClockConfig+0x258>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d115      	bne.n	80035be <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e0cb      	b.n	800372e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d107      	bne.n	80035ae <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800359e:	4b67      	ldr	r3, [pc, #412]	; (800373c <HAL_RCC_ClockConfig+0x258>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d109      	bne.n	80035be <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e0bf      	b.n	800372e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80035ae:	4b63      	ldr	r3, [pc, #396]	; (800373c <HAL_RCC_ClockConfig+0x258>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e0b7      	b.n	800372e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035be:	4b5f      	ldr	r3, [pc, #380]	; (800373c <HAL_RCC_ClockConfig+0x258>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f023 0203 	bic.w	r2, r3, #3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	495c      	ldr	r1, [pc, #368]	; (800373c <HAL_RCC_ClockConfig+0x258>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035d0:	f7fd ffaa 	bl	8001528 <HAL_GetTick>
 80035d4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d112      	bne.n	8003604 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80035de:	e00a      	b.n	80035f6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e0:	f7fd ffa2 	bl	8001528 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e09b      	b.n	800372e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80035f6:	4b51      	ldr	r3, [pc, #324]	; (800373c <HAL_RCC_ClockConfig+0x258>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d1ee      	bne.n	80035e0 <HAL_RCC_ClockConfig+0xfc>
 8003602:	e03e      	b.n	8003682 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b03      	cmp	r3, #3
 800360a:	d112      	bne.n	8003632 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800360c:	e00a      	b.n	8003624 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800360e:	f7fd ff8b 	bl	8001528 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	f241 3288 	movw	r2, #5000	; 0x1388
 800361c:	4293      	cmp	r3, r2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e084      	b.n	800372e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003624:	4b45      	ldr	r3, [pc, #276]	; (800373c <HAL_RCC_ClockConfig+0x258>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 030c 	and.w	r3, r3, #12
 800362c:	2b0c      	cmp	r3, #12
 800362e:	d1ee      	bne.n	800360e <HAL_RCC_ClockConfig+0x12a>
 8003630:	e027      	b.n	8003682 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d11d      	bne.n	8003676 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800363a:	e00a      	b.n	8003652 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800363c:	f7fd ff74 	bl	8001528 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f241 3288 	movw	r2, #5000	; 0x1388
 800364a:	4293      	cmp	r3, r2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e06d      	b.n	800372e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003652:	4b3a      	ldr	r3, [pc, #232]	; (800373c <HAL_RCC_ClockConfig+0x258>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 030c 	and.w	r3, r3, #12
 800365a:	2b04      	cmp	r3, #4
 800365c:	d1ee      	bne.n	800363c <HAL_RCC_ClockConfig+0x158>
 800365e:	e010      	b.n	8003682 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003660:	f7fd ff62 	bl	8001528 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f241 3288 	movw	r2, #5000	; 0x1388
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e05b      	b.n	800372e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003676:	4b31      	ldr	r3, [pc, #196]	; (800373c <HAL_RCC_ClockConfig+0x258>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1ee      	bne.n	8003660 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003682:	4b2d      	ldr	r3, [pc, #180]	; (8003738 <HAL_RCC_ClockConfig+0x254>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d219      	bcs.n	80036c4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d105      	bne.n	80036a2 <HAL_RCC_ClockConfig+0x1be>
 8003696:	4b28      	ldr	r3, [pc, #160]	; (8003738 <HAL_RCC_ClockConfig+0x254>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a27      	ldr	r2, [pc, #156]	; (8003738 <HAL_RCC_ClockConfig+0x254>)
 800369c:	f043 0304 	orr.w	r3, r3, #4
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	4b25      	ldr	r3, [pc, #148]	; (8003738 <HAL_RCC_ClockConfig+0x254>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f023 0201 	bic.w	r2, r3, #1
 80036aa:	4923      	ldr	r1, [pc, #140]	; (8003738 <HAL_RCC_ClockConfig+0x254>)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b2:	4b21      	ldr	r3, [pc, #132]	; (8003738 <HAL_RCC_ClockConfig+0x254>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d001      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e034      	b.n	800372e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d008      	beq.n	80036e2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d0:	4b1a      	ldr	r3, [pc, #104]	; (800373c <HAL_RCC_ClockConfig+0x258>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	4917      	ldr	r1, [pc, #92]	; (800373c <HAL_RCC_ClockConfig+0x258>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d009      	beq.n	8003702 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ee:	4b13      	ldr	r3, [pc, #76]	; (800373c <HAL_RCC_ClockConfig+0x258>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	490f      	ldr	r1, [pc, #60]	; (800373c <HAL_RCC_ClockConfig+0x258>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003702:	f000 f823 	bl	800374c <HAL_RCC_GetSysClockFreq>
 8003706:	4601      	mov	r1, r0
 8003708:	4b0c      	ldr	r3, [pc, #48]	; (800373c <HAL_RCC_ClockConfig+0x258>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	091b      	lsrs	r3, r3, #4
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	4a0b      	ldr	r2, [pc, #44]	; (8003740 <HAL_RCC_ClockConfig+0x25c>)
 8003714:	5cd3      	ldrb	r3, [r2, r3]
 8003716:	fa21 f303 	lsr.w	r3, r1, r3
 800371a:	4a0a      	ldr	r2, [pc, #40]	; (8003744 <HAL_RCC_ClockConfig+0x260>)
 800371c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800371e:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <HAL_RCC_ClockConfig+0x264>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f7fd fb3a 	bl	8000d9c <HAL_InitTick>
 8003728:	4603      	mov	r3, r0
 800372a:	72fb      	strb	r3, [r7, #11]

  return status;
 800372c:	7afb      	ldrb	r3, [r7, #11]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40023c00 	.word	0x40023c00
 800373c:	40023800 	.word	0x40023800
 8003740:	08007fc8 	.word	0x08007fc8
 8003744:	20000060 	.word	0x20000060
 8003748:	20000064 	.word	0x20000064

0800374c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003752:	4b26      	ldr	r3, [pc, #152]	; (80037ec <HAL_RCC_GetSysClockFreq+0xa0>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	2b08      	cmp	r3, #8
 8003760:	d006      	beq.n	8003770 <HAL_RCC_GetSysClockFreq+0x24>
 8003762:	2b0c      	cmp	r3, #12
 8003764:	d007      	beq.n	8003776 <HAL_RCC_GetSysClockFreq+0x2a>
 8003766:	2b04      	cmp	r3, #4
 8003768:	d12c      	bne.n	80037c4 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800376a:	4b21      	ldr	r3, [pc, #132]	; (80037f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800376c:	613b      	str	r3, [r7, #16]
      break;
 800376e:	e037      	b.n	80037e0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003770:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003772:	613b      	str	r3, [r7, #16]
      break;
 8003774:	e034      	b.n	80037e0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	0c9b      	lsrs	r3, r3, #18
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	4a1e      	ldr	r2, [pc, #120]	; (80037f8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003780:	5cd3      	ldrb	r3, [r2, r3]
 8003782:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	0d9b      	lsrs	r3, r3, #22
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	3301      	adds	r3, #1
 800378e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003790:	4b16      	ldr	r3, [pc, #88]	; (80037ec <HAL_RCC_GetSysClockFreq+0xa0>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4a15      	ldr	r2, [pc, #84]	; (80037f4 <HAL_RCC_GetSysClockFreq+0xa8>)
 80037a0:	fb02 f203 	mul.w	r2, r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	e007      	b.n	80037be <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	4a0f      	ldr	r2, [pc, #60]	; (80037f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80037b2:	fb02 f203 	mul.w	r2, r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	613b      	str	r3, [r7, #16]
      break;
 80037c2:	e00d      	b.n	80037e0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80037c4:	4b09      	ldr	r3, [pc, #36]	; (80037ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	0b5b      	lsrs	r3, r3, #13
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	3301      	adds	r3, #1
 80037d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	613b      	str	r3, [r7, #16]
      break;
 80037de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037e0:	693b      	ldr	r3, [r7, #16]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	371c      	adds	r7, #28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr
 80037ec:	40023800 	.word	0x40023800
 80037f0:	00f42400 	.word	0x00f42400
 80037f4:	007a1200 	.word	0x007a1200
 80037f8:	08007fbc 	.word	0x08007fbc

080037fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003800:	4b02      	ldr	r3, [pc, #8]	; (800380c <HAL_RCC_GetHCLKFreq+0x10>)
 8003802:	681b      	ldr	r3, [r3, #0]
}
 8003804:	4618      	mov	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr
 800380c:	20000060 	.word	0x20000060

08003810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003814:	f7ff fff2 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 8003818:	4601      	mov	r1, r0
 800381a:	4b05      	ldr	r3, [pc, #20]	; (8003830 <HAL_RCC_GetPCLK1Freq+0x20>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	0a1b      	lsrs	r3, r3, #8
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	4a03      	ldr	r2, [pc, #12]	; (8003834 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003826:	5cd3      	ldrb	r3, [r2, r3]
 8003828:	fa21 f303 	lsr.w	r3, r1, r3
}
 800382c:	4618      	mov	r0, r3
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40023800 	.word	0x40023800
 8003834:	08007fd8 	.word	0x08007fd8

08003838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800383c:	f7ff ffde 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 8003840:	4601      	mov	r1, r0
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	0adb      	lsrs	r3, r3, #11
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	4a03      	ldr	r2, [pc, #12]	; (800385c <HAL_RCC_GetPCLK2Freq+0x24>)
 800384e:	5cd3      	ldrb	r3, [r2, r3]
 8003850:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003854:	4618      	mov	r0, r3
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40023800 	.word	0x40023800
 800385c:	08007fd8 	.word	0x08007fd8

08003860 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	220f      	movs	r2, #15
 800386e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003870:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <HAL_RCC_GetClockConfig+0x58>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 0203 	and.w	r2, r3, #3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800387c:	4b0e      	ldr	r3, [pc, #56]	; (80038b8 <HAL_RCC_GetClockConfig+0x58>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003888:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <HAL_RCC_GetClockConfig+0x58>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003894:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <HAL_RCC_GetClockConfig+0x58>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	08db      	lsrs	r3, r3, #3
 800389a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80038a2:	4b06      	ldr	r3, [pc, #24]	; (80038bc <HAL_RCC_GetClockConfig+0x5c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0201 	and.w	r2, r3, #1
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	601a      	str	r2, [r3, #0]
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr
 80038b8:	40023800 	.word	0x40023800
 80038bc:	40023c00 	.word	0x40023c00

080038c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038c8:	2300      	movs	r3, #0
 80038ca:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80038cc:	4b29      	ldr	r3, [pc, #164]	; (8003974 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d12c      	bne.n	8003932 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038d8:	4b26      	ldr	r3, [pc, #152]	; (8003974 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80038e4:	4b24      	ldr	r3, [pc, #144]	; (8003978 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	e016      	b.n	800391e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f0:	4b20      	ldr	r3, [pc, #128]	; (8003974 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	4a1f      	ldr	r2, [pc, #124]	; (8003974 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80038f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fa:	6253      	str	r3, [r2, #36]	; 0x24
 80038fc:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003908:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003910:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003912:	4b18      	ldr	r3, [pc, #96]	; (8003974 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	4a17      	ldr	r2, [pc, #92]	; (8003974 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800391c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003924:	d105      	bne.n	8003932 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800392c:	d101      	bne.n	8003932 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800392e:	2301      	movs	r3, #1
 8003930:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d105      	bne.n	8003944 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003938:	4b10      	ldr	r3, [pc, #64]	; (800397c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a0f      	ldr	r2, [pc, #60]	; (800397c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800393e:	f043 0304 	orr.w	r3, r3, #4
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	4b0d      	ldr	r3, [pc, #52]	; (800397c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f023 0201 	bic.w	r2, r3, #1
 800394c:	490b      	ldr	r1, [pc, #44]	; (800397c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003954:	4b09      	ldr	r3, [pc, #36]	; (800397c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	429a      	cmp	r2, r3
 8003960:	d001      	beq.n	8003966 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	371c      	adds	r7, #28
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40023800 	.word	0x40023800
 8003978:	40007000 	.word	0x40007000
 800397c:	40023c00 	.word	0x40023c00

08003980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e01d      	b.n	80039ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fd fc38 	bl	800121c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3304      	adds	r3, #4
 80039bc:	4619      	mov	r1, r3
 80039be:	4610      	mov	r0, r2
 80039c0:	f000 fb00 	bl	8003fc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b085      	sub	sp, #20
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f042 0201 	orr.w	r2, r2, #1
 80039ec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2b06      	cmp	r3, #6
 80039fe:	d007      	beq.n	8003a10 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr

08003a1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e01d      	b.n	8003a6a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f815 	bl	8003a72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3304      	adds	r3, #4
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	f000 fab2 	bl	8003fc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr

08003a84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2201      	movs	r2, #1
 8003a94:	6839      	ldr	r1, [r7, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fc8f 	bl	80043ba <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b06      	cmp	r3, #6
 8003aac:	d007      	beq.n	8003abe <HAL_TIM_PWM_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 0201 	orr.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d122      	bne.n	8003b24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d11b      	bne.n	8003b24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f06f 0202 	mvn.w	r2, #2
 8003af4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fa3e 	bl	8003f8c <HAL_TIM_IC_CaptureCallback>
 8003b10:	e005      	b.n	8003b1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fa31 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 fa40 	bl	8003f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d122      	bne.n	8003b78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d11b      	bne.n	8003b78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f06f 0204 	mvn.w	r2, #4
 8003b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fa14 	bl	8003f8c <HAL_TIM_IC_CaptureCallback>
 8003b64:	e005      	b.n	8003b72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fa07 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 fa16 	bl	8003f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d122      	bne.n	8003bcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d11b      	bne.n	8003bcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f06f 0208 	mvn.w	r2, #8
 8003b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2204      	movs	r2, #4
 8003ba2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f9ea 	bl	8003f8c <HAL_TIM_IC_CaptureCallback>
 8003bb8:	e005      	b.n	8003bc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f9dd 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f9ec 	bl	8003f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	f003 0310 	and.w	r3, r3, #16
 8003bd6:	2b10      	cmp	r3, #16
 8003bd8:	d122      	bne.n	8003c20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	2b10      	cmp	r3, #16
 8003be6:	d11b      	bne.n	8003c20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f06f 0210 	mvn.w	r2, #16
 8003bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2208      	movs	r2, #8
 8003bf6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f9c0 	bl	8003f8c <HAL_TIM_IC_CaptureCallback>
 8003c0c:	e005      	b.n	8003c1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f9b3 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f9c2 	bl	8003f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d10e      	bne.n	8003c4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d107      	bne.n	8003c4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f06f 0201 	mvn.w	r2, #1
 8003c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7fd f85c 	bl	8000d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c56:	2b40      	cmp	r3, #64	; 0x40
 8003c58:	d10e      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c64:	2b40      	cmp	r3, #64	; 0x40
 8003c66:	d107      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f99c 	bl	8003fb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c78:	bf00      	nop
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d101      	bne.n	8003c9a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c96:	2302      	movs	r3, #2
 8003c98:	e0b4      	b.n	8003e04 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b0c      	cmp	r3, #12
 8003cae:	f200 809f 	bhi.w	8003df0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003cb2:	a201      	add	r2, pc, #4	; (adr r2, 8003cb8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb8:	08003ced 	.word	0x08003ced
 8003cbc:	08003df1 	.word	0x08003df1
 8003cc0:	08003df1 	.word	0x08003df1
 8003cc4:	08003df1 	.word	0x08003df1
 8003cc8:	08003d2d 	.word	0x08003d2d
 8003ccc:	08003df1 	.word	0x08003df1
 8003cd0:	08003df1 	.word	0x08003df1
 8003cd4:	08003df1 	.word	0x08003df1
 8003cd8:	08003d6f 	.word	0x08003d6f
 8003cdc:	08003df1 	.word	0x08003df1
 8003ce0:	08003df1 	.word	0x08003df1
 8003ce4:	08003df1 	.word	0x08003df1
 8003ce8:	08003daf 	.word	0x08003daf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68b9      	ldr	r1, [r7, #8]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 f9d6 	bl	80040a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699a      	ldr	r2, [r3, #24]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0208 	orr.w	r2, r2, #8
 8003d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699a      	ldr	r2, [r3, #24]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0204 	bic.w	r2, r2, #4
 8003d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6999      	ldr	r1, [r3, #24]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	619a      	str	r2, [r3, #24]
      break;
 8003d2a:	e062      	b.n	8003df2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68b9      	ldr	r1, [r7, #8]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 f9f2 	bl	800411c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6999      	ldr	r1, [r3, #24]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	021a      	lsls	r2, r3, #8
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	619a      	str	r2, [r3, #24]
      break;
 8003d6c:	e041      	b.n	8003df2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68b9      	ldr	r1, [r7, #8]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 fa0f 	bl	8004198 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69da      	ldr	r2, [r3, #28]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f042 0208 	orr.w	r2, r2, #8
 8003d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69da      	ldr	r2, [r3, #28]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0204 	bic.w	r2, r2, #4
 8003d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69d9      	ldr	r1, [r3, #28]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	61da      	str	r2, [r3, #28]
      break;
 8003dac:	e021      	b.n	8003df2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68b9      	ldr	r1, [r7, #8]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 fa2c 	bl	8004212 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69da      	ldr	r2, [r3, #28]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69d9      	ldr	r1, [r3, #28]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	021a      	lsls	r2, r3, #8
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	61da      	str	r2, [r3, #28]
      break;
 8003dee:	e000      	b.n	8003df2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003df0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d101      	bne.n	8003e24 <HAL_TIM_ConfigClockSource+0x18>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e0a6      	b.n	8003f72 <HAL_TIM_ConfigClockSource+0x166>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e4a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b40      	cmp	r3, #64	; 0x40
 8003e5a:	d067      	beq.n	8003f2c <HAL_TIM_ConfigClockSource+0x120>
 8003e5c:	2b40      	cmp	r3, #64	; 0x40
 8003e5e:	d80b      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x6c>
 8003e60:	2b10      	cmp	r3, #16
 8003e62:	d073      	beq.n	8003f4c <HAL_TIM_ConfigClockSource+0x140>
 8003e64:	2b10      	cmp	r3, #16
 8003e66:	d802      	bhi.n	8003e6e <HAL_TIM_ConfigClockSource+0x62>
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d06f      	beq.n	8003f4c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003e6c:	e078      	b.n	8003f60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e6e:	2b20      	cmp	r3, #32
 8003e70:	d06c      	beq.n	8003f4c <HAL_TIM_ConfigClockSource+0x140>
 8003e72:	2b30      	cmp	r3, #48	; 0x30
 8003e74:	d06a      	beq.n	8003f4c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003e76:	e073      	b.n	8003f60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e78:	2b70      	cmp	r3, #112	; 0x70
 8003e7a:	d00d      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x8c>
 8003e7c:	2b70      	cmp	r3, #112	; 0x70
 8003e7e:	d804      	bhi.n	8003e8a <HAL_TIM_ConfigClockSource+0x7e>
 8003e80:	2b50      	cmp	r3, #80	; 0x50
 8003e82:	d033      	beq.n	8003eec <HAL_TIM_ConfigClockSource+0xe0>
 8003e84:	2b60      	cmp	r3, #96	; 0x60
 8003e86:	d041      	beq.n	8003f0c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003e88:	e06a      	b.n	8003f60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e8e:	d066      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x152>
 8003e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e94:	d017      	beq.n	8003ec6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003e96:	e063      	b.n	8003f60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	6899      	ldr	r1, [r3, #8]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f000 fa68 	bl	800437c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003eba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	609a      	str	r2, [r3, #8]
      break;
 8003ec4:	e04c      	b.n	8003f60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	6899      	ldr	r1, [r3, #8]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f000 fa51 	bl	800437c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ee8:	609a      	str	r2, [r3, #8]
      break;
 8003eea:	e039      	b.n	8003f60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	6859      	ldr	r1, [r3, #4]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f000 f9c8 	bl	800428e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2150      	movs	r1, #80	; 0x50
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 fa1f 	bl	8004348 <TIM_ITRx_SetConfig>
      break;
 8003f0a:	e029      	b.n	8003f60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	6859      	ldr	r1, [r3, #4]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	f000 f9e6 	bl	80042ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2160      	movs	r1, #96	; 0x60
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 fa0f 	bl	8004348 <TIM_ITRx_SetConfig>
      break;
 8003f2a:	e019      	b.n	8003f60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6818      	ldr	r0, [r3, #0]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	6859      	ldr	r1, [r3, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	f000 f9a8 	bl	800428e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2140      	movs	r1, #64	; 0x40
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 f9ff 	bl	8004348 <TIM_ITRx_SetConfig>
      break;
 8003f4a:	e009      	b.n	8003f60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4619      	mov	r1, r3
 8003f56:	4610      	mov	r0, r2
 8003f58:	f000 f9f6 	bl	8004348 <TIM_ITRx_SetConfig>
      break;
 8003f5c:	e000      	b.n	8003f60 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003f5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr

08003f9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bc80      	pop	{r7}
 8003fc0:	4770      	bx	lr
	...

08003fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fda:	d00f      	beq.n	8003ffc <TIM_Base_SetConfig+0x38>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a2b      	ldr	r2, [pc, #172]	; (800408c <TIM_Base_SetConfig+0xc8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d00b      	beq.n	8003ffc <TIM_Base_SetConfig+0x38>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a2a      	ldr	r2, [pc, #168]	; (8004090 <TIM_Base_SetConfig+0xcc>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d007      	beq.n	8003ffc <TIM_Base_SetConfig+0x38>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a29      	ldr	r2, [pc, #164]	; (8004094 <TIM_Base_SetConfig+0xd0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d003      	beq.n	8003ffc <TIM_Base_SetConfig+0x38>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a28      	ldr	r2, [pc, #160]	; (8004098 <TIM_Base_SetConfig+0xd4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d108      	bne.n	800400e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4313      	orrs	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004014:	d017      	beq.n	8004046 <TIM_Base_SetConfig+0x82>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a1c      	ldr	r2, [pc, #112]	; (800408c <TIM_Base_SetConfig+0xc8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d013      	beq.n	8004046 <TIM_Base_SetConfig+0x82>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a1b      	ldr	r2, [pc, #108]	; (8004090 <TIM_Base_SetConfig+0xcc>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00f      	beq.n	8004046 <TIM_Base_SetConfig+0x82>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a1a      	ldr	r2, [pc, #104]	; (8004094 <TIM_Base_SetConfig+0xd0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00b      	beq.n	8004046 <TIM_Base_SetConfig+0x82>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a19      	ldr	r2, [pc, #100]	; (8004098 <TIM_Base_SetConfig+0xd4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d007      	beq.n	8004046 <TIM_Base_SetConfig+0x82>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a18      	ldr	r2, [pc, #96]	; (800409c <TIM_Base_SetConfig+0xd8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d003      	beq.n	8004046 <TIM_Base_SetConfig+0x82>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a17      	ldr	r2, [pc, #92]	; (80040a0 <TIM_Base_SetConfig+0xdc>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d108      	bne.n	8004058 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800404c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	4313      	orrs	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	615a      	str	r2, [r3, #20]
}
 8004082:	bf00      	nop
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr
 800408c:	40000400 	.word	0x40000400
 8004090:	40000800 	.word	0x40000800
 8004094:	40000c00 	.word	0x40000c00
 8004098:	40010800 	.word	0x40010800
 800409c:	40010c00 	.word	0x40010c00
 80040a0:	40011000 	.word	0x40011000

080040a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	f023 0201 	bic.w	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 0303 	bic.w	r3, r3, #3
 80040da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f023 0302 	bic.w	r3, r3, #2
 80040ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	621a      	str	r2, [r3, #32]
}
 8004112:	bf00      	nop
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr

0800411c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	f023 0210 	bic.w	r2, r3, #16
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800414a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	021b      	lsls	r3, r3, #8
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f023 0320 	bic.w	r3, r3, #32
 8004166:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	621a      	str	r2, [r3, #32]
}
 800418e:	bf00      	nop
 8004190:	371c      	adds	r7, #28
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0303 	bic.w	r3, r3, #3
 80041ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	621a      	str	r2, [r3, #32]
}
 8004208:	bf00      	nop
 800420a:	371c      	adds	r7, #28
 800420c:	46bd      	mov	sp, r7
 800420e:	bc80      	pop	{r7}
 8004210:	4770      	bx	lr

08004212 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004212:	b480      	push	{r7}
 8004214:	b087      	sub	sp, #28
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004240:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004248:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	021b      	lsls	r3, r3, #8
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800425c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	031b      	lsls	r3, r3, #12
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	621a      	str	r2, [r3, #32]
}
 8004284:	bf00      	nop
 8004286:	371c      	adds	r7, #28
 8004288:	46bd      	mov	sp, r7
 800428a:	bc80      	pop	{r7}
 800428c:	4770      	bx	lr

0800428e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800428e:	b480      	push	{r7}
 8004290:	b087      	sub	sp, #28
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	f023 0201 	bic.w	r2, r3, #1
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f023 030a 	bic.w	r3, r3, #10
 80042ca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	621a      	str	r2, [r3, #32]
}
 80042e0:	bf00      	nop
 80042e2:	371c      	adds	r7, #28
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr

080042ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b087      	sub	sp, #28
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	f023 0210 	bic.w	r2, r3, #16
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004314:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	031b      	lsls	r3, r3, #12
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	4313      	orrs	r3, r2
 800431e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004326:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	4313      	orrs	r3, r2
 8004330:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	621a      	str	r2, [r3, #32]
}
 800433e:	bf00      	nop
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	bc80      	pop	{r7}
 8004346:	4770      	bx	lr

08004348 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4313      	orrs	r3, r2
 8004366:	f043 0307 	orr.w	r3, r3, #7
 800436a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	609a      	str	r2, [r3, #8]
}
 8004372:	bf00      	nop
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr

0800437c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004396:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	021a      	lsls	r2, r3, #8
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	431a      	orrs	r2, r3
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	609a      	str	r2, [r3, #8]
}
 80043b0:	bf00      	nop
 80043b2:	371c      	adds	r7, #28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bc80      	pop	{r7}
 80043b8:	4770      	bx	lr

080043ba <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b087      	sub	sp, #28
 80043be:	af00      	add	r7, sp, #0
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	f003 031f 	and.w	r3, r3, #31
 80043cc:	2201      	movs	r2, #1
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a1a      	ldr	r2, [r3, #32]
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	43db      	mvns	r3, r3
 80043dc:	401a      	ands	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a1a      	ldr	r2, [r3, #32]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f003 031f 	and.w	r3, r3, #31
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	fa01 f303 	lsl.w	r3, r1, r3
 80043f2:	431a      	orrs	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	621a      	str	r2, [r3, #32]
}
 80043f8:	bf00      	nop
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bc80      	pop	{r7}
 8004400:	4770      	bx	lr

08004402 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004402:	b480      	push	{r7}
 8004404:	b085      	sub	sp, #20
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
 800440a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004416:	2302      	movs	r3, #2
 8004418:	e032      	b.n	8004480 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2202      	movs	r2, #2
 8004426:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004440:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4313      	orrs	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004452:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	4313      	orrs	r3, r2
 800445c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	bc80      	pop	{r7}
 8004488:	4770      	bx	lr

0800448a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e03f      	b.n	800451c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d106      	bne.n	80044b6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7fc ffa5 	bl	8001400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2224      	movs	r2, #36	; 0x24
 80044ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f9b2 	bl	8004838 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691a      	ldr	r2, [r3, #16]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695a      	ldr	r2, [r3, #20]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004502:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2220      	movs	r2, #32
 8004516:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b088      	sub	sp, #32
 8004528:	af02      	add	r7, sp, #8
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	603b      	str	r3, [r7, #0]
 8004530:	4613      	mov	r3, r2
 8004532:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b20      	cmp	r3, #32
 8004542:	f040 8083 	bne.w	800464c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <HAL_UART_Transmit+0x2e>
 800454c:	88fb      	ldrh	r3, [r7, #6]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e07b      	b.n	800464e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_UART_Transmit+0x40>
 8004560:	2302      	movs	r3, #2
 8004562:	e074      	b.n	800464e <HAL_UART_Transmit+0x12a>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2221      	movs	r2, #33	; 0x21
 8004576:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800457a:	f7fc ffd5 	bl	8001528 <HAL_GetTick>
 800457e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	88fa      	ldrh	r2, [r7, #6]
 8004584:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	88fa      	ldrh	r2, [r7, #6]
 800458a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800458c:	e042      	b.n	8004614 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004592:	b29b      	uxth	r3, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a4:	d122      	bne.n	80045ec <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2200      	movs	r2, #0
 80045ae:	2180      	movs	r1, #128	; 0x80
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 f8f6 	bl	80047a2 <UART_WaitOnFlagUntilTimeout>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e046      	b.n	800464e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045d2:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d103      	bne.n	80045e4 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	3302      	adds	r3, #2
 80045e0:	60bb      	str	r3, [r7, #8]
 80045e2:	e017      	b.n	8004614 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	3301      	adds	r3, #1
 80045e8:	60bb      	str	r3, [r7, #8]
 80045ea:	e013      	b.n	8004614 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	2200      	movs	r2, #0
 80045f4:	2180      	movs	r1, #128	; 0x80
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 f8d3 	bl	80047a2 <UART_WaitOnFlagUntilTimeout>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e023      	b.n	800464e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	60ba      	str	r2, [r7, #8]
 800460c:	781a      	ldrb	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1b7      	bne.n	800458e <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2200      	movs	r2, #0
 8004626:	2140      	movs	r1, #64	; 0x40
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 f8ba 	bl	80047a2 <UART_WaitOnFlagUntilTimeout>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e00a      	b.n	800464e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004648:	2300      	movs	r3, #0
 800464a:	e000      	b.n	800464e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800464c:	2302      	movs	r3, #2
  }
}
 800464e:	4618      	mov	r0, r3
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b088      	sub	sp, #32
 800465a:	af02      	add	r7, sp, #8
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	603b      	str	r3, [r7, #0]
 8004662:	4613      	mov	r3, r2
 8004664:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b20      	cmp	r3, #32
 8004674:	f040 8090 	bne.w	8004798 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <HAL_UART_Receive+0x2e>
 800467e:	88fb      	ldrh	r3, [r7, #6]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e088      	b.n	800479a <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_UART_Receive+0x40>
 8004692:	2302      	movs	r3, #2
 8004694:	e081      	b.n	800479a <HAL_UART_Receive+0x144>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2222      	movs	r2, #34	; 0x22
 80046a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046ac:	f7fc ff3c 	bl	8001528 <HAL_GetTick>
 80046b0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	88fa      	ldrh	r2, [r7, #6]
 80046b6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	88fa      	ldrh	r2, [r7, #6]
 80046bc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80046be:	e05c      	b.n	800477a <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d6:	d12b      	bne.n	8004730 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2200      	movs	r2, #0
 80046e0:	2120      	movs	r1, #32
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 f85d 	bl	80047a2 <UART_WaitOnFlagUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e053      	b.n	800479a <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10c      	bne.n	8004718 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	b29b      	uxth	r3, r3
 8004706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800470a:	b29a      	uxth	r2, r3
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	3302      	adds	r3, #2
 8004714:	60bb      	str	r3, [r7, #8]
 8004716:	e030      	b.n	800477a <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	b29b      	uxth	r3, r3
 8004720:	b2db      	uxtb	r3, r3
 8004722:	b29a      	uxth	r2, r3
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	3301      	adds	r3, #1
 800472c:	60bb      	str	r3, [r7, #8]
 800472e:	e024      	b.n	800477a <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2200      	movs	r2, #0
 8004738:	2120      	movs	r1, #32
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f831 	bl	80047a2 <UART_WaitOnFlagUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e027      	b.n	800479a <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d108      	bne.n	8004764 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6859      	ldr	r1, [r3, #4]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	1c5a      	adds	r2, r3, #1
 800475c:	60ba      	str	r2, [r7, #8]
 800475e:	b2ca      	uxtb	r2, r1
 8004760:	701a      	strb	r2, [r3, #0]
 8004762:	e00a      	b.n	800477a <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	b2da      	uxtb	r2, r3
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	1c59      	adds	r1, r3, #1
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004776:	b2d2      	uxtb	r2, r2
 8004778:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d19d      	bne.n	80046c0 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	e000      	b.n	800479a <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004798:	2302      	movs	r3, #2
  }
}
 800479a:	4618      	mov	r0, r3
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b084      	sub	sp, #16
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	60f8      	str	r0, [r7, #12]
 80047aa:	60b9      	str	r1, [r7, #8]
 80047ac:	603b      	str	r3, [r7, #0]
 80047ae:	4613      	mov	r3, r2
 80047b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b2:	e02c      	b.n	800480e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ba:	d028      	beq.n	800480e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d007      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80047c2:	f7fc feb1 	bl	8001528 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d21d      	bcs.n	800480e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047e0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695a      	ldr	r2, [r3, #20]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0201 	bic.w	r2, r2, #1
 80047f0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e00f      	b.n	800482e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4013      	ands	r3, r2
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	429a      	cmp	r2, r3
 800481c:	bf0c      	ite	eq
 800481e:	2301      	moveq	r3, #1
 8004820:	2300      	movne	r3, #0
 8004822:	b2db      	uxtb	r3, r3
 8004824:	461a      	mov	r2, r3
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	429a      	cmp	r2, r3
 800482a:	d0c3      	beq.n	80047b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	431a      	orrs	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	4313      	orrs	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004878:	f023 030c 	bic.w	r3, r3, #12
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6812      	ldr	r2, [r2, #0]
 8004880:	68f9      	ldr	r1, [r7, #12]
 8004882:	430b      	orrs	r3, r1
 8004884:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	699a      	ldr	r2, [r3, #24]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a4:	f040 80a5 	bne.w	80049f2 <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4aa4      	ldr	r2, [pc, #656]	; (8004b40 <UART_SetConfig+0x308>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d14f      	bne.n	8004952 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048b2:	f7fe ffc1 	bl	8003838 <HAL_RCC_GetPCLK2Freq>
 80048b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	4613      	mov	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	009a      	lsls	r2, r3, #2
 80048c2:	441a      	add	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ce:	4a9d      	ldr	r2, [pc, #628]	; (8004b44 <UART_SetConfig+0x30c>)
 80048d0:	fba2 2303 	umull	r2, r3, r2, r3
 80048d4:	095b      	lsrs	r3, r3, #5
 80048d6:	0119      	lsls	r1, r3, #4
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	009a      	lsls	r2, r3, #2
 80048e2:	441a      	add	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80048ee:	4b95      	ldr	r3, [pc, #596]	; (8004b44 <UART_SetConfig+0x30c>)
 80048f0:	fba3 0302 	umull	r0, r3, r3, r2
 80048f4:	095b      	lsrs	r3, r3, #5
 80048f6:	2064      	movs	r0, #100	; 0x64
 80048f8:	fb00 f303 	mul.w	r3, r0, r3
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	3332      	adds	r3, #50	; 0x32
 8004902:	4a90      	ldr	r2, [pc, #576]	; (8004b44 <UART_SetConfig+0x30c>)
 8004904:	fba2 2303 	umull	r2, r3, r2, r3
 8004908:	095b      	lsrs	r3, r3, #5
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004910:	4419      	add	r1, r3
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	4613      	mov	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	009a      	lsls	r2, r3, #2
 800491c:	441a      	add	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	fbb2 f2f3 	udiv	r2, r2, r3
 8004928:	4b86      	ldr	r3, [pc, #536]	; (8004b44 <UART_SetConfig+0x30c>)
 800492a:	fba3 0302 	umull	r0, r3, r3, r2
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	2064      	movs	r0, #100	; 0x64
 8004932:	fb00 f303 	mul.w	r3, r0, r3
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	3332      	adds	r3, #50	; 0x32
 800493c:	4a81      	ldr	r2, [pc, #516]	; (8004b44 <UART_SetConfig+0x30c>)
 800493e:	fba2 2303 	umull	r2, r3, r2, r3
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	f003 0207 	and.w	r2, r3, #7
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	440a      	add	r2, r1
 800494e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004950:	e0f1      	b.n	8004b36 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004952:	f7fe ff5d 	bl	8003810 <HAL_RCC_GetPCLK1Freq>
 8004956:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	4613      	mov	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	009a      	lsls	r2, r3, #2
 8004962:	441a      	add	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	fbb2 f3f3 	udiv	r3, r2, r3
 800496e:	4a75      	ldr	r2, [pc, #468]	; (8004b44 <UART_SetConfig+0x30c>)
 8004970:	fba2 2303 	umull	r2, r3, r2, r3
 8004974:	095b      	lsrs	r3, r3, #5
 8004976:	0119      	lsls	r1, r3, #4
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	4613      	mov	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	009a      	lsls	r2, r3, #2
 8004982:	441a      	add	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	fbb2 f2f3 	udiv	r2, r2, r3
 800498e:	4b6d      	ldr	r3, [pc, #436]	; (8004b44 <UART_SetConfig+0x30c>)
 8004990:	fba3 0302 	umull	r0, r3, r3, r2
 8004994:	095b      	lsrs	r3, r3, #5
 8004996:	2064      	movs	r0, #100	; 0x64
 8004998:	fb00 f303 	mul.w	r3, r0, r3
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	3332      	adds	r3, #50	; 0x32
 80049a2:	4a68      	ldr	r2, [pc, #416]	; (8004b44 <UART_SetConfig+0x30c>)
 80049a4:	fba2 2303 	umull	r2, r3, r2, r3
 80049a8:	095b      	lsrs	r3, r3, #5
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049b0:	4419      	add	r1, r3
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	4613      	mov	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	009a      	lsls	r2, r3, #2
 80049bc:	441a      	add	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80049c8:	4b5e      	ldr	r3, [pc, #376]	; (8004b44 <UART_SetConfig+0x30c>)
 80049ca:	fba3 0302 	umull	r0, r3, r3, r2
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	2064      	movs	r0, #100	; 0x64
 80049d2:	fb00 f303 	mul.w	r3, r0, r3
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	3332      	adds	r3, #50	; 0x32
 80049dc:	4a59      	ldr	r2, [pc, #356]	; (8004b44 <UART_SetConfig+0x30c>)
 80049de:	fba2 2303 	umull	r2, r3, r2, r3
 80049e2:	095b      	lsrs	r3, r3, #5
 80049e4:	f003 0207 	and.w	r2, r3, #7
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	440a      	add	r2, r1
 80049ee:	609a      	str	r2, [r3, #8]
}
 80049f0:	e0a1      	b.n	8004b36 <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a52      	ldr	r2, [pc, #328]	; (8004b40 <UART_SetConfig+0x308>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d14e      	bne.n	8004a9a <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 80049fc:	f7fe ff1c 	bl	8003838 <HAL_RCC_GetPCLK2Freq>
 8004a00:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	4613      	mov	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	009a      	lsls	r2, r3, #2
 8004a0c:	441a      	add	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a18:	4a4a      	ldr	r2, [pc, #296]	; (8004b44 <UART_SetConfig+0x30c>)
 8004a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1e:	095b      	lsrs	r3, r3, #5
 8004a20:	0119      	lsls	r1, r3, #4
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	009a      	lsls	r2, r3, #2
 8004a2c:	441a      	add	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a38:	4b42      	ldr	r3, [pc, #264]	; (8004b44 <UART_SetConfig+0x30c>)
 8004a3a:	fba3 0302 	umull	r0, r3, r3, r2
 8004a3e:	095b      	lsrs	r3, r3, #5
 8004a40:	2064      	movs	r0, #100	; 0x64
 8004a42:	fb00 f303 	mul.w	r3, r0, r3
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	3332      	adds	r3, #50	; 0x32
 8004a4c:	4a3d      	ldr	r2, [pc, #244]	; (8004b44 <UART_SetConfig+0x30c>)
 8004a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a52:	095b      	lsrs	r3, r3, #5
 8004a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a58:	4419      	add	r1, r3
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	009a      	lsls	r2, r3, #2
 8004a64:	441a      	add	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a70:	4b34      	ldr	r3, [pc, #208]	; (8004b44 <UART_SetConfig+0x30c>)
 8004a72:	fba3 0302 	umull	r0, r3, r3, r2
 8004a76:	095b      	lsrs	r3, r3, #5
 8004a78:	2064      	movs	r0, #100	; 0x64
 8004a7a:	fb00 f303 	mul.w	r3, r0, r3
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	3332      	adds	r3, #50	; 0x32
 8004a84:	4a2f      	ldr	r2, [pc, #188]	; (8004b44 <UART_SetConfig+0x30c>)
 8004a86:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8a:	095b      	lsrs	r3, r3, #5
 8004a8c:	f003 020f 	and.w	r2, r3, #15
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	440a      	add	r2, r1
 8004a96:	609a      	str	r2, [r3, #8]
}
 8004a98:	e04d      	b.n	8004b36 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a9a:	f7fe feb9 	bl	8003810 <HAL_RCC_GetPCLK1Freq>
 8004a9e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	009a      	lsls	r2, r3, #2
 8004aaa:	441a      	add	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab6:	4a23      	ldr	r2, [pc, #140]	; (8004b44 <UART_SetConfig+0x30c>)
 8004ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8004abc:	095b      	lsrs	r3, r3, #5
 8004abe:	0119      	lsls	r1, r3, #4
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	009a      	lsls	r2, r3, #2
 8004aca:	441a      	add	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ad6:	4b1b      	ldr	r3, [pc, #108]	; (8004b44 <UART_SetConfig+0x30c>)
 8004ad8:	fba3 0302 	umull	r0, r3, r3, r2
 8004adc:	095b      	lsrs	r3, r3, #5
 8004ade:	2064      	movs	r0, #100	; 0x64
 8004ae0:	fb00 f303 	mul.w	r3, r0, r3
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	3332      	adds	r3, #50	; 0x32
 8004aea:	4a16      	ldr	r2, [pc, #88]	; (8004b44 <UART_SetConfig+0x30c>)
 8004aec:	fba2 2303 	umull	r2, r3, r2, r3
 8004af0:	095b      	lsrs	r3, r3, #5
 8004af2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004af6:	4419      	add	r1, r3
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	4613      	mov	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	009a      	lsls	r2, r3, #2
 8004b02:	441a      	add	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b0e:	4b0d      	ldr	r3, [pc, #52]	; (8004b44 <UART_SetConfig+0x30c>)
 8004b10:	fba3 0302 	umull	r0, r3, r3, r2
 8004b14:	095b      	lsrs	r3, r3, #5
 8004b16:	2064      	movs	r0, #100	; 0x64
 8004b18:	fb00 f303 	mul.w	r3, r0, r3
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	3332      	adds	r3, #50	; 0x32
 8004b22:	4a08      	ldr	r2, [pc, #32]	; (8004b44 <UART_SetConfig+0x30c>)
 8004b24:	fba2 2303 	umull	r2, r3, r2, r3
 8004b28:	095b      	lsrs	r3, r3, #5
 8004b2a:	f003 020f 	and.w	r2, r3, #15
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	440a      	add	r2, r1
 8004b34:	609a      	str	r2, [r3, #8]
}
 8004b36:	bf00      	nop
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	40013800 	.word	0x40013800
 8004b44:	51eb851f 	.word	0x51eb851f

08004b48 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b4e:	f3ef 8305 	mrs	r3, IPSR
 8004b52:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10f      	bne.n	8004b7a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b5e:	607b      	str	r3, [r7, #4]
  return(result);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d109      	bne.n	8004b7a <osKernelInitialize+0x32>
 8004b66:	4b10      	ldr	r3, [pc, #64]	; (8004ba8 <osKernelInitialize+0x60>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d109      	bne.n	8004b82 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b6e:	f3ef 8311 	mrs	r3, BASEPRI
 8004b72:	603b      	str	r3, [r7, #0]
  return(result);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004b7a:	f06f 0305 	mvn.w	r3, #5
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	e00c      	b.n	8004b9c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004b82:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <osKernelInitialize+0x60>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d105      	bne.n	8004b96 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004b8a:	4b07      	ldr	r3, [pc, #28]	; (8004ba8 <osKernelInitialize+0x60>)
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004b90:	2300      	movs	r3, #0
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	e002      	b.n	8004b9c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004b96:	f04f 33ff 	mov.w	r3, #4294967295
 8004b9a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bc80      	pop	{r7}
 8004ba6:	4770      	bx	lr
 8004ba8:	200000fc 	.word	0x200000fc

08004bac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bb2:	f3ef 8305 	mrs	r3, IPSR
 8004bb6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bb8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10f      	bne.n	8004bde <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8004bc2:	607b      	str	r3, [r7, #4]
  return(result);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d109      	bne.n	8004bde <osKernelStart+0x32>
 8004bca:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <osKernelStart+0x64>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d109      	bne.n	8004be6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bd2:	f3ef 8311 	mrs	r3, BASEPRI
 8004bd6:	603b      	str	r3, [r7, #0]
  return(result);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004bde:	f06f 0305 	mvn.w	r3, #5
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	e00e      	b.n	8004c04 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004be6:	4b0a      	ldr	r3, [pc, #40]	; (8004c10 <osKernelStart+0x64>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d107      	bne.n	8004bfe <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004bee:	4b08      	ldr	r3, [pc, #32]	; (8004c10 <osKernelStart+0x64>)
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004bf4:	f001 fa50 	bl	8006098 <vTaskStartScheduler>
      stat = osOK;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	e002      	b.n	8004c04 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8004c02:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004c04:	68fb      	ldr	r3, [r7, #12]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	200000fc 	.word	0x200000fc

08004c14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b092      	sub	sp, #72	; 0x48
 8004c18:	af04      	add	r7, sp, #16
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004c20:	2300      	movs	r3, #0
 8004c22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c24:	f3ef 8305 	mrs	r3, IPSR
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f040 8094 	bne.w	8004d5a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c32:	f3ef 8310 	mrs	r3, PRIMASK
 8004c36:	623b      	str	r3, [r7, #32]
  return(result);
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f040 808d 	bne.w	8004d5a <osThreadNew+0x146>
 8004c40:	4b48      	ldr	r3, [pc, #288]	; (8004d64 <osThreadNew+0x150>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d106      	bne.n	8004c56 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c48:	f3ef 8311 	mrs	r3, BASEPRI
 8004c4c:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f040 8082 	bne.w	8004d5a <osThreadNew+0x146>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d07e      	beq.n	8004d5a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004c5c:	2380      	movs	r3, #128	; 0x80
 8004c5e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004c60:	2318      	movs	r3, #24
 8004c62:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004c64:	2300      	movs	r3, #0
 8004c66:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004c68:	f107 031b 	add.w	r3, r7, #27
 8004c6c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c72:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d045      	beq.n	8004d06 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <osThreadNew+0x74>
        name = attr->name;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d008      	beq.n	8004cae <osThreadNew+0x9a>
 8004c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9e:	2b38      	cmp	r3, #56	; 0x38
 8004ca0:	d805      	bhi.n	8004cae <osThreadNew+0x9a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <osThreadNew+0x9e>
        return (NULL);
 8004cae:	2300      	movs	r3, #0
 8004cb0:	e054      	b.n	8004d5c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	089b      	lsrs	r3, r3, #2
 8004cc0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00e      	beq.n	8004ce8 <osThreadNew+0xd4>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	2b5b      	cmp	r3, #91	; 0x5b
 8004cd0:	d90a      	bls.n	8004ce8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d006      	beq.n	8004ce8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <osThreadNew+0xd4>
        mem = 1;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ce6:	e010      	b.n	8004d0a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10c      	bne.n	8004d0a <osThreadNew+0xf6>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d108      	bne.n	8004d0a <osThreadNew+0xf6>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d104      	bne.n	8004d0a <osThreadNew+0xf6>
          mem = 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d04:	e001      	b.n	8004d0a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004d06:	2300      	movs	r3, #0
 8004d08:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d110      	bne.n	8004d32 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d18:	9202      	str	r2, [sp, #8]
 8004d1a:	9301      	str	r3, [sp, #4]
 8004d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 ffee 	bl	8005d08 <xTaskCreateStatic>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	e013      	b.n	8004d5a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d110      	bne.n	8004d5a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	f107 0314 	add.w	r3, r7, #20
 8004d40:	9301      	str	r3, [sp, #4]
 8004d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f001 f835 	bl	8005dba <xTaskCreate>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d001      	beq.n	8004d5a <osThreadNew+0x146>
          hTask = NULL;
 8004d56:	2300      	movs	r3, #0
 8004d58:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004d5a:	697b      	ldr	r3, [r7, #20]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3738      	adds	r7, #56	; 0x38
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	200000fc 	.word	0x200000fc

08004d68 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d70:	f3ef 8305 	mrs	r3, IPSR
 8004d74:	613b      	str	r3, [r7, #16]
  return(result);
 8004d76:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10f      	bne.n	8004d9c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d7c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d80:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d109      	bne.n	8004d9c <osDelay+0x34>
 8004d88:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <osDelay+0x58>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d109      	bne.n	8004da4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d90:	f3ef 8311 	mrs	r3, BASEPRI
 8004d94:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <osDelay+0x3c>
    stat = osErrorISR;
 8004d9c:	f06f 0305 	mvn.w	r3, #5
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	e007      	b.n	8004db4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f001 f93e 	bl	8006030 <vTaskDelay>
    }
  }

  return (stat);
 8004db4:	697b      	ldr	r3, [r7, #20]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	200000fc 	.word	0x200000fc

08004dc4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4a06      	ldr	r2, [pc, #24]	; (8004dec <vApplicationGetIdleTaskMemory+0x28>)
 8004dd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	4a05      	ldr	r2, [pc, #20]	; (8004df0 <vApplicationGetIdleTaskMemory+0x2c>)
 8004dda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2280      	movs	r2, #128	; 0x80
 8004de0:	601a      	str	r2, [r3, #0]
}
 8004de2:	bf00      	nop
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bc80      	pop	{r7}
 8004dea:	4770      	bx	lr
 8004dec:	20000100 	.word	0x20000100
 8004df0:	2000015c 	.word	0x2000015c

08004df4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4a07      	ldr	r2, [pc, #28]	; (8004e20 <vApplicationGetTimerTaskMemory+0x2c>)
 8004e04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	4a06      	ldr	r2, [pc, #24]	; (8004e24 <vApplicationGetTimerTaskMemory+0x30>)
 8004e0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e12:	601a      	str	r2, [r3, #0]
}
 8004e14:	bf00      	nop
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bc80      	pop	{r7}
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	2000035c 	.word	0x2000035c
 8004e24:	200003b8 	.word	0x200003b8

08004e28 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8004e2e:	2020      	movs	r0, #32
 8004e30:	f002 fc60 	bl	80076f4 <pvPortMalloc>
 8004e34:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	3304      	adds	r3, #4
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 f99e 	bl	8005188 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8004e52:	687b      	ldr	r3, [r7, #4]
	}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b090      	sub	sp, #64	; 0x40
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
 8004e68:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004e72:	2300      	movs	r3, #0
 8004e74:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d109      	bne.n	8004e90 <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	623b      	str	r3, [r7, #32]
 8004e8e:	e7fe      	b.n	8004e8e <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d009      	beq.n	8004eae <xEventGroupWaitBits+0x52>
 8004e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9e:	f383 8811 	msr	BASEPRI, r3
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	61fb      	str	r3, [r7, #28]
 8004eac:	e7fe      	b.n	8004eac <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d109      	bne.n	8004ec8 <xEventGroupWaitBits+0x6c>
 8004eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	61bb      	str	r3, [r7, #24]
 8004ec6:	e7fe      	b.n	8004ec6 <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ec8:	f001 fdbe 	bl	8006a48 <xTaskGetSchedulerState>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d102      	bne.n	8004ed8 <xEventGroupWaitBits+0x7c>
 8004ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <xEventGroupWaitBits+0x80>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e000      	b.n	8004ede <xEventGroupWaitBits+0x82>
 8004edc:	2300      	movs	r3, #0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d109      	bne.n	8004ef6 <xEventGroupWaitBits+0x9a>
 8004ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	e7fe      	b.n	8004ef4 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 8004ef6:	f001 f933 	bl	8006160 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	68b9      	ldr	r1, [r7, #8]
 8004f04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f06:	f000 f909 	bl	800511c <prvTestWaitCondition>
 8004f0a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8004f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00e      	beq.n	8004f30 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8004f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f14:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004f16:	2300      	movs	r3, #0
 8004f18:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d028      	beq.n	8004f72 <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	43db      	mvns	r3, r3
 8004f28:	401a      	ands	r2, r3
 8004f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	e020      	b.n	8004f72 <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8004f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d104      	bne.n	8004f40 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f38:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f3e:	e018      	b.n	8004f72 <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f4c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f5a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f5e:	1d18      	adds	r0, r3, #4
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f64:	4313      	orrs	r3, r2
 8004f66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f68:	4619      	mov	r1, r3
 8004f6a:	f001 faef 	bl	800654c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004f72:	f001 f903 	bl	800617c <xTaskResumeAll>
 8004f76:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d031      	beq.n	8004fe2 <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d107      	bne.n	8004f94 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8004f84:	4b19      	ldr	r3, [pc, #100]	; (8004fec <xEventGroupWaitBits+0x190>)
 8004f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004f94:	f001 fde2 	bl	8006b5c <uxTaskResetEventItemValue>
 8004f98:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d11a      	bne.n	8004fda <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 8004fa4:	f002 fab0 	bl	8007508 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	68b9      	ldr	r1, [r7, #8]
 8004fb2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004fb4:	f000 f8b2 	bl	800511c <prvTestWaitCondition>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d009      	beq.n	8004fd2 <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d006      	beq.n	8004fd2 <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	43db      	mvns	r3, r3
 8004fcc:	401a      	ands	r2, r3
 8004fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8004fd6:	f002 fac5 	bl	8007564 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fdc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8004fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3740      	adds	r7, #64	; 0x40
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	e000ed04 	.word	0xe000ed04

08004ff0 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08e      	sub	sp, #56	; 0x38
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8005002:	2300      	movs	r3, #0
 8005004:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d109      	bne.n	8005020 <xEventGroupSetBits+0x30>
 800500c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005010:	f383 8811 	msr	BASEPRI, r3
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	613b      	str	r3, [r7, #16]
 800501e:	e7fe      	b.n	800501e <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d009      	beq.n	800503e <xEventGroupSetBits+0x4e>
 800502a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	e7fe      	b.n	800503c <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005040:	3304      	adds	r3, #4
 8005042:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	3308      	adds	r3, #8
 8005048:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800504a:	f001 f889 	bl	8006160 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	431a      	orrs	r2, r3
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005060:	e03c      	b.n	80050dc <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800506e:	2300      	movs	r3, #0
 8005070:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005078:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005080:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d108      	bne.n	800509e <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	4013      	ands	r3, r2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00b      	beq.n	80050b0 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8005098:	2301      	movs	r3, #1
 800509a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800509c:	e008      	b.n	80050b0 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	4013      	ands	r3, r2
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d101      	bne.n	80050b0 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80050ac:	2301      	movs	r3, #1
 80050ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80050b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d010      	beq.n	80050d8 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80050c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80050c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80050d0:	4619      	mov	r1, r3
 80050d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80050d4:	f001 fb00 	bl	80066d8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80050dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d1be      	bne.n	8005062 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ea:	43db      	mvns	r3, r3
 80050ec:	401a      	ands	r2, r3
 80050ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80050f2:	f001 f843 	bl	800617c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80050f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f8:	681b      	ldr	r3, [r3, #0]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3738      	adds	r7, #56	; 0x38
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b082      	sub	sp, #8
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 800510c:	6839      	ldr	r1, [r7, #0]
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7ff ff6e 	bl	8004ff0 <xEventGroupSetBits>
}
 8005114:	bf00      	nop
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005128:	2300      	movs	r3, #0
 800512a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d107      	bne.n	8005142 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4013      	ands	r3, r2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800513c:	2301      	movs	r3, #1
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	e007      	b.n	8005152 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	4013      	ands	r3, r2
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	429a      	cmp	r2, r3
 800514c:	d101      	bne.n	8005152 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800514e:	2301      	movs	r3, #1
 8005150:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005152:	697b      	ldr	r3, [r7, #20]
}
 8005154:	4618      	mov	r0, r3
 8005156:	371c      	adds	r7, #28
 8005158:	46bd      	mov	sp, r7
 800515a:	bc80      	pop	{r7}
 800515c:	4770      	bx	lr
	...

08005160 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	68f9      	ldr	r1, [r7, #12]
 8005172:	4804      	ldr	r0, [pc, #16]	; (8005184 <xEventGroupSetBitsFromISR+0x24>)
 8005174:	f002 f8ba 	bl	80072ec <xTimerPendFunctionCallFromISR>
 8005178:	6178      	str	r0, [r7, #20]

		return xReturn;
 800517a:	697b      	ldr	r3, [r7, #20]
	}
 800517c:	4618      	mov	r0, r3
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	08005103 	.word	0x08005103

08005188 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f103 0208 	add.w	r2, r3, #8
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f04f 32ff 	mov.w	r2, #4294967295
 80051a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f103 0208 	add.w	r2, r3, #8
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f103 0208 	add.w	r2, r3, #8
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bc80      	pop	{r7}
 80051c4:	4770      	bx	lr

080051c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc80      	pop	{r7}
 80051dc:	4770      	bx	lr

080051de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051de:	b480      	push	{r7}
 80051e0:	b085      	sub	sp, #20
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
 80051e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	601a      	str	r2, [r3, #0]
}
 800521a:	bf00      	nop
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	bc80      	pop	{r7}
 8005222:	4770      	bx	lr

08005224 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523a:	d103      	bne.n	8005244 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	e00c      	b.n	800525e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3308      	adds	r3, #8
 8005248:	60fb      	str	r3, [r7, #12]
 800524a:	e002      	b.n	8005252 <vListInsert+0x2e>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	429a      	cmp	r2, r3
 800525c:	d2f6      	bcs.n	800524c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	601a      	str	r2, [r3, #0]
}
 800528a:	bf00      	nop
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	bc80      	pop	{r7}
 8005292:	4770      	bx	lr

08005294 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6892      	ldr	r2, [r2, #8]
 80052aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6852      	ldr	r2, [r2, #4]
 80052b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d103      	bne.n	80052c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	1e5a      	subs	r2, r3, #1
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bc80      	pop	{r7}
 80052e4:	4770      	bx	lr
	...

080052e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d109      	bne.n	8005310 <xQueueGenericReset+0x28>
 80052fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	60bb      	str	r3, [r7, #8]
 800530e:	e7fe      	b.n	800530e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005310:	f002 f8fa 	bl	8007508 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531c:	68f9      	ldr	r1, [r7, #12]
 800531e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005320:	fb01 f303 	mul.w	r3, r1, r3
 8005324:	441a      	add	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005340:	3b01      	subs	r3, #1
 8005342:	68f9      	ldr	r1, [r7, #12]
 8005344:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005346:	fb01 f303 	mul.w	r3, r1, r3
 800534a:	441a      	add	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	22ff      	movs	r2, #255	; 0xff
 8005354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	22ff      	movs	r2, #255	; 0xff
 800535c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d114      	bne.n	8005390 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d01a      	beq.n	80053a4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	3310      	adds	r3, #16
 8005372:	4618      	mov	r0, r3
 8005374:	f001 f94e 	bl	8006614 <xTaskRemoveFromEventList>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d012      	beq.n	80053a4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800537e:	4b0d      	ldr	r3, [pc, #52]	; (80053b4 <xQueueGenericReset+0xcc>)
 8005380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	e009      	b.n	80053a4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	3310      	adds	r3, #16
 8005394:	4618      	mov	r0, r3
 8005396:	f7ff fef7 	bl	8005188 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	3324      	adds	r3, #36	; 0x24
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff fef2 	bl	8005188 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80053a4:	f002 f8de 	bl	8007564 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80053a8:	2301      	movs	r3, #1
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	e000ed04 	.word	0xe000ed04

080053b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08e      	sub	sp, #56	; 0x38
 80053bc:	af02      	add	r7, sp, #8
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d109      	bne.n	80053e0 <xQueueGenericCreateStatic+0x28>
 80053cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80053de:	e7fe      	b.n	80053de <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d109      	bne.n	80053fa <xQueueGenericCreateStatic+0x42>
 80053e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	627b      	str	r3, [r7, #36]	; 0x24
 80053f8:	e7fe      	b.n	80053f8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <xQueueGenericCreateStatic+0x4e>
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <xQueueGenericCreateStatic+0x52>
 8005406:	2301      	movs	r3, #1
 8005408:	e000      	b.n	800540c <xQueueGenericCreateStatic+0x54>
 800540a:	2300      	movs	r3, #0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d109      	bne.n	8005424 <xQueueGenericCreateStatic+0x6c>
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	623b      	str	r3, [r7, #32]
 8005422:	e7fe      	b.n	8005422 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d102      	bne.n	8005430 <xQueueGenericCreateStatic+0x78>
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d101      	bne.n	8005434 <xQueueGenericCreateStatic+0x7c>
 8005430:	2301      	movs	r3, #1
 8005432:	e000      	b.n	8005436 <xQueueGenericCreateStatic+0x7e>
 8005434:	2300      	movs	r3, #0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d109      	bne.n	800544e <xQueueGenericCreateStatic+0x96>
 800543a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	61fb      	str	r3, [r7, #28]
 800544c:	e7fe      	b.n	800544c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800544e:	2350      	movs	r3, #80	; 0x50
 8005450:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2b50      	cmp	r3, #80	; 0x50
 8005456:	d009      	beq.n	800546c <xQueueGenericCreateStatic+0xb4>
 8005458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545c:	f383 8811 	msr	BASEPRI, r3
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	61bb      	str	r3, [r7, #24]
 800546a:	e7fe      	b.n	800546a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00d      	beq.n	8005492 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800547e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	4613      	mov	r3, r2
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	68b9      	ldr	r1, [r7, #8]
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 f842 	bl	8005516 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005494:	4618      	mov	r0, r3
 8005496:	3730      	adds	r7, #48	; 0x30
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800549c:	b580      	push	{r7, lr}
 800549e:	b08a      	sub	sp, #40	; 0x28
 80054a0:	af02      	add	r7, sp, #8
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	4613      	mov	r3, r2
 80054a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d109      	bne.n	80054c4 <xQueueGenericCreate+0x28>
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	613b      	str	r3, [r7, #16]
 80054c2:	e7fe      	b.n	80054c2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d102      	bne.n	80054d0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80054ca:	2300      	movs	r3, #0
 80054cc:	61fb      	str	r3, [r7, #28]
 80054ce:	e004      	b.n	80054da <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	fb02 f303 	mul.w	r3, r2, r3
 80054d8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	3350      	adds	r3, #80	; 0x50
 80054de:	4618      	mov	r0, r3
 80054e0:	f002 f908 	bl	80076f4 <pvPortMalloc>
 80054e4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00f      	beq.n	800550c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	3350      	adds	r3, #80	; 0x50
 80054f0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054fa:	79fa      	ldrb	r2, [r7, #7]
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	4613      	mov	r3, r2
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	68b9      	ldr	r1, [r7, #8]
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 f805 	bl	8005516 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800550c:	69bb      	ldr	r3, [r7, #24]
	}
 800550e:	4618      	mov	r0, r3
 8005510:	3720      	adds	r7, #32
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b084      	sub	sp, #16
 800551a:	af00      	add	r7, sp, #0
 800551c:	60f8      	str	r0, [r7, #12]
 800551e:	60b9      	str	r1, [r7, #8]
 8005520:	607a      	str	r2, [r7, #4]
 8005522:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d103      	bne.n	8005532 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	e002      	b.n	8005538 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005544:	2101      	movs	r1, #1
 8005546:	69b8      	ldr	r0, [r7, #24]
 8005548:	f7ff fece 	bl	80052e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	78fa      	ldrb	r2, [r7, #3]
 8005550:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005554:	bf00      	nop
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08e      	sub	sp, #56	; 0x38
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800556a:	2300      	movs	r3, #0
 800556c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005574:	2b00      	cmp	r3, #0
 8005576:	d109      	bne.n	800558c <xQueueGenericSend+0x30>
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	62bb      	str	r3, [r7, #40]	; 0x28
 800558a:	e7fe      	b.n	800558a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d103      	bne.n	800559a <xQueueGenericSend+0x3e>
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <xQueueGenericSend+0x42>
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <xQueueGenericSend+0x44>
 800559e:	2300      	movs	r3, #0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d109      	bne.n	80055b8 <xQueueGenericSend+0x5c>
 80055a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a8:	f383 8811 	msr	BASEPRI, r3
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
 80055b6:	e7fe      	b.n	80055b6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d103      	bne.n	80055c6 <xQueueGenericSend+0x6a>
 80055be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d101      	bne.n	80055ca <xQueueGenericSend+0x6e>
 80055c6:	2301      	movs	r3, #1
 80055c8:	e000      	b.n	80055cc <xQueueGenericSend+0x70>
 80055ca:	2300      	movs	r3, #0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d109      	bne.n	80055e4 <xQueueGenericSend+0x88>
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	623b      	str	r3, [r7, #32]
 80055e2:	e7fe      	b.n	80055e2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055e4:	f001 fa30 	bl	8006a48 <xTaskGetSchedulerState>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d102      	bne.n	80055f4 <xQueueGenericSend+0x98>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <xQueueGenericSend+0x9c>
 80055f4:	2301      	movs	r3, #1
 80055f6:	e000      	b.n	80055fa <xQueueGenericSend+0x9e>
 80055f8:	2300      	movs	r3, #0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d109      	bne.n	8005612 <xQueueGenericSend+0xb6>
 80055fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	61fb      	str	r3, [r7, #28]
 8005610:	e7fe      	b.n	8005610 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005612:	f001 ff79 	bl	8007508 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561e:	429a      	cmp	r2, r3
 8005620:	d302      	bcc.n	8005628 <xQueueGenericSend+0xcc>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b02      	cmp	r3, #2
 8005626:	d129      	bne.n	800567c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	68b9      	ldr	r1, [r7, #8]
 800562c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800562e:	f000 f9ff 	bl	8005a30 <prvCopyDataToQueue>
 8005632:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005638:	2b00      	cmp	r3, #0
 800563a:	d010      	beq.n	800565e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	3324      	adds	r3, #36	; 0x24
 8005640:	4618      	mov	r0, r3
 8005642:	f000 ffe7 	bl	8006614 <xTaskRemoveFromEventList>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d013      	beq.n	8005674 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800564c:	4b3f      	ldr	r3, [pc, #252]	; (800574c <xQueueGenericSend+0x1f0>)
 800564e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	e00a      	b.n	8005674 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	2b00      	cmp	r3, #0
 8005662:	d007      	beq.n	8005674 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005664:	4b39      	ldr	r3, [pc, #228]	; (800574c <xQueueGenericSend+0x1f0>)
 8005666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005674:	f001 ff76 	bl	8007564 <vPortExitCritical>
				return pdPASS;
 8005678:	2301      	movs	r3, #1
 800567a:	e063      	b.n	8005744 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d103      	bne.n	800568a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005682:	f001 ff6f 	bl	8007564 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005686:	2300      	movs	r3, #0
 8005688:	e05c      	b.n	8005744 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800568a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568c:	2b00      	cmp	r3, #0
 800568e:	d106      	bne.n	800569e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005690:	f107 0314 	add.w	r3, r7, #20
 8005694:	4618      	mov	r0, r3
 8005696:	f001 f87f 	bl	8006798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800569a:	2301      	movs	r3, #1
 800569c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800569e:	f001 ff61 	bl	8007564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056a2:	f000 fd5d 	bl	8006160 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056a6:	f001 ff2f 	bl	8007508 <vPortEnterCritical>
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056b0:	b25b      	sxtb	r3, r3
 80056b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b6:	d103      	bne.n	80056c0 <xQueueGenericSend+0x164>
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056c6:	b25b      	sxtb	r3, r3
 80056c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056cc:	d103      	bne.n	80056d6 <xQueueGenericSend+0x17a>
 80056ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056d6:	f001 ff45 	bl	8007564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056da:	1d3a      	adds	r2, r7, #4
 80056dc:	f107 0314 	add.w	r3, r7, #20
 80056e0:	4611      	mov	r1, r2
 80056e2:	4618      	mov	r0, r3
 80056e4:	f001 f86e 	bl	80067c4 <xTaskCheckForTimeOut>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d124      	bne.n	8005738 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80056ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056f0:	f000 fa96 	bl	8005c20 <prvIsQueueFull>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d018      	beq.n	800572c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80056fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fc:	3310      	adds	r3, #16
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	4611      	mov	r1, r2
 8005702:	4618      	mov	r0, r3
 8005704:	f000 fefe 	bl	8006504 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800570a:	f000 fa21 	bl	8005b50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800570e:	f000 fd35 	bl	800617c <xTaskResumeAll>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	f47f af7c 	bne.w	8005612 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800571a:	4b0c      	ldr	r3, [pc, #48]	; (800574c <xQueueGenericSend+0x1f0>)
 800571c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	e772      	b.n	8005612 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800572c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800572e:	f000 fa0f 	bl	8005b50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005732:	f000 fd23 	bl	800617c <xTaskResumeAll>
 8005736:	e76c      	b.n	8005612 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800573a:	f000 fa09 	bl	8005b50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800573e:	f000 fd1d 	bl	800617c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005742:	2300      	movs	r3, #0
		}
	}
}
 8005744:	4618      	mov	r0, r3
 8005746:	3738      	adds	r7, #56	; 0x38
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	e000ed04 	.word	0xe000ed04

08005750 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b08e      	sub	sp, #56	; 0x38
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005764:	2b00      	cmp	r3, #0
 8005766:	d109      	bne.n	800577c <xQueueGenericSendFromISR+0x2c>
 8005768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
 800577a:	e7fe      	b.n	800577a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d103      	bne.n	800578a <xQueueGenericSendFromISR+0x3a>
 8005782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <xQueueGenericSendFromISR+0x3e>
 800578a:	2301      	movs	r3, #1
 800578c:	e000      	b.n	8005790 <xQueueGenericSendFromISR+0x40>
 800578e:	2300      	movs	r3, #0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d109      	bne.n	80057a8 <xQueueGenericSendFromISR+0x58>
 8005794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	623b      	str	r3, [r7, #32]
 80057a6:	e7fe      	b.n	80057a6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d103      	bne.n	80057b6 <xQueueGenericSendFromISR+0x66>
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d101      	bne.n	80057ba <xQueueGenericSendFromISR+0x6a>
 80057b6:	2301      	movs	r3, #1
 80057b8:	e000      	b.n	80057bc <xQueueGenericSendFromISR+0x6c>
 80057ba:	2300      	movs	r3, #0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d109      	bne.n	80057d4 <xQueueGenericSendFromISR+0x84>
 80057c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c4:	f383 8811 	msr	BASEPRI, r3
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	61fb      	str	r3, [r7, #28]
 80057d2:	e7fe      	b.n	80057d2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057d4:	f001 ff52 	bl	800767c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80057d8:	f3ef 8211 	mrs	r2, BASEPRI
 80057dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	61ba      	str	r2, [r7, #24]
 80057ee:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80057f0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d302      	bcc.n	8005806 <xQueueGenericSendFromISR+0xb6>
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2b02      	cmp	r3, #2
 8005804:	d12c      	bne.n	8005860 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005808:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800580c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	68b9      	ldr	r1, [r7, #8]
 8005814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005816:	f000 f90b 	bl	8005a30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800581a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800581e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005822:	d112      	bne.n	800584a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	2b00      	cmp	r3, #0
 800582a:	d016      	beq.n	800585a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800582c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582e:	3324      	adds	r3, #36	; 0x24
 8005830:	4618      	mov	r0, r3
 8005832:	f000 feef 	bl	8006614 <xTaskRemoveFromEventList>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00e      	beq.n	800585a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00b      	beq.n	800585a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	e007      	b.n	800585a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800584a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800584e:	3301      	adds	r3, #1
 8005850:	b2db      	uxtb	r3, r3
 8005852:	b25a      	sxtb	r2, r3
 8005854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800585a:	2301      	movs	r3, #1
 800585c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800585e:	e001      	b.n	8005864 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005860:	2300      	movs	r3, #0
 8005862:	637b      	str	r3, [r7, #52]	; 0x34
 8005864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005866:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800586e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005870:	4618      	mov	r0, r3
 8005872:	3738      	adds	r7, #56	; 0x38
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b08c      	sub	sp, #48	; 0x30
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005884:	2300      	movs	r3, #0
 8005886:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588e:	2b00      	cmp	r3, #0
 8005890:	d109      	bne.n	80058a6 <xQueueReceive+0x2e>
	__asm volatile
 8005892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	623b      	str	r3, [r7, #32]
 80058a4:	e7fe      	b.n	80058a4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d103      	bne.n	80058b4 <xQueueReceive+0x3c>
 80058ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <xQueueReceive+0x40>
 80058b4:	2301      	movs	r3, #1
 80058b6:	e000      	b.n	80058ba <xQueueReceive+0x42>
 80058b8:	2300      	movs	r3, #0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d109      	bne.n	80058d2 <xQueueReceive+0x5a>
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	61fb      	str	r3, [r7, #28]
 80058d0:	e7fe      	b.n	80058d0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058d2:	f001 f8b9 	bl	8006a48 <xTaskGetSchedulerState>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d102      	bne.n	80058e2 <xQueueReceive+0x6a>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <xQueueReceive+0x6e>
 80058e2:	2301      	movs	r3, #1
 80058e4:	e000      	b.n	80058e8 <xQueueReceive+0x70>
 80058e6:	2300      	movs	r3, #0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d109      	bne.n	8005900 <xQueueReceive+0x88>
 80058ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	61bb      	str	r3, [r7, #24]
 80058fe:	e7fe      	b.n	80058fe <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005900:	f001 fe02 	bl	8007508 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005908:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01f      	beq.n	8005950 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005914:	f000 f8f6 	bl	8005b04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	1e5a      	subs	r2, r3, #1
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00f      	beq.n	8005948 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592a:	3310      	adds	r3, #16
 800592c:	4618      	mov	r0, r3
 800592e:	f000 fe71 	bl	8006614 <xTaskRemoveFromEventList>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d007      	beq.n	8005948 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005938:	4b3c      	ldr	r3, [pc, #240]	; (8005a2c <xQueueReceive+0x1b4>)
 800593a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005948:	f001 fe0c 	bl	8007564 <vPortExitCritical>
				return pdPASS;
 800594c:	2301      	movs	r3, #1
 800594e:	e069      	b.n	8005a24 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d103      	bne.n	800595e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005956:	f001 fe05 	bl	8007564 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800595a:	2300      	movs	r3, #0
 800595c:	e062      	b.n	8005a24 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800595e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005960:	2b00      	cmp	r3, #0
 8005962:	d106      	bne.n	8005972 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005964:	f107 0310 	add.w	r3, r7, #16
 8005968:	4618      	mov	r0, r3
 800596a:	f000 ff15 	bl	8006798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800596e:	2301      	movs	r3, #1
 8005970:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005972:	f001 fdf7 	bl	8007564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005976:	f000 fbf3 	bl	8006160 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800597a:	f001 fdc5 	bl	8007508 <vPortEnterCritical>
 800597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005980:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005984:	b25b      	sxtb	r3, r3
 8005986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598a:	d103      	bne.n	8005994 <xQueueReceive+0x11c>
 800598c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005996:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800599a:	b25b      	sxtb	r3, r3
 800599c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a0:	d103      	bne.n	80059aa <xQueueReceive+0x132>
 80059a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059aa:	f001 fddb 	bl	8007564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059ae:	1d3a      	adds	r2, r7, #4
 80059b0:	f107 0310 	add.w	r3, r7, #16
 80059b4:	4611      	mov	r1, r2
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 ff04 	bl	80067c4 <xTaskCheckForTimeOut>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d123      	bne.n	8005a0a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059c4:	f000 f916 	bl	8005bf4 <prvIsQueueEmpty>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d017      	beq.n	80059fe <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80059ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d0:	3324      	adds	r3, #36	; 0x24
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	4611      	mov	r1, r2
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 fd94 	bl	8006504 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059de:	f000 f8b7 	bl	8005b50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059e2:	f000 fbcb 	bl	800617c <xTaskResumeAll>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d189      	bne.n	8005900 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80059ec:	4b0f      	ldr	r3, [pc, #60]	; (8005a2c <xQueueReceive+0x1b4>)
 80059ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	e780      	b.n	8005900 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80059fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a00:	f000 f8a6 	bl	8005b50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a04:	f000 fbba 	bl	800617c <xTaskResumeAll>
 8005a08:	e77a      	b.n	8005900 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a0c:	f000 f8a0 	bl	8005b50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a10:	f000 fbb4 	bl	800617c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a16:	f000 f8ed 	bl	8005bf4 <prvIsQueueEmpty>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f43f af6f 	beq.w	8005900 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a22:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3730      	adds	r7, #48	; 0x30
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	e000ed04 	.word	0xe000ed04

08005a30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10d      	bne.n	8005a6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d14d      	bne.n	8005af2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f001 f812 	bl	8006a84 <xTaskPriorityDisinherit>
 8005a60:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	605a      	str	r2, [r3, #4]
 8005a68:	e043      	b.n	8005af2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d119      	bne.n	8005aa4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6898      	ldr	r0, [r3, #8]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a78:	461a      	mov	r2, r3
 8005a7a:	68b9      	ldr	r1, [r7, #8]
 8005a7c:	f002 f848 	bl	8007b10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a88:	441a      	add	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689a      	ldr	r2, [r3, #8]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d32b      	bcc.n	8005af2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	609a      	str	r2, [r3, #8]
 8005aa2:	e026      	b.n	8005af2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	68d8      	ldr	r0, [r3, #12]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aac:	461a      	mov	r2, r3
 8005aae:	68b9      	ldr	r1, [r7, #8]
 8005ab0:	f002 f82e 	bl	8007b10 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	68da      	ldr	r2, [r3, #12]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abc:	425b      	negs	r3, r3
 8005abe:	441a      	add	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	68da      	ldr	r2, [r3, #12]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d207      	bcs.n	8005ae0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad8:	425b      	negs	r3, r3
 8005ada:	441a      	add	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d105      	bne.n	8005af2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	3b01      	subs	r3, #1
 8005af0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005afa:	697b      	ldr	r3, [r7, #20]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d018      	beq.n	8005b48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	441a      	add	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68da      	ldr	r2, [r3, #12]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d303      	bcc.n	8005b38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68d9      	ldr	r1, [r3, #12]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b40:	461a      	mov	r2, r3
 8005b42:	6838      	ldr	r0, [r7, #0]
 8005b44:	f001 ffe4 	bl	8007b10 <memcpy>
	}
}
 8005b48:	bf00      	nop
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b58:	f001 fcd6 	bl	8007508 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b64:	e011      	b.n	8005b8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d012      	beq.n	8005b94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	3324      	adds	r3, #36	; 0x24
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fd4e 	bl	8006614 <xTaskRemoveFromEventList>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b7e:	f000 fe81 	bl	8006884 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b82:	7bfb      	ldrb	r3, [r7, #15]
 8005b84:	3b01      	subs	r3, #1
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	dce9      	bgt.n	8005b66 <prvUnlockQueue+0x16>
 8005b92:	e000      	b.n	8005b96 <prvUnlockQueue+0x46>
					break;
 8005b94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	22ff      	movs	r2, #255	; 0xff
 8005b9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005b9e:	f001 fce1 	bl	8007564 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ba2:	f001 fcb1 	bl	8007508 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bae:	e011      	b.n	8005bd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d012      	beq.n	8005bde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	3310      	adds	r3, #16
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 fd29 	bl	8006614 <xTaskRemoveFromEventList>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005bc8:	f000 fe5c 	bl	8006884 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005bcc:	7bbb      	ldrb	r3, [r7, #14]
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	dce9      	bgt.n	8005bb0 <prvUnlockQueue+0x60>
 8005bdc:	e000      	b.n	8005be0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005bde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	22ff      	movs	r2, #255	; 0xff
 8005be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005be8:	f001 fcbc 	bl	8007564 <vPortExitCritical>
}
 8005bec:	bf00      	nop
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bfc:	f001 fc84 	bl	8007508 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d102      	bne.n	8005c0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	e001      	b.n	8005c12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c12:	f001 fca7 	bl	8007564 <vPortExitCritical>

	return xReturn;
 8005c16:	68fb      	ldr	r3, [r7, #12]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c28:	f001 fc6e 	bl	8007508 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d102      	bne.n	8005c3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	e001      	b.n	8005c42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c42:	f001 fc8f 	bl	8007564 <vPortExitCritical>

	return xReturn;
 8005c46:	68fb      	ldr	r3, [r7, #12]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60fb      	str	r3, [r7, #12]
 8005c5e:	e014      	b.n	8005c8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c60:	4a0e      	ldr	r2, [pc, #56]	; (8005c9c <vQueueAddToRegistry+0x4c>)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10b      	bne.n	8005c84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c6c:	490b      	ldr	r1, [pc, #44]	; (8005c9c <vQueueAddToRegistry+0x4c>)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c76:	4a09      	ldr	r2, [pc, #36]	; (8005c9c <vQueueAddToRegistry+0x4c>)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	4413      	add	r3, r2
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c82:	e005      	b.n	8005c90 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3301      	adds	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b07      	cmp	r3, #7
 8005c8e:	d9e7      	bls.n	8005c60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c90:	bf00      	nop
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bc80      	pop	{r7}
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	20001c18 	.word	0x20001c18

08005ca0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005cb0:	f001 fc2a 	bl	8007508 <vPortEnterCritical>
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cba:	b25b      	sxtb	r3, r3
 8005cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc0:	d103      	bne.n	8005cca <vQueueWaitForMessageRestricted+0x2a>
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cd0:	b25b      	sxtb	r3, r3
 8005cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd6:	d103      	bne.n	8005ce0 <vQueueWaitForMessageRestricted+0x40>
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ce0:	f001 fc40 	bl	8007564 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d106      	bne.n	8005cfa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	3324      	adds	r3, #36	; 0x24
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	68b9      	ldr	r1, [r7, #8]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f000 fc63 	bl	80065c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005cfa:	6978      	ldr	r0, [r7, #20]
 8005cfc:	f7ff ff28 	bl	8005b50 <prvUnlockQueue>
	}
 8005d00:	bf00      	nop
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08e      	sub	sp, #56	; 0x38
 8005d0c:	af04      	add	r7, sp, #16
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d109      	bne.n	8005d30 <xTaskCreateStatic+0x28>
 8005d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d20:	f383 8811 	msr	BASEPRI, r3
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	623b      	str	r3, [r7, #32]
 8005d2e:	e7fe      	b.n	8005d2e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d109      	bne.n	8005d4a <xTaskCreateStatic+0x42>
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	61fb      	str	r3, [r7, #28]
 8005d48:	e7fe      	b.n	8005d48 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d4a:	235c      	movs	r3, #92	; 0x5c
 8005d4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	2b5c      	cmp	r3, #92	; 0x5c
 8005d52:	d009      	beq.n	8005d68 <xTaskCreateStatic+0x60>
 8005d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d58:	f383 8811 	msr	BASEPRI, r3
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	61bb      	str	r3, [r7, #24]
 8005d66:	e7fe      	b.n	8005d66 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d01e      	beq.n	8005dac <xTaskCreateStatic+0xa4>
 8005d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d01b      	beq.n	8005dac <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	2202      	movs	r2, #2
 8005d82:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d86:	2300      	movs	r3, #0
 8005d88:	9303      	str	r3, [sp, #12]
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	9302      	str	r3, [sp, #8]
 8005d8e:	f107 0314 	add.w	r3, r7, #20
 8005d92:	9301      	str	r3, [sp, #4]
 8005d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	68b9      	ldr	r1, [r7, #8]
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 f850 	bl	8005e44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005da4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005da6:	f000 f8d3 	bl	8005f50 <prvAddNewTaskToReadyList>
 8005daa:	e001      	b.n	8005db0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005dac:	2300      	movs	r3, #0
 8005dae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005db0:	697b      	ldr	r3, [r7, #20]
	}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3728      	adds	r7, #40	; 0x28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b08c      	sub	sp, #48	; 0x30
 8005dbe:	af04      	add	r7, sp, #16
 8005dc0:	60f8      	str	r0, [r7, #12]
 8005dc2:	60b9      	str	r1, [r7, #8]
 8005dc4:	603b      	str	r3, [r7, #0]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dca:	88fb      	ldrh	r3, [r7, #6]
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f001 fc90 	bl	80076f4 <pvPortMalloc>
 8005dd4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00e      	beq.n	8005dfa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005ddc:	205c      	movs	r0, #92	; 0x5c
 8005dde:	f001 fc89 	bl	80076f4 <pvPortMalloc>
 8005de2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	631a      	str	r2, [r3, #48]	; 0x30
 8005df0:	e005      	b.n	8005dfe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005df2:	6978      	ldr	r0, [r7, #20]
 8005df4:	f001 fd40 	bl	8007878 <vPortFree>
 8005df8:	e001      	b.n	8005dfe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d017      	beq.n	8005e34 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e0c:	88fa      	ldrh	r2, [r7, #6]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	9303      	str	r3, [sp, #12]
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	9302      	str	r3, [sp, #8]
 8005e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e18:	9301      	str	r3, [sp, #4]
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	68b9      	ldr	r1, [r7, #8]
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 f80e 	bl	8005e44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e28:	69f8      	ldr	r0, [r7, #28]
 8005e2a:	f000 f891 	bl	8005f50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	61bb      	str	r3, [r7, #24]
 8005e32:	e002      	b.n	8005e3a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e34:	f04f 33ff 	mov.w	r3, #4294967295
 8005e38:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e3a:	69bb      	ldr	r3, [r7, #24]
	}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3720      	adds	r7, #32
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b088      	sub	sp, #32
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
 8005e50:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e54:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	21a5      	movs	r1, #165	; 0xa5
 8005e5e:	f001 fe62 	bl	8007b26 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	f023 0307 	bic.w	r3, r3, #7
 8005e7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	f003 0307 	and.w	r3, r3, #7
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d009      	beq.n	8005e9a <prvInitialiseNewTask+0x56>
 8005e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	e7fe      	b.n	8005e98 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	61fb      	str	r3, [r7, #28]
 8005e9e:	e012      	b.n	8005ec6 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	7819      	ldrb	r1, [r3, #0]
 8005ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	4413      	add	r3, r2
 8005eae:	3334      	adds	r3, #52	; 0x34
 8005eb0:	460a      	mov	r2, r1
 8005eb2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	4413      	add	r3, r2
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d006      	beq.n	8005ece <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	61fb      	str	r3, [r7, #28]
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	2b0f      	cmp	r3, #15
 8005eca:	d9e9      	bls.n	8005ea0 <prvInitialiseNewTask+0x5c>
 8005ecc:	e000      	b.n	8005ed0 <prvInitialiseNewTask+0x8c>
		{
			break;
 8005ece:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eda:	2b37      	cmp	r3, #55	; 0x37
 8005edc:	d901      	bls.n	8005ee2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ede:	2337      	movs	r3, #55	; 0x37
 8005ee0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ee6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eec:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7ff f964 	bl	80051c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f00:	3318      	adds	r3, #24
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7ff f95f 	bl	80051c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f0c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f1c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f20:	2200      	movs	r2, #0
 8005f22:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	68f9      	ldr	r1, [r7, #12]
 8005f30:	69b8      	ldr	r0, [r7, #24]
 8005f32:	f001 f9fb 	bl	800732c <pxPortInitialiseStack>
 8005f36:	4602      	mov	r2, r0
 8005f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d002      	beq.n	8005f48 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f46:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f48:	bf00      	nop
 8005f4a:	3720      	adds	r7, #32
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f58:	f001 fad6 	bl	8007508 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f5c:	4b2d      	ldr	r3, [pc, #180]	; (8006014 <prvAddNewTaskToReadyList+0xc4>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3301      	adds	r3, #1
 8005f62:	4a2c      	ldr	r2, [pc, #176]	; (8006014 <prvAddNewTaskToReadyList+0xc4>)
 8005f64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f66:	4b2c      	ldr	r3, [pc, #176]	; (8006018 <prvAddNewTaskToReadyList+0xc8>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d109      	bne.n	8005f82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f6e:	4a2a      	ldr	r2, [pc, #168]	; (8006018 <prvAddNewTaskToReadyList+0xc8>)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f74:	4b27      	ldr	r3, [pc, #156]	; (8006014 <prvAddNewTaskToReadyList+0xc4>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d110      	bne.n	8005f9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f7c:	f000 fca6 	bl	80068cc <prvInitialiseTaskLists>
 8005f80:	e00d      	b.n	8005f9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f82:	4b26      	ldr	r3, [pc, #152]	; (800601c <prvAddNewTaskToReadyList+0xcc>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d109      	bne.n	8005f9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f8a:	4b23      	ldr	r3, [pc, #140]	; (8006018 <prvAddNewTaskToReadyList+0xc8>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d802      	bhi.n	8005f9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f98:	4a1f      	ldr	r2, [pc, #124]	; (8006018 <prvAddNewTaskToReadyList+0xc8>)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f9e:	4b20      	ldr	r3, [pc, #128]	; (8006020 <prvAddNewTaskToReadyList+0xd0>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	4a1e      	ldr	r2, [pc, #120]	; (8006020 <prvAddNewTaskToReadyList+0xd0>)
 8005fa6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005fa8:	4b1d      	ldr	r3, [pc, #116]	; (8006020 <prvAddNewTaskToReadyList+0xd0>)
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb4:	4b1b      	ldr	r3, [pc, #108]	; (8006024 <prvAddNewTaskToReadyList+0xd4>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d903      	bls.n	8005fc4 <prvAddNewTaskToReadyList+0x74>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc0:	4a18      	ldr	r2, [pc, #96]	; (8006024 <prvAddNewTaskToReadyList+0xd4>)
 8005fc2:	6013      	str	r3, [r2, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc8:	4613      	mov	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4a15      	ldr	r2, [pc, #84]	; (8006028 <prvAddNewTaskToReadyList+0xd8>)
 8005fd2:	441a      	add	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	3304      	adds	r3, #4
 8005fd8:	4619      	mov	r1, r3
 8005fda:	4610      	mov	r0, r2
 8005fdc:	f7ff f8ff 	bl	80051de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005fe0:	f001 fac0 	bl	8007564 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005fe4:	4b0d      	ldr	r3, [pc, #52]	; (800601c <prvAddNewTaskToReadyList+0xcc>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00e      	beq.n	800600a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005fec:	4b0a      	ldr	r3, [pc, #40]	; (8006018 <prvAddNewTaskToReadyList+0xc8>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d207      	bcs.n	800600a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ffa:	4b0c      	ldr	r3, [pc, #48]	; (800602c <prvAddNewTaskToReadyList+0xdc>)
 8005ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800600a:	bf00      	nop
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	20000c8c 	.word	0x20000c8c
 8006018:	200007b8 	.word	0x200007b8
 800601c:	20000c98 	.word	0x20000c98
 8006020:	20000ca8 	.word	0x20000ca8
 8006024:	20000c94 	.word	0x20000c94
 8006028:	200007bc 	.word	0x200007bc
 800602c:	e000ed04 	.word	0xe000ed04

08006030 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006038:	2300      	movs	r3, #0
 800603a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d016      	beq.n	8006070 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006042:	4b13      	ldr	r3, [pc, #76]	; (8006090 <vTaskDelay+0x60>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d009      	beq.n	800605e <vTaskDelay+0x2e>
 800604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	60bb      	str	r3, [r7, #8]
 800605c:	e7fe      	b.n	800605c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800605e:	f000 f87f 	bl	8006160 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006062:	2100      	movs	r1, #0
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 fd91 	bl	8006b8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800606a:	f000 f887 	bl	800617c <xTaskResumeAll>
 800606e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d107      	bne.n	8006086 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006076:	4b07      	ldr	r3, [pc, #28]	; (8006094 <vTaskDelay+0x64>)
 8006078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006086:	bf00      	nop
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	20000cb4 	.word	0x20000cb4
 8006094:	e000ed04 	.word	0xe000ed04

08006098 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b08a      	sub	sp, #40	; 0x28
 800609c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800609e:	2300      	movs	r3, #0
 80060a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060a2:	2300      	movs	r3, #0
 80060a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060a6:	463a      	mov	r2, r7
 80060a8:	1d39      	adds	r1, r7, #4
 80060aa:	f107 0308 	add.w	r3, r7, #8
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fe fe88 	bl	8004dc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80060b4:	6839      	ldr	r1, [r7, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	9202      	str	r2, [sp, #8]
 80060bc:	9301      	str	r3, [sp, #4]
 80060be:	2300      	movs	r3, #0
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	2300      	movs	r3, #0
 80060c4:	460a      	mov	r2, r1
 80060c6:	4920      	ldr	r1, [pc, #128]	; (8006148 <vTaskStartScheduler+0xb0>)
 80060c8:	4820      	ldr	r0, [pc, #128]	; (800614c <vTaskStartScheduler+0xb4>)
 80060ca:	f7ff fe1d 	bl	8005d08 <xTaskCreateStatic>
 80060ce:	4602      	mov	r2, r0
 80060d0:	4b1f      	ldr	r3, [pc, #124]	; (8006150 <vTaskStartScheduler+0xb8>)
 80060d2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80060d4:	4b1e      	ldr	r3, [pc, #120]	; (8006150 <vTaskStartScheduler+0xb8>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80060dc:	2301      	movs	r3, #1
 80060de:	617b      	str	r3, [r7, #20]
 80060e0:	e001      	b.n	80060e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80060e2:	2300      	movs	r3, #0
 80060e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d102      	bne.n	80060f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80060ec:	f000 fda2 	bl	8006c34 <xTimerCreateTimerTask>
 80060f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d115      	bne.n	8006124 <vTaskStartScheduler+0x8c>
 80060f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800610a:	4b12      	ldr	r3, [pc, #72]	; (8006154 <vTaskStartScheduler+0xbc>)
 800610c:	f04f 32ff 	mov.w	r2, #4294967295
 8006110:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006112:	4b11      	ldr	r3, [pc, #68]	; (8006158 <vTaskStartScheduler+0xc0>)
 8006114:	2201      	movs	r2, #1
 8006116:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006118:	4b10      	ldr	r3, [pc, #64]	; (800615c <vTaskStartScheduler+0xc4>)
 800611a:	2200      	movs	r2, #0
 800611c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800611e:	f001 f983 	bl	8007428 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006122:	e00d      	b.n	8006140 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612a:	d109      	bne.n	8006140 <vTaskStartScheduler+0xa8>
 800612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	e7fe      	b.n	800613e <vTaskStartScheduler+0xa6>
}
 8006140:	bf00      	nop
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	08007ed8 	.word	0x08007ed8
 800614c:	0800689d 	.word	0x0800689d
 8006150:	20000cb0 	.word	0x20000cb0
 8006154:	20000cac 	.word	0x20000cac
 8006158:	20000c98 	.word	0x20000c98
 800615c:	20000c90 	.word	0x20000c90

08006160 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006160:	b480      	push	{r7}
 8006162:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006164:	4b04      	ldr	r3, [pc, #16]	; (8006178 <vTaskSuspendAll+0x18>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	3301      	adds	r3, #1
 800616a:	4a03      	ldr	r2, [pc, #12]	; (8006178 <vTaskSuspendAll+0x18>)
 800616c:	6013      	str	r3, [r2, #0]
}
 800616e:	bf00      	nop
 8006170:	46bd      	mov	sp, r7
 8006172:	bc80      	pop	{r7}
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	20000cb4 	.word	0x20000cb4

0800617c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006182:	2300      	movs	r3, #0
 8006184:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006186:	2300      	movs	r3, #0
 8006188:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800618a:	4b41      	ldr	r3, [pc, #260]	; (8006290 <xTaskResumeAll+0x114>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d109      	bne.n	80061a6 <xTaskResumeAll+0x2a>
 8006192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	603b      	str	r3, [r7, #0]
 80061a4:	e7fe      	b.n	80061a4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80061a6:	f001 f9af 	bl	8007508 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80061aa:	4b39      	ldr	r3, [pc, #228]	; (8006290 <xTaskResumeAll+0x114>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	4a37      	ldr	r2, [pc, #220]	; (8006290 <xTaskResumeAll+0x114>)
 80061b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061b4:	4b36      	ldr	r3, [pc, #216]	; (8006290 <xTaskResumeAll+0x114>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d162      	bne.n	8006282 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061bc:	4b35      	ldr	r3, [pc, #212]	; (8006294 <xTaskResumeAll+0x118>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d05e      	beq.n	8006282 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061c4:	e02f      	b.n	8006226 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80061c6:	4b34      	ldr	r3, [pc, #208]	; (8006298 <xTaskResumeAll+0x11c>)
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3318      	adds	r3, #24
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff f85e 	bl	8005294 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3304      	adds	r3, #4
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff f859 	bl	8005294 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e6:	4b2d      	ldr	r3, [pc, #180]	; (800629c <xTaskResumeAll+0x120>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d903      	bls.n	80061f6 <xTaskResumeAll+0x7a>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f2:	4a2a      	ldr	r2, [pc, #168]	; (800629c <xTaskResumeAll+0x120>)
 80061f4:	6013      	str	r3, [r2, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061fa:	4613      	mov	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4a27      	ldr	r2, [pc, #156]	; (80062a0 <xTaskResumeAll+0x124>)
 8006204:	441a      	add	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	3304      	adds	r3, #4
 800620a:	4619      	mov	r1, r3
 800620c:	4610      	mov	r0, r2
 800620e:	f7fe ffe6 	bl	80051de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006216:	4b23      	ldr	r3, [pc, #140]	; (80062a4 <xTaskResumeAll+0x128>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621c:	429a      	cmp	r2, r3
 800621e:	d302      	bcc.n	8006226 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006220:	4b21      	ldr	r3, [pc, #132]	; (80062a8 <xTaskResumeAll+0x12c>)
 8006222:	2201      	movs	r2, #1
 8006224:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006226:	4b1c      	ldr	r3, [pc, #112]	; (8006298 <xTaskResumeAll+0x11c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1cb      	bne.n	80061c6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d001      	beq.n	8006238 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006234:	f000 fbe4 	bl	8006a00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006238:	4b1c      	ldr	r3, [pc, #112]	; (80062ac <xTaskResumeAll+0x130>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d010      	beq.n	8006266 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006244:	f000 f844 	bl	80062d0 <xTaskIncrementTick>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800624e:	4b16      	ldr	r3, [pc, #88]	; (80062a8 <xTaskResumeAll+0x12c>)
 8006250:	2201      	movs	r2, #1
 8006252:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	3b01      	subs	r3, #1
 8006258:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1f1      	bne.n	8006244 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006260:	4b12      	ldr	r3, [pc, #72]	; (80062ac <xTaskResumeAll+0x130>)
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006266:	4b10      	ldr	r3, [pc, #64]	; (80062a8 <xTaskResumeAll+0x12c>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d009      	beq.n	8006282 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800626e:	2301      	movs	r3, #1
 8006270:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006272:	4b0f      	ldr	r3, [pc, #60]	; (80062b0 <xTaskResumeAll+0x134>)
 8006274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006282:	f001 f96f 	bl	8007564 <vPortExitCritical>

	return xAlreadyYielded;
 8006286:	68bb      	ldr	r3, [r7, #8]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	20000cb4 	.word	0x20000cb4
 8006294:	20000c8c 	.word	0x20000c8c
 8006298:	20000c4c 	.word	0x20000c4c
 800629c:	20000c94 	.word	0x20000c94
 80062a0:	200007bc 	.word	0x200007bc
 80062a4:	200007b8 	.word	0x200007b8
 80062a8:	20000ca0 	.word	0x20000ca0
 80062ac:	20000c9c 	.word	0x20000c9c
 80062b0:	e000ed04 	.word	0xe000ed04

080062b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80062ba:	4b04      	ldr	r3, [pc, #16]	; (80062cc <xTaskGetTickCount+0x18>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80062c0:	687b      	ldr	r3, [r7, #4]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bc80      	pop	{r7}
 80062ca:	4770      	bx	lr
 80062cc:	20000c90 	.word	0x20000c90

080062d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80062d6:	2300      	movs	r3, #0
 80062d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062da:	4b51      	ldr	r3, [pc, #324]	; (8006420 <xTaskIncrementTick+0x150>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f040 808d 	bne.w	80063fe <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80062e4:	4b4f      	ldr	r3, [pc, #316]	; (8006424 <xTaskIncrementTick+0x154>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3301      	adds	r3, #1
 80062ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80062ec:	4a4d      	ldr	r2, [pc, #308]	; (8006424 <xTaskIncrementTick+0x154>)
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d11f      	bne.n	8006338 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80062f8:	4b4b      	ldr	r3, [pc, #300]	; (8006428 <xTaskIncrementTick+0x158>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d009      	beq.n	8006316 <xTaskIncrementTick+0x46>
 8006302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	603b      	str	r3, [r7, #0]
 8006314:	e7fe      	b.n	8006314 <xTaskIncrementTick+0x44>
 8006316:	4b44      	ldr	r3, [pc, #272]	; (8006428 <xTaskIncrementTick+0x158>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	4b43      	ldr	r3, [pc, #268]	; (800642c <xTaskIncrementTick+0x15c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a41      	ldr	r2, [pc, #260]	; (8006428 <xTaskIncrementTick+0x158>)
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	4a41      	ldr	r2, [pc, #260]	; (800642c <xTaskIncrementTick+0x15c>)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	4b41      	ldr	r3, [pc, #260]	; (8006430 <xTaskIncrementTick+0x160>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3301      	adds	r3, #1
 8006330:	4a3f      	ldr	r2, [pc, #252]	; (8006430 <xTaskIncrementTick+0x160>)
 8006332:	6013      	str	r3, [r2, #0]
 8006334:	f000 fb64 	bl	8006a00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006338:	4b3e      	ldr	r3, [pc, #248]	; (8006434 <xTaskIncrementTick+0x164>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	429a      	cmp	r2, r3
 8006340:	d34e      	bcc.n	80063e0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006342:	4b39      	ldr	r3, [pc, #228]	; (8006428 <xTaskIncrementTick+0x158>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <xTaskIncrementTick+0x80>
 800634c:	2301      	movs	r3, #1
 800634e:	e000      	b.n	8006352 <xTaskIncrementTick+0x82>
 8006350:	2300      	movs	r3, #0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d004      	beq.n	8006360 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006356:	4b37      	ldr	r3, [pc, #220]	; (8006434 <xTaskIncrementTick+0x164>)
 8006358:	f04f 32ff 	mov.w	r2, #4294967295
 800635c:	601a      	str	r2, [r3, #0]
					break;
 800635e:	e03f      	b.n	80063e0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006360:	4b31      	ldr	r3, [pc, #196]	; (8006428 <xTaskIncrementTick+0x158>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	429a      	cmp	r2, r3
 8006376:	d203      	bcs.n	8006380 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006378:	4a2e      	ldr	r2, [pc, #184]	; (8006434 <xTaskIncrementTick+0x164>)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6013      	str	r3, [r2, #0]
						break;
 800637e:	e02f      	b.n	80063e0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	3304      	adds	r3, #4
 8006384:	4618      	mov	r0, r3
 8006386:	f7fe ff85 	bl	8005294 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638e:	2b00      	cmp	r3, #0
 8006390:	d004      	beq.n	800639c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	3318      	adds	r3, #24
 8006396:	4618      	mov	r0, r3
 8006398:	f7fe ff7c 	bl	8005294 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a0:	4b25      	ldr	r3, [pc, #148]	; (8006438 <xTaskIncrementTick+0x168>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d903      	bls.n	80063b0 <xTaskIncrementTick+0xe0>
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	4a22      	ldr	r2, [pc, #136]	; (8006438 <xTaskIncrementTick+0x168>)
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b4:	4613      	mov	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4a1f      	ldr	r2, [pc, #124]	; (800643c <xTaskIncrementTick+0x16c>)
 80063be:	441a      	add	r2, r3
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	3304      	adds	r3, #4
 80063c4:	4619      	mov	r1, r3
 80063c6:	4610      	mov	r0, r2
 80063c8:	f7fe ff09 	bl	80051de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d0:	4b1b      	ldr	r3, [pc, #108]	; (8006440 <xTaskIncrementTick+0x170>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d3b3      	bcc.n	8006342 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80063da:	2301      	movs	r3, #1
 80063dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063de:	e7b0      	b.n	8006342 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80063e0:	4b17      	ldr	r3, [pc, #92]	; (8006440 <xTaskIncrementTick+0x170>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e6:	4915      	ldr	r1, [pc, #84]	; (800643c <xTaskIncrementTick+0x16c>)
 80063e8:	4613      	mov	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	440b      	add	r3, r1
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d907      	bls.n	8006408 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80063f8:	2301      	movs	r3, #1
 80063fa:	617b      	str	r3, [r7, #20]
 80063fc:	e004      	b.n	8006408 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80063fe:	4b11      	ldr	r3, [pc, #68]	; (8006444 <xTaskIncrementTick+0x174>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	3301      	adds	r3, #1
 8006404:	4a0f      	ldr	r2, [pc, #60]	; (8006444 <xTaskIncrementTick+0x174>)
 8006406:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006408:	4b0f      	ldr	r3, [pc, #60]	; (8006448 <xTaskIncrementTick+0x178>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006410:	2301      	movs	r3, #1
 8006412:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006414:	697b      	ldr	r3, [r7, #20]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3718      	adds	r7, #24
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	20000cb4 	.word	0x20000cb4
 8006424:	20000c90 	.word	0x20000c90
 8006428:	20000c44 	.word	0x20000c44
 800642c:	20000c48 	.word	0x20000c48
 8006430:	20000ca4 	.word	0x20000ca4
 8006434:	20000cac 	.word	0x20000cac
 8006438:	20000c94 	.word	0x20000c94
 800643c:	200007bc 	.word	0x200007bc
 8006440:	200007b8 	.word	0x200007b8
 8006444:	20000c9c 	.word	0x20000c9c
 8006448:	20000ca0 	.word	0x20000ca0

0800644c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006452:	4b27      	ldr	r3, [pc, #156]	; (80064f0 <vTaskSwitchContext+0xa4>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800645a:	4b26      	ldr	r3, [pc, #152]	; (80064f4 <vTaskSwitchContext+0xa8>)
 800645c:	2201      	movs	r2, #1
 800645e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006460:	e040      	b.n	80064e4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006462:	4b24      	ldr	r3, [pc, #144]	; (80064f4 <vTaskSwitchContext+0xa8>)
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006468:	4b23      	ldr	r3, [pc, #140]	; (80064f8 <vTaskSwitchContext+0xac>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	60fb      	str	r3, [r7, #12]
 800646e:	e00f      	b.n	8006490 <vTaskSwitchContext+0x44>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d109      	bne.n	800648a <vTaskSwitchContext+0x3e>
 8006476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647a:	f383 8811 	msr	BASEPRI, r3
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	607b      	str	r3, [r7, #4]
 8006488:	e7fe      	b.n	8006488 <vTaskSwitchContext+0x3c>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3b01      	subs	r3, #1
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	491a      	ldr	r1, [pc, #104]	; (80064fc <vTaskSwitchContext+0xb0>)
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	4613      	mov	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	440b      	add	r3, r1
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d0e5      	beq.n	8006470 <vTaskSwitchContext+0x24>
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	4613      	mov	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4a13      	ldr	r2, [pc, #76]	; (80064fc <vTaskSwitchContext+0xb0>)
 80064b0:	4413      	add	r3, r2
 80064b2:	60bb      	str	r3, [r7, #8]
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	605a      	str	r2, [r3, #4]
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	3308      	adds	r3, #8
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d104      	bne.n	80064d4 <vTaskSwitchContext+0x88>
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	605a      	str	r2, [r3, #4]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	4a09      	ldr	r2, [pc, #36]	; (8006500 <vTaskSwitchContext+0xb4>)
 80064dc:	6013      	str	r3, [r2, #0]
 80064de:	4a06      	ldr	r2, [pc, #24]	; (80064f8 <vTaskSwitchContext+0xac>)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6013      	str	r3, [r2, #0]
}
 80064e4:	bf00      	nop
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bc80      	pop	{r7}
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	20000cb4 	.word	0x20000cb4
 80064f4:	20000ca0 	.word	0x20000ca0
 80064f8:	20000c94 	.word	0x20000c94
 80064fc:	200007bc 	.word	0x200007bc
 8006500:	200007b8 	.word	0x200007b8

08006504 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d109      	bne.n	8006528 <vTaskPlaceOnEventList+0x24>
 8006514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	60fb      	str	r3, [r7, #12]
 8006526:	e7fe      	b.n	8006526 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006528:	4b07      	ldr	r3, [pc, #28]	; (8006548 <vTaskPlaceOnEventList+0x44>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3318      	adds	r3, #24
 800652e:	4619      	mov	r1, r3
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7fe fe77 	bl	8005224 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006536:	2101      	movs	r1, #1
 8006538:	6838      	ldr	r0, [r7, #0]
 800653a:	f000 fb27 	bl	8006b8c <prvAddCurrentTaskToDelayedList>
}
 800653e:	bf00      	nop
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	200007b8 	.word	0x200007b8

0800654c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d109      	bne.n	8006572 <vTaskPlaceOnUnorderedEventList+0x26>
 800655e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	e7fe      	b.n	8006570 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006572:	4b11      	ldr	r3, [pc, #68]	; (80065b8 <vTaskPlaceOnUnorderedEventList+0x6c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d109      	bne.n	800658e <vTaskPlaceOnUnorderedEventList+0x42>
 800657a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657e:	f383 8811 	msr	BASEPRI, r3
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	613b      	str	r3, [r7, #16]
 800658c:	e7fe      	b.n	800658c <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800658e:	4b0b      	ldr	r3, [pc, #44]	; (80065bc <vTaskPlaceOnUnorderedEventList+0x70>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006598:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800659a:	4b08      	ldr	r3, [pc, #32]	; (80065bc <vTaskPlaceOnUnorderedEventList+0x70>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3318      	adds	r3, #24
 80065a0:	4619      	mov	r1, r3
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f7fe fe1b 	bl	80051de <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065a8:	2101      	movs	r1, #1
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 faee 	bl	8006b8c <prvAddCurrentTaskToDelayedList>
}
 80065b0:	bf00      	nop
 80065b2:	3718      	adds	r7, #24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	20000cb4 	.word	0x20000cb4
 80065bc:	200007b8 	.word	0x200007b8

080065c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d109      	bne.n	80065e6 <vTaskPlaceOnEventListRestricted+0x26>
 80065d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	e7fe      	b.n	80065e4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065e6:	4b0a      	ldr	r3, [pc, #40]	; (8006610 <vTaskPlaceOnEventListRestricted+0x50>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3318      	adds	r3, #24
 80065ec:	4619      	mov	r1, r3
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f7fe fdf5 	bl	80051de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80065fa:	f04f 33ff 	mov.w	r3, #4294967295
 80065fe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006600:	6879      	ldr	r1, [r7, #4]
 8006602:	68b8      	ldr	r0, [r7, #8]
 8006604:	f000 fac2 	bl	8006b8c <prvAddCurrentTaskToDelayedList>
	}
 8006608:	bf00      	nop
 800660a:	3718      	adds	r7, #24
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	200007b8 	.word	0x200007b8

08006614 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d109      	bne.n	800663e <xTaskRemoveFromEventList+0x2a>
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	e7fe      	b.n	800663c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	3318      	adds	r3, #24
 8006642:	4618      	mov	r0, r3
 8006644:	f7fe fe26 	bl	8005294 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006648:	4b1d      	ldr	r3, [pc, #116]	; (80066c0 <xTaskRemoveFromEventList+0xac>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d11d      	bne.n	800668c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	3304      	adds	r3, #4
 8006654:	4618      	mov	r0, r3
 8006656:	f7fe fe1d 	bl	8005294 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800665e:	4b19      	ldr	r3, [pc, #100]	; (80066c4 <xTaskRemoveFromEventList+0xb0>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	429a      	cmp	r2, r3
 8006664:	d903      	bls.n	800666e <xTaskRemoveFromEventList+0x5a>
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666a:	4a16      	ldr	r2, [pc, #88]	; (80066c4 <xTaskRemoveFromEventList+0xb0>)
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006672:	4613      	mov	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4413      	add	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4a13      	ldr	r2, [pc, #76]	; (80066c8 <xTaskRemoveFromEventList+0xb4>)
 800667c:	441a      	add	r2, r3
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	3304      	adds	r3, #4
 8006682:	4619      	mov	r1, r3
 8006684:	4610      	mov	r0, r2
 8006686:	f7fe fdaa 	bl	80051de <vListInsertEnd>
 800668a:	e005      	b.n	8006698 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	3318      	adds	r3, #24
 8006690:	4619      	mov	r1, r3
 8006692:	480e      	ldr	r0, [pc, #56]	; (80066cc <xTaskRemoveFromEventList+0xb8>)
 8006694:	f7fe fda3 	bl	80051de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800669c:	4b0c      	ldr	r3, [pc, #48]	; (80066d0 <xTaskRemoveFromEventList+0xbc>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d905      	bls.n	80066b2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066a6:	2301      	movs	r3, #1
 80066a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066aa:	4b0a      	ldr	r3, [pc, #40]	; (80066d4 <xTaskRemoveFromEventList+0xc0>)
 80066ac:	2201      	movs	r2, #1
 80066ae:	601a      	str	r2, [r3, #0]
 80066b0:	e001      	b.n	80066b6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80066b2:	2300      	movs	r3, #0
 80066b4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80066b6:	697b      	ldr	r3, [r7, #20]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	20000cb4 	.word	0x20000cb4
 80066c4:	20000c94 	.word	0x20000c94
 80066c8:	200007bc 	.word	0x200007bc
 80066cc:	20000c4c 	.word	0x20000c4c
 80066d0:	200007b8 	.word	0x200007b8
 80066d4:	20000ca0 	.word	0x20000ca0

080066d8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80066e2:	4b28      	ldr	r3, [pc, #160]	; (8006784 <vTaskRemoveFromUnorderedEventList+0xac>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d109      	bne.n	80066fe <vTaskRemoveFromUnorderedEventList+0x26>
 80066ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	613b      	str	r3, [r7, #16]
 80066fc:	e7fe      	b.n	80066fc <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d109      	bne.n	8006728 <vTaskRemoveFromUnorderedEventList+0x50>
 8006714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006718:	f383 8811 	msr	BASEPRI, r3
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	60fb      	str	r3, [r7, #12]
 8006726:	e7fe      	b.n	8006726 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7fe fdb3 	bl	8005294 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	3304      	adds	r3, #4
 8006732:	4618      	mov	r0, r3
 8006734:	f7fe fdae 	bl	8005294 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800673c:	4b12      	ldr	r3, [pc, #72]	; (8006788 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	429a      	cmp	r2, r3
 8006742:	d903      	bls.n	800674c <vTaskRemoveFromUnorderedEventList+0x74>
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	4a0f      	ldr	r2, [pc, #60]	; (8006788 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800674a:	6013      	str	r3, [r2, #0]
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006750:	4613      	mov	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4413      	add	r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4a0c      	ldr	r2, [pc, #48]	; (800678c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800675a:	441a      	add	r2, r3
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	3304      	adds	r3, #4
 8006760:	4619      	mov	r1, r3
 8006762:	4610      	mov	r0, r2
 8006764:	f7fe fd3b 	bl	80051de <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676c:	4b08      	ldr	r3, [pc, #32]	; (8006790 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006772:	429a      	cmp	r2, r3
 8006774:	d902      	bls.n	800677c <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006776:	4b07      	ldr	r3, [pc, #28]	; (8006794 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006778:	2201      	movs	r2, #1
 800677a:	601a      	str	r2, [r3, #0]
	}
}
 800677c:	bf00      	nop
 800677e:	3718      	adds	r7, #24
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	20000cb4 	.word	0x20000cb4
 8006788:	20000c94 	.word	0x20000c94
 800678c:	200007bc 	.word	0x200007bc
 8006790:	200007b8 	.word	0x200007b8
 8006794:	20000ca0 	.word	0x20000ca0

08006798 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067a0:	4b06      	ldr	r3, [pc, #24]	; (80067bc <vTaskInternalSetTimeOutState+0x24>)
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067a8:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <vTaskInternalSetTimeOutState+0x28>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	605a      	str	r2, [r3, #4]
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bc80      	pop	{r7}
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	20000ca4 	.word	0x20000ca4
 80067c0:	20000c90 	.word	0x20000c90

080067c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b088      	sub	sp, #32
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d109      	bne.n	80067e8 <xTaskCheckForTimeOut+0x24>
 80067d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	613b      	str	r3, [r7, #16]
 80067e6:	e7fe      	b.n	80067e6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d109      	bne.n	8006802 <xTaskCheckForTimeOut+0x3e>
 80067ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	60fb      	str	r3, [r7, #12]
 8006800:	e7fe      	b.n	8006800 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006802:	f000 fe81 	bl	8007508 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006806:	4b1d      	ldr	r3, [pc, #116]	; (800687c <xTaskCheckForTimeOut+0xb8>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	69ba      	ldr	r2, [r7, #24]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681e:	d102      	bne.n	8006826 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006820:	2300      	movs	r3, #0
 8006822:	61fb      	str	r3, [r7, #28]
 8006824:	e023      	b.n	800686e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	4b15      	ldr	r3, [pc, #84]	; (8006880 <xTaskCheckForTimeOut+0xbc>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	429a      	cmp	r2, r3
 8006830:	d007      	beq.n	8006842 <xTaskCheckForTimeOut+0x7e>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	69ba      	ldr	r2, [r7, #24]
 8006838:	429a      	cmp	r2, r3
 800683a:	d302      	bcc.n	8006842 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800683c:	2301      	movs	r3, #1
 800683e:	61fb      	str	r3, [r7, #28]
 8006840:	e015      	b.n	800686e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	429a      	cmp	r2, r3
 800684a:	d20b      	bcs.n	8006864 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	1ad2      	subs	r2, r2, r3
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7ff ff9d 	bl	8006798 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800685e:	2300      	movs	r3, #0
 8006860:	61fb      	str	r3, [r7, #28]
 8006862:	e004      	b.n	800686e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	2200      	movs	r2, #0
 8006868:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800686a:	2301      	movs	r3, #1
 800686c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800686e:	f000 fe79 	bl	8007564 <vPortExitCritical>

	return xReturn;
 8006872:	69fb      	ldr	r3, [r7, #28]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3720      	adds	r7, #32
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	20000c90 	.word	0x20000c90
 8006880:	20000ca4 	.word	0x20000ca4

08006884 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006884:	b480      	push	{r7}
 8006886:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006888:	4b03      	ldr	r3, [pc, #12]	; (8006898 <vTaskMissedYield+0x14>)
 800688a:	2201      	movs	r2, #1
 800688c:	601a      	str	r2, [r3, #0]
}
 800688e:	bf00      	nop
 8006890:	46bd      	mov	sp, r7
 8006892:	bc80      	pop	{r7}
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	20000ca0 	.word	0x20000ca0

0800689c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068a4:	f000 f852 	bl	800694c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068a8:	4b06      	ldr	r3, [pc, #24]	; (80068c4 <prvIdleTask+0x28>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d9f9      	bls.n	80068a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80068b0:	4b05      	ldr	r3, [pc, #20]	; (80068c8 <prvIdleTask+0x2c>)
 80068b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80068c0:	e7f0      	b.n	80068a4 <prvIdleTask+0x8>
 80068c2:	bf00      	nop
 80068c4:	200007bc 	.word	0x200007bc
 80068c8:	e000ed04 	.word	0xe000ed04

080068cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068d2:	2300      	movs	r3, #0
 80068d4:	607b      	str	r3, [r7, #4]
 80068d6:	e00c      	b.n	80068f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	4613      	mov	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4413      	add	r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	4a12      	ldr	r2, [pc, #72]	; (800692c <prvInitialiseTaskLists+0x60>)
 80068e4:	4413      	add	r3, r2
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fe fc4e 	bl	8005188 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	3301      	adds	r3, #1
 80068f0:	607b      	str	r3, [r7, #4]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b37      	cmp	r3, #55	; 0x37
 80068f6:	d9ef      	bls.n	80068d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80068f8:	480d      	ldr	r0, [pc, #52]	; (8006930 <prvInitialiseTaskLists+0x64>)
 80068fa:	f7fe fc45 	bl	8005188 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068fe:	480d      	ldr	r0, [pc, #52]	; (8006934 <prvInitialiseTaskLists+0x68>)
 8006900:	f7fe fc42 	bl	8005188 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006904:	480c      	ldr	r0, [pc, #48]	; (8006938 <prvInitialiseTaskLists+0x6c>)
 8006906:	f7fe fc3f 	bl	8005188 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800690a:	480c      	ldr	r0, [pc, #48]	; (800693c <prvInitialiseTaskLists+0x70>)
 800690c:	f7fe fc3c 	bl	8005188 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006910:	480b      	ldr	r0, [pc, #44]	; (8006940 <prvInitialiseTaskLists+0x74>)
 8006912:	f7fe fc39 	bl	8005188 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006916:	4b0b      	ldr	r3, [pc, #44]	; (8006944 <prvInitialiseTaskLists+0x78>)
 8006918:	4a05      	ldr	r2, [pc, #20]	; (8006930 <prvInitialiseTaskLists+0x64>)
 800691a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800691c:	4b0a      	ldr	r3, [pc, #40]	; (8006948 <prvInitialiseTaskLists+0x7c>)
 800691e:	4a05      	ldr	r2, [pc, #20]	; (8006934 <prvInitialiseTaskLists+0x68>)
 8006920:	601a      	str	r2, [r3, #0]
}
 8006922:	bf00      	nop
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	200007bc 	.word	0x200007bc
 8006930:	20000c1c 	.word	0x20000c1c
 8006934:	20000c30 	.word	0x20000c30
 8006938:	20000c4c 	.word	0x20000c4c
 800693c:	20000c60 	.word	0x20000c60
 8006940:	20000c78 	.word	0x20000c78
 8006944:	20000c44 	.word	0x20000c44
 8006948:	20000c48 	.word	0x20000c48

0800694c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006952:	e019      	b.n	8006988 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006954:	f000 fdd8 	bl	8007508 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006958:	4b0f      	ldr	r3, [pc, #60]	; (8006998 <prvCheckTasksWaitingTermination+0x4c>)
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	3304      	adds	r3, #4
 8006964:	4618      	mov	r0, r3
 8006966:	f7fe fc95 	bl	8005294 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800696a:	4b0c      	ldr	r3, [pc, #48]	; (800699c <prvCheckTasksWaitingTermination+0x50>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3b01      	subs	r3, #1
 8006970:	4a0a      	ldr	r2, [pc, #40]	; (800699c <prvCheckTasksWaitingTermination+0x50>)
 8006972:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006974:	4b0a      	ldr	r3, [pc, #40]	; (80069a0 <prvCheckTasksWaitingTermination+0x54>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3b01      	subs	r3, #1
 800697a:	4a09      	ldr	r2, [pc, #36]	; (80069a0 <prvCheckTasksWaitingTermination+0x54>)
 800697c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800697e:	f000 fdf1 	bl	8007564 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f80e 	bl	80069a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006988:	4b05      	ldr	r3, [pc, #20]	; (80069a0 <prvCheckTasksWaitingTermination+0x54>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1e1      	bne.n	8006954 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006990:	bf00      	nop
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	20000c60 	.word	0x20000c60
 800699c:	20000c8c 	.word	0x20000c8c
 80069a0:	20000c74 	.word	0x20000c74

080069a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d108      	bne.n	80069c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 ff5c 	bl	8007878 <vPortFree>
				vPortFree( pxTCB );
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 ff59 	bl	8007878 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80069c6:	e017      	b.n	80069f8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d103      	bne.n	80069da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 ff50 	bl	8007878 <vPortFree>
	}
 80069d8:	e00e      	b.n	80069f8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d009      	beq.n	80069f8 <prvDeleteTCB+0x54>
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	60fb      	str	r3, [r7, #12]
 80069f6:	e7fe      	b.n	80069f6 <prvDeleteTCB+0x52>
	}
 80069f8:	bf00      	nop
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a06:	4b0e      	ldr	r3, [pc, #56]	; (8006a40 <prvResetNextTaskUnblockTime+0x40>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <prvResetNextTaskUnblockTime+0x14>
 8006a10:	2301      	movs	r3, #1
 8006a12:	e000      	b.n	8006a16 <prvResetNextTaskUnblockTime+0x16>
 8006a14:	2300      	movs	r3, #0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d004      	beq.n	8006a24 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a1a:	4b0a      	ldr	r3, [pc, #40]	; (8006a44 <prvResetNextTaskUnblockTime+0x44>)
 8006a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a20:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a22:	e008      	b.n	8006a36 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a24:	4b06      	ldr	r3, [pc, #24]	; (8006a40 <prvResetNextTaskUnblockTime+0x40>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	4a04      	ldr	r2, [pc, #16]	; (8006a44 <prvResetNextTaskUnblockTime+0x44>)
 8006a34:	6013      	str	r3, [r2, #0]
}
 8006a36:	bf00      	nop
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bc80      	pop	{r7}
 8006a3e:	4770      	bx	lr
 8006a40:	20000c44 	.word	0x20000c44
 8006a44:	20000cac 	.word	0x20000cac

08006a48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a4e:	4b0b      	ldr	r3, [pc, #44]	; (8006a7c <xTaskGetSchedulerState+0x34>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d102      	bne.n	8006a5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a56:	2301      	movs	r3, #1
 8006a58:	607b      	str	r3, [r7, #4]
 8006a5a:	e008      	b.n	8006a6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a5c:	4b08      	ldr	r3, [pc, #32]	; (8006a80 <xTaskGetSchedulerState+0x38>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d102      	bne.n	8006a6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a64:	2302      	movs	r3, #2
 8006a66:	607b      	str	r3, [r7, #4]
 8006a68:	e001      	b.n	8006a6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a6e:	687b      	ldr	r3, [r7, #4]
	}
 8006a70:	4618      	mov	r0, r3
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bc80      	pop	{r7}
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	20000c98 	.word	0x20000c98
 8006a80:	20000cb4 	.word	0x20000cb4

08006a84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a90:	2300      	movs	r3, #0
 8006a92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d054      	beq.n	8006b44 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a9a:	4b2d      	ldr	r3, [pc, #180]	; (8006b50 <xTaskPriorityDisinherit+0xcc>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d009      	beq.n	8006ab8 <xTaskPriorityDisinherit+0x34>
 8006aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa8:	f383 8811 	msr	BASEPRI, r3
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	60fb      	str	r3, [r7, #12]
 8006ab6:	e7fe      	b.n	8006ab6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d109      	bne.n	8006ad4 <xTaskPriorityDisinherit+0x50>
 8006ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	60bb      	str	r3, [r7, #8]
 8006ad2:	e7fe      	b.n	8006ad2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad8:	1e5a      	subs	r2, r3, #1
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d02c      	beq.n	8006b44 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d128      	bne.n	8006b44 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	3304      	adds	r3, #4
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fe fbcc 	bl	8005294 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b14:	4b0f      	ldr	r3, [pc, #60]	; (8006b54 <xTaskPriorityDisinherit+0xd0>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d903      	bls.n	8006b24 <xTaskPriorityDisinherit+0xa0>
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b20:	4a0c      	ldr	r2, [pc, #48]	; (8006b54 <xTaskPriorityDisinherit+0xd0>)
 8006b22:	6013      	str	r3, [r2, #0]
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b28:	4613      	mov	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4a09      	ldr	r2, [pc, #36]	; (8006b58 <xTaskPriorityDisinherit+0xd4>)
 8006b32:	441a      	add	r2, r3
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	3304      	adds	r3, #4
 8006b38:	4619      	mov	r1, r3
 8006b3a:	4610      	mov	r0, r2
 8006b3c:	f7fe fb4f 	bl	80051de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b40:	2301      	movs	r3, #1
 8006b42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b44:	697b      	ldr	r3, [r7, #20]
	}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	200007b8 	.word	0x200007b8
 8006b54:	20000c94 	.word	0x20000c94
 8006b58:	200007bc 	.word	0x200007bc

08006b5c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006b62:	4b09      	ldr	r3, [pc, #36]	; (8006b88 <uxTaskResetEventItemValue+0x2c>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b6a:	4b07      	ldr	r3, [pc, #28]	; (8006b88 <uxTaskResetEventItemValue+0x2c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b70:	4b05      	ldr	r3, [pc, #20]	; (8006b88 <uxTaskResetEventItemValue+0x2c>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8006b78:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006b7a:	687b      	ldr	r3, [r7, #4]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bc80      	pop	{r7}
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	200007b8 	.word	0x200007b8

08006b8c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b96:	4b21      	ldr	r3, [pc, #132]	; (8006c1c <prvAddCurrentTaskToDelayedList+0x90>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b9c:	4b20      	ldr	r3, [pc, #128]	; (8006c20 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3304      	adds	r3, #4
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7fe fb76 	bl	8005294 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bae:	d10a      	bne.n	8006bc6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d007      	beq.n	8006bc6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bb6:	4b1a      	ldr	r3, [pc, #104]	; (8006c20 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3304      	adds	r3, #4
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4819      	ldr	r0, [pc, #100]	; (8006c24 <prvAddCurrentTaskToDelayedList+0x98>)
 8006bc0:	f7fe fb0d 	bl	80051de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006bc4:	e026      	b.n	8006c14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4413      	add	r3, r2
 8006bcc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006bce:	4b14      	ldr	r3, [pc, #80]	; (8006c20 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d209      	bcs.n	8006bf2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bde:	4b12      	ldr	r3, [pc, #72]	; (8006c28 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	4b0f      	ldr	r3, [pc, #60]	; (8006c20 <prvAddCurrentTaskToDelayedList+0x94>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3304      	adds	r3, #4
 8006be8:	4619      	mov	r1, r3
 8006bea:	4610      	mov	r0, r2
 8006bec:	f7fe fb1a 	bl	8005224 <vListInsert>
}
 8006bf0:	e010      	b.n	8006c14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bf2:	4b0e      	ldr	r3, [pc, #56]	; (8006c2c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	4b0a      	ldr	r3, [pc, #40]	; (8006c20 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3304      	adds	r3, #4
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	4610      	mov	r0, r2
 8006c00:	f7fe fb10 	bl	8005224 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c04:	4b0a      	ldr	r3, [pc, #40]	; (8006c30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d202      	bcs.n	8006c14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006c0e:	4a08      	ldr	r2, [pc, #32]	; (8006c30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	6013      	str	r3, [r2, #0]
}
 8006c14:	bf00      	nop
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	20000c90 	.word	0x20000c90
 8006c20:	200007b8 	.word	0x200007b8
 8006c24:	20000c78 	.word	0x20000c78
 8006c28:	20000c48 	.word	0x20000c48
 8006c2c:	20000c44 	.word	0x20000c44
 8006c30:	20000cac 	.word	0x20000cac

08006c34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b08a      	sub	sp, #40	; 0x28
 8006c38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c3e:	f000 fb15 	bl	800726c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c42:	4b1c      	ldr	r3, [pc, #112]	; (8006cb4 <xTimerCreateTimerTask+0x80>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d021      	beq.n	8006c8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c52:	1d3a      	adds	r2, r7, #4
 8006c54:	f107 0108 	add.w	r1, r7, #8
 8006c58:	f107 030c 	add.w	r3, r7, #12
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe f8c9 	bl	8004df4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c62:	6879      	ldr	r1, [r7, #4]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	9202      	str	r2, [sp, #8]
 8006c6a:	9301      	str	r3, [sp, #4]
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	2300      	movs	r3, #0
 8006c72:	460a      	mov	r2, r1
 8006c74:	4910      	ldr	r1, [pc, #64]	; (8006cb8 <xTimerCreateTimerTask+0x84>)
 8006c76:	4811      	ldr	r0, [pc, #68]	; (8006cbc <xTimerCreateTimerTask+0x88>)
 8006c78:	f7ff f846 	bl	8005d08 <xTaskCreateStatic>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	4b10      	ldr	r3, [pc, #64]	; (8006cc0 <xTimerCreateTimerTask+0x8c>)
 8006c80:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006c82:	4b0f      	ldr	r3, [pc, #60]	; (8006cc0 <xTimerCreateTimerTask+0x8c>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d109      	bne.n	8006ca8 <xTimerCreateTimerTask+0x74>
 8006c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	613b      	str	r3, [r7, #16]
 8006ca6:	e7fe      	b.n	8006ca6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006ca8:	697b      	ldr	r3, [r7, #20]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3718      	adds	r7, #24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20000ce8 	.word	0x20000ce8
 8006cb8:	08007ee0 	.word	0x08007ee0
 8006cbc:	08006e81 	.word	0x08006e81
 8006cc0:	20000cec 	.word	0x20000cec

08006cc4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b088      	sub	sp, #32
 8006cc8:	af02      	add	r7, sp, #8
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
 8006cd0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8006cd2:	2030      	movs	r0, #48	; 0x30
 8006cd4:	f000 fd0e 	bl	80076f4 <pvPortMalloc>
 8006cd8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00d      	beq.n	8006cfc <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	9301      	str	r3, [sp, #4]
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	68b9      	ldr	r1, [r7, #8]
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f000 f809 	bl	8006d06 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8006cfc:	697b      	ldr	r3, [r7, #20]
	}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b086      	sub	sp, #24
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	60b9      	str	r1, [r7, #8]
 8006d10:	607a      	str	r2, [r7, #4]
 8006d12:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d109      	bne.n	8006d2e <prvInitialiseNewTimer+0x28>
 8006d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	617b      	str	r3, [r7, #20]
 8006d2c:	e7fe      	b.n	8006d2c <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d015      	beq.n	8006d60 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006d34:	f000 fa9a 	bl	800726c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	683a      	ldr	r2, [r7, #0]
 8006d4e:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	6a3a      	ldr	r2, [r7, #32]
 8006d54:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d58:	3304      	adds	r3, #4
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fe fa33 	bl	80051c6 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006d60:	bf00      	nop
 8006d62:	3718      	adds	r7, #24
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b08a      	sub	sp, #40	; 0x28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
 8006d74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d76:	2300      	movs	r3, #0
 8006d78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d109      	bne.n	8006d94 <xTimerGenericCommand+0x2c>
 8006d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d84:	f383 8811 	msr	BASEPRI, r3
 8006d88:	f3bf 8f6f 	isb	sy
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	623b      	str	r3, [r7, #32]
 8006d92:	e7fe      	b.n	8006d92 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d94:	4b19      	ldr	r3, [pc, #100]	; (8006dfc <xTimerGenericCommand+0x94>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d02a      	beq.n	8006df2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b05      	cmp	r3, #5
 8006dac:	dc18      	bgt.n	8006de0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006dae:	f7ff fe4b 	bl	8006a48 <xTaskGetSchedulerState>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d109      	bne.n	8006dcc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006db8:	4b10      	ldr	r3, [pc, #64]	; (8006dfc <xTimerGenericCommand+0x94>)
 8006dba:	6818      	ldr	r0, [r3, #0]
 8006dbc:	f107 0110 	add.w	r1, r7, #16
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dc4:	f7fe fbca 	bl	800555c <xQueueGenericSend>
 8006dc8:	6278      	str	r0, [r7, #36]	; 0x24
 8006dca:	e012      	b.n	8006df2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006dcc:	4b0b      	ldr	r3, [pc, #44]	; (8006dfc <xTimerGenericCommand+0x94>)
 8006dce:	6818      	ldr	r0, [r3, #0]
 8006dd0:	f107 0110 	add.w	r1, r7, #16
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f7fe fbc0 	bl	800555c <xQueueGenericSend>
 8006ddc:	6278      	str	r0, [r7, #36]	; 0x24
 8006dde:	e008      	b.n	8006df2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006de0:	4b06      	ldr	r3, [pc, #24]	; (8006dfc <xTimerGenericCommand+0x94>)
 8006de2:	6818      	ldr	r0, [r3, #0]
 8006de4:	f107 0110 	add.w	r1, r7, #16
 8006de8:	2300      	movs	r3, #0
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	f7fe fcb0 	bl	8005750 <xQueueGenericSendFromISR>
 8006df0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3728      	adds	r7, #40	; 0x28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	20000ce8 	.word	0x20000ce8

08006e00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b088      	sub	sp, #32
 8006e04:	af02      	add	r7, sp, #8
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e0a:	4b1c      	ldr	r3, [pc, #112]	; (8006e7c <prvProcessExpiredTimer+0x7c>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	3304      	adds	r3, #4
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fe fa3b 	bl	8005294 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	69db      	ldr	r3, [r3, #28]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d121      	bne.n	8006e6a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	699a      	ldr	r2, [r3, #24]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	18d1      	adds	r1, r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	683a      	ldr	r2, [r7, #0]
 8006e32:	6978      	ldr	r0, [r7, #20]
 8006e34:	f000 f8c8 	bl	8006fc8 <prvInsertTimerInActiveList>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d015      	beq.n	8006e6a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e3e:	2300      	movs	r3, #0
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	2300      	movs	r3, #0
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	2100      	movs	r1, #0
 8006e48:	6978      	ldr	r0, [r7, #20]
 8006e4a:	f7ff ff8d 	bl	8006d68 <xTimerGenericCommand>
 8006e4e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d109      	bne.n	8006e6a <prvProcessExpiredTimer+0x6a>
 8006e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	e7fe      	b.n	8006e68 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6e:	6978      	ldr	r0, [r7, #20]
 8006e70:	4798      	blx	r3
}
 8006e72:	bf00      	nop
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	20000ce0 	.word	0x20000ce0

08006e80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e88:	f107 0308 	add.w	r3, r7, #8
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 f857 	bl	8006f40 <prvGetNextExpireTime>
 8006e92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	4619      	mov	r1, r3
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f000 f803 	bl	8006ea4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e9e:	f000 f8d5 	bl	800704c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ea2:	e7f1      	b.n	8006e88 <prvTimerTask+0x8>

08006ea4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006eae:	f7ff f957 	bl	8006160 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006eb2:	f107 0308 	add.w	r3, r7, #8
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 f866 	bl	8006f88 <prvSampleTimeNow>
 8006ebc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d130      	bne.n	8006f26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10a      	bne.n	8006ee0 <prvProcessTimerOrBlockTask+0x3c>
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d806      	bhi.n	8006ee0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006ed2:	f7ff f953 	bl	800617c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006ed6:	68f9      	ldr	r1, [r7, #12]
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f7ff ff91 	bl	8006e00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006ede:	e024      	b.n	8006f2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d008      	beq.n	8006ef8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006ee6:	4b13      	ldr	r3, [pc, #76]	; (8006f34 <prvProcessTimerOrBlockTask+0x90>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	bf0c      	ite	eq
 8006ef0:	2301      	moveq	r3, #1
 8006ef2:	2300      	movne	r3, #0
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ef8:	4b0f      	ldr	r3, [pc, #60]	; (8006f38 <prvProcessTimerOrBlockTask+0x94>)
 8006efa:	6818      	ldr	r0, [r3, #0]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	4619      	mov	r1, r3
 8006f06:	f7fe fecb 	bl	8005ca0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f0a:	f7ff f937 	bl	800617c <xTaskResumeAll>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10a      	bne.n	8006f2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f14:	4b09      	ldr	r3, [pc, #36]	; (8006f3c <prvProcessTimerOrBlockTask+0x98>)
 8006f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f1a:	601a      	str	r2, [r3, #0]
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	f3bf 8f6f 	isb	sy
}
 8006f24:	e001      	b.n	8006f2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f26:	f7ff f929 	bl	800617c <xTaskResumeAll>
}
 8006f2a:	bf00      	nop
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	20000ce4 	.word	0x20000ce4
 8006f38:	20000ce8 	.word	0x20000ce8
 8006f3c:	e000ed04 	.word	0xe000ed04

08006f40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f48:	4b0e      	ldr	r3, [pc, #56]	; (8006f84 <prvGetNextExpireTime+0x44>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	bf0c      	ite	eq
 8006f52:	2301      	moveq	r3, #1
 8006f54:	2300      	movne	r3, #0
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	461a      	mov	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d105      	bne.n	8006f72 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f66:	4b07      	ldr	r3, [pc, #28]	; (8006f84 <prvGetNextExpireTime+0x44>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	e001      	b.n	8006f76 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f76:	68fb      	ldr	r3, [r7, #12]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3714      	adds	r7, #20
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bc80      	pop	{r7}
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	20000ce0 	.word	0x20000ce0

08006f88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f90:	f7ff f990 	bl	80062b4 <xTaskGetTickCount>
 8006f94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f96:	4b0b      	ldr	r3, [pc, #44]	; (8006fc4 <prvSampleTimeNow+0x3c>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d205      	bcs.n	8006fac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006fa0:	f000 f904 	bl	80071ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	e002      	b.n	8006fb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006fb2:	4a04      	ldr	r2, [pc, #16]	; (8006fc4 <prvSampleTimeNow+0x3c>)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20000cf0 	.word	0x20000cf0

08006fc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
 8006fd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d812      	bhi.n	8007014 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	1ad2      	subs	r2, r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d302      	bcc.n	8007002 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	617b      	str	r3, [r7, #20]
 8007000:	e01b      	b.n	800703a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007002:	4b10      	ldr	r3, [pc, #64]	; (8007044 <prvInsertTimerInActiveList+0x7c>)
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	3304      	adds	r3, #4
 800700a:	4619      	mov	r1, r3
 800700c:	4610      	mov	r0, r2
 800700e:	f7fe f909 	bl	8005224 <vListInsert>
 8007012:	e012      	b.n	800703a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	429a      	cmp	r2, r3
 800701a:	d206      	bcs.n	800702a <prvInsertTimerInActiveList+0x62>
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	429a      	cmp	r2, r3
 8007022:	d302      	bcc.n	800702a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007024:	2301      	movs	r3, #1
 8007026:	617b      	str	r3, [r7, #20]
 8007028:	e007      	b.n	800703a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800702a:	4b07      	ldr	r3, [pc, #28]	; (8007048 <prvInsertTimerInActiveList+0x80>)
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	3304      	adds	r3, #4
 8007032:	4619      	mov	r1, r3
 8007034:	4610      	mov	r0, r2
 8007036:	f7fe f8f5 	bl	8005224 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800703a:	697b      	ldr	r3, [r7, #20]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3718      	adds	r7, #24
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	20000ce4 	.word	0x20000ce4
 8007048:	20000ce0 	.word	0x20000ce0

0800704c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b08e      	sub	sp, #56	; 0x38
 8007050:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007052:	e099      	b.n	8007188 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	da17      	bge.n	800708a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800705a:	1d3b      	adds	r3, r7, #4
 800705c:	3304      	adds	r3, #4
 800705e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007062:	2b00      	cmp	r3, #0
 8007064:	d109      	bne.n	800707a <prvProcessReceivedCommands+0x2e>
 8007066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706a:	f383 8811 	msr	BASEPRI, r3
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f3bf 8f4f 	dsb	sy
 8007076:	61fb      	str	r3, [r7, #28]
 8007078:	e7fe      	b.n	8007078 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800707a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007080:	6850      	ldr	r0, [r2, #4]
 8007082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007084:	6892      	ldr	r2, [r2, #8]
 8007086:	4611      	mov	r1, r2
 8007088:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	db7a      	blt.n	8007186 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d004      	beq.n	80070a6 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800709c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709e:	3304      	adds	r3, #4
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7fe f8f7 	bl	8005294 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070a6:	463b      	mov	r3, r7
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7ff ff6d 	bl	8006f88 <prvSampleTimeNow>
 80070ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b09      	cmp	r3, #9
 80070b4:	d868      	bhi.n	8007188 <prvProcessReceivedCommands+0x13c>
 80070b6:	a201      	add	r2, pc, #4	; (adr r2, 80070bc <prvProcessReceivedCommands+0x70>)
 80070b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070bc:	080070e5 	.word	0x080070e5
 80070c0:	080070e5 	.word	0x080070e5
 80070c4:	080070e5 	.word	0x080070e5
 80070c8:	08007189 	.word	0x08007189
 80070cc:	0800713f 	.word	0x0800713f
 80070d0:	08007175 	.word	0x08007175
 80070d4:	080070e5 	.word	0x080070e5
 80070d8:	080070e5 	.word	0x080070e5
 80070dc:	08007189 	.word	0x08007189
 80070e0:	0800713f 	.word	0x0800713f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	18d1      	adds	r1, r2, r3
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070f2:	f7ff ff69 	bl	8006fc8 <prvInsertTimerInActiveList>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d045      	beq.n	8007188 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007102:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007106:	69db      	ldr	r3, [r3, #28]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d13d      	bne.n	8007188 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	441a      	add	r2, r3
 8007114:	2300      	movs	r3, #0
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	2300      	movs	r3, #0
 800711a:	2100      	movs	r1, #0
 800711c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800711e:	f7ff fe23 	bl	8006d68 <xTimerGenericCommand>
 8007122:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007124:	6a3b      	ldr	r3, [r7, #32]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d12e      	bne.n	8007188 <prvProcessReceivedCommands+0x13c>
 800712a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	61bb      	str	r3, [r7, #24]
 800713c:	e7fe      	b.n	800713c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007142:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d109      	bne.n	8007160 <prvProcessReceivedCommands+0x114>
 800714c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	617b      	str	r3, [r7, #20]
 800715e:	e7fe      	b.n	800715e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	699a      	ldr	r2, [r3, #24]
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	18d1      	adds	r1, r2, r3
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800716c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800716e:	f7ff ff2b 	bl	8006fc8 <prvInsertTimerInActiveList>
					break;
 8007172:	e009      	b.n	8007188 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007176:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800717a:	2b00      	cmp	r3, #0
 800717c:	d104      	bne.n	8007188 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800717e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007180:	f000 fb7a 	bl	8007878 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007184:	e000      	b.n	8007188 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007186:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007188:	4b07      	ldr	r3, [pc, #28]	; (80071a8 <prvProcessReceivedCommands+0x15c>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	1d39      	adds	r1, r7, #4
 800718e:	2200      	movs	r2, #0
 8007190:	4618      	mov	r0, r3
 8007192:	f7fe fb71 	bl	8005878 <xQueueReceive>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	f47f af5b 	bne.w	8007054 <prvProcessReceivedCommands+0x8>
	}
}
 800719e:	bf00      	nop
 80071a0:	3730      	adds	r7, #48	; 0x30
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	20000ce8 	.word	0x20000ce8

080071ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b088      	sub	sp, #32
 80071b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071b2:	e044      	b.n	800723e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071b4:	4b2b      	ldr	r3, [pc, #172]	; (8007264 <prvSwitchTimerLists+0xb8>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071be:	4b29      	ldr	r3, [pc, #164]	; (8007264 <prvSwitchTimerLists+0xb8>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	3304      	adds	r3, #4
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fe f861 	bl	8005294 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d12d      	bne.n	800723e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	4413      	add	r3, r2
 80071ea:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d90e      	bls.n	8007212 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007200:	4b18      	ldr	r3, [pc, #96]	; (8007264 <prvSwitchTimerLists+0xb8>)
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	3304      	adds	r3, #4
 8007208:	4619      	mov	r1, r3
 800720a:	4610      	mov	r0, r2
 800720c:	f7fe f80a 	bl	8005224 <vListInsert>
 8007210:	e015      	b.n	800723e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007212:	2300      	movs	r3, #0
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	2300      	movs	r3, #0
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	2100      	movs	r1, #0
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f7ff fda3 	bl	8006d68 <xTimerGenericCommand>
 8007222:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d109      	bne.n	800723e <prvSwitchTimerLists+0x92>
 800722a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722e:	f383 8811 	msr	BASEPRI, r3
 8007232:	f3bf 8f6f 	isb	sy
 8007236:	f3bf 8f4f 	dsb	sy
 800723a:	603b      	str	r3, [r7, #0]
 800723c:	e7fe      	b.n	800723c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800723e:	4b09      	ldr	r3, [pc, #36]	; (8007264 <prvSwitchTimerLists+0xb8>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1b5      	bne.n	80071b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007248:	4b06      	ldr	r3, [pc, #24]	; (8007264 <prvSwitchTimerLists+0xb8>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800724e:	4b06      	ldr	r3, [pc, #24]	; (8007268 <prvSwitchTimerLists+0xbc>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a04      	ldr	r2, [pc, #16]	; (8007264 <prvSwitchTimerLists+0xb8>)
 8007254:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007256:	4a04      	ldr	r2, [pc, #16]	; (8007268 <prvSwitchTimerLists+0xbc>)
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	6013      	str	r3, [r2, #0]
}
 800725c:	bf00      	nop
 800725e:	3718      	adds	r7, #24
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	20000ce0 	.word	0x20000ce0
 8007268:	20000ce4 	.word	0x20000ce4

0800726c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007272:	f000 f949 	bl	8007508 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007276:	4b15      	ldr	r3, [pc, #84]	; (80072cc <prvCheckForValidListAndQueue+0x60>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d120      	bne.n	80072c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800727e:	4814      	ldr	r0, [pc, #80]	; (80072d0 <prvCheckForValidListAndQueue+0x64>)
 8007280:	f7fd ff82 	bl	8005188 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007284:	4813      	ldr	r0, [pc, #76]	; (80072d4 <prvCheckForValidListAndQueue+0x68>)
 8007286:	f7fd ff7f 	bl	8005188 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800728a:	4b13      	ldr	r3, [pc, #76]	; (80072d8 <prvCheckForValidListAndQueue+0x6c>)
 800728c:	4a10      	ldr	r2, [pc, #64]	; (80072d0 <prvCheckForValidListAndQueue+0x64>)
 800728e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007290:	4b12      	ldr	r3, [pc, #72]	; (80072dc <prvCheckForValidListAndQueue+0x70>)
 8007292:	4a10      	ldr	r2, [pc, #64]	; (80072d4 <prvCheckForValidListAndQueue+0x68>)
 8007294:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007296:	2300      	movs	r3, #0
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	4b11      	ldr	r3, [pc, #68]	; (80072e0 <prvCheckForValidListAndQueue+0x74>)
 800729c:	4a11      	ldr	r2, [pc, #68]	; (80072e4 <prvCheckForValidListAndQueue+0x78>)
 800729e:	2110      	movs	r1, #16
 80072a0:	200a      	movs	r0, #10
 80072a2:	f7fe f889 	bl	80053b8 <xQueueGenericCreateStatic>
 80072a6:	4602      	mov	r2, r0
 80072a8:	4b08      	ldr	r3, [pc, #32]	; (80072cc <prvCheckForValidListAndQueue+0x60>)
 80072aa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80072ac:	4b07      	ldr	r3, [pc, #28]	; (80072cc <prvCheckForValidListAndQueue+0x60>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d005      	beq.n	80072c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80072b4:	4b05      	ldr	r3, [pc, #20]	; (80072cc <prvCheckForValidListAndQueue+0x60>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	490b      	ldr	r1, [pc, #44]	; (80072e8 <prvCheckForValidListAndQueue+0x7c>)
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fe fcc8 	bl	8005c50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072c0:	f000 f950 	bl	8007564 <vPortExitCritical>
}
 80072c4:	bf00      	nop
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	20000ce8 	.word	0x20000ce8
 80072d0:	20000cb8 	.word	0x20000cb8
 80072d4:	20000ccc 	.word	0x20000ccc
 80072d8:	20000ce0 	.word	0x20000ce0
 80072dc:	20000ce4 	.word	0x20000ce4
 80072e0:	20000d94 	.word	0x20000d94
 80072e4:	20000cf4 	.word	0x20000cf4
 80072e8:	08007ee8 	.word	0x08007ee8

080072ec <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08a      	sub	sp, #40	; 0x28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
 80072f8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80072fa:	f06f 0301 	mvn.w	r3, #1
 80072fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800730c:	4b06      	ldr	r3, [pc, #24]	; (8007328 <xTimerPendFunctionCallFromISR+0x3c>)
 800730e:	6818      	ldr	r0, [r3, #0]
 8007310:	f107 0114 	add.w	r1, r7, #20
 8007314:	2300      	movs	r3, #0
 8007316:	683a      	ldr	r2, [r7, #0]
 8007318:	f7fe fa1a 	bl	8005750 <xQueueGenericSendFromISR>
 800731c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800731e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007320:	4618      	mov	r0, r3
 8007322:	3728      	adds	r7, #40	; 0x28
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	20000ce8 	.word	0x20000ce8

0800732c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3b04      	subs	r3, #4
 800733c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007344:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	3b04      	subs	r3, #4
 800734a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	f023 0201 	bic.w	r2, r3, #1
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	3b04      	subs	r3, #4
 800735a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800735c:	4a08      	ldr	r2, [pc, #32]	; (8007380 <pxPortInitialiseStack+0x54>)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3b14      	subs	r3, #20
 8007366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3b20      	subs	r3, #32
 8007372:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007374:	68fb      	ldr	r3, [r7, #12]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	bc80      	pop	{r7}
 800737e:	4770      	bx	lr
 8007380:	08007385 	.word	0x08007385

08007384 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800738a:	2300      	movs	r3, #0
 800738c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800738e:	4b10      	ldr	r3, [pc, #64]	; (80073d0 <prvTaskExitError+0x4c>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007396:	d009      	beq.n	80073ac <prvTaskExitError+0x28>
 8007398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	60fb      	str	r3, [r7, #12]
 80073aa:	e7fe      	b.n	80073aa <prvTaskExitError+0x26>
 80073ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b0:	f383 8811 	msr	BASEPRI, r3
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073be:	bf00      	nop
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d0fc      	beq.n	80073c0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80073c6:	bf00      	nop
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bc80      	pop	{r7}
 80073ce:	4770      	bx	lr
 80073d0:	2000006c 	.word	0x2000006c
	...

080073e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80073e0:	4b07      	ldr	r3, [pc, #28]	; (8007400 <pxCurrentTCBConst2>)
 80073e2:	6819      	ldr	r1, [r3, #0]
 80073e4:	6808      	ldr	r0, [r1, #0]
 80073e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80073ea:	f380 8809 	msr	PSP, r0
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	f04f 0000 	mov.w	r0, #0
 80073f6:	f380 8811 	msr	BASEPRI, r0
 80073fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80073fe:	4770      	bx	lr

08007400 <pxCurrentTCBConst2>:
 8007400:	200007b8 	.word	0x200007b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007404:	bf00      	nop
 8007406:	bf00      	nop

08007408 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007408:	4806      	ldr	r0, [pc, #24]	; (8007424 <prvPortStartFirstTask+0x1c>)
 800740a:	6800      	ldr	r0, [r0, #0]
 800740c:	6800      	ldr	r0, [r0, #0]
 800740e:	f380 8808 	msr	MSP, r0
 8007412:	b662      	cpsie	i
 8007414:	b661      	cpsie	f
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	df00      	svc	0
 8007420:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007422:	bf00      	nop
 8007424:	e000ed08 	.word	0xe000ed08

08007428 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800742e:	4b31      	ldr	r3, [pc, #196]	; (80074f4 <xPortStartScheduler+0xcc>)
 8007430:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	b2db      	uxtb	r3, r3
 8007438:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	22ff      	movs	r2, #255	; 0xff
 800743e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	b2db      	uxtb	r3, r3
 8007446:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007448:	78fb      	ldrb	r3, [r7, #3]
 800744a:	b2db      	uxtb	r3, r3
 800744c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007450:	b2da      	uxtb	r2, r3
 8007452:	4b29      	ldr	r3, [pc, #164]	; (80074f8 <xPortStartScheduler+0xd0>)
 8007454:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007456:	4b29      	ldr	r3, [pc, #164]	; (80074fc <xPortStartScheduler+0xd4>)
 8007458:	2207      	movs	r2, #7
 800745a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800745c:	e009      	b.n	8007472 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800745e:	4b27      	ldr	r3, [pc, #156]	; (80074fc <xPortStartScheduler+0xd4>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	3b01      	subs	r3, #1
 8007464:	4a25      	ldr	r2, [pc, #148]	; (80074fc <xPortStartScheduler+0xd4>)
 8007466:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007468:	78fb      	ldrb	r3, [r7, #3]
 800746a:	b2db      	uxtb	r3, r3
 800746c:	005b      	lsls	r3, r3, #1
 800746e:	b2db      	uxtb	r3, r3
 8007470:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007472:	78fb      	ldrb	r3, [r7, #3]
 8007474:	b2db      	uxtb	r3, r3
 8007476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800747a:	2b80      	cmp	r3, #128	; 0x80
 800747c:	d0ef      	beq.n	800745e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800747e:	4b1f      	ldr	r3, [pc, #124]	; (80074fc <xPortStartScheduler+0xd4>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f1c3 0307 	rsb	r3, r3, #7
 8007486:	2b04      	cmp	r3, #4
 8007488:	d009      	beq.n	800749e <xPortStartScheduler+0x76>
 800748a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	60bb      	str	r3, [r7, #8]
 800749c:	e7fe      	b.n	800749c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800749e:	4b17      	ldr	r3, [pc, #92]	; (80074fc <xPortStartScheduler+0xd4>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	021b      	lsls	r3, r3, #8
 80074a4:	4a15      	ldr	r2, [pc, #84]	; (80074fc <xPortStartScheduler+0xd4>)
 80074a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80074a8:	4b14      	ldr	r3, [pc, #80]	; (80074fc <xPortStartScheduler+0xd4>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074b0:	4a12      	ldr	r2, [pc, #72]	; (80074fc <xPortStartScheduler+0xd4>)
 80074b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80074bc:	4b10      	ldr	r3, [pc, #64]	; (8007500 <xPortStartScheduler+0xd8>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a0f      	ldr	r2, [pc, #60]	; (8007500 <xPortStartScheduler+0xd8>)
 80074c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80074c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80074c8:	4b0d      	ldr	r3, [pc, #52]	; (8007500 <xPortStartScheduler+0xd8>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a0c      	ldr	r2, [pc, #48]	; (8007500 <xPortStartScheduler+0xd8>)
 80074ce:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80074d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80074d4:	f000 f8b0 	bl	8007638 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80074d8:	4b0a      	ldr	r3, [pc, #40]	; (8007504 <xPortStartScheduler+0xdc>)
 80074da:	2200      	movs	r2, #0
 80074dc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80074de:	f7ff ff93 	bl	8007408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80074e2:	f7fe ffb3 	bl	800644c <vTaskSwitchContext>
	prvTaskExitError();
 80074e6:	f7ff ff4d 	bl	8007384 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	e000e400 	.word	0xe000e400
 80074f8:	20000de4 	.word	0x20000de4
 80074fc:	20000de8 	.word	0x20000de8
 8007500:	e000ed20 	.word	0xe000ed20
 8007504:	2000006c 	.word	0x2000006c

08007508 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007520:	4b0e      	ldr	r3, [pc, #56]	; (800755c <vPortEnterCritical+0x54>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3301      	adds	r3, #1
 8007526:	4a0d      	ldr	r2, [pc, #52]	; (800755c <vPortEnterCritical+0x54>)
 8007528:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800752a:	4b0c      	ldr	r3, [pc, #48]	; (800755c <vPortEnterCritical+0x54>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d10e      	bne.n	8007550 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007532:	4b0b      	ldr	r3, [pc, #44]	; (8007560 <vPortEnterCritical+0x58>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	b2db      	uxtb	r3, r3
 8007538:	2b00      	cmp	r3, #0
 800753a:	d009      	beq.n	8007550 <vPortEnterCritical+0x48>
 800753c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	603b      	str	r3, [r7, #0]
 800754e:	e7fe      	b.n	800754e <vPortEnterCritical+0x46>
	}
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	bc80      	pop	{r7}
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	2000006c 	.word	0x2000006c
 8007560:	e000ed04 	.word	0xe000ed04

08007564 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800756a:	4b10      	ldr	r3, [pc, #64]	; (80075ac <vPortExitCritical+0x48>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d109      	bne.n	8007586 <vPortExitCritical+0x22>
 8007572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007576:	f383 8811 	msr	BASEPRI, r3
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	607b      	str	r3, [r7, #4]
 8007584:	e7fe      	b.n	8007584 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007586:	4b09      	ldr	r3, [pc, #36]	; (80075ac <vPortExitCritical+0x48>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	3b01      	subs	r3, #1
 800758c:	4a07      	ldr	r2, [pc, #28]	; (80075ac <vPortExitCritical+0x48>)
 800758e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007590:	4b06      	ldr	r3, [pc, #24]	; (80075ac <vPortExitCritical+0x48>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d104      	bne.n	80075a2 <vPortExitCritical+0x3e>
 8007598:	2300      	movs	r3, #0
 800759a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80075a2:	bf00      	nop
 80075a4:	370c      	adds	r7, #12
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bc80      	pop	{r7}
 80075aa:	4770      	bx	lr
 80075ac:	2000006c 	.word	0x2000006c

080075b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80075b0:	f3ef 8009 	mrs	r0, PSP
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	4b0d      	ldr	r3, [pc, #52]	; (80075f0 <pxCurrentTCBConst>)
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80075c0:	6010      	str	r0, [r2, #0]
 80075c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80075c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80075ca:	f380 8811 	msr	BASEPRI, r0
 80075ce:	f7fe ff3d 	bl	800644c <vTaskSwitchContext>
 80075d2:	f04f 0000 	mov.w	r0, #0
 80075d6:	f380 8811 	msr	BASEPRI, r0
 80075da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80075de:	6819      	ldr	r1, [r3, #0]
 80075e0:	6808      	ldr	r0, [r1, #0]
 80075e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80075e6:	f380 8809 	msr	PSP, r0
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	4770      	bx	lr

080075f0 <pxCurrentTCBConst>:
 80075f0:	200007b8 	.word	0x200007b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80075f4:	bf00      	nop
 80075f6:	bf00      	nop

080075f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
	__asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007610:	f7fe fe5e 	bl	80062d0 <xTaskIncrementTick>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d003      	beq.n	8007622 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800761a:	4b06      	ldr	r3, [pc, #24]	; (8007634 <SysTick_Handler+0x3c>)
 800761c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007620:	601a      	str	r2, [r3, #0]
 8007622:	2300      	movs	r3, #0
 8007624:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800762c:	bf00      	nop
 800762e:	3708      	adds	r7, #8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	e000ed04 	.word	0xe000ed04

08007638 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007638:	b480      	push	{r7}
 800763a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800763c:	4b0a      	ldr	r3, [pc, #40]	; (8007668 <vPortSetupTimerInterrupt+0x30>)
 800763e:	2200      	movs	r2, #0
 8007640:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007642:	4b0a      	ldr	r3, [pc, #40]	; (800766c <vPortSetupTimerInterrupt+0x34>)
 8007644:	2200      	movs	r2, #0
 8007646:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007648:	4b09      	ldr	r3, [pc, #36]	; (8007670 <vPortSetupTimerInterrupt+0x38>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a09      	ldr	r2, [pc, #36]	; (8007674 <vPortSetupTimerInterrupt+0x3c>)
 800764e:	fba2 2303 	umull	r2, r3, r2, r3
 8007652:	099b      	lsrs	r3, r3, #6
 8007654:	4a08      	ldr	r2, [pc, #32]	; (8007678 <vPortSetupTimerInterrupt+0x40>)
 8007656:	3b01      	subs	r3, #1
 8007658:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800765a:	4b03      	ldr	r3, [pc, #12]	; (8007668 <vPortSetupTimerInterrupt+0x30>)
 800765c:	2207      	movs	r2, #7
 800765e:	601a      	str	r2, [r3, #0]
}
 8007660:	bf00      	nop
 8007662:	46bd      	mov	sp, r7
 8007664:	bc80      	pop	{r7}
 8007666:	4770      	bx	lr
 8007668:	e000e010 	.word	0xe000e010
 800766c:	e000e018 	.word	0xe000e018
 8007670:	20000060 	.word	0x20000060
 8007674:	10624dd3 	.word	0x10624dd3
 8007678:	e000e014 	.word	0xe000e014

0800767c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007682:	f3ef 8305 	mrs	r3, IPSR
 8007686:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2b0f      	cmp	r3, #15
 800768c:	d913      	bls.n	80076b6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800768e:	4a15      	ldr	r2, [pc, #84]	; (80076e4 <vPortValidateInterruptPriority+0x68>)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	4413      	add	r3, r2
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007698:	4b13      	ldr	r3, [pc, #76]	; (80076e8 <vPortValidateInterruptPriority+0x6c>)
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	7afa      	ldrb	r2, [r7, #11]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d209      	bcs.n	80076b6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	607b      	str	r3, [r7, #4]
 80076b4:	e7fe      	b.n	80076b4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076b6:	4b0d      	ldr	r3, [pc, #52]	; (80076ec <vPortValidateInterruptPriority+0x70>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80076be:	4b0c      	ldr	r3, [pc, #48]	; (80076f0 <vPortValidateInterruptPriority+0x74>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d909      	bls.n	80076da <vPortValidateInterruptPriority+0x5e>
 80076c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ca:	f383 8811 	msr	BASEPRI, r3
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	f3bf 8f4f 	dsb	sy
 80076d6:	603b      	str	r3, [r7, #0]
 80076d8:	e7fe      	b.n	80076d8 <vPortValidateInterruptPriority+0x5c>
	}
 80076da:	bf00      	nop
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	bc80      	pop	{r7}
 80076e2:	4770      	bx	lr
 80076e4:	e000e3f0 	.word	0xe000e3f0
 80076e8:	20000de4 	.word	0x20000de4
 80076ec:	e000ed0c 	.word	0xe000ed0c
 80076f0:	20000de8 	.word	0x20000de8

080076f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b08a      	sub	sp, #40	; 0x28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80076fc:	2300      	movs	r3, #0
 80076fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007700:	f7fe fd2e 	bl	8006160 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007704:	4b57      	ldr	r3, [pc, #348]	; (8007864 <pvPortMalloc+0x170>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d101      	bne.n	8007710 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800770c:	f000 f90c 	bl	8007928 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007710:	4b55      	ldr	r3, [pc, #340]	; (8007868 <pvPortMalloc+0x174>)
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4013      	ands	r3, r2
 8007718:	2b00      	cmp	r3, #0
 800771a:	f040 808c 	bne.w	8007836 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d01c      	beq.n	800775e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007724:	2208      	movs	r2, #8
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4413      	add	r3, r2
 800772a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f003 0307 	and.w	r3, r3, #7
 8007732:	2b00      	cmp	r3, #0
 8007734:	d013      	beq.n	800775e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f023 0307 	bic.w	r3, r3, #7
 800773c:	3308      	adds	r3, #8
 800773e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f003 0307 	and.w	r3, r3, #7
 8007746:	2b00      	cmp	r3, #0
 8007748:	d009      	beq.n	800775e <pvPortMalloc+0x6a>
 800774a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	617b      	str	r3, [r7, #20]
 800775c:	e7fe      	b.n	800775c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d068      	beq.n	8007836 <pvPortMalloc+0x142>
 8007764:	4b41      	ldr	r3, [pc, #260]	; (800786c <pvPortMalloc+0x178>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	429a      	cmp	r2, r3
 800776c:	d863      	bhi.n	8007836 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800776e:	4b40      	ldr	r3, [pc, #256]	; (8007870 <pvPortMalloc+0x17c>)
 8007770:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007772:	4b3f      	ldr	r3, [pc, #252]	; (8007870 <pvPortMalloc+0x17c>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007778:	e004      	b.n	8007784 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800777e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	429a      	cmp	r2, r3
 800778c:	d903      	bls.n	8007796 <pvPortMalloc+0xa2>
 800778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1f1      	bne.n	800777a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007796:	4b33      	ldr	r3, [pc, #204]	; (8007864 <pvPortMalloc+0x170>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800779c:	429a      	cmp	r2, r3
 800779e:	d04a      	beq.n	8007836 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077a0:	6a3b      	ldr	r3, [r7, #32]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2208      	movs	r2, #8
 80077a6:	4413      	add	r3, r2
 80077a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	6a3b      	ldr	r3, [r7, #32]
 80077b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b4:	685a      	ldr	r2, [r3, #4]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	1ad2      	subs	r2, r2, r3
 80077ba:	2308      	movs	r3, #8
 80077bc:	005b      	lsls	r3, r3, #1
 80077be:	429a      	cmp	r2, r3
 80077c0:	d91e      	bls.n	8007800 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80077c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4413      	add	r3, r2
 80077c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	f003 0307 	and.w	r3, r3, #7
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d009      	beq.n	80077e8 <pvPortMalloc+0xf4>
 80077d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	613b      	str	r3, [r7, #16]
 80077e6:	e7fe      	b.n	80077e6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	685a      	ldr	r2, [r3, #4]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	1ad2      	subs	r2, r2, r3
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80077fa:	69b8      	ldr	r0, [r7, #24]
 80077fc:	f000 f8f6 	bl	80079ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007800:	4b1a      	ldr	r3, [pc, #104]	; (800786c <pvPortMalloc+0x178>)
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	4a18      	ldr	r2, [pc, #96]	; (800786c <pvPortMalloc+0x178>)
 800780c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800780e:	4b17      	ldr	r3, [pc, #92]	; (800786c <pvPortMalloc+0x178>)
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	4b18      	ldr	r3, [pc, #96]	; (8007874 <pvPortMalloc+0x180>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	429a      	cmp	r2, r3
 8007818:	d203      	bcs.n	8007822 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800781a:	4b14      	ldr	r3, [pc, #80]	; (800786c <pvPortMalloc+0x178>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a15      	ldr	r2, [pc, #84]	; (8007874 <pvPortMalloc+0x180>)
 8007820:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	4b10      	ldr	r3, [pc, #64]	; (8007868 <pvPortMalloc+0x174>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	431a      	orrs	r2, r3
 800782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	2200      	movs	r2, #0
 8007834:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007836:	f7fe fca1 	bl	800617c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	f003 0307 	and.w	r3, r3, #7
 8007840:	2b00      	cmp	r3, #0
 8007842:	d009      	beq.n	8007858 <pvPortMalloc+0x164>
 8007844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	60fb      	str	r3, [r7, #12]
 8007856:	e7fe      	b.n	8007856 <pvPortMalloc+0x162>
	return pvReturn;
 8007858:	69fb      	ldr	r3, [r7, #28]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3728      	adds	r7, #40	; 0x28
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	200019f4 	.word	0x200019f4
 8007868:	20001a00 	.word	0x20001a00
 800786c:	200019f8 	.word	0x200019f8
 8007870:	200019ec 	.word	0x200019ec
 8007874:	200019fc 	.word	0x200019fc

08007878 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d046      	beq.n	8007918 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800788a:	2308      	movs	r3, #8
 800788c:	425b      	negs	r3, r3
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	4413      	add	r3, r2
 8007892:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	4b20      	ldr	r3, [pc, #128]	; (8007920 <vPortFree+0xa8>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4013      	ands	r3, r2
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d109      	bne.n	80078ba <vPortFree+0x42>
 80078a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078aa:	f383 8811 	msr	BASEPRI, r3
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	f3bf 8f4f 	dsb	sy
 80078b6:	60fb      	str	r3, [r7, #12]
 80078b8:	e7fe      	b.n	80078b8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d009      	beq.n	80078d6 <vPortFree+0x5e>
 80078c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	60bb      	str	r3, [r7, #8]
 80078d4:	e7fe      	b.n	80078d4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	685a      	ldr	r2, [r3, #4]
 80078da:	4b11      	ldr	r3, [pc, #68]	; (8007920 <vPortFree+0xa8>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4013      	ands	r3, r2
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d019      	beq.n	8007918 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d115      	bne.n	8007918 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	685a      	ldr	r2, [r3, #4]
 80078f0:	4b0b      	ldr	r3, [pc, #44]	; (8007920 <vPortFree+0xa8>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	43db      	mvns	r3, r3
 80078f6:	401a      	ands	r2, r3
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80078fc:	f7fe fc30 	bl	8006160 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	4b07      	ldr	r3, [pc, #28]	; (8007924 <vPortFree+0xac>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4413      	add	r3, r2
 800790a:	4a06      	ldr	r2, [pc, #24]	; (8007924 <vPortFree+0xac>)
 800790c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800790e:	6938      	ldr	r0, [r7, #16]
 8007910:	f000 f86c 	bl	80079ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007914:	f7fe fc32 	bl	800617c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007918:	bf00      	nop
 800791a:	3718      	adds	r7, #24
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	20001a00 	.word	0x20001a00
 8007924:	200019f8 	.word	0x200019f8

08007928 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800792e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007932:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007934:	4b27      	ldr	r3, [pc, #156]	; (80079d4 <prvHeapInit+0xac>)
 8007936:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f003 0307 	and.w	r3, r3, #7
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00c      	beq.n	800795c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	3307      	adds	r3, #7
 8007946:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f023 0307 	bic.w	r3, r3, #7
 800794e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007950:	68ba      	ldr	r2, [r7, #8]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	1ad3      	subs	r3, r2, r3
 8007956:	4a1f      	ldr	r2, [pc, #124]	; (80079d4 <prvHeapInit+0xac>)
 8007958:	4413      	add	r3, r2
 800795a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007960:	4a1d      	ldr	r2, [pc, #116]	; (80079d8 <prvHeapInit+0xb0>)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007966:	4b1c      	ldr	r3, [pc, #112]	; (80079d8 <prvHeapInit+0xb0>)
 8007968:	2200      	movs	r2, #0
 800796a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	4413      	add	r3, r2
 8007972:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007974:	2208      	movs	r2, #8
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	1a9b      	subs	r3, r3, r2
 800797a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f023 0307 	bic.w	r3, r3, #7
 8007982:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4a15      	ldr	r2, [pc, #84]	; (80079dc <prvHeapInit+0xb4>)
 8007988:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800798a:	4b14      	ldr	r3, [pc, #80]	; (80079dc <prvHeapInit+0xb4>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2200      	movs	r2, #0
 8007990:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007992:	4b12      	ldr	r3, [pc, #72]	; (80079dc <prvHeapInit+0xb4>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2200      	movs	r2, #0
 8007998:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	1ad2      	subs	r2, r2, r3
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80079a8:	4b0c      	ldr	r3, [pc, #48]	; (80079dc <prvHeapInit+0xb4>)
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	4a0a      	ldr	r2, [pc, #40]	; (80079e0 <prvHeapInit+0xb8>)
 80079b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	4a09      	ldr	r2, [pc, #36]	; (80079e4 <prvHeapInit+0xbc>)
 80079be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80079c0:	4b09      	ldr	r3, [pc, #36]	; (80079e8 <prvHeapInit+0xc0>)
 80079c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80079c6:	601a      	str	r2, [r3, #0]
}
 80079c8:	bf00      	nop
 80079ca:	3714      	adds	r7, #20
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bc80      	pop	{r7}
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	20000dec 	.word	0x20000dec
 80079d8:	200019ec 	.word	0x200019ec
 80079dc:	200019f4 	.word	0x200019f4
 80079e0:	200019fc 	.word	0x200019fc
 80079e4:	200019f8 	.word	0x200019f8
 80079e8:	20001a00 	.word	0x20001a00

080079ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80079f4:	4b27      	ldr	r3, [pc, #156]	; (8007a94 <prvInsertBlockIntoFreeList+0xa8>)
 80079f6:	60fb      	str	r3, [r7, #12]
 80079f8:	e002      	b.n	8007a00 <prvInsertBlockIntoFreeList+0x14>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	60fb      	str	r3, [r7, #12]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d8f7      	bhi.n	80079fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	4413      	add	r3, r2
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d108      	bne.n	8007a2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	441a      	add	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	441a      	add	r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d118      	bne.n	8007a74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	4b14      	ldr	r3, [pc, #80]	; (8007a98 <prvInsertBlockIntoFreeList+0xac>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d00d      	beq.n	8007a6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	441a      	add	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	601a      	str	r2, [r3, #0]
 8007a68:	e008      	b.n	8007a7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a6a:	4b0b      	ldr	r3, [pc, #44]	; (8007a98 <prvInsertBlockIntoFreeList+0xac>)
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	601a      	str	r2, [r3, #0]
 8007a72:	e003      	b.n	8007a7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d002      	beq.n	8007a8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a8a:	bf00      	nop
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bc80      	pop	{r7}
 8007a92:	4770      	bx	lr
 8007a94:	200019ec 	.word	0x200019ec
 8007a98:	200019f4 	.word	0x200019f4

08007a9c <__errno>:
 8007a9c:	4b01      	ldr	r3, [pc, #4]	; (8007aa4 <__errno+0x8>)
 8007a9e:	6818      	ldr	r0, [r3, #0]
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	20000070 	.word	0x20000070

08007aa8 <__libc_init_array>:
 8007aa8:	b570      	push	{r4, r5, r6, lr}
 8007aaa:	2500      	movs	r5, #0
 8007aac:	4e0c      	ldr	r6, [pc, #48]	; (8007ae0 <__libc_init_array+0x38>)
 8007aae:	4c0d      	ldr	r4, [pc, #52]	; (8007ae4 <__libc_init_array+0x3c>)
 8007ab0:	1ba4      	subs	r4, r4, r6
 8007ab2:	10a4      	asrs	r4, r4, #2
 8007ab4:	42a5      	cmp	r5, r4
 8007ab6:	d109      	bne.n	8007acc <__libc_init_array+0x24>
 8007ab8:	f000 f8f6 	bl	8007ca8 <_init>
 8007abc:	2500      	movs	r5, #0
 8007abe:	4e0a      	ldr	r6, [pc, #40]	; (8007ae8 <__libc_init_array+0x40>)
 8007ac0:	4c0a      	ldr	r4, [pc, #40]	; (8007aec <__libc_init_array+0x44>)
 8007ac2:	1ba4      	subs	r4, r4, r6
 8007ac4:	10a4      	asrs	r4, r4, #2
 8007ac6:	42a5      	cmp	r5, r4
 8007ac8:	d105      	bne.n	8007ad6 <__libc_init_array+0x2e>
 8007aca:	bd70      	pop	{r4, r5, r6, pc}
 8007acc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ad0:	4798      	blx	r3
 8007ad2:	3501      	adds	r5, #1
 8007ad4:	e7ee      	b.n	8007ab4 <__libc_init_array+0xc>
 8007ad6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ada:	4798      	blx	r3
 8007adc:	3501      	adds	r5, #1
 8007ade:	e7f2      	b.n	8007ac6 <__libc_init_array+0x1e>
 8007ae0:	08007fe0 	.word	0x08007fe0
 8007ae4:	08007fe0 	.word	0x08007fe0
 8007ae8:	08007fe0 	.word	0x08007fe0
 8007aec:	08007fe4 	.word	0x08007fe4

08007af0 <malloc>:
 8007af0:	4b02      	ldr	r3, [pc, #8]	; (8007afc <malloc+0xc>)
 8007af2:	4601      	mov	r1, r0
 8007af4:	6818      	ldr	r0, [r3, #0]
 8007af6:	f000 b86b 	b.w	8007bd0 <_malloc_r>
 8007afa:	bf00      	nop
 8007afc:	20000070 	.word	0x20000070

08007b00 <free>:
 8007b00:	4b02      	ldr	r3, [pc, #8]	; (8007b0c <free+0xc>)
 8007b02:	4601      	mov	r1, r0
 8007b04:	6818      	ldr	r0, [r3, #0]
 8007b06:	f000 b817 	b.w	8007b38 <_free_r>
 8007b0a:	bf00      	nop
 8007b0c:	20000070 	.word	0x20000070

08007b10 <memcpy>:
 8007b10:	b510      	push	{r4, lr}
 8007b12:	1e43      	subs	r3, r0, #1
 8007b14:	440a      	add	r2, r1
 8007b16:	4291      	cmp	r1, r2
 8007b18:	d100      	bne.n	8007b1c <memcpy+0xc>
 8007b1a:	bd10      	pop	{r4, pc}
 8007b1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b24:	e7f7      	b.n	8007b16 <memcpy+0x6>

08007b26 <memset>:
 8007b26:	4603      	mov	r3, r0
 8007b28:	4402      	add	r2, r0
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d100      	bne.n	8007b30 <memset+0xa>
 8007b2e:	4770      	bx	lr
 8007b30:	f803 1b01 	strb.w	r1, [r3], #1
 8007b34:	e7f9      	b.n	8007b2a <memset+0x4>
	...

08007b38 <_free_r>:
 8007b38:	b538      	push	{r3, r4, r5, lr}
 8007b3a:	4605      	mov	r5, r0
 8007b3c:	2900      	cmp	r1, #0
 8007b3e:	d043      	beq.n	8007bc8 <_free_r+0x90>
 8007b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b44:	1f0c      	subs	r4, r1, #4
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	bfb8      	it	lt
 8007b4a:	18e4      	addlt	r4, r4, r3
 8007b4c:	f000 f8aa 	bl	8007ca4 <__malloc_lock>
 8007b50:	4a1e      	ldr	r2, [pc, #120]	; (8007bcc <_free_r+0x94>)
 8007b52:	6813      	ldr	r3, [r2, #0]
 8007b54:	4610      	mov	r0, r2
 8007b56:	b933      	cbnz	r3, 8007b66 <_free_r+0x2e>
 8007b58:	6063      	str	r3, [r4, #4]
 8007b5a:	6014      	str	r4, [r2, #0]
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b62:	f000 b8a0 	b.w	8007ca6 <__malloc_unlock>
 8007b66:	42a3      	cmp	r3, r4
 8007b68:	d90b      	bls.n	8007b82 <_free_r+0x4a>
 8007b6a:	6821      	ldr	r1, [r4, #0]
 8007b6c:	1862      	adds	r2, r4, r1
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	bf01      	itttt	eq
 8007b72:	681a      	ldreq	r2, [r3, #0]
 8007b74:	685b      	ldreq	r3, [r3, #4]
 8007b76:	1852      	addeq	r2, r2, r1
 8007b78:	6022      	streq	r2, [r4, #0]
 8007b7a:	6063      	str	r3, [r4, #4]
 8007b7c:	6004      	str	r4, [r0, #0]
 8007b7e:	e7ed      	b.n	8007b5c <_free_r+0x24>
 8007b80:	4613      	mov	r3, r2
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	b10a      	cbz	r2, 8007b8a <_free_r+0x52>
 8007b86:	42a2      	cmp	r2, r4
 8007b88:	d9fa      	bls.n	8007b80 <_free_r+0x48>
 8007b8a:	6819      	ldr	r1, [r3, #0]
 8007b8c:	1858      	adds	r0, r3, r1
 8007b8e:	42a0      	cmp	r0, r4
 8007b90:	d10b      	bne.n	8007baa <_free_r+0x72>
 8007b92:	6820      	ldr	r0, [r4, #0]
 8007b94:	4401      	add	r1, r0
 8007b96:	1858      	adds	r0, r3, r1
 8007b98:	4282      	cmp	r2, r0
 8007b9a:	6019      	str	r1, [r3, #0]
 8007b9c:	d1de      	bne.n	8007b5c <_free_r+0x24>
 8007b9e:	6810      	ldr	r0, [r2, #0]
 8007ba0:	6852      	ldr	r2, [r2, #4]
 8007ba2:	4401      	add	r1, r0
 8007ba4:	6019      	str	r1, [r3, #0]
 8007ba6:	605a      	str	r2, [r3, #4]
 8007ba8:	e7d8      	b.n	8007b5c <_free_r+0x24>
 8007baa:	d902      	bls.n	8007bb2 <_free_r+0x7a>
 8007bac:	230c      	movs	r3, #12
 8007bae:	602b      	str	r3, [r5, #0]
 8007bb0:	e7d4      	b.n	8007b5c <_free_r+0x24>
 8007bb2:	6820      	ldr	r0, [r4, #0]
 8007bb4:	1821      	adds	r1, r4, r0
 8007bb6:	428a      	cmp	r2, r1
 8007bb8:	bf01      	itttt	eq
 8007bba:	6811      	ldreq	r1, [r2, #0]
 8007bbc:	6852      	ldreq	r2, [r2, #4]
 8007bbe:	1809      	addeq	r1, r1, r0
 8007bc0:	6021      	streq	r1, [r4, #0]
 8007bc2:	6062      	str	r2, [r4, #4]
 8007bc4:	605c      	str	r4, [r3, #4]
 8007bc6:	e7c9      	b.n	8007b5c <_free_r+0x24>
 8007bc8:	bd38      	pop	{r3, r4, r5, pc}
 8007bca:	bf00      	nop
 8007bcc:	20001a04 	.word	0x20001a04

08007bd0 <_malloc_r>:
 8007bd0:	b570      	push	{r4, r5, r6, lr}
 8007bd2:	1ccd      	adds	r5, r1, #3
 8007bd4:	f025 0503 	bic.w	r5, r5, #3
 8007bd8:	3508      	adds	r5, #8
 8007bda:	2d0c      	cmp	r5, #12
 8007bdc:	bf38      	it	cc
 8007bde:	250c      	movcc	r5, #12
 8007be0:	2d00      	cmp	r5, #0
 8007be2:	4606      	mov	r6, r0
 8007be4:	db01      	blt.n	8007bea <_malloc_r+0x1a>
 8007be6:	42a9      	cmp	r1, r5
 8007be8:	d903      	bls.n	8007bf2 <_malloc_r+0x22>
 8007bea:	230c      	movs	r3, #12
 8007bec:	6033      	str	r3, [r6, #0]
 8007bee:	2000      	movs	r0, #0
 8007bf0:	bd70      	pop	{r4, r5, r6, pc}
 8007bf2:	f000 f857 	bl	8007ca4 <__malloc_lock>
 8007bf6:	4a21      	ldr	r2, [pc, #132]	; (8007c7c <_malloc_r+0xac>)
 8007bf8:	6814      	ldr	r4, [r2, #0]
 8007bfa:	4621      	mov	r1, r4
 8007bfc:	b991      	cbnz	r1, 8007c24 <_malloc_r+0x54>
 8007bfe:	4c20      	ldr	r4, [pc, #128]	; (8007c80 <_malloc_r+0xb0>)
 8007c00:	6823      	ldr	r3, [r4, #0]
 8007c02:	b91b      	cbnz	r3, 8007c0c <_malloc_r+0x3c>
 8007c04:	4630      	mov	r0, r6
 8007c06:	f000 f83d 	bl	8007c84 <_sbrk_r>
 8007c0a:	6020      	str	r0, [r4, #0]
 8007c0c:	4629      	mov	r1, r5
 8007c0e:	4630      	mov	r0, r6
 8007c10:	f000 f838 	bl	8007c84 <_sbrk_r>
 8007c14:	1c43      	adds	r3, r0, #1
 8007c16:	d124      	bne.n	8007c62 <_malloc_r+0x92>
 8007c18:	230c      	movs	r3, #12
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	6033      	str	r3, [r6, #0]
 8007c1e:	f000 f842 	bl	8007ca6 <__malloc_unlock>
 8007c22:	e7e4      	b.n	8007bee <_malloc_r+0x1e>
 8007c24:	680b      	ldr	r3, [r1, #0]
 8007c26:	1b5b      	subs	r3, r3, r5
 8007c28:	d418      	bmi.n	8007c5c <_malloc_r+0x8c>
 8007c2a:	2b0b      	cmp	r3, #11
 8007c2c:	d90f      	bls.n	8007c4e <_malloc_r+0x7e>
 8007c2e:	600b      	str	r3, [r1, #0]
 8007c30:	18cc      	adds	r4, r1, r3
 8007c32:	50cd      	str	r5, [r1, r3]
 8007c34:	4630      	mov	r0, r6
 8007c36:	f000 f836 	bl	8007ca6 <__malloc_unlock>
 8007c3a:	f104 000b 	add.w	r0, r4, #11
 8007c3e:	1d23      	adds	r3, r4, #4
 8007c40:	f020 0007 	bic.w	r0, r0, #7
 8007c44:	1ac3      	subs	r3, r0, r3
 8007c46:	d0d3      	beq.n	8007bf0 <_malloc_r+0x20>
 8007c48:	425a      	negs	r2, r3
 8007c4a:	50e2      	str	r2, [r4, r3]
 8007c4c:	e7d0      	b.n	8007bf0 <_malloc_r+0x20>
 8007c4e:	684b      	ldr	r3, [r1, #4]
 8007c50:	428c      	cmp	r4, r1
 8007c52:	bf16      	itet	ne
 8007c54:	6063      	strne	r3, [r4, #4]
 8007c56:	6013      	streq	r3, [r2, #0]
 8007c58:	460c      	movne	r4, r1
 8007c5a:	e7eb      	b.n	8007c34 <_malloc_r+0x64>
 8007c5c:	460c      	mov	r4, r1
 8007c5e:	6849      	ldr	r1, [r1, #4]
 8007c60:	e7cc      	b.n	8007bfc <_malloc_r+0x2c>
 8007c62:	1cc4      	adds	r4, r0, #3
 8007c64:	f024 0403 	bic.w	r4, r4, #3
 8007c68:	42a0      	cmp	r0, r4
 8007c6a:	d005      	beq.n	8007c78 <_malloc_r+0xa8>
 8007c6c:	1a21      	subs	r1, r4, r0
 8007c6e:	4630      	mov	r0, r6
 8007c70:	f000 f808 	bl	8007c84 <_sbrk_r>
 8007c74:	3001      	adds	r0, #1
 8007c76:	d0cf      	beq.n	8007c18 <_malloc_r+0x48>
 8007c78:	6025      	str	r5, [r4, #0]
 8007c7a:	e7db      	b.n	8007c34 <_malloc_r+0x64>
 8007c7c:	20001a04 	.word	0x20001a04
 8007c80:	20001a08 	.word	0x20001a08

08007c84 <_sbrk_r>:
 8007c84:	b538      	push	{r3, r4, r5, lr}
 8007c86:	2300      	movs	r3, #0
 8007c88:	4c05      	ldr	r4, [pc, #20]	; (8007ca0 <_sbrk_r+0x1c>)
 8007c8a:	4605      	mov	r5, r0
 8007c8c:	4608      	mov	r0, r1
 8007c8e:	6023      	str	r3, [r4, #0]
 8007c90:	f7f9 f90a 	bl	8000ea8 <_sbrk>
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	d102      	bne.n	8007c9e <_sbrk_r+0x1a>
 8007c98:	6823      	ldr	r3, [r4, #0]
 8007c9a:	b103      	cbz	r3, 8007c9e <_sbrk_r+0x1a>
 8007c9c:	602b      	str	r3, [r5, #0]
 8007c9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ca0:	20001c58 	.word	0x20001c58

08007ca4 <__malloc_lock>:
 8007ca4:	4770      	bx	lr

08007ca6 <__malloc_unlock>:
 8007ca6:	4770      	bx	lr

08007ca8 <_init>:
 8007ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007caa:	bf00      	nop
 8007cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cae:	bc08      	pop	{r3}
 8007cb0:	469e      	mov	lr, r3
 8007cb2:	4770      	bx	lr

08007cb4 <_fini>:
 8007cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb6:	bf00      	nop
 8007cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cba:	bc08      	pop	{r3}
 8007cbc:	469e      	mov	lr, r3
 8007cbe:	4770      	bx	lr
