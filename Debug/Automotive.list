
Automotive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afdc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  0800b11c  0800b11c  0001b11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4b4  0800b4b4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800b4b4  0800b4b4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b4b4  0800b4b4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4b4  0800b4b4  0001b4b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4b8  0800b4b8  0001b4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800b4bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003890  20000014  0800b4d0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200038a4  0800b4d0  000238a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002db3c  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000059f8  00000000  00000000  0004db79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ae0  00000000  00000000  00053578  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001858  00000000  00000000  00055058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001eaef  00000000  00000000  000568b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020353  00000000  00000000  0007539f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ab537  00000000  00000000  000956f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00140c29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b98  00000000  00000000  00140ca4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000014 	.word	0x20000014
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b104 	.word	0x0800b104

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000018 	.word	0x20000018
 800017c:	0800b104 	.word	0x0800b104

08000180 <__aeabi_frsub>:
 8000180:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__addsf3>
 8000186:	bf00      	nop

08000188 <__aeabi_fsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800018c <__addsf3>:
 800018c:	0042      	lsls	r2, r0, #1
 800018e:	bf1f      	itttt	ne
 8000190:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000194:	ea92 0f03 	teqne	r2, r3
 8000198:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800019c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001a0:	d06a      	beq.n	8000278 <__addsf3+0xec>
 80001a2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001aa:	bfc1      	itttt	gt
 80001ac:	18d2      	addgt	r2, r2, r3
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	4048      	eorgt	r0, r1
 80001b2:	4041      	eorgt	r1, r0
 80001b4:	bfb8      	it	lt
 80001b6:	425b      	neglt	r3, r3
 80001b8:	2b19      	cmp	r3, #25
 80001ba:	bf88      	it	hi
 80001bc:	4770      	bxhi	lr
 80001be:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4240      	negne	r0, r0
 80001ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001da:	bf18      	it	ne
 80001dc:	4249      	negne	r1, r1
 80001de:	ea92 0f03 	teq	r2, r3
 80001e2:	d03f      	beq.n	8000264 <__addsf3+0xd8>
 80001e4:	f1a2 0201 	sub.w	r2, r2, #1
 80001e8:	fa41 fc03 	asr.w	ip, r1, r3
 80001ec:	eb10 000c 	adds.w	r0, r0, ip
 80001f0:	f1c3 0320 	rsb	r3, r3, #32
 80001f4:	fa01 f103 	lsl.w	r1, r1, r3
 80001f8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001fc:	d502      	bpl.n	8000204 <__addsf3+0x78>
 80001fe:	4249      	negs	r1, r1
 8000200:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000204:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000208:	d313      	bcc.n	8000232 <__addsf3+0xa6>
 800020a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020e:	d306      	bcc.n	800021e <__addsf3+0x92>
 8000210:	0840      	lsrs	r0, r0, #1
 8000212:	ea4f 0131 	mov.w	r1, r1, rrx
 8000216:	f102 0201 	add.w	r2, r2, #1
 800021a:	2afe      	cmp	r2, #254	; 0xfe
 800021c:	d251      	bcs.n	80002c2 <__addsf3+0x136>
 800021e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000222:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000226:	bf08      	it	eq
 8000228:	f020 0001 	biceq.w	r0, r0, #1
 800022c:	ea40 0003 	orr.w	r0, r0, r3
 8000230:	4770      	bx	lr
 8000232:	0049      	lsls	r1, r1, #1
 8000234:	eb40 0000 	adc.w	r0, r0, r0
 8000238:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800023c:	f1a2 0201 	sub.w	r2, r2, #1
 8000240:	d1ed      	bne.n	800021e <__addsf3+0x92>
 8000242:	fab0 fc80 	clz	ip, r0
 8000246:	f1ac 0c08 	sub.w	ip, ip, #8
 800024a:	ebb2 020c 	subs.w	r2, r2, ip
 800024e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000252:	bfaa      	itet	ge
 8000254:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000258:	4252      	neglt	r2, r2
 800025a:	4318      	orrge	r0, r3
 800025c:	bfbc      	itt	lt
 800025e:	40d0      	lsrlt	r0, r2
 8000260:	4318      	orrlt	r0, r3
 8000262:	4770      	bx	lr
 8000264:	f092 0f00 	teq	r2, #0
 8000268:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800026c:	bf06      	itte	eq
 800026e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000272:	3201      	addeq	r2, #1
 8000274:	3b01      	subne	r3, #1
 8000276:	e7b5      	b.n	80001e4 <__addsf3+0x58>
 8000278:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800027c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000280:	bf18      	it	ne
 8000282:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000286:	d021      	beq.n	80002cc <__addsf3+0x140>
 8000288:	ea92 0f03 	teq	r2, r3
 800028c:	d004      	beq.n	8000298 <__addsf3+0x10c>
 800028e:	f092 0f00 	teq	r2, #0
 8000292:	bf08      	it	eq
 8000294:	4608      	moveq	r0, r1
 8000296:	4770      	bx	lr
 8000298:	ea90 0f01 	teq	r0, r1
 800029c:	bf1c      	itt	ne
 800029e:	2000      	movne	r0, #0
 80002a0:	4770      	bxne	lr
 80002a2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a6:	d104      	bne.n	80002b2 <__addsf3+0x126>
 80002a8:	0040      	lsls	r0, r0, #1
 80002aa:	bf28      	it	cs
 80002ac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002b0:	4770      	bx	lr
 80002b2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b6:	bf3c      	itt	cc
 80002b8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bxcc	lr
 80002be:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002c2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ca:	4770      	bx	lr
 80002cc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002d0:	bf16      	itet	ne
 80002d2:	4608      	movne	r0, r1
 80002d4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d8:	4601      	movne	r1, r0
 80002da:	0242      	lsls	r2, r0, #9
 80002dc:	bf06      	itte	eq
 80002de:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002e2:	ea90 0f01 	teqeq	r0, r1
 80002e6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ea:	4770      	bx	lr

080002ec <__aeabi_ui2f>:
 80002ec:	f04f 0300 	mov.w	r3, #0
 80002f0:	e004      	b.n	80002fc <__aeabi_i2f+0x8>
 80002f2:	bf00      	nop

080002f4 <__aeabi_i2f>:
 80002f4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f8:	bf48      	it	mi
 80002fa:	4240      	negmi	r0, r0
 80002fc:	ea5f 0c00 	movs.w	ip, r0
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000308:	4601      	mov	r1, r0
 800030a:	f04f 0000 	mov.w	r0, #0
 800030e:	e01c      	b.n	800034a <__aeabi_l2f+0x2a>

08000310 <__aeabi_ul2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f04f 0300 	mov.w	r3, #0
 800031c:	e00a      	b.n	8000334 <__aeabi_l2f+0x14>
 800031e:	bf00      	nop

08000320 <__aeabi_l2f>:
 8000320:	ea50 0201 	orrs.w	r2, r0, r1
 8000324:	bf08      	it	eq
 8000326:	4770      	bxeq	lr
 8000328:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800032c:	d502      	bpl.n	8000334 <__aeabi_l2f+0x14>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	ea5f 0c01 	movs.w	ip, r1
 8000338:	bf02      	ittt	eq
 800033a:	4684      	moveq	ip, r0
 800033c:	4601      	moveq	r1, r0
 800033e:	2000      	moveq	r0, #0
 8000340:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000344:	bf08      	it	eq
 8000346:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800034a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034e:	fabc f28c 	clz	r2, ip
 8000352:	3a08      	subs	r2, #8
 8000354:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000358:	db10      	blt.n	800037c <__aeabi_l2f+0x5c>
 800035a:	fa01 fc02 	lsl.w	ip, r1, r2
 800035e:	4463      	add	r3, ip
 8000360:	fa00 fc02 	lsl.w	ip, r0, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	fa20 f202 	lsr.w	r2, r0, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	f020 0001 	biceq.w	r0, r0, #1
 800037a:	4770      	bx	lr
 800037c:	f102 0220 	add.w	r2, r2, #32
 8000380:	fa01 fc02 	lsl.w	ip, r1, r2
 8000384:	f1c2 0220 	rsb	r2, r2, #32
 8000388:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800038c:	fa21 f202 	lsr.w	r2, r1, r2
 8000390:	eb43 0002 	adc.w	r0, r3, r2
 8000394:	bf08      	it	eq
 8000396:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800039a:	4770      	bx	lr

0800039c <__aeabi_fmul>:
 800039c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003a0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003a4:	bf1e      	ittt	ne
 80003a6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003aa:	ea92 0f0c 	teqne	r2, ip
 80003ae:	ea93 0f0c 	teqne	r3, ip
 80003b2:	d06f      	beq.n	8000494 <__aeabi_fmul+0xf8>
 80003b4:	441a      	add	r2, r3
 80003b6:	ea80 0c01 	eor.w	ip, r0, r1
 80003ba:	0240      	lsls	r0, r0, #9
 80003bc:	bf18      	it	ne
 80003be:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003c2:	d01e      	beq.n	8000402 <__aeabi_fmul+0x66>
 80003c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003c8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003cc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003d0:	fba0 3101 	umull	r3, r1, r0, r1
 80003d4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003d8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003dc:	bf3e      	ittt	cc
 80003de:	0049      	lslcc	r1, r1, #1
 80003e0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003e4:	005b      	lslcc	r3, r3, #1
 80003e6:	ea40 0001 	orr.w	r0, r0, r1
 80003ea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ee:	2afd      	cmp	r2, #253	; 0xfd
 80003f0:	d81d      	bhi.n	800042e <__aeabi_fmul+0x92>
 80003f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003fa:	bf08      	it	eq
 80003fc:	f020 0001 	biceq.w	r0, r0, #1
 8000400:	4770      	bx	lr
 8000402:	f090 0f00 	teq	r0, #0
 8000406:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800040a:	bf08      	it	eq
 800040c:	0249      	lsleq	r1, r1, #9
 800040e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000412:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000416:	3a7f      	subs	r2, #127	; 0x7f
 8000418:	bfc2      	ittt	gt
 800041a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800041e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000422:	4770      	bxgt	lr
 8000424:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000428:	f04f 0300 	mov.w	r3, #0
 800042c:	3a01      	subs	r2, #1
 800042e:	dc5d      	bgt.n	80004ec <__aeabi_fmul+0x150>
 8000430:	f112 0f19 	cmn.w	r2, #25
 8000434:	bfdc      	itt	le
 8000436:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800043a:	4770      	bxle	lr
 800043c:	f1c2 0200 	rsb	r2, r2, #0
 8000440:	0041      	lsls	r1, r0, #1
 8000442:	fa21 f102 	lsr.w	r1, r1, r2
 8000446:	f1c2 0220 	rsb	r2, r2, #32
 800044a:	fa00 fc02 	lsl.w	ip, r0, r2
 800044e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000452:	f140 0000 	adc.w	r0, r0, #0
 8000456:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800045a:	bf08      	it	eq
 800045c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000460:	4770      	bx	lr
 8000462:	f092 0f00 	teq	r2, #0
 8000466:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800046a:	bf02      	ittt	eq
 800046c:	0040      	lsleq	r0, r0, #1
 800046e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000472:	3a01      	subeq	r2, #1
 8000474:	d0f9      	beq.n	800046a <__aeabi_fmul+0xce>
 8000476:	ea40 000c 	orr.w	r0, r0, ip
 800047a:	f093 0f00 	teq	r3, #0
 800047e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000482:	bf02      	ittt	eq
 8000484:	0049      	lsleq	r1, r1, #1
 8000486:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800048a:	3b01      	subeq	r3, #1
 800048c:	d0f9      	beq.n	8000482 <__aeabi_fmul+0xe6>
 800048e:	ea41 010c 	orr.w	r1, r1, ip
 8000492:	e78f      	b.n	80003b4 <__aeabi_fmul+0x18>
 8000494:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000498:	ea92 0f0c 	teq	r2, ip
 800049c:	bf18      	it	ne
 800049e:	ea93 0f0c 	teqne	r3, ip
 80004a2:	d00a      	beq.n	80004ba <__aeabi_fmul+0x11e>
 80004a4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004a8:	bf18      	it	ne
 80004aa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004ae:	d1d8      	bne.n	8000462 <__aeabi_fmul+0xc6>
 80004b0:	ea80 0001 	eor.w	r0, r0, r1
 80004b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004b8:	4770      	bx	lr
 80004ba:	f090 0f00 	teq	r0, #0
 80004be:	bf17      	itett	ne
 80004c0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004c4:	4608      	moveq	r0, r1
 80004c6:	f091 0f00 	teqne	r1, #0
 80004ca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ce:	d014      	beq.n	80004fa <__aeabi_fmul+0x15e>
 80004d0:	ea92 0f0c 	teq	r2, ip
 80004d4:	d101      	bne.n	80004da <__aeabi_fmul+0x13e>
 80004d6:	0242      	lsls	r2, r0, #9
 80004d8:	d10f      	bne.n	80004fa <__aeabi_fmul+0x15e>
 80004da:	ea93 0f0c 	teq	r3, ip
 80004de:	d103      	bne.n	80004e8 <__aeabi_fmul+0x14c>
 80004e0:	024b      	lsls	r3, r1, #9
 80004e2:	bf18      	it	ne
 80004e4:	4608      	movne	r0, r1
 80004e6:	d108      	bne.n	80004fa <__aeabi_fmul+0x15e>
 80004e8:	ea80 0001 	eor.w	r0, r0, r1
 80004ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004f8:	4770      	bx	lr
 80004fa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000502:	4770      	bx	lr

08000504 <__aeabi_fdiv>:
 8000504:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000508:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800050c:	bf1e      	ittt	ne
 800050e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000512:	ea92 0f0c 	teqne	r2, ip
 8000516:	ea93 0f0c 	teqne	r3, ip
 800051a:	d069      	beq.n	80005f0 <__aeabi_fdiv+0xec>
 800051c:	eba2 0203 	sub.w	r2, r2, r3
 8000520:	ea80 0c01 	eor.w	ip, r0, r1
 8000524:	0249      	lsls	r1, r1, #9
 8000526:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800052a:	d037      	beq.n	800059c <__aeabi_fdiv+0x98>
 800052c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000530:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000534:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000538:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800053c:	428b      	cmp	r3, r1
 800053e:	bf38      	it	cc
 8000540:	005b      	lslcc	r3, r3, #1
 8000542:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000546:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800054a:	428b      	cmp	r3, r1
 800054c:	bf24      	itt	cs
 800054e:	1a5b      	subcs	r3, r3, r1
 8000550:	ea40 000c 	orrcs.w	r0, r0, ip
 8000554:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000558:	bf24      	itt	cs
 800055a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800055e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000562:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000566:	bf24      	itt	cs
 8000568:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800056c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000570:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000574:	bf24      	itt	cs
 8000576:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800057a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800057e:	011b      	lsls	r3, r3, #4
 8000580:	bf18      	it	ne
 8000582:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000586:	d1e0      	bne.n	800054a <__aeabi_fdiv+0x46>
 8000588:	2afd      	cmp	r2, #253	; 0xfd
 800058a:	f63f af50 	bhi.w	800042e <__aeabi_fmul+0x92>
 800058e:	428b      	cmp	r3, r1
 8000590:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000594:	bf08      	it	eq
 8000596:	f020 0001 	biceq.w	r0, r0, #1
 800059a:	4770      	bx	lr
 800059c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80005a0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005a4:	327f      	adds	r2, #127	; 0x7f
 80005a6:	bfc2      	ittt	gt
 80005a8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005ac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005b0:	4770      	bxgt	lr
 80005b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b6:	f04f 0300 	mov.w	r3, #0
 80005ba:	3a01      	subs	r2, #1
 80005bc:	e737      	b.n	800042e <__aeabi_fmul+0x92>
 80005be:	f092 0f00 	teq	r2, #0
 80005c2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005c6:	bf02      	ittt	eq
 80005c8:	0040      	lsleq	r0, r0, #1
 80005ca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ce:	3a01      	subeq	r2, #1
 80005d0:	d0f9      	beq.n	80005c6 <__aeabi_fdiv+0xc2>
 80005d2:	ea40 000c 	orr.w	r0, r0, ip
 80005d6:	f093 0f00 	teq	r3, #0
 80005da:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005de:	bf02      	ittt	eq
 80005e0:	0049      	lsleq	r1, r1, #1
 80005e2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005e6:	3b01      	subeq	r3, #1
 80005e8:	d0f9      	beq.n	80005de <__aeabi_fdiv+0xda>
 80005ea:	ea41 010c 	orr.w	r1, r1, ip
 80005ee:	e795      	b.n	800051c <__aeabi_fdiv+0x18>
 80005f0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005f4:	ea92 0f0c 	teq	r2, ip
 80005f8:	d108      	bne.n	800060c <__aeabi_fdiv+0x108>
 80005fa:	0242      	lsls	r2, r0, #9
 80005fc:	f47f af7d 	bne.w	80004fa <__aeabi_fmul+0x15e>
 8000600:	ea93 0f0c 	teq	r3, ip
 8000604:	f47f af70 	bne.w	80004e8 <__aeabi_fmul+0x14c>
 8000608:	4608      	mov	r0, r1
 800060a:	e776      	b.n	80004fa <__aeabi_fmul+0x15e>
 800060c:	ea93 0f0c 	teq	r3, ip
 8000610:	d104      	bne.n	800061c <__aeabi_fdiv+0x118>
 8000612:	024b      	lsls	r3, r1, #9
 8000614:	f43f af4c 	beq.w	80004b0 <__aeabi_fmul+0x114>
 8000618:	4608      	mov	r0, r1
 800061a:	e76e      	b.n	80004fa <__aeabi_fmul+0x15e>
 800061c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000620:	bf18      	it	ne
 8000622:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000626:	d1ca      	bne.n	80005be <__aeabi_fdiv+0xba>
 8000628:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800062c:	f47f af5c 	bne.w	80004e8 <__aeabi_fmul+0x14c>
 8000630:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000634:	f47f af3c 	bne.w	80004b0 <__aeabi_fmul+0x114>
 8000638:	e75f      	b.n	80004fa <__aeabi_fmul+0x15e>
 800063a:	bf00      	nop

0800063c <__aeabi_f2iz>:
 800063c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000640:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000644:	d30f      	bcc.n	8000666 <__aeabi_f2iz+0x2a>
 8000646:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800064a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800064e:	d90d      	bls.n	800066c <__aeabi_f2iz+0x30>
 8000650:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000654:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000658:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800065c:	fa23 f002 	lsr.w	r0, r3, r2
 8000660:	bf18      	it	ne
 8000662:	4240      	negne	r0, r0
 8000664:	4770      	bx	lr
 8000666:	f04f 0000 	mov.w	r0, #0
 800066a:	4770      	bx	lr
 800066c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000670:	d101      	bne.n	8000676 <__aeabi_f2iz+0x3a>
 8000672:	0242      	lsls	r2, r0, #9
 8000674:	d105      	bne.n	8000682 <__aeabi_f2iz+0x46>
 8000676:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800067a:	bf08      	it	eq
 800067c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000680:	4770      	bx	lr
 8000682:	f04f 0000 	mov.w	r0, #0
 8000686:	4770      	bx	lr

08000688 <h_bridge_init>:
	evgroup_drive_evbit_permitted,
	evgroup_drive_evbit_N,

} drive_evgroup_bits_t;

bool h_bridge_init(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800068c:	2108      	movs	r1, #8
 800068e:	4808      	ldr	r0, [pc, #32]	; (80006b0 <h_bridge_init+0x28>)
 8000690:	f005 fdfa 	bl	8006288 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000694:	2100      	movs	r1, #0
 8000696:	4807      	ldr	r0, [pc, #28]	; (80006b4 <h_bridge_init+0x2c>)
 8000698:	f005 fdf6 	bl	8006288 <HAL_TIM_PWM_Start>

	h_bridge_set_left_duty(0);
 800069c:	2000      	movs	r0, #0
 800069e:	f000 f80b 	bl	80006b8 <h_bridge_set_left_duty>
	h_bridge_set_right_duty(0);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f000 f82e 	bl	8000704 <h_bridge_set_right_duty>

	return true;
 80006a8:	2301      	movs	r3, #1
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200036e4 	.word	0x200036e4
 80006b4:	2000375c 	.word	0x2000375c

080006b8 <h_bridge_set_left_duty>:

void h_bridge_set_left_duty(int percent) {
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	if (percent > 100)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b64      	cmp	r3, #100	; 0x64
 80006c4:	dd01      	ble.n	80006ca <h_bridge_set_left_duty+0x12>
		percent = 100;
 80006c6:	2364      	movs	r3, #100	; 0x64
 80006c8:	607b      	str	r3, [r7, #4]

	if (percent < 1)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	dc01      	bgt.n	80006d4 <h_bridge_set_left_duty+0x1c>
		percent = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]

	uint32_t value = percent * htim2.Init.Period / 100;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <h_bridge_set_left_duty+0x44>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	fb02 f303 	mul.w	r3, r2, r3
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <h_bridge_set_left_duty+0x48>)
 80006e0:	fba2 2303 	umull	r2, r3, r2, r3
 80006e4:	095b      	lsrs	r3, r3, #5
 80006e6:	60fb      	str	r3, [r7, #12]
//	htim2.Instance->CCR1 = value;
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, value);
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <h_bridge_set_left_duty+0x44>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	68fa      	ldr	r2, [r7, #12]
 80006ee:	635a      	str	r2, [r3, #52]	; 0x34
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	2000375c 	.word	0x2000375c
 8000700:	51eb851f 	.word	0x51eb851f

08000704 <h_bridge_set_right_duty>:

void h_bridge_set_right_duty(int percent) {
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	if (percent > 100)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b64      	cmp	r3, #100	; 0x64
 8000710:	dd01      	ble.n	8000716 <h_bridge_set_right_duty+0x12>
		percent = 100;
 8000712:	2364      	movs	r3, #100	; 0x64
 8000714:	607b      	str	r3, [r7, #4]

	if (percent < 1)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2b00      	cmp	r3, #0
 800071a:	dc01      	bgt.n	8000720 <h_bridge_set_right_duty+0x1c>
		percent = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]

	uint32_t value = percent * htim3.Init.Period / 100;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <h_bridge_set_right_duty+0x44>)
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	fb02 f303 	mul.w	r3, r2, r3
 800072a:	4a08      	ldr	r2, [pc, #32]	; (800074c <h_bridge_set_right_duty+0x48>)
 800072c:	fba2 2303 	umull	r2, r3, r2, r3
 8000730:	095b      	lsrs	r3, r3, #5
 8000732:	60fb      	str	r3, [r7, #12]
//	htim3.Instance->CCR3 = value;
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, value);
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <h_bridge_set_right_duty+0x44>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	68fa      	ldr	r2, [r7, #12]
 800073a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800073c:	bf00      	nop
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	200036e4 	.word	0x200036e4
 800074c:	51eb851f 	.word	0x51eb851f

08000750 <h_bridge_cw_left>:

void h_bridge_cw_left(void) {
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 8000754:	2201      	movs	r2, #1
 8000756:	2102      	movs	r1, #2
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <h_bridge_cw_left+0x1c>)
 800075a:	f003 fb5b 	bl	8003e14 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 800075e:	2200      	movs	r2, #0
 8000760:	2104      	movs	r1, #4
 8000762:	4802      	ldr	r0, [pc, #8]	; (800076c <h_bridge_cw_left+0x1c>)
 8000764:	f003 fb56 	bl	8003e14 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40020800 	.word	0x40020800

08000770 <h_bridge_cw_right>:

void h_bridge_cw_right(void) {
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 8000774:	2201      	movs	r2, #1
 8000776:	f44f 7180 	mov.w	r1, #256	; 0x100
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <h_bridge_cw_right+0x20>)
 800077c:	f003 fb4a 	bl	8003e14 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000786:	4803      	ldr	r0, [pc, #12]	; (8000794 <h_bridge_cw_right+0x24>)
 8000788:	f003 fb44 	bl	8003e14 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40020000 	.word	0x40020000
 8000794:	40020800 	.word	0x40020800

08000798 <h_bridge_ccw_left>:

void h_bridge_ccw_left(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 800079c:	2200      	movs	r2, #0
 800079e:	2102      	movs	r1, #2
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <h_bridge_ccw_left+0x1c>)
 80007a2:	f003 fb37 	bl	8003e14 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 80007a6:	2201      	movs	r2, #1
 80007a8:	2104      	movs	r1, #4
 80007aa:	4802      	ldr	r0, [pc, #8]	; (80007b4 <h_bridge_ccw_left+0x1c>)
 80007ac:	f003 fb32 	bl	8003e14 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40020800 	.word	0x40020800

080007b8 <h_bridge_ccw_right>:

void h_bridge_ccw_right(void) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <h_bridge_ccw_right+0x20>)
 80007c4:	f003 fb26 	bl	8003e14 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 80007c8:	2201      	movs	r2, #1
 80007ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ce:	4803      	ldr	r0, [pc, #12]	; (80007dc <h_bridge_ccw_right+0x24>)
 80007d0:	f003 fb20 	bl	8003e14 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40020000 	.word	0x40020000
 80007dc:	40020800 	.word	0x40020800

080007e0 <h_bridge_coast>:

/// Lets the motor coast
void h_bridge_coast(void) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ea:	480a      	ldr	r0, [pc, #40]	; (8000814 <h_bridge_coast+0x34>)
 80007ec:	f003 fb12 	bl	8003e14 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f6:	4808      	ldr	r0, [pc, #32]	; (8000818 <h_bridge_coast+0x38>)
 80007f8:	f003 fb0c 	bl	8003e14 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 80007fc:	2200      	movs	r2, #0
 80007fe:	2102      	movs	r1, #2
 8000800:	4805      	ldr	r0, [pc, #20]	; (8000818 <h_bridge_coast+0x38>)
 8000802:	f003 fb07 	bl	8003e14 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 8000806:	2200      	movs	r2, #0
 8000808:	2104      	movs	r1, #4
 800080a:	4803      	ldr	r0, [pc, #12]	; (8000818 <h_bridge_coast+0x38>)
 800080c:	f003 fb02 	bl	8003e14 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40020000 	.word	0x40020000
 8000818:	40020800 	.word	0x40020800

0800081c <h_bridge_stop>:

void h_bridge_stop(void) {
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 8000820:	2201      	movs	r2, #1
 8000822:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000826:	480a      	ldr	r0, [pc, #40]	; (8000850 <h_bridge_stop+0x34>)
 8000828:	f003 faf4 	bl	8003e14 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000832:	4808      	ldr	r0, [pc, #32]	; (8000854 <h_bridge_stop+0x38>)
 8000834:	f003 faee 	bl	8003e14 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 8000838:	2201      	movs	r2, #1
 800083a:	2102      	movs	r1, #2
 800083c:	4805      	ldr	r0, [pc, #20]	; (8000854 <h_bridge_stop+0x38>)
 800083e:	f003 fae9 	bl	8003e14 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 8000842:	2201      	movs	r2, #1
 8000844:	2104      	movs	r1, #4
 8000846:	4803      	ldr	r0, [pc, #12]	; (8000854 <h_bridge_stop+0x38>)
 8000848:	f003 fae4 	bl	8003e14 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40020000 	.word	0x40020000
 8000854:	40020800 	.word	0x40020800

08000858 <QMC5883L_Read_Reg>:
	uint16_t buf = ((buff[1] << 8) | buff[0]);	// U2
	buf = (~buf) + 1; // decimal
	return (int) buf / 100; // our value
}

uint8_t QMC5883L_Read_Reg(uint8_t reg) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af04      	add	r7, sp, #16
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[1];
	HAL_I2C_Mem_Read(QMC5883L_I2C_PORT, 0x3D/*QMC5883L_ADDRESS*/, reg, 1, Buffer, 1,
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	b29a      	uxth	r2, r3
 8000866:	230a      	movs	r3, #10
 8000868:	9302      	str	r3, [sp, #8]
 800086a:	2301      	movs	r3, #1
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	2301      	movs	r3, #1
 8000876:	213d      	movs	r1, #61	; 0x3d
 8000878:	4803      	ldr	r0, [pc, #12]	; (8000888 <QMC5883L_Read_Reg+0x30>)
 800087a:	f003 fdbd 	bl	80043f8 <HAL_I2C_Mem_Read>
			10);
	return Buffer[0];
 800087e:	7b3b      	ldrb	r3, [r7, #12]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200035dc 	.word	0x200035dc

0800088c <QMC5883L_Write_Reg>:

void QMC5883L_Write_Reg(uint8_t reg, uint8_t data) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af02      	add	r7, sp, #8
 8000892:	4603      	mov	r3, r0
 8000894:	460a      	mov	r2, r1
 8000896:	71fb      	strb	r3, [r7, #7]
 8000898:	4613      	mov	r3, r2
 800089a:	71bb      	strb	r3, [r7, #6]
	uint8_t Buffer[2] = { reg, data };
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	733b      	strb	r3, [r7, #12]
 80008a0:	79bb      	ldrb	r3, [r7, #6]
 80008a2:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(QMC5883L_I2C_PORT, 0x3C/*QMC5883L_ADDRESS*/, Buffer, 2, 10);
 80008a4:	f107 020c 	add.w	r2, r7, #12
 80008a8:	230a      	movs	r3, #10
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2302      	movs	r3, #2
 80008ae:	213c      	movs	r1, #60	; 0x3c
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <QMC5883L_Write_Reg+0x34>)
 80008b2:	f003 fca3 	bl	80041fc <HAL_I2C_Master_Transmit>
}
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200035dc 	.word	0x200035dc

080008c4 <QMC5883L_Read_Data>:

void QMC5883L_Read_Data(int16_t *MagX, int16_t *MagY, int16_t *MagZ) // (-32768 / +32768)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
	*MagX = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_X_LSB)
 80008d0:	2004      	movs	r0, #4
 80008d2:	f7ff ffc1 	bl	8000858 <QMC5883L_Read_Reg>
 80008d6:	4603      	mov	r3, r0
 80008d8:	b21c      	sxth	r4, r3
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_X_MSB)) << 8));
 80008da:	2003      	movs	r0, #3
 80008dc:	f7ff ffbc 	bl	8000858 <QMC5883L_Read_Reg>
 80008e0:	4603      	mov	r3, r0
 80008e2:	021b      	lsls	r3, r3, #8
 80008e4:	b21b      	sxth	r3, r3
 80008e6:	4323      	orrs	r3, r4
 80008e8:	b21a      	sxth	r2, r3
	*MagX = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_X_LSB)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	801a      	strh	r2, [r3, #0]
	*MagY = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Y_LSB)
 80008ee:	2008      	movs	r0, #8
 80008f0:	f7ff ffb2 	bl	8000858 <QMC5883L_Read_Reg>
 80008f4:	4603      	mov	r3, r0
 80008f6:	b21c      	sxth	r4, r3
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Y_MSB)) << 8));
 80008f8:	2007      	movs	r0, #7
 80008fa:	f7ff ffad 	bl	8000858 <QMC5883L_Read_Reg>
 80008fe:	4603      	mov	r3, r0
 8000900:	021b      	lsls	r3, r3, #8
 8000902:	b21b      	sxth	r3, r3
 8000904:	4323      	orrs	r3, r4
 8000906:	b21a      	sxth	r2, r3
	*MagY = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Y_LSB)
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	801a      	strh	r2, [r3, #0]
	*MagZ = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Z_LSB)
 800090c:	2006      	movs	r0, #6
 800090e:	f7ff ffa3 	bl	8000858 <QMC5883L_Read_Reg>
 8000912:	4603      	mov	r3, r0
 8000914:	b21c      	sxth	r4, r3
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Z_MSB)) << 8));
 8000916:	2005      	movs	r0, #5
 8000918:	f7ff ff9e 	bl	8000858 <QMC5883L_Read_Reg>
 800091c:	4603      	mov	r3, r0
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b21b      	sxth	r3, r3
 8000922:	4323      	orrs	r3, r4
 8000924:	b21a      	sxth	r2, r3
	*MagZ = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Z_LSB)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	801a      	strh	r2, [r3, #0]
}
 800092a:	bf00      	nop
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	bd90      	pop	{r4, r7, pc}

08000932 <QMC5883L_Initialize>:
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_TEMP_READ_MSB)) << 8))
			/ 100;
}

void QMC5883L_Initialize(_qmc5883l_MODE MODE, _qmc5883l_ODR ODR,
		_qmc5883l_RNG RNG, _qmc5883l_OSR OSR) {
 8000932:	b590      	push	{r4, r7, lr}
 8000934:	b083      	sub	sp, #12
 8000936:	af00      	add	r7, sp, #0
 8000938:	4604      	mov	r4, r0
 800093a:	4608      	mov	r0, r1
 800093c:	4611      	mov	r1, r2
 800093e:	461a      	mov	r2, r3
 8000940:	4623      	mov	r3, r4
 8000942:	71fb      	strb	r3, [r7, #7]
 8000944:	4603      	mov	r3, r0
 8000946:	71bb      	strb	r3, [r7, #6]
 8000948:	460b      	mov	r3, r1
 800094a:	717b      	strb	r3, [r7, #5]
 800094c:	4613      	mov	r3, r2
 800094e:	713b      	strb	r3, [r7, #4]
	QMC5883L_Write_Reg(QMC5883L_CONFIG_3, 0x01);
 8000950:	2101      	movs	r1, #1
 8000952:	200b      	movs	r0, #11
 8000954:	f7ff ff9a 	bl	800088c <QMC5883L_Write_Reg>
	QMC5883L_Write_Reg(QMC5883L_CONFIG_1, MODE | ODR | RNG | OSR);
 8000958:	79fa      	ldrb	r2, [r7, #7]
 800095a:	79bb      	ldrb	r3, [r7, #6]
 800095c:	4313      	orrs	r3, r2
 800095e:	b2da      	uxtb	r2, r3
 8000960:	797b      	ldrb	r3, [r7, #5]
 8000962:	4313      	orrs	r3, r2
 8000964:	b2da      	uxtb	r2, r3
 8000966:	793b      	ldrb	r3, [r7, #4]
 8000968:	4313      	orrs	r3, r2
 800096a:	b2db      	uxtb	r3, r3
 800096c:	4619      	mov	r1, r3
 800096e:	2009      	movs	r0, #9
 8000970:	f7ff ff8c 	bl	800088c <QMC5883L_Write_Reg>
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bd90      	pop	{r4, r7, pc}

0800097c <QMC5883L_InterruptConfig>:

void QMC5883L_Reset() {
	QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x81);
}

void QMC5883L_InterruptConfig(_qmc5883l_INT INT) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
	if (INT == INTERRUPT_ENABLE) {
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d104      	bne.n	8000996 <QMC5883L_InterruptConfig+0x1a>
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x00);
 800098c:	2100      	movs	r1, #0
 800098e:	200a      	movs	r0, #10
 8000990:	f7ff ff7c 	bl	800088c <QMC5883L_Write_Reg>
	} else {
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x01);
	}
}
 8000994:	e003      	b.n	800099e <QMC5883L_InterruptConfig+0x22>
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x01);
 8000996:	2101      	movs	r1, #1
 8000998:	200a      	movs	r0, #10
 800099a:	f7ff ff77 	bl	800088c <QMC5883L_Write_Reg>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <QMC5883L_Scale>:
	}

	return Heading;
}

void QMC5883L_Scale(int16_t *X, int16_t *Y, int16_t *Z) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
	*X *= QMC5883L_SCALE_FACTOR;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fc9a 	bl	80002f4 <__aeabi_i2f>
 80009c0:	4603      	mov	r3, r0
 80009c2:	491b      	ldr	r1, [pc, #108]	; (8000a30 <QMC5883L_Scale+0x88>)
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fce9 	bl	800039c <__aeabi_fmul>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fe35 	bl	800063c <__aeabi_f2iz>
 80009d2:	4603      	mov	r3, r0
 80009d4:	b21a      	sxth	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	801a      	strh	r2, [r3, #0]
	*Y *= QMC5883L_SCALE_FACTOR;
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fc87 	bl	80002f4 <__aeabi_i2f>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4911      	ldr	r1, [pc, #68]	; (8000a30 <QMC5883L_Scale+0x88>)
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fcd6 	bl	800039c <__aeabi_fmul>
 80009f0:	4603      	mov	r3, r0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fe22 	bl	800063c <__aeabi_f2iz>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b21a      	sxth	r2, r3
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	801a      	strh	r2, [r3, #0]
	*Z *= QMC5883L_SCALE_FACTOR;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fc74 	bl	80002f4 <__aeabi_i2f>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4908      	ldr	r1, [pc, #32]	; (8000a30 <QMC5883L_Scale+0x88>)
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fcc3 	bl	800039c <__aeabi_fmul>
 8000a16:	4603      	mov	r3, r0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fe0f 	bl	800063c <__aeabi_f2iz>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b21a      	sxth	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	801a      	strh	r2, [r3, #0]
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	3f3b8000 	.word	0x3f3b8000

08000a34 <ultrasound_select_proper_distance>:
//	HAL_Delay(0.01);
	HAL_GPIO_WritePin(OUT_ULTRASOUND_TRIG_GPIO_Port, OUT_ULTRASOUND_TRIG_Pin,
			GPIO_PIN_RESET);
}

uint16_t ultrasound_select_proper_distance(uint8_t code) {
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	if (code == dist5) {
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d102      	bne.n	8000a4a <ultrasound_select_proper_distance+0x16>
		return (uint16_t) ULTRASOUND_DIST_5CM_BITS;
 8000a44:	f240 438a 	movw	r3, #1162	; 0x48a
 8000a48:	e043      	b.n	8000ad2 <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist10) {
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d102      	bne.n	8000a56 <ultrasound_select_proper_distance+0x22>
		return (uint16_t) ULTRASOUND_DIST_10CM_BITS;
 8000a50:	f241 232b 	movw	r3, #4651	; 0x122b
 8000a54:	e03d      	b.n	8000ad2 <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist15) {
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d102      	bne.n	8000a62 <ultrasound_select_proper_distance+0x2e>
		return (uint16_t) ULTRASOUND_DIST_15CM_BITS;
 8000a5c:	f44f 53da 	mov.w	r3, #6976	; 0x1b40
 8000a60:	e037      	b.n	8000ad2 <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist20) {
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	2b03      	cmp	r3, #3
 8000a66:	d102      	bne.n	8000a6e <ultrasound_select_proper_distance+0x3a>
		return (uint16_t) ULTRASOUND_DIST_20CM_BITS;
 8000a68:	f242 4356 	movw	r3, #9302	; 0x2456
 8000a6c:	e031      	b.n	8000ad2 <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist25) {
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b04      	cmp	r3, #4
 8000a72:	d102      	bne.n	8000a7a <ultrasound_select_proper_distance+0x46>
		return (uint16_t) ULTRASOUND_DIST_25CM_BITS;
 8000a74:	f642 536b 	movw	r3, #11627	; 0x2d6b
 8000a78:	e02b      	b.n	8000ad2 <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist30) {
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	2b05      	cmp	r3, #5
 8000a7e:	d102      	bne.n	8000a86 <ultrasound_select_proper_distance+0x52>
		return (uint16_t) ULTRASOUND_DIST_30CM_BITS;
 8000a80:	f243 6381 	movw	r3, #13953	; 0x3681
 8000a84:	e025      	b.n	8000ad2 <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist35) {
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b06      	cmp	r3, #6
 8000a8a:	d102      	bne.n	8000a92 <ultrasound_select_proper_distance+0x5e>
		return (uint16_t) ULTRASOUND_DIST_35CM_BITS;
 8000a8c:	f643 7397 	movw	r3, #16279	; 0x3f97
 8000a90:	e01f      	b.n	8000ad2 <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist40) {
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	2b07      	cmp	r3, #7
 8000a96:	d102      	bne.n	8000a9e <ultrasound_select_proper_distance+0x6a>
		return (uint16_t) ULTRASOUND_DIST_40CM_BITS;
 8000a98:	f644 03ac 	movw	r3, #18604	; 0x48ac
 8000a9c:	e019      	b.n	8000ad2 <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist50) {
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	2b08      	cmp	r3, #8
 8000aa2:	d102      	bne.n	8000aaa <ultrasound_select_proper_distance+0x76>
		return (uint16_t) ULTRASOUND_DIST_50CM_BITS;
 8000aa4:	f645 23d7 	movw	r3, #23255	; 0x5ad7
 8000aa8:	e013      	b.n	8000ad2 <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist60) {
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	2b09      	cmp	r3, #9
 8000aae:	d102      	bne.n	8000ab6 <ultrasound_select_proper_distance+0x82>
		return (uint16_t) ULTRASOUND_DIST_60CM_BITS;
 8000ab0:	f646 5302 	movw	r3, #27906	; 0x6d02
 8000ab4:	e00d      	b.n	8000ad2 <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist70) {
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b0a      	cmp	r3, #10
 8000aba:	d102      	bne.n	8000ac2 <ultrasound_select_proper_distance+0x8e>
		return (uint16_t) ULTRASOUND_DIST_70CM_BITS;
 8000abc:	f647 732e 	movw	r3, #32558	; 0x7f2e
 8000ac0:	e007      	b.n	8000ad2 <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist80) {
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	2b0b      	cmp	r3, #11
 8000ac6:	d102      	bne.n	8000ace <ultrasound_select_proper_distance+0x9a>
		return (uint16_t) ULTRASOUND_DIST_80CM_BITS;
 8000ac8:	f249 1359 	movw	r3, #37209	; 0x9159
 8000acc:	e001      	b.n	8000ad2 <ultrasound_select_proper_distance+0x9e>
	} else {
		return (uint16_t) ULTRASOUND_DIST_80CM_BITS;
 8000ace:	f249 1359 	movw	r3, #37209	; 0x9159
	}
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <device_init>:

#include "device_init.h"
#include "stdint.h"


void device_init(void) {
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0

	uint16_t successCnt = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	80fb      	strh	r3, [r7, #6]
	uint16_t modsToInit = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < /*mod_N*/mod_0; i++) {
 8000aea:	2300      	movs	r3, #0
 8000aec:	807b      	strh	r3, [r7, #2]
 8000aee:	bf00      	nop
		}

		modsToInit++;
	}

	if (modsToInit != successCnt) {
 8000af0:	88ba      	ldrh	r2, [r7, #4]
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d000      	beq.n	8000afa <device_init+0x1e>
		// some kind of error
		while (1)
 8000af8:	e7fe      	b.n	8000af8 <device_init+0x1c>
			; //TODO: call some error handler
	}

}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <rt_init>:
TaskHandle_t rt_tasks[rt_task_N];
QueueHandle_t rt_queues[rt_queue_N];
EventGroupHandle_t rt_evgroups[rt_evgroup_N];
TimerHandle_t rt_timers[rt_timer_N];

void rt_init(void) {
 8000b04:	b5b0      	push	{r4, r5, r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af02      	add	r7, sp, #8

	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	77fb      	strb	r3, [r7, #31]
 8000b0e:	e02c      	b.n	8000b6a <rt_init+0x66>
		rt_task_def_t const *def = rt_task_def + task;
 8000b10:	7ffa      	ldrb	r2, [r7, #31]
 8000b12:	4613      	mov	r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	4413      	add	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	4b47      	ldr	r3, [pc, #284]	; (8000c3c <rt_init+0x138>)
 8000b1e:	4413      	add	r3, r2
 8000b20:	607b      	str	r3, [r7, #4]
		TaskHandle_t *handle = rt_tasks + task;
 8000b22:	7ffb      	ldrb	r3, [r7, #31]
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	4a46      	ldr	r2, [pc, #280]	; (8000c40 <rt_init+0x13c>)
 8000b28:	4413      	add	r3, r2
 8000b2a:	603b      	str	r3, [r7, #0]
		if (def->active) {
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	7c9b      	ldrb	r3, [r3, #18]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d014      	beq.n	8000b5e <rt_init+0x5a>
			if (xTaskCreate(def->pvTaskCode, def->pcName, def->usStackDepth,
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6818      	ldr	r0, [r3, #0]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6859      	ldr	r1, [r3, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	8a1c      	ldrh	r4, [r3, #16]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689d      	ldr	r5, [r3, #8]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	683a      	ldr	r2, [r7, #0]
 8000b4a:	9201      	str	r2, [sp, #4]
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	462b      	mov	r3, r5
 8000b50:	4622      	mov	r2, r4
 8000b52:	f008 faf2 	bl	800913a <xTaskCreate>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d003      	beq.n	8000b64 <rt_init+0x60>
					def->pvParameters, def->uxPriority, handle) != pdPASS) {
//				error :-(
				while (1)
 8000b5c:	e7fe      	b.n	8000b5c <rt_init+0x58>
					;
			}
		} else {
			*handle = 0;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 8000b64:	7ffb      	ldrb	r3, [r7, #31]
 8000b66:	3301      	adds	r3, #1
 8000b68:	77fb      	strb	r3, [r7, #31]
 8000b6a:	7ffb      	ldrb	r3, [r7, #31]
 8000b6c:	2b04      	cmp	r3, #4
 8000b6e:	d9cf      	bls.n	8000b10 <rt_init+0xc>
		}
	}

	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 8000b70:	2300      	movs	r3, #0
 8000b72:	77bb      	strb	r3, [r7, #30]
 8000b74:	e01c      	b.n	8000bb0 <rt_init+0xac>
		rt_queue_def_t const *def = rt_queue_def + queue;
 8000b76:	7fbb      	ldrb	r3, [r7, #30]
 8000b78:	011b      	lsls	r3, r3, #4
 8000b7a:	4a32      	ldr	r2, [pc, #200]	; (8000c44 <rt_init+0x140>)
 8000b7c:	4413      	add	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]
		QueueHandle_t *handle = rt_queues + queue;
 8000b80:	7fbb      	ldrb	r3, [r7, #30]
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	4a30      	ldr	r2, [pc, #192]	; (8000c48 <rt_init+0x144>)
 8000b86:	4413      	add	r3, r2
 8000b88:	60bb      	str	r3, [r7, #8]

		if ((*handle = xQueueCreate(def->uxQueueLength, def->uxItemSize))
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	6818      	ldr	r0, [r3, #0]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	4619      	mov	r1, r3
 8000b96:	f007 fe41 	bl	800881c <xQueueGenericCreate>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d100      	bne.n	8000baa <rt_init+0xa6>
				== 0) {
			while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <rt_init+0xa4>
	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 8000baa:	7fbb      	ldrb	r3, [r7, #30]
 8000bac:	3301      	adds	r3, #1
 8000bae:	77bb      	strb	r3, [r7, #30]
 8000bb0:	7fbb      	ldrb	r3, [r7, #30]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d9df      	bls.n	8000b76 <rt_init+0x72>
				;
		}
	}

	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	777b      	strb	r3, [r7, #29]
 8000bba:	e020      	b.n	8000bfe <rt_init+0xfa>
		rt_timer_def_t const *def = rt_timer_def + timer;
 8000bbc:	7f7b      	ldrb	r3, [r7, #29]
 8000bbe:	011b      	lsls	r3, r3, #4
 8000bc0:	4a22      	ldr	r2, [pc, #136]	; (8000c4c <rt_init+0x148>)
 8000bc2:	4413      	add	r3, r2
 8000bc4:	617b      	str	r3, [r7, #20]
		TimerHandle_t *handle = rt_timers + timer;
 8000bc6:	7f7b      	ldrb	r3, [r7, #29]
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	4a21      	ldr	r2, [pc, #132]	; (8000c50 <rt_init+0x14c>)
 8000bcc:	4413      	add	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]

		if ((*handle = xTimerCreate(def->pcTimerName, def->xTimerPeriodInTicks,
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	6818      	ldr	r0, [r3, #0]
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	6859      	ldr	r1, [r3, #4]
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	689a      	ldr	r2, [r3, #8]
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	2300      	movs	r3, #0
 8000be4:	f009 fb66 	bl	800a2b4 <xTimerCreate>
 8000be8:	4602      	mov	r2, r0
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d100      	bne.n	8000bf8 <rt_init+0xf4>
				def->uxAutoReload, NULL, def->pxCallbackFunction)) == 0)
			while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <rt_init+0xf2>
	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 8000bf8:	7f7b      	ldrb	r3, [r7, #29]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	777b      	strb	r3, [r7, #29]
 8000bfe:	7f7b      	ldrb	r3, [r7, #29]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d9db      	bls.n	8000bbc <rt_init+0xb8>
				;
	}

	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 8000c04:	2300      	movs	r3, #0
 8000c06:	773b      	strb	r3, [r7, #28]
 8000c08:	e011      	b.n	8000c2e <rt_init+0x12a>
			evgroup++) {
		EventGroupHandle_t *handle = rt_evgroups + evgroup;
 8000c0a:	7f3b      	ldrb	r3, [r7, #28]
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4a11      	ldr	r2, [pc, #68]	; (8000c54 <rt_init+0x150>)
 8000c10:	4413      	add	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]

		if ((*handle = xEventGroupCreate()) == 0) {
 8000c14:	f007 fa72 	bl	80080fc <xEventGroupCreate>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d100      	bne.n	8000c28 <rt_init+0x124>
			while (1)
 8000c26:	e7fe      	b.n	8000c26 <rt_init+0x122>
			evgroup++) {
 8000c28:	7f3b      	ldrb	r3, [r7, #28]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	773b      	strb	r3, [r7, #28]
	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 8000c2e:	7f3b      	ldrb	r3, [r7, #28]
 8000c30:	2b03      	cmp	r3, #3
 8000c32:	d9ea      	bls.n	8000c0a <rt_init+0x106>
				;
		}
	}

}
 8000c34:	bf00      	nop
 8000c36:	3720      	adds	r7, #32
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c3c:	0800b3c8 	.word	0x0800b3c8
 8000c40:	20003540 	.word	0x20003540
 8000c44:	0800b42c 	.word	0x0800b42c
 8000c48:	2000356c 	.word	0x2000356c
 8000c4c:	0800b44c 	.word	0x0800b44c
 8000c50:	20003554 	.word	0x20003554
 8000c54:	2000355c 	.word	0x2000355c

08000c58 <rt_evbitwait_any>:

uint32_t rt_evbitwait_any(rt_evgroup_t Ev) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af02      	add	r7, sp, #8
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	4a09      	ldr	r2, [pc, #36]	; (8000c8c <rt_evbitwait_any+0x34>)
 8000c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6a:	60fb      	str	r3, [r7, #12]

	return xEventGroupWaitBits(Evh, 0x00FFFFFFu, pdTRUE, pdFALSE, portMAX_DELAY);
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	2300      	movs	r3, #0
 8000c74:	2201      	movs	r2, #1
 8000c76:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000c7a:	68f8      	ldr	r0, [r7, #12]
 8000c7c:	f007 fa58 	bl	8008130 <xEventGroupWaitBits>
 8000c80:	4603      	mov	r3, r0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000355c 	.word	0x2000355c

08000c90 <rt_evbit_check_any>:

uint32_t rt_evbit_check_any(rt_evgroup_t Ev) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af02      	add	r7, sp, #8
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <rt_evbit_check_any+0x30>)
 8000c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca2:	60fb      	str	r3, [r7, #12]

	return xEventGroupWaitBits(Evh, 0x00FFFFFFu, pdFALSE, pdFALSE, 0);
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2300      	movs	r3, #0
 8000caa:	2200      	movs	r2, #0
 8000cac:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000cb0:	68f8      	ldr	r0, [r7, #12]
 8000cb2:	f007 fa3d 	bl	8008130 <xEventGroupWaitBits>
 8000cb6:	4603      	mov	r3, r0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2000355c 	.word	0x2000355c

08000cc4 <rt_evbit_clear_ISR>:

	return xEventGroupClearBits(Evh, // The event group being updated.
			msk);	// The bits being cleared.
}

BaseType_t rt_evbit_clear_ISR( rt_evgroup_t Ev, uint32_t bit) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	4a09      	ldr	r2, [pc, #36]	; (8000cf8 <rt_evbit_clear_ISR+0x34>)
 8000cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd8:	60fb      	str	r3, [r7, #12]
	EventBits_t msk = (1u << bit);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	60bb      	str	r3, [r7, #8]

	return xEventGroupClearBitsFromISR(Evh, // The event group being updated.
 8000ce4:	68b9      	ldr	r1, [r7, #8]
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	f007 fb22 	bl	8008330 <xEventGroupClearBitsFromISR>
 8000cec:	4603      	mov	r3, r0
			msk);	// The bits being cleared.
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	2000355c 	.word	0x2000355c

08000cfc <rt_evbit_set>:

void rt_evbit_set(rt_evgroup_t Ev, uint32_t bit) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <rt_evbit_set+0x30>)
 8000d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1a:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBits(Evh, msk);
 8000d1c:	68f9      	ldr	r1, [r7, #12]
 8000d1e:	68b8      	ldr	r0, [r7, #8]
 8000d20:	f007 fb1a 	bl	8008358 <xEventGroupSetBits>
}
 8000d24:	bf00      	nop
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	2000355c 	.word	0x2000355c

08000d30 <rt_evbit_set_ISR>:

void rt_evbit_set_ISR(rt_evgroup_t Ev, uint32_t bit) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	4a06      	ldr	r2, [pc, #24]	; (8000d64 <rt_evbit_set_ISR+0x34>)
 8000d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4e:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBitsFromISR(Evh, msk, pdFALSE);
 8000d50:	2200      	movs	r2, #0
 8000d52:	68f9      	ldr	r1, [r7, #12]
 8000d54:	68b8      	ldr	r0, [r7, #8]
 8000d56:	f007 fbc3 	bl	80084e0 <xEventGroupSetBitsFromISR>
//	portYIELD_FROM_ISR(pdFALSE);
}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2000355c 	.word	0x2000355c

08000d68 <rt_enqueue>:

bool rt_enqueue(rt_queue_t Q, void const *bf) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
//  assert(Q < rt_queue_N);

	QueueHandle_t Qh = rt_queues[Q];
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	4a0d      	ldr	r2, [pc, #52]	; (8000dac <rt_enqueue+0x44>)
 8000d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7c:	60fb      	str	r3, [r7, #12]
	TickType_t to = rt_queue_def[Q].timeout_enq;
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <rt_enqueue+0x48>)
 8000d82:	011b      	lsls	r3, r3, #4
 8000d84:	4413      	add	r3, r2
 8000d86:	3308      	adds	r3, #8
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	60bb      	str	r3, [r7, #8]

	if (xQueueSendToBack(Qh, bf, to) == pdPASS) {
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	6839      	ldr	r1, [r7, #0]
 8000d92:	68f8      	ldr	r0, [r7, #12]
 8000d94:	f007 fda2 	bl	80088dc <xQueueGenericSend>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d101      	bne.n	8000da2 <rt_enqueue+0x3a>
		return true;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <rt_enqueue+0x3c>
	}

	return false;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	2000356c 	.word	0x2000356c
 8000db0:	0800b42c 	.word	0x0800b42c

08000db4 <rt_enqueue_ISR>:

bool rt_enqueue_ISR(rt_queue_t Q, void const *bf) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
//  assert(Q < rt_queue_N);

	QueueHandle_t Qh = rt_queues[Q];
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <rt_enqueue_ISR+0x3c>)
 8000dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc8:	60fb      	str	r3, [r7, #12]
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60bb      	str	r3, [r7, #8]
	if (xQueueSendToBackFromISR(Qh, bf, &xHigherPriorityTaskWoken) == pdPASS) {
 8000dce:	f107 0208 	add.w	r2, r7, #8
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	6839      	ldr	r1, [r7, #0]
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	f007 fe7a 	bl	8008ad0 <xQueueGenericSendFromISR>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d101      	bne.n	8000de6 <rt_enqueue_ISR+0x32>
		return true;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e000      	b.n	8000de8 <rt_enqueue_ISR+0x34>
	}

	return false;
 8000de6:	2300      	movs	r3, #0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	2000356c 	.word	0x2000356c

08000df4 <rt_dequeue>:

bool rt_dequeue(rt_queue_t Q, void *bf) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
//  assert(Q < rt_queue_N);

	QueueHandle_t Qh = rt_queues[Q];
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <rt_dequeue+0x44>)
 8000e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e08:	60fb      	str	r3, [r7, #12]
	TickType_t to = rt_queue_def[Q].timeout_deq;
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <rt_dequeue+0x48>)
 8000e0e:	011b      	lsls	r3, r3, #4
 8000e10:	4413      	add	r3, r2
 8000e12:	330c      	adds	r3, #12
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	60bb      	str	r3, [r7, #8]

	if (xQueueReceive(Qh, bf, to) == pdPASS) {
 8000e18:	68ba      	ldr	r2, [r7, #8]
 8000e1a:	6839      	ldr	r1, [r7, #0]
 8000e1c:	68f8      	ldr	r0, [r7, #12]
 8000e1e:	f007 feeb 	bl	8008bf8 <xQueueReceive>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d101      	bne.n	8000e2c <rt_dequeue+0x38>
		return true;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e000      	b.n	8000e2e <rt_dequeue+0x3a>
	}

	return false;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	2000356c 	.word	0x2000356c
 8000e3c:	0800b42c 	.word	0x0800b42c

08000e40 <rt_timer_start>:
	}

	return false;
}

bool rt_timer_start(rt_timer_t t, uint32_t timeout) {
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af02      	add	r7, sp, #8
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
	return xTimerStart(rt_timers[t], timeout);
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <rt_timer_start+0x3c>)
 8000e50:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000e54:	f008 fcfa 	bl	800984c <xTaskGetTickCount>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	2300      	movs	r3, #0
 8000e60:	2101      	movs	r1, #1
 8000e62:	4620      	mov	r0, r4
 8000e64:	f009 fa78 	bl	800a358 <xTimerGenericCommand>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	bf14      	ite	ne
 8000e6e:	2301      	movne	r3, #1
 8000e70:	2300      	moveq	r3, #0
 8000e72:	b2db      	uxtb	r3, r3
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd90      	pop	{r4, r7, pc}
 8000e7c:	20003554 	.word	0x20003554

08000e80 <rt_timer_start_ISR>:

bool rt_timer_start_ISR(rt_timer_t t, BaseType_t *pxHigherPriorityTaskWoken) {
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af02      	add	r7, sp, #8
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	71fb      	strb	r3, [r7, #7]
	return xTimerStartFromISR(rt_timers[t], pxHigherPriorityTaskWoken);
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <rt_timer_start_ISR+0x3c>)
 8000e90:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000e94:	f008 fce8 	bl	8009868 <xTaskGetTickCountFromISR>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	2106      	movs	r1, #6
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	f009 fa58 	bl	800a358 <xTimerGenericCommand>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	bf14      	ite	ne
 8000eae:	2301      	movne	r3, #1
 8000eb0:	2300      	moveq	r3, #0
 8000eb2:	b2db      	uxtb	r3, r3
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd90      	pop	{r4, r7, pc}
 8000ebc:	20003554 	.word	0x20003554

08000ec0 <timer_BLE>:
// working all the time, checking if something is received or sending data to android device

/* ************************************************************************** */
// callback
/* ************************************************************************** */
void timer_BLE(TimerHandle_t xTimer) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, (uint8_t*) ble_pData, BLE_MAX_SIZE);
 8000ec8:	2203      	movs	r2, #3
 8000eca:	4904      	ldr	r1, [pc, #16]	; (8000edc <timer_BLE+0x1c>)
 8000ecc:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <timer_BLE+0x20>)
 8000ece:	f006 fc4b 	bl	8007768 <HAL_UART_Receive_DMA>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20003578 	.word	0x20003578
 8000ee0:	200037dc 	.word	0x200037dc

08000ee4 <HAL_UART_RxCpltCallback>:

void HAL_UART_TxHalfCallback(UART_HandleTypeDef *huart) {
	__NOP();
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
//	__NOP();
//	char ble_pData[BLE_MAX_SIZE];
//	memset(ble_pData, 1, BLE_MAX_SIZE);
//	ble_receive_data(ble_pData);
	xQueueBleData ble_queue = { 0 };
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]

	ble_queue.info = ble_received;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	733b      	strb	r3, [r7, #12]

	memcpy(&ble_queue.command, ble_pData, 1);
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_UART_RxCpltCallback+0x38>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	737b      	strb	r3, [r7, #13]
	memcpy(&ble_queue.valueReg1, ble_pData + 1, 1);
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <HAL_UART_RxCpltCallback+0x3c>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	73bb      	strb	r3, [r7, #14]
	memcpy(&ble_queue.valueReg2, ble_pData + 2, 1);
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <HAL_UART_RxCpltCallback+0x40>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	73fb      	strb	r3, [r7, #15]

	rt_enqueue_ISR(rt_queue_ble, &ble_queue);
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f7ff ff51 	bl	8000db4 <rt_enqueue_ISR>

}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20003578 	.word	0x20003578
 8000f20:	20003579 	.word	0x20003579
 8000f24:	2000357a 	.word	0x2000357a

08000f28 <HAL_UART_ErrorCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart);/* {
 __NOP();
 }*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	__NOP();
 8000f30:	bf00      	nop
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <task_ble>:

/* ************************************************************************** */
// task
/* ************************************************************************** */
void task_ble(void *pvParameters) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	(void*) pvParameters;

	bool status;
	xQueueBleData receivedBleData = { 0 };
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]

	for (;;) {

//		vTaskDelay(xDelay1000ms);

		status = rt_dequeue(rt_queue_ble, &receivedBleData);
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff ff50 	bl	8000df4 <rt_dequeue>
 8000f54:	4603      	mov	r3, r0
 8000f56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (status) {
 8000f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0f2      	beq.n	8000f48 <task_ble+0xc>
			if (receivedBleData.info == ble_received) {
 8000f62:	7b3b      	ldrb	r3, [r7, #12]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f040 8087 	bne.w	8001078 <task_ble+0x13c>
//				memcpy(ble_pData, receivedBleData.value, BLE_MAX_SIZE);

				switch (receivedBleData.command) {
 8000f6a:	7b7b      	ldrb	r3, [r7, #13]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	2b08      	cmp	r3, #8
 8000f70:	d87b      	bhi.n	800106a <task_ble+0x12e>
 8000f72:	a201      	add	r2, pc, #4	; (adr r2, 8000f78 <task_ble+0x3c>)
 8000f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f78:	08000f9d 	.word	0x08000f9d
 8000f7c:	08000fa7 	.word	0x08000fa7
 8000f80:	08000fb1 	.word	0x08000fb1
 8000f84:	0800106b 	.word	0x0800106b
 8000f88:	0800106b 	.word	0x0800106b
 8000f8c:	0800106b 	.word	0x0800106b
 8000f90:	0800106b 	.word	0x0800106b
 8000f94:	0800106b 	.word	0x0800106b
 8000f98:	08001053 	.word	0x08001053
				case BLE_RECEIVED_DO_NOTHING:
					rt_evbit_set(rt_evgroup_state_machine,
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f7ff feac 	bl	8000cfc <rt_evbit_set>
							evgroup_state_m_do_nothing);
					break;
 8000fa4:	e069      	b.n	800107a <task_ble+0x13e>
				case BLE_RECEIVED_AUTO_MANUAL:
					rt_evbit_set(rt_evgroup_state_machine,
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f7ff fea7 	bl	8000cfc <rt_evbit_set>
							evgroup_state_m_auto_manual);
					break;
 8000fae:	e064      	b.n	800107a <task_ble+0x13e>
				case BLE_RECEIVED_MOVEMENT:
//					rt_evbit_set(rt_evgroup_state_machine,
//							evgroup_state_m_movement);

					left_engine = receivedBleData.valueReg1;
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					right_engine = receivedBleData.valueReg2;
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					// 0	1	1	0	0	1	0	0
					// ^
					// ccw
					// --- |        PERCENTAGE       |

					int left = u2_to_decimal(left_engine);
 8000fbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 f9e9 	bl	8001398 <u2_to_decimal>
 8000fc6:	61f8      	str	r0, [r7, #28]
					int right = u2_to_decimal(right_engine);
 8000fc8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 f9e3 	bl	8001398 <u2_to_decimal>
 8000fd2:	61b8      	str	r0, [r7, #24]

					// left engine
					if (left < 0) {
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	da07      	bge.n	8000fea <task_ble+0xae>
						h_bridge_ccw_left();
 8000fda:	f7ff fbdd 	bl	8000798 <h_bridge_ccw_left>
						h_bridge_set_left_duty(-left);
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	425b      	negs	r3, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fb68 	bl	80006b8 <h_bridge_set_left_duty>
 8000fe8:	e013      	b.n	8001012 <task_ble+0xd6>
					} else {
						// allowed to drive forward?
						uint32_t evbits = rt_evbit_check_any(
 8000fea:	2003      	movs	r0, #3
 8000fec:	f7ff fe50 	bl	8000c90 <rt_evbit_check_any>
 8000ff0:	6178      	str	r0, [r7, #20]
								rt_evgroup_ultrasound);
						if (evbits & (1 << evgroup_ultrasound_evbit_move)) {
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d005      	beq.n	8001008 <task_ble+0xcc>
							// yes
							h_bridge_cw_left();
 8000ffc:	f7ff fba8 	bl	8000750 <h_bridge_cw_left>
							h_bridge_set_left_duty(left);
 8001000:	69f8      	ldr	r0, [r7, #28]
 8001002:	f7ff fb59 	bl	80006b8 <h_bridge_set_left_duty>
 8001006:	e004      	b.n	8001012 <task_ble+0xd6>
						} else {
							h_bridge_stop();
 8001008:	f7ff fc08 	bl	800081c <h_bridge_stop>
							h_bridge_set_left_duty(0);
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff fb53 	bl	80006b8 <h_bridge_set_left_duty>
						}

					}

					// right engine
					if (right < 0) {
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	2b00      	cmp	r3, #0
 8001016:	da07      	bge.n	8001028 <task_ble+0xec>
						h_bridge_ccw_right();
 8001018:	f7ff fbce 	bl	80007b8 <h_bridge_ccw_right>
						h_bridge_set_right_duty(-right);
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	425b      	negs	r3, r3
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fb6f 	bl	8000704 <h_bridge_set_right_duty>
						} else {
							h_bridge_stop();
							h_bridge_set_right_duty(0);
						}
					}
					break;
 8001026:	e028      	b.n	800107a <task_ble+0x13e>
						uint32_t evbits = rt_evbit_check_any(
 8001028:	2003      	movs	r0, #3
 800102a:	f7ff fe31 	bl	8000c90 <rt_evbit_check_any>
 800102e:	6138      	str	r0, [r7, #16]
						if (evbits & (1 << evgroup_ultrasound_evbit_move)) {
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d005      	beq.n	8001046 <task_ble+0x10a>
							h_bridge_cw_right();
 800103a:	f7ff fb99 	bl	8000770 <h_bridge_cw_right>
							h_bridge_set_right_duty(right);
 800103e:	69b8      	ldr	r0, [r7, #24]
 8001040:	f7ff fb60 	bl	8000704 <h_bridge_set_right_duty>
					break;
 8001044:	e019      	b.n	800107a <task_ble+0x13e>
							h_bridge_stop();
 8001046:	f7ff fbe9 	bl	800081c <h_bridge_stop>
							h_bridge_set_right_duty(0);
 800104a:	2000      	movs	r0, #0
 800104c:	f7ff fb5a 	bl	8000704 <h_bridge_set_right_duty>
					break;
 8001050:	e013      	b.n	800107a <task_ble+0x13e>

				case BLE_RECEIVED_ULTRASOUND_CONFIG:

					whichOne = receivedBleData.valueReg2;
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	84bb      	strh	r3, [r7, #36]	; 0x24

					ULTRASOUND_PROPER_DISTANCE_u16 = ultrasound_select_proper_distance(whichOne);
 8001056:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001058:	b2db      	uxtb	r3, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fcea 	bl	8000a34 <ultrasound_select_proper_distance>
 8001060:	4603      	mov	r3, r0
 8001062:	461a      	mov	r2, r3
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <task_ble+0x168>)
 8001066:	801a      	strh	r2, [r3, #0]

					break;
 8001068:	e007      	b.n	800107a <task_ble+0x13e>
				default:
					// unknow -> free
					rt_dequeue(rt_queue_ble, &receivedBleData);
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	4619      	mov	r1, r3
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff febf 	bl	8000df4 <rt_dequeue>
					break;
 8001076:	e000      	b.n	800107a <task_ble+0x13e>
				}

			}
 8001078:	bf00      	nop

			if (receivedBleData.info == ble_transmit) {
 800107a:	7b3b      	ldrb	r3, [r7, #12]
 800107c:	2b01      	cmp	r3, #1
 800107e:	f47f af63 	bne.w	8000f48 <task_ble+0xc>

				memcpy(ble_pDataSend, &receivedBleData.command, 1);
 8001082:	7b7a      	ldrb	r2, [r7, #13]
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <task_ble+0x16c>)
 8001086:	701a      	strb	r2, [r3, #0]
				memcpy(ble_pDataSend + 1, &receivedBleData.valueReg1, 1);
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <task_ble+0x170>)
 800108a:	7bba      	ldrb	r2, [r7, #14]
 800108c:	701a      	strb	r2, [r3, #0]
				memcpy(ble_pDataSend + 2, &receivedBleData.valueReg2, 1);
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <task_ble+0x174>)
 8001090:	7bfa      	ldrb	r2, [r7, #15]
 8001092:	701a      	strb	r2, [r3, #0]

				HAL_UART_Transmit(&huart3, (uint8_t*) ble_pDataSend,
 8001094:	2302      	movs	r3, #2
 8001096:	2203      	movs	r2, #3
 8001098:	4903      	ldr	r1, [pc, #12]	; (80010a8 <task_ble+0x16c>)
 800109a:	4806      	ldr	r0, [pc, #24]	; (80010b4 <task_ble+0x178>)
 800109c:	f006 faca 	bl	8007634 <HAL_UART_Transmit>
		status = rt_dequeue(rt_queue_ble, &receivedBleData);
 80010a0:	e752      	b.n	8000f48 <task_ble+0xc>
 80010a2:	bf00      	nop
 80010a4:	20000000 	.word	0x20000000
 80010a8:	20003574 	.word	0x20003574
 80010ac:	20003575 	.word	0x20003575
 80010b0:	20003576 	.word	0x20003576
 80010b4:	200037dc 	.word	0x200037dc

080010b8 <timer_ultrasound_sensor_tigger>:
#include "tim.h"

/* ************************************************************************** */
// callback
/* ************************************************************************** */
void timer_ultrasound_sensor_tigger(TimerHandle_t xTimer) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

	// set gpio ultrasound trigger
	HAL_GPIO_WritePin(OUT_ULTRASOUND_TRIG_GPIO_Port, OUT_ULTRASOUND_TRIG_Pin, GPIO_PIN_SET);
 80010c0:	2201      	movs	r2, #1
 80010c2:	2140      	movs	r1, #64	; 0x40
 80010c4:	4804      	ldr	r0, [pc, #16]	; (80010d8 <timer_ultrasound_sensor_tigger+0x20>)
 80010c6:	f002 fea5 	bl	8003e14 <HAL_GPIO_WritePin>

	// set timer to 10 us, and start!
	HAL_TIM_Base_Start_IT(&htim10);
 80010ca:	4804      	ldr	r0, [pc, #16]	; (80010dc <timer_ultrasound_sensor_tigger+0x24>)
 80010cc:	f004 ffc4 	bl	8006058 <HAL_TIM_Base_Start_IT>
	// also... in async is waiting for rising / falling edge (void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin))
	// if rising edge start timer 4 for counting up
	// if falling edge stop timer 4
	// calulcate difference
	// calulcate distance between obstacle and vehicle
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40020800 	.word	0x40020800
 80010dc:	200036a8 	.word	0x200036a8

080010e0 <task_eyes>:

void task_eyes(void *pvParameters) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

	// start auto-reloaded timer for triggering ultrasound sensor
	rt_timer_start(rt_timer_ultrasound_sensor_trigger, 100);
 80010e8:	2164      	movs	r1, #100	; 0x64
 80010ea:	2001      	movs	r0, #1
 80010ec:	f7ff fea8 	bl	8000e40 <rt_timer_start>

	(void*) pvParameters;

	for (;;) {

		taskYIELD();
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <task_eyes+0x24>)
 80010f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	f3bf 8f4f 	dsb	sy
 80010fc:	f3bf 8f6f 	isb	sy
 8001100:	e7f6      	b.n	80010f0 <task_eyes+0x10>
 8001102:	bf00      	nop
 8001104:	e000ed04 	.word	0xe000ed04

08001108 <task_memory>:
//#include "task_memory.h"

#include "FreeRTOS.h"
#include "task.h"
#include "runtime.h"
void task_memory(void *pvParameters) {
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;
//	rt_timer_start(rt_timer_jakis_tam, 300);
	for (;;) {
//		vTaskDelay(pdMS_TO_TICKS(1000));
		taskYIELD();
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <task_memory+0x1c>)
 8001112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	f3bf 8f4f 	dsb	sy
 800111c:	f3bf 8f6f 	isb	sy
 8001120:	e7f6      	b.n	8001110 <task_memory+0x8>
 8001122:	bf00      	nop
 8001124:	e000ed04 	.word	0xe000ed04

08001128 <HAL_GPIO_EXTI_Callback>:
//bool ultrasound_done = false;
uint8_t pData[BLE_MAX_SIZE];
volatile uint16_t counter = 0;
extern char temperature_measurement[SIZE_OF_TEMPERATURE_MEASURMENT_ARRAY];
// interrupt pin callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	80fb      	strh	r3, [r7, #6]
//	IRQ_ULTRASOUND_ECHO_Pin
	if (GPIO_Pin & IRQ_ULTRASOUND_ECHO_Pin) {
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d047      	beq.n	80011cc <HAL_GPIO_EXTI_Callback+0xa4>

		if (HAL_GPIO_ReadPin(IRQ_ULTRASOUND_ECHO_GPIO_Port,
 800113c:	2102      	movs	r1, #2
 800113e:	482d      	ldr	r0, [pc, #180]	; (80011f4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001140:	f002 fe42 	bl	8003dc8 <HAL_GPIO_ReadPin>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d006      	beq.n	8001158 <HAL_GPIO_EXTI_Callback+0x30>
		IRQ_ULTRASOUND_ECHO_Pin)) {
			TIM4->CNT = 0;
 800114a:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <HAL_GPIO_EXTI_Callback+0xd0>)
 800114c:	2200      	movs	r2, #0
 800114e:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start(&htim4);
 8001150:	482a      	ldr	r0, [pc, #168]	; (80011fc <HAL_GPIO_EXTI_Callback+0xd4>)
 8001152:	f004 feb5 	bl	8005ec0 <HAL_TIM_Base_Start>
 8001156:	e039      	b.n	80011cc <HAL_GPIO_EXTI_Callback+0xa4>
		} else {
			HAL_TIM_Base_Stop(&htim4);
 8001158:	4828      	ldr	r0, [pc, #160]	; (80011fc <HAL_GPIO_EXTI_Callback+0xd4>)
 800115a:	f004 ff17 	bl	8005f8c <HAL_TIM_Base_Stop>
			uint16_t count = TIM4->CNT;
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	b29b      	uxth	r3, r3
 8001164:	82fb      	strh	r3, [r7, #22]

			/// 	clear 	(if > 30 cm) 	==> 	allowed to drive forward
			/// 	set 	(if < 30 cm) 	==> 	forbidden to drive forward

//			uint16_t dis30 = (uint16_t) ULTRASOUND_PROPER_DISTANCE;
			if (count > ULTRASOUND_PROPER_DISTANCE_u16) {
 8001166:	8afa      	ldrh	r2, [r7, #22]
 8001168:	4b25      	ldr	r3, [pc, #148]	; (8001200 <HAL_GPIO_EXTI_Callback+0xd8>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	b29b      	uxth	r3, r3
 800116e:	429a      	cmp	r2, r3
 8001170:	d904      	bls.n	800117c <HAL_GPIO_EXTI_Callback+0x54>
				rt_evbit_set_ISR(rt_evgroup_ultrasound,
 8001172:	2101      	movs	r1, #1
 8001174:	2003      	movs	r0, #3
 8001176:	f7ff fddb 	bl	8000d30 <rt_evbit_set_ISR>
 800117a:	e003      	b.n	8001184 <HAL_GPIO_EXTI_Callback+0x5c>
						evgroup_ultrasound_evbit_move);
			} else {
				rt_evbit_clear_ISR(rt_evgroup_ultrasound,
 800117c:	2101      	movs	r1, #1
 800117e:	2003      	movs	r0, #3
 8001180:	f7ff fda0 	bl	8000cc4 <rt_evbit_clear_ISR>
						evgroup_ultrasound_evbit_move);
			}

			if (counter > 8) {
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	b29b      	uxth	r3, r3
 800118a:	2b08      	cmp	r3, #8
 800118c:	d917      	bls.n	80011be <HAL_GPIO_EXTI_Callback+0x96>
				counter = 0;
 800118e:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001190:	2200      	movs	r2, #0
 8001192:	801a      	strh	r2, [r3, #0]
				xQueueBleData toBeTransmit_ble_pData = { 0 };
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
				toBeTransmit_ble_pData.info = ble_transmit;
 8001198:	2301      	movs	r3, #1
 800119a:	743b      	strb	r3, [r7, #16]
				toBeTransmit_ble_pData.command =
 800119c:	230a      	movs	r3, #10
 800119e:	747b      	strb	r3, [r7, #17]
						(uint8_t) BLE_TRANSMIT_ULTRASOUND_VALUE;
				toBeTransmit_ble_pData.valueReg1 = ((uint8_t*) &count)[0]; // LSB
 80011a0:	f107 0316 	add.w	r3, r7, #22
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	74bb      	strb	r3, [r7, #18]
				toBeTransmit_ble_pData.valueReg2 = ((uint8_t*) &count)[1]; // MSB
 80011a8:	f107 0316 	add.w	r3, r7, #22
 80011ac:	3301      	adds	r3, #1
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	74fb      	strb	r3, [r7, #19]
				rt_enqueue_ISR(rt_queue_ble, &toBeTransmit_ble_pData);
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	4619      	mov	r1, r3
 80011b8:	2000      	movs	r0, #0
 80011ba:	f7ff fdfb 	bl	8000db4 <rt_enqueue_ISR>
			}

			counter++;
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_GPIO_EXTI_Callback+0xdc>)
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	3301      	adds	r3, #1
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_GPIO_EXTI_Callback+0xdc>)
 80011ca:	801a      	strh	r2, [r3, #0]

		}
	}

//	BLE INTERRUPT -> SOMETHING IS RECEIVED
	if (GPIO_Pin & IRQ_BLE_Pin) {
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d009      	beq.n	80011ea <HAL_GPIO_EXTI_Callback+0xc2>
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]

//		ble_receive_data(pData);
		pxHigherPriorityTaskWoken = pdTRUE;
 80011da:	2301      	movs	r3, #1
 80011dc:	60fb      	str	r3, [r7, #12]
		rt_timer_start_ISR(rt_timer_BLE, &pxHigherPriorityTaskWoken);
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	4619      	mov	r1, r3
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff fe4b 	bl	8000e80 <rt_timer_start_ISR>
//			xTimerStartFromISR(rt_timers[T], pxHigherPriorityTaskWoken);
	}
}
 80011ea:	bf00      	nop
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40020400 	.word	0x40020400
 80011f8:	40000800 	.word	0x40000800
 80011fc:	2000366c 	.word	0x2000366c
 8001200:	20000000 	.word	0x20000000
 8001204:	20000030 	.word	0x20000030

08001208 <HAL_ADC_ConvCpltCallback>:
//	SIZE_OF_TEMPERATURE_MEASURMENT_ARRAY);
}

// temperature measurement completed? enqueue bluetooth :-)
/// sending raw data of temperature from MCU to BLE queue
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
//	toBeTransmit_ble_pData.info = ble_transmit;
//	toBeTransmit_ble_pData.command = 0x00;
//	toBeTransmit_ble_pData.valueReg1 = ((uint8_t*) &temperature_measurement)[2]; // MSB
//	toBeTransmit_ble_pData.valueReg2 = ((uint8_t*) &temperature_measurement)[3]; // LSB
//	rt_enqueue_ISR(rt_queue_ble, &toBeTransmit_ble_pData);
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
	...

0800121c <task_sensors>:

void task_sensors(void *pvParameters) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	(void*) pvParameters;

	QMC5883L_Initialize(MODE_CONTROL_CONTINUOUS, OUTPUT_DATA_RATE_200HZ,
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	2200      	movs	r2, #0
 8001228:	210c      	movs	r1, #12
 800122a:	2000      	movs	r0, #0
 800122c:	f7ff fb81 	bl	8000932 <QMC5883L_Initialize>
			FULL_SCALE_2G, OVER_SAMPLE_RATIO_128);
	QMC5883L_InterruptConfig(INTERRUPT_DISABLE);
 8001230:	2000      	movs	r0, #0
 8001232:	f7ff fba3 	bl	800097c <QMC5883L_InterruptConfig>

//Mode Register
//Continuous-Measurement Mode
	QMC5883L_Write_Reg(0x02, 0x00);
 8001236:	2100      	movs	r1, #0
 8001238:	2002      	movs	r0, #2
 800123a:	f7ff fb27 	bl	800088c <QMC5883L_Write_Reg>

	for (;;) {

		int16_t X = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	827b      	strh	r3, [r7, #18]
		int16_t Y = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	823b      	strh	r3, [r7, #16]
		int16_t Z = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	81fb      	strh	r3, [r7, #14]

		static uint32_t PreviousTicks = 0U;
		uint32_t CurrentTicks = (uint32_t) xTaskGetTickCount();
 800124a:	f008 faff 	bl	800984c <xTaskGetTickCount>
 800124e:	6178      	str	r0, [r7, #20]
		if ((CurrentTicks - PreviousTicks) >= 500u) { // 5 ms
 8001250:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <task_sensors+0xec>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800125c:	d3ef      	bcc.n	800123e <task_sensors+0x22>
			PreviousTicks = (uint32_t) xTaskGetTickCount();
 800125e:	f008 faf5 	bl	800984c <xTaskGetTickCount>
 8001262:	4602      	mov	r2, r0
 8001264:	4b28      	ldr	r3, [pc, #160]	; (8001308 <task_sensors+0xec>)
 8001266:	601a      	str	r2, [r3, #0]
			QMC5883L_Read_Data(&X, &Y, &Z);
 8001268:	f107 020e 	add.w	r2, r7, #14
 800126c:	f107 0110 	add.w	r1, r7, #16
 8001270:	f107 0312 	add.w	r3, r7, #18
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fb25 	bl	80008c4 <QMC5883L_Read_Data>
//			BLE_TRANSMIT_X
//			BLE_TRANSMIT_Y
//			BLE_TRANSMIT_Z

			QMC5883L_Scale(&X, &Y, &Z);
 800127a:	f107 020e 	add.w	r2, r7, #14
 800127e:	f107 0110 	add.w	r1, r7, #16
 8001282:	f107 0312 	add.w	r3, r7, #18
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fb8e 	bl	80009a8 <QMC5883L_Scale>

			xQueueBleData toBeTransmit_ble_pData = { 0 };
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
			toBeTransmit_ble_pData.info = ble_transmit;
 8001290:	2301      	movs	r3, #1
 8001292:	723b      	strb	r3, [r7, #8]
			toBeTransmit_ble_pData.command = BLE_TRANSMIT_X;
 8001294:	2305      	movs	r3, #5
 8001296:	727b      	strb	r3, [r7, #9]

			type_casting.uint16[0] = X; //int16_to_u2(X);
 8001298:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800129c:	b29a      	uxth	r2, r3
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <task_sensors+0xf0>)
 80012a0:	801a      	strh	r2, [r3, #0]
			toBeTransmit_ble_pData.valueReg1 = type_casting.uint8[0]; //((uint8_t*) &X)[0]; // MSB // 1111 1111
 80012a2:	4b1a      	ldr	r3, [pc, #104]	; (800130c <task_sensors+0xf0>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	72bb      	strb	r3, [r7, #10]
			toBeTransmit_ble_pData.valueReg2 = type_casting.uint8[1]; //((uint8_t*) &X)[1]; // LSB 1010 1010
 80012a8:	4b18      	ldr	r3, [pc, #96]	; (800130c <task_sensors+0xf0>)
 80012aa:	785b      	ldrb	r3, [r3, #1]
 80012ac:	72fb      	strb	r3, [r7, #11]
			rt_enqueue(rt_queue_ble, &toBeTransmit_ble_pData);
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	4619      	mov	r1, r3
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff fd57 	bl	8000d68 <rt_enqueue>

			toBeTransmit_ble_pData.command = BLE_TRANSMIT_Y;
 80012ba:	2306      	movs	r3, #6
 80012bc:	727b      	strb	r3, [r7, #9]
			type_casting.uint16[0] = Y; //int16_to_u2(Y);
 80012be:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <task_sensors+0xf0>)
 80012c6:	801a      	strh	r2, [r3, #0]
			toBeTransmit_ble_pData.valueReg1 = type_casting.uint8[0];
 80012c8:	4b10      	ldr	r3, [pc, #64]	; (800130c <task_sensors+0xf0>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	72bb      	strb	r3, [r7, #10]
			toBeTransmit_ble_pData.valueReg2 = type_casting.uint8[1];
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <task_sensors+0xf0>)
 80012d0:	785b      	ldrb	r3, [r3, #1]
 80012d2:	72fb      	strb	r3, [r7, #11]
			rt_enqueue(rt_queue_ble, &toBeTransmit_ble_pData);
 80012d4:	f107 0308 	add.w	r3, r7, #8
 80012d8:	4619      	mov	r1, r3
 80012da:	2000      	movs	r0, #0
 80012dc:	f7ff fd44 	bl	8000d68 <rt_enqueue>

			toBeTransmit_ble_pData.command = BLE_TRANSMIT_Z;
 80012e0:	2307      	movs	r3, #7
 80012e2:	727b      	strb	r3, [r7, #9]
			type_casting.uint16[0] = Z; //int16_to_u2(Z);
 80012e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <task_sensors+0xf0>)
 80012ec:	801a      	strh	r2, [r3, #0]
			toBeTransmit_ble_pData.valueReg1 = type_casting.uint8[0];
 80012ee:	4b07      	ldr	r3, [pc, #28]	; (800130c <task_sensors+0xf0>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	72bb      	strb	r3, [r7, #10]
			toBeTransmit_ble_pData.valueReg2 = type_casting.uint8[1];
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <task_sensors+0xf0>)
 80012f6:	785b      	ldrb	r3, [r3, #1]
 80012f8:	72fb      	strb	r3, [r7, #11]
			rt_enqueue(rt_queue_ble, &toBeTransmit_ble_pData);
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	4619      	mov	r1, r3
 8001300:	2000      	movs	r0, #0
 8001302:	f7ff fd31 	bl	8000d68 <rt_enqueue>
	for (;;) {
 8001306:	e79a      	b.n	800123e <task_sensors+0x22>
 8001308:	20000034 	.word	0x20000034
 800130c:	20003580 	.word	0x20003580

08001310 <task_state_machine>:
#include "runtime.h"
#include "state_machine.h"
#include "h_bridge.h"
#include "bluetooth_le.h"

void task_state_machine(void *pvParameters) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	uint32_t evgroup = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
	bool tasks_disabled = false;
 800131c:	2300      	movs	r3, #0
 800131e:	72fb      	strb	r3, [r7, #11]
//	xQueueBleData receivedBleData = { 0 };

	for (;;) {

		evgroup = rt_evbitwait_any(rt_evgroup_state_machine);
 8001320:	2001      	movs	r0, #1
 8001322:	f7ff fc99 	bl	8000c58 <rt_evbitwait_any>
 8001326:	60f8      	str	r0, [r7, #12]

		if (evgroup & (1 << evgroup_state_m_do_nothing)) {
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <task_state_machine+0x32>

			h_bridge_coast();
 8001332:	f7ff fa55 	bl	80007e0 <h_bridge_coast>
			h_bridge_set_left_duty(0);
 8001336:	2000      	movs	r0, #0
 8001338:	f7ff f9be 	bl	80006b8 <h_bridge_set_left_duty>
			h_bridge_set_right_duty(0);
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff f9e1 	bl	8000704 <h_bridge_set_right_duty>
		}
		if (evgroup & (1 << evgroup_state_m_auto_manual)) {
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0e9      	beq.n	8001320 <task_state_machine+0x10>
			if (tasks_disabled) {
 800134c:	7afb      	ldrb	r3, [r7, #11]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00f      	beq.n	8001372 <task_state_machine+0x62>
				vTaskResume(rt_tasks[rt_task_eyes]);
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <task_state_machine+0x84>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4618      	mov	r0, r3
 8001358:	f008 f90c 	bl	8009574 <vTaskResume>
				vTaskResume(rt_tasks[rt_task_memory]);
 800135c:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <task_state_machine+0x84>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	4618      	mov	r0, r3
 8001362:	f008 f907 	bl	8009574 <vTaskResume>
				vTaskResume(rt_tasks[rt_task_sensors]);
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <task_state_machine+0x84>)
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	4618      	mov	r0, r3
 800136c:	f008 f902 	bl	8009574 <vTaskResume>
 8001370:	e7d6      	b.n	8001320 <task_state_machine+0x10>
			} else {
				vTaskSuspend(rt_tasks[rt_task_eyes]);
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <task_state_machine+0x84>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	4618      	mov	r0, r3
 8001378:	f008 f84e 	bl	8009418 <vTaskSuspend>
				vTaskSuspend(rt_tasks[rt_task_memory]);
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <task_state_machine+0x84>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	4618      	mov	r0, r3
 8001382:	f008 f849 	bl	8009418 <vTaskSuspend>
				vTaskSuspend(rt_tasks[rt_task_sensors]);
 8001386:	4b03      	ldr	r3, [pc, #12]	; (8001394 <task_state_machine+0x84>)
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	4618      	mov	r0, r3
 800138c:	f008 f844 	bl	8009418 <vTaskSuspend>
		evgroup = rt_evbitwait_any(rt_evgroup_state_machine);
 8001390:	e7c6      	b.n	8001320 <task_state_machine+0x10>
 8001392:	bf00      	nop
 8001394:	20003540 	.word	0x20003540

08001398 <u2_to_decimal>:

#include "utility.h"
#include <math.h>
#include "stdlib.h"

int u2_to_decimal(uint8_t u2) {
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]

	char value = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	73fb      	strb	r3, [r7, #15]

	if (u2 & (1 << 7)) {
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	da0a      	bge.n	80013c4 <u2_to_decimal+0x2c>

		value = u2;
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	73fb      	strb	r3, [r7, #15]
		value = ~value;
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	73fb      	strb	r3, [r7, #15]
		value += 1;
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	3301      	adds	r3, #1
 80013bc:	73fb      	strb	r3, [r7, #15]
		return (int) -value;
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	425b      	negs	r3, r3
 80013c2:	e002      	b.n	80013ca <u2_to_decimal+0x32>

	} else {
		value = u2;
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	73fb      	strb	r3, [r7, #15]
		return (int) value;
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr

080013d4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 80013e4:	4b26      	ldr	r3, [pc, #152]	; (8001480 <MX_ADC_Init+0xac>)
 80013e6:	4a27      	ldr	r2, [pc, #156]	; (8001484 <MX_ADC_Init+0xb0>)
 80013e8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013ea:	4b25      	ldr	r3, [pc, #148]	; (8001480 <MX_ADC_Init+0xac>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 80013f0:	4b23      	ldr	r3, [pc, #140]	; (8001480 <MX_ADC_Init+0xac>)
 80013f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013f6:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013f8:	4b21      	ldr	r3, [pc, #132]	; (8001480 <MX_ADC_Init+0xac>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <MX_ADC_Init+0xac>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <MX_ADC_Init+0xac>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <MX_ADC_Init+0xac>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <MX_ADC_Init+0xac>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001416:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <MX_ADC_Init+0xac>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <MX_ADC_Init+0xac>)
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8001424:	4b16      	ldr	r3, [pc, #88]	; (8001480 <MX_ADC_Init+0xac>)
 8001426:	2201      	movs	r2, #1
 8001428:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <MX_ADC_Init+0xac>)
 800142c:	2200      	movs	r2, #0
 800142e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <MX_ADC_Init+0xac>)
 8001434:	2210      	movs	r2, #16
 8001436:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_ADC_Init+0xac>)
 800143a:	2200      	movs	r2, #0
 800143c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <MX_ADC_Init+0xac>)
 8001440:	2200      	movs	r2, #0
 8001442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001446:	480e      	ldr	r0, [pc, #56]	; (8001480 <MX_ADC_Init+0xac>)
 8001448:	f001 f830 	bl	80024ac <HAL_ADC_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_ADC_Init+0x82>
  {
    Error_Handler();
 8001452:	f000 fb0b 	bl	8001a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001456:	2301      	movs	r3, #1
 8001458:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800145a:	2301      	movs	r3, #1
 800145c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	4619      	mov	r1, r3
 8001466:	4806      	ldr	r0, [pc, #24]	; (8001480 <MX_ADC_Init+0xac>)
 8001468:	f001 fc00 	bl	8002c6c <HAL_ADC_ConfigChannel>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_ADC_Init+0xa2>
  {
    Error_Handler();
 8001472:	f000 fafb 	bl	8001a6c <Error_Handler>
  }

}
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20003584 	.word	0x20003584
 8001484:	40012400 	.word	0x40012400

08001488 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08c      	sub	sp, #48	; 0x30
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a31      	ldr	r2, [pc, #196]	; (800156c <HAL_ADC_MspInit+0xe4>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d15c      	bne.n	8001564 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014aa:	4b31      	ldr	r3, [pc, #196]	; (8001570 <HAL_ADC_MspInit+0xe8>)
 80014ac:	6a1b      	ldr	r3, [r3, #32]
 80014ae:	4a30      	ldr	r2, [pc, #192]	; (8001570 <HAL_ADC_MspInit+0xe8>)
 80014b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014b4:	6213      	str	r3, [r2, #32]
 80014b6:	4b2e      	ldr	r3, [pc, #184]	; (8001570 <HAL_ADC_MspInit+0xe8>)
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014be:	61bb      	str	r3, [r7, #24]
 80014c0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c2:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <HAL_ADC_MspInit+0xe8>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	4a2a      	ldr	r2, [pc, #168]	; (8001570 <HAL_ADC_MspInit+0xe8>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	61d3      	str	r3, [r2, #28]
 80014ce:	4b28      	ldr	r3, [pc, #160]	; (8001570 <HAL_ADC_MspInit+0xe8>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	4b25      	ldr	r3, [pc, #148]	; (8001570 <HAL_ADC_MspInit+0xe8>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	4a24      	ldr	r2, [pc, #144]	; (8001570 <HAL_ADC_MspInit+0xe8>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	61d3      	str	r3, [r2, #28]
 80014e6:	4b22      	ldr	r3, [pc, #136]	; (8001570 <HAL_ADC_MspInit+0xe8>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <HAL_ADC_MspInit+0xe8>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	4a1e      	ldr	r2, [pc, #120]	; (8001570 <HAL_ADC_MspInit+0xe8>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	61d3      	str	r3, [r2, #28]
 80014fe:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <HAL_ADC_MspInit+0xe8>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA7     ------> ADC_IN7
    PB15     ------> ADC_IN21 
    */
    GPIO_InitStruct.Pin = ADC_BATTERY_VOLTAGE_Pin;
 800150a:	2301      	movs	r3, #1
 800150c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800150e:	2303      	movs	r3, #3
 8001510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_BATTERY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	4815      	ldr	r0, [pc, #84]	; (8001574 <HAL_ADC_MspInit+0xec>)
 800151e:	f002 f9e1 	bl	80038e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_PHOTO_BACK_Pin|ADC_OPTO_LEFT_Pin|ADC_PHOTO_FRONT_Pin;
 8001522:	2386      	movs	r3, #134	; 0x86
 8001524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001526:	2303      	movs	r3, #3
 8001528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	4619      	mov	r1, r3
 8001534:	4810      	ldr	r0, [pc, #64]	; (8001578 <HAL_ADC_MspInit+0xf0>)
 8001536:	f002 f9d5 	bl	80038e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_OPTO_RIGHT_Pin;
 800153a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800153e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001540:	2303      	movs	r3, #3
 8001542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_OPTO_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001548:	f107 031c 	add.w	r3, r7, #28
 800154c:	4619      	mov	r1, r3
 800154e:	480b      	ldr	r0, [pc, #44]	; (800157c <HAL_ADC_MspInit+0xf4>)
 8001550:	f002 f9c8 	bl	80038e4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	2105      	movs	r1, #5
 8001558:	2012      	movs	r0, #18
 800155a:	f001 fef5 	bl	8003348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800155e:	2012      	movs	r0, #18
 8001560:	f001 ff1e 	bl	80033a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001564:	bf00      	nop
 8001566:	3730      	adds	r7, #48	; 0x30
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40012400 	.word	0x40012400
 8001570:	40023800 	.word	0x40023800
 8001574:	40020800 	.word	0x40020800
 8001578:	40020000 	.word	0x40020000
 800157c:	40020400 	.word	0x40020400

08001580 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <MX_DMA_Init+0x48>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	4a0f      	ldr	r2, [pc, #60]	; (80015c8 <MX_DMA_Init+0x48>)
 800158c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001590:	61d3      	str	r3, [r2, #28]
 8001592:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <MX_DMA_Init+0x48>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 6, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2106      	movs	r1, #6
 80015a2:	200c      	movs	r0, #12
 80015a4:	f001 fed0 	bl	8003348 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80015a8:	200c      	movs	r0, #12
 80015aa:	f001 fef9 	bl	80033a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2105      	movs	r1, #5
 80015b2:	200d      	movs	r0, #13
 80015b4:	f001 fec8 	bl	8003348 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80015b8:	200d      	movs	r0, #13
 80015ba:	f001 fef1 	bl	80033a0 <HAL_NVIC_EnableIRQ>

}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800

080015cc <vApplicationIdleHook>:
void vApplicationMallocFailedHook(void);
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001614:	4a05      	ldr	r2, [pc, #20]	; (800162c <MX_FREERTOS_Init+0x1c>)
 8001616:	2100      	movs	r1, #0
 8001618:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_FREERTOS_Init+0x20>)
 800161a:	f006 fc65 	bl	8007ee8 <osThreadNew>
 800161e:	4602      	mov	r2, r0
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <MX_FREERTOS_Init+0x24>)
 8001622:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  rt_init();
 8001624:	f7ff fa6e 	bl	8000b04 <rt_init>
  /* USER CODE END RTOS_THREADS */

}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	0800b46c 	.word	0x0800b46c
 8001630:	08001639 	.word	0x08001639
 8001634:	200035d8 	.word	0x200035d8

08001638 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001640:	2001      	movs	r0, #1
 8001642:	f006 fcfb 	bl	800803c <osDelay>
 8001646:	e7fb      	b.n	8001640 <StartDefaultTask+0x8>

08001648 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800165e:	4b78      	ldr	r3, [pc, #480]	; (8001840 <MX_GPIO_Init+0x1f8>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	4a77      	ldr	r2, [pc, #476]	; (8001840 <MX_GPIO_Init+0x1f8>)
 8001664:	f043 0304 	orr.w	r3, r3, #4
 8001668:	61d3      	str	r3, [r2, #28]
 800166a:	4b75      	ldr	r3, [pc, #468]	; (8001840 <MX_GPIO_Init+0x1f8>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001676:	4b72      	ldr	r3, [pc, #456]	; (8001840 <MX_GPIO_Init+0x1f8>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	4a71      	ldr	r2, [pc, #452]	; (8001840 <MX_GPIO_Init+0x1f8>)
 800167c:	f043 0320 	orr.w	r3, r3, #32
 8001680:	61d3      	str	r3, [r2, #28]
 8001682:	4b6f      	ldr	r3, [pc, #444]	; (8001840 <MX_GPIO_Init+0x1f8>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	f003 0320 	and.w	r3, r3, #32
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	4b6c      	ldr	r3, [pc, #432]	; (8001840 <MX_GPIO_Init+0x1f8>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	4a6b      	ldr	r2, [pc, #428]	; (8001840 <MX_GPIO_Init+0x1f8>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	61d3      	str	r3, [r2, #28]
 800169a:	4b69      	ldr	r3, [pc, #420]	; (8001840 <MX_GPIO_Init+0x1f8>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	4b66      	ldr	r3, [pc, #408]	; (8001840 <MX_GPIO_Init+0x1f8>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	4a65      	ldr	r2, [pc, #404]	; (8001840 <MX_GPIO_Init+0x1f8>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	61d3      	str	r3, [r2, #28]
 80016b2:	4b63      	ldr	r3, [pc, #396]	; (8001840 <MX_GPIO_Init+0x1f8>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016be:	4b60      	ldr	r3, [pc, #384]	; (8001840 <MX_GPIO_Init+0x1f8>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	4a5f      	ldr	r2, [pc, #380]	; (8001840 <MX_GPIO_Init+0x1f8>)
 80016c4:	f043 0308 	orr.w	r3, r3, #8
 80016c8:	61d3      	str	r3, [r2, #28]
 80016ca:	4b5d      	ldr	r3, [pc, #372]	; (8001840 <MX_GPIO_Init+0x1f8>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_INa_ENGINE_LEFT_Pin|OUT_INb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_TEST_Pin 
 80016d6:	2200      	movs	r2, #0
 80016d8:	f640 616e 	movw	r1, #3694	; 0xe6e
 80016dc:	4859      	ldr	r0, [pc, #356]	; (8001844 <MX_GPIO_Init+0x1fc>)
 80016de:	f002 fb99 	bl	8003e14 <HAL_GPIO_WritePin>
                          |OUT_ULTRASOUND_TRIG_Pin|OUT_INb_ENGINE_RIGHT_Pin|OUT_LED1_Pin|OUT_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 80016e2:	2200      	movs	r2, #0
 80016e4:	f248 7108 	movw	r1, #34568	; 0x8708
 80016e8:	4857      	ldr	r0, [pc, #348]	; (8001848 <MX_GPIO_Init+0x200>)
 80016ea:	f002 fb93 	bl	8003e14 <HAL_GPIO_WritePin>
                          |OUT_LED0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_BLE_EN_GPIO_Port, OUT_BLE_EN_Pin, GPIO_PIN_SET);
 80016ee:	2201      	movs	r2, #1
 80016f0:	2110      	movs	r1, #16
 80016f2:	4854      	ldr	r0, [pc, #336]	; (8001844 <MX_GPIO_Init+0x1fc>)
 80016f4:	f002 fb8e 	bl	8003e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12;
 80016f8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80016fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fe:	2303      	movs	r3, #3
 8001700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	484d      	ldr	r0, [pc, #308]	; (8001844 <MX_GPIO_Init+0x1fc>)
 800170e:	f002 f8e9 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = OUT_INa_ENGINE_LEFT_Pin|OUT_INb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_EN_Pin 
 8001712:	f640 637e 	movw	r3, #3710	; 0xe7e
 8001716:	617b      	str	r3, [r7, #20]
                          |OUT_BLE_TEST_Pin|OUT_ULTRASOUND_TRIG_Pin|OUT_INb_ENGINE_RIGHT_Pin|OUT_LED1_Pin 
                          |OUT_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001718:	2301      	movs	r3, #1
 800171a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	4846      	ldr	r0, [pc, #280]	; (8001844 <MX_GPIO_Init+0x1fc>)
 800172c:	f002 f8da 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 8001730:	f248 7308 	movw	r3, #34568	; 0x8708
 8001734:	617b      	str	r3, [r7, #20]
                          |OUT_LED0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001736:	2301      	movs	r3, #1
 8001738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2300      	movs	r3, #0
 8001740:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	483f      	ldr	r0, [pc, #252]	; (8001848 <MX_GPIO_Init+0x200>)
 800174a:	f002 f8cb 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 800174e:	f241 0370 	movw	r3, #4208	; 0x1070
 8001752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001754:	2303      	movs	r3, #3
 8001756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	4839      	ldr	r0, [pc, #228]	; (8001848 <MX_GPIO_Init+0x200>)
 8001764:	f002 f8be 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_BLE_Pin;
 8001768:	2301      	movs	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800176c:	4b37      	ldr	r3, [pc, #220]	; (800184c <MX_GPIO_Init+0x204>)
 800176e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_BLE_GPIO_Port, &GPIO_InitStruct);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	4835      	ldr	r0, [pc, #212]	; (8001850 <MX_GPIO_Init+0x208>)
 800177c:	f002 f8b2 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_ULTRASOUND_ECHO_Pin;
 8001780:	2302      	movs	r3, #2
 8001782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001784:	4b33      	ldr	r3, [pc, #204]	; (8001854 <MX_GPIO_Init+0x20c>)
 8001786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_ULTRASOUND_ECHO_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4619      	mov	r1, r3
 8001792:	482f      	ldr	r0, [pc, #188]	; (8001850 <MX_GPIO_Init+0x208>)
 8001794:	f002 f8a6 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB3 PB4 
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 8001798:	f242 333c 	movw	r3, #9020	; 0x233c
 800179c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800179e:	2303      	movs	r3, #3
 80017a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	4828      	ldr	r0, [pc, #160]	; (8001850 <MX_GPIO_Init+0x208>)
 80017ae:	f002 f899 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_LEFT_Pin;
 80017b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_LEFT_GPIO_Port, &GPIO_InitStruct);
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4619      	mov	r1, r3
 80017c6:	4822      	ldr	r0, [pc, #136]	; (8001850 <MX_GPIO_Init+0x208>)
 80017c8:	f002 f88c 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_HALL_FRONT_Pin;
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN_HALL_FRONT_GPIO_Port, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	4819      	ldr	r0, [pc, #100]	; (8001844 <MX_GPIO_Init+0x1fc>)
 80017e0:	f002 f880 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_RIGHT_Pin;
 80017e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	4813      	ldr	r0, [pc, #76]	; (8001848 <MX_GPIO_Init+0x200>)
 80017fa:	f002 f873 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017fe:	2304      	movs	r3, #4
 8001800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001802:	2303      	movs	r3, #3
 8001804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	4619      	mov	r1, r3
 8001810:	4811      	ldr	r0, [pc, #68]	; (8001858 <MX_GPIO_Init+0x210>)
 8001812:	f002 f867 	bl	80038e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2105      	movs	r1, #5
 800181a:	2006      	movs	r0, #6
 800181c:	f001 fd94 	bl	8003348 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001820:	2006      	movs	r0, #6
 8001822:	f001 fdbd 	bl	80033a0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2105      	movs	r1, #5
 800182a:	2007      	movs	r0, #7
 800182c:	f001 fd8c 	bl	8003348 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001830:	2007      	movs	r0, #7
 8001832:	f001 fdb5 	bl	80033a0 <HAL_NVIC_EnableIRQ>

}
 8001836:	bf00      	nop
 8001838:	3728      	adds	r7, #40	; 0x28
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	40020800 	.word	0x40020800
 8001848:	40020000 	.word	0x40020000
 800184c:	10110000 	.word	0x10110000
 8001850:	40020400 	.word	0x40020400
 8001854:	10310000 	.word	0x10310000
 8001858:	40020c00 	.word	0x40020c00

0800185c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <MX_I2C1_Init+0x50>)
 8001862:	4a13      	ldr	r2, [pc, #76]	; (80018b0 <MX_I2C1_Init+0x54>)
 8001864:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <MX_I2C1_Init+0x50>)
 8001868:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <MX_I2C1_Init+0x58>)
 800186a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <MX_I2C1_Init+0x50>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <MX_I2C1_Init+0x50>)
 8001874:	2200      	movs	r2, #0
 8001876:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <MX_I2C1_Init+0x50>)
 800187a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800187e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001880:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <MX_I2C1_Init+0x50>)
 8001882:	2200      	movs	r2, #0
 8001884:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <MX_I2C1_Init+0x50>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <MX_I2C1_Init+0x50>)
 800188e:	2200      	movs	r2, #0
 8001890:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <MX_I2C1_Init+0x50>)
 8001894:	2200      	movs	r2, #0
 8001896:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001898:	4804      	ldr	r0, [pc, #16]	; (80018ac <MX_I2C1_Init+0x50>)
 800189a:	f002 fb05 	bl	8003ea8 <HAL_I2C_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018a4:	f000 f8e2 	bl	8001a6c <Error_Handler>
  }

}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	200035dc 	.word	0x200035dc
 80018b0:	40005400 	.word	0x40005400
 80018b4:	000186a0 	.word	0x000186a0

080018b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	; 0x28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a17      	ldr	r2, [pc, #92]	; (8001934 <HAL_I2C_MspInit+0x7c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d127      	bne.n	800192a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_I2C_MspInit+0x80>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	4a16      	ldr	r2, [pc, #88]	; (8001938 <HAL_I2C_MspInit+0x80>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	61d3      	str	r3, [r2, #28]
 80018e6:	4b14      	ldr	r3, [pc, #80]	; (8001938 <HAL_I2C_MspInit+0x80>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018f2:	23c0      	movs	r3, #192	; 0xc0
 80018f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018f6:	2312      	movs	r3, #18
 80018f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fe:	2303      	movs	r3, #3
 8001900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001902:	2304      	movs	r3, #4
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	480b      	ldr	r0, [pc, #44]	; (800193c <HAL_I2C_MspInit+0x84>)
 800190e:	f001 ffe9 	bl	80038e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_I2C_MspInit+0x80>)
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	4a08      	ldr	r2, [pc, #32]	; (8001938 <HAL_I2C_MspInit+0x80>)
 8001918:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800191c:	6253      	str	r3, [r2, #36]	; 0x24
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_I2C_MspInit+0x80>)
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800192a:	bf00      	nop
 800192c:	3728      	adds	r7, #40	; 0x28
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40005400 	.word	0x40005400
 8001938:	40023800 	.word	0x40023800
 800193c:	40020400 	.word	0x40020400

08001940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001944:	f000 fd7d 	bl	8002442 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001948:	f000 f820 	bl	800198c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800194c:	f7ff fe7c 	bl	8001648 <MX_GPIO_Init>
  MX_DMA_Init();
 8001950:	f7ff fe16 	bl	8001580 <MX_DMA_Init>
  MX_ADC_Init();
 8001954:	f7ff fd3e 	bl	80013d4 <MX_ADC_Init>
  MX_I2C1_Init();
 8001958:	f7ff ff80 	bl	800185c <MX_I2C1_Init>
  MX_TIM2_Init();
 800195c:	f000 f9ac 	bl	8001cb8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001960:	f000 fa1e 	bl	8001da0 <MX_TIM3_Init>
  MX_TIM9_Init();
 8001964:	f000 fade 	bl	8001f24 <MX_TIM9_Init>
  MX_USART3_UART_Init();
 8001968:	f000 fc82 	bl	8002270 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 800196c:	f000 fa8c 	bl	8001e88 <MX_TIM4_Init>
  MX_TIM10_Init();
 8001970:	f000 fb4c 	bl	800200c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
	device_init();
 8001974:	f7ff f8b2 	bl	8000adc <device_init>
	h_bridge_init();
 8001978:	f7fe fe86 	bl	8000688 <h_bridge_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800197c:	f006 fa4e 	bl	8007e1c <osKernelInitialize>
  MX_FREERTOS_Init(); 
 8001980:	f7ff fe46 	bl	8001610 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001984:	f006 fa7c 	bl	8007e80 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001988:	e7fe      	b.n	8001988 <main+0x48>
	...

0800198c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b092      	sub	sp, #72	; 0x48
 8001990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	2234      	movs	r2, #52	; 0x34
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f009 fba9 	bl	800b0f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a0:	463b      	mov	r3, r7
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
 80019ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019ae:	4b1e      	ldr	r3, [pc, #120]	; (8001a28 <SystemClock_Config+0x9c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80019b6:	4a1c      	ldr	r2, [pc, #112]	; (8001a28 <SystemClock_Config+0x9c>)
 80019b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019bc:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80019be:	2303      	movs	r3, #3
 80019c0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019c2:	2301      	movs	r3, #1
 80019c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019c6:	2301      	movs	r3, #1
 80019c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019ca:	2310      	movs	r3, #16
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ce:	2302      	movs	r3, #2
 80019d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80019d8:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80019dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80019de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4618      	mov	r0, r3
 80019ea:	f003 fa59 	bl	8004ea0 <HAL_RCC_OscConfig>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80019f4:	f000 f83a 	bl	8001a6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f8:	230f      	movs	r3, #15
 80019fa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019fc:	2303      	movs	r3, #3
 80019fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	2101      	movs	r1, #1
 8001a10:	4618      	mov	r0, r3
 8001a12:	f003 fec3 	bl	800579c <HAL_RCC_ClockConfig>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a1c:	f000 f826 	bl	8001a6c <Error_Handler>
  }
}
 8001a20:	bf00      	nop
 8001a22:	3748      	adds	r7, #72	; 0x48
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40007000 	.word	0x40007000

08001a2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a09      	ldr	r2, [pc, #36]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d101      	bne.n	8001a42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a3e:	f000 fd19 	bl	8002474 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */

  // also the code for others timers if overflow :)

  // when tim10
  if(htim->Instance == TIM10) {
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d104      	bne.n	8001a56 <HAL_TIM_PeriodElapsedCallback+0x2a>
	  // clear pin ultrasound trigger
	  HAL_GPIO_WritePin(OUT_ULTRASOUND_TRIG_GPIO_Port, OUT_ULTRASOUND_TRIG_Pin, GPIO_PIN_RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2140      	movs	r1, #64	; 0x40
 8001a50:	4805      	ldr	r0, [pc, #20]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001a52:	f002 f9df 	bl	8003e14 <HAL_GPIO_WritePin>
	  // and this is it
  }

  /* USER CODE END Callback 1 */
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40000c00 	.word	0x40000c00
 8001a64:	40010c00 	.word	0x40010c00
 8001a68:	40020800 	.word	0x40020800

08001a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001a92:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <HAL_MspInit+0x64>)
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	4a16      	ldr	r2, [pc, #88]	; (8001af0 <HAL_MspInit+0x64>)
 8001a98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a9c:	6253      	str	r3, [r2, #36]	; 0x24
 8001a9e:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <HAL_MspInit+0x64>)
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_MspInit+0x64>)
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	4a10      	ldr	r2, [pc, #64]	; (8001af0 <HAL_MspInit+0x64>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6213      	str	r3, [r2, #32]
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <HAL_MspInit+0x64>)
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_MspInit+0x64>)
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <HAL_MspInit+0x64>)
 8001ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001acc:	6253      	str	r3, [r2, #36]	; 0x24
 8001ace:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <HAL_MspInit+0x64>)
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	210f      	movs	r1, #15
 8001ade:	f06f 0001 	mvn.w	r0, #1
 8001ae2:	f001 fc31 	bl	8003348 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800

08001af4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08c      	sub	sp, #48	; 0x30
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8001b04:	2200      	movs	r2, #0
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	202e      	movs	r0, #46	; 0x2e
 8001b0a:	f001 fc1d 	bl	8003348 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8001b0e:	202e      	movs	r0, #46	; 0x2e
 8001b10:	f001 fc46 	bl	80033a0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001b14:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <HAL_InitTick+0x9c>)
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	4a1d      	ldr	r2, [pc, #116]	; (8001b90 <HAL_InitTick+0x9c>)
 8001b1a:	f043 0308 	orr.w	r3, r3, #8
 8001b1e:	6253      	str	r3, [r2, #36]	; 0x24
 8001b20:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <HAL_InitTick+0x9c>)
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b2c:	f107 0210 	add.w	r2, r7, #16
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f004 f878 	bl	8005c2c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b3c:	f004 f84e 	bl	8005bdc <HAL_RCC_GetPCLK1Freq>
 8001b40:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b44:	4a13      	ldr	r2, [pc, #76]	; (8001b94 <HAL_InitTick+0xa0>)
 8001b46:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4a:	0c9b      	lsrs	r3, r3, #18
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <HAL_InitTick+0xa4>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <HAL_InitTick+0xa8>)
 8001b54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <HAL_InitTick+0xa4>)
 8001b58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b5c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001b5e:	4a0e      	ldr	r2, [pc, #56]	; (8001b98 <HAL_InitTick+0xa4>)
 8001b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b62:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <HAL_InitTick+0xa4>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_InitTick+0xa4>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8001b70:	4809      	ldr	r0, [pc, #36]	; (8001b98 <HAL_InitTick+0xa4>)
 8001b72:	f004 f8fd 	bl	8005d70 <HAL_TIM_Base_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d104      	bne.n	8001b86 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8001b7c:	4806      	ldr	r0, [pc, #24]	; (8001b98 <HAL_InitTick+0xa4>)
 8001b7e:	f004 fa6b 	bl	8006058 <HAL_TIM_Base_Start_IT>
 8001b82:	4603      	mov	r3, r0
 8001b84:	e000      	b.n	8001b88 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3730      	adds	r7, #48	; 0x30
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40023800 	.word	0x40023800
 8001b94:	431bde83 	.word	0x431bde83
 8001b98:	20003630 	.word	0x20003630
 8001b9c:	40000c00 	.word	0x40000c00

08001ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <HardFault_Handler+0x4>

08001bb2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb6:	e7fe      	b.n	8001bb6 <MemManage_Handler+0x4>

08001bb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bbc:	e7fe      	b.n	8001bbc <BusFault_Handler+0x4>

08001bbe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc2:	e7fe      	b.n	8001bc2 <UsageFault_Handler+0x4>

08001bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	f002 f94f 	bl	8003e78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001be2:	2002      	movs	r0, #2
 8001be4:	f002 f948 	bl	8003e78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}

08001bec <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001bf0:	4802      	ldr	r0, [pc, #8]	; (8001bfc <DMA1_Channel2_IRQHandler+0x10>)
 8001bf2:	f001 fd99 	bl	8003728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	2000381c 	.word	0x2000381c

08001c00 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <DMA1_Channel3_IRQHandler+0x10>)
 8001c06:	f001 fd8f 	bl	8003728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20003798 	.word	0x20003798

08001c14 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <ADC1_IRQHandler+0x10>)
 8001c1a:	f000 feeb 	bl	80029f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20003584 	.word	0x20003584

08001c28 <TIM10_IRQHandler>:

/**
  * @brief This function handles TIM10 global interrupt.
  */
void TIM10_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM10_IRQn 0 */

  /* USER CODE END TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <TIM10_IRQHandler+0x10>)
 8001c2e:	f004 fbbf 	bl	80063b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM10_IRQn 1 */

  /* USER CODE END TIM10_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	200036a8 	.word	0x200036a8

08001c3c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <TIM5_IRQHandler+0x10>)
 8001c42:	f004 fbb5 	bl	80063b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20003630 	.word	0x20003630

08001c50 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001c54:	4b15      	ldr	r3, [pc, #84]	; (8001cac <SystemInit+0x5c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a14      	ldr	r2, [pc, #80]	; (8001cac <SystemInit+0x5c>)
 8001c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5e:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <SystemInit+0x5c>)
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	4911      	ldr	r1, [pc, #68]	; (8001cac <SystemInit+0x5c>)
 8001c66:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <SystemInit+0x60>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <SystemInit+0x5c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0e      	ldr	r2, [pc, #56]	; (8001cac <SystemInit+0x5c>)
 8001c72:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001c76:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8001c7a:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <SystemInit+0x5c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <SystemInit+0x5c>)
 8001c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c86:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <SystemInit+0x5c>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	4a07      	ldr	r2, [pc, #28]	; (8001cac <SystemInit+0x5c>)
 8001c8e:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001c92:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <SystemInit+0x5c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <SystemInit+0x64>)
 8001c9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ca0:	609a      	str	r2, [r3, #8]
#endif
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	88ffc00c 	.word	0x88ffc00c
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cbe:	f107 0318 	add.w	r3, r7, #24
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ccc:	f107 0310 	add.w	r3, r7, #16
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cd6:	463b      	mov	r3, r7
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8001ce2:	4b2e      	ldr	r3, [pc, #184]	; (8001d9c <MX_TIM2_Init+0xe4>)
 8001ce4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ce8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001cea:	4b2c      	ldr	r3, [pc, #176]	; (8001d9c <MX_TIM2_Init+0xe4>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf0:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <MX_TIM2_Init+0xe4>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3199;
 8001cf6:	4b29      	ldr	r3, [pc, #164]	; (8001d9c <MX_TIM2_Init+0xe4>)
 8001cf8:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001cfc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfe:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <MX_TIM2_Init+0xe4>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d04:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <MX_TIM2_Init+0xe4>)
 8001d06:	2280      	movs	r2, #128	; 0x80
 8001d08:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d0a:	4824      	ldr	r0, [pc, #144]	; (8001d9c <MX_TIM2_Init+0xe4>)
 8001d0c:	f004 f830 	bl	8005d70 <HAL_TIM_Base_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001d16:	f7ff fea9 	bl	8001a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d1e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d20:	f107 0318 	add.w	r3, r7, #24
 8001d24:	4619      	mov	r1, r3
 8001d26:	481d      	ldr	r0, [pc, #116]	; (8001d9c <MX_TIM2_Init+0xe4>)
 8001d28:	f004 fdae 	bl	8006888 <HAL_TIM_ConfigClockSource>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001d32:	f7ff fe9b 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d36:	4819      	ldr	r0, [pc, #100]	; (8001d9c <MX_TIM2_Init+0xe4>)
 8001d38:	f004 f9f4 	bl	8006124 <HAL_TIM_PWM_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001d42:	f7ff fe93 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d4e:	f107 0310 	add.w	r3, r7, #16
 8001d52:	4619      	mov	r1, r3
 8001d54:	4811      	ldr	r0, [pc, #68]	; (8001d9c <MX_TIM2_Init+0xe4>)
 8001d56:	f005 fb0f 	bl	8007378 <HAL_TIMEx_MasterConfigSynchronization>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001d60:	f7ff fe84 	bl	8001a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d64:	2360      	movs	r3, #96	; 0x60
 8001d66:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1599;
 8001d68:	f240 633f 	movw	r3, #1599	; 0x63f
 8001d6c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001d72:	2304      	movs	r3, #4
 8001d74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d76:	463b      	mov	r3, r7
 8001d78:	2200      	movs	r2, #0
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4807      	ldr	r0, [pc, #28]	; (8001d9c <MX_TIM2_Init+0xe4>)
 8001d7e:	f004 fbf3 	bl	8006568 <HAL_TIM_PWM_ConfigChannel>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001d88:	f7ff fe70 	bl	8001a6c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001d8c:	4803      	ldr	r0, [pc, #12]	; (8001d9c <MX_TIM2_Init+0xe4>)
 8001d8e:	f000 f9eb 	bl	8002168 <HAL_TIM_MspPostInit>

}
 8001d92:	bf00      	nop
 8001d94:	3728      	adds	r7, #40	; 0x28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	2000375c 	.word	0x2000375c

08001da0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08a      	sub	sp, #40	; 0x28
 8001da4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001da6:	f107 0318 	add.w	r3, r7, #24
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db4:	f107 0310 	add.w	r3, r7, #16
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8001dca:	4b2d      	ldr	r3, [pc, #180]	; (8001e80 <MX_TIM3_Init+0xe0>)
 8001dcc:	4a2d      	ldr	r2, [pc, #180]	; (8001e84 <MX_TIM3_Init+0xe4>)
 8001dce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001dd0:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <MX_TIM3_Init+0xe0>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd6:	4b2a      	ldr	r3, [pc, #168]	; (8001e80 <MX_TIM3_Init+0xe0>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3200-1;
 8001ddc:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <MX_TIM3_Init+0xe0>)
 8001dde:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001de2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de4:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <MX_TIM3_Init+0xe0>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001dea:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <MX_TIM3_Init+0xe0>)
 8001dec:	2280      	movs	r2, #128	; 0x80
 8001dee:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001df0:	4823      	ldr	r0, [pc, #140]	; (8001e80 <MX_TIM3_Init+0xe0>)
 8001df2:	f003 ffbd 	bl	8005d70 <HAL_TIM_Base_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001dfc:	f7ff fe36 	bl	8001a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e04:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e06:	f107 0318 	add.w	r3, r7, #24
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	481c      	ldr	r0, [pc, #112]	; (8001e80 <MX_TIM3_Init+0xe0>)
 8001e0e:	f004 fd3b 	bl	8006888 <HAL_TIM_ConfigClockSource>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001e18:	f7ff fe28 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e1c:	4818      	ldr	r0, [pc, #96]	; (8001e80 <MX_TIM3_Init+0xe0>)
 8001e1e:	f004 f981 	bl	8006124 <HAL_TIM_PWM_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001e28:	f7ff fe20 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e34:	f107 0310 	add.w	r3, r7, #16
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4811      	ldr	r0, [pc, #68]	; (8001e80 <MX_TIM3_Init+0xe0>)
 8001e3c:	f005 fa9c 	bl	8007378 <HAL_TIMEx_MasterConfigSynchronization>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001e46:	f7ff fe11 	bl	8001a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e4a:	2360      	movs	r3, #96	; 0x60
 8001e4c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8001e4e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001e52:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001e58:	2304      	movs	r3, #4
 8001e5a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	2208      	movs	r2, #8
 8001e60:	4619      	mov	r1, r3
 8001e62:	4807      	ldr	r0, [pc, #28]	; (8001e80 <MX_TIM3_Init+0xe0>)
 8001e64:	f004 fb80 	bl	8006568 <HAL_TIM_PWM_ConfigChannel>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8001e6e:	f7ff fdfd 	bl	8001a6c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001e72:	4803      	ldr	r0, [pc, #12]	; (8001e80 <MX_TIM3_Init+0xe0>)
 8001e74:	f000 f978 	bl	8002168 <HAL_TIM_MspPostInit>

}
 8001e78:	bf00      	nop
 8001e7a:	3728      	adds	r7, #40	; 0x28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	200036e4 	.word	0x200036e4
 8001e84:	40000400 	.word	0x40000400

08001e88 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e8e:	f107 0308 	add.w	r3, r7, #8
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <MX_TIM4_Init+0x94>)
 8001ea6:	4a1e      	ldr	r2, [pc, #120]	; (8001f20 <MX_TIM4_Init+0x98>)
 8001ea8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <MX_TIM4_Init+0x94>)
 8001eac:	2203      	movs	r2, #3
 8001eae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb0:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <MX_TIM4_Init+0x94>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 39999;
 8001eb6:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <MX_TIM4_Init+0x94>)
 8001eb8:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001ebc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ebe:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <MX_TIM4_Init+0x94>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec4:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <MX_TIM4_Init+0x94>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001eca:	4814      	ldr	r0, [pc, #80]	; (8001f1c <MX_TIM4_Init+0x94>)
 8001ecc:	f003 ff50 	bl	8005d70 <HAL_TIM_Base_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001ed6:	f7ff fdc9 	bl	8001a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ede:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ee0:	f107 0308 	add.w	r3, r7, #8
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	480d      	ldr	r0, [pc, #52]	; (8001f1c <MX_TIM4_Init+0x94>)
 8001ee8:	f004 fcce 	bl	8006888 <HAL_TIM_ConfigClockSource>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001ef2:	f7ff fdbb 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001efe:	463b      	mov	r3, r7
 8001f00:	4619      	mov	r1, r3
 8001f02:	4806      	ldr	r0, [pc, #24]	; (8001f1c <MX_TIM4_Init+0x94>)
 8001f04:	f005 fa38 	bl	8007378 <HAL_TIMEx_MasterConfigSynchronization>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001f0e:	f7ff fdad 	bl	8001a6c <Error_Handler>
  }

}
 8001f12:	bf00      	nop
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	2000366c 	.word	0x2000366c
 8001f20:	40000800 	.word	0x40000800

08001f24 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f2a:	f107 0318 	add.w	r3, r7, #24
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f38:	f107 0310 	add.w	r3, r7, #16
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f42:	463b      	mov	r3, r7
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8001f4e:	4b2d      	ldr	r3, [pc, #180]	; (8002004 <MX_TIM9_Init+0xe0>)
 8001f50:	4a2d      	ldr	r2, [pc, #180]	; (8002008 <MX_TIM9_Init+0xe4>)
 8001f52:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001f54:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <MX_TIM9_Init+0xe0>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5a:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <MX_TIM9_Init+0xe0>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 3200;
 8001f60:	4b28      	ldr	r3, [pc, #160]	; (8002004 <MX_TIM9_Init+0xe0>)
 8001f62:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001f66:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f68:	4b26      	ldr	r3, [pc, #152]	; (8002004 <MX_TIM9_Init+0xe0>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f6e:	4b25      	ldr	r3, [pc, #148]	; (8002004 <MX_TIM9_Init+0xe0>)
 8001f70:	2280      	movs	r2, #128	; 0x80
 8001f72:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001f74:	4823      	ldr	r0, [pc, #140]	; (8002004 <MX_TIM9_Init+0xe0>)
 8001f76:	f003 fefb 	bl	8005d70 <HAL_TIM_Base_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 8001f80:	f7ff fd74 	bl	8001a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f88:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001f8a:	f107 0318 	add.w	r3, r7, #24
 8001f8e:	4619      	mov	r1, r3
 8001f90:	481c      	ldr	r0, [pc, #112]	; (8002004 <MX_TIM9_Init+0xe0>)
 8001f92:	f004 fc79 	bl	8006888 <HAL_TIM_ConfigClockSource>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM9_Init+0x7c>
  {
    Error_Handler();
 8001f9c:	f7ff fd66 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001fa0:	4818      	ldr	r0, [pc, #96]	; (8002004 <MX_TIM9_Init+0xe0>)
 8001fa2:	f004 f8bf 	bl	8006124 <HAL_TIM_PWM_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM9_Init+0x8c>
  {
    Error_Handler();
 8001fac:	f7ff fd5e 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8001fb8:	f107 0310 	add.w	r3, r7, #16
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4811      	ldr	r0, [pc, #68]	; (8002004 <MX_TIM9_Init+0xe0>)
 8001fc0:	f005 f9da 	bl	8007378 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_TIM9_Init+0xaa>
  {
    Error_Handler();
 8001fca:	f7ff fd4f 	bl	8001a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fce:	2360      	movs	r3, #96	; 0x60
 8001fd0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8001fd2:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001fd6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fe0:	463b      	mov	r3, r7
 8001fe2:	2204      	movs	r2, #4
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4807      	ldr	r0, [pc, #28]	; (8002004 <MX_TIM9_Init+0xe0>)
 8001fe8:	f004 fabe 	bl	8006568 <HAL_TIM_PWM_ConfigChannel>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM9_Init+0xd2>
  {
    Error_Handler();
 8001ff2:	f7ff fd3b 	bl	8001a6c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 8001ff6:	4803      	ldr	r0, [pc, #12]	; (8002004 <MX_TIM9_Init+0xe0>)
 8001ff8:	f000 f8b6 	bl	8002168 <HAL_TIM_MspPostInit>

}
 8001ffc:	bf00      	nop
 8001ffe:	3728      	adds	r7, #40	; 0x28
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20003720 	.word	0x20003720
 8002008:	40010800 	.word	0x40010800

0800200c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002012:	463b      	mov	r3, r7
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]

  htim10.Instance = TIM10;
 800201e:	4b16      	ldr	r3, [pc, #88]	; (8002078 <MX_TIM10_Init+0x6c>)
 8002020:	4a16      	ldr	r2, [pc, #88]	; (800207c <MX_TIM10_Init+0x70>)
 8002022:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <MX_TIM10_Init+0x6c>)
 8002026:	2200      	movs	r2, #0
 8002028:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <MX_TIM10_Init+0x6c>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1599;
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <MX_TIM10_Init+0x6c>)
 8002032:	f240 623f 	movw	r2, #1599	; 0x63f
 8002036:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <MX_TIM10_Init+0x6c>)
 800203a:	2200      	movs	r2, #0
 800203c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <MX_TIM10_Init+0x6c>)
 8002040:	2200      	movs	r2, #0
 8002042:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002044:	480c      	ldr	r0, [pc, #48]	; (8002078 <MX_TIM10_Init+0x6c>)
 8002046:	f003 fe93 	bl	8005d70 <HAL_TIM_Base_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 8002050:	f7ff fd0c 	bl	8001a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002058:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 800205a:	463b      	mov	r3, r7
 800205c:	4619      	mov	r1, r3
 800205e:	4806      	ldr	r0, [pc, #24]	; (8002078 <MX_TIM10_Init+0x6c>)
 8002060:	f004 fc12 	bl	8006888 <HAL_TIM_ConfigClockSource>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_TIM10_Init+0x62>
  {
    Error_Handler();
 800206a:	f7ff fcff 	bl	8001a6c <Error_Handler>
  }

}
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200036a8 	.word	0x200036a8
 800207c:	40010c00 	.word	0x40010c00

08002080 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002090:	d10c      	bne.n	80020ac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002092:	4b30      	ldr	r3, [pc, #192]	; (8002154 <HAL_TIM_Base_MspInit+0xd4>)
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	4a2f      	ldr	r2, [pc, #188]	; (8002154 <HAL_TIM_Base_MspInit+0xd4>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6253      	str	r3, [r2, #36]	; 0x24
 800209e:	4b2d      	ldr	r3, [pc, #180]	; (8002154 <HAL_TIM_Base_MspInit+0xd4>)
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	61fb      	str	r3, [r7, #28]
 80020a8:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80020aa:	e04e      	b.n	800214a <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM3)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a29      	ldr	r2, [pc, #164]	; (8002158 <HAL_TIM_Base_MspInit+0xd8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d10c      	bne.n	80020d0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020b6:	4b27      	ldr	r3, [pc, #156]	; (8002154 <HAL_TIM_Base_MspInit+0xd4>)
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	4a26      	ldr	r2, [pc, #152]	; (8002154 <HAL_TIM_Base_MspInit+0xd4>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	6253      	str	r3, [r2, #36]	; 0x24
 80020c2:	4b24      	ldr	r3, [pc, #144]	; (8002154 <HAL_TIM_Base_MspInit+0xd4>)
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	61bb      	str	r3, [r7, #24]
 80020cc:	69bb      	ldr	r3, [r7, #24]
}
 80020ce:	e03c      	b.n	800214a <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM4)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a21      	ldr	r2, [pc, #132]	; (800215c <HAL_TIM_Base_MspInit+0xdc>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d10c      	bne.n	80020f4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020da:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <HAL_TIM_Base_MspInit+0xd4>)
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	4a1d      	ldr	r2, [pc, #116]	; (8002154 <HAL_TIM_Base_MspInit+0xd4>)
 80020e0:	f043 0304 	orr.w	r3, r3, #4
 80020e4:	6253      	str	r3, [r2, #36]	; 0x24
 80020e6:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <HAL_TIM_Base_MspInit+0xd4>)
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	697b      	ldr	r3, [r7, #20]
}
 80020f2:	e02a      	b.n	800214a <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM9)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a19      	ldr	r2, [pc, #100]	; (8002160 <HAL_TIM_Base_MspInit+0xe0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d10c      	bne.n	8002118 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80020fe:	4b15      	ldr	r3, [pc, #84]	; (8002154 <HAL_TIM_Base_MspInit+0xd4>)
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	4a14      	ldr	r2, [pc, #80]	; (8002154 <HAL_TIM_Base_MspInit+0xd4>)
 8002104:	f043 0304 	orr.w	r3, r3, #4
 8002108:	6213      	str	r3, [r2, #32]
 800210a:	4b12      	ldr	r3, [pc, #72]	; (8002154 <HAL_TIM_Base_MspInit+0xd4>)
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	693b      	ldr	r3, [r7, #16]
}
 8002116:	e018      	b.n	800214a <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM10)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a11      	ldr	r2, [pc, #68]	; (8002164 <HAL_TIM_Base_MspInit+0xe4>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d113      	bne.n	800214a <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <HAL_TIM_Base_MspInit+0xd4>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	4a0b      	ldr	r2, [pc, #44]	; (8002154 <HAL_TIM_Base_MspInit+0xd4>)
 8002128:	f043 0308 	orr.w	r3, r3, #8
 800212c:	6213      	str	r3, [r2, #32]
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <HAL_TIM_Base_MspInit+0xd4>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM10_IRQn, 5, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2105      	movs	r1, #5
 800213e:	201a      	movs	r0, #26
 8002140:	f001 f902 	bl	8003348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
 8002144:	201a      	movs	r0, #26
 8002146:	f001 f92b 	bl	80033a0 <HAL_NVIC_EnableIRQ>
}
 800214a:	bf00      	nop
 800214c:	3720      	adds	r7, #32
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	40000400 	.word	0x40000400
 800215c:	40000800 	.word	0x40000800
 8002160:	40010800 	.word	0x40010800
 8002164:	40010c00 	.word	0x40010c00

08002168 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	; 0x28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002188:	d11c      	bne.n	80021c4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218a:	4b33      	ldr	r3, [pc, #204]	; (8002258 <HAL_TIM_MspPostInit+0xf0>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	4a32      	ldr	r2, [pc, #200]	; (8002258 <HAL_TIM_MspPostInit+0xf0>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	61d3      	str	r3, [r2, #28]
 8002196:	4b30      	ldr	r3, [pc, #192]	; (8002258 <HAL_TIM_MspPostInit+0xf0>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0-WKUP1     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PWM_ENGINE_LEFT_Pin;
 80021a2:	2301      	movs	r3, #1
 80021a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ae:	2300      	movs	r3, #0
 80021b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021b2:	2301      	movs	r3, #1
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_LEFT_GPIO_Port, &GPIO_InitStruct);
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	4619      	mov	r1, r3
 80021bc:	4827      	ldr	r0, [pc, #156]	; (800225c <HAL_TIM_MspPostInit+0xf4>)
 80021be:	f001 fb91 	bl	80038e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80021c2:	e044      	b.n	800224e <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a25      	ldr	r2, [pc, #148]	; (8002260 <HAL_TIM_MspPostInit+0xf8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d11d      	bne.n	800220a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ce:	4b22      	ldr	r3, [pc, #136]	; (8002258 <HAL_TIM_MspPostInit+0xf0>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	4a21      	ldr	r2, [pc, #132]	; (8002258 <HAL_TIM_MspPostInit+0xf0>)
 80021d4:	f043 0304 	orr.w	r3, r3, #4
 80021d8:	61d3      	str	r3, [r2, #28]
 80021da:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <HAL_TIM_MspPostInit+0xf0>)
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_ENGINE_RIGHT_Pin;
 80021e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f4:	2300      	movs	r3, #0
 80021f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021f8:	2302      	movs	r3, #2
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	4619      	mov	r1, r3
 8002202:	4818      	ldr	r0, [pc, #96]	; (8002264 <HAL_TIM_MspPostInit+0xfc>)
 8002204:	f001 fb6e 	bl	80038e4 <HAL_GPIO_Init>
}
 8002208:	e021      	b.n	800224e <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM9)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a16      	ldr	r2, [pc, #88]	; (8002268 <HAL_TIM_MspPostInit+0x100>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d11c      	bne.n	800224e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002214:	4b10      	ldr	r3, [pc, #64]	; (8002258 <HAL_TIM_MspPostInit+0xf0>)
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	4a0f      	ldr	r2, [pc, #60]	; (8002258 <HAL_TIM_MspPostInit+0xf0>)
 800221a:	f043 0302 	orr.w	r3, r3, #2
 800221e:	61d3      	str	r3, [r2, #28]
 8002220:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <HAL_TIM_MspPostInit+0xf0>)
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 800222c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002232:	2302      	movs	r3, #2
 8002234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223a:	2300      	movs	r3, #0
 800223c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800223e:	2303      	movs	r3, #3
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	4619      	mov	r1, r3
 8002248:	4808      	ldr	r0, [pc, #32]	; (800226c <HAL_TIM_MspPostInit+0x104>)
 800224a:	f001 fb4b 	bl	80038e4 <HAL_GPIO_Init>
}
 800224e:	bf00      	nop
 8002250:	3728      	adds	r7, #40	; 0x28
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800
 800225c:	40020000 	.word	0x40020000
 8002260:	40000400 	.word	0x40000400
 8002264:	40020800 	.word	0x40020800
 8002268:	40010800 	.word	0x40010800
 800226c:	40020400 	.word	0x40020400

08002270 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <MX_USART3_UART_Init+0x4c>)
 8002276:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <MX_USART3_UART_Init+0x50>)
 8002278:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <MX_USART3_UART_Init+0x4c>)
 800227c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002280:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002282:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <MX_USART3_UART_Init+0x4c>)
 8002284:	2200      	movs	r2, #0
 8002286:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <MX_USART3_UART_Init+0x4c>)
 800228a:	2200      	movs	r2, #0
 800228c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800228e:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <MX_USART3_UART_Init+0x4c>)
 8002290:	2200      	movs	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002294:	4b09      	ldr	r3, [pc, #36]	; (80022bc <MX_USART3_UART_Init+0x4c>)
 8002296:	220c      	movs	r2, #12
 8002298:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800229a:	4b08      	ldr	r3, [pc, #32]	; (80022bc <MX_USART3_UART_Init+0x4c>)
 800229c:	2200      	movs	r2, #0
 800229e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <MX_USART3_UART_Init+0x4c>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022a6:	4805      	ldr	r0, [pc, #20]	; (80022bc <MX_USART3_UART_Init+0x4c>)
 80022a8:	f005 f900 	bl	80074ac <HAL_UART_Init>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80022b2:	f7ff fbdb 	bl	8001a6c <Error_Handler>
  }

}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200037dc 	.word	0x200037dc
 80022c0:	40004800 	.word	0x40004800

080022c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08a      	sub	sp, #40	; 0x28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	f107 0314 	add.w	r3, r7, #20
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a3e      	ldr	r2, [pc, #248]	; (80023dc <HAL_UART_MspInit+0x118>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d175      	bne.n	80023d2 <HAL_UART_MspInit+0x10e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80022e6:	4b3e      	ldr	r3, [pc, #248]	; (80023e0 <HAL_UART_MspInit+0x11c>)
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	4a3d      	ldr	r2, [pc, #244]	; (80023e0 <HAL_UART_MspInit+0x11c>)
 80022ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f0:	6253      	str	r3, [r2, #36]	; 0x24
 80022f2:	4b3b      	ldr	r3, [pc, #236]	; (80023e0 <HAL_UART_MspInit+0x11c>)
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fe:	4b38      	ldr	r3, [pc, #224]	; (80023e0 <HAL_UART_MspInit+0x11c>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	4a37      	ldr	r2, [pc, #220]	; (80023e0 <HAL_UART_MspInit+0x11c>)
 8002304:	f043 0302 	orr.w	r3, r3, #2
 8002308:	61d3      	str	r3, [r2, #28]
 800230a:	4b35      	ldr	r3, [pc, #212]	; (80023e0 <HAL_UART_MspInit+0x11c>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002316:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800231a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	2302      	movs	r3, #2
 800231e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002324:	2303      	movs	r3, #3
 8002326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002328:	2307      	movs	r3, #7
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	4619      	mov	r1, r3
 8002332:	482c      	ldr	r0, [pc, #176]	; (80023e4 <HAL_UART_MspInit+0x120>)
 8002334:	f001 fad6 	bl	80038e4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002338:	4b2b      	ldr	r3, [pc, #172]	; (80023e8 <HAL_UART_MspInit+0x124>)
 800233a:	4a2c      	ldr	r2, [pc, #176]	; (80023ec <HAL_UART_MspInit+0x128>)
 800233c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800233e:	4b2a      	ldr	r3, [pc, #168]	; (80023e8 <HAL_UART_MspInit+0x124>)
 8002340:	2200      	movs	r2, #0
 8002342:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002344:	4b28      	ldr	r3, [pc, #160]	; (80023e8 <HAL_UART_MspInit+0x124>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800234a:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <HAL_UART_MspInit+0x124>)
 800234c:	2280      	movs	r2, #128	; 0x80
 800234e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002350:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <HAL_UART_MspInit+0x124>)
 8002352:	2200      	movs	r2, #0
 8002354:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002356:	4b24      	ldr	r3, [pc, #144]	; (80023e8 <HAL_UART_MspInit+0x124>)
 8002358:	2200      	movs	r2, #0
 800235a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800235c:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <HAL_UART_MspInit+0x124>)
 800235e:	2200      	movs	r2, #0
 8002360:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002362:	4b21      	ldr	r3, [pc, #132]	; (80023e8 <HAL_UART_MspInit+0x124>)
 8002364:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002368:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800236a:	481f      	ldr	r0, [pc, #124]	; (80023e8 <HAL_UART_MspInit+0x124>)
 800236c:	f001 f830 	bl	80033d0 <HAL_DMA_Init>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8002376:	f7ff fb79 	bl	8001a6c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a1a      	ldr	r2, [pc, #104]	; (80023e8 <HAL_UART_MspInit+0x124>)
 800237e:	635a      	str	r2, [r3, #52]	; 0x34
 8002380:	4a19      	ldr	r2, [pc, #100]	; (80023e8 <HAL_UART_MspInit+0x124>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8002386:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <HAL_UART_MspInit+0x12c>)
 8002388:	4a1a      	ldr	r2, [pc, #104]	; (80023f4 <HAL_UART_MspInit+0x130>)
 800238a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800238c:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <HAL_UART_MspInit+0x12c>)
 800238e:	2210      	movs	r2, #16
 8002390:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002392:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <HAL_UART_MspInit+0x12c>)
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002398:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <HAL_UART_MspInit+0x12c>)
 800239a:	2280      	movs	r2, #128	; 0x80
 800239c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800239e:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <HAL_UART_MspInit+0x12c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023a4:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <HAL_UART_MspInit+0x12c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80023aa:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <HAL_UART_MspInit+0x12c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023b0:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <HAL_UART_MspInit+0x12c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80023b6:	480e      	ldr	r0, [pc, #56]	; (80023f0 <HAL_UART_MspInit+0x12c>)
 80023b8:	f001 f80a 	bl	80033d0 <HAL_DMA_Init>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 80023c2:	f7ff fb53 	bl	8001a6c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a09      	ldr	r2, [pc, #36]	; (80023f0 <HAL_UART_MspInit+0x12c>)
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
 80023cc:	4a08      	ldr	r2, [pc, #32]	; (80023f0 <HAL_UART_MspInit+0x12c>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80023d2:	bf00      	nop
 80023d4:	3728      	adds	r7, #40	; 0x28
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40004800 	.word	0x40004800
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40020400 	.word	0x40020400
 80023e8:	20003798 	.word	0x20003798
 80023ec:	40026030 	.word	0x40026030
 80023f0:	2000381c 	.word	0x2000381c
 80023f4:	4002601c 	.word	0x4002601c

080023f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80023f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80023fa:	e003      	b.n	8002404 <LoopCopyDataInit>

080023fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80023fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002400:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002402:	3104      	adds	r1, #4

08002404 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002404:	480a      	ldr	r0, [pc, #40]	; (8002430 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002406:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002408:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800240a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800240c:	d3f6      	bcc.n	80023fc <CopyDataInit>
  ldr r2, =_sbss
 800240e:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002410:	e002      	b.n	8002418 <LoopFillZerobss>

08002412 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002412:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002414:	f842 3b04 	str.w	r3, [r2], #4

08002418 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002418:	4b08      	ldr	r3, [pc, #32]	; (800243c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800241a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800241c:	d3f9      	bcc.n	8002412 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800241e:	f7ff fc17 	bl	8001c50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002422:	f008 fe37 	bl	800b094 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002426:	f7ff fa8b 	bl	8001940 <main>
  bx lr
 800242a:	4770      	bx	lr
  ldr r3, =_sidata
 800242c:	0800b4bc 	.word	0x0800b4bc
  ldr r0, =_sdata
 8002430:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002434:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8002438:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 800243c:	200038a4 	.word	0x200038a4

08002440 <AES_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002440:	e7fe      	b.n	8002440 <AES_IRQHandler>

08002442 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800244c:	2003      	movs	r0, #3
 800244e:	f000 ff5b 	bl	8003308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002452:	2000      	movs	r0, #0
 8002454:	f7ff fb4e 	bl	8001af4 <HAL_InitTick>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	71fb      	strb	r3, [r7, #7]
 8002462:	e001      	b.n	8002468 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002464:	f7ff fb12 	bl	8001a8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002468:	79fb      	ldrb	r3, [r7, #7]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <HAL_IncTick+0x1c>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_IncTick+0x20>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4413      	add	r3, r2
 8002482:	4a03      	ldr	r2, [pc, #12]	; (8002490 <HAL_IncTick+0x1c>)
 8002484:	6013      	str	r3, [r2, #0]
}
 8002486:	bf00      	nop
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20003860 	.word	0x20003860
 8002494:	2000000c 	.word	0x2000000c

08002498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return uwTick;
 800249c:	4b02      	ldr	r3, [pc, #8]	; (80024a8 <HAL_GetTick+0x10>)
 800249e:	681b      	ldr	r3, [r3, #0]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr
 80024a8:	20003860 	.word	0x20003860

080024ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08e      	sub	sp, #56	; 0x38
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e282      	b.n	80029d2 <HAL_ADC_Init+0x526>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a9d      	ldr	r2, [pc, #628]	; (8002748 <HAL_ADC_Init+0x29c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d004      	beq.n	80024e0 <HAL_ADC_Init+0x34>
 80024d6:	f240 11bd 	movw	r1, #445	; 0x1bd
 80024da:	489c      	ldr	r0, [pc, #624]	; (800274c <HAL_ADC_Init+0x2a0>)
 80024dc:	f7ff facc 	bl	8001a78 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00e      	beq.n	8002506 <HAL_ADC_Init+0x5a>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f0:	d009      	beq.n	8002506 <HAL_ADC_Init+0x5a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024fa:	d004      	beq.n	8002506 <HAL_ADC_Init+0x5a>
 80024fc:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8002500:	4892      	ldr	r0, [pc, #584]	; (800274c <HAL_ADC_Init+0x2a0>)
 8002502:	f7ff fab9 	bl	8001a78 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d013      	beq.n	8002536 <HAL_ADC_Init+0x8a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002516:	d00e      	beq.n	8002536 <HAL_ADC_Init+0x8a>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002520:	d009      	beq.n	8002536 <HAL_ADC_Init+0x8a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800252a:	d004      	beq.n	8002536 <HAL_ADC_Init+0x8a>
 800252c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002530:	4886      	ldr	r0, [pc, #536]	; (800274c <HAL_ADC_Init+0x2a0>)
 8002532:	f7ff faa1 	bl	8001a78 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d009      	beq.n	8002552 <HAL_ADC_Init+0xa6>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002546:	d004      	beq.n	8002552 <HAL_ADC_Init+0xa6>
 8002548:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800254c:	487f      	ldr	r0, [pc, #508]	; (800274c <HAL_ADC_Init+0x2a0>)
 800254e:	f7ff fa93 	bl	8001a78 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d009      	beq.n	800256e <HAL_ADC_Init+0xc2>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002562:	d004      	beq.n	800256e <HAL_ADC_Init+0xc2>
 8002564:	f240 11c1 	movw	r1, #449	; 0x1c1
 8002568:	4878      	ldr	r0, [pc, #480]	; (800274c <HAL_ADC_Init+0x2a0>)
 800256a:	f7ff fa85 	bl	8001a78 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002576:	d008      	beq.n	800258a <HAL_ADC_Init+0xde>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d004      	beq.n	800258a <HAL_ADC_Init+0xde>
 8002580:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002584:	4871      	ldr	r0, [pc, #452]	; (800274c <HAL_ADC_Init+0x2a0>)
 8002586:	f7ff fa77 	bl	8001a78 <assert_failed>
  assert_param(IS_ADC_AUTOWAIT(hadc->Init.LowPowerAutoWait));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d020      	beq.n	80025d4 <HAL_ADC_Init+0x128>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	2b10      	cmp	r3, #16
 8002598:	d01c      	beq.n	80025d4 <HAL_ADC_Init+0x128>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	2b20      	cmp	r3, #32
 80025a0:	d018      	beq.n	80025d4 <HAL_ADC_Init+0x128>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	2b30      	cmp	r3, #48	; 0x30
 80025a8:	d014      	beq.n	80025d4 <HAL_ADC_Init+0x128>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2b40      	cmp	r3, #64	; 0x40
 80025b0:	d010      	beq.n	80025d4 <HAL_ADC_Init+0x128>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	2b50      	cmp	r3, #80	; 0x50
 80025b8:	d00c      	beq.n	80025d4 <HAL_ADC_Init+0x128>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	2b60      	cmp	r3, #96	; 0x60
 80025c0:	d008      	beq.n	80025d4 <HAL_ADC_Init+0x128>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	2b70      	cmp	r3, #112	; 0x70
 80025c8:	d004      	beq.n	80025d4 <HAL_ADC_Init+0x128>
 80025ca:	f240 11c3 	movw	r1, #451	; 0x1c3
 80025ce:	485f      	ldr	r0, [pc, #380]	; (800274c <HAL_ADC_Init+0x2a0>)
 80025d0:	f7ff fa52 	bl	8001a78 <assert_failed>
  assert_param(IS_ADC_AUTOPOWEROFF(hadc->Init.LowPowerAutoPowerOff));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d013      	beq.n	8002604 <HAL_ADC_Init+0x158>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025e4:	d00e      	beq.n	8002604 <HAL_ADC_Init+0x158>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ee:	d009      	beq.n	8002604 <HAL_ADC_Init+0x158>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80025f8:	d004      	beq.n	8002604 <HAL_ADC_Init+0x158>
 80025fa:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80025fe:	4853      	ldr	r0, [pc, #332]	; (800274c <HAL_ADC_Init+0x2a0>)
 8002600:	f7ff fa3a 	bl	8001a78 <assert_failed>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <HAL_ADC_Init+0x172>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	2b04      	cmp	r3, #4
 8002612:	d004      	beq.n	800261e <HAL_ADC_Init+0x172>
 8002614:	f240 11c5 	movw	r1, #453	; 0x1c5
 8002618:	484c      	ldr	r0, [pc, #304]	; (800274c <HAL_ADC_Init+0x2a0>)
 800261a:	f7ff fa2d 	bl	8001a78 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002624:	2b00      	cmp	r3, #0
 8002626:	d009      	beq.n	800263c <HAL_ADC_Init+0x190>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800262e:	2b01      	cmp	r3, #1
 8002630:	d004      	beq.n	800263c <HAL_ADC_Init+0x190>
 8002632:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8002636:	4845      	ldr	r0, [pc, #276]	; (800274c <HAL_ADC_Init+0x2a0>)
 8002638:	f7ff fa1e 	bl	8001a78 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002640:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002644:	d03e      	beq.n	80026c4 <HAL_ADC_Init+0x218>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800264e:	d039      	beq.n	80026c4 <HAL_ADC_Init+0x218>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002654:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002658:	d034      	beq.n	80026c4 <HAL_ADC_Init+0x218>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265e:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8002662:	d02f      	beq.n	80026c4 <HAL_ADC_Init+0x218>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002668:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800266c:	d02a      	beq.n	80026c4 <HAL_ADC_Init+0x218>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002672:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002676:	d025      	beq.n	80026c4 <HAL_ADC_Init+0x218>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002680:	d020      	beq.n	80026c4 <HAL_ADC_Init+0x218>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002686:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 800268a:	d01b      	beq.n	80026c4 <HAL_ADC_Init+0x218>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002690:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8002694:	d016      	beq.n	80026c4 <HAL_ADC_Init+0x218>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800269a:	2b00      	cmp	r3, #0
 800269c:	d012      	beq.n	80026c4 <HAL_ADC_Init+0x218>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a6:	d00d      	beq.n	80026c4 <HAL_ADC_Init+0x218>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ac:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80026b0:	d008      	beq.n	80026c4 <HAL_ADC_Init+0x218>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b6:	2b10      	cmp	r3, #16
 80026b8:	d004      	beq.n	80026c4 <HAL_ADC_Init+0x218>
 80026ba:	f240 11c7 	movw	r1, #455	; 0x1c7
 80026be:	4823      	ldr	r0, [pc, #140]	; (800274c <HAL_ADC_Init+0x2a0>)
 80026c0:	f7ff f9da 	bl	8001a78 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <HAL_ADC_Init+0x236>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d004      	beq.n	80026e2 <HAL_ADC_Init+0x236>
 80026d8:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 80026dc:	481b      	ldr	r0, [pc, #108]	; (800274c <HAL_ADC_Init+0x2a0>)
 80026de:	f7ff f9cb 	bl	8001a78 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d032      	beq.n	8002750 <HAL_ADC_Init+0x2a4>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_ADC_Init+0x24e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f6:	2b1c      	cmp	r3, #28
 80026f8:	d904      	bls.n	8002704 <HAL_ADC_Init+0x258>
 80026fa:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80026fe:	4813      	ldr	r0, [pc, #76]	; (800274c <HAL_ADC_Init+0x2a0>)
 8002700:	f7ff f9ba 	bl	8001a78 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800270a:	2b00      	cmp	r3, #0
 800270c:	d009      	beq.n	8002722 <HAL_ADC_Init+0x276>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002714:	2b01      	cmp	r3, #1
 8002716:	d004      	beq.n	8002722 <HAL_ADC_Init+0x276>
 8002718:	f240 11cd 	movw	r1, #461	; 0x1cd
 800271c:	480b      	ldr	r0, [pc, #44]	; (800274c <HAL_ADC_Init+0x2a0>)
 800271e:	f7ff f9ab 	bl	8001a78 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002728:	2b00      	cmp	r3, #0
 800272a:	d011      	beq.n	8002750 <HAL_ADC_Init+0x2a4>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_ADC_Init+0x290>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002738:	2b08      	cmp	r3, #8
 800273a:	d909      	bls.n	8002750 <HAL_ADC_Init+0x2a4>
 800273c:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8002740:	4802      	ldr	r0, [pc, #8]	; (800274c <HAL_ADC_Init+0x2a0>)
 8002742:	f7ff f999 	bl	8001a78 <assert_failed>
 8002746:	e003      	b.n	8002750 <HAL_ADC_Init+0x2a4>
 8002748:	40012400 	.word	0x40012400
 800274c:	0800b1a8 	.word	0x0800b1a8
    }
  }
      
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002754:	2b10      	cmp	r3, #16
 8002756:	d017      	beq.n	8002788 <HAL_ADC_Init+0x2dc>
  {
    assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275c:	2b00      	cmp	r3, #0
 800275e:	d013      	beq.n	8002788 <HAL_ADC_Init+0x2dc>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002764:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002768:	d00e      	beq.n	8002788 <HAL_ADC_Init+0x2dc>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002772:	d009      	beq.n	8002788 <HAL_ADC_Init+0x2dc>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002778:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800277c:	d004      	beq.n	8002788 <HAL_ADC_Init+0x2dc>
 800277e:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8002782:	4896      	ldr	r0, [pc, #600]	; (80029dc <HAL_ADC_Init+0x530>)
 8002784:	f7ff f978 	bl	8001a78 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278c:	2b00      	cmp	r3, #0
 800278e:	d115      	bne.n	80027bc <HAL_ADC_Init+0x310>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800279e:	4b90      	ldr	r3, [pc, #576]	; (80029e0 <HAL_ADC_Init+0x534>)
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	4a8f      	ldr	r2, [pc, #572]	; (80029e0 <HAL_ADC_Init+0x534>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6213      	str	r3, [r2, #32]
 80027aa:	4b8d      	ldr	r3, [pc, #564]	; (80029e0 <HAL_ADC_Init+0x534>)
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7fe fe66 	bl	8001488 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f040 80ff 	bne.w	80029c8 <HAL_ADC_Init+0x51c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027d2:	f023 0302 	bic.w	r3, r3, #2
 80027d6:	f043 0202 	orr.w	r2, r3, #2
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80027de:	4b81      	ldr	r3, [pc, #516]	; (80029e4 <HAL_ADC_Init+0x538>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	497e      	ldr	r1, [pc, #504]	; (80029e4 <HAL_ADC_Init+0x538>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80027f8:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002800:	4619      	mov	r1, r3
 8002802:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002806:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800281c:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002822:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800282a:	4619      	mov	r1, r3
 800282c:	2302      	movs	r3, #2
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002832:	fa93 f3a3 	rbit	r3, r3
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	fab3 f383 	clz	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8002844:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002848:	4313      	orrs	r3, r2
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002850:	2b10      	cmp	r3, #16
 8002852:	d007      	beq.n	8002864 <HAL_ADC_Init+0x3b8>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800285c:	4313      	orrs	r3, r2
 800285e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002860:	4313      	orrs	r3, r2
 8002862:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286e:	2b40      	cmp	r3, #64	; 0x40
 8002870:	d04f      	beq.n	8002912 <HAL_ADC_Init+0x466>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002878:	4313      	orrs	r3, r2
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002884:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6912      	ldr	r2, [r2, #16]
 800288a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800288e:	d003      	beq.n	8002898 <HAL_ADC_Init+0x3ec>
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6912      	ldr	r2, [r2, #16]
 8002894:	2a01      	cmp	r2, #1
 8002896:	d102      	bne.n	800289e <HAL_ADC_Init+0x3f2>
 8002898:	f44f 7280 	mov.w	r2, #256	; 0x100
 800289c:	e000      	b.n	80028a0 <HAL_ADC_Init+0x3f4>
 800289e:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80028a0:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80028a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028a4:	4313      	orrs	r3, r2
 80028a6:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d125      	bne.n	80028fe <HAL_ADC_Init+0x452>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d114      	bne.n	80028e6 <HAL_ADC_Init+0x43a>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	3b01      	subs	r3, #1
 80028c2:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80028c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	fa92 f2a2 	rbit	r2, r2
 80028ce:	617a      	str	r2, [r7, #20]
  return result;
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	fab2 f282 	clz	r2, r2
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	4093      	lsls	r3, r2
 80028da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028e0:	4313      	orrs	r3, r2
 80028e2:	633b      	str	r3, [r7, #48]	; 0x30
 80028e4:	e00b      	b.n	80028fe <HAL_ADC_Init+0x452>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ea:	f043 0220 	orr.w	r2, r3, #32
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f6:	f043 0201 	orr.w	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	4b38      	ldr	r3, [pc, #224]	; (80029e8 <HAL_ADC_Init+0x53c>)
 8002906:	4013      	ands	r3, r2
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800290e:	430b      	orrs	r3, r1
 8002910:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	4b34      	ldr	r3, [pc, #208]	; (80029ec <HAL_ADC_Init+0x540>)
 800291a:	4013      	ands	r3, r2
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002922:	430b      	orrs	r3, r1
 8002924:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800292e:	d003      	beq.n	8002938 <HAL_ADC_Init+0x48c>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d119      	bne.n	800296c <HAL_ADC_Init+0x4c0>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	3b01      	subs	r3, #1
 8002948:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 800294c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	fa92 f2a2 	rbit	r2, r2
 8002954:	60fa      	str	r2, [r7, #12]
  return result;
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	fab2 f282 	clz	r2, r2
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	fa03 f202 	lsl.w	r2, r3, r2
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
 800296a:	e007      	b.n	800297c <HAL_ADC_Init+0x4d0>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 800297a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	4b1b      	ldr	r3, [pc, #108]	; (80029f0 <HAL_ADC_Init+0x544>)
 8002984:	4013      	ands	r3, r2
 8002986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002988:	429a      	cmp	r2, r3
 800298a:	d10b      	bne.n	80029a4 <HAL_ADC_Init+0x4f8>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002996:	f023 0303 	bic.w	r3, r3, #3
 800299a:	f043 0201 	orr.w	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80029a2:	e014      	b.n	80029ce <HAL_ADC_Init+0x522>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a8:	f023 0312 	bic.w	r3, r3, #18
 80029ac:	f043 0210 	orr.w	r2, r3, #16
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b8:	f043 0201 	orr.w	r2, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80029c6:	e002      	b.n	80029ce <HAL_ADC_Init+0x522>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3738      	adds	r7, #56	; 0x38
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	0800b1a8 	.word	0x0800b1a8
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40012700 	.word	0x40012700
 80029e8:	fcfc16ff 	.word	0xfcfc16ff
 80029ec:	c0fff189 	.word	0xc0fff189
 80029f0:	bf80fffe 	.word	0xbf80fffe

080029f4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a8f      	ldr	r2, [pc, #572]	; (8002c40 <HAL_ADC_IRQHandler+0x24c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d004      	beq.n	8002a10 <HAL_ADC_IRQHandler+0x1c>
 8002a06:	f240 618e 	movw	r1, #1678	; 0x68e
 8002a0a:	488e      	ldr	r0, [pc, #568]	; (8002c44 <HAL_ADC_IRQHandler+0x250>)
 8002a0c:	f7ff f834 	bl	8001a78 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d009      	beq.n	8002a2e <HAL_ADC_IRQHandler+0x3a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d004      	beq.n	8002a2e <HAL_ADC_IRQHandler+0x3a>
 8002a24:	f240 618f 	movw	r1, #1679	; 0x68f
 8002a28:	4886      	ldr	r0, [pc, #536]	; (8002c44 <HAL_ADC_IRQHandler+0x250>)
 8002a2a:	f7ff f825 	bl	8001a78 <assert_failed>
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_ADC_IRQHandler+0x4a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3a:	2b1c      	cmp	r3, #28
 8002a3c:	d904      	bls.n	8002a48 <HAL_ADC_IRQHandler+0x54>
 8002a3e:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 8002a42:	4880      	ldr	r0, [pc, #512]	; (8002c44 <HAL_ADC_IRQHandler+0x250>)
 8002a44:	f7ff f818 	bl	8001a78 <assert_failed>

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 0320 	and.w	r3, r3, #32
 8002a52:	2b20      	cmp	r3, #32
 8002a54:	d14e      	bne.n	8002af4 <HAL_ADC_IRQHandler+0x100>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d147      	bne.n	8002af4 <HAL_ADC_IRQHandler+0x100>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a68:	f003 0310 	and.w	r3, r3, #16
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d105      	bne.n	8002a7c <HAL_ADC_IRQHandler+0x88>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d12c      	bne.n	8002ae4 <HAL_ADC_IRQHandler+0xf0>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d127      	bne.n	8002ae4 <HAL_ADC_IRQHandler+0xf0>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d006      	beq.n	8002ab0 <HAL_ADC_IRQHandler+0xbc>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d119      	bne.n	8002ae4 <HAL_ADC_IRQHandler+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0220 	bic.w	r2, r2, #32
 8002abe:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d105      	bne.n	8002ae4 <HAL_ADC_IRQHandler+0xf0>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002adc:	f043 0201 	orr.w	r2, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7fe fb8f 	bl	8001208 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f06f 0212 	mvn.w	r2, #18
 8002af2:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afe:	2b80      	cmp	r3, #128	; 0x80
 8002b00:	d15c      	bne.n	8002bbc <HAL_ADC_IRQHandler+0x1c8>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d155      	bne.n	8002bbc <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d105      	bne.n	8002b28 <HAL_ADC_IRQHandler+0x134>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b20:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d13a      	bne.n	8002bac <HAL_ADC_IRQHandler+0x1b8>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d006      	beq.n	8002b52 <HAL_ADC_IRQHandler+0x15e>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d12c      	bne.n	8002bac <HAL_ADC_IRQHandler+0x1b8>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d125      	bne.n	8002bac <HAL_ADC_IRQHandler+0x1b8>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d11e      	bne.n	8002bac <HAL_ADC_IRQHandler+0x1b8>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d119      	bne.n	8002bac <HAL_ADC_IRQHandler+0x1b8>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b86:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d105      	bne.n	8002bac <HAL_ADC_IRQHandler+0x1b8>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba4:	f043 0201 	orr.w	r2, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 faf7 	bl	80031a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f06f 020c 	mvn.w	r2, #12
 8002bba:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc6:	2b40      	cmp	r3, #64	; 0x40
 8002bc8:	d114      	bne.n	8002bf4 <HAL_ADC_IRQHandler+0x200>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d10d      	bne.n	8002bf4 <HAL_ADC_IRQHandler+0x200>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bdc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f82f 	bl	8002c48 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f06f 0201 	mvn.w	r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c02:	d119      	bne.n	8002c38 <HAL_ADC_IRQHandler+0x244>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0320 	and.w	r3, r3, #32
 8002c0e:	2b20      	cmp	r3, #32
 8002c10:	d112      	bne.n	8002c38 <HAL_ADC_IRQHandler+0x244>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c16:	f043 0202 	orr.w	r2, r3, #2
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f06f 0220 	mvn.w	r2, #32
 8002c26:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f816 	bl	8002c5a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f06f 0220 	mvn.w	r2, #32
 8002c36:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002c38:	bf00      	nop
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40012400 	.word	0x40012400
 8002c44:	0800b1a8 	.word	0x0800b1a8

08002c48 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr

08002c5a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a94      	ldr	r2, [pc, #592]	; (8002ed4 <HAL_ADC_ConfigChannel+0x268>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d004      	beq.n	8002c92 <HAL_ADC_ConfigChannel+0x26>
 8002c88:	f240 7191 	movw	r1, #1937	; 0x791
 8002c8c:	4892      	ldr	r0, [pc, #584]	; (8002ed8 <HAL_ADC_ConfigChannel+0x26c>)
 8002c8e:	f7fe fef3 	bl	8001a78 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 8081 	beq.w	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d07c      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d078      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d074      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d070      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b05      	cmp	r3, #5
 8002cc2:	d06c      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b06      	cmp	r3, #6
 8002cca:	d068      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b07      	cmp	r3, #7
 8002cd2:	d064      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d060      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b09      	cmp	r3, #9
 8002ce2:	d05c      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b0a      	cmp	r3, #10
 8002cea:	d058      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b0b      	cmp	r3, #11
 8002cf2:	d054      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b0c      	cmp	r3, #12
 8002cfa:	d050      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b0d      	cmp	r3, #13
 8002d02:	d04c      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b0e      	cmp	r3, #14
 8002d0a:	d048      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b0f      	cmp	r3, #15
 8002d12:	d044      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b10      	cmp	r3, #16
 8002d1a:	d040      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b11      	cmp	r3, #17
 8002d22:	d03c      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b12      	cmp	r3, #18
 8002d2a:	d038      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b13      	cmp	r3, #19
 8002d32:	d034      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b14      	cmp	r3, #20
 8002d3a:	d030      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b15      	cmp	r3, #21
 8002d42:	d02c      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b16      	cmp	r3, #22
 8002d4a:	d028      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b17      	cmp	r3, #23
 8002d52:	d024      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b18      	cmp	r3, #24
 8002d5a:	d020      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b19      	cmp	r3, #25
 8002d62:	d01c      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b1a      	cmp	r3, #26
 8002d6a:	d018      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b1b      	cmp	r3, #27
 8002d72:	d014      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b1c      	cmp	r3, #28
 8002d7a:	d010      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b1d      	cmp	r3, #29
 8002d82:	d00c      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b1e      	cmp	r3, #30
 8002d8a:	d008      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b1f      	cmp	r3, #31
 8002d92:	d004      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x132>
 8002d94:	f240 7192 	movw	r1, #1938	; 0x792
 8002d98:	484f      	ldr	r0, [pc, #316]	; (8002ed8 <HAL_ADC_ConfigChannel+0x26c>)
 8002d9a:	f7fe fe6d 	bl	8001a78 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d070      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d06c      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d068      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d064      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b05      	cmp	r3, #5
 8002dc4:	d060      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b06      	cmp	r3, #6
 8002dcc:	d05c      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b07      	cmp	r3, #7
 8002dd4:	d058      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d054      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b09      	cmp	r3, #9
 8002de4:	d050      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b0a      	cmp	r3, #10
 8002dec:	d04c      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b0b      	cmp	r3, #11
 8002df4:	d048      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b0c      	cmp	r3, #12
 8002dfc:	d044      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b0d      	cmp	r3, #13
 8002e04:	d040      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b0e      	cmp	r3, #14
 8002e0c:	d03c      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b0f      	cmp	r3, #15
 8002e14:	d038      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b10      	cmp	r3, #16
 8002e1c:	d034      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b11      	cmp	r3, #17
 8002e24:	d030      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b12      	cmp	r3, #18
 8002e2c:	d02c      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b13      	cmp	r3, #19
 8002e34:	d028      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b14      	cmp	r3, #20
 8002e3c:	d024      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b15      	cmp	r3, #21
 8002e44:	d020      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b16      	cmp	r3, #22
 8002e4c:	d01c      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b17      	cmp	r3, #23
 8002e54:	d018      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b18      	cmp	r3, #24
 8002e5c:	d014      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b19      	cmp	r3, #25
 8002e64:	d010      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b1a      	cmp	r3, #26
 8002e6c:	d00c      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b1b      	cmp	r3, #27
 8002e74:	d008      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b1c      	cmp	r3, #28
 8002e7c:	d004      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x21c>
 8002e7e:	f240 7193 	movw	r1, #1939	; 0x793
 8002e82:	4815      	ldr	r0, [pc, #84]	; (8002ed8 <HAL_ADC_ConfigChannel+0x26c>)
 8002e84:	f7fe fdf8 	bl	8001a78 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d025      	beq.n	8002edc <HAL_ADC_ConfigChannel+0x270>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d021      	beq.n	8002edc <HAL_ADC_ConfigChannel+0x270>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d01d      	beq.n	8002edc <HAL_ADC_ConfigChannel+0x270>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b03      	cmp	r3, #3
 8002ea6:	d019      	beq.n	8002edc <HAL_ADC_ConfigChannel+0x270>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d015      	beq.n	8002edc <HAL_ADC_ConfigChannel+0x270>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	d011      	beq.n	8002edc <HAL_ADC_ConfigChannel+0x270>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b06      	cmp	r3, #6
 8002ebe:	d00d      	beq.n	8002edc <HAL_ADC_ConfigChannel+0x270>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b07      	cmp	r3, #7
 8002ec6:	d009      	beq.n	8002edc <HAL_ADC_ConfigChannel+0x270>
 8002ec8:	f240 7194 	movw	r1, #1940	; 0x794
 8002ecc:	4802      	ldr	r0, [pc, #8]	; (8002ed8 <HAL_ADC_ConfigChannel+0x26c>)
 8002ece:	f7fe fdd3 	bl	8001a78 <assert_failed>
 8002ed2:	e003      	b.n	8002edc <HAL_ADC_ConfigChannel+0x270>
 8002ed4:	40012400 	.word	0x40012400
 8002ed8:	0800b1a8 	.word	0x0800b1a8
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x27e>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e14f      	b.n	800318a <HAL_ADC_ConfigChannel+0x51e>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b06      	cmp	r3, #6
 8002ef8:	d81c      	bhi.n	8002f34 <HAL_ADC_ConfigChannel+0x2c8>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	3b05      	subs	r3, #5
 8002f0c:	221f      	movs	r2, #31
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43db      	mvns	r3, r3
 8002f14:	4019      	ands	r1, r3
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	3b05      	subs	r3, #5
 8002f26:	fa00 f203 	lsl.w	r2, r0, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40
 8002f32:	e07e      	b.n	8003032 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b0c      	cmp	r3, #12
 8002f3a:	d81c      	bhi.n	8002f76 <HAL_ADC_ConfigChannel+0x30a>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3b23      	subs	r3, #35	; 0x23
 8002f4e:	221f      	movs	r2, #31
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	4019      	ands	r1, r3
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	3b23      	subs	r3, #35	; 0x23
 8002f68:	fa00 f203 	lsl.w	r2, r0, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f74:	e05d      	b.n	8003032 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b12      	cmp	r3, #18
 8002f7c:	d81c      	bhi.n	8002fb8 <HAL_ADC_ConfigChannel+0x34c>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3b41      	subs	r3, #65	; 0x41
 8002f90:	221f      	movs	r2, #31
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43db      	mvns	r3, r3
 8002f98:	4019      	ands	r1, r3
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3b41      	subs	r3, #65	; 0x41
 8002faa:	fa00 f203 	lsl.w	r2, r0, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	639a      	str	r2, [r3, #56]	; 0x38
 8002fb6:	e03c      	b.n	8003032 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b18      	cmp	r3, #24
 8002fbe:	d81c      	bhi.n	8002ffa <HAL_ADC_ConfigChannel+0x38e>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	3b5f      	subs	r3, #95	; 0x5f
 8002fd2:	221f      	movs	r2, #31
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	4019      	ands	r1, r3
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	6818      	ldr	r0, [r3, #0]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	3b5f      	subs	r3, #95	; 0x5f
 8002fec:	fa00 f203 	lsl.w	r2, r0, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	635a      	str	r2, [r3, #52]	; 0x34
 8002ff8:	e01b      	b.n	8003032 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	3b7d      	subs	r3, #125	; 0x7d
 800300c:	221f      	movs	r2, #31
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	4019      	ands	r1, r3
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	6818      	ldr	r0, [r3, #0]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	3b7d      	subs	r3, #125	; 0x7d
 8003026:	fa00 f203 	lsl.w	r2, r0, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b09      	cmp	r3, #9
 8003038:	d81a      	bhi.n	8003070 <HAL_ADC_ConfigChannel+0x404>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6959      	ldr	r1, [r3, #20]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	4613      	mov	r3, r2
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	4413      	add	r3, r2
 800304a:	2207      	movs	r2, #7
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	4019      	ands	r1, r3
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	6898      	ldr	r0, [r3, #8]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4613      	mov	r3, r2
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4413      	add	r3, r2
 8003062:	fa00 f203 	lsl.w	r2, r0, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	615a      	str	r2, [r3, #20]
 800306e:	e05d      	b.n	800312c <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b13      	cmp	r3, #19
 8003076:	d81c      	bhi.n	80030b2 <HAL_ADC_ConfigChannel+0x446>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6919      	ldr	r1, [r3, #16]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	4613      	mov	r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	4413      	add	r3, r2
 8003088:	3b1e      	subs	r3, #30
 800308a:	2207      	movs	r2, #7
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	4019      	ands	r1, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	6898      	ldr	r0, [r3, #8]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4613      	mov	r3, r2
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	4413      	add	r3, r2
 80030a2:	3b1e      	subs	r3, #30
 80030a4:	fa00 f203 	lsl.w	r2, r0, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	611a      	str	r2, [r3, #16]
 80030b0:	e03c      	b.n	800312c <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b1d      	cmp	r3, #29
 80030b8:	d81c      	bhi.n	80030f4 <HAL_ADC_ConfigChannel+0x488>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68d9      	ldr	r1, [r3, #12]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4613      	mov	r3, r2
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	4413      	add	r3, r2
 80030ca:	3b3c      	subs	r3, #60	; 0x3c
 80030cc:	2207      	movs	r2, #7
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	4019      	ands	r1, r3
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	6898      	ldr	r0, [r3, #8]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	4613      	mov	r3, r2
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4413      	add	r3, r2
 80030e4:	3b3c      	subs	r3, #60	; 0x3c
 80030e6:	fa00 f203 	lsl.w	r2, r0, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	60da      	str	r2, [r3, #12]
 80030f2:	e01b      	b.n	800312c <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	4613      	mov	r3, r2
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	4413      	add	r3, r2
 8003104:	3b5a      	subs	r3, #90	; 0x5a
 8003106:	2207      	movs	r2, #7
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	4019      	ands	r1, r3
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	6898      	ldr	r0, [r3, #8]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4613      	mov	r3, r2
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4413      	add	r3, r2
 800311e:	3b5a      	subs	r3, #90	; 0x5a
 8003120:	fa00 f203 	lsl.w	r2, r0, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b10      	cmp	r3, #16
 8003132:	d003      	beq.n	800313c <HAL_ADC_ConfigChannel+0x4d0>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003138:	2b11      	cmp	r3, #17
 800313a:	d121      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x514>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800313c:	4b15      	ldr	r3, [pc, #84]	; (8003194 <HAL_ADC_ConfigChannel+0x528>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d11b      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x514>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8003148:	4b12      	ldr	r3, [pc, #72]	; (8003194 <HAL_ADC_ConfigChannel+0x528>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	4a11      	ldr	r2, [pc, #68]	; (8003194 <HAL_ADC_ConfigChannel+0x528>)
 800314e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003152:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b10      	cmp	r3, #16
 800315a:	d111      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x514>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800315c:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <HAL_ADC_ConfigChannel+0x52c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a0e      	ldr	r2, [pc, #56]	; (800319c <HAL_ADC_ConfigChannel+0x530>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	0c9a      	lsrs	r2, r3, #18
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8003172:	e002      	b.n	800317a <HAL_ADC_ConfigChannel+0x50e>
          {
            wait_loop_index--;
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	3b01      	subs	r3, #1
 8003178:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1f9      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x508>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8003188:	7bfb      	ldrb	r3, [r7, #15]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40012700 	.word	0x40012700
 8003198:	20000004 	.word	0x20000004
 800319c:	431bde83 	.word	0x431bde83

080031a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr
	...

080031b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c4:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <__NVIC_SetPriorityGrouping+0x44>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031d0:	4013      	ands	r3, r2
 80031d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031e6:	4a04      	ldr	r2, [pc, #16]	; (80031f8 <__NVIC_SetPriorityGrouping+0x44>)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	60d3      	str	r3, [r2, #12]
}
 80031ec:	bf00      	nop
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003200:	4b04      	ldr	r3, [pc, #16]	; (8003214 <__NVIC_GetPriorityGrouping+0x18>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	0a1b      	lsrs	r3, r3, #8
 8003206:	f003 0307 	and.w	r3, r3, #7
}
 800320a:	4618      	mov	r0, r3
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	e000ed00 	.word	0xe000ed00

08003218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	2b00      	cmp	r3, #0
 8003228:	db0b      	blt.n	8003242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	f003 021f 	and.w	r2, r3, #31
 8003230:	4906      	ldr	r1, [pc, #24]	; (800324c <__NVIC_EnableIRQ+0x34>)
 8003232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	2001      	movs	r0, #1
 800323a:	fa00 f202 	lsl.w	r2, r0, r2
 800323e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr
 800324c:	e000e100 	.word	0xe000e100

08003250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	6039      	str	r1, [r7, #0]
 800325a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800325c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003260:	2b00      	cmp	r3, #0
 8003262:	db0a      	blt.n	800327a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	b2da      	uxtb	r2, r3
 8003268:	490c      	ldr	r1, [pc, #48]	; (800329c <__NVIC_SetPriority+0x4c>)
 800326a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326e:	0112      	lsls	r2, r2, #4
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	440b      	add	r3, r1
 8003274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003278:	e00a      	b.n	8003290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	4908      	ldr	r1, [pc, #32]	; (80032a0 <__NVIC_SetPriority+0x50>)
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	3b04      	subs	r3, #4
 8003288:	0112      	lsls	r2, r2, #4
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	440b      	add	r3, r1
 800328e:	761a      	strb	r2, [r3, #24]
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	e000e100 	.word	0xe000e100
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b089      	sub	sp, #36	; 0x24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f1c3 0307 	rsb	r3, r3, #7
 80032be:	2b04      	cmp	r3, #4
 80032c0:	bf28      	it	cs
 80032c2:	2304      	movcs	r3, #4
 80032c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	3304      	adds	r3, #4
 80032ca:	2b06      	cmp	r3, #6
 80032cc:	d902      	bls.n	80032d4 <NVIC_EncodePriority+0x30>
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3b03      	subs	r3, #3
 80032d2:	e000      	b.n	80032d6 <NVIC_EncodePriority+0x32>
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d8:	f04f 32ff 	mov.w	r2, #4294967295
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43da      	mvns	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	401a      	ands	r2, r3
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032ec:	f04f 31ff 	mov.w	r1, #4294967295
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	fa01 f303 	lsl.w	r3, r1, r3
 80032f6:	43d9      	mvns	r1, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032fc:	4313      	orrs	r3, r2
         );
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3724      	adds	r7, #36	; 0x24
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr

08003308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b07      	cmp	r3, #7
 8003314:	d00f      	beq.n	8003336 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b06      	cmp	r3, #6
 800331a:	d00c      	beq.n	8003336 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b05      	cmp	r3, #5
 8003320:	d009      	beq.n	8003336 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b04      	cmp	r3, #4
 8003326:	d006      	beq.n	8003336 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b03      	cmp	r3, #3
 800332c:	d003      	beq.n	8003336 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800332e:	21ac      	movs	r1, #172	; 0xac
 8003330:	4804      	ldr	r0, [pc, #16]	; (8003344 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003332:	f7fe fba1 	bl	8001a78 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff ff3c 	bl	80031b4 <__NVIC_SetPriorityGrouping>
}
 800333c:	bf00      	nop
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	0800b1e0 	.word	0x0800b1e0

08003348 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
 8003354:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b0f      	cmp	r3, #15
 800335e:	d903      	bls.n	8003368 <HAL_NVIC_SetPriority+0x20>
 8003360:	21c4      	movs	r1, #196	; 0xc4
 8003362:	480e      	ldr	r0, [pc, #56]	; (800339c <HAL_NVIC_SetPriority+0x54>)
 8003364:	f7fe fb88 	bl	8001a78 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b0f      	cmp	r3, #15
 800336c:	d903      	bls.n	8003376 <HAL_NVIC_SetPriority+0x2e>
 800336e:	21c5      	movs	r1, #197	; 0xc5
 8003370:	480a      	ldr	r0, [pc, #40]	; (800339c <HAL_NVIC_SetPriority+0x54>)
 8003372:	f7fe fb81 	bl	8001a78 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003376:	f7ff ff41 	bl	80031fc <__NVIC_GetPriorityGrouping>
 800337a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	68b9      	ldr	r1, [r7, #8]
 8003380:	6978      	ldr	r0, [r7, #20]
 8003382:	f7ff ff8f 	bl	80032a4 <NVIC_EncodePriority>
 8003386:	4602      	mov	r2, r0
 8003388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800338c:	4611      	mov	r1, r2
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff ff5e 	bl	8003250 <__NVIC_SetPriority>
}
 8003394:	bf00      	nop
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	0800b1e0 	.word	0x0800b1e0

080033a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80033aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	da03      	bge.n	80033ba <HAL_NVIC_EnableIRQ+0x1a>
 80033b2:	21d8      	movs	r1, #216	; 0xd8
 80033b4:	4805      	ldr	r0, [pc, #20]	; (80033cc <HAL_NVIC_EnableIRQ+0x2c>)
 80033b6:	f7fe fb5f 	bl	8001a78 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff ff2a 	bl	8003218 <__NVIC_EnableIRQ>
}
 80033c4:	bf00      	nop
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	0800b1e0 	.word	0x0800b1e0

080033d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e109      	b.n	80035f6 <HAL_DMA_Init+0x226>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a86      	ldr	r2, [pc, #536]	; (8003600 <HAL_DMA_Init+0x230>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d03a      	beq.n	8003462 <HAL_DMA_Init+0x92>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a84      	ldr	r2, [pc, #528]	; (8003604 <HAL_DMA_Init+0x234>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d035      	beq.n	8003462 <HAL_DMA_Init+0x92>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a83      	ldr	r2, [pc, #524]	; (8003608 <HAL_DMA_Init+0x238>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d030      	beq.n	8003462 <HAL_DMA_Init+0x92>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a81      	ldr	r2, [pc, #516]	; (800360c <HAL_DMA_Init+0x23c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d02b      	beq.n	8003462 <HAL_DMA_Init+0x92>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a80      	ldr	r2, [pc, #512]	; (8003610 <HAL_DMA_Init+0x240>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d026      	beq.n	8003462 <HAL_DMA_Init+0x92>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a7e      	ldr	r2, [pc, #504]	; (8003614 <HAL_DMA_Init+0x244>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d021      	beq.n	8003462 <HAL_DMA_Init+0x92>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a7d      	ldr	r2, [pc, #500]	; (8003618 <HAL_DMA_Init+0x248>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d01c      	beq.n	8003462 <HAL_DMA_Init+0x92>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a7b      	ldr	r2, [pc, #492]	; (800361c <HAL_DMA_Init+0x24c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d017      	beq.n	8003462 <HAL_DMA_Init+0x92>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a7a      	ldr	r2, [pc, #488]	; (8003620 <HAL_DMA_Init+0x250>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d012      	beq.n	8003462 <HAL_DMA_Init+0x92>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a78      	ldr	r2, [pc, #480]	; (8003624 <HAL_DMA_Init+0x254>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00d      	beq.n	8003462 <HAL_DMA_Init+0x92>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a77      	ldr	r2, [pc, #476]	; (8003628 <HAL_DMA_Init+0x258>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d008      	beq.n	8003462 <HAL_DMA_Init+0x92>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a75      	ldr	r2, [pc, #468]	; (800362c <HAL_DMA_Init+0x25c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d003      	beq.n	8003462 <HAL_DMA_Init+0x92>
 800345a:	219a      	movs	r1, #154	; 0x9a
 800345c:	4874      	ldr	r0, [pc, #464]	; (8003630 <HAL_DMA_Init+0x260>)
 800345e:	f7fe fb0b 	bl	8001a78 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00c      	beq.n	8003484 <HAL_DMA_Init+0xb4>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b10      	cmp	r3, #16
 8003470:	d008      	beq.n	8003484 <HAL_DMA_Init+0xb4>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800347a:	d003      	beq.n	8003484 <HAL_DMA_Init+0xb4>
 800347c:	219b      	movs	r1, #155	; 0x9b
 800347e:	486c      	ldr	r0, [pc, #432]	; (8003630 <HAL_DMA_Init+0x260>)
 8003480:	f7fe fafa 	bl	8001a78 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2b40      	cmp	r3, #64	; 0x40
 800348a:	d007      	beq.n	800349c <HAL_DMA_Init+0xcc>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_DMA_Init+0xcc>
 8003494:	219c      	movs	r1, #156	; 0x9c
 8003496:	4866      	ldr	r0, [pc, #408]	; (8003630 <HAL_DMA_Init+0x260>)
 8003498:	f7fe faee 	bl	8001a78 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2b80      	cmp	r3, #128	; 0x80
 80034a2:	d007      	beq.n	80034b4 <HAL_DMA_Init+0xe4>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_DMA_Init+0xe4>
 80034ac:	219d      	movs	r1, #157	; 0x9d
 80034ae:	4860      	ldr	r0, [pc, #384]	; (8003630 <HAL_DMA_Init+0x260>)
 80034b0:	f7fe fae2 	bl	8001a78 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00d      	beq.n	80034d8 <HAL_DMA_Init+0x108>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034c4:	d008      	beq.n	80034d8 <HAL_DMA_Init+0x108>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ce:	d003      	beq.n	80034d8 <HAL_DMA_Init+0x108>
 80034d0:	219e      	movs	r1, #158	; 0x9e
 80034d2:	4857      	ldr	r0, [pc, #348]	; (8003630 <HAL_DMA_Init+0x260>)
 80034d4:	f7fe fad0 	bl	8001a78 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00d      	beq.n	80034fc <HAL_DMA_Init+0x12c>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e8:	d008      	beq.n	80034fc <HAL_DMA_Init+0x12c>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034f2:	d003      	beq.n	80034fc <HAL_DMA_Init+0x12c>
 80034f4:	219f      	movs	r1, #159	; 0x9f
 80034f6:	484e      	ldr	r0, [pc, #312]	; (8003630 <HAL_DMA_Init+0x260>)
 80034f8:	f7fe fabe 	bl	8001a78 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d007      	beq.n	8003514 <HAL_DMA_Init+0x144>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	2b20      	cmp	r3, #32
 800350a:	d003      	beq.n	8003514 <HAL_DMA_Init+0x144>
 800350c:	21a0      	movs	r1, #160	; 0xa0
 800350e:	4848      	ldr	r0, [pc, #288]	; (8003630 <HAL_DMA_Init+0x260>)
 8003510:	f7fe fab2 	bl	8001a78 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d012      	beq.n	8003542 <HAL_DMA_Init+0x172>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003524:	d00d      	beq.n	8003542 <HAL_DMA_Init+0x172>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800352e:	d008      	beq.n	8003542 <HAL_DMA_Init+0x172>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003538:	d003      	beq.n	8003542 <HAL_DMA_Init+0x172>
 800353a:	21a1      	movs	r1, #161	; 0xa1
 800353c:	483c      	ldr	r0, [pc, #240]	; (8003630 <HAL_DMA_Init+0x260>)
 800353e:	f7fe fa9b 	bl	8001a78 <assert_failed>

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	4b3a      	ldr	r3, [pc, #232]	; (8003634 <HAL_DMA_Init+0x264>)
 800354a:	429a      	cmp	r2, r3
 800354c:	d80f      	bhi.n	800356e <HAL_DMA_Init+0x19e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	4b38      	ldr	r3, [pc, #224]	; (8003638 <HAL_DMA_Init+0x268>)
 8003556:	4413      	add	r3, r2
 8003558:	4a38      	ldr	r2, [pc, #224]	; (800363c <HAL_DMA_Init+0x26c>)
 800355a:	fba2 2303 	umull	r2, r3, r2, r3
 800355e:	091b      	lsrs	r3, r3, #4
 8003560:	009a      	lsls	r2, r3, #2
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a35      	ldr	r2, [pc, #212]	; (8003640 <HAL_DMA_Init+0x270>)
 800356a:	63da      	str	r2, [r3, #60]	; 0x3c
 800356c:	e00e      	b.n	800358c <HAL_DMA_Init+0x1bc>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	4b33      	ldr	r3, [pc, #204]	; (8003644 <HAL_DMA_Init+0x274>)
 8003576:	4413      	add	r3, r2
 8003578:	4a30      	ldr	r2, [pc, #192]	; (800363c <HAL_DMA_Init+0x26c>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	091b      	lsrs	r3, r3, #4
 8003580:	009a      	lsls	r2, r3, #2
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a2f      	ldr	r2, [pc, #188]	; (8003648 <HAL_DMA_Init+0x278>)
 800358a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80035a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80035b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40026008 	.word	0x40026008
 8003604:	4002601c 	.word	0x4002601c
 8003608:	40026030 	.word	0x40026030
 800360c:	40026044 	.word	0x40026044
 8003610:	40026058 	.word	0x40026058
 8003614:	4002606c 	.word	0x4002606c
 8003618:	40026080 	.word	0x40026080
 800361c:	40026408 	.word	0x40026408
 8003620:	4002641c 	.word	0x4002641c
 8003624:	40026430 	.word	0x40026430
 8003628:	40026444 	.word	0x40026444
 800362c:	40026458 	.word	0x40026458
 8003630:	0800b21c 	.word	0x0800b21c
 8003634:	40026407 	.word	0x40026407
 8003638:	bffd9ff8 	.word	0xbffd9ff8
 800363c:	cccccccd 	.word	0xcccccccd
 8003640:	40026000 	.word	0x40026000
 8003644:	bffd9bf8 	.word	0xbffd9bf8
 8003648:	40026400 	.word	0x40026400

0800364c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
 8003658:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_DMA_Start_IT+0x20>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800366a:	d304      	bcc.n	8003676 <HAL_DMA_Start_IT+0x2a>
 800366c:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8003670:	482c      	ldr	r0, [pc, #176]	; (8003724 <HAL_DMA_Start_IT+0xd8>)
 8003672:	f7fe fa01 	bl	8001a78 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f893 3020 	ldrb.w	r3, [r3, #32]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d101      	bne.n	8003684 <HAL_DMA_Start_IT+0x38>
 8003680:	2302      	movs	r3, #2
 8003682:	e04b      	b.n	800371c <HAL_DMA_Start_IT+0xd0>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b01      	cmp	r3, #1
 8003696:	d13a      	bne.n	800370e <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0201 	bic.w	r2, r2, #1
 80036b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 f8e2 	bl	8003886 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d008      	beq.n	80036dc <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 020e 	orr.w	r2, r2, #14
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	e00f      	b.n	80036fc <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0204 	bic.w	r2, r2, #4
 80036ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 020a 	orr.w	r2, r2, #10
 80036fa:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0201 	orr.w	r2, r2, #1
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	e005      	b.n	800371a <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003716:	2302      	movs	r3, #2
 8003718:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800371a:	7dfb      	ldrb	r3, [r7, #23]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	0800b21c 	.word	0x0800b21c

08003728 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	f003 031c 	and.w	r3, r3, #28
 8003748:	2204      	movs	r2, #4
 800374a:	409a      	lsls	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4013      	ands	r3, r2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d026      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x7a>
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f003 0304 	and.w	r3, r3, #4
 800375a:	2b00      	cmp	r3, #0
 800375c:	d021      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0320 	and.w	r3, r3, #32
 8003768:	2b00      	cmp	r3, #0
 800376a:	d107      	bne.n	800377c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0204 	bic.w	r2, r2, #4
 800377a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	f003 021c 	and.w	r2, r3, #28
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003788:	2104      	movs	r1, #4
 800378a:	fa01 f202 	lsl.w	r2, r1, r2
 800378e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	2b00      	cmp	r3, #0
 8003796:	d071      	beq.n	800387c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80037a0:	e06c      	b.n	800387c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f003 031c 	and.w	r3, r3, #28
 80037aa:	2202      	movs	r2, #2
 80037ac:	409a      	lsls	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d02e      	beq.n	8003814 <HAL_DMA_IRQHandler+0xec>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d029      	beq.n	8003814 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10b      	bne.n	80037e6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 020a 	bic.w	r2, r2, #10
 80037dc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	f003 021c 	and.w	r2, r3, #28
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f2:	2102      	movs	r1, #2
 80037f4:	fa01 f202 	lsl.w	r2, r1, r2
 80037f8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003806:	2b00      	cmp	r3, #0
 8003808:	d038      	beq.n	800387c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003812:	e033      	b.n	800387c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	f003 031c 	and.w	r3, r3, #28
 800381c:	2208      	movs	r2, #8
 800381e:	409a      	lsls	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4013      	ands	r3, r2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d02a      	beq.n	800387e <HAL_DMA_IRQHandler+0x156>
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d025      	beq.n	800387e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 020e 	bic.w	r2, r2, #14
 8003840:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f003 021c 	and.w	r2, r3, #28
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384e:	2101      	movs	r1, #1
 8003850:	fa01 f202 	lsl.w	r2, r1, r2
 8003854:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	2b00      	cmp	r3, #0
 8003872:	d004      	beq.n	800387e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800387c:	bf00      	nop
 800387e:	bf00      	nop
}
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003886:	b480      	push	{r7}
 8003888:	b085      	sub	sp, #20
 800388a:	af00      	add	r7, sp, #0
 800388c:	60f8      	str	r0, [r7, #12]
 800388e:	60b9      	str	r1, [r7, #8]
 8003890:	607a      	str	r2, [r7, #4]
 8003892:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	f003 021c 	and.w	r2, r3, #28
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a0:	2101      	movs	r1, #1
 80038a2:	fa01 f202 	lsl.w	r2, r1, r2
 80038a6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b10      	cmp	r3, #16
 80038b6:	d108      	bne.n	80038ca <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038c8:	e007      	b.n	80038da <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	60da      	str	r2, [r3, #12]
}
 80038da:	bf00      	nop
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr

080038e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80038f2:	2300      	movs	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80038f6:	2300      	movs	r3, #0
 80038f8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a3f      	ldr	r2, [pc, #252]	; (80039fc <HAL_GPIO_Init+0x118>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d01f      	beq.n	8003942 <HAL_GPIO_Init+0x5e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a3e      	ldr	r2, [pc, #248]	; (8003a00 <HAL_GPIO_Init+0x11c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d01b      	beq.n	8003942 <HAL_GPIO_Init+0x5e>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a3d      	ldr	r2, [pc, #244]	; (8003a04 <HAL_GPIO_Init+0x120>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d017      	beq.n	8003942 <HAL_GPIO_Init+0x5e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a3c      	ldr	r2, [pc, #240]	; (8003a08 <HAL_GPIO_Init+0x124>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d013      	beq.n	8003942 <HAL_GPIO_Init+0x5e>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a3b      	ldr	r2, [pc, #236]	; (8003a0c <HAL_GPIO_Init+0x128>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00f      	beq.n	8003942 <HAL_GPIO_Init+0x5e>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a3a      	ldr	r2, [pc, #232]	; (8003a10 <HAL_GPIO_Init+0x12c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00b      	beq.n	8003942 <HAL_GPIO_Init+0x5e>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a39      	ldr	r2, [pc, #228]	; (8003a14 <HAL_GPIO_Init+0x130>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d007      	beq.n	8003942 <HAL_GPIO_Init+0x5e>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a38      	ldr	r2, [pc, #224]	; (8003a18 <HAL_GPIO_Init+0x134>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d003      	beq.n	8003942 <HAL_GPIO_Init+0x5e>
 800393a:	21b9      	movs	r1, #185	; 0xb9
 800393c:	4837      	ldr	r0, [pc, #220]	; (8003a1c <HAL_GPIO_Init+0x138>)
 800393e:	f7fe f89b 	bl	8001a78 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	b29b      	uxth	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <HAL_GPIO_Init+0x74>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	0c1b      	lsrs	r3, r3, #16
 8003952:	041b      	lsls	r3, r3, #16
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_GPIO_Init+0x7c>
 8003958:	21ba      	movs	r1, #186	; 0xba
 800395a:	4830      	ldr	r0, [pc, #192]	; (8003a1c <HAL_GPIO_Init+0x138>)
 800395c:	f7fe f88c 	bl	8001a78 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d035      	beq.n	80039d4 <HAL_GPIO_Init+0xf0>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d031      	beq.n	80039d4 <HAL_GPIO_Init+0xf0>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b11      	cmp	r3, #17
 8003976:	d02d      	beq.n	80039d4 <HAL_GPIO_Init+0xf0>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b02      	cmp	r3, #2
 800397e:	d029      	beq.n	80039d4 <HAL_GPIO_Init+0xf0>
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b12      	cmp	r3, #18
 8003986:	d025      	beq.n	80039d4 <HAL_GPIO_Init+0xf0>
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	4a24      	ldr	r2, [pc, #144]	; (8003a20 <HAL_GPIO_Init+0x13c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d020      	beq.n	80039d4 <HAL_GPIO_Init+0xf0>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	4a23      	ldr	r2, [pc, #140]	; (8003a24 <HAL_GPIO_Init+0x140>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d01b      	beq.n	80039d4 <HAL_GPIO_Init+0xf0>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	4a21      	ldr	r2, [pc, #132]	; (8003a28 <HAL_GPIO_Init+0x144>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d016      	beq.n	80039d4 <HAL_GPIO_Init+0xf0>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	4a20      	ldr	r2, [pc, #128]	; (8003a2c <HAL_GPIO_Init+0x148>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d011      	beq.n	80039d4 <HAL_GPIO_Init+0xf0>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	4a1e      	ldr	r2, [pc, #120]	; (8003a30 <HAL_GPIO_Init+0x14c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00c      	beq.n	80039d4 <HAL_GPIO_Init+0xf0>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4a1d      	ldr	r2, [pc, #116]	; (8003a34 <HAL_GPIO_Init+0x150>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d007      	beq.n	80039d4 <HAL_GPIO_Init+0xf0>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d003      	beq.n	80039d4 <HAL_GPIO_Init+0xf0>
 80039cc:	21bb      	movs	r1, #187	; 0xbb
 80039ce:	4813      	ldr	r0, [pc, #76]	; (8003a1c <HAL_GPIO_Init+0x138>)
 80039d0:	f7fe f852 	bl	8001a78 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 81e4 	beq.w	8003da6 <HAL_GPIO_Init+0x4c2>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	f000 81df 	beq.w	8003da6 <HAL_GPIO_Init+0x4c2>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	f000 81da 	beq.w	8003da6 <HAL_GPIO_Init+0x4c2>
 80039f2:	21bc      	movs	r1, #188	; 0xbc
 80039f4:	4809      	ldr	r0, [pc, #36]	; (8003a1c <HAL_GPIO_Init+0x138>)
 80039f6:	f7fe f83f 	bl	8001a78 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80039fa:	e1d4      	b.n	8003da6 <HAL_GPIO_Init+0x4c2>
 80039fc:	40020000 	.word	0x40020000
 8003a00:	40020400 	.word	0x40020400
 8003a04:	40020800 	.word	0x40020800
 8003a08:	40020c00 	.word	0x40020c00
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	40021800 	.word	0x40021800
 8003a14:	40021c00 	.word	0x40021c00
 8003a18:	40021400 	.word	0x40021400
 8003a1c:	0800b254 	.word	0x0800b254
 8003a20:	10110000 	.word	0x10110000
 8003a24:	10210000 	.word	0x10210000
 8003a28:	10310000 	.word	0x10310000
 8003a2c:	10120000 	.word	0x10120000
 8003a30:	10220000 	.word	0x10220000
 8003a34:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	fa01 f303 	lsl.w	r3, r1, r3
 8003a44:	4013      	ands	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 81a8 	beq.w	8003da0 <HAL_GPIO_Init+0x4bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d003      	beq.n	8003a60 <HAL_GPIO_Init+0x17c>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b12      	cmp	r3, #18
 8003a5e:	d14f      	bne.n	8003b00 <HAL_GPIO_Init+0x21c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a92      	ldr	r2, [pc, #584]	; (8003cac <HAL_GPIO_Init+0x3c8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d01f      	beq.n	8003aa8 <HAL_GPIO_Init+0x1c4>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a91      	ldr	r2, [pc, #580]	; (8003cb0 <HAL_GPIO_Init+0x3cc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d01b      	beq.n	8003aa8 <HAL_GPIO_Init+0x1c4>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a90      	ldr	r2, [pc, #576]	; (8003cb4 <HAL_GPIO_Init+0x3d0>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d017      	beq.n	8003aa8 <HAL_GPIO_Init+0x1c4>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a8f      	ldr	r2, [pc, #572]	; (8003cb8 <HAL_GPIO_Init+0x3d4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d013      	beq.n	8003aa8 <HAL_GPIO_Init+0x1c4>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a8e      	ldr	r2, [pc, #568]	; (8003cbc <HAL_GPIO_Init+0x3d8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00f      	beq.n	8003aa8 <HAL_GPIO_Init+0x1c4>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a8d      	ldr	r2, [pc, #564]	; (8003cc0 <HAL_GPIO_Init+0x3dc>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00b      	beq.n	8003aa8 <HAL_GPIO_Init+0x1c4>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a8c      	ldr	r2, [pc, #560]	; (8003cc4 <HAL_GPIO_Init+0x3e0>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d007      	beq.n	8003aa8 <HAL_GPIO_Init+0x1c4>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a8b      	ldr	r2, [pc, #556]	; (8003cc8 <HAL_GPIO_Init+0x3e4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d003      	beq.n	8003aa8 <HAL_GPIO_Init+0x1c4>
 8003aa0:	21cb      	movs	r1, #203	; 0xcb
 8003aa2:	488a      	ldr	r0, [pc, #552]	; (8003ccc <HAL_GPIO_Init+0x3e8>)
 8003aa4:	f7fd ffe8 	bl	8001a78 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	2b0f      	cmp	r3, #15
 8003aae:	d903      	bls.n	8003ab8 <HAL_GPIO_Init+0x1d4>
 8003ab0:	21cc      	movs	r1, #204	; 0xcc
 8003ab2:	4886      	ldr	r0, [pc, #536]	; (8003ccc <HAL_GPIO_Init+0x3e8>)
 8003ab4:	f7fd ffe0 	bl	8001a78 <assert_failed>
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	08da      	lsrs	r2, r3, #3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3208      	adds	r2, #8
 8003ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ac4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	220f      	movs	r2, #15
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	08da      	lsrs	r2, r3, #3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3208      	adds	r2, #8
 8003afa:	6939      	ldr	r1, [r7, #16]
 8003afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	2203      	movs	r2, #3
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	43db      	mvns	r3, r3
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4013      	ands	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 0203 	and.w	r2, r3, #3
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d00b      	beq.n	8003b54 <HAL_GPIO_Init+0x270>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d007      	beq.n	8003b54 <HAL_GPIO_Init+0x270>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b48:	2b11      	cmp	r3, #17
 8003b4a:	d003      	beq.n	8003b54 <HAL_GPIO_Init+0x270>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b12      	cmp	r3, #18
 8003b52:	d144      	bne.n	8003bde <HAL_GPIO_Init+0x2fa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00f      	beq.n	8003b7c <HAL_GPIO_Init+0x298>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d00b      	beq.n	8003b7c <HAL_GPIO_Init+0x298>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d007      	beq.n	8003b7c <HAL_GPIO_Init+0x298>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d003      	beq.n	8003b7c <HAL_GPIO_Init+0x298>
 8003b74:	21e1      	movs	r1, #225	; 0xe1
 8003b76:	4855      	ldr	r0, [pc, #340]	; (8003ccc <HAL_GPIO_Init+0x3e8>)
 8003b78:	f7fd ff7e 	bl	8001a78 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	2203      	movs	r2, #3
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4013      	ands	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	091b      	lsrs	r3, r3, #4
 8003bc8:	f003 0201 	and.w	r2, r3, #1
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	2203      	movs	r2, #3
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 80c2 	beq.w	8003da0 <HAL_GPIO_Init+0x4bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c1c:	4b2c      	ldr	r3, [pc, #176]	; (8003cd0 <HAL_GPIO_Init+0x3ec>)
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	4a2b      	ldr	r2, [pc, #172]	; (8003cd0 <HAL_GPIO_Init+0x3ec>)
 8003c22:	f043 0301 	orr.w	r3, r3, #1
 8003c26:	6213      	str	r3, [r2, #32]
 8003c28:	4b29      	ldr	r3, [pc, #164]	; (8003cd0 <HAL_GPIO_Init+0x3ec>)
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8003c34:	4a27      	ldr	r2, [pc, #156]	; (8003cd4 <HAL_GPIO_Init+0x3f0>)
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	089b      	lsrs	r3, r3, #2
 8003c3a:	3302      	adds	r3, #2
 8003c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f003 0303 	and.w	r3, r3, #3
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	220f      	movs	r2, #15
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	43db      	mvns	r3, r3
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4013      	ands	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a14      	ldr	r2, [pc, #80]	; (8003cac <HAL_GPIO_Init+0x3c8>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d03b      	beq.n	8003cd8 <HAL_GPIO_Init+0x3f4>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a13      	ldr	r2, [pc, #76]	; (8003cb0 <HAL_GPIO_Init+0x3cc>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d01f      	beq.n	8003ca8 <HAL_GPIO_Init+0x3c4>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a12      	ldr	r2, [pc, #72]	; (8003cb4 <HAL_GPIO_Init+0x3d0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d019      	beq.n	8003ca4 <HAL_GPIO_Init+0x3c0>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a11      	ldr	r2, [pc, #68]	; (8003cb8 <HAL_GPIO_Init+0x3d4>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d013      	beq.n	8003ca0 <HAL_GPIO_Init+0x3bc>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a10      	ldr	r2, [pc, #64]	; (8003cbc <HAL_GPIO_Init+0x3d8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d00d      	beq.n	8003c9c <HAL_GPIO_Init+0x3b8>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a11      	ldr	r2, [pc, #68]	; (8003cc8 <HAL_GPIO_Init+0x3e4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d007      	beq.n	8003c98 <HAL_GPIO_Init+0x3b4>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a0d      	ldr	r2, [pc, #52]	; (8003cc0 <HAL_GPIO_Init+0x3dc>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d101      	bne.n	8003c94 <HAL_GPIO_Init+0x3b0>
 8003c90:	2306      	movs	r3, #6
 8003c92:	e022      	b.n	8003cda <HAL_GPIO_Init+0x3f6>
 8003c94:	2307      	movs	r3, #7
 8003c96:	e020      	b.n	8003cda <HAL_GPIO_Init+0x3f6>
 8003c98:	2305      	movs	r3, #5
 8003c9a:	e01e      	b.n	8003cda <HAL_GPIO_Init+0x3f6>
 8003c9c:	2304      	movs	r3, #4
 8003c9e:	e01c      	b.n	8003cda <HAL_GPIO_Init+0x3f6>
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e01a      	b.n	8003cda <HAL_GPIO_Init+0x3f6>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e018      	b.n	8003cda <HAL_GPIO_Init+0x3f6>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e016      	b.n	8003cda <HAL_GPIO_Init+0x3f6>
 8003cac:	40020000 	.word	0x40020000
 8003cb0:	40020400 	.word	0x40020400
 8003cb4:	40020800 	.word	0x40020800
 8003cb8:	40020c00 	.word	0x40020c00
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	40021800 	.word	0x40021800
 8003cc4:	40021c00 	.word	0x40021c00
 8003cc8:	40021400 	.word	0x40021400
 8003ccc:	0800b254 	.word	0x0800b254
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	40010000 	.word	0x40010000
 8003cd8:	2300      	movs	r3, #0
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	f002 0203 	and.w	r2, r2, #3
 8003ce0:	0092      	lsls	r2, r2, #2
 8003ce2:	4093      	lsls	r3, r2
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003cea:	4935      	ldr	r1, [pc, #212]	; (8003dc0 <HAL_GPIO_Init+0x4dc>)
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	089b      	lsrs	r3, r3, #2
 8003cf0:	3302      	adds	r3, #2
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cf8:	4b32      	ldr	r3, [pc, #200]	; (8003dc4 <HAL_GPIO_Init+0x4e0>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	43db      	mvns	r3, r3
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4013      	ands	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_GPIO_Init+0x438>
        {
          SET_BIT(temp, iocurrent); 
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003d1c:	4a29      	ldr	r2, [pc, #164]	; (8003dc4 <HAL_GPIO_Init+0x4e0>)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d22:	4b28      	ldr	r3, [pc, #160]	; (8003dc4 <HAL_GPIO_Init+0x4e0>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_GPIO_Init+0x462>
        {
          SET_BIT(temp, iocurrent); 
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003d46:	4a1f      	ldr	r2, [pc, #124]	; (8003dc4 <HAL_GPIO_Init+0x4e0>)
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d4c:	4b1d      	ldr	r3, [pc, #116]	; (8003dc4 <HAL_GPIO_Init+0x4e0>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	43db      	mvns	r3, r3
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <HAL_GPIO_Init+0x48c>
        {
          SET_BIT(temp, iocurrent); 
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003d70:	4a14      	ldr	r2, [pc, #80]	; (8003dc4 <HAL_GPIO_Init+0x4e0>)
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d76:	4b13      	ldr	r3, [pc, #76]	; (8003dc4 <HAL_GPIO_Init+0x4e0>)
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4013      	ands	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <HAL_GPIO_Init+0x4b6>
        {
          SET_BIT(temp, iocurrent); 
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003d9a:	4a0a      	ldr	r2, [pc, #40]	; (8003dc4 <HAL_GPIO_Init+0x4e0>)
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	3301      	adds	r3, #1
 8003da4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f47f ae41 	bne.w	8003a38 <HAL_GPIO_Init+0x154>
  } 
}
 8003db6:	bf00      	nop
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40010000 	.word	0x40010000
 8003dc4:	40010400 	.word	0x40010400

08003dc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003dd4:	887b      	ldrh	r3, [r7, #2]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d004      	beq.n	8003de4 <HAL_GPIO_ReadPin+0x1c>
 8003dda:	887b      	ldrh	r3, [r7, #2]
 8003ddc:	0c1b      	lsrs	r3, r3, #16
 8003dde:	041b      	lsls	r3, r3, #16
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d004      	beq.n	8003dee <HAL_GPIO_ReadPin+0x26>
 8003de4:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8003de8:	4809      	ldr	r0, [pc, #36]	; (8003e10 <HAL_GPIO_ReadPin+0x48>)
 8003dea:	f7fd fe45 	bl	8001a78 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	887b      	ldrh	r3, [r7, #2]
 8003df4:	4013      	ands	r3, r2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	73fb      	strb	r3, [r7, #15]
 8003dfe:	e001      	b.n	8003e04 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e00:	2300      	movs	r3, #0
 8003e02:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	0800b254 	.word	0x0800b254

08003e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	807b      	strh	r3, [r7, #2]
 8003e20:	4613      	mov	r3, r2
 8003e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003e24:	887b      	ldrh	r3, [r7, #2]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d004      	beq.n	8003e34 <HAL_GPIO_WritePin+0x20>
 8003e2a:	887b      	ldrh	r3, [r7, #2]
 8003e2c:	0c1b      	lsrs	r3, r3, #16
 8003e2e:	041b      	lsls	r3, r3, #16
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d004      	beq.n	8003e3e <HAL_GPIO_WritePin+0x2a>
 8003e34:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8003e38:	480e      	ldr	r0, [pc, #56]	; (8003e74 <HAL_GPIO_WritePin+0x60>)
 8003e3a:	f7fd fe1d 	bl	8001a78 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003e3e:	787b      	ldrb	r3, [r7, #1]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d007      	beq.n	8003e54 <HAL_GPIO_WritePin+0x40>
 8003e44:	787b      	ldrb	r3, [r7, #1]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d004      	beq.n	8003e54 <HAL_GPIO_WritePin+0x40>
 8003e4a:	f240 11a5 	movw	r1, #421	; 0x1a5
 8003e4e:	4809      	ldr	r0, [pc, #36]	; (8003e74 <HAL_GPIO_WritePin+0x60>)
 8003e50:	f7fd fe12 	bl	8001a78 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003e54:	787b      	ldrb	r3, [r7, #1]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e5a:	887a      	ldrh	r2, [r7, #2]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8003e60:	e003      	b.n	8003e6a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8003e62:	887b      	ldrh	r3, [r7, #2]
 8003e64:	041a      	lsls	r2, r3, #16
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	619a      	str	r2, [r3, #24]
}
 8003e6a:	bf00      	nop
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	0800b254 	.word	0x0800b254

08003e78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	4603      	mov	r3, r0
 8003e80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8003e82:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e84:	695a      	ldr	r2, [r3, #20]
 8003e86:	88fb      	ldrh	r3, [r7, #6]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d006      	beq.n	8003e9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e8e:	4a05      	ldr	r2, [pc, #20]	; (8003ea4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e90:	88fb      	ldrh	r3, [r7, #6]
 8003e92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e94:	88fb      	ldrh	r3, [r7, #6]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fd f946 	bl	8001128 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e9c:	bf00      	nop
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40010400 	.word	0x40010400

08003ea8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e19b      	b.n	80041f2 <HAL_I2C_Init+0x34a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a98      	ldr	r2, [pc, #608]	; (8004120 <HAL_I2C_Init+0x278>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d009      	beq.n	8003ed8 <HAL_I2C_Init+0x30>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a96      	ldr	r2, [pc, #600]	; (8004124 <HAL_I2C_Init+0x27c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d004      	beq.n	8003ed8 <HAL_I2C_Init+0x30>
 8003ece:	f240 11bb 	movw	r1, #443	; 0x1bb
 8003ed2:	4895      	ldr	r0, [pc, #596]	; (8004128 <HAL_I2C_Init+0x280>)
 8003ed4:	f7fd fdd0 	bl	8001a78 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d004      	beq.n	8003eea <HAL_I2C_Init+0x42>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	4a91      	ldr	r2, [pc, #580]	; (800412c <HAL_I2C_Init+0x284>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d904      	bls.n	8003ef4 <HAL_I2C_Init+0x4c>
 8003eea:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8003eee:	488e      	ldr	r0, [pc, #568]	; (8004128 <HAL_I2C_Init+0x280>)
 8003ef0:	f7fd fdc2 	bl	8001a78 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d009      	beq.n	8003f10 <HAL_I2C_Init+0x68>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f04:	d004      	beq.n	8003f10 <HAL_I2C_Init+0x68>
 8003f06:	f240 11bd 	movw	r1, #445	; 0x1bd
 8003f0a:	4887      	ldr	r0, [pc, #540]	; (8004128 <HAL_I2C_Init+0x280>)
 8003f0c:	f7fd fdb4 	bl	8001a78 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f18:	f023 0303 	bic.w	r3, r3, #3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d004      	beq.n	8003f2a <HAL_I2C_Init+0x82>
 8003f20:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8003f24:	4880      	ldr	r0, [pc, #512]	; (8004128 <HAL_I2C_Init+0x280>)
 8003f26:	f7fd fda7 	bl	8001a78 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f32:	d009      	beq.n	8003f48 <HAL_I2C_Init+0xa0>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f3c:	d004      	beq.n	8003f48 <HAL_I2C_Init+0xa0>
 8003f3e:	f240 11bf 	movw	r1, #447	; 0x1bf
 8003f42:	4879      	ldr	r0, [pc, #484]	; (8004128 <HAL_I2C_Init+0x280>)
 8003f44:	f7fd fd98 	bl	8001a78 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_I2C_Init+0xba>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d004      	beq.n	8003f62 <HAL_I2C_Init+0xba>
 8003f58:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8003f5c:	4872      	ldr	r0, [pc, #456]	; (8004128 <HAL_I2C_Init+0x280>)
 8003f5e:	f7fd fd8b 	bl	8001a78 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d004      	beq.n	8003f78 <HAL_I2C_Init+0xd0>
 8003f6e:	f240 11c1 	movw	r1, #449	; 0x1c1
 8003f72:	486d      	ldr	r0, [pc, #436]	; (8004128 <HAL_I2C_Init+0x280>)
 8003f74:	f7fd fd80 	bl	8001a78 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <HAL_I2C_Init+0xea>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	2b40      	cmp	r3, #64	; 0x40
 8003f86:	d004      	beq.n	8003f92 <HAL_I2C_Init+0xea>
 8003f88:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8003f8c:	4866      	ldr	r0, [pc, #408]	; (8004128 <HAL_I2C_Init+0x280>)
 8003f8e:	f7fd fd73 	bl	8001a78 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d008      	beq.n	8003fac <HAL_I2C_Init+0x104>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	2b80      	cmp	r3, #128	; 0x80
 8003fa0:	d004      	beq.n	8003fac <HAL_I2C_Init+0x104>
 8003fa2:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003fa6:	4860      	ldr	r0, [pc, #384]	; (8004128 <HAL_I2C_Init+0x280>)
 8003fa8:	f7fd fd66 	bl	8001a78 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d106      	bne.n	8003fc6 <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7fd fc79 	bl	80018b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2224      	movs	r2, #36	; 0x24
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0201 	bic.w	r2, r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fde:	f001 fdfd 	bl	8005bdc <HAL_RCC_GetPCLK1Freq>
 8003fe2:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	4a51      	ldr	r2, [pc, #324]	; (8004130 <HAL_I2C_Init+0x288>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d807      	bhi.n	8003ffe <HAL_I2C_Init+0x156>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4a50      	ldr	r2, [pc, #320]	; (8004134 <HAL_I2C_Init+0x28c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	bf94      	ite	ls
 8003ff6:	2301      	movls	r3, #1
 8003ff8:	2300      	movhi	r3, #0
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	e006      	b.n	800400c <HAL_I2C_Init+0x164>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4a4d      	ldr	r2, [pc, #308]	; (8004138 <HAL_I2C_Init+0x290>)
 8004002:	4293      	cmp	r3, r2
 8004004:	bf94      	ite	ls
 8004006:	2301      	movls	r3, #1
 8004008:	2300      	movhi	r3, #0
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <HAL_I2C_Init+0x16c>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0ee      	b.n	80041f2 <HAL_I2C_Init+0x34a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4a49      	ldr	r2, [pc, #292]	; (800413c <HAL_I2C_Init+0x294>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	0c9b      	lsrs	r3, r3, #18
 800401e:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	430a      	orrs	r2, r1
 8004032:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	4a3b      	ldr	r2, [pc, #236]	; (8004130 <HAL_I2C_Init+0x288>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d802      	bhi.n	800404e <HAL_I2C_Init+0x1a6>
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	3301      	adds	r3, #1
 800404c:	e009      	b.n	8004062 <HAL_I2C_Init+0x1ba>
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004054:	fb02 f303 	mul.w	r3, r2, r3
 8004058:	4a39      	ldr	r2, [pc, #228]	; (8004140 <HAL_I2C_Init+0x298>)
 800405a:	fba2 2303 	umull	r2, r3, r2, r3
 800405e:	099b      	lsrs	r3, r3, #6
 8004060:	3301      	adds	r3, #1
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6812      	ldr	r2, [r2, #0]
 8004066:	430b      	orrs	r3, r1
 8004068:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004074:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	492c      	ldr	r1, [pc, #176]	; (8004130 <HAL_I2C_Init+0x288>)
 800407e:	428b      	cmp	r3, r1
 8004080:	d80d      	bhi.n	800409e <HAL_I2C_Init+0x1f6>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	1e59      	subs	r1, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004090:	3301      	adds	r3, #1
 8004092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004096:	2b04      	cmp	r3, #4
 8004098:	bf38      	it	cc
 800409a:	2304      	movcc	r3, #4
 800409c:	e062      	b.n	8004164 <HAL_I2C_Init+0x2bc>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d111      	bne.n	80040ca <HAL_I2C_Init+0x222>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	1e58      	subs	r0, r3, #1
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6859      	ldr	r1, [r3, #4]
 80040ae:	460b      	mov	r3, r1
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	440b      	add	r3, r1
 80040b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80040b8:	3301      	adds	r3, #1
 80040ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040be:	2b00      	cmp	r3, #0
 80040c0:	bf0c      	ite	eq
 80040c2:	2301      	moveq	r3, #1
 80040c4:	2300      	movne	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	e012      	b.n	80040f0 <HAL_I2C_Init+0x248>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	1e58      	subs	r0, r3, #1
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6859      	ldr	r1, [r3, #4]
 80040d2:	460b      	mov	r3, r1
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	440b      	add	r3, r1
 80040d8:	0099      	lsls	r1, r3, #2
 80040da:	440b      	add	r3, r1
 80040dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80040e0:	3301      	adds	r3, #1
 80040e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	bf0c      	ite	eq
 80040ea:	2301      	moveq	r3, #1
 80040ec:	2300      	movne	r3, #0
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <HAL_I2C_Init+0x250>
 80040f4:	2301      	movs	r3, #1
 80040f6:	e035      	b.n	8004164 <HAL_I2C_Init+0x2bc>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d121      	bne.n	8004144 <HAL_I2C_Init+0x29c>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	1e58      	subs	r0, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6859      	ldr	r1, [r3, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	440b      	add	r3, r1
 800410e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004112:	3301      	adds	r3, #1
 8004114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800411c:	e022      	b.n	8004164 <HAL_I2C_Init+0x2bc>
 800411e:	bf00      	nop
 8004120:	40005400 	.word	0x40005400
 8004124:	40005800 	.word	0x40005800
 8004128:	0800b290 	.word	0x0800b290
 800412c:	00061a80 	.word	0x00061a80
 8004130:	000186a0 	.word	0x000186a0
 8004134:	001e847f 	.word	0x001e847f
 8004138:	003d08ff 	.word	0x003d08ff
 800413c:	431bde83 	.word	0x431bde83
 8004140:	10624dd3 	.word	0x10624dd3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	1e58      	subs	r0, r3, #1
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6859      	ldr	r1, [r3, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	0099      	lsls	r1, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	fbb0 f3f3 	udiv	r3, r0, r3
 800415a:	3301      	adds	r3, #1
 800415c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004160:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	6809      	ldr	r1, [r1, #0]
 8004168:	4313      	orrs	r3, r2
 800416a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69da      	ldr	r2, [r3, #28]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004192:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6911      	ldr	r1, [r2, #16]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	68d2      	ldr	r2, [r2, #12]
 800419e:	4311      	orrs	r1, r2
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	430b      	orrs	r3, r1
 80041a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695a      	ldr	r2, [r3, #20]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0201 	orr.w	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop

080041fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af02      	add	r7, sp, #8
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	607a      	str	r2, [r7, #4]
 8004206:	461a      	mov	r2, r3
 8004208:	460b      	mov	r3, r1
 800420a:	817b      	strh	r3, [r7, #10]
 800420c:	4613      	mov	r3, r2
 800420e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004210:	f7fe f942 	bl	8002498 <HAL_GetTick>
 8004214:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b20      	cmp	r3, #32
 8004220:	f040 80e0 	bne.w	80043e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	2319      	movs	r3, #25
 800422a:	2201      	movs	r2, #1
 800422c:	4970      	ldr	r1, [pc, #448]	; (80043f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 fc5a 	bl	8004ae8 <I2C_WaitOnFlagUntilTimeout>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800423a:	2302      	movs	r3, #2
 800423c:	e0d3      	b.n	80043e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_I2C_Master_Transmit+0x50>
 8004248:	2302      	movs	r3, #2
 800424a:	e0cc      	b.n	80043e6 <HAL_I2C_Master_Transmit+0x1ea>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b01      	cmp	r3, #1
 8004260:	d007      	beq.n	8004272 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0201 	orr.w	r2, r2, #1
 8004270:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004280:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2221      	movs	r2, #33	; 0x21
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2210      	movs	r2, #16
 800428e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	893a      	ldrh	r2, [r7, #8]
 80042a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4a50      	ldr	r2, [pc, #320]	; (80043f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80042b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80042b4:	8979      	ldrh	r1, [r7, #10]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	6a3a      	ldr	r2, [r7, #32]
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 face 	bl	800485c <I2C_MasterRequestWrite>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e08d      	b.n	80043e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ca:	2300      	movs	r3, #0
 80042cc:	613b      	str	r3, [r7, #16]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	613b      	str	r3, [r7, #16]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80042e0:	e066      	b.n	80043b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	6a39      	ldr	r1, [r7, #32]
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 fcd4 	bl	8004c94 <I2C_WaitOnTXEFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00d      	beq.n	800430e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d107      	bne.n	800430a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004308:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e06b      	b.n	80043e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	781a      	ldrb	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004328:	b29b      	uxth	r3, r3
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004336:	3b01      	subs	r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b04      	cmp	r3, #4
 800434a:	d11b      	bne.n	8004384 <HAL_I2C_Master_Transmit+0x188>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004350:	2b00      	cmp	r3, #0
 8004352:	d017      	beq.n	8004384 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	781a      	ldrb	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436e:	b29b      	uxth	r3, r3
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	6a39      	ldr	r1, [r7, #32]
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 fcc4 	bl	8004d16 <I2C_WaitOnBTFFlagUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00d      	beq.n	80043b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	2b04      	cmp	r3, #4
 800439a:	d107      	bne.n	80043ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e01a      	b.n	80043e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d194      	bne.n	80042e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	e000      	b.n	80043e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80043e4:	2302      	movs	r3, #2
  }
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	00100002 	.word	0x00100002
 80043f4:	ffff0000 	.word	0xffff0000

080043f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b08c      	sub	sp, #48	; 0x30
 80043fc:	af02      	add	r7, sp, #8
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	4608      	mov	r0, r1
 8004402:	4611      	mov	r1, r2
 8004404:	461a      	mov	r2, r3
 8004406:	4603      	mov	r3, r0
 8004408:	817b      	strh	r3, [r7, #10]
 800440a:	460b      	mov	r3, r1
 800440c:	813b      	strh	r3, [r7, #8]
 800440e:	4613      	mov	r3, r2
 8004410:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004412:	f7fe f841 	bl	8002498 <HAL_GetTick>
 8004416:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8004418:	88fb      	ldrh	r3, [r7, #6]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d007      	beq.n	800442e <HAL_I2C_Mem_Read+0x36>
 800441e:	88fb      	ldrh	r3, [r7, #6]
 8004420:	2b10      	cmp	r3, #16
 8004422:	d004      	beq.n	800442e <HAL_I2C_Mem_Read+0x36>
 8004424:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8004428:	4881      	ldr	r0, [pc, #516]	; (8004630 <HAL_I2C_Mem_Read+0x238>)
 800442a:	f7fd fb25 	bl	8001a78 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b20      	cmp	r3, #32
 8004438:	f040 8209 	bne.w	800484e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	2319      	movs	r3, #25
 8004442:	2201      	movs	r2, #1
 8004444:	497b      	ldr	r1, [pc, #492]	; (8004634 <HAL_I2C_Mem_Read+0x23c>)
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 fb4e 	bl	8004ae8 <I2C_WaitOnFlagUntilTimeout>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 8004452:	2302      	movs	r3, #2
 8004454:	e1fc      	b.n	8004850 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_I2C_Mem_Read+0x6c>
 8004460:	2302      	movs	r3, #2
 8004462:	e1f5      	b.n	8004850 <HAL_I2C_Mem_Read+0x458>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b01      	cmp	r3, #1
 8004478:	d007      	beq.n	800448a <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f042 0201 	orr.w	r2, r2, #1
 8004488:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004498:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2222      	movs	r2, #34	; 0x22
 800449e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2240      	movs	r2, #64	; 0x40
 80044a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80044ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4a5b      	ldr	r2, [pc, #364]	; (8004638 <HAL_I2C_Mem_Read+0x240>)
 80044ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044cc:	88f8      	ldrh	r0, [r7, #6]
 80044ce:	893a      	ldrh	r2, [r7, #8]
 80044d0:	8979      	ldrh	r1, [r7, #10]
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	9301      	str	r3, [sp, #4]
 80044d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	4603      	mov	r3, r0
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 fa33 	bl	8004948 <I2C_RequestMemoryRead>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e1b1      	b.n	8004850 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d113      	bne.n	800451c <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044f4:	2300      	movs	r3, #0
 80044f6:	623b      	str	r3, [r7, #32]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	623b      	str	r3, [r7, #32]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	623b      	str	r3, [r7, #32]
 8004508:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	e185      	b.n	8004828 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004520:	2b01      	cmp	r3, #1
 8004522:	d11b      	bne.n	800455c <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004532:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004534:	2300      	movs	r3, #0
 8004536:	61fb      	str	r3, [r7, #28]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	61fb      	str	r3, [r7, #28]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	61fb      	str	r3, [r7, #28]
 8004548:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	e165      	b.n	8004828 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004560:	2b02      	cmp	r3, #2
 8004562:	d11b      	bne.n	800459c <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004572:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004582:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004584:	2300      	movs	r3, #0
 8004586:	61bb      	str	r3, [r7, #24]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	61bb      	str	r3, [r7, #24]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	61bb      	str	r3, [r7, #24]
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	e145      	b.n	8004828 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800459c:	2300      	movs	r3, #0
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80045b2:	e139      	b.n	8004828 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b8:	2b03      	cmp	r3, #3
 80045ba:	f200 80f2 	bhi.w	80047a2 <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d123      	bne.n	800460e <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 fbe4 	bl	8004d98 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e13a      	b.n	8004850 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	b2d2      	uxtb	r2, r2
 80045e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004602:	b29b      	uxth	r3, r3
 8004604:	3b01      	subs	r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800460c:	e10c      	b.n	8004828 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004612:	2b02      	cmp	r3, #2
 8004614:	d14f      	bne.n	80046b6 <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461c:	2200      	movs	r2, #0
 800461e:	4907      	ldr	r1, [pc, #28]	; (800463c <HAL_I2C_Mem_Read+0x244>)
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 fa61 	bl	8004ae8 <I2C_WaitOnFlagUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d009      	beq.n	8004640 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e10f      	b.n	8004850 <HAL_I2C_Mem_Read+0x458>
 8004630:	0800b290 	.word	0x0800b290
 8004634:	00100002 	.word	0x00100002
 8004638:	ffff0000 	.word	0xffff0000
 800463c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800464e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691a      	ldr	r2, [r3, #16]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046b4:	e0b8      	b.n	8004828 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046bc:	2200      	movs	r2, #0
 80046be:	4966      	ldr	r1, [pc, #408]	; (8004858 <HAL_I2C_Mem_Read+0x460>)
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 fa11 	bl	8004ae8 <I2C_WaitOnFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0bf      	b.n	8004850 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691a      	ldr	r2, [r3, #16]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004708:	b29b      	uxth	r3, r3
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004718:	2200      	movs	r2, #0
 800471a:	494f      	ldr	r1, [pc, #316]	; (8004858 <HAL_I2C_Mem_Read+0x460>)
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 f9e3 	bl	8004ae8 <I2C_WaitOnFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e091      	b.n	8004850 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800473a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691a      	ldr	r2, [r3, #16]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004764:	b29b      	uxth	r3, r3
 8004766:	3b01      	subs	r3, #1
 8004768:	b29a      	uxth	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	b2d2      	uxtb	r2, r2
 800477a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478a:	3b01      	subs	r3, #1
 800478c:	b29a      	uxth	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004796:	b29b      	uxth	r3, r3
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047a0:	e042      	b.n	8004828 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 faf6 	bl	8004d98 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e04c      	b.n	8004850 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d118      	bne.n	8004828 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004812:	3b01      	subs	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481e:	b29b      	uxth	r3, r3
 8004820:	3b01      	subs	r3, #1
 8004822:	b29a      	uxth	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800482c:	2b00      	cmp	r3, #0
 800482e:	f47f aec1 	bne.w	80045b4 <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	e000      	b.n	8004850 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800484e:	2302      	movs	r3, #2
  }
}
 8004850:	4618      	mov	r0, r3
 8004852:	3728      	adds	r7, #40	; 0x28
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	00010004 	.word	0x00010004

0800485c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af02      	add	r7, sp, #8
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	607a      	str	r2, [r7, #4]
 8004866:	603b      	str	r3, [r7, #0]
 8004868:	460b      	mov	r3, r1
 800486a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004870:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2b08      	cmp	r3, #8
 8004876:	d006      	beq.n	8004886 <I2C_MasterRequestWrite+0x2a>
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d003      	beq.n	8004886 <I2C_MasterRequestWrite+0x2a>
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004884:	d108      	bne.n	8004898 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	e00b      	b.n	80048b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489c:	2b12      	cmp	r3, #18
 800489e:	d107      	bne.n	80048b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f913 	bl	8004ae8 <I2C_WaitOnFlagUntilTimeout>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e035      	b.n	8004938 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048d4:	d108      	bne.n	80048e8 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048d6:	897b      	ldrh	r3, [r7, #10]
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	461a      	mov	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048e4:	611a      	str	r2, [r3, #16]
 80048e6:	e01b      	b.n	8004920 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048e8:	897b      	ldrh	r3, [r7, #10]
 80048ea:	11db      	asrs	r3, r3, #7
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	f003 0306 	and.w	r3, r3, #6
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	f063 030f 	orn	r3, r3, #15
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	490e      	ldr	r1, [pc, #56]	; (8004940 <I2C_MasterRequestWrite+0xe4>)
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f945 	bl	8004b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e010      	b.n	8004938 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004916:	897b      	ldrh	r3, [r7, #10]
 8004918:	b2da      	uxtb	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	4907      	ldr	r1, [pc, #28]	; (8004944 <I2C_MasterRequestWrite+0xe8>)
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 f935 	bl	8004b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e000      	b.n	8004938 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3718      	adds	r7, #24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	00010008 	.word	0x00010008
 8004944:	00010002 	.word	0x00010002

08004948 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af02      	add	r7, sp, #8
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	4608      	mov	r0, r1
 8004952:	4611      	mov	r1, r2
 8004954:	461a      	mov	r2, r3
 8004956:	4603      	mov	r3, r0
 8004958:	817b      	strh	r3, [r7, #10]
 800495a:	460b      	mov	r3, r1
 800495c:	813b      	strh	r3, [r7, #8]
 800495e:	4613      	mov	r3, r2
 8004960:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004970:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004980:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	2200      	movs	r2, #0
 800498a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 f8aa 	bl	8004ae8 <I2C_WaitOnFlagUntilTimeout>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e09e      	b.n	8004adc <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800499e:	897b      	ldrh	r3, [r7, #10]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	461a      	mov	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	6a3a      	ldr	r2, [r7, #32]
 80049b2:	494c      	ldr	r1, [pc, #304]	; (8004ae4 <I2C_RequestMemoryRead+0x19c>)
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f8ee 	bl	8004b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e08b      	b.n	8004adc <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049dc:	6a39      	ldr	r1, [r7, #32]
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 f958 	bl	8004c94 <I2C_WaitOnTXEFlagUntilTimeout>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00d      	beq.n	8004a06 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d107      	bne.n	8004a02 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e06a      	b.n	8004adc <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a06:	88fb      	ldrh	r3, [r7, #6]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d105      	bne.n	8004a18 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a0c:	893b      	ldrh	r3, [r7, #8]
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	611a      	str	r2, [r3, #16]
 8004a16:	e021      	b.n	8004a5c <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a18:	893b      	ldrh	r3, [r7, #8]
 8004a1a:	0a1b      	lsrs	r3, r3, #8
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a28:	6a39      	ldr	r1, [r7, #32]
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 f932 	bl	8004c94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00d      	beq.n	8004a52 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d107      	bne.n	8004a4e <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e044      	b.n	8004adc <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a52:	893b      	ldrh	r3, [r7, #8]
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5e:	6a39      	ldr	r1, [r7, #32]
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 f917 	bl	8004c94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00d      	beq.n	8004a88 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d107      	bne.n	8004a84 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e029      	b.n	8004adc <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f81f 	bl	8004ae8 <I2C_WaitOnFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e013      	b.n	8004adc <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ab4:	897b      	ldrh	r3, [r7, #10]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	6a3a      	ldr	r2, [r7, #32]
 8004ac8:	4906      	ldr	r1, [pc, #24]	; (8004ae4 <I2C_RequestMemoryRead+0x19c>)
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f863 	bl	8004b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3718      	adds	r7, #24
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	00010002 	.word	0x00010002

08004ae8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	4613      	mov	r3, r2
 8004af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004af8:	e025      	b.n	8004b46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b00:	d021      	beq.n	8004b46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b02:	f7fd fcc9 	bl	8002498 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d302      	bcc.n	8004b18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d116      	bne.n	8004b46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	f043 0220 	orr.w	r2, r3, #32
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e023      	b.n	8004b8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	0c1b      	lsrs	r3, r3, #16
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d10d      	bne.n	8004b6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	43da      	mvns	r2, r3
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	bf0c      	ite	eq
 8004b62:	2301      	moveq	r3, #1
 8004b64:	2300      	movne	r3, #0
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	461a      	mov	r2, r3
 8004b6a:	e00c      	b.n	8004b86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	43da      	mvns	r2, r3
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	4013      	ands	r3, r2
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	bf0c      	ite	eq
 8004b7e:	2301      	moveq	r3, #1
 8004b80:	2300      	movne	r3, #0
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	461a      	mov	r2, r3
 8004b86:	79fb      	ldrb	r3, [r7, #7]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d0b6      	beq.n	8004afa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b084      	sub	sp, #16
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	607a      	str	r2, [r7, #4]
 8004ba2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ba4:	e051      	b.n	8004c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb4:	d123      	bne.n	8004bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	f043 0204 	orr.w	r2, r3, #4
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e046      	b.n	8004c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c04:	d021      	beq.n	8004c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c06:	f7fd fc47 	bl	8002498 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d302      	bcc.n	8004c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d116      	bne.n	8004c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2220      	movs	r2, #32
 8004c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	f043 0220 	orr.w	r2, r3, #32
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e020      	b.n	8004c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	0c1b      	lsrs	r3, r3, #16
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d10c      	bne.n	8004c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	43da      	mvns	r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	bf14      	ite	ne
 8004c66:	2301      	movne	r3, #1
 8004c68:	2300      	moveq	r3, #0
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	e00b      	b.n	8004c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	43da      	mvns	r2, r3
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	bf14      	ite	ne
 8004c80:	2301      	movne	r3, #1
 8004c82:	2300      	moveq	r3, #0
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d18d      	bne.n	8004ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ca0:	e02d      	b.n	8004cfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f000 f8ce 	bl	8004e44 <I2C_IsAcknowledgeFailed>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e02d      	b.n	8004d0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb8:	d021      	beq.n	8004cfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cba:	f7fd fbed 	bl	8002498 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d302      	bcc.n	8004cd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d116      	bne.n	8004cfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	f043 0220 	orr.w	r2, r3, #32
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e007      	b.n	8004d0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d08:	2b80      	cmp	r3, #128	; 0x80
 8004d0a:	d1ca      	bne.n	8004ca2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b084      	sub	sp, #16
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	60f8      	str	r0, [r7, #12]
 8004d1e:	60b9      	str	r1, [r7, #8]
 8004d20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d22:	e02d      	b.n	8004d80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 f88d 	bl	8004e44 <I2C_IsAcknowledgeFailed>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e02d      	b.n	8004d90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3a:	d021      	beq.n	8004d80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d3c:	f7fd fbac 	bl	8002498 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d302      	bcc.n	8004d52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d116      	bne.n	8004d80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	f043 0220 	orr.w	r2, r3, #32
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e007      	b.n	8004d90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	f003 0304 	and.w	r3, r3, #4
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d1ca      	bne.n	8004d24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004da4:	e042      	b.n	8004e2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	f003 0310 	and.w	r3, r3, #16
 8004db0:	2b10      	cmp	r3, #16
 8004db2:	d119      	bne.n	8004de8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f06f 0210 	mvn.w	r2, #16
 8004dbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e029      	b.n	8004e3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de8:	f7fd fb56 	bl	8002498 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d302      	bcc.n	8004dfe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d116      	bne.n	8004e2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	f043 0220 	orr.w	r2, r3, #32
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e007      	b.n	8004e3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e36:	2b40      	cmp	r3, #64	; 0x40
 8004e38:	d1b5      	bne.n	8004da6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e5a:	d11b      	bne.n	8004e94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e80:	f043 0204 	orr.w	r2, r3, #4
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e000      	b.n	8004e96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc80      	pop	{r7}
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b088      	sub	sp, #32
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d102      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	f000 bc6c 	b.w	800578c <HAL_RCC_OscConfig+0x8ec>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d022      	beq.n	8004f02 <HAL_RCC_OscConfig+0x62>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d11c      	bne.n	8004f02 <HAL_RCC_OscConfig+0x62>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d116      	bne.n	8004f02 <HAL_RCC_OscConfig+0x62>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0308 	and.w	r3, r3, #8
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d110      	bne.n	8004f02 <HAL_RCC_OscConfig+0x62>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10a      	bne.n	8004f02 <HAL_RCC_OscConfig+0x62>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0310 	and.w	r3, r3, #16
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d104      	bne.n	8004f02 <HAL_RCC_OscConfig+0x62>
 8004ef8:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004efc:	4897      	ldr	r0, [pc, #604]	; (800515c <HAL_RCC_OscConfig+0x2bc>)
 8004efe:	f7fc fdbb 	bl	8001a78 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f02:	4b97      	ldr	r3, [pc, #604]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 030c 	and.w	r3, r3, #12
 8004f0a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f0c:	4b94      	ldr	r3, [pc, #592]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f14:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f000 808e 	beq.w	8005040 <HAL_RCC_OscConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00c      	beq.n	8004f46 <HAL_RCC_OscConfig+0xa6>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d008      	beq.n	8004f46 <HAL_RCC_OscConfig+0xa6>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2b05      	cmp	r3, #5
 8004f3a:	d004      	beq.n	8004f46 <HAL_RCC_OscConfig+0xa6>
 8004f3c:	f240 1159 	movw	r1, #345	; 0x159
 8004f40:	4886      	ldr	r0, [pc, #536]	; (800515c <HAL_RCC_OscConfig+0x2bc>)
 8004f42:	f7fc fd99 	bl	8001a78 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d006      	beq.n	8004f5a <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	2b0c      	cmp	r3, #12
 8004f50:	d110      	bne.n	8004f74 <HAL_RCC_OscConfig+0xd4>
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f58:	d10c      	bne.n	8004f74 <HAL_RCC_OscConfig+0xd4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f5a:	4b81      	ldr	r3, [pc, #516]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d06b      	beq.n	800503e <HAL_RCC_OscConfig+0x19e>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d167      	bne.n	800503e <HAL_RCC_OscConfig+0x19e>
      {
        return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	f000 bc0c 	b.w	800578c <HAL_RCC_OscConfig+0x8ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d106      	bne.n	8004f8a <HAL_RCC_OscConfig+0xea>
 8004f7c:	4b78      	ldr	r3, [pc, #480]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a77      	ldr	r2, [pc, #476]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 8004f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f86:	6013      	str	r3, [r2, #0]
 8004f88:	e02d      	b.n	8004fe6 <HAL_RCC_OscConfig+0x146>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10c      	bne.n	8004fac <HAL_RCC_OscConfig+0x10c>
 8004f92:	4b73      	ldr	r3, [pc, #460]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a72      	ldr	r2, [pc, #456]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 8004f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	4b70      	ldr	r3, [pc, #448]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a6f      	ldr	r2, [pc, #444]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 8004fa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	e01c      	b.n	8004fe6 <HAL_RCC_OscConfig+0x146>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2b05      	cmp	r3, #5
 8004fb2:	d10c      	bne.n	8004fce <HAL_RCC_OscConfig+0x12e>
 8004fb4:	4b6a      	ldr	r3, [pc, #424]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a69      	ldr	r2, [pc, #420]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 8004fba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	4b67      	ldr	r3, [pc, #412]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a66      	ldr	r2, [pc, #408]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 8004fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	e00b      	b.n	8004fe6 <HAL_RCC_OscConfig+0x146>
 8004fce:	4b64      	ldr	r3, [pc, #400]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a63      	ldr	r2, [pc, #396]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 8004fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	4b61      	ldr	r3, [pc, #388]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a60      	ldr	r2, [pc, #384]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 8004fe0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fe4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d013      	beq.n	8005016 <HAL_RCC_OscConfig+0x176>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fee:	f7fd fa53 	bl	8002498 <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0x168>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ff6:	f7fd fa4f 	bl	8002498 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b64      	cmp	r3, #100	; 0x64
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x168>
          {
            return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e3c1      	b.n	800578c <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005008:	4b55      	ldr	r3, [pc, #340]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0f0      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x156>
 8005014:	e014      	b.n	8005040 <HAL_RCC_OscConfig+0x1a0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005016:	f7fd fa3f 	bl	8002498 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800501c:	e008      	b.n	8005030 <HAL_RCC_OscConfig+0x190>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800501e:	f7fd fa3b 	bl	8002498 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b64      	cmp	r3, #100	; 0x64
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e3ad      	b.n	800578c <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005030:	4b4b      	ldr	r3, [pc, #300]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1f0      	bne.n	800501e <HAL_RCC_OscConfig+0x17e>
 800503c:	e000      	b.n	8005040 <HAL_RCC_OscConfig+0x1a0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800503e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d070      	beq.n	800512e <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d008      	beq.n	8005066 <HAL_RCC_OscConfig+0x1c6>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d004      	beq.n	8005066 <HAL_RCC_OscConfig+0x1c6>
 800505c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8005060:	483e      	ldr	r0, [pc, #248]	; (800515c <HAL_RCC_OscConfig+0x2bc>)
 8005062:	f7fc fd09 	bl	8001a78 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	2b1f      	cmp	r3, #31
 800506c:	d904      	bls.n	8005078 <HAL_RCC_OscConfig+0x1d8>
 800506e:	f240 118d 	movw	r1, #397	; 0x18d
 8005072:	483a      	ldr	r0, [pc, #232]	; (800515c <HAL_RCC_OscConfig+0x2bc>)
 8005074:	f7fc fd00 	bl	8001a78 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	2b04      	cmp	r3, #4
 800507c:	d005      	beq.n	800508a <HAL_RCC_OscConfig+0x1ea>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	2b0c      	cmp	r3, #12
 8005082:	d119      	bne.n	80050b8 <HAL_RCC_OscConfig+0x218>
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d116      	bne.n	80050b8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800508a:	4b35      	ldr	r3, [pc, #212]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d005      	beq.n	80050a2 <HAL_RCC_OscConfig+0x202>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d001      	beq.n	80050a2 <HAL_RCC_OscConfig+0x202>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e374      	b.n	800578c <HAL_RCC_OscConfig+0x8ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a2:	4b2f      	ldr	r3, [pc, #188]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	021b      	lsls	r3, r3, #8
 80050b0:	492b      	ldr	r1, [pc, #172]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050b6:	e03a      	b.n	800512e <HAL_RCC_OscConfig+0x28e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d020      	beq.n	8005102 <HAL_RCC_OscConfig+0x262>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050c0:	4b28      	ldr	r3, [pc, #160]	; (8005164 <HAL_RCC_OscConfig+0x2c4>)
 80050c2:	2201      	movs	r2, #1
 80050c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c6:	f7fd f9e7 	bl	8002498 <HAL_GetTick>
 80050ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050cc:	e008      	b.n	80050e0 <HAL_RCC_OscConfig+0x240>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050ce:	f7fd f9e3 	bl	8002498 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x240>
          {
            return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e355      	b.n	800578c <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050e0:	4b1f      	ldr	r3, [pc, #124]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0f0      	beq.n	80050ce <HAL_RCC_OscConfig+0x22e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ec:	4b1c      	ldr	r3, [pc, #112]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	021b      	lsls	r3, r3, #8
 80050fa:	4919      	ldr	r1, [pc, #100]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	604b      	str	r3, [r1, #4]
 8005100:	e015      	b.n	800512e <HAL_RCC_OscConfig+0x28e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005102:	4b18      	ldr	r3, [pc, #96]	; (8005164 <HAL_RCC_OscConfig+0x2c4>)
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005108:	f7fd f9c6 	bl	8002498 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x282>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005110:	f7fd f9c2 	bl	8002498 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x282>
          {
            return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e334      	b.n	800578c <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005122:	4b0f      	ldr	r3, [pc, #60]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1f0      	bne.n	8005110 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0310 	and.w	r3, r3, #16
 8005136:	2b00      	cmp	r3, #0
 8005138:	f000 8129 	beq.w	800538e <HAL_RCC_OscConfig+0x4ee>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	2b00      	cmp	r3, #0
 8005140:	f040 80a4 	bne.w	800528c <HAL_RCC_OscConfig+0x3ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005144:	4b06      	ldr	r3, [pc, #24]	; (8005160 <HAL_RCC_OscConfig+0x2c0>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00b      	beq.n	8005168 <HAL_RCC_OscConfig+0x2c8>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d107      	bne.n	8005168 <HAL_RCC_OscConfig+0x2c8>
      {
        return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e317      	b.n	800578c <HAL_RCC_OscConfig+0x8ec>
 800515c:	0800b2c8 	.word	0x0800b2c8
 8005160:	40023800 	.word	0x40023800
 8005164:	42470000 	.word	0x42470000
      }
      /* Otherwise, just the calibration and MSI range change are allowed */
      else
      {
       /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	2bff      	cmp	r3, #255	; 0xff
 800516e:	d904      	bls.n	800517a <HAL_RCC_OscConfig+0x2da>
 8005170:	f240 11d7 	movw	r1, #471	; 0x1d7
 8005174:	48a5      	ldr	r0, [pc, #660]	; (800540c <HAL_RCC_OscConfig+0x56c>)
 8005176:	f7fc fc7f 	bl	8001a78 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d022      	beq.n	80051c8 <HAL_RCC_OscConfig+0x328>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800518a:	d01d      	beq.n	80051c8 <HAL_RCC_OscConfig+0x328>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005194:	d018      	beq.n	80051c8 <HAL_RCC_OscConfig+0x328>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800519e:	d013      	beq.n	80051c8 <HAL_RCC_OscConfig+0x328>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a8:	d00e      	beq.n	80051c8 <HAL_RCC_OscConfig+0x328>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80051b2:	d009      	beq.n	80051c8 <HAL_RCC_OscConfig+0x328>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80051bc:	d004      	beq.n	80051c8 <HAL_RCC_OscConfig+0x328>
 80051be:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80051c2:	4892      	ldr	r0, [pc, #584]	; (800540c <HAL_RCC_OscConfig+0x56c>)
 80051c4:	f7fc fc58 	bl	8001a78 <assert_failed>

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a1a      	ldr	r2, [r3, #32]
 80051cc:	4b90      	ldr	r3, [pc, #576]	; (8005410 <HAL_RCC_OscConfig+0x570>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d91d      	bls.n	8005214 <HAL_RCC_OscConfig+0x374>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 fd67 	bl	8005cb0 <RCC_SetFlashLatencyFromMSIRange>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e2cf      	b.n	800578c <HAL_RCC_OscConfig+0x8ec>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051ec:	4b88      	ldr	r3, [pc, #544]	; (8005410 <HAL_RCC_OscConfig+0x570>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	4985      	ldr	r1, [pc, #532]	; (8005410 <HAL_RCC_OscConfig+0x570>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051fe:	4b84      	ldr	r3, [pc, #528]	; (8005410 <HAL_RCC_OscConfig+0x570>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	061b      	lsls	r3, r3, #24
 800520c:	4980      	ldr	r1, [pc, #512]	; (8005410 <HAL_RCC_OscConfig+0x570>)
 800520e:	4313      	orrs	r3, r2
 8005210:	604b      	str	r3, [r1, #4]
 8005212:	e01c      	b.n	800524e <HAL_RCC_OscConfig+0x3ae>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005214:	4b7e      	ldr	r3, [pc, #504]	; (8005410 <HAL_RCC_OscConfig+0x570>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	497b      	ldr	r1, [pc, #492]	; (8005410 <HAL_RCC_OscConfig+0x570>)
 8005222:	4313      	orrs	r3, r2
 8005224:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005226:	4b7a      	ldr	r3, [pc, #488]	; (8005410 <HAL_RCC_OscConfig+0x570>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	061b      	lsls	r3, r3, #24
 8005234:	4976      	ldr	r1, [pc, #472]	; (8005410 <HAL_RCC_OscConfig+0x570>)
 8005236:	4313      	orrs	r3, r2
 8005238:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	4618      	mov	r0, r3
 8005240:	f000 fd36 	bl	8005cb0 <RCC_SetFlashLatencyFromMSIRange>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e29e      	b.n	800578c <HAL_RCC_OscConfig+0x8ec>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	0b5b      	lsrs	r3, r3, #13
 8005254:	3301      	adds	r3, #1
 8005256:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800525a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800525e:	4a6c      	ldr	r2, [pc, #432]	; (8005410 <HAL_RCC_OscConfig+0x570>)
 8005260:	6892      	ldr	r2, [r2, #8]
 8005262:	0912      	lsrs	r2, r2, #4
 8005264:	f002 020f 	and.w	r2, r2, #15
 8005268:	496a      	ldr	r1, [pc, #424]	; (8005414 <HAL_RCC_OscConfig+0x574>)
 800526a:	5c8a      	ldrb	r2, [r1, r2]
 800526c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800526e:	4a6a      	ldr	r2, [pc, #424]	; (8005418 <HAL_RCC_OscConfig+0x578>)
 8005270:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005272:	4b6a      	ldr	r3, [pc, #424]	; (800541c <HAL_RCC_OscConfig+0x57c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f7fc fc3c 	bl	8001af4 <HAL_InitTick>
 800527c:	4603      	mov	r3, r0
 800527e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005280:	7bfb      	ldrb	r3, [r7, #15]
 8005282:	2b00      	cmp	r3, #0
 8005284:	f000 8083 	beq.w	800538e <HAL_RCC_OscConfig+0x4ee>
        {
          return status;
 8005288:	7bfb      	ldrb	r3, [r7, #15]
 800528a:	e27f      	b.n	800578c <HAL_RCC_OscConfig+0x8ec>
      }
    }
    else
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d008      	beq.n	80052a6 <HAL_RCC_OscConfig+0x406>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d004      	beq.n	80052a6 <HAL_RCC_OscConfig+0x406>
 800529c:	f44f 7102 	mov.w	r1, #520	; 0x208
 80052a0:	485a      	ldr	r0, [pc, #360]	; (800540c <HAL_RCC_OscConfig+0x56c>)
 80052a2:	f7fc fbe9 	bl	8001a78 <assert_failed>

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d059      	beq.n	8005362 <HAL_RCC_OscConfig+0x4c2>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80052ae:	4b5c      	ldr	r3, [pc, #368]	; (8005420 <HAL_RCC_OscConfig+0x580>)
 80052b0:	2201      	movs	r2, #1
 80052b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b4:	f7fd f8f0 	bl	8002498 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052bc:	f7fd f8ec 	bl	8002498 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e25e      	b.n	800578c <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80052ce:	4b50      	ldr	r3, [pc, #320]	; (8005410 <HAL_RCC_OscConfig+0x570>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0f0      	beq.n	80052bc <HAL_RCC_OscConfig+0x41c>
          }
        }
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	2bff      	cmp	r3, #255	; 0xff
 80052e0:	d904      	bls.n	80052ec <HAL_RCC_OscConfig+0x44c>
 80052e2:	f44f 7107 	mov.w	r1, #540	; 0x21c
 80052e6:	4849      	ldr	r0, [pc, #292]	; (800540c <HAL_RCC_OscConfig+0x56c>)
 80052e8:	f7fc fbc6 	bl	8001a78 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d022      	beq.n	800533a <HAL_RCC_OscConfig+0x49a>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052fc:	d01d      	beq.n	800533a <HAL_RCC_OscConfig+0x49a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005306:	d018      	beq.n	800533a <HAL_RCC_OscConfig+0x49a>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005310:	d013      	beq.n	800533a <HAL_RCC_OscConfig+0x49a>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800531a:	d00e      	beq.n	800533a <HAL_RCC_OscConfig+0x49a>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005324:	d009      	beq.n	800533a <HAL_RCC_OscConfig+0x49a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800532e:	d004      	beq.n	800533a <HAL_RCC_OscConfig+0x49a>
 8005330:	f240 211d 	movw	r1, #541	; 0x21d
 8005334:	4835      	ldr	r0, [pc, #212]	; (800540c <HAL_RCC_OscConfig+0x56c>)
 8005336:	f7fc fb9f 	bl	8001a78 <assert_failed>

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800533a:	4b35      	ldr	r3, [pc, #212]	; (8005410 <HAL_RCC_OscConfig+0x570>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	4932      	ldr	r1, [pc, #200]	; (8005410 <HAL_RCC_OscConfig+0x570>)
 8005348:	4313      	orrs	r3, r2
 800534a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800534c:	4b30      	ldr	r3, [pc, #192]	; (8005410 <HAL_RCC_OscConfig+0x570>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	061b      	lsls	r3, r3, #24
 800535a:	492d      	ldr	r1, [pc, #180]	; (8005410 <HAL_RCC_OscConfig+0x570>)
 800535c:	4313      	orrs	r3, r2
 800535e:	604b      	str	r3, [r1, #4]
 8005360:	e015      	b.n	800538e <HAL_RCC_OscConfig+0x4ee>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005362:	4b2f      	ldr	r3, [pc, #188]	; (8005420 <HAL_RCC_OscConfig+0x580>)
 8005364:	2200      	movs	r2, #0
 8005366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005368:	f7fd f896 	bl	8002498 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800536e:	e008      	b.n	8005382 <HAL_RCC_OscConfig+0x4e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005370:	f7fd f892 	bl	8002498 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x4e2>
          {
            return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e204      	b.n	800578c <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005382:	4b23      	ldr	r3, [pc, #140]	; (8005410 <HAL_RCC_OscConfig+0x570>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1f0      	bne.n	8005370 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0308 	and.w	r3, r3, #8
 8005396:	2b00      	cmp	r3, #0
 8005398:	d04c      	beq.n	8005434 <HAL_RCC_OscConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d008      	beq.n	80053b4 <HAL_RCC_OscConfig+0x514>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d004      	beq.n	80053b4 <HAL_RCC_OscConfig+0x514>
 80053aa:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80053ae:	4817      	ldr	r0, [pc, #92]	; (800540c <HAL_RCC_OscConfig+0x56c>)
 80053b0:	f7fc fb62 	bl	8001a78 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d016      	beq.n	80053ea <HAL_RCC_OscConfig+0x54a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053bc:	4b19      	ldr	r3, [pc, #100]	; (8005424 <HAL_RCC_OscConfig+0x584>)
 80053be:	2201      	movs	r2, #1
 80053c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053c2:	f7fd f869 	bl	8002498 <HAL_GetTick>
 80053c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80053c8:	e008      	b.n	80053dc <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053ca:	f7fd f865 	bl	8002498 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d901      	bls.n	80053dc <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e1d7      	b.n	800578c <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80053dc:	4b0c      	ldr	r3, [pc, #48]	; (8005410 <HAL_RCC_OscConfig+0x570>)
 80053de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0f0      	beq.n	80053ca <HAL_RCC_OscConfig+0x52a>
 80053e8:	e024      	b.n	8005434 <HAL_RCC_OscConfig+0x594>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053ea:	4b0e      	ldr	r3, [pc, #56]	; (8005424 <HAL_RCC_OscConfig+0x584>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053f0:	f7fd f852 	bl	8002498 <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80053f6:	e017      	b.n	8005428 <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053f8:	f7fd f84e 	bl	8002498 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b02      	cmp	r3, #2
 8005404:	d910      	bls.n	8005428 <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e1c0      	b.n	800578c <HAL_RCC_OscConfig+0x8ec>
 800540a:	bf00      	nop
 800540c:	0800b2c8 	.word	0x0800b2c8
 8005410:	40023800 	.word	0x40023800
 8005414:	0800b49c 	.word	0x0800b49c
 8005418:	20000004 	.word	0x20000004
 800541c:	20000008 	.word	0x20000008
 8005420:	42470020 	.word	0x42470020
 8005424:	42470680 	.word	0x42470680
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005428:	4ba2      	ldr	r3, [pc, #648]	; (80056b4 <HAL_RCC_OscConfig+0x814>)
 800542a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1e1      	bne.n	80053f8 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 80b7 	beq.w	80055b0 <HAL_RCC_OscConfig+0x710>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005442:	2300      	movs	r3, #0
 8005444:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00c      	beq.n	8005468 <HAL_RCC_OscConfig+0x5c8>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d008      	beq.n	8005468 <HAL_RCC_OscConfig+0x5c8>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	2b05      	cmp	r3, #5
 800545c:	d004      	beq.n	8005468 <HAL_RCC_OscConfig+0x5c8>
 800545e:	f44f 711a 	mov.w	r1, #616	; 0x268
 8005462:	4895      	ldr	r0, [pc, #596]	; (80056b8 <HAL_RCC_OscConfig+0x818>)
 8005464:	f7fc fb08 	bl	8001a78 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005468:	4b92      	ldr	r3, [pc, #584]	; (80056b4 <HAL_RCC_OscConfig+0x814>)
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10d      	bne.n	8005490 <HAL_RCC_OscConfig+0x5f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005474:	4b8f      	ldr	r3, [pc, #572]	; (80056b4 <HAL_RCC_OscConfig+0x814>)
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	4a8e      	ldr	r2, [pc, #568]	; (80056b4 <HAL_RCC_OscConfig+0x814>)
 800547a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800547e:	6253      	str	r3, [r2, #36]	; 0x24
 8005480:	4b8c      	ldr	r3, [pc, #560]	; (80056b4 <HAL_RCC_OscConfig+0x814>)
 8005482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005488:	60bb      	str	r3, [r7, #8]
 800548a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800548c:	2301      	movs	r3, #1
 800548e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005490:	4b8a      	ldr	r3, [pc, #552]	; (80056bc <HAL_RCC_OscConfig+0x81c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005498:	2b00      	cmp	r3, #0
 800549a:	d118      	bne.n	80054ce <HAL_RCC_OscConfig+0x62e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800549c:	4b87      	ldr	r3, [pc, #540]	; (80056bc <HAL_RCC_OscConfig+0x81c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a86      	ldr	r2, [pc, #536]	; (80056bc <HAL_RCC_OscConfig+0x81c>)
 80054a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054a8:	f7fc fff6 	bl	8002498 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x622>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054b0:	f7fc fff2 	bl	8002498 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b64      	cmp	r3, #100	; 0x64
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e164      	b.n	800578c <HAL_RCC_OscConfig+0x8ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c2:	4b7e      	ldr	r3, [pc, #504]	; (80056bc <HAL_RCC_OscConfig+0x81c>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0f0      	beq.n	80054b0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d106      	bne.n	80054e4 <HAL_RCC_OscConfig+0x644>
 80054d6:	4b77      	ldr	r3, [pc, #476]	; (80056b4 <HAL_RCC_OscConfig+0x814>)
 80054d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054da:	4a76      	ldr	r2, [pc, #472]	; (80056b4 <HAL_RCC_OscConfig+0x814>)
 80054dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054e0:	6353      	str	r3, [r2, #52]	; 0x34
 80054e2:	e02d      	b.n	8005540 <HAL_RCC_OscConfig+0x6a0>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10c      	bne.n	8005506 <HAL_RCC_OscConfig+0x666>
 80054ec:	4b71      	ldr	r3, [pc, #452]	; (80056b4 <HAL_RCC_OscConfig+0x814>)
 80054ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f0:	4a70      	ldr	r2, [pc, #448]	; (80056b4 <HAL_RCC_OscConfig+0x814>)
 80054f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054f6:	6353      	str	r3, [r2, #52]	; 0x34
 80054f8:	4b6e      	ldr	r3, [pc, #440]	; (80056b4 <HAL_RCC_OscConfig+0x814>)
 80054fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fc:	4a6d      	ldr	r2, [pc, #436]	; (80056b4 <HAL_RCC_OscConfig+0x814>)
 80054fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005502:	6353      	str	r3, [r2, #52]	; 0x34
 8005504:	e01c      	b.n	8005540 <HAL_RCC_OscConfig+0x6a0>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	2b05      	cmp	r3, #5
 800550c:	d10c      	bne.n	8005528 <HAL_RCC_OscConfig+0x688>
 800550e:	4b69      	ldr	r3, [pc, #420]	; (80056b4 <HAL_RCC_OscConfig+0x814>)
 8005510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005512:	4a68      	ldr	r2, [pc, #416]	; (80056b4 <HAL_RCC_OscConfig+0x814>)
 8005514:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005518:	6353      	str	r3, [r2, #52]	; 0x34
 800551a:	4b66      	ldr	r3, [pc, #408]	; (80056b4 <HAL_RCC_OscConfig+0x814>)
 800551c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551e:	4a65      	ldr	r2, [pc, #404]	; (80056b4 <HAL_RCC_OscConfig+0x814>)
 8005520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005524:	6353      	str	r3, [r2, #52]	; 0x34
 8005526:	e00b      	b.n	8005540 <HAL_RCC_OscConfig+0x6a0>
 8005528:	4b62      	ldr	r3, [pc, #392]	; (80056b4 <HAL_RCC_OscConfig+0x814>)
 800552a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552c:	4a61      	ldr	r2, [pc, #388]	; (80056b4 <HAL_RCC_OscConfig+0x814>)
 800552e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005532:	6353      	str	r3, [r2, #52]	; 0x34
 8005534:	4b5f      	ldr	r3, [pc, #380]	; (80056b4 <HAL_RCC_OscConfig+0x814>)
 8005536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005538:	4a5e      	ldr	r2, [pc, #376]	; (80056b4 <HAL_RCC_OscConfig+0x814>)
 800553a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800553e:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d015      	beq.n	8005574 <HAL_RCC_OscConfig+0x6d4>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005548:	f7fc ffa6 	bl	8002498 <HAL_GetTick>
 800554c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800554e:	e00a      	b.n	8005566 <HAL_RCC_OscConfig+0x6c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005550:	f7fc ffa2 	bl	8002498 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	f241 3288 	movw	r2, #5000	; 0x1388
 800555e:	4293      	cmp	r3, r2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e112      	b.n	800578c <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005566:	4b53      	ldr	r3, [pc, #332]	; (80056b4 <HAL_RCC_OscConfig+0x814>)
 8005568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800556e:	2b00      	cmp	r3, #0
 8005570:	d0ee      	beq.n	8005550 <HAL_RCC_OscConfig+0x6b0>
 8005572:	e014      	b.n	800559e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005574:	f7fc ff90 	bl	8002498 <HAL_GetTick>
 8005578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800557a:	e00a      	b.n	8005592 <HAL_RCC_OscConfig+0x6f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800557c:	f7fc ff8c 	bl	8002498 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	f241 3288 	movw	r2, #5000	; 0x1388
 800558a:	4293      	cmp	r3, r2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x6f2>
        {
          return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e0fc      	b.n	800578c <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005592:	4b48      	ldr	r3, [pc, #288]	; (80056b4 <HAL_RCC_OscConfig+0x814>)
 8005594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1ee      	bne.n	800557c <HAL_RCC_OscConfig+0x6dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800559e:	7ffb      	ldrb	r3, [r7, #31]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d105      	bne.n	80055b0 <HAL_RCC_OscConfig+0x710>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055a4:	4b43      	ldr	r3, [pc, #268]	; (80056b4 <HAL_RCC_OscConfig+0x814>)
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	4a42      	ldr	r2, [pc, #264]	; (80056b4 <HAL_RCC_OscConfig+0x814>)
 80055aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ae:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00c      	beq.n	80055d2 <HAL_RCC_OscConfig+0x732>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d008      	beq.n	80055d2 <HAL_RCC_OscConfig+0x732>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d004      	beq.n	80055d2 <HAL_RCC_OscConfig+0x732>
 80055c8:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 80055cc:	483a      	ldr	r0, [pc, #232]	; (80056b8 <HAL_RCC_OscConfig+0x818>)
 80055ce:	f7fc fa53 	bl	8001a78 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 80d7 	beq.w	800578a <HAL_RCC_OscConfig+0x8ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	2b0c      	cmp	r3, #12
 80055e0:	f000 80b3 	beq.w	800574a <HAL_RCC_OscConfig+0x8aa>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	f040 8097 	bne.w	800571c <HAL_RCC_OscConfig+0x87c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d009      	beq.n	800560a <HAL_RCC_OscConfig+0x76a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055fe:	d004      	beq.n	800560a <HAL_RCC_OscConfig+0x76a>
 8005600:	f240 21b5 	movw	r1, #693	; 0x2b5
 8005604:	482c      	ldr	r0, [pc, #176]	; (80056b8 <HAL_RCC_OscConfig+0x818>)
 8005606:	f7fc fa37 	bl	8001a78 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560e:	2b00      	cmp	r3, #0
 8005610:	d02c      	beq.n	800566c <HAL_RCC_OscConfig+0x7cc>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005616:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800561a:	d027      	beq.n	800566c <HAL_RCC_OscConfig+0x7cc>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005620:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005624:	d022      	beq.n	800566c <HAL_RCC_OscConfig+0x7cc>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800562e:	d01d      	beq.n	800566c <HAL_RCC_OscConfig+0x7cc>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005634:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005638:	d018      	beq.n	800566c <HAL_RCC_OscConfig+0x7cc>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005642:	d013      	beq.n	800566c <HAL_RCC_OscConfig+0x7cc>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800564c:	d00e      	beq.n	800566c <HAL_RCC_OscConfig+0x7cc>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005652:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005656:	d009      	beq.n	800566c <HAL_RCC_OscConfig+0x7cc>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005660:	d004      	beq.n	800566c <HAL_RCC_OscConfig+0x7cc>
 8005662:	f240 21b6 	movw	r1, #694	; 0x2b6
 8005666:	4814      	ldr	r0, [pc, #80]	; (80056b8 <HAL_RCC_OscConfig+0x818>)
 8005668:	f7fc fa06 	bl	8001a78 <assert_failed>
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005670:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005674:	d00e      	beq.n	8005694 <HAL_RCC_OscConfig+0x7f4>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800567e:	d009      	beq.n	8005694 <HAL_RCC_OscConfig+0x7f4>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005684:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005688:	d004      	beq.n	8005694 <HAL_RCC_OscConfig+0x7f4>
 800568a:	f240 21b7 	movw	r1, #695	; 0x2b7
 800568e:	480a      	ldr	r0, [pc, #40]	; (80056b8 <HAL_RCC_OscConfig+0x818>)
 8005690:	f7fc f9f2 	bl	8001a78 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005694:	4b0a      	ldr	r3, [pc, #40]	; (80056c0 <HAL_RCC_OscConfig+0x820>)
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800569a:	f7fc fefd 	bl	8002498 <HAL_GetTick>
 800569e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056a0:	e010      	b.n	80056c4 <HAL_RCC_OscConfig+0x824>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056a2:	f7fc fef9 	bl	8002498 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d909      	bls.n	80056c4 <HAL_RCC_OscConfig+0x824>
          {
            return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e06b      	b.n	800578c <HAL_RCC_OscConfig+0x8ec>
 80056b4:	40023800 	.word	0x40023800
 80056b8:	0800b2c8 	.word	0x0800b2c8
 80056bc:	40007000 	.word	0x40007000
 80056c0:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056c4:	4b33      	ldr	r3, [pc, #204]	; (8005794 <HAL_RCC_OscConfig+0x8f4>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1e8      	bne.n	80056a2 <HAL_RCC_OscConfig+0x802>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056d0:	4b30      	ldr	r3, [pc, #192]	; (8005794 <HAL_RCC_OscConfig+0x8f4>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e0:	4319      	orrs	r1, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e6:	430b      	orrs	r3, r1
 80056e8:	492a      	ldr	r1, [pc, #168]	; (8005794 <HAL_RCC_OscConfig+0x8f4>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056ee:	4b2a      	ldr	r3, [pc, #168]	; (8005798 <HAL_RCC_OscConfig+0x8f8>)
 80056f0:	2201      	movs	r2, #1
 80056f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f4:	f7fc fed0 	bl	8002498 <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0x86e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056fc:	f7fc fecc 	bl	8002498 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x86e>
          {
            return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e03e      	b.n	800578c <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800570e:	4b21      	ldr	r3, [pc, #132]	; (8005794 <HAL_RCC_OscConfig+0x8f4>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0f0      	beq.n	80056fc <HAL_RCC_OscConfig+0x85c>
 800571a:	e036      	b.n	800578a <HAL_RCC_OscConfig+0x8ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800571c:	4b1e      	ldr	r3, [pc, #120]	; (8005798 <HAL_RCC_OscConfig+0x8f8>)
 800571e:	2200      	movs	r2, #0
 8005720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005722:	f7fc feb9 	bl	8002498 <HAL_GetTick>
 8005726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005728:	e008      	b.n	800573c <HAL_RCC_OscConfig+0x89c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800572a:	f7fc feb5 	bl	8002498 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d901      	bls.n	800573c <HAL_RCC_OscConfig+0x89c>
          {
            return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e027      	b.n	800578c <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800573c:	4b15      	ldr	r3, [pc, #84]	; (8005794 <HAL_RCC_OscConfig+0x8f4>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1f0      	bne.n	800572a <HAL_RCC_OscConfig+0x88a>
 8005748:	e01f      	b.n	800578a <HAL_RCC_OscConfig+0x8ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	2b01      	cmp	r3, #1
 8005750:	d101      	bne.n	8005756 <HAL_RCC_OscConfig+0x8b6>
      {
        return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e01a      	b.n	800578c <HAL_RCC_OscConfig+0x8ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005756:	4b0f      	ldr	r3, [pc, #60]	; (8005794 <HAL_RCC_OscConfig+0x8f4>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005766:	429a      	cmp	r2, r3
 8005768:	d10d      	bne.n	8005786 <HAL_RCC_OscConfig+0x8e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005774:	429a      	cmp	r2, r3
 8005776:	d106      	bne.n	8005786 <HAL_RCC_OscConfig+0x8e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005782:	429a      	cmp	r2, r3
 8005784:	d001      	beq.n	800578a <HAL_RCC_OscConfig+0x8ea>
        {
          return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e000      	b.n	800578c <HAL_RCC_OscConfig+0x8ec>
        }
      }
    }
  }

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3720      	adds	r7, #32
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	40023800 	.word	0x40023800
 8005798:	42470060 	.word	0x42470060

0800579c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e1a4      	b.n	8005afa <HAL_RCC_ClockConfig+0x35e>
  }

  assert_param(IS_FLASH_LATENCY(FLatency));
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d007      	beq.n	80057c6 <HAL_RCC_ClockConfig+0x2a>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d004      	beq.n	80057c6 <HAL_RCC_ClockConfig+0x2a>
 80057bc:	f240 312a 	movw	r1, #810	; 0x32a
 80057c0:	4893      	ldr	r0, [pc, #588]	; (8005a10 <HAL_RCC_ClockConfig+0x274>)
 80057c2:	f7fc f959 	bl	8001a78 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057c6:	4b93      	ldr	r3, [pc, #588]	; (8005a14 <HAL_RCC_ClockConfig+0x278>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d919      	bls.n	8005808 <HAL_RCC_ClockConfig+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d105      	bne.n	80057e6 <HAL_RCC_ClockConfig+0x4a>
 80057da:	4b8e      	ldr	r3, [pc, #568]	; (8005a14 <HAL_RCC_ClockConfig+0x278>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a8d      	ldr	r2, [pc, #564]	; (8005a14 <HAL_RCC_ClockConfig+0x278>)
 80057e0:	f043 0304 	orr.w	r3, r3, #4
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	4b8b      	ldr	r3, [pc, #556]	; (8005a14 <HAL_RCC_ClockConfig+0x278>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f023 0201 	bic.w	r2, r3, #1
 80057ee:	4989      	ldr	r1, [pc, #548]	; (8005a14 <HAL_RCC_ClockConfig+0x278>)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057f6:	4b87      	ldr	r3, [pc, #540]	; (8005a14 <HAL_RCC_ClockConfig+0x278>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	429a      	cmp	r2, r3
 8005802:	d001      	beq.n	8005808 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e178      	b.n	8005afa <HAL_RCC_ClockConfig+0x35e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b00      	cmp	r3, #0
 8005812:	d031      	beq.n	8005878 <HAL_RCC_ClockConfig+0xdc>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d024      	beq.n	8005866 <HAL_RCC_ClockConfig+0xca>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	2b80      	cmp	r3, #128	; 0x80
 8005822:	d020      	beq.n	8005866 <HAL_RCC_ClockConfig+0xca>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	2b90      	cmp	r3, #144	; 0x90
 800582a:	d01c      	beq.n	8005866 <HAL_RCC_ClockConfig+0xca>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	2ba0      	cmp	r3, #160	; 0xa0
 8005832:	d018      	beq.n	8005866 <HAL_RCC_ClockConfig+0xca>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	2bb0      	cmp	r3, #176	; 0xb0
 800583a:	d014      	beq.n	8005866 <HAL_RCC_ClockConfig+0xca>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	2bc0      	cmp	r3, #192	; 0xc0
 8005842:	d010      	beq.n	8005866 <HAL_RCC_ClockConfig+0xca>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	2bd0      	cmp	r3, #208	; 0xd0
 800584a:	d00c      	beq.n	8005866 <HAL_RCC_ClockConfig+0xca>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	2be0      	cmp	r3, #224	; 0xe0
 8005852:	d008      	beq.n	8005866 <HAL_RCC_ClockConfig+0xca>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	2bf0      	cmp	r3, #240	; 0xf0
 800585a:	d004      	beq.n	8005866 <HAL_RCC_ClockConfig+0xca>
 800585c:	f240 3141 	movw	r1, #833	; 0x341
 8005860:	486b      	ldr	r0, [pc, #428]	; (8005a10 <HAL_RCC_ClockConfig+0x274>)
 8005862:	f7fc f909 	bl	8001a78 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005866:	4b6c      	ldr	r3, [pc, #432]	; (8005a18 <HAL_RCC_ClockConfig+0x27c>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	4969      	ldr	r1, [pc, #420]	; (8005a18 <HAL_RCC_ClockConfig+0x27c>)
 8005874:	4313      	orrs	r3, r2
 8005876:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 80a3 	beq.w	80059cc <HAL_RCC_ClockConfig+0x230>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d010      	beq.n	80058b0 <HAL_RCC_ClockConfig+0x114>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d00c      	beq.n	80058b0 <HAL_RCC_ClockConfig+0x114>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	2b02      	cmp	r3, #2
 800589c:	d008      	beq.n	80058b0 <HAL_RCC_ClockConfig+0x114>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	2b03      	cmp	r3, #3
 80058a4:	d004      	beq.n	80058b0 <HAL_RCC_ClockConfig+0x114>
 80058a6:	f44f 7152 	mov.w	r1, #840	; 0x348
 80058aa:	4859      	ldr	r0, [pc, #356]	; (8005a10 <HAL_RCC_ClockConfig+0x274>)
 80058ac:	f7fc f8e4 	bl	8001a78 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d107      	bne.n	80058c8 <HAL_RCC_ClockConfig+0x12c>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058b8:	4b57      	ldr	r3, [pc, #348]	; (8005a18 <HAL_RCC_ClockConfig+0x27c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d121      	bne.n	8005908 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e118      	b.n	8005afa <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d107      	bne.n	80058e0 <HAL_RCC_ClockConfig+0x144>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058d0:	4b51      	ldr	r3, [pc, #324]	; (8005a18 <HAL_RCC_ClockConfig+0x27c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d115      	bne.n	8005908 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e10c      	b.n	8005afa <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d107      	bne.n	80058f8 <HAL_RCC_ClockConfig+0x15c>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058e8:	4b4b      	ldr	r3, [pc, #300]	; (8005a18 <HAL_RCC_ClockConfig+0x27c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d109      	bne.n	8005908 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e100      	b.n	8005afa <HAL_RCC_ClockConfig+0x35e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80058f8:	4b47      	ldr	r3, [pc, #284]	; (8005a18 <HAL_RCC_ClockConfig+0x27c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e0f8      	b.n	8005afa <HAL_RCC_ClockConfig+0x35e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005908:	4b43      	ldr	r3, [pc, #268]	; (8005a18 <HAL_RCC_ClockConfig+0x27c>)
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f023 0203 	bic.w	r2, r3, #3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	4940      	ldr	r1, [pc, #256]	; (8005a18 <HAL_RCC_ClockConfig+0x27c>)
 8005916:	4313      	orrs	r3, r2
 8005918:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800591a:	f7fc fdbd 	bl	8002498 <HAL_GetTick>
 800591e:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	2b02      	cmp	r3, #2
 8005926:	d112      	bne.n	800594e <HAL_RCC_ClockConfig+0x1b2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005928:	e00a      	b.n	8005940 <HAL_RCC_ClockConfig+0x1a4>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800592a:	f7fc fdb5 	bl	8002498 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	f241 3288 	movw	r2, #5000	; 0x1388
 8005938:	4293      	cmp	r3, r2
 800593a:	d901      	bls.n	8005940 <HAL_RCC_ClockConfig+0x1a4>
        {
          return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e0dc      	b.n	8005afa <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005940:	4b35      	ldr	r3, [pc, #212]	; (8005a18 <HAL_RCC_ClockConfig+0x27c>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f003 030c 	and.w	r3, r3, #12
 8005948:	2b08      	cmp	r3, #8
 800594a:	d1ee      	bne.n	800592a <HAL_RCC_ClockConfig+0x18e>
 800594c:	e03e      	b.n	80059cc <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	2b03      	cmp	r3, #3
 8005954:	d112      	bne.n	800597c <HAL_RCC_ClockConfig+0x1e0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005956:	e00a      	b.n	800596e <HAL_RCC_ClockConfig+0x1d2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005958:	f7fc fd9e 	bl	8002498 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	f241 3288 	movw	r2, #5000	; 0x1388
 8005966:	4293      	cmp	r3, r2
 8005968:	d901      	bls.n	800596e <HAL_RCC_ClockConfig+0x1d2>
        {
          return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e0c5      	b.n	8005afa <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800596e:	4b2a      	ldr	r3, [pc, #168]	; (8005a18 <HAL_RCC_ClockConfig+0x27c>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 030c 	and.w	r3, r3, #12
 8005976:	2b0c      	cmp	r3, #12
 8005978:	d1ee      	bne.n	8005958 <HAL_RCC_ClockConfig+0x1bc>
 800597a:	e027      	b.n	80059cc <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d11d      	bne.n	80059c0 <HAL_RCC_ClockConfig+0x224>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005984:	e00a      	b.n	800599c <HAL_RCC_ClockConfig+0x200>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005986:	f7fc fd87 	bl	8002498 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	f241 3288 	movw	r2, #5000	; 0x1388
 8005994:	4293      	cmp	r3, r2
 8005996:	d901      	bls.n	800599c <HAL_RCC_ClockConfig+0x200>
        {
          return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e0ae      	b.n	8005afa <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800599c:	4b1e      	ldr	r3, [pc, #120]	; (8005a18 <HAL_RCC_ClockConfig+0x27c>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f003 030c 	and.w	r3, r3, #12
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d1ee      	bne.n	8005986 <HAL_RCC_ClockConfig+0x1ea>
 80059a8:	e010      	b.n	80059cc <HAL_RCC_ClockConfig+0x230>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059aa:	f7fc fd75 	bl	8002498 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d901      	bls.n	80059c0 <HAL_RCC_ClockConfig+0x224>
        {
          return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e09c      	b.n	8005afa <HAL_RCC_ClockConfig+0x35e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80059c0:	4b15      	ldr	r3, [pc, #84]	; (8005a18 <HAL_RCC_ClockConfig+0x27c>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f003 030c 	and.w	r3, r3, #12
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1ee      	bne.n	80059aa <HAL_RCC_ClockConfig+0x20e>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059cc:	4b11      	ldr	r3, [pc, #68]	; (8005a14 <HAL_RCC_ClockConfig+0x278>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d220      	bcs.n	8005a1c <HAL_RCC_ClockConfig+0x280>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d105      	bne.n	80059ec <HAL_RCC_ClockConfig+0x250>
 80059e0:	4b0c      	ldr	r3, [pc, #48]	; (8005a14 <HAL_RCC_ClockConfig+0x278>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a0b      	ldr	r2, [pc, #44]	; (8005a14 <HAL_RCC_ClockConfig+0x278>)
 80059e6:	f043 0304 	orr.w	r3, r3, #4
 80059ea:	6013      	str	r3, [r2, #0]
 80059ec:	4b09      	ldr	r3, [pc, #36]	; (8005a14 <HAL_RCC_ClockConfig+0x278>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f023 0201 	bic.w	r2, r3, #1
 80059f4:	4907      	ldr	r1, [pc, #28]	; (8005a14 <HAL_RCC_ClockConfig+0x278>)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059fc:	4b05      	ldr	r3, [pc, #20]	; (8005a14 <HAL_RCC_ClockConfig+0x278>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	683a      	ldr	r2, [r7, #0]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d008      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x280>
    {
      return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e075      	b.n	8005afa <HAL_RCC_ClockConfig+0x35e>
 8005a0e:	bf00      	nop
 8005a10:	0800b2c8 	.word	0x0800b2c8
 8005a14:	40023c00 	.word	0x40023c00
 8005a18:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d025      	beq.n	8005a74 <HAL_RCC_ClockConfig+0x2d8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d018      	beq.n	8005a62 <HAL_RCC_ClockConfig+0x2c6>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a38:	d013      	beq.n	8005a62 <HAL_RCC_ClockConfig+0x2c6>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005a42:	d00e      	beq.n	8005a62 <HAL_RCC_ClockConfig+0x2c6>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a4c:	d009      	beq.n	8005a62 <HAL_RCC_ClockConfig+0x2c6>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a56:	d004      	beq.n	8005a62 <HAL_RCC_ClockConfig+0x2c6>
 8005a58:	f240 31ad 	movw	r1, #941	; 0x3ad
 8005a5c:	4829      	ldr	r0, [pc, #164]	; (8005b04 <HAL_RCC_ClockConfig+0x368>)
 8005a5e:	f7fc f80b 	bl	8001a78 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a62:	4b29      	ldr	r3, [pc, #164]	; (8005b08 <HAL_RCC_ClockConfig+0x36c>)
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	4926      	ldr	r1, [pc, #152]	; (8005b08 <HAL_RCC_ClockConfig+0x36c>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0308 	and.w	r3, r3, #8
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d026      	beq.n	8005ace <HAL_RCC_ClockConfig+0x332>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d018      	beq.n	8005aba <HAL_RCC_ClockConfig+0x31e>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a90:	d013      	beq.n	8005aba <HAL_RCC_ClockConfig+0x31e>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005a9a:	d00e      	beq.n	8005aba <HAL_RCC_ClockConfig+0x31e>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005aa4:	d009      	beq.n	8005aba <HAL_RCC_ClockConfig+0x31e>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005aae:	d004      	beq.n	8005aba <HAL_RCC_ClockConfig+0x31e>
 8005ab0:	f44f 716d 	mov.w	r1, #948	; 0x3b4
 8005ab4:	4813      	ldr	r0, [pc, #76]	; (8005b04 <HAL_RCC_ClockConfig+0x368>)
 8005ab6:	f7fb ffdf 	bl	8001a78 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aba:	4b13      	ldr	r3, [pc, #76]	; (8005b08 <HAL_RCC_ClockConfig+0x36c>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	490f      	ldr	r1, [pc, #60]	; (8005b08 <HAL_RCC_ClockConfig+0x36c>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ace:	f000 f823 	bl	8005b18 <HAL_RCC_GetSysClockFreq>
 8005ad2:	4601      	mov	r1, r0
 8005ad4:	4b0c      	ldr	r3, [pc, #48]	; (8005b08 <HAL_RCC_ClockConfig+0x36c>)
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	091b      	lsrs	r3, r3, #4
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	4a0b      	ldr	r2, [pc, #44]	; (8005b0c <HAL_RCC_ClockConfig+0x370>)
 8005ae0:	5cd3      	ldrb	r3, [r2, r3]
 8005ae2:	fa21 f303 	lsr.w	r3, r1, r3
 8005ae6:	4a0a      	ldr	r2, [pc, #40]	; (8005b10 <HAL_RCC_ClockConfig+0x374>)
 8005ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005aea:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <HAL_RCC_ClockConfig+0x378>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fc f800 	bl	8001af4 <HAL_InitTick>
 8005af4:	4603      	mov	r3, r0
 8005af6:	72fb      	strb	r3, [r7, #11]

  return status;
 8005af8:	7afb      	ldrb	r3, [r7, #11]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	0800b2c8 	.word	0x0800b2c8
 8005b08:	40023800 	.word	0x40023800
 8005b0c:	0800b49c 	.word	0x0800b49c
 8005b10:	20000004 	.word	0x20000004
 8005b14:	20000008 	.word	0x20000008

08005b18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8005b1e:	4b26      	ldr	r3, [pc, #152]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f003 030c 	and.w	r3, r3, #12
 8005b2a:	2b08      	cmp	r3, #8
 8005b2c:	d006      	beq.n	8005b3c <HAL_RCC_GetSysClockFreq+0x24>
 8005b2e:	2b0c      	cmp	r3, #12
 8005b30:	d007      	beq.n	8005b42 <HAL_RCC_GetSysClockFreq+0x2a>
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d12c      	bne.n	8005b90 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b36:	4b21      	ldr	r3, [pc, #132]	; (8005bbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8005b38:	613b      	str	r3, [r7, #16]
      break;
 8005b3a:	e037      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b3c:	4b20      	ldr	r3, [pc, #128]	; (8005bc0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005b3e:	613b      	str	r3, [r7, #16]
      break;
 8005b40:	e034      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	0c9b      	lsrs	r3, r3, #18
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	4a1e      	ldr	r2, [pc, #120]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0xac>)
 8005b4c:	5cd3      	ldrb	r3, [r2, r3]
 8005b4e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	0d9b      	lsrs	r3, r3, #22
 8005b54:	f003 0303 	and.w	r3, r3, #3
 8005b58:	3301      	adds	r3, #1
 8005b5a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b5c:	4b16      	ldr	r3, [pc, #88]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d008      	beq.n	8005b7a <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	4a15      	ldr	r2, [pc, #84]	; (8005bc0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005b6c:	fb02 f203 	mul.w	r2, r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b76:	617b      	str	r3, [r7, #20]
 8005b78:	e007      	b.n	8005b8a <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	4a0f      	ldr	r2, [pc, #60]	; (8005bbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8005b7e:	fb02 f203 	mul.w	r2, r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	613b      	str	r3, [r7, #16]
      break;
 8005b8e:	e00d      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005b90:	4b09      	ldr	r3, [pc, #36]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	0b5b      	lsrs	r3, r3, #13
 8005b96:	f003 0307 	and.w	r3, r3, #7
 8005b9a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba8:	613b      	str	r3, [r7, #16]
      break;
 8005baa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bac:	693b      	ldr	r3, [r7, #16]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	371c      	adds	r7, #28
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bc80      	pop	{r7}
 8005bb6:	4770      	bx	lr
 8005bb8:	40023800 	.word	0x40023800
 8005bbc:	00f42400 	.word	0x00f42400
 8005bc0:	007a1200 	.word	0x007a1200
 8005bc4:	0800b490 	.word	0x0800b490

08005bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bcc:	4b02      	ldr	r3, [pc, #8]	; (8005bd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005bce:	681b      	ldr	r3, [r3, #0]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bc80      	pop	{r7}
 8005bd6:	4770      	bx	lr
 8005bd8:	20000004 	.word	0x20000004

08005bdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005be0:	f7ff fff2 	bl	8005bc8 <HAL_RCC_GetHCLKFreq>
 8005be4:	4601      	mov	r1, r0
 8005be6:	4b05      	ldr	r3, [pc, #20]	; (8005bfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	0a1b      	lsrs	r3, r3, #8
 8005bec:	f003 0307 	and.w	r3, r3, #7
 8005bf0:	4a03      	ldr	r2, [pc, #12]	; (8005c00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bf2:	5cd3      	ldrb	r3, [r2, r3]
 8005bf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40023800 	.word	0x40023800
 8005c00:	0800b4ac 	.word	0x0800b4ac

08005c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c08:	f7ff ffde 	bl	8005bc8 <HAL_RCC_GetHCLKFreq>
 8005c0c:	4601      	mov	r1, r0
 8005c0e:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	0adb      	lsrs	r3, r3, #11
 8005c14:	f003 0307 	and.w	r3, r3, #7
 8005c18:	4a03      	ldr	r2, [pc, #12]	; (8005c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c1a:	5cd3      	ldrb	r3, [r2, r3]
 8005c1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	40023800 	.word	0x40023800
 8005c28:	0800b4ac 	.word	0x0800b4ac

08005c2c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d104      	bne.n	8005c46 <HAL_RCC_GetClockConfig+0x1a>
 8005c3c:	f240 41fa 	movw	r1, #1274	; 0x4fa
 8005c40:	4818      	ldr	r0, [pc, #96]	; (8005ca4 <HAL_RCC_GetClockConfig+0x78>)
 8005c42:	f7fb ff19 	bl	8001a78 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d104      	bne.n	8005c56 <HAL_RCC_GetClockConfig+0x2a>
 8005c4c:	f240 41fb 	movw	r1, #1275	; 0x4fb
 8005c50:	4814      	ldr	r0, [pc, #80]	; (8005ca4 <HAL_RCC_GetClockConfig+0x78>)
 8005c52:	f7fb ff11 	bl	8001a78 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	220f      	movs	r2, #15
 8005c5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c5c:	4b12      	ldr	r3, [pc, #72]	; (8005ca8 <HAL_RCC_GetClockConfig+0x7c>)
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f003 0203 	and.w	r2, r3, #3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005c68:	4b0f      	ldr	r3, [pc, #60]	; (8005ca8 <HAL_RCC_GetClockConfig+0x7c>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005c74:	4b0c      	ldr	r3, [pc, #48]	; (8005ca8 <HAL_RCC_GetClockConfig+0x7c>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005c80:	4b09      	ldr	r3, [pc, #36]	; (8005ca8 <HAL_RCC_GetClockConfig+0x7c>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	08db      	lsrs	r3, r3, #3
 8005c86:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005c8e:	4b07      	ldr	r3, [pc, #28]	; (8005cac <HAL_RCC_GetClockConfig+0x80>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0201 	and.w	r2, r3, #1
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	601a      	str	r2, [r3, #0]
}
 8005c9a:	bf00      	nop
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	0800b2c8 	.word	0x0800b2c8
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	40023c00 	.word	0x40023c00

08005cb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005cb8:	2300      	movs	r3, #0
 8005cba:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005cbc:	4b29      	ldr	r3, [pc, #164]	; (8005d64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d12c      	bne.n	8005d22 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005cc8:	4b26      	ldr	r3, [pc, #152]	; (8005d64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d005      	beq.n	8005ce0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005cd4:	4b24      	ldr	r3, [pc, #144]	; (8005d68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005cdc:	617b      	str	r3, [r7, #20]
 8005cde:	e016      	b.n	8005d0e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ce0:	4b20      	ldr	r3, [pc, #128]	; (8005d64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	4a1f      	ldr	r2, [pc, #124]	; (8005d64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cea:	6253      	str	r3, [r2, #36]	; 0x24
 8005cec:	4b1d      	ldr	r3, [pc, #116]	; (8005d64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005cf8:	4b1b      	ldr	r3, [pc, #108]	; (8005d68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005d00:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d02:	4b18      	ldr	r3, [pc, #96]	; (8005d64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d06:	4a17      	ldr	r2, [pc, #92]	; (8005d64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d0c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005d14:	d105      	bne.n	8005d22 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d1c:	d101      	bne.n	8005d22 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8005d1e:	2301      	movs	r3, #1
 8005d20:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d105      	bne.n	8005d34 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8005d28:	4b10      	ldr	r3, [pc, #64]	; (8005d6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a0f      	ldr	r2, [pc, #60]	; (8005d6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d2e:	f043 0304 	orr.w	r3, r3, #4
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f023 0201 	bic.w	r2, r3, #1
 8005d3c:	490b      	ldr	r1, [pc, #44]	; (8005d6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005d44:	4b09      	ldr	r3, [pc, #36]	; (8005d6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d001      	beq.n	8005d56 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e000      	b.n	8005d58 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	371c      	adds	r7, #28
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bc80      	pop	{r7}
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	40023800 	.word	0x40023800
 8005d68:	40007000 	.word	0x40007000
 8005d6c:	40023c00 	.word	0x40023c00

08005d70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e088      	b.n	8005e94 <HAL_TIM_Base_Init+0x124>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d8a:	d02c      	beq.n	8005de6 <HAL_TIM_Base_Init+0x76>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a42      	ldr	r2, [pc, #264]	; (8005e9c <HAL_TIM_Base_Init+0x12c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d027      	beq.n	8005de6 <HAL_TIM_Base_Init+0x76>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a41      	ldr	r2, [pc, #260]	; (8005ea0 <HAL_TIM_Base_Init+0x130>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d022      	beq.n	8005de6 <HAL_TIM_Base_Init+0x76>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a3f      	ldr	r2, [pc, #252]	; (8005ea4 <HAL_TIM_Base_Init+0x134>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d01d      	beq.n	8005de6 <HAL_TIM_Base_Init+0x76>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a3e      	ldr	r2, [pc, #248]	; (8005ea8 <HAL_TIM_Base_Init+0x138>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d018      	beq.n	8005de6 <HAL_TIM_Base_Init+0x76>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a3c      	ldr	r2, [pc, #240]	; (8005eac <HAL_TIM_Base_Init+0x13c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d013      	beq.n	8005de6 <HAL_TIM_Base_Init+0x76>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a3b      	ldr	r2, [pc, #236]	; (8005eb0 <HAL_TIM_Base_Init+0x140>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00e      	beq.n	8005de6 <HAL_TIM_Base_Init+0x76>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a39      	ldr	r2, [pc, #228]	; (8005eb4 <HAL_TIM_Base_Init+0x144>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d009      	beq.n	8005de6 <HAL_TIM_Base_Init+0x76>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a38      	ldr	r2, [pc, #224]	; (8005eb8 <HAL_TIM_Base_Init+0x148>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d004      	beq.n	8005de6 <HAL_TIM_Base_Init+0x76>
 8005ddc:	f240 110b 	movw	r1, #267	; 0x10b
 8005de0:	4836      	ldr	r0, [pc, #216]	; (8005ebc <HAL_TIM_Base_Init+0x14c>)
 8005de2:	f7fb fe49 	bl	8001a78 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d014      	beq.n	8005e18 <HAL_TIM_Base_Init+0xa8>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	2b10      	cmp	r3, #16
 8005df4:	d010      	beq.n	8005e18 <HAL_TIM_Base_Init+0xa8>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	2b20      	cmp	r3, #32
 8005dfc:	d00c      	beq.n	8005e18 <HAL_TIM_Base_Init+0xa8>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	2b40      	cmp	r3, #64	; 0x40
 8005e04:	d008      	beq.n	8005e18 <HAL_TIM_Base_Init+0xa8>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	2b60      	cmp	r3, #96	; 0x60
 8005e0c:	d004      	beq.n	8005e18 <HAL_TIM_Base_Init+0xa8>
 8005e0e:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8005e12:	482a      	ldr	r0, [pc, #168]	; (8005ebc <HAL_TIM_Base_Init+0x14c>)
 8005e14:	f7fb fe30 	bl	8001a78 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00e      	beq.n	8005e3e <HAL_TIM_Base_Init+0xce>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e28:	d009      	beq.n	8005e3e <HAL_TIM_Base_Init+0xce>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e32:	d004      	beq.n	8005e3e <HAL_TIM_Base_Init+0xce>
 8005e34:	f240 110d 	movw	r1, #269	; 0x10d
 8005e38:	4820      	ldr	r0, [pc, #128]	; (8005ebc <HAL_TIM_Base_Init+0x14c>)
 8005e3a:	f7fb fe1d 	bl	8001a78 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d008      	beq.n	8005e58 <HAL_TIM_Base_Init+0xe8>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	2b80      	cmp	r3, #128	; 0x80
 8005e4c:	d004      	beq.n	8005e58 <HAL_TIM_Base_Init+0xe8>
 8005e4e:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8005e52:	481a      	ldr	r0, [pc, #104]	; (8005ebc <HAL_TIM_Base_Init+0x14c>)
 8005e54:	f7fb fe10 	bl	8001a78 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d106      	bne.n	8005e72 <HAL_TIM_Base_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7fc f907 	bl	8002080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2202      	movs	r2, #2
 8005e76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	3304      	adds	r3, #4
 8005e82:	4619      	mov	r1, r3
 8005e84:	4610      	mov	r0, r2
 8005e86:	f001 f815 	bl	8006eb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	40000400 	.word	0x40000400
 8005ea0:	40000800 	.word	0x40000800
 8005ea4:	40000c00 	.word	0x40000c00
 8005ea8:	40001000 	.word	0x40001000
 8005eac:	40001400 	.word	0x40001400
 8005eb0:	40010800 	.word	0x40010800
 8005eb4:	40010c00 	.word	0x40010c00
 8005eb8:	40011000 	.word	0x40011000
 8005ebc:	0800b300 	.word	0x0800b300

08005ec0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed0:	d02c      	beq.n	8005f2c <HAL_TIM_Base_Start+0x6c>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a24      	ldr	r2, [pc, #144]	; (8005f68 <HAL_TIM_Base_Start+0xa8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d027      	beq.n	8005f2c <HAL_TIM_Base_Start+0x6c>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a22      	ldr	r2, [pc, #136]	; (8005f6c <HAL_TIM_Base_Start+0xac>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d022      	beq.n	8005f2c <HAL_TIM_Base_Start+0x6c>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a21      	ldr	r2, [pc, #132]	; (8005f70 <HAL_TIM_Base_Start+0xb0>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d01d      	beq.n	8005f2c <HAL_TIM_Base_Start+0x6c>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1f      	ldr	r2, [pc, #124]	; (8005f74 <HAL_TIM_Base_Start+0xb4>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d018      	beq.n	8005f2c <HAL_TIM_Base_Start+0x6c>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a1e      	ldr	r2, [pc, #120]	; (8005f78 <HAL_TIM_Base_Start+0xb8>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d013      	beq.n	8005f2c <HAL_TIM_Base_Start+0x6c>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a1c      	ldr	r2, [pc, #112]	; (8005f7c <HAL_TIM_Base_Start+0xbc>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d00e      	beq.n	8005f2c <HAL_TIM_Base_Start+0x6c>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a1b      	ldr	r2, [pc, #108]	; (8005f80 <HAL_TIM_Base_Start+0xc0>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d009      	beq.n	8005f2c <HAL_TIM_Base_Start+0x6c>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a19      	ldr	r2, [pc, #100]	; (8005f84 <HAL_TIM_Base_Start+0xc4>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d004      	beq.n	8005f2c <HAL_TIM_Base_Start+0x6c>
 8005f22:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 8005f26:	4818      	ldr	r0, [pc, #96]	; (8005f88 <HAL_TIM_Base_Start+0xc8>)
 8005f28:	f7fb fda6 	bl	8001a78 <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f003 0307 	and.w	r3, r3, #7
 8005f3e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2b06      	cmp	r3, #6
 8005f44:	d007      	beq.n	8005f56 <HAL_TIM_Base_Start+0x96>
  {
    __HAL_TIM_ENABLE(htim);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f042 0201 	orr.w	r2, r2, #1
 8005f54:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	40000400 	.word	0x40000400
 8005f6c:	40000800 	.word	0x40000800
 8005f70:	40000c00 	.word	0x40000c00
 8005f74:	40001000 	.word	0x40001000
 8005f78:	40001400 	.word	0x40001400
 8005f7c:	40010800 	.word	0x40010800
 8005f80:	40010c00 	.word	0x40010c00
 8005f84:	40011000 	.word	0x40011000
 8005f88:	0800b300 	.word	0x0800b300

08005f8c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f9c:	d02c      	beq.n	8005ff8 <HAL_TIM_Base_Stop+0x6c>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a24      	ldr	r2, [pc, #144]	; (8006034 <HAL_TIM_Base_Stop+0xa8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d027      	beq.n	8005ff8 <HAL_TIM_Base_Stop+0x6c>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a22      	ldr	r2, [pc, #136]	; (8006038 <HAL_TIM_Base_Stop+0xac>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d022      	beq.n	8005ff8 <HAL_TIM_Base_Stop+0x6c>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a21      	ldr	r2, [pc, #132]	; (800603c <HAL_TIM_Base_Stop+0xb0>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d01d      	beq.n	8005ff8 <HAL_TIM_Base_Stop+0x6c>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a1f      	ldr	r2, [pc, #124]	; (8006040 <HAL_TIM_Base_Stop+0xb4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d018      	beq.n	8005ff8 <HAL_TIM_Base_Stop+0x6c>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a1e      	ldr	r2, [pc, #120]	; (8006044 <HAL_TIM_Base_Stop+0xb8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d013      	beq.n	8005ff8 <HAL_TIM_Base_Stop+0x6c>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a1c      	ldr	r2, [pc, #112]	; (8006048 <HAL_TIM_Base_Stop+0xbc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00e      	beq.n	8005ff8 <HAL_TIM_Base_Stop+0x6c>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a1b      	ldr	r2, [pc, #108]	; (800604c <HAL_TIM_Base_Stop+0xc0>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d009      	beq.n	8005ff8 <HAL_TIM_Base_Stop+0x6c>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a19      	ldr	r2, [pc, #100]	; (8006050 <HAL_TIM_Base_Stop+0xc4>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d004      	beq.n	8005ff8 <HAL_TIM_Base_Stop+0x6c>
 8005fee:	f240 1199 	movw	r1, #409	; 0x199
 8005ff2:	4818      	ldr	r0, [pc, #96]	; (8006054 <HAL_TIM_Base_Stop+0xc8>)
 8005ff4:	f7fb fd40 	bl	8001a78 <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6a1a      	ldr	r2, [r3, #32]
 8006006:	f241 1311 	movw	r3, #4369	; 0x1111
 800600a:	4013      	ands	r3, r2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d107      	bne.n	8006020 <HAL_TIM_Base_Stop+0x94>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0201 	bic.w	r2, r2, #1
 800601e:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	40000400 	.word	0x40000400
 8006038:	40000800 	.word	0x40000800
 800603c:	40000c00 	.word	0x40000c00
 8006040:	40001000 	.word	0x40001000
 8006044:	40001400 	.word	0x40001400
 8006048:	40010800 	.word	0x40010800
 800604c:	40010c00 	.word	0x40010c00
 8006050:	40011000 	.word	0x40011000
 8006054:	0800b300 	.word	0x0800b300

08006058 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006068:	d02c      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x6c>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a24      	ldr	r2, [pc, #144]	; (8006100 <HAL_TIM_Base_Start_IT+0xa8>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d027      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x6c>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a22      	ldr	r2, [pc, #136]	; (8006104 <HAL_TIM_Base_Start_IT+0xac>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d022      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x6c>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a21      	ldr	r2, [pc, #132]	; (8006108 <HAL_TIM_Base_Start_IT+0xb0>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d01d      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x6c>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a1f      	ldr	r2, [pc, #124]	; (800610c <HAL_TIM_Base_Start_IT+0xb4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d018      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x6c>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a1e      	ldr	r2, [pc, #120]	; (8006110 <HAL_TIM_Base_Start_IT+0xb8>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d013      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x6c>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a1c      	ldr	r2, [pc, #112]	; (8006114 <HAL_TIM_Base_Start_IT+0xbc>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00e      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x6c>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a1b      	ldr	r2, [pc, #108]	; (8006118 <HAL_TIM_Base_Start_IT+0xc0>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d009      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x6c>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a19      	ldr	r2, [pc, #100]	; (800611c <HAL_TIM_Base_Start_IT+0xc4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d004      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x6c>
 80060ba:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 80060be:	4818      	ldr	r0, [pc, #96]	; (8006120 <HAL_TIM_Base_Start_IT+0xc8>)
 80060c0:	f7fb fcda 	bl	8001a78 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0201 	orr.w	r2, r2, #1
 80060d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b06      	cmp	r3, #6
 80060e4:	d007      	beq.n	80060f6 <HAL_TIM_Base_Start_IT+0x9e>
  {
    __HAL_TIM_ENABLE(htim);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f042 0201 	orr.w	r2, r2, #1
 80060f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	40000400 	.word	0x40000400
 8006104:	40000800 	.word	0x40000800
 8006108:	40000c00 	.word	0x40000c00
 800610c:	40001000 	.word	0x40001000
 8006110:	40001400 	.word	0x40001400
 8006114:	40010800 	.word	0x40010800
 8006118:	40010c00 	.word	0x40010c00
 800611c:	40011000 	.word	0x40011000
 8006120:	0800b300 	.word	0x0800b300

08006124 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e088      	b.n	8006248 <HAL_TIM_PWM_Init+0x124>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800613e:	d02c      	beq.n	800619a <HAL_TIM_PWM_Init+0x76>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a42      	ldr	r2, [pc, #264]	; (8006250 <HAL_TIM_PWM_Init+0x12c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d027      	beq.n	800619a <HAL_TIM_PWM_Init+0x76>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a41      	ldr	r2, [pc, #260]	; (8006254 <HAL_TIM_PWM_Init+0x130>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d022      	beq.n	800619a <HAL_TIM_PWM_Init+0x76>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a3f      	ldr	r2, [pc, #252]	; (8006258 <HAL_TIM_PWM_Init+0x134>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d01d      	beq.n	800619a <HAL_TIM_PWM_Init+0x76>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a3e      	ldr	r2, [pc, #248]	; (800625c <HAL_TIM_PWM_Init+0x138>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d018      	beq.n	800619a <HAL_TIM_PWM_Init+0x76>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a3c      	ldr	r2, [pc, #240]	; (8006260 <HAL_TIM_PWM_Init+0x13c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d013      	beq.n	800619a <HAL_TIM_PWM_Init+0x76>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a3b      	ldr	r2, [pc, #236]	; (8006264 <HAL_TIM_PWM_Init+0x140>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d00e      	beq.n	800619a <HAL_TIM_PWM_Init+0x76>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a39      	ldr	r2, [pc, #228]	; (8006268 <HAL_TIM_PWM_Init+0x144>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d009      	beq.n	800619a <HAL_TIM_PWM_Init+0x76>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a38      	ldr	r2, [pc, #224]	; (800626c <HAL_TIM_PWM_Init+0x148>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d004      	beq.n	800619a <HAL_TIM_PWM_Init+0x76>
 8006190:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8006194:	4836      	ldr	r0, [pc, #216]	; (8006270 <HAL_TIM_PWM_Init+0x14c>)
 8006196:	f7fb fc6f 	bl	8001a78 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d014      	beq.n	80061cc <HAL_TIM_PWM_Init+0xa8>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	2b10      	cmp	r3, #16
 80061a8:	d010      	beq.n	80061cc <HAL_TIM_PWM_Init+0xa8>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	2b20      	cmp	r3, #32
 80061b0:	d00c      	beq.n	80061cc <HAL_TIM_PWM_Init+0xa8>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	2b40      	cmp	r3, #64	; 0x40
 80061b8:	d008      	beq.n	80061cc <HAL_TIM_PWM_Init+0xa8>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	2b60      	cmp	r3, #96	; 0x60
 80061c0:	d004      	beq.n	80061cc <HAL_TIM_PWM_Init+0xa8>
 80061c2:	f240 4171 	movw	r1, #1137	; 0x471
 80061c6:	482a      	ldr	r0, [pc, #168]	; (8006270 <HAL_TIM_PWM_Init+0x14c>)
 80061c8:	f7fb fc56 	bl	8001a78 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00e      	beq.n	80061f2 <HAL_TIM_PWM_Init+0xce>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061dc:	d009      	beq.n	80061f2 <HAL_TIM_PWM_Init+0xce>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061e6:	d004      	beq.n	80061f2 <HAL_TIM_PWM_Init+0xce>
 80061e8:	f240 4172 	movw	r1, #1138	; 0x472
 80061ec:	4820      	ldr	r0, [pc, #128]	; (8006270 <HAL_TIM_PWM_Init+0x14c>)
 80061ee:	f7fb fc43 	bl	8001a78 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d008      	beq.n	800620c <HAL_TIM_PWM_Init+0xe8>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	2b80      	cmp	r3, #128	; 0x80
 8006200:	d004      	beq.n	800620c <HAL_TIM_PWM_Init+0xe8>
 8006202:	f240 4173 	movw	r1, #1139	; 0x473
 8006206:	481a      	ldr	r0, [pc, #104]	; (8006270 <HAL_TIM_PWM_Init+0x14c>)
 8006208:	f7fb fc36 	bl	8001a78 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b00      	cmp	r3, #0
 8006216:	d106      	bne.n	8006226 <HAL_TIM_PWM_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f827 	bl	8006274 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2202      	movs	r2, #2
 800622a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	3304      	adds	r3, #4
 8006236:	4619      	mov	r1, r3
 8006238:	4610      	mov	r0, r2
 800623a:	f000 fe3b 	bl	8006eb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3708      	adds	r7, #8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	40000400 	.word	0x40000400
 8006254:	40000800 	.word	0x40000800
 8006258:	40000c00 	.word	0x40000c00
 800625c:	40001000 	.word	0x40001000
 8006260:	40001400 	.word	0x40001400
 8006264:	40010800 	.word	0x40010800
 8006268:	40010c00 	.word	0x40010c00
 800626c:	40011000 	.word	0x40011000
 8006270:	0800b300 	.word	0x0800b300

08006274 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	bc80      	pop	{r7}
 8006284:	4770      	bx	lr
	...

08006288 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800629a:	d10b      	bne.n	80062b4 <HAL_TIM_PWM_Start+0x2c>
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d05b      	beq.n	800635a <HAL_TIM_PWM_Start+0xd2>
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b04      	cmp	r3, #4
 80062a6:	d058      	beq.n	800635a <HAL_TIM_PWM_Start+0xd2>
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2b08      	cmp	r3, #8
 80062ac:	d055      	beq.n	800635a <HAL_TIM_PWM_Start+0xd2>
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b0c      	cmp	r3, #12
 80062b2:	d052      	beq.n	800635a <HAL_TIM_PWM_Start+0xd2>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a36      	ldr	r2, [pc, #216]	; (8006394 <HAL_TIM_PWM_Start+0x10c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d10b      	bne.n	80062d6 <HAL_TIM_PWM_Start+0x4e>
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d04a      	beq.n	800635a <HAL_TIM_PWM_Start+0xd2>
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2b04      	cmp	r3, #4
 80062c8:	d047      	beq.n	800635a <HAL_TIM_PWM_Start+0xd2>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b08      	cmp	r3, #8
 80062ce:	d044      	beq.n	800635a <HAL_TIM_PWM_Start+0xd2>
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2b0c      	cmp	r3, #12
 80062d4:	d041      	beq.n	800635a <HAL_TIM_PWM_Start+0xd2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a2f      	ldr	r2, [pc, #188]	; (8006398 <HAL_TIM_PWM_Start+0x110>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d10b      	bne.n	80062f8 <HAL_TIM_PWM_Start+0x70>
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d039      	beq.n	800635a <HAL_TIM_PWM_Start+0xd2>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b04      	cmp	r3, #4
 80062ea:	d036      	beq.n	800635a <HAL_TIM_PWM_Start+0xd2>
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2b08      	cmp	r3, #8
 80062f0:	d033      	beq.n	800635a <HAL_TIM_PWM_Start+0xd2>
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b0c      	cmp	r3, #12
 80062f6:	d030      	beq.n	800635a <HAL_TIM_PWM_Start+0xd2>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a27      	ldr	r2, [pc, #156]	; (800639c <HAL_TIM_PWM_Start+0x114>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d10b      	bne.n	800631a <HAL_TIM_PWM_Start+0x92>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d028      	beq.n	800635a <HAL_TIM_PWM_Start+0xd2>
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2b04      	cmp	r3, #4
 800630c:	d025      	beq.n	800635a <HAL_TIM_PWM_Start+0xd2>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b08      	cmp	r3, #8
 8006312:	d022      	beq.n	800635a <HAL_TIM_PWM_Start+0xd2>
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	2b0c      	cmp	r3, #12
 8006318:	d01f      	beq.n	800635a <HAL_TIM_PWM_Start+0xd2>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a20      	ldr	r2, [pc, #128]	; (80063a0 <HAL_TIM_PWM_Start+0x118>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d105      	bne.n	8006330 <HAL_TIM_PWM_Start+0xa8>
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d017      	beq.n	800635a <HAL_TIM_PWM_Start+0xd2>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b04      	cmp	r3, #4
 800632e:	d014      	beq.n	800635a <HAL_TIM_PWM_Start+0xd2>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a1b      	ldr	r2, [pc, #108]	; (80063a4 <HAL_TIM_PWM_Start+0x11c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d102      	bne.n	8006340 <HAL_TIM_PWM_Start+0xb8>
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00c      	beq.n	800635a <HAL_TIM_PWM_Start+0xd2>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a18      	ldr	r2, [pc, #96]	; (80063a8 <HAL_TIM_PWM_Start+0x120>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d102      	bne.n	8006350 <HAL_TIM_PWM_Start+0xc8>
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d004      	beq.n	800635a <HAL_TIM_PWM_Start+0xd2>
 8006350:	f44f 619d 	mov.w	r1, #1256	; 0x4e8
 8006354:	4815      	ldr	r0, [pc, #84]	; (80063ac <HAL_TIM_PWM_Start+0x124>)
 8006356:	f7fb fb8f 	bl	8001a78 <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2201      	movs	r2, #1
 8006360:	6839      	ldr	r1, [r7, #0]
 8006362:	4618      	mov	r0, r3
 8006364:	f000 ffa2 	bl	80072ac <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f003 0307 	and.w	r3, r3, #7
 8006372:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2b06      	cmp	r3, #6
 8006378:	d007      	beq.n	800638a <HAL_TIM_PWM_Start+0x102>
  {
    __HAL_TIM_ENABLE(htim);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f042 0201 	orr.w	r2, r2, #1
 8006388:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	40000400 	.word	0x40000400
 8006398:	40000800 	.word	0x40000800
 800639c:	40000c00 	.word	0x40000c00
 80063a0:	40010800 	.word	0x40010800
 80063a4:	40010c00 	.word	0x40010c00
 80063a8:	40011000 	.word	0x40011000
 80063ac:	0800b300 	.word	0x0800b300

080063b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d122      	bne.n	800640c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d11b      	bne.n	800640c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f06f 0202 	mvn.w	r2, #2
 80063dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d003      	beq.n	80063fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fd43 	bl	8006e7e <HAL_TIM_IC_CaptureCallback>
 80063f8:	e005      	b.n	8006406 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fd36 	bl	8006e6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fd45 	bl	8006e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f003 0304 	and.w	r3, r3, #4
 8006416:	2b04      	cmp	r3, #4
 8006418:	d122      	bne.n	8006460 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f003 0304 	and.w	r3, r3, #4
 8006424:	2b04      	cmp	r3, #4
 8006426:	d11b      	bne.n	8006460 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f06f 0204 	mvn.w	r2, #4
 8006430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2202      	movs	r2, #2
 8006436:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fd19 	bl	8006e7e <HAL_TIM_IC_CaptureCallback>
 800644c:	e005      	b.n	800645a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fd0c 	bl	8006e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fd1b 	bl	8006e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	f003 0308 	and.w	r3, r3, #8
 800646a:	2b08      	cmp	r3, #8
 800646c:	d122      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f003 0308 	and.w	r3, r3, #8
 8006478:	2b08      	cmp	r3, #8
 800647a:	d11b      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f06f 0208 	mvn.w	r2, #8
 8006484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2204      	movs	r2, #4
 800648a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	f003 0303 	and.w	r3, r3, #3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fcef 	bl	8006e7e <HAL_TIM_IC_CaptureCallback>
 80064a0:	e005      	b.n	80064ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fce2 	bl	8006e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fcf1 	bl	8006e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	f003 0310 	and.w	r3, r3, #16
 80064be:	2b10      	cmp	r3, #16
 80064c0:	d122      	bne.n	8006508 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f003 0310 	and.w	r3, r3, #16
 80064cc:	2b10      	cmp	r3, #16
 80064ce:	d11b      	bne.n	8006508 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f06f 0210 	mvn.w	r2, #16
 80064d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2208      	movs	r2, #8
 80064de:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fcc5 	bl	8006e7e <HAL_TIM_IC_CaptureCallback>
 80064f4:	e005      	b.n	8006502 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fcb8 	bl	8006e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fcc7 	bl	8006e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b01      	cmp	r3, #1
 8006514:	d10e      	bne.n	8006534 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b01      	cmp	r3, #1
 8006522:	d107      	bne.n	8006534 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f06f 0201 	mvn.w	r2, #1
 800652c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7fb fa7c 	bl	8001a2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800653e:	2b40      	cmp	r3, #64	; 0x40
 8006540:	d10e      	bne.n	8006560 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654c:	2b40      	cmp	r3, #64	; 0x40
 800654e:	d107      	bne.n	8006560 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fca1 	bl	8006ea2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006560:	bf00      	nop
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d010      	beq.n	800659c <HAL_TIM_PWM_ConfigChannel+0x34>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b04      	cmp	r3, #4
 800657e:	d00d      	beq.n	800659c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b08      	cmp	r3, #8
 8006584:	d00a      	beq.n	800659c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b0c      	cmp	r3, #12
 800658a:	d007      	beq.n	800659c <HAL_TIM_PWM_ConfigChannel+0x34>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b3c      	cmp	r3, #60	; 0x3c
 8006590:	d004      	beq.n	800659c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006592:	f640 5169 	movw	r1, #3433	; 0xd69
 8006596:	488d      	ldr	r0, [pc, #564]	; (80067cc <HAL_TIM_PWM_ConfigChannel+0x264>)
 8006598:	f7fb fa6e 	bl	8001a78 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b60      	cmp	r3, #96	; 0x60
 80065a2:	d008      	beq.n	80065b6 <HAL_TIM_PWM_ConfigChannel+0x4e>
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b70      	cmp	r3, #112	; 0x70
 80065aa:	d004      	beq.n	80065b6 <HAL_TIM_PWM_ConfigChannel+0x4e>
 80065ac:	f640 516a 	movw	r1, #3434	; 0xd6a
 80065b0:	4886      	ldr	r0, [pc, #536]	; (80067cc <HAL_TIM_PWM_ConfigChannel+0x264>)
 80065b2:	f7fb fa61 	bl	8001a78 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d008      	beq.n	80065d0 <HAL_TIM_PWM_ConfigChannel+0x68>
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d004      	beq.n	80065d0 <HAL_TIM_PWM_ConfigChannel+0x68>
 80065c6:	f640 516b 	movw	r1, #3435	; 0xd6b
 80065ca:	4880      	ldr	r0, [pc, #512]	; (80067cc <HAL_TIM_PWM_ConfigChannel+0x264>)
 80065cc:	f7fb fa54 	bl	8001a78 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d008      	beq.n	80065ea <HAL_TIM_PWM_ConfigChannel+0x82>
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	2b04      	cmp	r3, #4
 80065de:	d004      	beq.n	80065ea <HAL_TIM_PWM_ConfigChannel+0x82>
 80065e0:	f640 516c 	movw	r1, #3436	; 0xd6c
 80065e4:	4879      	ldr	r0, [pc, #484]	; (80067cc <HAL_TIM_PWM_ConfigChannel+0x264>)
 80065e6:	f7fb fa47 	bl	8001a78 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d101      	bne.n	80065f8 <HAL_TIM_PWM_ConfigChannel+0x90>
 80065f4:	2302      	movs	r3, #2
 80065f6:	e13b      	b.n	8006870 <HAL_TIM_PWM_ConfigChannel+0x308>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2202      	movs	r2, #2
 8006604:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b0c      	cmp	r3, #12
 800660c:	f200 8126 	bhi.w	800685c <HAL_TIM_PWM_ConfigChannel+0x2f4>
 8006610:	a201      	add	r2, pc, #4	; (adr r2, 8006618 <HAL_TIM_PWM_ConfigChannel+0xb0>)
 8006612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006616:	bf00      	nop
 8006618:	0800664d 	.word	0x0800664d
 800661c:	0800685d 	.word	0x0800685d
 8006620:	0800685d 	.word	0x0800685d
 8006624:	0800685d 	.word	0x0800685d
 8006628:	080066dd 	.word	0x080066dd
 800662c:	0800685d 	.word	0x0800685d
 8006630:	0800685d 	.word	0x0800685d
 8006634:	0800685d 	.word	0x0800685d
 8006638:	0800675b 	.word	0x0800675b
 800663c:	0800685d 	.word	0x0800685d
 8006640:	0800685d 	.word	0x0800685d
 8006644:	0800685d 	.word	0x0800685d
 8006648:	080067e9 	.word	0x080067e9
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006654:	d022      	beq.n	800669c <HAL_TIM_PWM_ConfigChannel+0x134>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a5d      	ldr	r2, [pc, #372]	; (80067d0 <HAL_TIM_PWM_ConfigChannel+0x268>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d01d      	beq.n	800669c <HAL_TIM_PWM_ConfigChannel+0x134>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a5b      	ldr	r2, [pc, #364]	; (80067d4 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d018      	beq.n	800669c <HAL_TIM_PWM_ConfigChannel+0x134>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a5a      	ldr	r2, [pc, #360]	; (80067d8 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d013      	beq.n	800669c <HAL_TIM_PWM_ConfigChannel+0x134>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a58      	ldr	r2, [pc, #352]	; (80067dc <HAL_TIM_PWM_ConfigChannel+0x274>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d00e      	beq.n	800669c <HAL_TIM_PWM_ConfigChannel+0x134>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a57      	ldr	r2, [pc, #348]	; (80067e0 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d009      	beq.n	800669c <HAL_TIM_PWM_ConfigChannel+0x134>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a55      	ldr	r2, [pc, #340]	; (80067e4 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d004      	beq.n	800669c <HAL_TIM_PWM_ConfigChannel+0x134>
 8006692:	f640 5178 	movw	r1, #3448	; 0xd78
 8006696:	484d      	ldr	r0, [pc, #308]	; (80067cc <HAL_TIM_PWM_ConfigChannel+0x264>)
 8006698:	f7fb f9ee 	bl	8001a78 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68b9      	ldr	r1, [r7, #8]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f000 fc76 	bl	8006f94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699a      	ldr	r2, [r3, #24]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f042 0208 	orr.w	r2, r2, #8
 80066b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	699a      	ldr	r2, [r3, #24]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 0204 	bic.w	r2, r2, #4
 80066c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6999      	ldr	r1, [r3, #24]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	68da      	ldr	r2, [r3, #12]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	619a      	str	r2, [r3, #24]
      break;
 80066da:	e0c0      	b.n	800685e <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066e4:	d018      	beq.n	8006718 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a39      	ldr	r2, [pc, #228]	; (80067d0 <HAL_TIM_PWM_ConfigChannel+0x268>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d013      	beq.n	8006718 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a37      	ldr	r2, [pc, #220]	; (80067d4 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d00e      	beq.n	8006718 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a36      	ldr	r2, [pc, #216]	; (80067d8 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d009      	beq.n	8006718 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a34      	ldr	r2, [pc, #208]	; (80067dc <HAL_TIM_PWM_ConfigChannel+0x274>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d004      	beq.n	8006718 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 800670e:	f640 5189 	movw	r1, #3465	; 0xd89
 8006712:	482e      	ldr	r0, [pc, #184]	; (80067cc <HAL_TIM_PWM_ConfigChannel+0x264>)
 8006714:	f7fb f9b0 	bl	8001a78 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	4618      	mov	r0, r3
 8006720:	f000 fc74 	bl	800700c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699a      	ldr	r2, [r3, #24]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	699a      	ldr	r2, [r3, #24]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6999      	ldr	r1, [r3, #24]
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	021a      	lsls	r2, r3, #8
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	619a      	str	r2, [r3, #24]
      break;
 8006758:	e081      	b.n	800685e <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006762:	d013      	beq.n	800678c <HAL_TIM_PWM_ConfigChannel+0x224>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a19      	ldr	r2, [pc, #100]	; (80067d0 <HAL_TIM_PWM_ConfigChannel+0x268>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d00e      	beq.n	800678c <HAL_TIM_PWM_ConfigChannel+0x224>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a18      	ldr	r2, [pc, #96]	; (80067d4 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d009      	beq.n	800678c <HAL_TIM_PWM_ConfigChannel+0x224>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a16      	ldr	r2, [pc, #88]	; (80067d8 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d004      	beq.n	800678c <HAL_TIM_PWM_ConfigChannel+0x224>
 8006782:	f640 519a 	movw	r1, #3482	; 0xd9a
 8006786:	4811      	ldr	r0, [pc, #68]	; (80067cc <HAL_TIM_PWM_ConfigChannel+0x264>)
 8006788:	f7fb f976 	bl	8001a78 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68b9      	ldr	r1, [r7, #8]
 8006792:	4618      	mov	r0, r3
 8006794:	f000 fc78 	bl	8007088 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	69da      	ldr	r2, [r3, #28]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0208 	orr.w	r2, r2, #8
 80067a6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	69da      	ldr	r2, [r3, #28]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f022 0204 	bic.w	r2, r2, #4
 80067b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	69d9      	ldr	r1, [r3, #28]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	61da      	str	r2, [r3, #28]
      break;
 80067ca:	e048      	b.n	800685e <HAL_TIM_PWM_ConfigChannel+0x2f6>
 80067cc:	0800b300 	.word	0x0800b300
 80067d0:	40000400 	.word	0x40000400
 80067d4:	40000800 	.word	0x40000800
 80067d8:	40000c00 	.word	0x40000c00
 80067dc:	40010800 	.word	0x40010800
 80067e0:	40010c00 	.word	0x40010c00
 80067e4:	40011000 	.word	0x40011000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f0:	d013      	beq.n	800681a <HAL_TIM_PWM_ConfigChannel+0x2b2>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a20      	ldr	r2, [pc, #128]	; (8006878 <HAL_TIM_PWM_ConfigChannel+0x310>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d00e      	beq.n	800681a <HAL_TIM_PWM_ConfigChannel+0x2b2>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a1e      	ldr	r2, [pc, #120]	; (800687c <HAL_TIM_PWM_ConfigChannel+0x314>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d009      	beq.n	800681a <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a1d      	ldr	r2, [pc, #116]	; (8006880 <HAL_TIM_PWM_ConfigChannel+0x318>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d004      	beq.n	800681a <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8006810:	f640 51ab 	movw	r1, #3499	; 0xdab
 8006814:	481b      	ldr	r0, [pc, #108]	; (8006884 <HAL_TIM_PWM_ConfigChannel+0x31c>)
 8006816:	f7fb f92f 	bl	8001a78 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68b9      	ldr	r1, [r7, #8]
 8006820:	4618      	mov	r0, r3
 8006822:	f000 fc6e 	bl	8007102 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	69da      	ldr	r2, [r3, #28]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006834:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	69da      	ldr	r2, [r3, #28]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006844:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	69d9      	ldr	r1, [r3, #28]
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	021a      	lsls	r2, r3, #8
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	61da      	str	r2, [r3, #28]
      break;
 800685a:	e000      	b.n	800685e <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    default:
      break;
 800685c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	40000400 	.word	0x40000400
 800687c:	40000800 	.word	0x40000800
 8006880:	40000c00 	.word	0x40000c00
 8006884:	0800b300 	.word	0x0800b300

08006888 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006898:	2b01      	cmp	r3, #1
 800689a:	d101      	bne.n	80068a0 <HAL_TIM_ConfigClockSource+0x18>
 800689c:	2302      	movs	r3, #2
 800689e:	e2d7      	b.n	8006e50 <HAL_TIM_ConfigClockSource+0x5c8>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b8:	d029      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x86>
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068c2:	d024      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x86>
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d020      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x86>
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b10      	cmp	r3, #16
 80068d2:	d01c      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x86>
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b20      	cmp	r3, #32
 80068da:	d018      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x86>
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b30      	cmp	r3, #48	; 0x30
 80068e2:	d014      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x86>
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b40      	cmp	r3, #64	; 0x40
 80068ea:	d010      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x86>
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b50      	cmp	r3, #80	; 0x50
 80068f2:	d00c      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x86>
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b60      	cmp	r3, #96	; 0x60
 80068fa:	d008      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x86>
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b70      	cmp	r3, #112	; 0x70
 8006902:	d004      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x86>
 8006904:	f241 01d0 	movw	r1, #4304	; 0x10d0
 8006908:	4874      	ldr	r0, [pc, #464]	; (8006adc <HAL_TIM_ConfigClockSource+0x254>)
 800690a:	f7fb f8b5 	bl	8001a78 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800691c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006924:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b40      	cmp	r3, #64	; 0x40
 8006934:	f000 820a 	beq.w	8006d4c <HAL_TIM_ConfigClockSource+0x4c4>
 8006938:	2b40      	cmp	r3, #64	; 0x40
 800693a:	d80f      	bhi.n	800695c <HAL_TIM_ConfigClockSource+0xd4>
 800693c:	2b10      	cmp	r3, #16
 800693e:	f000 8256 	beq.w	8006dee <HAL_TIM_ConfigClockSource+0x566>
 8006942:	2b10      	cmp	r3, #16
 8006944:	d803      	bhi.n	800694e <HAL_TIM_ConfigClockSource+0xc6>
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 8251 	beq.w	8006dee <HAL_TIM_ConfigClockSource+0x566>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800694c:	e277      	b.n	8006e3e <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 800694e:	2b20      	cmp	r3, #32
 8006950:	f000 824d 	beq.w	8006dee <HAL_TIM_ConfigClockSource+0x566>
 8006954:	2b30      	cmp	r3, #48	; 0x30
 8006956:	f000 824a 	beq.w	8006dee <HAL_TIM_ConfigClockSource+0x566>
      break;
 800695a:	e270      	b.n	8006e3e <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 800695c:	2b70      	cmp	r3, #112	; 0x70
 800695e:	d04c      	beq.n	80069fa <HAL_TIM_ConfigClockSource+0x172>
 8006960:	2b70      	cmp	r3, #112	; 0x70
 8006962:	d806      	bhi.n	8006972 <HAL_TIM_ConfigClockSource+0xea>
 8006964:	2b50      	cmp	r3, #80	; 0x50
 8006966:	f000 8141 	beq.w	8006bec <HAL_TIM_ConfigClockSource+0x364>
 800696a:	2b60      	cmp	r3, #96	; 0x60
 800696c:	f000 818f 	beq.w	8006c8e <HAL_TIM_ConfigClockSource+0x406>
      break;
 8006970:	e265      	b.n	8006e3e <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 8006972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006976:	d004      	beq.n	8006982 <HAL_TIM_ConfigClockSource+0xfa>
 8006978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800697c:	f000 80c0 	beq.w	8006b00 <HAL_TIM_ConfigClockSource+0x278>
      break;
 8006980:	e25d      	b.n	8006e3e <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800698a:	f000 8257 	beq.w	8006e3c <HAL_TIM_ConfigClockSource+0x5b4>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a53      	ldr	r2, [pc, #332]	; (8006ae0 <HAL_TIM_ConfigClockSource+0x258>)
 8006994:	4293      	cmp	r3, r2
 8006996:	f000 8251 	beq.w	8006e3c <HAL_TIM_ConfigClockSource+0x5b4>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a51      	ldr	r2, [pc, #324]	; (8006ae4 <HAL_TIM_ConfigClockSource+0x25c>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	f000 824b 	beq.w	8006e3c <HAL_TIM_ConfigClockSource+0x5b4>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a4f      	ldr	r2, [pc, #316]	; (8006ae8 <HAL_TIM_ConfigClockSource+0x260>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	f000 8245 	beq.w	8006e3c <HAL_TIM_ConfigClockSource+0x5b4>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a4d      	ldr	r2, [pc, #308]	; (8006aec <HAL_TIM_ConfigClockSource+0x264>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	f000 823f 	beq.w	8006e3c <HAL_TIM_ConfigClockSource+0x5b4>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a4b      	ldr	r2, [pc, #300]	; (8006af0 <HAL_TIM_ConfigClockSource+0x268>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	f000 8239 	beq.w	8006e3c <HAL_TIM_ConfigClockSource+0x5b4>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a49      	ldr	r2, [pc, #292]	; (8006af4 <HAL_TIM_ConfigClockSource+0x26c>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	f000 8233 	beq.w	8006e3c <HAL_TIM_ConfigClockSource+0x5b4>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a47      	ldr	r2, [pc, #284]	; (8006af8 <HAL_TIM_ConfigClockSource+0x270>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	f000 822d 	beq.w	8006e3c <HAL_TIM_ConfigClockSource+0x5b4>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a45      	ldr	r2, [pc, #276]	; (8006afc <HAL_TIM_ConfigClockSource+0x274>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	f000 8227 	beq.w	8006e3c <HAL_TIM_ConfigClockSource+0x5b4>
 80069ee:	f241 01dc 	movw	r1, #4316	; 0x10dc
 80069f2:	483a      	ldr	r0, [pc, #232]	; (8006adc <HAL_TIM_ConfigClockSource+0x254>)
 80069f4:	f7fb f840 	bl	8001a78 <assert_failed>
      break;
 80069f8:	e220      	b.n	8006e3c <HAL_TIM_ConfigClockSource+0x5b4>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a02:	d018      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0x1ae>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a35      	ldr	r2, [pc, #212]	; (8006ae0 <HAL_TIM_ConfigClockSource+0x258>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d013      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0x1ae>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a34      	ldr	r2, [pc, #208]	; (8006ae4 <HAL_TIM_ConfigClockSource+0x25c>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d00e      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0x1ae>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a32      	ldr	r2, [pc, #200]	; (8006ae8 <HAL_TIM_ConfigClockSource+0x260>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d009      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0x1ae>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a33      	ldr	r2, [pc, #204]	; (8006af4 <HAL_TIM_ConfigClockSource+0x26c>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d004      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0x1ae>
 8006a2c:	f241 01e3 	movw	r1, #4323	; 0x10e3
 8006a30:	482a      	ldr	r0, [pc, #168]	; (8006adc <HAL_TIM_ConfigClockSource+0x254>)
 8006a32:	f7fb f821 	bl	8001a78 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d013      	beq.n	8006a66 <HAL_TIM_ConfigClockSource+0x1de>
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a46:	d00e      	beq.n	8006a66 <HAL_TIM_ConfigClockSource+0x1de>
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a50:	d009      	beq.n	8006a66 <HAL_TIM_ConfigClockSource+0x1de>
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a5a:	d004      	beq.n	8006a66 <HAL_TIM_ConfigClockSource+0x1de>
 8006a5c:	f241 01e6 	movw	r1, #4326	; 0x10e6
 8006a60:	481e      	ldr	r0, [pc, #120]	; (8006adc <HAL_TIM_ConfigClockSource+0x254>)
 8006a62:	f7fb f809 	bl	8001a78 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a6e:	d014      	beq.n	8006a9a <HAL_TIM_ConfigClockSource+0x212>
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d010      	beq.n	8006a9a <HAL_TIM_ConfigClockSource+0x212>
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00c      	beq.n	8006a9a <HAL_TIM_ConfigClockSource+0x212>
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d008      	beq.n	8006a9a <HAL_TIM_ConfigClockSource+0x212>
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	2b0a      	cmp	r3, #10
 8006a8e:	d004      	beq.n	8006a9a <HAL_TIM_ConfigClockSource+0x212>
 8006a90:	f241 01e7 	movw	r1, #4327	; 0x10e7
 8006a94:	4811      	ldr	r0, [pc, #68]	; (8006adc <HAL_TIM_ConfigClockSource+0x254>)
 8006a96:	f7fa ffef 	bl	8001a78 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	2b0f      	cmp	r3, #15
 8006aa0:	d904      	bls.n	8006aac <HAL_TIM_ConfigClockSource+0x224>
 8006aa2:	f241 01e8 	movw	r1, #4328	; 0x10e8
 8006aa6:	480d      	ldr	r0, [pc, #52]	; (8006adc <HAL_TIM_ConfigClockSource+0x254>)
 8006aa8:	f7fa ffe6 	bl	8001a78 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6818      	ldr	r0, [r3, #0]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	6899      	ldr	r1, [r3, #8]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	f000 fbd6 	bl	800726c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ace:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	609a      	str	r2, [r3, #8]
      break;
 8006ad8:	e1b1      	b.n	8006e3e <HAL_TIM_ConfigClockSource+0x5b6>
 8006ada:	bf00      	nop
 8006adc:	0800b300 	.word	0x0800b300
 8006ae0:	40000400 	.word	0x40000400
 8006ae4:	40000800 	.word	0x40000800
 8006ae8:	40000c00 	.word	0x40000c00
 8006aec:	40001000 	.word	0x40001000
 8006af0:	40001400 	.word	0x40001400
 8006af4:	40010800 	.word	0x40010800
 8006af8:	40010c00 	.word	0x40010c00
 8006afc:	40011000 	.word	0x40011000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b08:	d022      	beq.n	8006b50 <HAL_TIM_ConfigClockSource+0x2c8>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a88      	ldr	r2, [pc, #544]	; (8006d30 <HAL_TIM_ConfigClockSource+0x4a8>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d01d      	beq.n	8006b50 <HAL_TIM_ConfigClockSource+0x2c8>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a86      	ldr	r2, [pc, #536]	; (8006d34 <HAL_TIM_ConfigClockSource+0x4ac>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d018      	beq.n	8006b50 <HAL_TIM_ConfigClockSource+0x2c8>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a85      	ldr	r2, [pc, #532]	; (8006d38 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d013      	beq.n	8006b50 <HAL_TIM_ConfigClockSource+0x2c8>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a83      	ldr	r2, [pc, #524]	; (8006d3c <HAL_TIM_ConfigClockSource+0x4b4>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d00e      	beq.n	8006b50 <HAL_TIM_ConfigClockSource+0x2c8>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a82      	ldr	r2, [pc, #520]	; (8006d40 <HAL_TIM_ConfigClockSource+0x4b8>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d009      	beq.n	8006b50 <HAL_TIM_ConfigClockSource+0x2c8>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a80      	ldr	r2, [pc, #512]	; (8006d44 <HAL_TIM_ConfigClockSource+0x4bc>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d004      	beq.n	8006b50 <HAL_TIM_ConfigClockSource+0x2c8>
 8006b46:	f241 01fb 	movw	r1, #4347	; 0x10fb
 8006b4a:	487f      	ldr	r0, [pc, #508]	; (8006d48 <HAL_TIM_ConfigClockSource+0x4c0>)
 8006b4c:	f7fa ff94 	bl	8001a78 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d013      	beq.n	8006b80 <HAL_TIM_ConfigClockSource+0x2f8>
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b60:	d00e      	beq.n	8006b80 <HAL_TIM_ConfigClockSource+0x2f8>
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b6a:	d009      	beq.n	8006b80 <HAL_TIM_ConfigClockSource+0x2f8>
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b74:	d004      	beq.n	8006b80 <HAL_TIM_ConfigClockSource+0x2f8>
 8006b76:	f241 01fe 	movw	r1, #4350	; 0x10fe
 8006b7a:	4873      	ldr	r0, [pc, #460]	; (8006d48 <HAL_TIM_ConfigClockSource+0x4c0>)
 8006b7c:	f7fa ff7c 	bl	8001a78 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b88:	d014      	beq.n	8006bb4 <HAL_TIM_ConfigClockSource+0x32c>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d010      	beq.n	8006bb4 <HAL_TIM_ConfigClockSource+0x32c>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00c      	beq.n	8006bb4 <HAL_TIM_ConfigClockSource+0x32c>
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d008      	beq.n	8006bb4 <HAL_TIM_ConfigClockSource+0x32c>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	2b0a      	cmp	r3, #10
 8006ba8:	d004      	beq.n	8006bb4 <HAL_TIM_ConfigClockSource+0x32c>
 8006baa:	f241 01ff 	movw	r1, #4351	; 0x10ff
 8006bae:	4866      	ldr	r0, [pc, #408]	; (8006d48 <HAL_TIM_ConfigClockSource+0x4c0>)
 8006bb0:	f7fa ff62 	bl	8001a78 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	2b0f      	cmp	r3, #15
 8006bba:	d904      	bls.n	8006bc6 <HAL_TIM_ConfigClockSource+0x33e>
 8006bbc:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8006bc0:	4861      	ldr	r0, [pc, #388]	; (8006d48 <HAL_TIM_ConfigClockSource+0x4c0>)
 8006bc2:	f7fa ff59 	bl	8001a78 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6818      	ldr	r0, [r3, #0]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	6899      	ldr	r1, [r3, #8]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	f000 fb49 	bl	800726c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	689a      	ldr	r2, [r3, #8]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006be8:	609a      	str	r2, [r3, #8]
      break;
 8006bea:	e128      	b.n	8006e3e <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf4:	d018      	beq.n	8006c28 <HAL_TIM_ConfigClockSource+0x3a0>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a4d      	ldr	r2, [pc, #308]	; (8006d30 <HAL_TIM_ConfigClockSource+0x4a8>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d013      	beq.n	8006c28 <HAL_TIM_ConfigClockSource+0x3a0>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a4b      	ldr	r2, [pc, #300]	; (8006d34 <HAL_TIM_ConfigClockSource+0x4ac>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d00e      	beq.n	8006c28 <HAL_TIM_ConfigClockSource+0x3a0>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a4a      	ldr	r2, [pc, #296]	; (8006d38 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d009      	beq.n	8006c28 <HAL_TIM_ConfigClockSource+0x3a0>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a48      	ldr	r2, [pc, #288]	; (8006d3c <HAL_TIM_ConfigClockSource+0x4b4>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d004      	beq.n	8006c28 <HAL_TIM_ConfigClockSource+0x3a0>
 8006c1e:	f241 110f 	movw	r1, #4367	; 0x110f
 8006c22:	4849      	ldr	r0, [pc, #292]	; (8006d48 <HAL_TIM_ConfigClockSource+0x4c0>)
 8006c24:	f7fa ff28 	bl	8001a78 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c30:	d014      	beq.n	8006c5c <HAL_TIM_ConfigClockSource+0x3d4>
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d010      	beq.n	8006c5c <HAL_TIM_ConfigClockSource+0x3d4>
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00c      	beq.n	8006c5c <HAL_TIM_ConfigClockSource+0x3d4>
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d008      	beq.n	8006c5c <HAL_TIM_ConfigClockSource+0x3d4>
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	2b0a      	cmp	r3, #10
 8006c50:	d004      	beq.n	8006c5c <HAL_TIM_ConfigClockSource+0x3d4>
 8006c52:	f241 1112 	movw	r1, #4370	; 0x1112
 8006c56:	483c      	ldr	r0, [pc, #240]	; (8006d48 <HAL_TIM_ConfigClockSource+0x4c0>)
 8006c58:	f7fa ff0e 	bl	8001a78 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	2b0f      	cmp	r3, #15
 8006c62:	d904      	bls.n	8006c6e <HAL_TIM_ConfigClockSource+0x3e6>
 8006c64:	f241 1113 	movw	r1, #4371	; 0x1113
 8006c68:	4837      	ldr	r0, [pc, #220]	; (8006d48 <HAL_TIM_ConfigClockSource+0x4c0>)
 8006c6a:	f7fa ff05 	bl	8001a78 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6818      	ldr	r0, [r3, #0]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	6859      	ldr	r1, [r3, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f000 fa7f 	bl	800717e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2150      	movs	r1, #80	; 0x50
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 fad6 	bl	8007238 <TIM_ITRx_SetConfig>
      break;
 8006c8c:	e0d7      	b.n	8006e3e <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c96:	d018      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x442>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a24      	ldr	r2, [pc, #144]	; (8006d30 <HAL_TIM_ConfigClockSource+0x4a8>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d013      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x442>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a23      	ldr	r2, [pc, #140]	; (8006d34 <HAL_TIM_ConfigClockSource+0x4ac>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d00e      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x442>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a21      	ldr	r2, [pc, #132]	; (8006d38 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d009      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x442>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a20      	ldr	r2, [pc, #128]	; (8006d3c <HAL_TIM_ConfigClockSource+0x4b4>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d004      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x442>
 8006cc0:	f241 111f 	movw	r1, #4383	; 0x111f
 8006cc4:	4820      	ldr	r0, [pc, #128]	; (8006d48 <HAL_TIM_ConfigClockSource+0x4c0>)
 8006cc6:	f7fa fed7 	bl	8001a78 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cd2:	d014      	beq.n	8006cfe <HAL_TIM_ConfigClockSource+0x476>
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d010      	beq.n	8006cfe <HAL_TIM_ConfigClockSource+0x476>
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00c      	beq.n	8006cfe <HAL_TIM_ConfigClockSource+0x476>
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d008      	beq.n	8006cfe <HAL_TIM_ConfigClockSource+0x476>
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2b0a      	cmp	r3, #10
 8006cf2:	d004      	beq.n	8006cfe <HAL_TIM_ConfigClockSource+0x476>
 8006cf4:	f241 1122 	movw	r1, #4386	; 0x1122
 8006cf8:	4813      	ldr	r0, [pc, #76]	; (8006d48 <HAL_TIM_ConfigClockSource+0x4c0>)
 8006cfa:	f7fa febd 	bl	8001a78 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	2b0f      	cmp	r3, #15
 8006d04:	d904      	bls.n	8006d10 <HAL_TIM_ConfigClockSource+0x488>
 8006d06:	f241 1123 	movw	r1, #4387	; 0x1123
 8006d0a:	480f      	ldr	r0, [pc, #60]	; (8006d48 <HAL_TIM_ConfigClockSource+0x4c0>)
 8006d0c:	f7fa feb4 	bl	8001a78 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6818      	ldr	r0, [r3, #0]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	6859      	ldr	r1, [r3, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	f000 fa5c 	bl	80071da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2160      	movs	r1, #96	; 0x60
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 fa85 	bl	8007238 <TIM_ITRx_SetConfig>
      break;
 8006d2e:	e086      	b.n	8006e3e <HAL_TIM_ConfigClockSource+0x5b6>
 8006d30:	40000400 	.word	0x40000400
 8006d34:	40000800 	.word	0x40000800
 8006d38:	40000c00 	.word	0x40000c00
 8006d3c:	40010800 	.word	0x40010800
 8006d40:	40010c00 	.word	0x40010c00
 8006d44:	40011000 	.word	0x40011000
 8006d48:	0800b300 	.word	0x0800b300
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d54:	d018      	beq.n	8006d88 <HAL_TIM_ConfigClockSource+0x500>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a3f      	ldr	r2, [pc, #252]	; (8006e58 <HAL_TIM_ConfigClockSource+0x5d0>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d013      	beq.n	8006d88 <HAL_TIM_ConfigClockSource+0x500>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a3d      	ldr	r2, [pc, #244]	; (8006e5c <HAL_TIM_ConfigClockSource+0x5d4>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d00e      	beq.n	8006d88 <HAL_TIM_ConfigClockSource+0x500>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a3c      	ldr	r2, [pc, #240]	; (8006e60 <HAL_TIM_ConfigClockSource+0x5d8>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d009      	beq.n	8006d88 <HAL_TIM_ConfigClockSource+0x500>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a3a      	ldr	r2, [pc, #232]	; (8006e64 <HAL_TIM_ConfigClockSource+0x5dc>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d004      	beq.n	8006d88 <HAL_TIM_ConfigClockSource+0x500>
 8006d7e:	f241 112f 	movw	r1, #4399	; 0x112f
 8006d82:	4839      	ldr	r0, [pc, #228]	; (8006e68 <HAL_TIM_ConfigClockSource+0x5e0>)
 8006d84:	f7fa fe78 	bl	8001a78 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d90:	d014      	beq.n	8006dbc <HAL_TIM_ConfigClockSource+0x534>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d010      	beq.n	8006dbc <HAL_TIM_ConfigClockSource+0x534>
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00c      	beq.n	8006dbc <HAL_TIM_ConfigClockSource+0x534>
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d008      	beq.n	8006dbc <HAL_TIM_ConfigClockSource+0x534>
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	2b0a      	cmp	r3, #10
 8006db0:	d004      	beq.n	8006dbc <HAL_TIM_ConfigClockSource+0x534>
 8006db2:	f241 1132 	movw	r1, #4402	; 0x1132
 8006db6:	482c      	ldr	r0, [pc, #176]	; (8006e68 <HAL_TIM_ConfigClockSource+0x5e0>)
 8006db8:	f7fa fe5e 	bl	8001a78 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	2b0f      	cmp	r3, #15
 8006dc2:	d904      	bls.n	8006dce <HAL_TIM_ConfigClockSource+0x546>
 8006dc4:	f241 1133 	movw	r1, #4403	; 0x1133
 8006dc8:	4827      	ldr	r0, [pc, #156]	; (8006e68 <HAL_TIM_ConfigClockSource+0x5e0>)
 8006dca:	f7fa fe55 	bl	8001a78 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	6859      	ldr	r1, [r3, #4]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	f000 f9cf 	bl	800717e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2140      	movs	r1, #64	; 0x40
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 fa26 	bl	8007238 <TIM_ITRx_SetConfig>
      break;
 8006dec:	e027      	b.n	8006e3e <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df6:	d018      	beq.n	8006e2a <HAL_TIM_ConfigClockSource+0x5a2>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a16      	ldr	r2, [pc, #88]	; (8006e58 <HAL_TIM_ConfigClockSource+0x5d0>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d013      	beq.n	8006e2a <HAL_TIM_ConfigClockSource+0x5a2>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a15      	ldr	r2, [pc, #84]	; (8006e5c <HAL_TIM_ConfigClockSource+0x5d4>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00e      	beq.n	8006e2a <HAL_TIM_ConfigClockSource+0x5a2>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a13      	ldr	r2, [pc, #76]	; (8006e60 <HAL_TIM_ConfigClockSource+0x5d8>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d009      	beq.n	8006e2a <HAL_TIM_ConfigClockSource+0x5a2>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a12      	ldr	r2, [pc, #72]	; (8006e64 <HAL_TIM_ConfigClockSource+0x5dc>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d004      	beq.n	8006e2a <HAL_TIM_ConfigClockSource+0x5a2>
 8006e20:	f241 1142 	movw	r1, #4418	; 0x1142
 8006e24:	4810      	ldr	r0, [pc, #64]	; (8006e68 <HAL_TIM_ConfigClockSource+0x5e0>)
 8006e26:	f7fa fe27 	bl	8001a78 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4619      	mov	r1, r3
 8006e34:	4610      	mov	r0, r2
 8006e36:	f000 f9ff 	bl	8007238 <TIM_ITRx_SetConfig>
      break;
 8006e3a:	e000      	b.n	8006e3e <HAL_TIM_ConfigClockSource+0x5b6>
      break;
 8006e3c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	40000400 	.word	0x40000400
 8006e5c:	40000800 	.word	0x40000800
 8006e60:	40000c00 	.word	0x40000c00
 8006e64:	40010800 	.word	0x40010800
 8006e68:	0800b300 	.word	0x0800b300

08006e6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bc80      	pop	{r7}
 8006e7c:	4770      	bx	lr

08006e7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b083      	sub	sp, #12
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e86:	bf00      	nop
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bc80      	pop	{r7}
 8006e8e:	4770      	bx	lr

08006e90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bc80      	pop	{r7}
 8006ea0:	4770      	bx	lr

08006ea2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b083      	sub	sp, #12
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006eaa:	bf00      	nop
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bc80      	pop	{r7}
 8006eb2:	4770      	bx	lr

08006eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eca:	d00f      	beq.n	8006eec <TIM_Base_SetConfig+0x38>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a2b      	ldr	r2, [pc, #172]	; (8006f7c <TIM_Base_SetConfig+0xc8>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d00b      	beq.n	8006eec <TIM_Base_SetConfig+0x38>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a2a      	ldr	r2, [pc, #168]	; (8006f80 <TIM_Base_SetConfig+0xcc>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d007      	beq.n	8006eec <TIM_Base_SetConfig+0x38>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a29      	ldr	r2, [pc, #164]	; (8006f84 <TIM_Base_SetConfig+0xd0>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d003      	beq.n	8006eec <TIM_Base_SetConfig+0x38>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a28      	ldr	r2, [pc, #160]	; (8006f88 <TIM_Base_SetConfig+0xd4>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d108      	bne.n	8006efe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f04:	d017      	beq.n	8006f36 <TIM_Base_SetConfig+0x82>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a1c      	ldr	r2, [pc, #112]	; (8006f7c <TIM_Base_SetConfig+0xc8>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d013      	beq.n	8006f36 <TIM_Base_SetConfig+0x82>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a1b      	ldr	r2, [pc, #108]	; (8006f80 <TIM_Base_SetConfig+0xcc>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d00f      	beq.n	8006f36 <TIM_Base_SetConfig+0x82>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a1a      	ldr	r2, [pc, #104]	; (8006f84 <TIM_Base_SetConfig+0xd0>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d00b      	beq.n	8006f36 <TIM_Base_SetConfig+0x82>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a19      	ldr	r2, [pc, #100]	; (8006f88 <TIM_Base_SetConfig+0xd4>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d007      	beq.n	8006f36 <TIM_Base_SetConfig+0x82>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a18      	ldr	r2, [pc, #96]	; (8006f8c <TIM_Base_SetConfig+0xd8>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d003      	beq.n	8006f36 <TIM_Base_SetConfig+0x82>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a17      	ldr	r2, [pc, #92]	; (8006f90 <TIM_Base_SetConfig+0xdc>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d108      	bne.n	8006f48 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	615a      	str	r2, [r3, #20]
}
 8006f72:	bf00      	nop
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bc80      	pop	{r7}
 8006f7a:	4770      	bx	lr
 8006f7c:	40000400 	.word	0x40000400
 8006f80:	40000800 	.word	0x40000800
 8006f84:	40000c00 	.word	0x40000c00
 8006f88:	40010800 	.word	0x40010800
 8006f8c:	40010c00 	.word	0x40010c00
 8006f90:	40011000 	.word	0x40011000

08006f94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b087      	sub	sp, #28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	f023 0201 	bic.w	r2, r3, #1
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f023 0303 	bic.w	r3, r3, #3
 8006fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f023 0302 	bic.w	r3, r3, #2
 8006fdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	621a      	str	r2, [r3, #32]
}
 8007002:	bf00      	nop
 8007004:	371c      	adds	r7, #28
 8007006:	46bd      	mov	sp, r7
 8007008:	bc80      	pop	{r7}
 800700a:	4770      	bx	lr

0800700c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800700c:	b480      	push	{r7}
 800700e:	b087      	sub	sp, #28
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	f023 0210 	bic.w	r2, r3, #16
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800703a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	021b      	lsls	r3, r3, #8
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	4313      	orrs	r3, r2
 800704e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f023 0320 	bic.w	r3, r3, #32
 8007056:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	011b      	lsls	r3, r3, #4
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	4313      	orrs	r3, r2
 8007062:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	621a      	str	r2, [r3, #32]
}
 800707e:	bf00      	nop
 8007080:	371c      	adds	r7, #28
 8007082:	46bd      	mov	sp, r7
 8007084:	bc80      	pop	{r7}
 8007086:	4770      	bx	lr

08007088 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007088:	b480      	push	{r7}
 800708a:	b087      	sub	sp, #28
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f023 0303 	bic.w	r3, r3, #3
 80070be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	021b      	lsls	r3, r3, #8
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	4313      	orrs	r3, r2
 80070dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	621a      	str	r2, [r3, #32]
}
 80070f8:	bf00      	nop
 80070fa:	371c      	adds	r7, #28
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bc80      	pop	{r7}
 8007100:	4770      	bx	lr

08007102 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007102:	b480      	push	{r7}
 8007104:	b087      	sub	sp, #28
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	69db      	ldr	r3, [r3, #28]
 8007128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007130:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007138:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	021b      	lsls	r3, r3, #8
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	4313      	orrs	r3, r2
 8007144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800714c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	031b      	lsls	r3, r3, #12
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	4313      	orrs	r3, r2
 8007158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	621a      	str	r2, [r3, #32]
}
 8007174:	bf00      	nop
 8007176:	371c      	adds	r7, #28
 8007178:	46bd      	mov	sp, r7
 800717a:	bc80      	pop	{r7}
 800717c:	4770      	bx	lr

0800717e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800717e:	b480      	push	{r7}
 8007180:	b087      	sub	sp, #28
 8007182:	af00      	add	r7, sp, #0
 8007184:	60f8      	str	r0, [r7, #12]
 8007186:	60b9      	str	r1, [r7, #8]
 8007188:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6a1b      	ldr	r3, [r3, #32]
 8007194:	f023 0201 	bic.w	r2, r3, #1
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	011b      	lsls	r3, r3, #4
 80071ae:	693a      	ldr	r2, [r7, #16]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	f023 030a 	bic.w	r3, r3, #10
 80071ba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	621a      	str	r2, [r3, #32]
}
 80071d0:	bf00      	nop
 80071d2:	371c      	adds	r7, #28
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bc80      	pop	{r7}
 80071d8:	4770      	bx	lr

080071da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071da:	b480      	push	{r7}
 80071dc:	b087      	sub	sp, #28
 80071de:	af00      	add	r7, sp, #0
 80071e0:	60f8      	str	r0, [r7, #12]
 80071e2:	60b9      	str	r1, [r7, #8]
 80071e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	f023 0210 	bic.w	r2, r3, #16
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6a1b      	ldr	r3, [r3, #32]
 80071fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007204:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	031b      	lsls	r3, r3, #12
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	4313      	orrs	r3, r2
 800720e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007216:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	011b      	lsls	r3, r3, #4
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	4313      	orrs	r3, r2
 8007220:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	621a      	str	r2, [r3, #32]
}
 800722e:	bf00      	nop
 8007230:	371c      	adds	r7, #28
 8007232:	46bd      	mov	sp, r7
 8007234:	bc80      	pop	{r7}
 8007236:	4770      	bx	lr

08007238 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800724e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	4313      	orrs	r3, r2
 8007256:	f043 0307 	orr.w	r3, r3, #7
 800725a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	609a      	str	r2, [r3, #8]
}
 8007262:	bf00      	nop
 8007264:	3714      	adds	r7, #20
 8007266:	46bd      	mov	sp, r7
 8007268:	bc80      	pop	{r7}
 800726a:	4770      	bx	lr

0800726c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
 8007278:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007286:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	021a      	lsls	r2, r3, #8
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	431a      	orrs	r2, r3
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	4313      	orrs	r3, r2
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	4313      	orrs	r3, r2
 8007298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	609a      	str	r2, [r3, #8]
}
 80072a0:	bf00      	nop
 80072a2:	371c      	adds	r7, #28
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bc80      	pop	{r7}
 80072a8:	4770      	bx	lr
	...

080072ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072be:	d01c      	beq.n	80072fa <TIM_CCxChannelCmd+0x4e>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4a26      	ldr	r2, [pc, #152]	; (800735c <TIM_CCxChannelCmd+0xb0>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d018      	beq.n	80072fa <TIM_CCxChannelCmd+0x4e>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	4a25      	ldr	r2, [pc, #148]	; (8007360 <TIM_CCxChannelCmd+0xb4>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d014      	beq.n	80072fa <TIM_CCxChannelCmd+0x4e>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	4a24      	ldr	r2, [pc, #144]	; (8007364 <TIM_CCxChannelCmd+0xb8>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d010      	beq.n	80072fa <TIM_CCxChannelCmd+0x4e>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4a23      	ldr	r2, [pc, #140]	; (8007368 <TIM_CCxChannelCmd+0xbc>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d00c      	beq.n	80072fa <TIM_CCxChannelCmd+0x4e>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4a22      	ldr	r2, [pc, #136]	; (800736c <TIM_CCxChannelCmd+0xc0>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d008      	beq.n	80072fa <TIM_CCxChannelCmd+0x4e>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4a21      	ldr	r2, [pc, #132]	; (8007370 <TIM_CCxChannelCmd+0xc4>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d004      	beq.n	80072fa <TIM_CCxChannelCmd+0x4e>
 80072f0:	f641 0169 	movw	r1, #6249	; 0x1869
 80072f4:	481f      	ldr	r0, [pc, #124]	; (8007374 <TIM_CCxChannelCmd+0xc8>)
 80072f6:	f7fa fbbf 	bl	8001a78 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d010      	beq.n	8007322 <TIM_CCxChannelCmd+0x76>
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	2b04      	cmp	r3, #4
 8007304:	d00d      	beq.n	8007322 <TIM_CCxChannelCmd+0x76>
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	2b08      	cmp	r3, #8
 800730a:	d00a      	beq.n	8007322 <TIM_CCxChannelCmd+0x76>
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	2b0c      	cmp	r3, #12
 8007310:	d007      	beq.n	8007322 <TIM_CCxChannelCmd+0x76>
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	2b3c      	cmp	r3, #60	; 0x3c
 8007316:	d004      	beq.n	8007322 <TIM_CCxChannelCmd+0x76>
 8007318:	f641 016a 	movw	r1, #6250	; 0x186a
 800731c:	4815      	ldr	r0, [pc, #84]	; (8007374 <TIM_CCxChannelCmd+0xc8>)
 800731e:	f7fa fbab 	bl	8001a78 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	f003 031f 	and.w	r3, r3, #31
 8007328:	2201      	movs	r2, #1
 800732a:	fa02 f303 	lsl.w	r3, r2, r3
 800732e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6a1a      	ldr	r2, [r3, #32]
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	43db      	mvns	r3, r3
 8007338:	401a      	ands	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6a1a      	ldr	r2, [r3, #32]
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	f003 031f 	and.w	r3, r3, #31
 8007348:	6879      	ldr	r1, [r7, #4]
 800734a:	fa01 f303 	lsl.w	r3, r1, r3
 800734e:	431a      	orrs	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	621a      	str	r2, [r3, #32]
}
 8007354:	bf00      	nop
 8007356:	3718      	adds	r7, #24
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	40000400 	.word	0x40000400
 8007360:	40000800 	.word	0x40000800
 8007364:	40000c00 	.word	0x40000c00
 8007368:	40010800 	.word	0x40010800
 800736c:	40010c00 	.word	0x40010c00
 8007370:	40011000 	.word	0x40011000
 8007374:	0800b300 	.word	0x0800b300

08007378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800738a:	d017      	beq.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a41      	ldr	r2, [pc, #260]	; (8007498 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d012      	beq.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a40      	ldr	r2, [pc, #256]	; (800749c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d00d      	beq.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a3e      	ldr	r2, [pc, #248]	; (80074a0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d008      	beq.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a3d      	ldr	r2, [pc, #244]	; (80074a4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d003      	beq.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80073b4:	215a      	movs	r1, #90	; 0x5a
 80073b6:	483c      	ldr	r0, [pc, #240]	; (80074a8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80073b8:	f7fa fb5e 	bl	8001a78 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d01f      	beq.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2b10      	cmp	r3, #16
 80073ca:	d01b      	beq.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b20      	cmp	r3, #32
 80073d2:	d017      	beq.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b30      	cmp	r3, #48	; 0x30
 80073da:	d013      	beq.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b40      	cmp	r3, #64	; 0x40
 80073e2:	d00f      	beq.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2b50      	cmp	r3, #80	; 0x50
 80073ea:	d00b      	beq.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b60      	cmp	r3, #96	; 0x60
 80073f2:	d007      	beq.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b70      	cmp	r3, #112	; 0x70
 80073fa:	d003      	beq.n	8007404 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80073fc:	215b      	movs	r1, #91	; 0x5b
 80073fe:	482a      	ldr	r0, [pc, #168]	; (80074a8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8007400:	f7fa fb3a 	bl	8001a78 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	2b80      	cmp	r3, #128	; 0x80
 800740a:	d007      	beq.n	800741c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d003      	beq.n	800741c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8007414:	215c      	movs	r1, #92	; 0x5c
 8007416:	4824      	ldr	r0, [pc, #144]	; (80074a8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8007418:	f7fa fb2e 	bl	8001a78 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007422:	2b01      	cmp	r3, #1
 8007424:	d101      	bne.n	800742a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
 8007426:	2302      	movs	r3, #2
 8007428:	e032      	b.n	8007490 <HAL_TIMEx_MasterConfigSynchronization+0x118>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2202      	movs	r2, #2
 8007436:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007450:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	4313      	orrs	r3, r2
 800745a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007462:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	4313      	orrs	r3, r2
 800746c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	40000400 	.word	0x40000400
 800749c:	40000800 	.word	0x40000800
 80074a0:	40000c00 	.word	0x40000c00
 80074a4:	40010800 	.word	0x40010800
 80074a8:	0800b338 	.word	0x0800b338

080074ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d101      	bne.n	80074be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e0aa      	b.n	8007614 <HAL_UART_Init+0x168>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d02c      	beq.n	8007520 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a54      	ldr	r2, [pc, #336]	; (800761c <HAL_UART_Init+0x170>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d00e      	beq.n	80074ee <HAL_UART_Init+0x42>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a52      	ldr	r2, [pc, #328]	; (8007620 <HAL_UART_Init+0x174>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d009      	beq.n	80074ee <HAL_UART_Init+0x42>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a51      	ldr	r2, [pc, #324]	; (8007624 <HAL_UART_Init+0x178>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d004      	beq.n	80074ee <HAL_UART_Init+0x42>
 80074e4:	f240 1145 	movw	r1, #325	; 0x145
 80074e8:	484f      	ldr	r0, [pc, #316]	; (8007628 <HAL_UART_Init+0x17c>)
 80074ea:	f7fa fac5 	bl	8001a78 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d032      	beq.n	800755c <HAL_UART_Init+0xb0>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074fe:	d02d      	beq.n	800755c <HAL_UART_Init+0xb0>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007508:	d028      	beq.n	800755c <HAL_UART_Init+0xb0>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007512:	d023      	beq.n	800755c <HAL_UART_Init+0xb0>
 8007514:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8007518:	4843      	ldr	r0, [pc, #268]	; (8007628 <HAL_UART_Init+0x17c>)
 800751a:	f7fa faad 	bl	8001a78 <assert_failed>
 800751e:	e01d      	b.n	800755c <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a3d      	ldr	r2, [pc, #244]	; (800761c <HAL_UART_Init+0x170>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d018      	beq.n	800755c <HAL_UART_Init+0xb0>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a3c      	ldr	r2, [pc, #240]	; (8007620 <HAL_UART_Init+0x174>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d013      	beq.n	800755c <HAL_UART_Init+0xb0>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a3a      	ldr	r2, [pc, #232]	; (8007624 <HAL_UART_Init+0x178>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d00e      	beq.n	800755c <HAL_UART_Init+0xb0>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a3a      	ldr	r2, [pc, #232]	; (800762c <HAL_UART_Init+0x180>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d009      	beq.n	800755c <HAL_UART_Init+0xb0>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a38      	ldr	r2, [pc, #224]	; (8007630 <HAL_UART_Init+0x184>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d004      	beq.n	800755c <HAL_UART_Init+0xb0>
 8007552:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8007556:	4834      	ldr	r0, [pc, #208]	; (8007628 <HAL_UART_Init+0x17c>)
 8007558:	f7fa fa8e 	bl	8001a78 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d009      	beq.n	8007578 <HAL_UART_Init+0xcc>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800756c:	d004      	beq.n	8007578 <HAL_UART_Init+0xcc>
 800756e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8007572:	482d      	ldr	r0, [pc, #180]	; (8007628 <HAL_UART_Init+0x17c>)
 8007574:	f7fa fa80 	bl	8001a78 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	69db      	ldr	r3, [r3, #28]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d009      	beq.n	8007594 <HAL_UART_Init+0xe8>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007588:	d004      	beq.n	8007594 <HAL_UART_Init+0xe8>
 800758a:	f240 114d 	movw	r1, #333	; 0x14d
 800758e:	4826      	ldr	r0, [pc, #152]	; (8007628 <HAL_UART_Init+0x17c>)
 8007590:	f7fa fa72 	bl	8001a78 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b00      	cmp	r3, #0
 800759e:	d106      	bne.n	80075ae <HAL_UART_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f7fa fe8b 	bl	80022c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2224      	movs	r2, #36	; 0x24
 80075b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68da      	ldr	r2, [r3, #12]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075c4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fa60 	bl	8007a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	691a      	ldr	r2, [r3, #16]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	695a      	ldr	r2, [r3, #20]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075ea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68da      	ldr	r2, [r3, #12]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075fa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2220      	movs	r2, #32
 8007606:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2220      	movs	r2, #32
 800760e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	40013800 	.word	0x40013800
 8007620:	40004400 	.word	0x40004400
 8007624:	40004800 	.word	0x40004800
 8007628:	0800b374 	.word	0x0800b374
 800762c:	40004c00 	.word	0x40004c00
 8007630:	40005000 	.word	0x40005000

08007634 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b088      	sub	sp, #32
 8007638:	af02      	add	r7, sp, #8
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	603b      	str	r3, [r7, #0]
 8007640:	4613      	mov	r3, r2
 8007642:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007644:	2300      	movs	r3, #0
 8007646:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b20      	cmp	r3, #32
 8007652:	f040 8083 	bne.w	800775c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d002      	beq.n	8007662 <HAL_UART_Transmit+0x2e>
 800765c:	88fb      	ldrh	r3, [r7, #6]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d101      	bne.n	8007666 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e07b      	b.n	800775e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800766c:	2b01      	cmp	r3, #1
 800766e:	d101      	bne.n	8007674 <HAL_UART_Transmit+0x40>
 8007670:	2302      	movs	r3, #2
 8007672:	e074      	b.n	800775e <HAL_UART_Transmit+0x12a>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2221      	movs	r2, #33	; 0x21
 8007686:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800768a:	f7fa ff05 	bl	8002498 <HAL_GetTick>
 800768e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	88fa      	ldrh	r2, [r7, #6]
 8007694:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	88fa      	ldrh	r2, [r7, #6]
 800769a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800769c:	e042      	b.n	8007724 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	3b01      	subs	r3, #1
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076b4:	d122      	bne.n	80076fc <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	2200      	movs	r2, #0
 80076be:	2180      	movs	r1, #128	; 0x80
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 f966 	bl	8007992 <UART_WaitOnFlagUntilTimeout>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d001      	beq.n	80076d0 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e046      	b.n	800775e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	881b      	ldrh	r3, [r3, #0]
 80076d8:	461a      	mov	r2, r3
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076e2:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d103      	bne.n	80076f4 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	3302      	adds	r3, #2
 80076f0:	60bb      	str	r3, [r7, #8]
 80076f2:	e017      	b.n	8007724 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	3301      	adds	r3, #1
 80076f8:	60bb      	str	r3, [r7, #8]
 80076fa:	e013      	b.n	8007724 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	9300      	str	r3, [sp, #0]
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	2200      	movs	r2, #0
 8007704:	2180      	movs	r1, #128	; 0x80
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f000 f943 	bl	8007992 <UART_WaitOnFlagUntilTimeout>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e023      	b.n	800775e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	1c5a      	adds	r2, r3, #1
 800771a:	60ba      	str	r2, [r7, #8]
 800771c:	781a      	ldrb	r2, [r3, #0]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007728:	b29b      	uxth	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1b7      	bne.n	800769e <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	2200      	movs	r2, #0
 8007736:	2140      	movs	r1, #64	; 0x40
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f000 f92a 	bl	8007992 <UART_WaitOnFlagUntilTimeout>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e00a      	b.n	800775e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2220      	movs	r2, #32
 800774c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	e000      	b.n	800775e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800775c:	2302      	movs	r3, #2
  }
}
 800775e:	4618      	mov	r0, r3
 8007760:	3718      	adds	r7, #24
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
	...

08007768 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b086      	sub	sp, #24
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	4613      	mov	r3, r2
 8007774:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b20      	cmp	r3, #32
 8007780:	d166      	bne.n	8007850 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <HAL_UART_Receive_DMA+0x26>
 8007788:	88fb      	ldrh	r3, [r7, #6]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d101      	bne.n	8007792 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e05f      	b.n	8007852 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007798:	2b01      	cmp	r3, #1
 800779a:	d101      	bne.n	80077a0 <HAL_UART_Receive_DMA+0x38>
 800779c:	2302      	movs	r3, #2
 800779e:	e058      	b.n	8007852 <HAL_UART_Receive_DMA+0xea>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	88fa      	ldrh	r2, [r7, #6]
 80077b2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2222      	movs	r2, #34	; 0x22
 80077be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c6:	4a25      	ldr	r2, [pc, #148]	; (800785c <HAL_UART_Receive_DMA+0xf4>)
 80077c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ce:	4a24      	ldr	r2, [pc, #144]	; (8007860 <HAL_UART_Receive_DMA+0xf8>)
 80077d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d6:	4a23      	ldr	r2, [pc, #140]	; (8007864 <HAL_UART_Receive_DMA+0xfc>)
 80077d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077de:	2200      	movs	r2, #0
 80077e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 80077e2:	f107 0308 	add.w	r3, r7, #8
 80077e6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3304      	adds	r3, #4
 80077f2:	4619      	mov	r1, r3
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	88fb      	ldrh	r3, [r7, #6]
 80077fa:	f7fb ff27 	bl	800364c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80077fe:	2300      	movs	r3, #0
 8007800:	613b      	str	r3, [r7, #16]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	613b      	str	r3, [r7, #16]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	613b      	str	r3, [r7, #16]
 8007812:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68da      	ldr	r2, [r3, #12]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800782a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	695a      	ldr	r2, [r3, #20]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f042 0201 	orr.w	r2, r2, #1
 800783a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	695a      	ldr	r2, [r3, #20]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800784a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800784c:	2300      	movs	r3, #0
 800784e:	e000      	b.n	8007852 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007850:	2302      	movs	r3, #2
  }
}
 8007852:	4618      	mov	r0, r3
 8007854:	3718      	adds	r7, #24
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	0800787b 	.word	0x0800787b
 8007860:	080078e3 	.word	0x080078e3
 8007864:	080078ff 	.word	0x080078ff

08007868 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	bc80      	pop	{r7}
 8007878:	4770      	bx	lr

0800787a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b084      	sub	sp, #16
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007886:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 0320 	and.w	r3, r3, #32
 8007892:	2b00      	cmp	r3, #0
 8007894:	d11e      	bne.n	80078d4 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68da      	ldr	r2, [r3, #12]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078aa:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	695a      	ldr	r2, [r3, #20]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f022 0201 	bic.w	r2, r2, #1
 80078ba:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	695a      	ldr	r2, [r3, #20]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078ca:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2220      	movs	r2, #32
 80078d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f7f9 fb05 	bl	8000ee4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078da:	bf00      	nop
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b084      	sub	sp, #16
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f7ff ffb9 	bl	8007868 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078f6:	bf00      	nop
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007906:	2300      	movs	r3, #0
 8007908:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800791a:	2b80      	cmp	r3, #128	; 0x80
 800791c:	bf0c      	ite	eq
 800791e:	2301      	moveq	r3, #1
 8007920:	2300      	movne	r3, #0
 8007922:	b2db      	uxtb	r3, r3
 8007924:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b21      	cmp	r3, #33	; 0x21
 8007930:	d108      	bne.n	8007944 <UART_DMAError+0x46>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d005      	beq.n	8007944 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2200      	movs	r2, #0
 800793c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800793e:	68b8      	ldr	r0, [r7, #8]
 8007940:	f000 f871 	bl	8007a26 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800794e:	2b40      	cmp	r3, #64	; 0x40
 8007950:	bf0c      	ite	eq
 8007952:	2301      	moveq	r3, #1
 8007954:	2300      	movne	r3, #0
 8007956:	b2db      	uxtb	r3, r3
 8007958:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b22      	cmp	r3, #34	; 0x22
 8007964:	d108      	bne.n	8007978 <UART_DMAError+0x7a>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d005      	beq.n	8007978 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	2200      	movs	r2, #0
 8007970:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007972:	68b8      	ldr	r0, [r7, #8]
 8007974:	f000 f86c 	bl	8007a50 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800797c:	f043 0210 	orr.w	r2, r3, #16
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007984:	68b8      	ldr	r0, [r7, #8]
 8007986:	f7f9 facf 	bl	8000f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800798a:	bf00      	nop
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b084      	sub	sp, #16
 8007996:	af00      	add	r7, sp, #0
 8007998:	60f8      	str	r0, [r7, #12]
 800799a:	60b9      	str	r1, [r7, #8]
 800799c:	603b      	str	r3, [r7, #0]
 800799e:	4613      	mov	r3, r2
 80079a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079a2:	e02c      	b.n	80079fe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079aa:	d028      	beq.n	80079fe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d007      	beq.n	80079c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80079b2:	f7fa fd71 	bl	8002498 <HAL_GetTick>
 80079b6:	4602      	mov	r2, r0
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	69ba      	ldr	r2, [r7, #24]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d21d      	bcs.n	80079fe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68da      	ldr	r2, [r3, #12]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80079d0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	695a      	ldr	r2, [r3, #20]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f022 0201 	bic.w	r2, r2, #1
 80079e0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2220      	movs	r2, #32
 80079e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2220      	movs	r2, #32
 80079ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e00f      	b.n	8007a1e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	4013      	ands	r3, r2
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	bf0c      	ite	eq
 8007a0e:	2301      	moveq	r3, #1
 8007a10:	2300      	movne	r3, #0
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	461a      	mov	r2, r3
 8007a16:	79fb      	ldrb	r3, [r7, #7]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d0c3      	beq.n	80079a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b083      	sub	sp, #12
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68da      	ldr	r2, [r3, #12]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007a3c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2220      	movs	r2, #32
 8007a42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8007a46:	bf00      	nop
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bc80      	pop	{r7}
 8007a4e:	4770      	bx	lr

08007a50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68da      	ldr	r2, [r3, #12]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007a66:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	695a      	ldr	r2, [r3, #20]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f022 0201 	bic.w	r2, r2, #1
 8007a76:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bc80      	pop	{r7}
 8007a88:	4770      	bx	lr
	...

08007a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	4ab2      	ldr	r2, [pc, #712]	; (8007d64 <UART_SetConfig+0x2d8>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d904      	bls.n	8007aa8 <UART_SetConfig+0x1c>
 8007a9e:	f640 31e2 	movw	r1, #3042	; 0xbe2
 8007aa2:	48b1      	ldr	r0, [pc, #708]	; (8007d68 <UART_SetConfig+0x2dc>)
 8007aa4:	f7f9 ffe8 	bl	8001a78 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d009      	beq.n	8007ac4 <UART_SetConfig+0x38>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ab8:	d004      	beq.n	8007ac4 <UART_SetConfig+0x38>
 8007aba:	f640 31e3 	movw	r1, #3043	; 0xbe3
 8007abe:	48aa      	ldr	r0, [pc, #680]	; (8007d68 <UART_SetConfig+0x2dc>)
 8007ac0:	f7f9 ffda 	bl	8001a78 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00e      	beq.n	8007aea <UART_SetConfig+0x5e>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ad4:	d009      	beq.n	8007aea <UART_SetConfig+0x5e>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007ade:	d004      	beq.n	8007aea <UART_SetConfig+0x5e>
 8007ae0:	f640 31e4 	movw	r1, #3044	; 0xbe4
 8007ae4:	48a0      	ldr	r0, [pc, #640]	; (8007d68 <UART_SetConfig+0x2dc>)
 8007ae6:	f7f9 ffc7 	bl	8001a78 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	695a      	ldr	r2, [r3, #20]
 8007aee:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8007af2:	4013      	ands	r3, r2
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d103      	bne.n	8007b00 <UART_SetConfig+0x74>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	695b      	ldr	r3, [r3, #20]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d104      	bne.n	8007b0a <UART_SetConfig+0x7e>
 8007b00:	f640 31e5 	movw	r1, #3045	; 0xbe5
 8007b04:	4898      	ldr	r0, [pc, #608]	; (8007d68 <UART_SetConfig+0x2dc>)
 8007b06:	f7f9 ffb7 	bl	8001a78 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	68da      	ldr	r2, [r3, #12]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	430a      	orrs	r2, r1
 8007b1e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	689a      	ldr	r2, [r3, #8]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	431a      	orrs	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	431a      	orrs	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	69db      	ldr	r3, [r3, #28]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007b42:	f023 030c 	bic.w	r3, r3, #12
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	6812      	ldr	r2, [r2, #0]
 8007b4a:	68f9      	ldr	r1, [r7, #12]
 8007b4c:	430b      	orrs	r3, r1
 8007b4e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	699a      	ldr	r2, [r3, #24]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	69db      	ldr	r3, [r3, #28]
 8007b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b6e:	f040 80a5 	bne.w	8007cbc <UART_SetConfig+0x230>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a7d      	ldr	r2, [pc, #500]	; (8007d6c <UART_SetConfig+0x2e0>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d14f      	bne.n	8007c1c <UART_SetConfig+0x190>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b7c:	f7fe f842 	bl	8005c04 <HAL_RCC_GetPCLK2Freq>
 8007b80:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	4613      	mov	r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	009a      	lsls	r2, r3, #2
 8007b8c:	441a      	add	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	005b      	lsls	r3, r3, #1
 8007b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b98:	4a75      	ldr	r2, [pc, #468]	; (8007d70 <UART_SetConfig+0x2e4>)
 8007b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b9e:	095b      	lsrs	r3, r3, #5
 8007ba0:	0119      	lsls	r1, r3, #4
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4413      	add	r3, r2
 8007baa:	009a      	lsls	r2, r3, #2
 8007bac:	441a      	add	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	005b      	lsls	r3, r3, #1
 8007bb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8007bb8:	4b6d      	ldr	r3, [pc, #436]	; (8007d70 <UART_SetConfig+0x2e4>)
 8007bba:	fba3 0302 	umull	r0, r3, r3, r2
 8007bbe:	095b      	lsrs	r3, r3, #5
 8007bc0:	2064      	movs	r0, #100	; 0x64
 8007bc2:	fb00 f303 	mul.w	r3, r0, r3
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	00db      	lsls	r3, r3, #3
 8007bca:	3332      	adds	r3, #50	; 0x32
 8007bcc:	4a68      	ldr	r2, [pc, #416]	; (8007d70 <UART_SetConfig+0x2e4>)
 8007bce:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd2:	095b      	lsrs	r3, r3, #5
 8007bd4:	005b      	lsls	r3, r3, #1
 8007bd6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007bda:	4419      	add	r1, r3
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	4613      	mov	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	4413      	add	r3, r2
 8007be4:	009a      	lsls	r2, r3, #2
 8007be6:	441a      	add	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	005b      	lsls	r3, r3, #1
 8007bee:	fbb2 f2f3 	udiv	r2, r2, r3
 8007bf2:	4b5f      	ldr	r3, [pc, #380]	; (8007d70 <UART_SetConfig+0x2e4>)
 8007bf4:	fba3 0302 	umull	r0, r3, r3, r2
 8007bf8:	095b      	lsrs	r3, r3, #5
 8007bfa:	2064      	movs	r0, #100	; 0x64
 8007bfc:	fb00 f303 	mul.w	r3, r0, r3
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	00db      	lsls	r3, r3, #3
 8007c04:	3332      	adds	r3, #50	; 0x32
 8007c06:	4a5a      	ldr	r2, [pc, #360]	; (8007d70 <UART_SetConfig+0x2e4>)
 8007c08:	fba2 2303 	umull	r2, r3, r2, r3
 8007c0c:	095b      	lsrs	r3, r3, #5
 8007c0e:	f003 0207 	and.w	r2, r3, #7
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	440a      	add	r2, r1
 8007c18:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007c1a:	e0f9      	b.n	8007e10 <UART_SetConfig+0x384>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c1c:	f7fd ffde 	bl	8005bdc <HAL_RCC_GetPCLK1Freq>
 8007c20:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	4613      	mov	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4413      	add	r3, r2
 8007c2a:	009a      	lsls	r2, r3, #2
 8007c2c:	441a      	add	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	005b      	lsls	r3, r3, #1
 8007c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c38:	4a4d      	ldr	r2, [pc, #308]	; (8007d70 <UART_SetConfig+0x2e4>)
 8007c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c3e:	095b      	lsrs	r3, r3, #5
 8007c40:	0119      	lsls	r1, r3, #4
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	4613      	mov	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	009a      	lsls	r2, r3, #2
 8007c4c:	441a      	add	r2, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c58:	4b45      	ldr	r3, [pc, #276]	; (8007d70 <UART_SetConfig+0x2e4>)
 8007c5a:	fba3 0302 	umull	r0, r3, r3, r2
 8007c5e:	095b      	lsrs	r3, r3, #5
 8007c60:	2064      	movs	r0, #100	; 0x64
 8007c62:	fb00 f303 	mul.w	r3, r0, r3
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	00db      	lsls	r3, r3, #3
 8007c6a:	3332      	adds	r3, #50	; 0x32
 8007c6c:	4a40      	ldr	r2, [pc, #256]	; (8007d70 <UART_SetConfig+0x2e4>)
 8007c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c72:	095b      	lsrs	r3, r3, #5
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c7a:	4419      	add	r1, r3
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	009a      	lsls	r2, r3, #2
 8007c86:	441a      	add	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	005b      	lsls	r3, r3, #1
 8007c8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c92:	4b37      	ldr	r3, [pc, #220]	; (8007d70 <UART_SetConfig+0x2e4>)
 8007c94:	fba3 0302 	umull	r0, r3, r3, r2
 8007c98:	095b      	lsrs	r3, r3, #5
 8007c9a:	2064      	movs	r0, #100	; 0x64
 8007c9c:	fb00 f303 	mul.w	r3, r0, r3
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	00db      	lsls	r3, r3, #3
 8007ca4:	3332      	adds	r3, #50	; 0x32
 8007ca6:	4a32      	ldr	r2, [pc, #200]	; (8007d70 <UART_SetConfig+0x2e4>)
 8007ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cac:	095b      	lsrs	r3, r3, #5
 8007cae:	f003 0207 	and.w	r2, r3, #7
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	440a      	add	r2, r1
 8007cb8:	609a      	str	r2, [r3, #8]
}
 8007cba:	e0a9      	b.n	8007e10 <UART_SetConfig+0x384>
    if((huart->Instance == USART1))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a2a      	ldr	r2, [pc, #168]	; (8007d6c <UART_SetConfig+0x2e0>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d156      	bne.n	8007d74 <UART_SetConfig+0x2e8>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007cc6:	f7fd ff9d 	bl	8005c04 <HAL_RCC_GetPCLK2Freq>
 8007cca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	4413      	add	r3, r2
 8007cd4:	009a      	lsls	r2, r3, #2
 8007cd6:	441a      	add	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce2:	4a23      	ldr	r2, [pc, #140]	; (8007d70 <UART_SetConfig+0x2e4>)
 8007ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce8:	095b      	lsrs	r3, r3, #5
 8007cea:	0119      	lsls	r1, r3, #4
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4413      	add	r3, r2
 8007cf4:	009a      	lsls	r2, r3, #2
 8007cf6:	441a      	add	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d02:	4b1b      	ldr	r3, [pc, #108]	; (8007d70 <UART_SetConfig+0x2e4>)
 8007d04:	fba3 0302 	umull	r0, r3, r3, r2
 8007d08:	095b      	lsrs	r3, r3, #5
 8007d0a:	2064      	movs	r0, #100	; 0x64
 8007d0c:	fb00 f303 	mul.w	r3, r0, r3
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	011b      	lsls	r3, r3, #4
 8007d14:	3332      	adds	r3, #50	; 0x32
 8007d16:	4a16      	ldr	r2, [pc, #88]	; (8007d70 <UART_SetConfig+0x2e4>)
 8007d18:	fba2 2303 	umull	r2, r3, r2, r3
 8007d1c:	095b      	lsrs	r3, r3, #5
 8007d1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d22:	4419      	add	r1, r3
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	4613      	mov	r3, r2
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	009a      	lsls	r2, r3, #2
 8007d2e:	441a      	add	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d3a:	4b0d      	ldr	r3, [pc, #52]	; (8007d70 <UART_SetConfig+0x2e4>)
 8007d3c:	fba3 0302 	umull	r0, r3, r3, r2
 8007d40:	095b      	lsrs	r3, r3, #5
 8007d42:	2064      	movs	r0, #100	; 0x64
 8007d44:	fb00 f303 	mul.w	r3, r0, r3
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	011b      	lsls	r3, r3, #4
 8007d4c:	3332      	adds	r3, #50	; 0x32
 8007d4e:	4a08      	ldr	r2, [pc, #32]	; (8007d70 <UART_SetConfig+0x2e4>)
 8007d50:	fba2 2303 	umull	r2, r3, r2, r3
 8007d54:	095b      	lsrs	r3, r3, #5
 8007d56:	f003 020f 	and.w	r2, r3, #15
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	440a      	add	r2, r1
 8007d60:	609a      	str	r2, [r3, #8]
}
 8007d62:	e055      	b.n	8007e10 <UART_SetConfig+0x384>
 8007d64:	003d0900 	.word	0x003d0900
 8007d68:	0800b374 	.word	0x0800b374
 8007d6c:	40013800 	.word	0x40013800
 8007d70:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d74:	f7fd ff32 	bl	8005bdc <HAL_RCC_GetPCLK1Freq>
 8007d78:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	009a      	lsls	r2, r3, #2
 8007d84:	441a      	add	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d90:	4a21      	ldr	r2, [pc, #132]	; (8007e18 <UART_SetConfig+0x38c>)
 8007d92:	fba2 2303 	umull	r2, r3, r2, r3
 8007d96:	095b      	lsrs	r3, r3, #5
 8007d98:	0119      	lsls	r1, r3, #4
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	4413      	add	r3, r2
 8007da2:	009a      	lsls	r2, r3, #2
 8007da4:	441a      	add	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	fbb2 f2f3 	udiv	r2, r2, r3
 8007db0:	4b19      	ldr	r3, [pc, #100]	; (8007e18 <UART_SetConfig+0x38c>)
 8007db2:	fba3 0302 	umull	r0, r3, r3, r2
 8007db6:	095b      	lsrs	r3, r3, #5
 8007db8:	2064      	movs	r0, #100	; 0x64
 8007dba:	fb00 f303 	mul.w	r3, r0, r3
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	011b      	lsls	r3, r3, #4
 8007dc2:	3332      	adds	r3, #50	; 0x32
 8007dc4:	4a14      	ldr	r2, [pc, #80]	; (8007e18 <UART_SetConfig+0x38c>)
 8007dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dca:	095b      	lsrs	r3, r3, #5
 8007dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007dd0:	4419      	add	r1, r3
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4413      	add	r3, r2
 8007dda:	009a      	lsls	r2, r3, #2
 8007ddc:	441a      	add	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	fbb2 f2f3 	udiv	r2, r2, r3
 8007de8:	4b0b      	ldr	r3, [pc, #44]	; (8007e18 <UART_SetConfig+0x38c>)
 8007dea:	fba3 0302 	umull	r0, r3, r3, r2
 8007dee:	095b      	lsrs	r3, r3, #5
 8007df0:	2064      	movs	r0, #100	; 0x64
 8007df2:	fb00 f303 	mul.w	r3, r0, r3
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	011b      	lsls	r3, r3, #4
 8007dfa:	3332      	adds	r3, #50	; 0x32
 8007dfc:	4a06      	ldr	r2, [pc, #24]	; (8007e18 <UART_SetConfig+0x38c>)
 8007dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007e02:	095b      	lsrs	r3, r3, #5
 8007e04:	f003 020f 	and.w	r2, r3, #15
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	440a      	add	r2, r1
 8007e0e:	609a      	str	r2, [r3, #8]
}
 8007e10:	bf00      	nop
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	51eb851f 	.word	0x51eb851f

08007e1c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e22:	f3ef 8305 	mrs	r3, IPSR
 8007e26:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e28:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d10f      	bne.n	8007e4e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8007e32:	607b      	str	r3, [r7, #4]
  return(result);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d109      	bne.n	8007e4e <osKernelInitialize+0x32>
 8007e3a:	4b10      	ldr	r3, [pc, #64]	; (8007e7c <osKernelInitialize+0x60>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d109      	bne.n	8007e56 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e42:	f3ef 8311 	mrs	r3, BASEPRI
 8007e46:	603b      	str	r3, [r7, #0]
  return(result);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d003      	beq.n	8007e56 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007e4e:	f06f 0305 	mvn.w	r3, #5
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	e00c      	b.n	8007e70 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007e56:	4b09      	ldr	r3, [pc, #36]	; (8007e7c <osKernelInitialize+0x60>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d105      	bne.n	8007e6a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007e5e:	4b07      	ldr	r3, [pc, #28]	; (8007e7c <osKernelInitialize+0x60>)
 8007e60:	2201      	movs	r2, #1
 8007e62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007e64:	2300      	movs	r3, #0
 8007e66:	60fb      	str	r3, [r7, #12]
 8007e68:	e002      	b.n	8007e70 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e6e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007e70:	68fb      	ldr	r3, [r7, #12]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bc80      	pop	{r7}
 8007e7a:	4770      	bx	lr
 8007e7c:	20000038 	.word	0x20000038

08007e80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e86:	f3ef 8305 	mrs	r3, IPSR
 8007e8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10f      	bne.n	8007eb2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e92:	f3ef 8310 	mrs	r3, PRIMASK
 8007e96:	607b      	str	r3, [r7, #4]
  return(result);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d109      	bne.n	8007eb2 <osKernelStart+0x32>
 8007e9e:	4b11      	ldr	r3, [pc, #68]	; (8007ee4 <osKernelStart+0x64>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d109      	bne.n	8007eba <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ea6:	f3ef 8311 	mrs	r3, BASEPRI
 8007eaa:	603b      	str	r3, [r7, #0]
  return(result);
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <osKernelStart+0x3a>
    stat = osErrorISR;
 8007eb2:	f06f 0305 	mvn.w	r3, #5
 8007eb6:	60fb      	str	r3, [r7, #12]
 8007eb8:	e00e      	b.n	8007ed8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8007eba:	4b0a      	ldr	r3, [pc, #40]	; (8007ee4 <osKernelStart+0x64>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d107      	bne.n	8007ed2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8007ec2:	4b08      	ldr	r3, [pc, #32]	; (8007ee4 <osKernelStart+0x64>)
 8007ec4:	2202      	movs	r2, #2
 8007ec6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007ec8:	f001 fbb2 	bl	8009630 <vTaskStartScheduler>
      stat = osOK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	60fb      	str	r3, [r7, #12]
 8007ed0:	e002      	b.n	8007ed8 <osKernelStart+0x58>
    } else {
      stat = osError;
 8007ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20000038 	.word	0x20000038

08007ee8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b092      	sub	sp, #72	; 0x48
 8007eec:	af04      	add	r7, sp, #16
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ef8:	f3ef 8305 	mrs	r3, IPSR
 8007efc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f040 8094 	bne.w	800802e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f06:	f3ef 8310 	mrs	r3, PRIMASK
 8007f0a:	623b      	str	r3, [r7, #32]
  return(result);
 8007f0c:	6a3b      	ldr	r3, [r7, #32]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f040 808d 	bne.w	800802e <osThreadNew+0x146>
 8007f14:	4b48      	ldr	r3, [pc, #288]	; (8008038 <osThreadNew+0x150>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	d106      	bne.n	8007f2a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f1c:	f3ef 8311 	mrs	r3, BASEPRI
 8007f20:	61fb      	str	r3, [r7, #28]
  return(result);
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f040 8082 	bne.w	800802e <osThreadNew+0x146>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d07e      	beq.n	800802e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8007f30:	2380      	movs	r3, #128	; 0x80
 8007f32:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007f34:	2318      	movs	r3, #24
 8007f36:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8007f38:	2300      	movs	r3, #0
 8007f3a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007f3c:	f107 031b 	add.w	r3, r7, #27
 8007f40:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8007f42:	f04f 33ff 	mov.w	r3, #4294967295
 8007f46:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d045      	beq.n	8007fda <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d002      	beq.n	8007f5c <osThreadNew+0x74>
        name = attr->name;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	699b      	ldr	r3, [r3, #24]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d002      	beq.n	8007f6a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d008      	beq.n	8007f82 <osThreadNew+0x9a>
 8007f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f72:	2b38      	cmp	r3, #56	; 0x38
 8007f74:	d805      	bhi.n	8007f82 <osThreadNew+0x9a>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f003 0301 	and.w	r3, r3, #1
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <osThreadNew+0x9e>
        return (NULL);
 8007f82:	2300      	movs	r3, #0
 8007f84:	e054      	b.n	8008030 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d003      	beq.n	8007f96 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	089b      	lsrs	r3, r3, #2
 8007f94:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00e      	beq.n	8007fbc <osThreadNew+0xd4>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	2b5b      	cmp	r3, #91	; 0x5b
 8007fa4:	d90a      	bls.n	8007fbc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d006      	beq.n	8007fbc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d002      	beq.n	8007fbc <osThreadNew+0xd4>
        mem = 1;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fba:	e010      	b.n	8007fde <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10c      	bne.n	8007fde <osThreadNew+0xf6>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d108      	bne.n	8007fde <osThreadNew+0xf6>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d104      	bne.n	8007fde <osThreadNew+0xf6>
          mem = 0;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fd8:	e001      	b.n	8007fde <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8007fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d110      	bne.n	8008006 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007fec:	9202      	str	r2, [sp, #8]
 8007fee:	9301      	str	r3, [sp, #4]
 8007ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff2:	9300      	str	r3, [sp, #0]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ff8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f001 f844 	bl	8009088 <xTaskCreateStatic>
 8008000:	4603      	mov	r3, r0
 8008002:	617b      	str	r3, [r7, #20]
 8008004:	e013      	b.n	800802e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8008006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008008:	2b00      	cmp	r3, #0
 800800a:	d110      	bne.n	800802e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800e:	b29a      	uxth	r2, r3
 8008010:	f107 0314 	add.w	r3, r7, #20
 8008014:	9301      	str	r3, [sp, #4]
 8008016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f001 f88b 	bl	800913a <xTaskCreate>
 8008024:	4603      	mov	r3, r0
 8008026:	2b01      	cmp	r3, #1
 8008028:	d001      	beq.n	800802e <osThreadNew+0x146>
          hTask = NULL;
 800802a:	2300      	movs	r3, #0
 800802c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800802e:	697b      	ldr	r3, [r7, #20]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3738      	adds	r7, #56	; 0x38
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	20000038 	.word	0x20000038

0800803c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008044:	f3ef 8305 	mrs	r3, IPSR
 8008048:	613b      	str	r3, [r7, #16]
  return(result);
 800804a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10f      	bne.n	8008070 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008050:	f3ef 8310 	mrs	r3, PRIMASK
 8008054:	60fb      	str	r3, [r7, #12]
  return(result);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d109      	bne.n	8008070 <osDelay+0x34>
 800805c:	4b0d      	ldr	r3, [pc, #52]	; (8008094 <osDelay+0x58>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2b02      	cmp	r3, #2
 8008062:	d109      	bne.n	8008078 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008064:	f3ef 8311 	mrs	r3, BASEPRI
 8008068:	60bb      	str	r3, [r7, #8]
  return(result);
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d003      	beq.n	8008078 <osDelay+0x3c>
    stat = osErrorISR;
 8008070:	f06f 0305 	mvn.w	r3, #5
 8008074:	617b      	str	r3, [r7, #20]
 8008076:	e007      	b.n	8008088 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008078:	2300      	movs	r3, #0
 800807a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d002      	beq.n	8008088 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f001 f994 	bl	80093b0 <vTaskDelay>
    }
  }

  return (stat);
 8008088:	697b      	ldr	r3, [r7, #20]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3718      	adds	r7, #24
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	20000038 	.word	0x20000038

08008098 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	4a06      	ldr	r2, [pc, #24]	; (80080c0 <vApplicationGetIdleTaskMemory+0x28>)
 80080a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	4a05      	ldr	r2, [pc, #20]	; (80080c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80080ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2280      	movs	r2, #128	; 0x80
 80080b4:	601a      	str	r2, [r3, #0]
}
 80080b6:	bf00      	nop
 80080b8:	3714      	adds	r7, #20
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bc80      	pop	{r7}
 80080be:	4770      	bx	lr
 80080c0:	2000003c 	.word	0x2000003c
 80080c4:	20000098 	.word	0x20000098

080080c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	4a07      	ldr	r2, [pc, #28]	; (80080f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80080d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	4a06      	ldr	r2, [pc, #24]	; (80080f8 <vApplicationGetTimerTaskMemory+0x30>)
 80080de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080e6:	601a      	str	r2, [r3, #0]
}
 80080e8:	bf00      	nop
 80080ea:	3714      	adds	r7, #20
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bc80      	pop	{r7}
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	20000298 	.word	0x20000298
 80080f8:	200002f4 	.word	0x200002f4

080080fc <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8008102:	2020      	movs	r0, #32
 8008104:	f002 fdee 	bl	800ace4 <pvPortMalloc>
 8008108:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00a      	beq.n	8008126 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	3304      	adds	r3, #4
 800811a:	4618      	mov	r0, r3
 800811c:	f000 f9f4 	bl	8008508 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8008126:	687b      	ldr	r3, [r7, #4]
	}
 8008128:	4618      	mov	r0, r3
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b090      	sub	sp, #64	; 0x40
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	607a      	str	r2, [r7, #4]
 800813c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8008146:	2300      	movs	r3, #0
 8008148:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d109      	bne.n	8008164 <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	623b      	str	r3, [r7, #32]
 8008162:	e7fe      	b.n	8008162 <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800816a:	2b00      	cmp	r3, #0
 800816c:	d009      	beq.n	8008182 <xEventGroupWaitBits+0x52>
 800816e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008172:	f383 8811 	msr	BASEPRI, r3
 8008176:	f3bf 8f6f 	isb	sy
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	61fb      	str	r3, [r7, #28]
 8008180:	e7fe      	b.n	8008180 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d109      	bne.n	800819c <xEventGroupWaitBits+0x6c>
 8008188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818c:	f383 8811 	msr	BASEPRI, r3
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	61bb      	str	r3, [r7, #24]
 800819a:	e7fe      	b.n	800819a <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800819c:	f001 ff4c 	bl	800a038 <xTaskGetSchedulerState>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d102      	bne.n	80081ac <xEventGroupWaitBits+0x7c>
 80081a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d101      	bne.n	80081b0 <xEventGroupWaitBits+0x80>
 80081ac:	2301      	movs	r3, #1
 80081ae:	e000      	b.n	80081b2 <xEventGroupWaitBits+0x82>
 80081b0:	2300      	movs	r3, #0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d109      	bne.n	80081ca <xEventGroupWaitBits+0x9a>
 80081b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ba:	f383 8811 	msr	BASEPRI, r3
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f3bf 8f4f 	dsb	sy
 80081c6:	617b      	str	r3, [r7, #20]
 80081c8:	e7fe      	b.n	80081c8 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 80081ca:	f001 fa95 	bl	80096f8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80081ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	68b9      	ldr	r1, [r7, #8]
 80081d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081da:	f000 f960 	bl	800849e <prvTestWaitCondition>
 80081de:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80081e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00e      	beq.n	8008204 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80081e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80081ea:	2300      	movs	r3, #0
 80081ec:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d028      	beq.n	8008246 <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80081f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	43db      	mvns	r3, r3
 80081fc:	401a      	ands	r2, r3
 80081fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008200:	601a      	str	r2, [r3, #0]
 8008202:	e020      	b.n	8008246 <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8008204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008206:	2b00      	cmp	r3, #0
 8008208:	d104      	bne.n	8008214 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800820a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800820e:	2301      	movs	r3, #1
 8008210:	633b      	str	r3, [r7, #48]	; 0x30
 8008212:	e018      	b.n	8008246 <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d003      	beq.n	8008222 <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800821a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008220:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d003      	beq.n	8008230 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8008228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800822e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8008230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008232:	1d18      	adds	r0, r3, #4
 8008234:	68ba      	ldr	r2, [r7, #8]
 8008236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008238:	4313      	orrs	r3, r2
 800823a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800823c:	4619      	mov	r1, r3
 800823e:	f001 fc7b 	bl	8009b38 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8008242:	2300      	movs	r3, #0
 8008244:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8008246:	f001 fa65 	bl	8009714 <xTaskResumeAll>
 800824a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800824c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800824e:	2b00      	cmp	r3, #0
 8008250:	d031      	beq.n	80082b6 <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 8008252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008254:	2b00      	cmp	r3, #0
 8008256:	d107      	bne.n	8008268 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8008258:	4b19      	ldr	r3, [pc, #100]	; (80082c0 <xEventGroupWaitBits+0x190>)
 800825a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800825e:	601a      	str	r2, [r3, #0]
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8008268:	f001 ff70 	bl	800a14c <uxTaskResetEventItemValue>
 800826c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800826e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d11a      	bne.n	80082ae <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 8008278:	f002 fc3e 	bl	800aaf8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800827c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	68b9      	ldr	r1, [r7, #8]
 8008286:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008288:	f000 f909 	bl	800849e <prvTestWaitCondition>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d009      	beq.n	80082a6 <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d006      	beq.n	80082a6 <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	43db      	mvns	r3, r3
 80082a0:	401a      	ands	r2, r3
 80082a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80082a6:	2301      	movs	r3, #1
 80082a8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80082aa:	f002 fc53 	bl	800ab54 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80082ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80082b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80082b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3740      	adds	r7, #64	; 0x40
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	e000ed04 	.word	0xe000ed04

080082c4 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d109      	bne.n	80082ec <xEventGroupClearBits+0x28>
 80082d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082dc:	f383 8811 	msr	BASEPRI, r3
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	60fb      	str	r3, [r7, #12]
 80082ea:	e7fe      	b.n	80082ea <xEventGroupClearBits+0x26>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d009      	beq.n	800830a <xEventGroupClearBits+0x46>
 80082f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fa:	f383 8811 	msr	BASEPRI, r3
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f3bf 8f4f 	dsb	sy
 8008306:	60bb      	str	r3, [r7, #8]
 8008308:	e7fe      	b.n	8008308 <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
 800830a:	f002 fbf5 	bl	800aaf8 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	43db      	mvns	r3, r3
 800831c:	401a      	ands	r2, r3
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8008322:	f002 fc17 	bl	800ab54 <vPortExitCritical>

	return uxReturn;
 8008326:	693b      	ldr	r3, [r7, #16]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3718      	adds	r7, #24
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
 800833a:	2300      	movs	r3, #0
 800833c:	683a      	ldr	r2, [r7, #0]
 800833e:	6879      	ldr	r1, [r7, #4]
 8008340:	4804      	ldr	r0, [pc, #16]	; (8008354 <xEventGroupClearBitsFromISR+0x24>)
 8008342:	f002 facd 	bl	800a8e0 <xTimerPendFunctionCallFromISR>
 8008346:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8008348:	68fb      	ldr	r3, [r7, #12]
	}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	08008485 	.word	0x08008485

08008358 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b08e      	sub	sp, #56	; 0x38
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8008362:	2300      	movs	r3, #0
 8008364:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800836a:	2300      	movs	r3, #0
 800836c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d109      	bne.n	8008388 <xEventGroupSetBits+0x30>
 8008374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008378:	f383 8811 	msr	BASEPRI, r3
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	613b      	str	r3, [r7, #16]
 8008386:	e7fe      	b.n	8008386 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800838e:	2b00      	cmp	r3, #0
 8008390:	d009      	beq.n	80083a6 <xEventGroupSetBits+0x4e>
 8008392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008396:	f383 8811 	msr	BASEPRI, r3
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	60fb      	str	r3, [r7, #12]
 80083a4:	e7fe      	b.n	80083a4 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80083a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a8:	3304      	adds	r3, #4
 80083aa:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	3308      	adds	r3, #8
 80083b0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80083b2:	f001 f9a1 	bl	80096f8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80083b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80083bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	431a      	orrs	r2, r3
 80083c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80083c8:	e03c      	b.n	8008444 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 80083ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80083d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80083d6:	2300      	movs	r3, #0
 80083d8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80083e0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80083e8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d108      	bne.n	8008406 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80083f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	4013      	ands	r3, r2
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00b      	beq.n	8008418 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8008400:	2301      	movs	r3, #1
 8008402:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008404:	e008      	b.n	8008418 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8008406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	4013      	ands	r3, r2
 800840e:	69ba      	ldr	r2, [r7, #24]
 8008410:	429a      	cmp	r2, r3
 8008412:	d101      	bne.n	8008418 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8008414:	2301      	movs	r3, #1
 8008416:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8008418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841a:	2b00      	cmp	r3, #0
 800841c:	d010      	beq.n	8008440 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d003      	beq.n	8008430 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8008428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	4313      	orrs	r3, r2
 800842e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008438:	4619      	mov	r1, r3
 800843a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800843c:	f001 fc42 	bl	8009cc4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8008444:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	429a      	cmp	r2, r3
 800844a:	d1be      	bne.n	80083ca <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800844c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008452:	43db      	mvns	r3, r3
 8008454:	401a      	ands	r2, r3
 8008456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008458:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800845a:	f001 f95b 	bl	8009714 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800845e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008460:	681b      	ldr	r3, [r3, #0]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3738      	adds	r7, #56	; 0x38
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b082      	sub	sp, #8
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8008474:	6839      	ldr	r1, [r7, #0]
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7ff ff6e 	bl	8008358 <xEventGroupSetBits>
}
 800847c:	bf00      	nop
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f7ff ff17 	bl	80082c4 <xEventGroupClearBits>
}
 8008496:	bf00      	nop
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800849e:	b480      	push	{r7}
 80084a0:	b087      	sub	sp, #28
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	60f8      	str	r0, [r7, #12]
 80084a6:	60b9      	str	r1, [r7, #8]
 80084a8:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80084aa:	2300      	movs	r3, #0
 80084ac:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d107      	bne.n	80084c4 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	4013      	ands	r3, r2
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00a      	beq.n	80084d4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80084be:	2301      	movs	r3, #1
 80084c0:	617b      	str	r3, [r7, #20]
 80084c2:	e007      	b.n	80084d4 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	4013      	ands	r3, r2
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d101      	bne.n	80084d4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80084d0:	2301      	movs	r3, #1
 80084d2:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80084d4:	697b      	ldr	r3, [r7, #20]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	371c      	adds	r7, #28
 80084da:	46bd      	mov	sp, r7
 80084dc:	bc80      	pop	{r7}
 80084de:	4770      	bx	lr

080084e0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	68f9      	ldr	r1, [r7, #12]
 80084f2:	4804      	ldr	r0, [pc, #16]	; (8008504 <xEventGroupSetBitsFromISR+0x24>)
 80084f4:	f002 f9f4 	bl	800a8e0 <xTimerPendFunctionCallFromISR>
 80084f8:	6178      	str	r0, [r7, #20]

		return xReturn;
 80084fa:	697b      	ldr	r3, [r7, #20]
	}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3718      	adds	r7, #24
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	0800846b 	.word	0x0800846b

08008508 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f103 0208 	add.w	r2, r3, #8
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f04f 32ff 	mov.w	r2, #4294967295
 8008520:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f103 0208 	add.w	r2, r3, #8
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f103 0208 	add.w	r2, r3, #8
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800853c:	bf00      	nop
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	bc80      	pop	{r7}
 8008544:	4770      	bx	lr

08008546 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008546:	b480      	push	{r7}
 8008548:	b083      	sub	sp, #12
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	bc80      	pop	{r7}
 800855c:	4770      	bx	lr

0800855e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800855e:	b480      	push	{r7}
 8008560:	b085      	sub	sp, #20
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
 8008566:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	689a      	ldr	r2, [r3, #8]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	683a      	ldr	r2, [r7, #0]
 8008588:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	1c5a      	adds	r2, r3, #1
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	601a      	str	r2, [r3, #0]
}
 800859a:	bf00      	nop
 800859c:	3714      	adds	r7, #20
 800859e:	46bd      	mov	sp, r7
 80085a0:	bc80      	pop	{r7}
 80085a2:	4770      	bx	lr

080085a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ba:	d103      	bne.n	80085c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	60fb      	str	r3, [r7, #12]
 80085c2:	e00c      	b.n	80085de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	3308      	adds	r3, #8
 80085c8:	60fb      	str	r3, [r7, #12]
 80085ca:	e002      	b.n	80085d2 <vListInsert+0x2e>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	60fb      	str	r3, [r7, #12]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d2f6      	bcs.n	80085cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	685a      	ldr	r2, [r3, #4]
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	683a      	ldr	r2, [r7, #0]
 80085ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	683a      	ldr	r2, [r7, #0]
 80085f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	1c5a      	adds	r2, r3, #1
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	601a      	str	r2, [r3, #0]
}
 800860a:	bf00      	nop
 800860c:	3714      	adds	r7, #20
 800860e:	46bd      	mov	sp, r7
 8008610:	bc80      	pop	{r7}
 8008612:	4770      	bx	lr

08008614 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	6892      	ldr	r2, [r2, #8]
 800862a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	6852      	ldr	r2, [r2, #4]
 8008634:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	429a      	cmp	r2, r3
 800863e:	d103      	bne.n	8008648 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	689a      	ldr	r2, [r3, #8]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	1e5a      	subs	r2, r3, #1
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	bc80      	pop	{r7}
 8008664:	4770      	bx	lr
	...

08008668 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d109      	bne.n	8008690 <xQueueGenericReset+0x28>
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	60bb      	str	r3, [r7, #8]
 800868e:	e7fe      	b.n	800868e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008690:	f002 fa32 	bl	800aaf8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800869c:	68f9      	ldr	r1, [r7, #12]
 800869e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086a0:	fb01 f303 	mul.w	r3, r1, r3
 80086a4:	441a      	add	r2, r3
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2200      	movs	r2, #0
 80086ae:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c0:	3b01      	subs	r3, #1
 80086c2:	68f9      	ldr	r1, [r7, #12]
 80086c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086c6:	fb01 f303 	mul.w	r3, r1, r3
 80086ca:	441a      	add	r2, r3
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	22ff      	movs	r2, #255	; 0xff
 80086d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	22ff      	movs	r2, #255	; 0xff
 80086dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d114      	bne.n	8008710 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d01a      	beq.n	8008724 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	3310      	adds	r3, #16
 80086f2:	4618      	mov	r0, r3
 80086f4:	f001 fa84 	bl	8009c00 <xTaskRemoveFromEventList>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d012      	beq.n	8008724 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80086fe:	4b0d      	ldr	r3, [pc, #52]	; (8008734 <xQueueGenericReset+0xcc>)
 8008700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008704:	601a      	str	r2, [r3, #0]
 8008706:	f3bf 8f4f 	dsb	sy
 800870a:	f3bf 8f6f 	isb	sy
 800870e:	e009      	b.n	8008724 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	3310      	adds	r3, #16
 8008714:	4618      	mov	r0, r3
 8008716:	f7ff fef7 	bl	8008508 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	3324      	adds	r3, #36	; 0x24
 800871e:	4618      	mov	r0, r3
 8008720:	f7ff fef2 	bl	8008508 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008724:	f002 fa16 	bl	800ab54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008728:	2301      	movs	r3, #1
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	e000ed04 	.word	0xe000ed04

08008738 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008738:	b580      	push	{r7, lr}
 800873a:	b08e      	sub	sp, #56	; 0x38
 800873c:	af02      	add	r7, sp, #8
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]
 8008744:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d109      	bne.n	8008760 <xQueueGenericCreateStatic+0x28>
 800874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	62bb      	str	r3, [r7, #40]	; 0x28
 800875e:	e7fe      	b.n	800875e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d109      	bne.n	800877a <xQueueGenericCreateStatic+0x42>
 8008766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876a:	f383 8811 	msr	BASEPRI, r3
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	627b      	str	r3, [r7, #36]	; 0x24
 8008778:	e7fe      	b.n	8008778 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d002      	beq.n	8008786 <xQueueGenericCreateStatic+0x4e>
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d001      	beq.n	800878a <xQueueGenericCreateStatic+0x52>
 8008786:	2301      	movs	r3, #1
 8008788:	e000      	b.n	800878c <xQueueGenericCreateStatic+0x54>
 800878a:	2300      	movs	r3, #0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d109      	bne.n	80087a4 <xQueueGenericCreateStatic+0x6c>
 8008790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	623b      	str	r3, [r7, #32]
 80087a2:	e7fe      	b.n	80087a2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d102      	bne.n	80087b0 <xQueueGenericCreateStatic+0x78>
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <xQueueGenericCreateStatic+0x7c>
 80087b0:	2301      	movs	r3, #1
 80087b2:	e000      	b.n	80087b6 <xQueueGenericCreateStatic+0x7e>
 80087b4:	2300      	movs	r3, #0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d109      	bne.n	80087ce <xQueueGenericCreateStatic+0x96>
 80087ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087be:	f383 8811 	msr	BASEPRI, r3
 80087c2:	f3bf 8f6f 	isb	sy
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	61fb      	str	r3, [r7, #28]
 80087cc:	e7fe      	b.n	80087cc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80087ce:	2350      	movs	r3, #80	; 0x50
 80087d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	2b50      	cmp	r3, #80	; 0x50
 80087d6:	d009      	beq.n	80087ec <xQueueGenericCreateStatic+0xb4>
 80087d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087dc:	f383 8811 	msr	BASEPRI, r3
 80087e0:	f3bf 8f6f 	isb	sy
 80087e4:	f3bf 8f4f 	dsb	sy
 80087e8:	61bb      	str	r3, [r7, #24]
 80087ea:	e7fe      	b.n	80087ea <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80087f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00d      	beq.n	8008812 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80087f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f8:	2201      	movs	r2, #1
 80087fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008804:	9300      	str	r3, [sp, #0]
 8008806:	4613      	mov	r3, r2
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	68b9      	ldr	r1, [r7, #8]
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f000 f842 	bl	8008896 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008814:	4618      	mov	r0, r3
 8008816:	3730      	adds	r7, #48	; 0x30
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800881c:	b580      	push	{r7, lr}
 800881e:	b08a      	sub	sp, #40	; 0x28
 8008820:	af02      	add	r7, sp, #8
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	4613      	mov	r3, r2
 8008828:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d109      	bne.n	8008844 <xQueueGenericCreate+0x28>
 8008830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	613b      	str	r3, [r7, #16]
 8008842:	e7fe      	b.n	8008842 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d102      	bne.n	8008850 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800884a:	2300      	movs	r3, #0
 800884c:	61fb      	str	r3, [r7, #28]
 800884e:	e004      	b.n	800885a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	fb02 f303 	mul.w	r3, r2, r3
 8008858:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	3350      	adds	r3, #80	; 0x50
 800885e:	4618      	mov	r0, r3
 8008860:	f002 fa40 	bl	800ace4 <pvPortMalloc>
 8008864:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00f      	beq.n	800888c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	3350      	adds	r3, #80	; 0x50
 8008870:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800887a:	79fa      	ldrb	r2, [r7, #7]
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	4613      	mov	r3, r2
 8008882:	697a      	ldr	r2, [r7, #20]
 8008884:	68b9      	ldr	r1, [r7, #8]
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f000 f805 	bl	8008896 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800888c:	69bb      	ldr	r3, [r7, #24]
	}
 800888e:	4618      	mov	r0, r3
 8008890:	3720      	adds	r7, #32
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b084      	sub	sp, #16
 800889a:	af00      	add	r7, sp, #0
 800889c:	60f8      	str	r0, [r7, #12]
 800889e:	60b9      	str	r1, [r7, #8]
 80088a0:	607a      	str	r2, [r7, #4]
 80088a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d103      	bne.n	80088b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	69ba      	ldr	r2, [r7, #24]
 80088ae:	601a      	str	r2, [r3, #0]
 80088b0:	e002      	b.n	80088b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80088c4:	2101      	movs	r1, #1
 80088c6:	69b8      	ldr	r0, [r7, #24]
 80088c8:	f7ff fece 	bl	8008668 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	78fa      	ldrb	r2, [r7, #3]
 80088d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80088d4:	bf00      	nop
 80088d6:	3710      	adds	r7, #16
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b08e      	sub	sp, #56	; 0x38
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
 80088e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80088ea:	2300      	movs	r3, #0
 80088ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80088f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d109      	bne.n	800890c <xQueueGenericSend+0x30>
 80088f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fc:	f383 8811 	msr	BASEPRI, r3
 8008900:	f3bf 8f6f 	isb	sy
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	62bb      	str	r3, [r7, #40]	; 0x28
 800890a:	e7fe      	b.n	800890a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d103      	bne.n	800891a <xQueueGenericSend+0x3e>
 8008912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008916:	2b00      	cmp	r3, #0
 8008918:	d101      	bne.n	800891e <xQueueGenericSend+0x42>
 800891a:	2301      	movs	r3, #1
 800891c:	e000      	b.n	8008920 <xQueueGenericSend+0x44>
 800891e:	2300      	movs	r3, #0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d109      	bne.n	8008938 <xQueueGenericSend+0x5c>
 8008924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008928:	f383 8811 	msr	BASEPRI, r3
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	627b      	str	r3, [r7, #36]	; 0x24
 8008936:	e7fe      	b.n	8008936 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	2b02      	cmp	r3, #2
 800893c:	d103      	bne.n	8008946 <xQueueGenericSend+0x6a>
 800893e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008942:	2b01      	cmp	r3, #1
 8008944:	d101      	bne.n	800894a <xQueueGenericSend+0x6e>
 8008946:	2301      	movs	r3, #1
 8008948:	e000      	b.n	800894c <xQueueGenericSend+0x70>
 800894a:	2300      	movs	r3, #0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d109      	bne.n	8008964 <xQueueGenericSend+0x88>
 8008950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008954:	f383 8811 	msr	BASEPRI, r3
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	623b      	str	r3, [r7, #32]
 8008962:	e7fe      	b.n	8008962 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008964:	f001 fb68 	bl	800a038 <xTaskGetSchedulerState>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d102      	bne.n	8008974 <xQueueGenericSend+0x98>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d101      	bne.n	8008978 <xQueueGenericSend+0x9c>
 8008974:	2301      	movs	r3, #1
 8008976:	e000      	b.n	800897a <xQueueGenericSend+0x9e>
 8008978:	2300      	movs	r3, #0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d109      	bne.n	8008992 <xQueueGenericSend+0xb6>
 800897e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	61fb      	str	r3, [r7, #28]
 8008990:	e7fe      	b.n	8008990 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008992:	f002 f8b1 	bl	800aaf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800899a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800899e:	429a      	cmp	r2, r3
 80089a0:	d302      	bcc.n	80089a8 <xQueueGenericSend+0xcc>
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d129      	bne.n	80089fc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	68b9      	ldr	r1, [r7, #8]
 80089ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089ae:	f000 f9ff 	bl	8008db0 <prvCopyDataToQueue>
 80089b2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d010      	beq.n	80089de <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089be:	3324      	adds	r3, #36	; 0x24
 80089c0:	4618      	mov	r0, r3
 80089c2:	f001 f91d 	bl	8009c00 <xTaskRemoveFromEventList>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d013      	beq.n	80089f4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80089cc:	4b3f      	ldr	r3, [pc, #252]	; (8008acc <xQueueGenericSend+0x1f0>)
 80089ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	f3bf 8f6f 	isb	sy
 80089dc:	e00a      	b.n	80089f4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80089de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d007      	beq.n	80089f4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80089e4:	4b39      	ldr	r3, [pc, #228]	; (8008acc <xQueueGenericSend+0x1f0>)
 80089e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089ea:	601a      	str	r2, [r3, #0]
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80089f4:	f002 f8ae 	bl	800ab54 <vPortExitCritical>
				return pdPASS;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e063      	b.n	8008ac4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d103      	bne.n	8008a0a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a02:	f002 f8a7 	bl	800ab54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008a06:	2300      	movs	r3, #0
 8008a08:	e05c      	b.n	8008ac4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d106      	bne.n	8008a1e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a10:	f107 0314 	add.w	r3, r7, #20
 8008a14:	4618      	mov	r0, r3
 8008a16:	f001 f9b5 	bl	8009d84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a1e:	f002 f899 	bl	800ab54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a22:	f000 fe69 	bl	80096f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a26:	f002 f867 	bl	800aaf8 <vPortEnterCritical>
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a30:	b25b      	sxtb	r3, r3
 8008a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a36:	d103      	bne.n	8008a40 <xQueueGenericSend+0x164>
 8008a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a46:	b25b      	sxtb	r3, r3
 8008a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a4c:	d103      	bne.n	8008a56 <xQueueGenericSend+0x17a>
 8008a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a56:	f002 f87d 	bl	800ab54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a5a:	1d3a      	adds	r2, r7, #4
 8008a5c:	f107 0314 	add.w	r3, r7, #20
 8008a60:	4611      	mov	r1, r2
 8008a62:	4618      	mov	r0, r3
 8008a64:	f001 f9a4 	bl	8009db0 <xTaskCheckForTimeOut>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d124      	bne.n	8008ab8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a70:	f000 fa96 	bl	8008fa0 <prvIsQueueFull>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d018      	beq.n	8008aac <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7c:	3310      	adds	r3, #16
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	4611      	mov	r1, r2
 8008a82:	4618      	mov	r0, r3
 8008a84:	f001 f834 	bl	8009af0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a8a:	f000 fa21 	bl	8008ed0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a8e:	f000 fe41 	bl	8009714 <xTaskResumeAll>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f47f af7c 	bne.w	8008992 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008a9a:	4b0c      	ldr	r3, [pc, #48]	; (8008acc <xQueueGenericSend+0x1f0>)
 8008a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aa0:	601a      	str	r2, [r3, #0]
 8008aa2:	f3bf 8f4f 	dsb	sy
 8008aa6:	f3bf 8f6f 	isb	sy
 8008aaa:	e772      	b.n	8008992 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008aae:	f000 fa0f 	bl	8008ed0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ab2:	f000 fe2f 	bl	8009714 <xTaskResumeAll>
 8008ab6:	e76c      	b.n	8008992 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008ab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008aba:	f000 fa09 	bl	8008ed0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008abe:	f000 fe29 	bl	8009714 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008ac2:	2300      	movs	r3, #0
		}
	}
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3738      	adds	r7, #56	; 0x38
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	e000ed04 	.word	0xe000ed04

08008ad0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b08e      	sub	sp, #56	; 0x38
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	607a      	str	r2, [r7, #4]
 8008adc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d109      	bne.n	8008afc <xQueueGenericSendFromISR+0x2c>
 8008ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aec:	f383 8811 	msr	BASEPRI, r3
 8008af0:	f3bf 8f6f 	isb	sy
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	627b      	str	r3, [r7, #36]	; 0x24
 8008afa:	e7fe      	b.n	8008afa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d103      	bne.n	8008b0a <xQueueGenericSendFromISR+0x3a>
 8008b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d101      	bne.n	8008b0e <xQueueGenericSendFromISR+0x3e>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e000      	b.n	8008b10 <xQueueGenericSendFromISR+0x40>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d109      	bne.n	8008b28 <xQueueGenericSendFromISR+0x58>
 8008b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b18:	f383 8811 	msr	BASEPRI, r3
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	623b      	str	r3, [r7, #32]
 8008b26:	e7fe      	b.n	8008b26 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d103      	bne.n	8008b36 <xQueueGenericSendFromISR+0x66>
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d101      	bne.n	8008b3a <xQueueGenericSendFromISR+0x6a>
 8008b36:	2301      	movs	r3, #1
 8008b38:	e000      	b.n	8008b3c <xQueueGenericSendFromISR+0x6c>
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d109      	bne.n	8008b54 <xQueueGenericSendFromISR+0x84>
 8008b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b44:	f383 8811 	msr	BASEPRI, r3
 8008b48:	f3bf 8f6f 	isb	sy
 8008b4c:	f3bf 8f4f 	dsb	sy
 8008b50:	61fb      	str	r3, [r7, #28]
 8008b52:	e7fe      	b.n	8008b52 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b54:	f002 f88a 	bl	800ac6c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b58:	f3ef 8211 	mrs	r2, BASEPRI
 8008b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b60:	f383 8811 	msr	BASEPRI, r3
 8008b64:	f3bf 8f6f 	isb	sy
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	61ba      	str	r2, [r7, #24]
 8008b6e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008b70:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b72:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d302      	bcc.n	8008b86 <xQueueGenericSendFromISR+0xb6>
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	2b02      	cmp	r3, #2
 8008b84:	d12c      	bne.n	8008be0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b90:	683a      	ldr	r2, [r7, #0]
 8008b92:	68b9      	ldr	r1, [r7, #8]
 8008b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b96:	f000 f90b 	bl	8008db0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b9a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba2:	d112      	bne.n	8008bca <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d016      	beq.n	8008bda <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bae:	3324      	adds	r3, #36	; 0x24
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f001 f825 	bl	8009c00 <xTaskRemoveFromEventList>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00e      	beq.n	8008bda <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00b      	beq.n	8008bda <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	601a      	str	r2, [r3, #0]
 8008bc8:	e007      	b.n	8008bda <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008bca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008bce:	3301      	adds	r3, #1
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	b25a      	sxtb	r2, r3
 8008bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008bde:	e001      	b.n	8008be4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008be0:	2300      	movs	r3, #0
 8008be2:	637b      	str	r3, [r7, #52]	; 0x34
 8008be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3738      	adds	r7, #56	; 0x38
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b08c      	sub	sp, #48	; 0x30
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c04:	2300      	movs	r3, #0
 8008c06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d109      	bne.n	8008c26 <xQueueReceive+0x2e>
	__asm volatile
 8008c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	623b      	str	r3, [r7, #32]
 8008c24:	e7fe      	b.n	8008c24 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d103      	bne.n	8008c34 <xQueueReceive+0x3c>
 8008c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d101      	bne.n	8008c38 <xQueueReceive+0x40>
 8008c34:	2301      	movs	r3, #1
 8008c36:	e000      	b.n	8008c3a <xQueueReceive+0x42>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d109      	bne.n	8008c52 <xQueueReceive+0x5a>
 8008c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	61fb      	str	r3, [r7, #28]
 8008c50:	e7fe      	b.n	8008c50 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c52:	f001 f9f1 	bl	800a038 <xTaskGetSchedulerState>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d102      	bne.n	8008c62 <xQueueReceive+0x6a>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d101      	bne.n	8008c66 <xQueueReceive+0x6e>
 8008c62:	2301      	movs	r3, #1
 8008c64:	e000      	b.n	8008c68 <xQueueReceive+0x70>
 8008c66:	2300      	movs	r3, #0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d109      	bne.n	8008c80 <xQueueReceive+0x88>
 8008c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c70:	f383 8811 	msr	BASEPRI, r3
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	61bb      	str	r3, [r7, #24]
 8008c7e:	e7fe      	b.n	8008c7e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c80:	f001 ff3a 	bl	800aaf8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c88:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d01f      	beq.n	8008cd0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c90:	68b9      	ldr	r1, [r7, #8]
 8008c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c94:	f000 f8f6 	bl	8008e84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9a:	1e5a      	subs	r2, r3, #1
 8008c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00f      	beq.n	8008cc8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008caa:	3310      	adds	r3, #16
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 ffa7 	bl	8009c00 <xTaskRemoveFromEventList>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d007      	beq.n	8008cc8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008cb8:	4b3c      	ldr	r3, [pc, #240]	; (8008dac <xQueueReceive+0x1b4>)
 8008cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cbe:	601a      	str	r2, [r3, #0]
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008cc8:	f001 ff44 	bl	800ab54 <vPortExitCritical>
				return pdPASS;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e069      	b.n	8008da4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d103      	bne.n	8008cde <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008cd6:	f001 ff3d 	bl	800ab54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	e062      	b.n	8008da4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d106      	bne.n	8008cf2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ce4:	f107 0310 	add.w	r3, r7, #16
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f001 f84b 	bl	8009d84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008cf2:	f001 ff2f 	bl	800ab54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008cf6:	f000 fcff 	bl	80096f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008cfa:	f001 fefd 	bl	800aaf8 <vPortEnterCritical>
 8008cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d04:	b25b      	sxtb	r3, r3
 8008d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d0a:	d103      	bne.n	8008d14 <xQueueReceive+0x11c>
 8008d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d1a:	b25b      	sxtb	r3, r3
 8008d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d20:	d103      	bne.n	8008d2a <xQueueReceive+0x132>
 8008d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d24:	2200      	movs	r2, #0
 8008d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d2a:	f001 ff13 	bl	800ab54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d2e:	1d3a      	adds	r2, r7, #4
 8008d30:	f107 0310 	add.w	r3, r7, #16
 8008d34:	4611      	mov	r1, r2
 8008d36:	4618      	mov	r0, r3
 8008d38:	f001 f83a 	bl	8009db0 <xTaskCheckForTimeOut>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d123      	bne.n	8008d8a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d44:	f000 f916 	bl	8008f74 <prvIsQueueEmpty>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d017      	beq.n	8008d7e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d50:	3324      	adds	r3, #36	; 0x24
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	4611      	mov	r1, r2
 8008d56:	4618      	mov	r0, r3
 8008d58:	f000 feca 	bl	8009af0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d5e:	f000 f8b7 	bl	8008ed0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d62:	f000 fcd7 	bl	8009714 <xTaskResumeAll>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d189      	bne.n	8008c80 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008d6c:	4b0f      	ldr	r3, [pc, #60]	; (8008dac <xQueueReceive+0x1b4>)
 8008d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d72:	601a      	str	r2, [r3, #0]
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	e780      	b.n	8008c80 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d80:	f000 f8a6 	bl	8008ed0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d84:	f000 fcc6 	bl	8009714 <xTaskResumeAll>
 8008d88:	e77a      	b.n	8008c80 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d8c:	f000 f8a0 	bl	8008ed0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d90:	f000 fcc0 	bl	8009714 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d96:	f000 f8ed 	bl	8008f74 <prvIsQueueEmpty>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f43f af6f 	beq.w	8008c80 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008da2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3730      	adds	r7, #48	; 0x30
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	e000ed04 	.word	0xe000ed04

08008db0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10d      	bne.n	8008dea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d14d      	bne.n	8008e72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f001 f94a 	bl	800a074 <xTaskPriorityDisinherit>
 8008de0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2200      	movs	r2, #0
 8008de6:	605a      	str	r2, [r3, #4]
 8008de8:	e043      	b.n	8008e72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d119      	bne.n	8008e24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6898      	ldr	r0, [r3, #8]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df8:	461a      	mov	r2, r3
 8008dfa:	68b9      	ldr	r1, [r7, #8]
 8008dfc:	f002 f96e 	bl	800b0dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	689a      	ldr	r2, [r3, #8]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e08:	441a      	add	r2, r3
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	689a      	ldr	r2, [r3, #8]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d32b      	bcc.n	8008e72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	609a      	str	r2, [r3, #8]
 8008e22:	e026      	b.n	8008e72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	68d8      	ldr	r0, [r3, #12]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	68b9      	ldr	r1, [r7, #8]
 8008e30:	f002 f954 	bl	800b0dc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	68da      	ldr	r2, [r3, #12]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e3c:	425b      	negs	r3, r3
 8008e3e:	441a      	add	r2, r3
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	68da      	ldr	r2, [r3, #12]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d207      	bcs.n	8008e60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	685a      	ldr	r2, [r3, #4]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e58:	425b      	negs	r3, r3
 8008e5a:	441a      	add	r2, r3
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d105      	bne.n	8008e72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d002      	beq.n	8008e72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	1c5a      	adds	r2, r3, #1
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008e7a:	697b      	ldr	r3, [r7, #20]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3718      	adds	r7, #24
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d018      	beq.n	8008ec8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	68da      	ldr	r2, [r3, #12]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9e:	441a      	add	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	68da      	ldr	r2, [r3, #12]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d303      	bcc.n	8008eb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	68d9      	ldr	r1, [r3, #12]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	6838      	ldr	r0, [r7, #0]
 8008ec4:	f002 f90a 	bl	800b0dc <memcpy>
	}
}
 8008ec8:	bf00      	nop
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008ed8:	f001 fe0e 	bl	800aaf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ee2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ee4:	e011      	b.n	8008f0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d012      	beq.n	8008f14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	3324      	adds	r3, #36	; 0x24
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 fe84 	bl	8009c00 <xTaskRemoveFromEventList>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d001      	beq.n	8008f02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008efe:	f000 ffb7 	bl	8009e70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008f02:	7bfb      	ldrb	r3, [r7, #15]
 8008f04:	3b01      	subs	r3, #1
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	dce9      	bgt.n	8008ee6 <prvUnlockQueue+0x16>
 8008f12:	e000      	b.n	8008f16 <prvUnlockQueue+0x46>
					break;
 8008f14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	22ff      	movs	r2, #255	; 0xff
 8008f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008f1e:	f001 fe19 	bl	800ab54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008f22:	f001 fde9 	bl	800aaf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f2e:	e011      	b.n	8008f54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d012      	beq.n	8008f5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	3310      	adds	r3, #16
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f000 fe5f 	bl	8009c00 <xTaskRemoveFromEventList>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d001      	beq.n	8008f4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008f48:	f000 ff92 	bl	8009e70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008f4c:	7bbb      	ldrb	r3, [r7, #14]
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	dce9      	bgt.n	8008f30 <prvUnlockQueue+0x60>
 8008f5c:	e000      	b.n	8008f60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008f5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	22ff      	movs	r2, #255	; 0xff
 8008f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008f68:	f001 fdf4 	bl	800ab54 <vPortExitCritical>
}
 8008f6c:	bf00      	nop
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f7c:	f001 fdbc 	bl	800aaf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d102      	bne.n	8008f8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	60fb      	str	r3, [r7, #12]
 8008f8c:	e001      	b.n	8008f92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f92:	f001 fddf 	bl	800ab54 <vPortExitCritical>

	return xReturn;
 8008f96:	68fb      	ldr	r3, [r7, #12]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008fa8:	f001 fda6 	bl	800aaf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d102      	bne.n	8008fbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	60fb      	str	r3, [r7, #12]
 8008fbc:	e001      	b.n	8008fc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008fc2:	f001 fdc7 	bl	800ab54 <vPortExitCritical>

	return xReturn;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3710      	adds	r7, #16
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008fda:	2300      	movs	r3, #0
 8008fdc:	60fb      	str	r3, [r7, #12]
 8008fde:	e014      	b.n	800900a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008fe0:	4a0e      	ldr	r2, [pc, #56]	; (800901c <vQueueAddToRegistry+0x4c>)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d10b      	bne.n	8009004 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008fec:	490b      	ldr	r1, [pc, #44]	; (800901c <vQueueAddToRegistry+0x4c>)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	683a      	ldr	r2, [r7, #0]
 8008ff2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008ff6:	4a09      	ldr	r2, [pc, #36]	; (800901c <vQueueAddToRegistry+0x4c>)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	00db      	lsls	r3, r3, #3
 8008ffc:	4413      	add	r3, r2
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009002:	e005      	b.n	8009010 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	3301      	adds	r3, #1
 8009008:	60fb      	str	r3, [r7, #12]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2b07      	cmp	r3, #7
 800900e:	d9e7      	bls.n	8008fe0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009010:	bf00      	nop
 8009012:	3714      	adds	r7, #20
 8009014:	46bd      	mov	sp, r7
 8009016:	bc80      	pop	{r7}
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	20003864 	.word	0x20003864

08009020 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009020:	b580      	push	{r7, lr}
 8009022:	b086      	sub	sp, #24
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009030:	f001 fd62 	bl	800aaf8 <vPortEnterCritical>
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800903a:	b25b      	sxtb	r3, r3
 800903c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009040:	d103      	bne.n	800904a <vQueueWaitForMessageRestricted+0x2a>
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009050:	b25b      	sxtb	r3, r3
 8009052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009056:	d103      	bne.n	8009060 <vQueueWaitForMessageRestricted+0x40>
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009060:	f001 fd78 	bl	800ab54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009068:	2b00      	cmp	r3, #0
 800906a:	d106      	bne.n	800907a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	3324      	adds	r3, #36	; 0x24
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	68b9      	ldr	r1, [r7, #8]
 8009074:	4618      	mov	r0, r3
 8009076:	f000 fd99 	bl	8009bac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800907a:	6978      	ldr	r0, [r7, #20]
 800907c:	f7ff ff28 	bl	8008ed0 <prvUnlockQueue>
	}
 8009080:	bf00      	nop
 8009082:	3718      	adds	r7, #24
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009088:	b580      	push	{r7, lr}
 800908a:	b08e      	sub	sp, #56	; 0x38
 800908c:	af04      	add	r7, sp, #16
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	607a      	str	r2, [r7, #4]
 8009094:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009098:	2b00      	cmp	r3, #0
 800909a:	d109      	bne.n	80090b0 <xTaskCreateStatic+0x28>
 800909c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a0:	f383 8811 	msr	BASEPRI, r3
 80090a4:	f3bf 8f6f 	isb	sy
 80090a8:	f3bf 8f4f 	dsb	sy
 80090ac:	623b      	str	r3, [r7, #32]
 80090ae:	e7fe      	b.n	80090ae <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80090b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d109      	bne.n	80090ca <xTaskCreateStatic+0x42>
 80090b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ba:	f383 8811 	msr	BASEPRI, r3
 80090be:	f3bf 8f6f 	isb	sy
 80090c2:	f3bf 8f4f 	dsb	sy
 80090c6:	61fb      	str	r3, [r7, #28]
 80090c8:	e7fe      	b.n	80090c8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80090ca:	235c      	movs	r3, #92	; 0x5c
 80090cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	2b5c      	cmp	r3, #92	; 0x5c
 80090d2:	d009      	beq.n	80090e8 <xTaskCreateStatic+0x60>
 80090d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d8:	f383 8811 	msr	BASEPRI, r3
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f3bf 8f4f 	dsb	sy
 80090e4:	61bb      	str	r3, [r7, #24]
 80090e6:	e7fe      	b.n	80090e6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80090e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d01e      	beq.n	800912c <xTaskCreateStatic+0xa4>
 80090ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d01b      	beq.n	800912c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80090f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80090f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80090fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009100:	2202      	movs	r2, #2
 8009102:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009106:	2300      	movs	r3, #0
 8009108:	9303      	str	r3, [sp, #12]
 800910a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910c:	9302      	str	r3, [sp, #8]
 800910e:	f107 0314 	add.w	r3, r7, #20
 8009112:	9301      	str	r3, [sp, #4]
 8009114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	68b9      	ldr	r1, [r7, #8]
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f000 f850 	bl	80091c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009124:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009126:	f000 f8d3 	bl	80092d0 <prvAddNewTaskToReadyList>
 800912a:	e001      	b.n	8009130 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800912c:	2300      	movs	r3, #0
 800912e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009130:	697b      	ldr	r3, [r7, #20]
	}
 8009132:	4618      	mov	r0, r3
 8009134:	3728      	adds	r7, #40	; 0x28
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800913a:	b580      	push	{r7, lr}
 800913c:	b08c      	sub	sp, #48	; 0x30
 800913e:	af04      	add	r7, sp, #16
 8009140:	60f8      	str	r0, [r7, #12]
 8009142:	60b9      	str	r1, [r7, #8]
 8009144:	603b      	str	r3, [r7, #0]
 8009146:	4613      	mov	r3, r2
 8009148:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800914a:	88fb      	ldrh	r3, [r7, #6]
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	4618      	mov	r0, r3
 8009150:	f001 fdc8 	bl	800ace4 <pvPortMalloc>
 8009154:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00e      	beq.n	800917a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800915c:	205c      	movs	r0, #92	; 0x5c
 800915e:	f001 fdc1 	bl	800ace4 <pvPortMalloc>
 8009162:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d003      	beq.n	8009172 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	697a      	ldr	r2, [r7, #20]
 800916e:	631a      	str	r2, [r3, #48]	; 0x30
 8009170:	e005      	b.n	800917e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009172:	6978      	ldr	r0, [r7, #20]
 8009174:	f001 fe7c 	bl	800ae70 <vPortFree>
 8009178:	e001      	b.n	800917e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800917a:	2300      	movs	r3, #0
 800917c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d017      	beq.n	80091b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800918c:	88fa      	ldrh	r2, [r7, #6]
 800918e:	2300      	movs	r3, #0
 8009190:	9303      	str	r3, [sp, #12]
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	9302      	str	r3, [sp, #8]
 8009196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009198:	9301      	str	r3, [sp, #4]
 800919a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	68b9      	ldr	r1, [r7, #8]
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f000 f80e 	bl	80091c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091a8:	69f8      	ldr	r0, [r7, #28]
 80091aa:	f000 f891 	bl	80092d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80091ae:	2301      	movs	r3, #1
 80091b0:	61bb      	str	r3, [r7, #24]
 80091b2:	e002      	b.n	80091ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80091b4:	f04f 33ff 	mov.w	r3, #4294967295
 80091b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80091ba:	69bb      	ldr	r3, [r7, #24]
	}
 80091bc:	4618      	mov	r0, r3
 80091be:	3720      	adds	r7, #32
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b088      	sub	sp, #32
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
 80091d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80091d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	461a      	mov	r2, r3
 80091dc:	21a5      	movs	r1, #165	; 0xa5
 80091de:	f001 ff88 	bl	800b0f2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80091e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80091ec:	3b01      	subs	r3, #1
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	4413      	add	r3, r2
 80091f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80091f4:	69bb      	ldr	r3, [r7, #24]
 80091f6:	f023 0307 	bic.w	r3, r3, #7
 80091fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	f003 0307 	and.w	r3, r3, #7
 8009202:	2b00      	cmp	r3, #0
 8009204:	d009      	beq.n	800921a <prvInitialiseNewTask+0x56>
 8009206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920a:	f383 8811 	msr	BASEPRI, r3
 800920e:	f3bf 8f6f 	isb	sy
 8009212:	f3bf 8f4f 	dsb	sy
 8009216:	617b      	str	r3, [r7, #20]
 8009218:	e7fe      	b.n	8009218 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800921a:	2300      	movs	r3, #0
 800921c:	61fb      	str	r3, [r7, #28]
 800921e:	e012      	b.n	8009246 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	4413      	add	r3, r2
 8009226:	7819      	ldrb	r1, [r3, #0]
 8009228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	4413      	add	r3, r2
 800922e:	3334      	adds	r3, #52	; 0x34
 8009230:	460a      	mov	r2, r1
 8009232:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009234:	68ba      	ldr	r2, [r7, #8]
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	4413      	add	r3, r2
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d006      	beq.n	800924e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	3301      	adds	r3, #1
 8009244:	61fb      	str	r3, [r7, #28]
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	2b0f      	cmp	r3, #15
 800924a:	d9e9      	bls.n	8009220 <prvInitialiseNewTask+0x5c>
 800924c:	e000      	b.n	8009250 <prvInitialiseNewTask+0x8c>
		{
			break;
 800924e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009252:	2200      	movs	r2, #0
 8009254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925a:	2b37      	cmp	r3, #55	; 0x37
 800925c:	d901      	bls.n	8009262 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800925e:	2337      	movs	r3, #55	; 0x37
 8009260:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009264:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009266:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800926c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800926e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009270:	2200      	movs	r2, #0
 8009272:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009276:	3304      	adds	r3, #4
 8009278:	4618      	mov	r0, r3
 800927a:	f7ff f964 	bl	8008546 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800927e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009280:	3318      	adds	r3, #24
 8009282:	4618      	mov	r0, r3
 8009284:	f7ff f95f 	bl	8008546 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800928c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800928e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009290:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009296:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800929c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800929e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a0:	2200      	movs	r2, #0
 80092a2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80092a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a6:	2200      	movs	r2, #0
 80092a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80092ac:	683a      	ldr	r2, [r7, #0]
 80092ae:	68f9      	ldr	r1, [r7, #12]
 80092b0:	69b8      	ldr	r0, [r7, #24]
 80092b2:	f001 fb35 	bl	800a920 <pxPortInitialiseStack>
 80092b6:	4602      	mov	r2, r0
 80092b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ba:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80092bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d002      	beq.n	80092c8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80092c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092c8:	bf00      	nop
 80092ca:	3720      	adds	r7, #32
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80092d8:	f001 fc0e 	bl	800aaf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80092dc:	4b2d      	ldr	r3, [pc, #180]	; (8009394 <prvAddNewTaskToReadyList+0xc4>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	3301      	adds	r3, #1
 80092e2:	4a2c      	ldr	r2, [pc, #176]	; (8009394 <prvAddNewTaskToReadyList+0xc4>)
 80092e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80092e6:	4b2c      	ldr	r3, [pc, #176]	; (8009398 <prvAddNewTaskToReadyList+0xc8>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d109      	bne.n	8009302 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80092ee:	4a2a      	ldr	r2, [pc, #168]	; (8009398 <prvAddNewTaskToReadyList+0xc8>)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80092f4:	4b27      	ldr	r3, [pc, #156]	; (8009394 <prvAddNewTaskToReadyList+0xc4>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d110      	bne.n	800931e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80092fc:	f000 fdde 	bl	8009ebc <prvInitialiseTaskLists>
 8009300:	e00d      	b.n	800931e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009302:	4b26      	ldr	r3, [pc, #152]	; (800939c <prvAddNewTaskToReadyList+0xcc>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d109      	bne.n	800931e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800930a:	4b23      	ldr	r3, [pc, #140]	; (8009398 <prvAddNewTaskToReadyList+0xc8>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009314:	429a      	cmp	r2, r3
 8009316:	d802      	bhi.n	800931e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009318:	4a1f      	ldr	r2, [pc, #124]	; (8009398 <prvAddNewTaskToReadyList+0xc8>)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800931e:	4b20      	ldr	r3, [pc, #128]	; (80093a0 <prvAddNewTaskToReadyList+0xd0>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	3301      	adds	r3, #1
 8009324:	4a1e      	ldr	r2, [pc, #120]	; (80093a0 <prvAddNewTaskToReadyList+0xd0>)
 8009326:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009328:	4b1d      	ldr	r3, [pc, #116]	; (80093a0 <prvAddNewTaskToReadyList+0xd0>)
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009334:	4b1b      	ldr	r3, [pc, #108]	; (80093a4 <prvAddNewTaskToReadyList+0xd4>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	429a      	cmp	r2, r3
 800933a:	d903      	bls.n	8009344 <prvAddNewTaskToReadyList+0x74>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009340:	4a18      	ldr	r2, [pc, #96]	; (80093a4 <prvAddNewTaskToReadyList+0xd4>)
 8009342:	6013      	str	r3, [r2, #0]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009348:	4613      	mov	r3, r2
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	4413      	add	r3, r2
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	4a15      	ldr	r2, [pc, #84]	; (80093a8 <prvAddNewTaskToReadyList+0xd8>)
 8009352:	441a      	add	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	3304      	adds	r3, #4
 8009358:	4619      	mov	r1, r3
 800935a:	4610      	mov	r0, r2
 800935c:	f7ff f8ff 	bl	800855e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009360:	f001 fbf8 	bl	800ab54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009364:	4b0d      	ldr	r3, [pc, #52]	; (800939c <prvAddNewTaskToReadyList+0xcc>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d00e      	beq.n	800938a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800936c:	4b0a      	ldr	r3, [pc, #40]	; (8009398 <prvAddNewTaskToReadyList+0xc8>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009376:	429a      	cmp	r2, r3
 8009378:	d207      	bcs.n	800938a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800937a:	4b0c      	ldr	r3, [pc, #48]	; (80093ac <prvAddNewTaskToReadyList+0xdc>)
 800937c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009380:	601a      	str	r2, [r3, #0]
 8009382:	f3bf 8f4f 	dsb	sy
 8009386:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800938a:	bf00      	nop
 800938c:	3708      	adds	r7, #8
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	20000bc8 	.word	0x20000bc8
 8009398:	200006f4 	.word	0x200006f4
 800939c:	20000bd4 	.word	0x20000bd4
 80093a0:	20000be4 	.word	0x20000be4
 80093a4:	20000bd0 	.word	0x20000bd0
 80093a8:	200006f8 	.word	0x200006f8
 80093ac:	e000ed04 	.word	0xe000ed04

080093b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80093b8:	2300      	movs	r3, #0
 80093ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d016      	beq.n	80093f0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80093c2:	4b13      	ldr	r3, [pc, #76]	; (8009410 <vTaskDelay+0x60>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d009      	beq.n	80093de <vTaskDelay+0x2e>
 80093ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ce:	f383 8811 	msr	BASEPRI, r3
 80093d2:	f3bf 8f6f 	isb	sy
 80093d6:	f3bf 8f4f 	dsb	sy
 80093da:	60bb      	str	r3, [r7, #8]
 80093dc:	e7fe      	b.n	80093dc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80093de:	f000 f98b 	bl	80096f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80093e2:	2100      	movs	r1, #0
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 fec9 	bl	800a17c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80093ea:	f000 f993 	bl	8009714 <xTaskResumeAll>
 80093ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d107      	bne.n	8009406 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80093f6:	4b07      	ldr	r3, [pc, #28]	; (8009414 <vTaskDelay+0x64>)
 80093f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093fc:	601a      	str	r2, [r3, #0]
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009406:	bf00      	nop
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	20000bf0 	.word	0x20000bf0
 8009414:	e000ed04 	.word	0xe000ed04

08009418 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009420:	f001 fb6a 	bl	800aaf8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d102      	bne.n	8009430 <vTaskSuspend+0x18>
 800942a:	4b2f      	ldr	r3, [pc, #188]	; (80094e8 <vTaskSuspend+0xd0>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	e000      	b.n	8009432 <vTaskSuspend+0x1a>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	3304      	adds	r3, #4
 8009438:	4618      	mov	r0, r3
 800943a:	f7ff f8eb 	bl	8008614 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009442:	2b00      	cmp	r3, #0
 8009444:	d004      	beq.n	8009450 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	3318      	adds	r3, #24
 800944a:	4618      	mov	r0, r3
 800944c:	f7ff f8e2 	bl	8008614 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	3304      	adds	r3, #4
 8009454:	4619      	mov	r1, r3
 8009456:	4825      	ldr	r0, [pc, #148]	; (80094ec <vTaskSuspend+0xd4>)
 8009458:	f7ff f881 	bl	800855e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009462:	b2db      	uxtb	r3, r3
 8009464:	2b01      	cmp	r3, #1
 8009466:	d103      	bne.n	8009470 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2200      	movs	r2, #0
 800946c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8009470:	f001 fb70 	bl	800ab54 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009474:	4b1e      	ldr	r3, [pc, #120]	; (80094f0 <vTaskSuspend+0xd8>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d005      	beq.n	8009488 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800947c:	f001 fb3c 	bl	800aaf8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009480:	f000 fdb6 	bl	8009ff0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009484:	f001 fb66 	bl	800ab54 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009488:	4b17      	ldr	r3, [pc, #92]	; (80094e8 <vTaskSuspend+0xd0>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	429a      	cmp	r2, r3
 8009490:	d126      	bne.n	80094e0 <vTaskSuspend+0xc8>
		{
			if( xSchedulerRunning != pdFALSE )
 8009492:	4b17      	ldr	r3, [pc, #92]	; (80094f0 <vTaskSuspend+0xd8>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d016      	beq.n	80094c8 <vTaskSuspend+0xb0>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800949a:	4b16      	ldr	r3, [pc, #88]	; (80094f4 <vTaskSuspend+0xdc>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d009      	beq.n	80094b6 <vTaskSuspend+0x9e>
 80094a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a6:	f383 8811 	msr	BASEPRI, r3
 80094aa:	f3bf 8f6f 	isb	sy
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	60bb      	str	r3, [r7, #8]
 80094b4:	e7fe      	b.n	80094b4 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 80094b6:	4b10      	ldr	r3, [pc, #64]	; (80094f8 <vTaskSuspend+0xe0>)
 80094b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094bc:	601a      	str	r2, [r3, #0]
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80094c6:	e00b      	b.n	80094e0 <vTaskSuspend+0xc8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80094c8:	4b08      	ldr	r3, [pc, #32]	; (80094ec <vTaskSuspend+0xd4>)
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	4b0b      	ldr	r3, [pc, #44]	; (80094fc <vTaskSuspend+0xe4>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d103      	bne.n	80094dc <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
 80094d4:	4b04      	ldr	r3, [pc, #16]	; (80094e8 <vTaskSuspend+0xd0>)
 80094d6:	2200      	movs	r2, #0
 80094d8:	601a      	str	r2, [r3, #0]
	}
 80094da:	e001      	b.n	80094e0 <vTaskSuspend+0xc8>
					vTaskSwitchContext();
 80094dc:	f000 fa9c 	bl	8009a18 <vTaskSwitchContext>
	}
 80094e0:	bf00      	nop
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	200006f4 	.word	0x200006f4
 80094ec:	20000bb4 	.word	0x20000bb4
 80094f0:	20000bd4 	.word	0x20000bd4
 80094f4:	20000bf0 	.word	0x20000bf0
 80094f8:	e000ed04 	.word	0xe000ed04
 80094fc:	20000bc8 	.word	0x20000bc8

08009500 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8009500:	b480      	push	{r7}
 8009502:	b087      	sub	sp, #28
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8009508:	2300      	movs	r3, #0
 800950a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d109      	bne.n	800952a <prvTaskIsTaskSuspended+0x2a>
 8009516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951a:	f383 8811 	msr	BASEPRI, r3
 800951e:	f3bf 8f6f 	isb	sy
 8009522:	f3bf 8f4f 	dsb	sy
 8009526:	60fb      	str	r3, [r7, #12]
 8009528:	e7fe      	b.n	8009528 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	4a0f      	ldr	r2, [pc, #60]	; (800956c <prvTaskIsTaskSuspended+0x6c>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d101      	bne.n	8009538 <prvTaskIsTaskSuspended+0x38>
 8009534:	2301      	movs	r3, #1
 8009536:	e000      	b.n	800953a <prvTaskIsTaskSuspended+0x3a>
 8009538:	2300      	movs	r3, #0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00f      	beq.n	800955e <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009542:	4a0b      	ldr	r2, [pc, #44]	; (8009570 <prvTaskIsTaskSuspended+0x70>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d00a      	beq.n	800955e <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800954c:	2b00      	cmp	r3, #0
 800954e:	d101      	bne.n	8009554 <prvTaskIsTaskSuspended+0x54>
 8009550:	2301      	movs	r3, #1
 8009552:	e000      	b.n	8009556 <prvTaskIsTaskSuspended+0x56>
 8009554:	2300      	movs	r3, #0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d001      	beq.n	800955e <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 800955a:	2301      	movs	r3, #1
 800955c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800955e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009560:	4618      	mov	r0, r3
 8009562:	371c      	adds	r7, #28
 8009564:	46bd      	mov	sp, r7
 8009566:	bc80      	pop	{r7}
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	20000bb4 	.word	0x20000bb4
 8009570:	20000b88 	.word	0x20000b88

08009574 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d109      	bne.n	800959a <vTaskResume+0x26>
 8009586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958a:	f383 8811 	msr	BASEPRI, r3
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f3bf 8f4f 	dsb	sy
 8009596:	60bb      	str	r3, [r7, #8]
 8009598:	e7fe      	b.n	8009598 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d03a      	beq.n	8009616 <vTaskResume+0xa2>
 80095a0:	4b1f      	ldr	r3, [pc, #124]	; (8009620 <vTaskResume+0xac>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d035      	beq.n	8009616 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 80095aa:	f001 faa5 	bl	800aaf8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	f7ff ffa6 	bl	8009500 <prvTaskIsTaskSuspended>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d02b      	beq.n	8009612 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	3304      	adds	r3, #4
 80095be:	4618      	mov	r0, r3
 80095c0:	f7ff f828 	bl	8008614 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c8:	4b16      	ldr	r3, [pc, #88]	; (8009624 <vTaskResume+0xb0>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d903      	bls.n	80095d8 <vTaskResume+0x64>
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d4:	4a13      	ldr	r2, [pc, #76]	; (8009624 <vTaskResume+0xb0>)
 80095d6:	6013      	str	r3, [r2, #0]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095dc:	4613      	mov	r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4413      	add	r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4a10      	ldr	r2, [pc, #64]	; (8009628 <vTaskResume+0xb4>)
 80095e6:	441a      	add	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	3304      	adds	r3, #4
 80095ec:	4619      	mov	r1, r3
 80095ee:	4610      	mov	r0, r2
 80095f0:	f7fe ffb5 	bl	800855e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095f8:	4b09      	ldr	r3, [pc, #36]	; (8009620 <vTaskResume+0xac>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095fe:	429a      	cmp	r2, r3
 8009600:	d307      	bcc.n	8009612 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8009602:	4b0a      	ldr	r3, [pc, #40]	; (800962c <vTaskResume+0xb8>)
 8009604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009608:	601a      	str	r2, [r3, #0]
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8009612:	f001 fa9f 	bl	800ab54 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009616:	bf00      	nop
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	200006f4 	.word	0x200006f4
 8009624:	20000bd0 	.word	0x20000bd0
 8009628:	200006f8 	.word	0x200006f8
 800962c:	e000ed04 	.word	0xe000ed04

08009630 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b08a      	sub	sp, #40	; 0x28
 8009634:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009636:	2300      	movs	r3, #0
 8009638:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800963a:	2300      	movs	r3, #0
 800963c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800963e:	463a      	mov	r2, r7
 8009640:	1d39      	adds	r1, r7, #4
 8009642:	f107 0308 	add.w	r3, r7, #8
 8009646:	4618      	mov	r0, r3
 8009648:	f7fe fd26 	bl	8008098 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800964c:	6839      	ldr	r1, [r7, #0]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	68ba      	ldr	r2, [r7, #8]
 8009652:	9202      	str	r2, [sp, #8]
 8009654:	9301      	str	r3, [sp, #4]
 8009656:	2300      	movs	r3, #0
 8009658:	9300      	str	r3, [sp, #0]
 800965a:	2300      	movs	r3, #0
 800965c:	460a      	mov	r2, r1
 800965e:	4920      	ldr	r1, [pc, #128]	; (80096e0 <vTaskStartScheduler+0xb0>)
 8009660:	4820      	ldr	r0, [pc, #128]	; (80096e4 <vTaskStartScheduler+0xb4>)
 8009662:	f7ff fd11 	bl	8009088 <xTaskCreateStatic>
 8009666:	4602      	mov	r2, r0
 8009668:	4b1f      	ldr	r3, [pc, #124]	; (80096e8 <vTaskStartScheduler+0xb8>)
 800966a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800966c:	4b1e      	ldr	r3, [pc, #120]	; (80096e8 <vTaskStartScheduler+0xb8>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d002      	beq.n	800967a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009674:	2301      	movs	r3, #1
 8009676:	617b      	str	r3, [r7, #20]
 8009678:	e001      	b.n	800967e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800967a:	2300      	movs	r3, #0
 800967c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d102      	bne.n	800968a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009684:	f000 fdce 	bl	800a224 <xTimerCreateTimerTask>
 8009688:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	2b01      	cmp	r3, #1
 800968e:	d115      	bne.n	80096bc <vTaskStartScheduler+0x8c>
 8009690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009694:	f383 8811 	msr	BASEPRI, r3
 8009698:	f3bf 8f6f 	isb	sy
 800969c:	f3bf 8f4f 	dsb	sy
 80096a0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80096a2:	4b12      	ldr	r3, [pc, #72]	; (80096ec <vTaskStartScheduler+0xbc>)
 80096a4:	f04f 32ff 	mov.w	r2, #4294967295
 80096a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80096aa:	4b11      	ldr	r3, [pc, #68]	; (80096f0 <vTaskStartScheduler+0xc0>)
 80096ac:	2201      	movs	r2, #1
 80096ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80096b0:	4b10      	ldr	r3, [pc, #64]	; (80096f4 <vTaskStartScheduler+0xc4>)
 80096b2:	2200      	movs	r2, #0
 80096b4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80096b6:	f001 f9af 	bl	800aa18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80096ba:	e00d      	b.n	80096d8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c2:	d109      	bne.n	80096d8 <vTaskStartScheduler+0xa8>
 80096c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c8:	f383 8811 	msr	BASEPRI, r3
 80096cc:	f3bf 8f6f 	isb	sy
 80096d0:	f3bf 8f4f 	dsb	sy
 80096d4:	60fb      	str	r3, [r7, #12]
 80096d6:	e7fe      	b.n	80096d6 <vTaskStartScheduler+0xa6>
}
 80096d8:	bf00      	nop
 80096da:	3718      	adds	r7, #24
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	0800b3b0 	.word	0x0800b3b0
 80096e4:	08009e89 	.word	0x08009e89
 80096e8:	20000bec 	.word	0x20000bec
 80096ec:	20000be8 	.word	0x20000be8
 80096f0:	20000bd4 	.word	0x20000bd4
 80096f4:	20000bcc 	.word	0x20000bcc

080096f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80096f8:	b480      	push	{r7}
 80096fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80096fc:	4b04      	ldr	r3, [pc, #16]	; (8009710 <vTaskSuspendAll+0x18>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	3301      	adds	r3, #1
 8009702:	4a03      	ldr	r2, [pc, #12]	; (8009710 <vTaskSuspendAll+0x18>)
 8009704:	6013      	str	r3, [r2, #0]
}
 8009706:	bf00      	nop
 8009708:	46bd      	mov	sp, r7
 800970a:	bc80      	pop	{r7}
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	20000bf0 	.word	0x20000bf0

08009714 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800971a:	2300      	movs	r3, #0
 800971c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800971e:	2300      	movs	r3, #0
 8009720:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009722:	4b41      	ldr	r3, [pc, #260]	; (8009828 <xTaskResumeAll+0x114>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d109      	bne.n	800973e <xTaskResumeAll+0x2a>
 800972a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972e:	f383 8811 	msr	BASEPRI, r3
 8009732:	f3bf 8f6f 	isb	sy
 8009736:	f3bf 8f4f 	dsb	sy
 800973a:	603b      	str	r3, [r7, #0]
 800973c:	e7fe      	b.n	800973c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800973e:	f001 f9db 	bl	800aaf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009742:	4b39      	ldr	r3, [pc, #228]	; (8009828 <xTaskResumeAll+0x114>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	3b01      	subs	r3, #1
 8009748:	4a37      	ldr	r2, [pc, #220]	; (8009828 <xTaskResumeAll+0x114>)
 800974a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800974c:	4b36      	ldr	r3, [pc, #216]	; (8009828 <xTaskResumeAll+0x114>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d162      	bne.n	800981a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009754:	4b35      	ldr	r3, [pc, #212]	; (800982c <xTaskResumeAll+0x118>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d05e      	beq.n	800981a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800975c:	e02f      	b.n	80097be <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800975e:	4b34      	ldr	r3, [pc, #208]	; (8009830 <xTaskResumeAll+0x11c>)
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	3318      	adds	r3, #24
 800976a:	4618      	mov	r0, r3
 800976c:	f7fe ff52 	bl	8008614 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	3304      	adds	r3, #4
 8009774:	4618      	mov	r0, r3
 8009776:	f7fe ff4d 	bl	8008614 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800977e:	4b2d      	ldr	r3, [pc, #180]	; (8009834 <xTaskResumeAll+0x120>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	429a      	cmp	r2, r3
 8009784:	d903      	bls.n	800978e <xTaskResumeAll+0x7a>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978a:	4a2a      	ldr	r2, [pc, #168]	; (8009834 <xTaskResumeAll+0x120>)
 800978c:	6013      	str	r3, [r2, #0]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009792:	4613      	mov	r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	4413      	add	r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	4a27      	ldr	r2, [pc, #156]	; (8009838 <xTaskResumeAll+0x124>)
 800979c:	441a      	add	r2, r3
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	3304      	adds	r3, #4
 80097a2:	4619      	mov	r1, r3
 80097a4:	4610      	mov	r0, r2
 80097a6:	f7fe feda 	bl	800855e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ae:	4b23      	ldr	r3, [pc, #140]	; (800983c <xTaskResumeAll+0x128>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d302      	bcc.n	80097be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80097b8:	4b21      	ldr	r3, [pc, #132]	; (8009840 <xTaskResumeAll+0x12c>)
 80097ba:	2201      	movs	r2, #1
 80097bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097be:	4b1c      	ldr	r3, [pc, #112]	; (8009830 <xTaskResumeAll+0x11c>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1cb      	bne.n	800975e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d001      	beq.n	80097d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80097cc:	f000 fc10 	bl	8009ff0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80097d0:	4b1c      	ldr	r3, [pc, #112]	; (8009844 <xTaskResumeAll+0x130>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d010      	beq.n	80097fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80097dc:	f000 f856 	bl	800988c <xTaskIncrementTick>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d002      	beq.n	80097ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80097e6:	4b16      	ldr	r3, [pc, #88]	; (8009840 <xTaskResumeAll+0x12c>)
 80097e8:	2201      	movs	r2, #1
 80097ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	3b01      	subs	r3, #1
 80097f0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d1f1      	bne.n	80097dc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80097f8:	4b12      	ldr	r3, [pc, #72]	; (8009844 <xTaskResumeAll+0x130>)
 80097fa:	2200      	movs	r2, #0
 80097fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80097fe:	4b10      	ldr	r3, [pc, #64]	; (8009840 <xTaskResumeAll+0x12c>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d009      	beq.n	800981a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009806:	2301      	movs	r3, #1
 8009808:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800980a:	4b0f      	ldr	r3, [pc, #60]	; (8009848 <xTaskResumeAll+0x134>)
 800980c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009810:	601a      	str	r2, [r3, #0]
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800981a:	f001 f99b 	bl	800ab54 <vPortExitCritical>

	return xAlreadyYielded;
 800981e:	68bb      	ldr	r3, [r7, #8]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3710      	adds	r7, #16
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	20000bf0 	.word	0x20000bf0
 800982c:	20000bc8 	.word	0x20000bc8
 8009830:	20000b88 	.word	0x20000b88
 8009834:	20000bd0 	.word	0x20000bd0
 8009838:	200006f8 	.word	0x200006f8
 800983c:	200006f4 	.word	0x200006f4
 8009840:	20000bdc 	.word	0x20000bdc
 8009844:	20000bd8 	.word	0x20000bd8
 8009848:	e000ed04 	.word	0xe000ed04

0800984c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009852:	4b04      	ldr	r3, [pc, #16]	; (8009864 <xTaskGetTickCount+0x18>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009858:	687b      	ldr	r3, [r7, #4]
}
 800985a:	4618      	mov	r0, r3
 800985c:	370c      	adds	r7, #12
 800985e:	46bd      	mov	sp, r7
 8009860:	bc80      	pop	{r7}
 8009862:	4770      	bx	lr
 8009864:	20000bcc 	.word	0x20000bcc

08009868 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800986e:	f001 f9fd 	bl	800ac6c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009872:	2300      	movs	r3, #0
 8009874:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009876:	4b04      	ldr	r3, [pc, #16]	; (8009888 <xTaskGetTickCountFromISR+0x20>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800987c:	683b      	ldr	r3, [r7, #0]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	20000bcc 	.word	0x20000bcc

0800988c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b086      	sub	sp, #24
 8009890:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009892:	2300      	movs	r3, #0
 8009894:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009896:	4b55      	ldr	r3, [pc, #340]	; (80099ec <xTaskIncrementTick+0x160>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	f040 8093 	bne.w	80099c6 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80098a0:	4b53      	ldr	r3, [pc, #332]	; (80099f0 <xTaskIncrementTick+0x164>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	3301      	adds	r3, #1
 80098a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80098a8:	4a51      	ldr	r2, [pc, #324]	; (80099f0 <xTaskIncrementTick+0x164>)
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d11f      	bne.n	80098f4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80098b4:	4b4f      	ldr	r3, [pc, #316]	; (80099f4 <xTaskIncrementTick+0x168>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d009      	beq.n	80098d2 <xTaskIncrementTick+0x46>
 80098be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	603b      	str	r3, [r7, #0]
 80098d0:	e7fe      	b.n	80098d0 <xTaskIncrementTick+0x44>
 80098d2:	4b48      	ldr	r3, [pc, #288]	; (80099f4 <xTaskIncrementTick+0x168>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	60fb      	str	r3, [r7, #12]
 80098d8:	4b47      	ldr	r3, [pc, #284]	; (80099f8 <xTaskIncrementTick+0x16c>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a45      	ldr	r2, [pc, #276]	; (80099f4 <xTaskIncrementTick+0x168>)
 80098de:	6013      	str	r3, [r2, #0]
 80098e0:	4a45      	ldr	r2, [pc, #276]	; (80099f8 <xTaskIncrementTick+0x16c>)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6013      	str	r3, [r2, #0]
 80098e6:	4b45      	ldr	r3, [pc, #276]	; (80099fc <xTaskIncrementTick+0x170>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	3301      	adds	r3, #1
 80098ec:	4a43      	ldr	r2, [pc, #268]	; (80099fc <xTaskIncrementTick+0x170>)
 80098ee:	6013      	str	r3, [r2, #0]
 80098f0:	f000 fb7e 	bl	8009ff0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80098f4:	4b42      	ldr	r3, [pc, #264]	; (8009a00 <xTaskIncrementTick+0x174>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	693a      	ldr	r2, [r7, #16]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d34e      	bcc.n	800999c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098fe:	4b3d      	ldr	r3, [pc, #244]	; (80099f4 <xTaskIncrementTick+0x168>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d101      	bne.n	800990c <xTaskIncrementTick+0x80>
 8009908:	2301      	movs	r3, #1
 800990a:	e000      	b.n	800990e <xTaskIncrementTick+0x82>
 800990c:	2300      	movs	r3, #0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d004      	beq.n	800991c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009912:	4b3b      	ldr	r3, [pc, #236]	; (8009a00 <xTaskIncrementTick+0x174>)
 8009914:	f04f 32ff 	mov.w	r2, #4294967295
 8009918:	601a      	str	r2, [r3, #0]
					break;
 800991a:	e03f      	b.n	800999c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800991c:	4b35      	ldr	r3, [pc, #212]	; (80099f4 <xTaskIncrementTick+0x168>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	429a      	cmp	r2, r3
 8009932:	d203      	bcs.n	800993c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009934:	4a32      	ldr	r2, [pc, #200]	; (8009a00 <xTaskIncrementTick+0x174>)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6013      	str	r3, [r2, #0]
						break;
 800993a:	e02f      	b.n	800999c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	3304      	adds	r3, #4
 8009940:	4618      	mov	r0, r3
 8009942:	f7fe fe67 	bl	8008614 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800994a:	2b00      	cmp	r3, #0
 800994c:	d004      	beq.n	8009958 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	3318      	adds	r3, #24
 8009952:	4618      	mov	r0, r3
 8009954:	f7fe fe5e 	bl	8008614 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800995c:	4b29      	ldr	r3, [pc, #164]	; (8009a04 <xTaskIncrementTick+0x178>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	429a      	cmp	r2, r3
 8009962:	d903      	bls.n	800996c <xTaskIncrementTick+0xe0>
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009968:	4a26      	ldr	r2, [pc, #152]	; (8009a04 <xTaskIncrementTick+0x178>)
 800996a:	6013      	str	r3, [r2, #0]
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009970:	4613      	mov	r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4413      	add	r3, r2
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4a23      	ldr	r2, [pc, #140]	; (8009a08 <xTaskIncrementTick+0x17c>)
 800997a:	441a      	add	r2, r3
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	3304      	adds	r3, #4
 8009980:	4619      	mov	r1, r3
 8009982:	4610      	mov	r0, r2
 8009984:	f7fe fdeb 	bl	800855e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800998c:	4b1f      	ldr	r3, [pc, #124]	; (8009a0c <xTaskIncrementTick+0x180>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009992:	429a      	cmp	r2, r3
 8009994:	d3b3      	bcc.n	80098fe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009996:	2301      	movs	r3, #1
 8009998:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800999a:	e7b0      	b.n	80098fe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800999c:	4b1b      	ldr	r3, [pc, #108]	; (8009a0c <xTaskIncrementTick+0x180>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a2:	4919      	ldr	r1, [pc, #100]	; (8009a08 <xTaskIncrementTick+0x17c>)
 80099a4:	4613      	mov	r3, r2
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	4413      	add	r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	440b      	add	r3, r1
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d901      	bls.n	80099b8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80099b4:	2301      	movs	r3, #1
 80099b6:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80099b8:	4b15      	ldr	r3, [pc, #84]	; (8009a10 <xTaskIncrementTick+0x184>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d109      	bne.n	80099d4 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 80099c0:	f7f7 fe0a 	bl	80015d8 <vApplicationTickHook>
 80099c4:	e006      	b.n	80099d4 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80099c6:	4b12      	ldr	r3, [pc, #72]	; (8009a10 <xTaskIncrementTick+0x184>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	3301      	adds	r3, #1
 80099cc:	4a10      	ldr	r2, [pc, #64]	; (8009a10 <xTaskIncrementTick+0x184>)
 80099ce:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80099d0:	f7f7 fe02 	bl	80015d8 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80099d4:	4b0f      	ldr	r3, [pc, #60]	; (8009a14 <xTaskIncrementTick+0x188>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d001      	beq.n	80099e0 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 80099dc:	2301      	movs	r3, #1
 80099de:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80099e0:	697b      	ldr	r3, [r7, #20]
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3718      	adds	r7, #24
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	20000bf0 	.word	0x20000bf0
 80099f0:	20000bcc 	.word	0x20000bcc
 80099f4:	20000b80 	.word	0x20000b80
 80099f8:	20000b84 	.word	0x20000b84
 80099fc:	20000be0 	.word	0x20000be0
 8009a00:	20000be8 	.word	0x20000be8
 8009a04:	20000bd0 	.word	0x20000bd0
 8009a08:	200006f8 	.word	0x200006f8
 8009a0c:	200006f4 	.word	0x200006f4
 8009a10:	20000bd8 	.word	0x20000bd8
 8009a14:	20000bdc 	.word	0x20000bdc

08009a18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a1e:	4b2f      	ldr	r3, [pc, #188]	; (8009adc <vTaskSwitchContext+0xc4>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d003      	beq.n	8009a2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a26:	4b2e      	ldr	r3, [pc, #184]	; (8009ae0 <vTaskSwitchContext+0xc8>)
 8009a28:	2201      	movs	r2, #1
 8009a2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a2c:	e051      	b.n	8009ad2 <vTaskSwitchContext+0xba>
		xYieldPending = pdFALSE;
 8009a2e:	4b2c      	ldr	r3, [pc, #176]	; (8009ae0 <vTaskSwitchContext+0xc8>)
 8009a30:	2200      	movs	r2, #0
 8009a32:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009a34:	4b2b      	ldr	r3, [pc, #172]	; (8009ae4 <vTaskSwitchContext+0xcc>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	4b2a      	ldr	r3, [pc, #168]	; (8009ae4 <vTaskSwitchContext+0xcc>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d808      	bhi.n	8009a56 <vTaskSwitchContext+0x3e>
 8009a44:	4b27      	ldr	r3, [pc, #156]	; (8009ae4 <vTaskSwitchContext+0xcc>)
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	4b26      	ldr	r3, [pc, #152]	; (8009ae4 <vTaskSwitchContext+0xcc>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	3334      	adds	r3, #52	; 0x34
 8009a4e:	4619      	mov	r1, r3
 8009a50:	4610      	mov	r0, r2
 8009a52:	f7f7 fdc7 	bl	80015e4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009a56:	4b24      	ldr	r3, [pc, #144]	; (8009ae8 <vTaskSwitchContext+0xd0>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	60fb      	str	r3, [r7, #12]
 8009a5c:	e00f      	b.n	8009a7e <vTaskSwitchContext+0x66>
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d109      	bne.n	8009a78 <vTaskSwitchContext+0x60>
 8009a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a68:	f383 8811 	msr	BASEPRI, r3
 8009a6c:	f3bf 8f6f 	isb	sy
 8009a70:	f3bf 8f4f 	dsb	sy
 8009a74:	607b      	str	r3, [r7, #4]
 8009a76:	e7fe      	b.n	8009a76 <vTaskSwitchContext+0x5e>
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	60fb      	str	r3, [r7, #12]
 8009a7e:	491b      	ldr	r1, [pc, #108]	; (8009aec <vTaskSwitchContext+0xd4>)
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	4613      	mov	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	4413      	add	r3, r2
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	440b      	add	r3, r1
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d0e5      	beq.n	8009a5e <vTaskSwitchContext+0x46>
 8009a92:	68fa      	ldr	r2, [r7, #12]
 8009a94:	4613      	mov	r3, r2
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	4413      	add	r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	4a13      	ldr	r2, [pc, #76]	; (8009aec <vTaskSwitchContext+0xd4>)
 8009a9e:	4413      	add	r3, r2
 8009aa0:	60bb      	str	r3, [r7, #8]
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	685a      	ldr	r2, [r3, #4]
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	605a      	str	r2, [r3, #4]
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	685a      	ldr	r2, [r3, #4]
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	3308      	adds	r3, #8
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d104      	bne.n	8009ac2 <vTaskSwitchContext+0xaa>
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	685a      	ldr	r2, [r3, #4]
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	605a      	str	r2, [r3, #4]
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	4a06      	ldr	r2, [pc, #24]	; (8009ae4 <vTaskSwitchContext+0xcc>)
 8009aca:	6013      	str	r3, [r2, #0]
 8009acc:	4a06      	ldr	r2, [pc, #24]	; (8009ae8 <vTaskSwitchContext+0xd0>)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	6013      	str	r3, [r2, #0]
}
 8009ad2:	bf00      	nop
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	20000bf0 	.word	0x20000bf0
 8009ae0:	20000bdc 	.word	0x20000bdc
 8009ae4:	200006f4 	.word	0x200006f4
 8009ae8:	20000bd0 	.word	0x20000bd0
 8009aec:	200006f8 	.word	0x200006f8

08009af0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d109      	bne.n	8009b14 <vTaskPlaceOnEventList+0x24>
 8009b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b04:	f383 8811 	msr	BASEPRI, r3
 8009b08:	f3bf 8f6f 	isb	sy
 8009b0c:	f3bf 8f4f 	dsb	sy
 8009b10:	60fb      	str	r3, [r7, #12]
 8009b12:	e7fe      	b.n	8009b12 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b14:	4b07      	ldr	r3, [pc, #28]	; (8009b34 <vTaskPlaceOnEventList+0x44>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	3318      	adds	r3, #24
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f7fe fd41 	bl	80085a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b22:	2101      	movs	r1, #1
 8009b24:	6838      	ldr	r0, [r7, #0]
 8009b26:	f000 fb29 	bl	800a17c <prvAddCurrentTaskToDelayedList>
}
 8009b2a:	bf00      	nop
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	200006f4 	.word	0x200006f4

08009b38 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b086      	sub	sp, #24
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d109      	bne.n	8009b5e <vTaskPlaceOnUnorderedEventList+0x26>
 8009b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4e:	f383 8811 	msr	BASEPRI, r3
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	617b      	str	r3, [r7, #20]
 8009b5c:	e7fe      	b.n	8009b5c <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8009b5e:	4b11      	ldr	r3, [pc, #68]	; (8009ba4 <vTaskPlaceOnUnorderedEventList+0x6c>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d109      	bne.n	8009b7a <vTaskPlaceOnUnorderedEventList+0x42>
 8009b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6a:	f383 8811 	msr	BASEPRI, r3
 8009b6e:	f3bf 8f6f 	isb	sy
 8009b72:	f3bf 8f4f 	dsb	sy
 8009b76:	613b      	str	r3, [r7, #16]
 8009b78:	e7fe      	b.n	8009b78 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009b7a:	4b0b      	ldr	r3, [pc, #44]	; (8009ba8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	68ba      	ldr	r2, [r7, #8]
 8009b80:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009b84:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b86:	4b08      	ldr	r3, [pc, #32]	; (8009ba8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	3318      	adds	r3, #24
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	68f8      	ldr	r0, [r7, #12]
 8009b90:	f7fe fce5 	bl	800855e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b94:	2101      	movs	r1, #1
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 faf0 	bl	800a17c <prvAddCurrentTaskToDelayedList>
}
 8009b9c:	bf00      	nop
 8009b9e:	3718      	adds	r7, #24
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	20000bf0 	.word	0x20000bf0
 8009ba8:	200006f4 	.word	0x200006f4

08009bac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b086      	sub	sp, #24
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d109      	bne.n	8009bd2 <vTaskPlaceOnEventListRestricted+0x26>
 8009bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc2:	f383 8811 	msr	BASEPRI, r3
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	617b      	str	r3, [r7, #20]
 8009bd0:	e7fe      	b.n	8009bd0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009bd2:	4b0a      	ldr	r3, [pc, #40]	; (8009bfc <vTaskPlaceOnEventListRestricted+0x50>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	3318      	adds	r3, #24
 8009bd8:	4619      	mov	r1, r3
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f7fe fcbf 	bl	800855e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d002      	beq.n	8009bec <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8009be6:	f04f 33ff 	mov.w	r3, #4294967295
 8009bea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009bec:	6879      	ldr	r1, [r7, #4]
 8009bee:	68b8      	ldr	r0, [r7, #8]
 8009bf0:	f000 fac4 	bl	800a17c <prvAddCurrentTaskToDelayedList>
	}
 8009bf4:	bf00      	nop
 8009bf6:	3718      	adds	r7, #24
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	200006f4 	.word	0x200006f4

08009c00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b086      	sub	sp, #24
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	68db      	ldr	r3, [r3, #12]
 8009c0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d109      	bne.n	8009c2a <xTaskRemoveFromEventList+0x2a>
 8009c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	60fb      	str	r3, [r7, #12]
 8009c28:	e7fe      	b.n	8009c28 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	3318      	adds	r3, #24
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7fe fcf0 	bl	8008614 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c34:	4b1d      	ldr	r3, [pc, #116]	; (8009cac <xTaskRemoveFromEventList+0xac>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d11d      	bne.n	8009c78 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	3304      	adds	r3, #4
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7fe fce7 	bl	8008614 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c4a:	4b19      	ldr	r3, [pc, #100]	; (8009cb0 <xTaskRemoveFromEventList+0xb0>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d903      	bls.n	8009c5a <xTaskRemoveFromEventList+0x5a>
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c56:	4a16      	ldr	r2, [pc, #88]	; (8009cb0 <xTaskRemoveFromEventList+0xb0>)
 8009c58:	6013      	str	r3, [r2, #0]
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c5e:	4613      	mov	r3, r2
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	4413      	add	r3, r2
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4a13      	ldr	r2, [pc, #76]	; (8009cb4 <xTaskRemoveFromEventList+0xb4>)
 8009c68:	441a      	add	r2, r3
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	3304      	adds	r3, #4
 8009c6e:	4619      	mov	r1, r3
 8009c70:	4610      	mov	r0, r2
 8009c72:	f7fe fc74 	bl	800855e <vListInsertEnd>
 8009c76:	e005      	b.n	8009c84 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	3318      	adds	r3, #24
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	480e      	ldr	r0, [pc, #56]	; (8009cb8 <xTaskRemoveFromEventList+0xb8>)
 8009c80:	f7fe fc6d 	bl	800855e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c88:	4b0c      	ldr	r3, [pc, #48]	; (8009cbc <xTaskRemoveFromEventList+0xbc>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d905      	bls.n	8009c9e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c92:	2301      	movs	r3, #1
 8009c94:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c96:	4b0a      	ldr	r3, [pc, #40]	; (8009cc0 <xTaskRemoveFromEventList+0xc0>)
 8009c98:	2201      	movs	r2, #1
 8009c9a:	601a      	str	r2, [r3, #0]
 8009c9c:	e001      	b.n	8009ca2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009ca2:	697b      	ldr	r3, [r7, #20]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3718      	adds	r7, #24
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	20000bf0 	.word	0x20000bf0
 8009cb0:	20000bd0 	.word	0x20000bd0
 8009cb4:	200006f8 	.word	0x200006f8
 8009cb8:	20000b88 	.word	0x20000b88
 8009cbc:	200006f4 	.word	0x200006f4
 8009cc0:	20000bdc 	.word	0x20000bdc

08009cc4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b086      	sub	sp, #24
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009cce:	4b28      	ldr	r3, [pc, #160]	; (8009d70 <vTaskRemoveFromUnorderedEventList+0xac>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d109      	bne.n	8009cea <vTaskRemoveFromUnorderedEventList+0x26>
 8009cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cda:	f383 8811 	msr	BASEPRI, r3
 8009cde:	f3bf 8f6f 	isb	sy
 8009ce2:	f3bf 8f4f 	dsb	sy
 8009ce6:	613b      	str	r3, [r7, #16]
 8009ce8:	e7fe      	b.n	8009ce8 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d109      	bne.n	8009d14 <vTaskRemoveFromUnorderedEventList+0x50>
 8009d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d04:	f383 8811 	msr	BASEPRI, r3
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	60fb      	str	r3, [r7, #12]
 8009d12:	e7fe      	b.n	8009d12 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f7fe fc7d 	bl	8008614 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	3304      	adds	r3, #4
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fe fc78 	bl	8008614 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d28:	4b12      	ldr	r3, [pc, #72]	; (8009d74 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d903      	bls.n	8009d38 <vTaskRemoveFromUnorderedEventList+0x74>
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d34:	4a0f      	ldr	r2, [pc, #60]	; (8009d74 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8009d36:	6013      	str	r3, [r2, #0]
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	4413      	add	r3, r2
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	4a0c      	ldr	r2, [pc, #48]	; (8009d78 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009d46:	441a      	add	r2, r3
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	3304      	adds	r3, #4
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	4610      	mov	r0, r2
 8009d50:	f7fe fc05 	bl	800855e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d58:	4b08      	ldr	r3, [pc, #32]	; (8009d7c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d902      	bls.n	8009d68 <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009d62:	4b07      	ldr	r3, [pc, #28]	; (8009d80 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8009d64:	2201      	movs	r2, #1
 8009d66:	601a      	str	r2, [r3, #0]
	}
}
 8009d68:	bf00      	nop
 8009d6a:	3718      	adds	r7, #24
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	20000bf0 	.word	0x20000bf0
 8009d74:	20000bd0 	.word	0x20000bd0
 8009d78:	200006f8 	.word	0x200006f8
 8009d7c:	200006f4 	.word	0x200006f4
 8009d80:	20000bdc 	.word	0x20000bdc

08009d84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009d8c:	4b06      	ldr	r3, [pc, #24]	; (8009da8 <vTaskInternalSetTimeOutState+0x24>)
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009d94:	4b05      	ldr	r3, [pc, #20]	; (8009dac <vTaskInternalSetTimeOutState+0x28>)
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	605a      	str	r2, [r3, #4]
}
 8009d9c:	bf00      	nop
 8009d9e:	370c      	adds	r7, #12
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bc80      	pop	{r7}
 8009da4:	4770      	bx	lr
 8009da6:	bf00      	nop
 8009da8:	20000be0 	.word	0x20000be0
 8009dac:	20000bcc 	.word	0x20000bcc

08009db0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b088      	sub	sp, #32
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d109      	bne.n	8009dd4 <xTaskCheckForTimeOut+0x24>
 8009dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc4:	f383 8811 	msr	BASEPRI, r3
 8009dc8:	f3bf 8f6f 	isb	sy
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	613b      	str	r3, [r7, #16]
 8009dd2:	e7fe      	b.n	8009dd2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d109      	bne.n	8009dee <xTaskCheckForTimeOut+0x3e>
 8009dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dde:	f383 8811 	msr	BASEPRI, r3
 8009de2:	f3bf 8f6f 	isb	sy
 8009de6:	f3bf 8f4f 	dsb	sy
 8009dea:	60fb      	str	r3, [r7, #12]
 8009dec:	e7fe      	b.n	8009dec <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009dee:	f000 fe83 	bl	800aaf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009df2:	4b1d      	ldr	r3, [pc, #116]	; (8009e68 <xTaskCheckForTimeOut+0xb8>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	69ba      	ldr	r2, [r7, #24]
 8009dfe:	1ad3      	subs	r3, r2, r3
 8009e00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e0a:	d102      	bne.n	8009e12 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	61fb      	str	r3, [r7, #28]
 8009e10:	e023      	b.n	8009e5a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	4b15      	ldr	r3, [pc, #84]	; (8009e6c <xTaskCheckForTimeOut+0xbc>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d007      	beq.n	8009e2e <xTaskCheckForTimeOut+0x7e>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	69ba      	ldr	r2, [r7, #24]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d302      	bcc.n	8009e2e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	61fb      	str	r3, [r7, #28]
 8009e2c:	e015      	b.n	8009e5a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	697a      	ldr	r2, [r7, #20]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d20b      	bcs.n	8009e50 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	1ad2      	subs	r2, r2, r3
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f7ff ff9d 	bl	8009d84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	61fb      	str	r3, [r7, #28]
 8009e4e:	e004      	b.n	8009e5a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	2200      	movs	r2, #0
 8009e54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009e56:	2301      	movs	r3, #1
 8009e58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009e5a:	f000 fe7b 	bl	800ab54 <vPortExitCritical>

	return xReturn;
 8009e5e:	69fb      	ldr	r3, [r7, #28]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3720      	adds	r7, #32
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	20000bcc 	.word	0x20000bcc
 8009e6c:	20000be0 	.word	0x20000be0

08009e70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009e70:	b480      	push	{r7}
 8009e72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009e74:	4b03      	ldr	r3, [pc, #12]	; (8009e84 <vTaskMissedYield+0x14>)
 8009e76:	2201      	movs	r2, #1
 8009e78:	601a      	str	r2, [r3, #0]
}
 8009e7a:	bf00      	nop
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bc80      	pop	{r7}
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	20000bdc 	.word	0x20000bdc

08009e88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009e90:	f000 f854 	bl	8009f3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009e94:	4b07      	ldr	r3, [pc, #28]	; (8009eb4 <prvIdleTask+0x2c>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d907      	bls.n	8009eac <prvIdleTask+0x24>
			{
				taskYIELD();
 8009e9c:	4b06      	ldr	r3, [pc, #24]	; (8009eb8 <prvIdleTask+0x30>)
 8009e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ea2:	601a      	str	r2, [r3, #0]
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8009eac:	f7f7 fb8e 	bl	80015cc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009eb0:	e7ee      	b.n	8009e90 <prvIdleTask+0x8>
 8009eb2:	bf00      	nop
 8009eb4:	200006f8 	.word	0x200006f8
 8009eb8:	e000ed04 	.word	0xe000ed04

08009ebc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	607b      	str	r3, [r7, #4]
 8009ec6:	e00c      	b.n	8009ee2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	4613      	mov	r3, r2
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	4413      	add	r3, r2
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	4a12      	ldr	r2, [pc, #72]	; (8009f1c <prvInitialiseTaskLists+0x60>)
 8009ed4:	4413      	add	r3, r2
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fe fb16 	bl	8008508 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	607b      	str	r3, [r7, #4]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2b37      	cmp	r3, #55	; 0x37
 8009ee6:	d9ef      	bls.n	8009ec8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009ee8:	480d      	ldr	r0, [pc, #52]	; (8009f20 <prvInitialiseTaskLists+0x64>)
 8009eea:	f7fe fb0d 	bl	8008508 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009eee:	480d      	ldr	r0, [pc, #52]	; (8009f24 <prvInitialiseTaskLists+0x68>)
 8009ef0:	f7fe fb0a 	bl	8008508 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ef4:	480c      	ldr	r0, [pc, #48]	; (8009f28 <prvInitialiseTaskLists+0x6c>)
 8009ef6:	f7fe fb07 	bl	8008508 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009efa:	480c      	ldr	r0, [pc, #48]	; (8009f2c <prvInitialiseTaskLists+0x70>)
 8009efc:	f7fe fb04 	bl	8008508 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009f00:	480b      	ldr	r0, [pc, #44]	; (8009f30 <prvInitialiseTaskLists+0x74>)
 8009f02:	f7fe fb01 	bl	8008508 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009f06:	4b0b      	ldr	r3, [pc, #44]	; (8009f34 <prvInitialiseTaskLists+0x78>)
 8009f08:	4a05      	ldr	r2, [pc, #20]	; (8009f20 <prvInitialiseTaskLists+0x64>)
 8009f0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009f0c:	4b0a      	ldr	r3, [pc, #40]	; (8009f38 <prvInitialiseTaskLists+0x7c>)
 8009f0e:	4a05      	ldr	r2, [pc, #20]	; (8009f24 <prvInitialiseTaskLists+0x68>)
 8009f10:	601a      	str	r2, [r3, #0]
}
 8009f12:	bf00      	nop
 8009f14:	3708      	adds	r7, #8
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	200006f8 	.word	0x200006f8
 8009f20:	20000b58 	.word	0x20000b58
 8009f24:	20000b6c 	.word	0x20000b6c
 8009f28:	20000b88 	.word	0x20000b88
 8009f2c:	20000b9c 	.word	0x20000b9c
 8009f30:	20000bb4 	.word	0x20000bb4
 8009f34:	20000b80 	.word	0x20000b80
 8009f38:	20000b84 	.word	0x20000b84

08009f3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f42:	e019      	b.n	8009f78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009f44:	f000 fdd8 	bl	800aaf8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009f48:	4b0f      	ldr	r3, [pc, #60]	; (8009f88 <prvCheckTasksWaitingTermination+0x4c>)
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	3304      	adds	r3, #4
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7fe fb5d 	bl	8008614 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009f5a:	4b0c      	ldr	r3, [pc, #48]	; (8009f8c <prvCheckTasksWaitingTermination+0x50>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	4a0a      	ldr	r2, [pc, #40]	; (8009f8c <prvCheckTasksWaitingTermination+0x50>)
 8009f62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009f64:	4b0a      	ldr	r3, [pc, #40]	; (8009f90 <prvCheckTasksWaitingTermination+0x54>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	4a09      	ldr	r2, [pc, #36]	; (8009f90 <prvCheckTasksWaitingTermination+0x54>)
 8009f6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009f6e:	f000 fdf1 	bl	800ab54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 f80e 	bl	8009f94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f78:	4b05      	ldr	r3, [pc, #20]	; (8009f90 <prvCheckTasksWaitingTermination+0x54>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d1e1      	bne.n	8009f44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009f80:	bf00      	nop
 8009f82:	3708      	adds	r7, #8
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	20000b9c 	.word	0x20000b9c
 8009f8c:	20000bc8 	.word	0x20000bc8
 8009f90:	20000bb0 	.word	0x20000bb0

08009f94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d108      	bne.n	8009fb8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009faa:	4618      	mov	r0, r3
 8009fac:	f000 ff60 	bl	800ae70 <vPortFree>
				vPortFree( pxTCB );
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 ff5d 	bl	800ae70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009fb6:	e017      	b.n	8009fe8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d103      	bne.n	8009fca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 ff54 	bl	800ae70 <vPortFree>
	}
 8009fc8:	e00e      	b.n	8009fe8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009fd0:	2b02      	cmp	r3, #2
 8009fd2:	d009      	beq.n	8009fe8 <prvDeleteTCB+0x54>
 8009fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd8:	f383 8811 	msr	BASEPRI, r3
 8009fdc:	f3bf 8f6f 	isb	sy
 8009fe0:	f3bf 8f4f 	dsb	sy
 8009fe4:	60fb      	str	r3, [r7, #12]
 8009fe6:	e7fe      	b.n	8009fe6 <prvDeleteTCB+0x52>
	}
 8009fe8:	bf00      	nop
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ff6:	4b0e      	ldr	r3, [pc, #56]	; (800a030 <prvResetNextTaskUnblockTime+0x40>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d101      	bne.n	800a004 <prvResetNextTaskUnblockTime+0x14>
 800a000:	2301      	movs	r3, #1
 800a002:	e000      	b.n	800a006 <prvResetNextTaskUnblockTime+0x16>
 800a004:	2300      	movs	r3, #0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d004      	beq.n	800a014 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a00a:	4b0a      	ldr	r3, [pc, #40]	; (800a034 <prvResetNextTaskUnblockTime+0x44>)
 800a00c:	f04f 32ff 	mov.w	r2, #4294967295
 800a010:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a012:	e008      	b.n	800a026 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a014:	4b06      	ldr	r3, [pc, #24]	; (800a030 <prvResetNextTaskUnblockTime+0x40>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	4a04      	ldr	r2, [pc, #16]	; (800a034 <prvResetNextTaskUnblockTime+0x44>)
 800a024:	6013      	str	r3, [r2, #0]
}
 800a026:	bf00      	nop
 800a028:	370c      	adds	r7, #12
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bc80      	pop	{r7}
 800a02e:	4770      	bx	lr
 800a030:	20000b80 	.word	0x20000b80
 800a034:	20000be8 	.word	0x20000be8

0800a038 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a03e:	4b0b      	ldr	r3, [pc, #44]	; (800a06c <xTaskGetSchedulerState+0x34>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d102      	bne.n	800a04c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a046:	2301      	movs	r3, #1
 800a048:	607b      	str	r3, [r7, #4]
 800a04a:	e008      	b.n	800a05e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a04c:	4b08      	ldr	r3, [pc, #32]	; (800a070 <xTaskGetSchedulerState+0x38>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d102      	bne.n	800a05a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a054:	2302      	movs	r3, #2
 800a056:	607b      	str	r3, [r7, #4]
 800a058:	e001      	b.n	800a05e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a05a:	2300      	movs	r3, #0
 800a05c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a05e:	687b      	ldr	r3, [r7, #4]
	}
 800a060:	4618      	mov	r0, r3
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	bc80      	pop	{r7}
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop
 800a06c:	20000bd4 	.word	0x20000bd4
 800a070:	20000bf0 	.word	0x20000bf0

0800a074 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a074:	b580      	push	{r7, lr}
 800a076:	b086      	sub	sp, #24
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a080:	2300      	movs	r3, #0
 800a082:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d054      	beq.n	800a134 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a08a:	4b2d      	ldr	r3, [pc, #180]	; (800a140 <xTaskPriorityDisinherit+0xcc>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	693a      	ldr	r2, [r7, #16]
 800a090:	429a      	cmp	r2, r3
 800a092:	d009      	beq.n	800a0a8 <xTaskPriorityDisinherit+0x34>
 800a094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a098:	f383 8811 	msr	BASEPRI, r3
 800a09c:	f3bf 8f6f 	isb	sy
 800a0a0:	f3bf 8f4f 	dsb	sy
 800a0a4:	60fb      	str	r3, [r7, #12]
 800a0a6:	e7fe      	b.n	800a0a6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d109      	bne.n	800a0c4 <xTaskPriorityDisinherit+0x50>
 800a0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b4:	f383 8811 	msr	BASEPRI, r3
 800a0b8:	f3bf 8f6f 	isb	sy
 800a0bc:	f3bf 8f4f 	dsb	sy
 800a0c0:	60bb      	str	r3, [r7, #8]
 800a0c2:	e7fe      	b.n	800a0c2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0c8:	1e5a      	subs	r2, r3, #1
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d02c      	beq.n	800a134 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d128      	bne.n	800a134 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	3304      	adds	r3, #4
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7fe fa94 	bl	8008614 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a104:	4b0f      	ldr	r3, [pc, #60]	; (800a144 <xTaskPriorityDisinherit+0xd0>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d903      	bls.n	800a114 <xTaskPriorityDisinherit+0xa0>
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a110:	4a0c      	ldr	r2, [pc, #48]	; (800a144 <xTaskPriorityDisinherit+0xd0>)
 800a112:	6013      	str	r3, [r2, #0]
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a118:	4613      	mov	r3, r2
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	4413      	add	r3, r2
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	4a09      	ldr	r2, [pc, #36]	; (800a148 <xTaskPriorityDisinherit+0xd4>)
 800a122:	441a      	add	r2, r3
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	3304      	adds	r3, #4
 800a128:	4619      	mov	r1, r3
 800a12a:	4610      	mov	r0, r2
 800a12c:	f7fe fa17 	bl	800855e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a130:	2301      	movs	r3, #1
 800a132:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a134:	697b      	ldr	r3, [r7, #20]
	}
 800a136:	4618      	mov	r0, r3
 800a138:	3718      	adds	r7, #24
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	200006f4 	.word	0x200006f4
 800a144:	20000bd0 	.word	0x20000bd0
 800a148:	200006f8 	.word	0x200006f8

0800a14c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800a152:	4b09      	ldr	r3, [pc, #36]	; (800a178 <uxTaskResetEventItemValue+0x2c>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	699b      	ldr	r3, [r3, #24]
 800a158:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a15a:	4b07      	ldr	r3, [pc, #28]	; (800a178 <uxTaskResetEventItemValue+0x2c>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a160:	4b05      	ldr	r3, [pc, #20]	; (800a178 <uxTaskResetEventItemValue+0x2c>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800a168:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800a16a:	687b      	ldr	r3, [r7, #4]
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	bc80      	pop	{r7}
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	200006f4 	.word	0x200006f4

0800a17c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a186:	4b21      	ldr	r3, [pc, #132]	; (800a20c <prvAddCurrentTaskToDelayedList+0x90>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a18c:	4b20      	ldr	r3, [pc, #128]	; (800a210 <prvAddCurrentTaskToDelayedList+0x94>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	3304      	adds	r3, #4
 800a192:	4618      	mov	r0, r3
 800a194:	f7fe fa3e 	bl	8008614 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a19e:	d10a      	bne.n	800a1b6 <prvAddCurrentTaskToDelayedList+0x3a>
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d007      	beq.n	800a1b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1a6:	4b1a      	ldr	r3, [pc, #104]	; (800a210 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	3304      	adds	r3, #4
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	4819      	ldr	r0, [pc, #100]	; (800a214 <prvAddCurrentTaskToDelayedList+0x98>)
 800a1b0:	f7fe f9d5 	bl	800855e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a1b4:	e026      	b.n	800a204 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a1b6:	68fa      	ldr	r2, [r7, #12]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	4413      	add	r3, r2
 800a1bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a1be:	4b14      	ldr	r3, [pc, #80]	; (800a210 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68ba      	ldr	r2, [r7, #8]
 800a1c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a1c6:	68ba      	ldr	r2, [r7, #8]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d209      	bcs.n	800a1e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1ce:	4b12      	ldr	r3, [pc, #72]	; (800a218 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	4b0f      	ldr	r3, [pc, #60]	; (800a210 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	3304      	adds	r3, #4
 800a1d8:	4619      	mov	r1, r3
 800a1da:	4610      	mov	r0, r2
 800a1dc:	f7fe f9e2 	bl	80085a4 <vListInsert>
}
 800a1e0:	e010      	b.n	800a204 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1e2:	4b0e      	ldr	r3, [pc, #56]	; (800a21c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	4b0a      	ldr	r3, [pc, #40]	; (800a210 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	3304      	adds	r3, #4
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	4610      	mov	r0, r2
 800a1f0:	f7fe f9d8 	bl	80085a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a1f4:	4b0a      	ldr	r3, [pc, #40]	; (800a220 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	68ba      	ldr	r2, [r7, #8]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d202      	bcs.n	800a204 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a1fe:	4a08      	ldr	r2, [pc, #32]	; (800a220 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	6013      	str	r3, [r2, #0]
}
 800a204:	bf00      	nop
 800a206:	3710      	adds	r7, #16
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	20000bcc 	.word	0x20000bcc
 800a210:	200006f4 	.word	0x200006f4
 800a214:	20000bb4 	.word	0x20000bb4
 800a218:	20000b84 	.word	0x20000b84
 800a21c:	20000b80 	.word	0x20000b80
 800a220:	20000be8 	.word	0x20000be8

0800a224 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b08a      	sub	sp, #40	; 0x28
 800a228:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a22a:	2300      	movs	r3, #0
 800a22c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a22e:	f000 fb17 	bl	800a860 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a232:	4b1c      	ldr	r3, [pc, #112]	; (800a2a4 <xTimerCreateTimerTask+0x80>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d021      	beq.n	800a27e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a23a:	2300      	movs	r3, #0
 800a23c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a23e:	2300      	movs	r3, #0
 800a240:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a242:	1d3a      	adds	r2, r7, #4
 800a244:	f107 0108 	add.w	r1, r7, #8
 800a248:	f107 030c 	add.w	r3, r7, #12
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7fd ff3b 	bl	80080c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a252:	6879      	ldr	r1, [r7, #4]
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	9202      	str	r2, [sp, #8]
 800a25a:	9301      	str	r3, [sp, #4]
 800a25c:	2302      	movs	r3, #2
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	2300      	movs	r3, #0
 800a262:	460a      	mov	r2, r1
 800a264:	4910      	ldr	r1, [pc, #64]	; (800a2a8 <xTimerCreateTimerTask+0x84>)
 800a266:	4811      	ldr	r0, [pc, #68]	; (800a2ac <xTimerCreateTimerTask+0x88>)
 800a268:	f7fe ff0e 	bl	8009088 <xTaskCreateStatic>
 800a26c:	4602      	mov	r2, r0
 800a26e:	4b10      	ldr	r3, [pc, #64]	; (800a2b0 <xTimerCreateTimerTask+0x8c>)
 800a270:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a272:	4b0f      	ldr	r3, [pc, #60]	; (800a2b0 <xTimerCreateTimerTask+0x8c>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d001      	beq.n	800a27e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a27a:	2301      	movs	r3, #1
 800a27c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d109      	bne.n	800a298 <xTimerCreateTimerTask+0x74>
 800a284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a288:	f383 8811 	msr	BASEPRI, r3
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	613b      	str	r3, [r7, #16]
 800a296:	e7fe      	b.n	800a296 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800a298:	697b      	ldr	r3, [r7, #20]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3718      	adds	r7, #24
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	20000c24 	.word	0x20000c24
 800a2a8:	0800b3b8 	.word	0x0800b3b8
 800a2ac:	0800a471 	.word	0x0800a471
 800a2b0:	20000c28 	.word	0x20000c28

0800a2b4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b088      	sub	sp, #32
 800a2b8:	af02      	add	r7, sp, #8
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	607a      	str	r2, [r7, #4]
 800a2c0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800a2c2:	2030      	movs	r0, #48	; 0x30
 800a2c4:	f000 fd0e 	bl	800ace4 <pvPortMalloc>
 800a2c8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d00d      	beq.n	800a2ec <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	9301      	str	r3, [sp, #4]
 800a2d4:	6a3b      	ldr	r3, [r7, #32]
 800a2d6:	9300      	str	r3, [sp, #0]
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	68b9      	ldr	r1, [r7, #8]
 800a2de:	68f8      	ldr	r0, [r7, #12]
 800a2e0:	f000 f809 	bl	800a2f6 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800a2ec:	697b      	ldr	r3, [r7, #20]
	}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3718      	adds	r7, #24
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b086      	sub	sp, #24
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	60f8      	str	r0, [r7, #12]
 800a2fe:	60b9      	str	r1, [r7, #8]
 800a300:	607a      	str	r2, [r7, #4]
 800a302:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d109      	bne.n	800a31e <prvInitialiseNewTimer+0x28>
 800a30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30e:	f383 8811 	msr	BASEPRI, r3
 800a312:	f3bf 8f6f 	isb	sy
 800a316:	f3bf 8f4f 	dsb	sy
 800a31a:	617b      	str	r3, [r7, #20]
 800a31c:	e7fe      	b.n	800a31c <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800a31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a320:	2b00      	cmp	r3, #0
 800a322:	d015      	beq.n	800a350 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a324:	f000 fa9c 	bl	800a860 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32a:	68fa      	ldr	r2, [r7, #12]
 800a32c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a330:	68ba      	ldr	r2, [r7, #8]
 800a332:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800a334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800a33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33c:	683a      	ldr	r2, [r7, #0]
 800a33e:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a342:	6a3a      	ldr	r2, [r7, #32]
 800a344:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a348:	3304      	adds	r3, #4
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7fe f8fb 	bl	8008546 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a350:	bf00      	nop
 800a352:	3718      	adds	r7, #24
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b08a      	sub	sp, #40	; 0x28
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	607a      	str	r2, [r7, #4]
 800a364:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a366:	2300      	movs	r3, #0
 800a368:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d109      	bne.n	800a384 <xTimerGenericCommand+0x2c>
 800a370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a374:	f383 8811 	msr	BASEPRI, r3
 800a378:	f3bf 8f6f 	isb	sy
 800a37c:	f3bf 8f4f 	dsb	sy
 800a380:	623b      	str	r3, [r7, #32]
 800a382:	e7fe      	b.n	800a382 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a384:	4b19      	ldr	r3, [pc, #100]	; (800a3ec <xTimerGenericCommand+0x94>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d02a      	beq.n	800a3e2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	2b05      	cmp	r3, #5
 800a39c:	dc18      	bgt.n	800a3d0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a39e:	f7ff fe4b 	bl	800a038 <xTaskGetSchedulerState>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d109      	bne.n	800a3bc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a3a8:	4b10      	ldr	r3, [pc, #64]	; (800a3ec <xTimerGenericCommand+0x94>)
 800a3aa:	6818      	ldr	r0, [r3, #0]
 800a3ac:	f107 0110 	add.w	r1, r7, #16
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3b4:	f7fe fa92 	bl	80088dc <xQueueGenericSend>
 800a3b8:	6278      	str	r0, [r7, #36]	; 0x24
 800a3ba:	e012      	b.n	800a3e2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a3bc:	4b0b      	ldr	r3, [pc, #44]	; (800a3ec <xTimerGenericCommand+0x94>)
 800a3be:	6818      	ldr	r0, [r3, #0]
 800a3c0:	f107 0110 	add.w	r1, r7, #16
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f7fe fa88 	bl	80088dc <xQueueGenericSend>
 800a3cc:	6278      	str	r0, [r7, #36]	; 0x24
 800a3ce:	e008      	b.n	800a3e2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a3d0:	4b06      	ldr	r3, [pc, #24]	; (800a3ec <xTimerGenericCommand+0x94>)
 800a3d2:	6818      	ldr	r0, [r3, #0]
 800a3d4:	f107 0110 	add.w	r1, r7, #16
 800a3d8:	2300      	movs	r3, #0
 800a3da:	683a      	ldr	r2, [r7, #0]
 800a3dc:	f7fe fb78 	bl	8008ad0 <xQueueGenericSendFromISR>
 800a3e0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3728      	adds	r7, #40	; 0x28
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	20000c24 	.word	0x20000c24

0800a3f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b088      	sub	sp, #32
 800a3f4:	af02      	add	r7, sp, #8
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3fa:	4b1c      	ldr	r3, [pc, #112]	; (800a46c <prvProcessExpiredTimer+0x7c>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	3304      	adds	r3, #4
 800a408:	4618      	mov	r0, r3
 800a40a:	f7fe f903 	bl	8008614 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	69db      	ldr	r3, [r3, #28]
 800a412:	2b01      	cmp	r3, #1
 800a414:	d121      	bne.n	800a45a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	699a      	ldr	r2, [r3, #24]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	18d1      	adds	r1, r2, r3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	683a      	ldr	r2, [r7, #0]
 800a422:	6978      	ldr	r0, [r7, #20]
 800a424:	f000 f8ca 	bl	800a5bc <prvInsertTimerInActiveList>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d015      	beq.n	800a45a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a42e:	2300      	movs	r3, #0
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	2300      	movs	r3, #0
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	2100      	movs	r1, #0
 800a438:	6978      	ldr	r0, [r7, #20]
 800a43a:	f7ff ff8d 	bl	800a358 <xTimerGenericCommand>
 800a43e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d109      	bne.n	800a45a <prvProcessExpiredTimer+0x6a>
 800a446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44a:	f383 8811 	msr	BASEPRI, r3
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	60fb      	str	r3, [r7, #12]
 800a458:	e7fe      	b.n	800a458 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45e:	6978      	ldr	r0, [r7, #20]
 800a460:	4798      	blx	r3
}
 800a462:	bf00      	nop
 800a464:	3718      	adds	r7, #24
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	20000c1c 	.word	0x20000c1c

0800a470 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 800a478:	f7f7 f8c4 	bl	8001604 <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a47c:	f107 0308 	add.w	r3, r7, #8
 800a480:	4618      	mov	r0, r3
 800a482:	f000 f857 	bl	800a534 <prvGetNextExpireTime>
 800a486:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	4619      	mov	r1, r3
 800a48c:	68f8      	ldr	r0, [r7, #12]
 800a48e:	f000 f803 	bl	800a498 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a492:	f000 f8d5 	bl	800a640 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a496:	e7f1      	b.n	800a47c <prvTimerTask+0xc>

0800a498 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a4a2:	f7ff f929 	bl	80096f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4a6:	f107 0308 	add.w	r3, r7, #8
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f000 f866 	bl	800a57c <prvSampleTimeNow>
 800a4b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d130      	bne.n	800a51a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d10a      	bne.n	800a4d4 <prvProcessTimerOrBlockTask+0x3c>
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d806      	bhi.n	800a4d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a4c6:	f7ff f925 	bl	8009714 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a4ca:	68f9      	ldr	r1, [r7, #12]
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f7ff ff8f 	bl	800a3f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a4d2:	e024      	b.n	800a51e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d008      	beq.n	800a4ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a4da:	4b13      	ldr	r3, [pc, #76]	; (800a528 <prvProcessTimerOrBlockTask+0x90>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	bf0c      	ite	eq
 800a4e4:	2301      	moveq	r3, #1
 800a4e6:	2300      	movne	r3, #0
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a4ec:	4b0f      	ldr	r3, [pc, #60]	; (800a52c <prvProcessTimerOrBlockTask+0x94>)
 800a4ee:	6818      	ldr	r0, [r3, #0]
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	1ad3      	subs	r3, r2, r3
 800a4f6:	683a      	ldr	r2, [r7, #0]
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	f7fe fd91 	bl	8009020 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a4fe:	f7ff f909 	bl	8009714 <xTaskResumeAll>
 800a502:	4603      	mov	r3, r0
 800a504:	2b00      	cmp	r3, #0
 800a506:	d10a      	bne.n	800a51e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a508:	4b09      	ldr	r3, [pc, #36]	; (800a530 <prvProcessTimerOrBlockTask+0x98>)
 800a50a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a50e:	601a      	str	r2, [r3, #0]
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	f3bf 8f6f 	isb	sy
}
 800a518:	e001      	b.n	800a51e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a51a:	f7ff f8fb 	bl	8009714 <xTaskResumeAll>
}
 800a51e:	bf00      	nop
 800a520:	3710      	adds	r7, #16
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	20000c20 	.word	0x20000c20
 800a52c:	20000c24 	.word	0x20000c24
 800a530:	e000ed04 	.word	0xe000ed04

0800a534 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a534:	b480      	push	{r7}
 800a536:	b085      	sub	sp, #20
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a53c:	4b0e      	ldr	r3, [pc, #56]	; (800a578 <prvGetNextExpireTime+0x44>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	bf0c      	ite	eq
 800a546:	2301      	moveq	r3, #1
 800a548:	2300      	movne	r3, #0
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	461a      	mov	r2, r3
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d105      	bne.n	800a566 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a55a:	4b07      	ldr	r3, [pc, #28]	; (800a578 <prvGetNextExpireTime+0x44>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	60fb      	str	r3, [r7, #12]
 800a564:	e001      	b.n	800a56a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a566:	2300      	movs	r3, #0
 800a568:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a56a:	68fb      	ldr	r3, [r7, #12]
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3714      	adds	r7, #20
 800a570:	46bd      	mov	sp, r7
 800a572:	bc80      	pop	{r7}
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	20000c1c 	.word	0x20000c1c

0800a57c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a584:	f7ff f962 	bl	800984c <xTaskGetTickCount>
 800a588:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a58a:	4b0b      	ldr	r3, [pc, #44]	; (800a5b8 <prvSampleTimeNow+0x3c>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	429a      	cmp	r2, r3
 800a592:	d205      	bcs.n	800a5a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a594:	f000 f904 	bl	800a7a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	601a      	str	r2, [r3, #0]
 800a59e:	e002      	b.n	800a5a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a5a6:	4a04      	ldr	r2, [pc, #16]	; (800a5b8 <prvSampleTimeNow+0x3c>)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	20000c2c 	.word	0x20000c2c

0800a5bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b086      	sub	sp, #24
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	607a      	str	r2, [r7, #4]
 800a5c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	68ba      	ldr	r2, [r7, #8]
 800a5d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	68fa      	ldr	r2, [r7, #12]
 800a5d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a5da:	68ba      	ldr	r2, [r7, #8]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d812      	bhi.n	800a608 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	1ad2      	subs	r2, r2, r3
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	699b      	ldr	r3, [r3, #24]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d302      	bcc.n	800a5f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	617b      	str	r3, [r7, #20]
 800a5f4:	e01b      	b.n	800a62e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a5f6:	4b10      	ldr	r3, [pc, #64]	; (800a638 <prvInsertTimerInActiveList+0x7c>)
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	3304      	adds	r3, #4
 800a5fe:	4619      	mov	r1, r3
 800a600:	4610      	mov	r0, r2
 800a602:	f7fd ffcf 	bl	80085a4 <vListInsert>
 800a606:	e012      	b.n	800a62e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d206      	bcs.n	800a61e <prvInsertTimerInActiveList+0x62>
 800a610:	68ba      	ldr	r2, [r7, #8]
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	429a      	cmp	r2, r3
 800a616:	d302      	bcc.n	800a61e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a618:	2301      	movs	r3, #1
 800a61a:	617b      	str	r3, [r7, #20]
 800a61c:	e007      	b.n	800a62e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a61e:	4b07      	ldr	r3, [pc, #28]	; (800a63c <prvInsertTimerInActiveList+0x80>)
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	3304      	adds	r3, #4
 800a626:	4619      	mov	r1, r3
 800a628:	4610      	mov	r0, r2
 800a62a:	f7fd ffbb 	bl	80085a4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a62e:	697b      	ldr	r3, [r7, #20]
}
 800a630:	4618      	mov	r0, r3
 800a632:	3718      	adds	r7, #24
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	20000c20 	.word	0x20000c20
 800a63c:	20000c1c 	.word	0x20000c1c

0800a640 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b08e      	sub	sp, #56	; 0x38
 800a644:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a646:	e099      	b.n	800a77c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	da17      	bge.n	800a67e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a64e:	1d3b      	adds	r3, r7, #4
 800a650:	3304      	adds	r3, #4
 800a652:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a656:	2b00      	cmp	r3, #0
 800a658:	d109      	bne.n	800a66e <prvProcessReceivedCommands+0x2e>
 800a65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65e:	f383 8811 	msr	BASEPRI, r3
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	61fb      	str	r3, [r7, #28]
 800a66c:	e7fe      	b.n	800a66c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a674:	6850      	ldr	r0, [r2, #4]
 800a676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a678:	6892      	ldr	r2, [r2, #8]
 800a67a:	4611      	mov	r1, r2
 800a67c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2b00      	cmp	r3, #0
 800a682:	db7a      	blt.n	800a77a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68a:	695b      	ldr	r3, [r3, #20]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d004      	beq.n	800a69a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a692:	3304      	adds	r3, #4
 800a694:	4618      	mov	r0, r3
 800a696:	f7fd ffbd 	bl	8008614 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a69a:	463b      	mov	r3, r7
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7ff ff6d 	bl	800a57c <prvSampleTimeNow>
 800a6a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2b09      	cmp	r3, #9
 800a6a8:	d868      	bhi.n	800a77c <prvProcessReceivedCommands+0x13c>
 800a6aa:	a201      	add	r2, pc, #4	; (adr r2, 800a6b0 <prvProcessReceivedCommands+0x70>)
 800a6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b0:	0800a6d9 	.word	0x0800a6d9
 800a6b4:	0800a6d9 	.word	0x0800a6d9
 800a6b8:	0800a6d9 	.word	0x0800a6d9
 800a6bc:	0800a77d 	.word	0x0800a77d
 800a6c0:	0800a733 	.word	0x0800a733
 800a6c4:	0800a769 	.word	0x0800a769
 800a6c8:	0800a6d9 	.word	0x0800a6d9
 800a6cc:	0800a6d9 	.word	0x0800a6d9
 800a6d0:	0800a77d 	.word	0x0800a77d
 800a6d4:	0800a733 	.word	0x0800a733
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a6d8:	68ba      	ldr	r2, [r7, #8]
 800a6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	18d1      	adds	r1, r2, r3
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6e6:	f7ff ff69 	bl	800a5bc <prvInsertTimerInActiveList>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d045      	beq.n	800a77c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6f6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fa:	69db      	ldr	r3, [r3, #28]
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d13d      	bne.n	800a77c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a700:	68ba      	ldr	r2, [r7, #8]
 800a702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a704:	699b      	ldr	r3, [r3, #24]
 800a706:	441a      	add	r2, r3
 800a708:	2300      	movs	r3, #0
 800a70a:	9300      	str	r3, [sp, #0]
 800a70c:	2300      	movs	r3, #0
 800a70e:	2100      	movs	r1, #0
 800a710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a712:	f7ff fe21 	bl	800a358 <xTimerGenericCommand>
 800a716:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a718:	6a3b      	ldr	r3, [r7, #32]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d12e      	bne.n	800a77c <prvProcessReceivedCommands+0x13c>
 800a71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a722:	f383 8811 	msr	BASEPRI, r3
 800a726:	f3bf 8f6f 	isb	sy
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	61bb      	str	r3, [r7, #24]
 800a730:	e7fe      	b.n	800a730 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a732:	68ba      	ldr	r2, [r7, #8]
 800a734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a736:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73a:	699b      	ldr	r3, [r3, #24]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d109      	bne.n	800a754 <prvProcessReceivedCommands+0x114>
 800a740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a744:	f383 8811 	msr	BASEPRI, r3
 800a748:	f3bf 8f6f 	isb	sy
 800a74c:	f3bf 8f4f 	dsb	sy
 800a750:	617b      	str	r3, [r7, #20]
 800a752:	e7fe      	b.n	800a752 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a756:	699a      	ldr	r2, [r3, #24]
 800a758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75a:	18d1      	adds	r1, r2, r3
 800a75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a762:	f7ff ff2b 	bl	800a5bc <prvInsertTimerInActiveList>
					break;
 800a766:	e009      	b.n	800a77c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d104      	bne.n	800a77c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800a772:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a774:	f000 fb7c 	bl	800ae70 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a778:	e000      	b.n	800a77c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a77a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a77c:	4b07      	ldr	r3, [pc, #28]	; (800a79c <prvProcessReceivedCommands+0x15c>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	1d39      	adds	r1, r7, #4
 800a782:	2200      	movs	r2, #0
 800a784:	4618      	mov	r0, r3
 800a786:	f7fe fa37 	bl	8008bf8 <xQueueReceive>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f47f af5b 	bne.w	800a648 <prvProcessReceivedCommands+0x8>
	}
}
 800a792:	bf00      	nop
 800a794:	3730      	adds	r7, #48	; 0x30
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	20000c24 	.word	0x20000c24

0800a7a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b088      	sub	sp, #32
 800a7a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7a6:	e044      	b.n	800a832 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7a8:	4b2b      	ldr	r3, [pc, #172]	; (800a858 <prvSwitchTimerLists+0xb8>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7b2:	4b29      	ldr	r3, [pc, #164]	; (800a858 <prvSwitchTimerLists+0xb8>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	3304      	adds	r3, #4
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7fd ff27 	bl	8008614 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	69db      	ldr	r3, [r3, #28]
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d12d      	bne.n	800a832 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	699b      	ldr	r3, [r3, #24]
 800a7da:	693a      	ldr	r2, [r7, #16]
 800a7dc:	4413      	add	r3, r2
 800a7de:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a7e0:	68ba      	ldr	r2, [r7, #8]
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d90e      	bls.n	800a806 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	68ba      	ldr	r2, [r7, #8]
 800a7ec:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a7f4:	4b18      	ldr	r3, [pc, #96]	; (800a858 <prvSwitchTimerLists+0xb8>)
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	3304      	adds	r3, #4
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	4610      	mov	r0, r2
 800a800:	f7fd fed0 	bl	80085a4 <vListInsert>
 800a804:	e015      	b.n	800a832 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a806:	2300      	movs	r3, #0
 800a808:	9300      	str	r3, [sp, #0]
 800a80a:	2300      	movs	r3, #0
 800a80c:	693a      	ldr	r2, [r7, #16]
 800a80e:	2100      	movs	r1, #0
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	f7ff fda1 	bl	800a358 <xTimerGenericCommand>
 800a816:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d109      	bne.n	800a832 <prvSwitchTimerLists+0x92>
 800a81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a822:	f383 8811 	msr	BASEPRI, r3
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	f3bf 8f4f 	dsb	sy
 800a82e:	603b      	str	r3, [r7, #0]
 800a830:	e7fe      	b.n	800a830 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a832:	4b09      	ldr	r3, [pc, #36]	; (800a858 <prvSwitchTimerLists+0xb8>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d1b5      	bne.n	800a7a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a83c:	4b06      	ldr	r3, [pc, #24]	; (800a858 <prvSwitchTimerLists+0xb8>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a842:	4b06      	ldr	r3, [pc, #24]	; (800a85c <prvSwitchTimerLists+0xbc>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a04      	ldr	r2, [pc, #16]	; (800a858 <prvSwitchTimerLists+0xb8>)
 800a848:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a84a:	4a04      	ldr	r2, [pc, #16]	; (800a85c <prvSwitchTimerLists+0xbc>)
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	6013      	str	r3, [r2, #0]
}
 800a850:	bf00      	nop
 800a852:	3718      	adds	r7, #24
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	20000c1c 	.word	0x20000c1c
 800a85c:	20000c20 	.word	0x20000c20

0800a860 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a866:	f000 f947 	bl	800aaf8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a86a:	4b15      	ldr	r3, [pc, #84]	; (800a8c0 <prvCheckForValidListAndQueue+0x60>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d120      	bne.n	800a8b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a872:	4814      	ldr	r0, [pc, #80]	; (800a8c4 <prvCheckForValidListAndQueue+0x64>)
 800a874:	f7fd fe48 	bl	8008508 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a878:	4813      	ldr	r0, [pc, #76]	; (800a8c8 <prvCheckForValidListAndQueue+0x68>)
 800a87a:	f7fd fe45 	bl	8008508 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a87e:	4b13      	ldr	r3, [pc, #76]	; (800a8cc <prvCheckForValidListAndQueue+0x6c>)
 800a880:	4a10      	ldr	r2, [pc, #64]	; (800a8c4 <prvCheckForValidListAndQueue+0x64>)
 800a882:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a884:	4b12      	ldr	r3, [pc, #72]	; (800a8d0 <prvCheckForValidListAndQueue+0x70>)
 800a886:	4a10      	ldr	r2, [pc, #64]	; (800a8c8 <prvCheckForValidListAndQueue+0x68>)
 800a888:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a88a:	2300      	movs	r3, #0
 800a88c:	9300      	str	r3, [sp, #0]
 800a88e:	4b11      	ldr	r3, [pc, #68]	; (800a8d4 <prvCheckForValidListAndQueue+0x74>)
 800a890:	4a11      	ldr	r2, [pc, #68]	; (800a8d8 <prvCheckForValidListAndQueue+0x78>)
 800a892:	2110      	movs	r1, #16
 800a894:	200a      	movs	r0, #10
 800a896:	f7fd ff4f 	bl	8008738 <xQueueGenericCreateStatic>
 800a89a:	4602      	mov	r2, r0
 800a89c:	4b08      	ldr	r3, [pc, #32]	; (800a8c0 <prvCheckForValidListAndQueue+0x60>)
 800a89e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a8a0:	4b07      	ldr	r3, [pc, #28]	; (800a8c0 <prvCheckForValidListAndQueue+0x60>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d005      	beq.n	800a8b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a8a8:	4b05      	ldr	r3, [pc, #20]	; (800a8c0 <prvCheckForValidListAndQueue+0x60>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	490b      	ldr	r1, [pc, #44]	; (800a8dc <prvCheckForValidListAndQueue+0x7c>)
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7fe fb8e 	bl	8008fd0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a8b4:	f000 f94e 	bl	800ab54 <vPortExitCritical>
}
 800a8b8:	bf00      	nop
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	20000c24 	.word	0x20000c24
 800a8c4:	20000bf4 	.word	0x20000bf4
 800a8c8:	20000c08 	.word	0x20000c08
 800a8cc:	20000c1c 	.word	0x20000c1c
 800a8d0:	20000c20 	.word	0x20000c20
 800a8d4:	20000cd0 	.word	0x20000cd0
 800a8d8:	20000c30 	.word	0x20000c30
 800a8dc:	0800b3c0 	.word	0x0800b3c0

0800a8e0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b08a      	sub	sp, #40	; 0x28
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	607a      	str	r2, [r7, #4]
 800a8ec:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800a8ee:	f06f 0301 	mvn.w	r3, #1
 800a8f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a900:	4b06      	ldr	r3, [pc, #24]	; (800a91c <xTimerPendFunctionCallFromISR+0x3c>)
 800a902:	6818      	ldr	r0, [r3, #0]
 800a904:	f107 0114 	add.w	r1, r7, #20
 800a908:	2300      	movs	r3, #0
 800a90a:	683a      	ldr	r2, [r7, #0]
 800a90c:	f7fe f8e0 	bl	8008ad0 <xQueueGenericSendFromISR>
 800a910:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800a912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a914:	4618      	mov	r0, r3
 800a916:	3728      	adds	r7, #40	; 0x28
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	20000c24 	.word	0x20000c24

0800a920 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a920:	b480      	push	{r7}
 800a922:	b085      	sub	sp, #20
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	3b04      	subs	r3, #4
 800a930:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a938:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	3b04      	subs	r3, #4
 800a93e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	f023 0201 	bic.w	r2, r3, #1
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	3b04      	subs	r3, #4
 800a94e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a950:	4a08      	ldr	r2, [pc, #32]	; (800a974 <pxPortInitialiseStack+0x54>)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	3b14      	subs	r3, #20
 800a95a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	3b20      	subs	r3, #32
 800a966:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a968:	68fb      	ldr	r3, [r7, #12]
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3714      	adds	r7, #20
 800a96e:	46bd      	mov	sp, r7
 800a970:	bc80      	pop	{r7}
 800a972:	4770      	bx	lr
 800a974:	0800a979 	.word	0x0800a979

0800a978 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a978:	b480      	push	{r7}
 800a97a:	b085      	sub	sp, #20
 800a97c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a97e:	2300      	movs	r3, #0
 800a980:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a982:	4b10      	ldr	r3, [pc, #64]	; (800a9c4 <prvTaskExitError+0x4c>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a98a:	d009      	beq.n	800a9a0 <prvTaskExitError+0x28>
 800a98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a990:	f383 8811 	msr	BASEPRI, r3
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	60fb      	str	r3, [r7, #12]
 800a99e:	e7fe      	b.n	800a99e <prvTaskExitError+0x26>
 800a9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a4:	f383 8811 	msr	BASEPRI, r3
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a9b2:	bf00      	nop
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d0fc      	beq.n	800a9b4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a9ba:	bf00      	nop
 800a9bc:	3714      	adds	r7, #20
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bc80      	pop	{r7}
 800a9c2:	4770      	bx	lr
 800a9c4:	20000010 	.word	0x20000010
	...

0800a9d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a9d0:	4b07      	ldr	r3, [pc, #28]	; (800a9f0 <pxCurrentTCBConst2>)
 800a9d2:	6819      	ldr	r1, [r3, #0]
 800a9d4:	6808      	ldr	r0, [r1, #0]
 800a9d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a9da:	f380 8809 	msr	PSP, r0
 800a9de:	f3bf 8f6f 	isb	sy
 800a9e2:	f04f 0000 	mov.w	r0, #0
 800a9e6:	f380 8811 	msr	BASEPRI, r0
 800a9ea:	f04e 0e0d 	orr.w	lr, lr, #13
 800a9ee:	4770      	bx	lr

0800a9f0 <pxCurrentTCBConst2>:
 800a9f0:	200006f4 	.word	0x200006f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a9f4:	bf00      	nop
 800a9f6:	bf00      	nop

0800a9f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a9f8:	4806      	ldr	r0, [pc, #24]	; (800aa14 <prvPortStartFirstTask+0x1c>)
 800a9fa:	6800      	ldr	r0, [r0, #0]
 800a9fc:	6800      	ldr	r0, [r0, #0]
 800a9fe:	f380 8808 	msr	MSP, r0
 800aa02:	b662      	cpsie	i
 800aa04:	b661      	cpsie	f
 800aa06:	f3bf 8f4f 	dsb	sy
 800aa0a:	f3bf 8f6f 	isb	sy
 800aa0e:	df00      	svc	0
 800aa10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aa12:	bf00      	nop
 800aa14:	e000ed08 	.word	0xe000ed08

0800aa18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aa1e:	4b31      	ldr	r3, [pc, #196]	; (800aae4 <xPortStartScheduler+0xcc>)
 800aa20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	22ff      	movs	r2, #255	; 0xff
 800aa2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aa38:	78fb      	ldrb	r3, [r7, #3]
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aa40:	b2da      	uxtb	r2, r3
 800aa42:	4b29      	ldr	r3, [pc, #164]	; (800aae8 <xPortStartScheduler+0xd0>)
 800aa44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aa46:	4b29      	ldr	r3, [pc, #164]	; (800aaec <xPortStartScheduler+0xd4>)
 800aa48:	2207      	movs	r2, #7
 800aa4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa4c:	e009      	b.n	800aa62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800aa4e:	4b27      	ldr	r3, [pc, #156]	; (800aaec <xPortStartScheduler+0xd4>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	3b01      	subs	r3, #1
 800aa54:	4a25      	ldr	r2, [pc, #148]	; (800aaec <xPortStartScheduler+0xd4>)
 800aa56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aa58:	78fb      	ldrb	r3, [r7, #3]
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	005b      	lsls	r3, r3, #1
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa62:	78fb      	ldrb	r3, [r7, #3]
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa6a:	2b80      	cmp	r3, #128	; 0x80
 800aa6c:	d0ef      	beq.n	800aa4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aa6e:	4b1f      	ldr	r3, [pc, #124]	; (800aaec <xPortStartScheduler+0xd4>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f1c3 0307 	rsb	r3, r3, #7
 800aa76:	2b04      	cmp	r3, #4
 800aa78:	d009      	beq.n	800aa8e <xPortStartScheduler+0x76>
 800aa7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7e:	f383 8811 	msr	BASEPRI, r3
 800aa82:	f3bf 8f6f 	isb	sy
 800aa86:	f3bf 8f4f 	dsb	sy
 800aa8a:	60bb      	str	r3, [r7, #8]
 800aa8c:	e7fe      	b.n	800aa8c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aa8e:	4b17      	ldr	r3, [pc, #92]	; (800aaec <xPortStartScheduler+0xd4>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	021b      	lsls	r3, r3, #8
 800aa94:	4a15      	ldr	r2, [pc, #84]	; (800aaec <xPortStartScheduler+0xd4>)
 800aa96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aa98:	4b14      	ldr	r3, [pc, #80]	; (800aaec <xPortStartScheduler+0xd4>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aaa0:	4a12      	ldr	r2, [pc, #72]	; (800aaec <xPortStartScheduler+0xd4>)
 800aaa2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	b2da      	uxtb	r2, r3
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aaac:	4b10      	ldr	r3, [pc, #64]	; (800aaf0 <xPortStartScheduler+0xd8>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a0f      	ldr	r2, [pc, #60]	; (800aaf0 <xPortStartScheduler+0xd8>)
 800aab2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aab6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aab8:	4b0d      	ldr	r3, [pc, #52]	; (800aaf0 <xPortStartScheduler+0xd8>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a0c      	ldr	r2, [pc, #48]	; (800aaf0 <xPortStartScheduler+0xd8>)
 800aabe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aac2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aac4:	f000 f8b0 	bl	800ac28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aac8:	4b0a      	ldr	r3, [pc, #40]	; (800aaf4 <xPortStartScheduler+0xdc>)
 800aaca:	2200      	movs	r2, #0
 800aacc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aace:	f7ff ff93 	bl	800a9f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aad2:	f7fe ffa1 	bl	8009a18 <vTaskSwitchContext>
	prvTaskExitError();
 800aad6:	f7ff ff4f 	bl	800a978 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3710      	adds	r7, #16
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}
 800aae4:	e000e400 	.word	0xe000e400
 800aae8:	20000d20 	.word	0x20000d20
 800aaec:	20000d24 	.word	0x20000d24
 800aaf0:	e000ed20 	.word	0xe000ed20
 800aaf4:	20000010 	.word	0x20000010

0800aaf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab02:	f383 8811 	msr	BASEPRI, r3
 800ab06:	f3bf 8f6f 	isb	sy
 800ab0a:	f3bf 8f4f 	dsb	sy
 800ab0e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ab10:	4b0e      	ldr	r3, [pc, #56]	; (800ab4c <vPortEnterCritical+0x54>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	3301      	adds	r3, #1
 800ab16:	4a0d      	ldr	r2, [pc, #52]	; (800ab4c <vPortEnterCritical+0x54>)
 800ab18:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ab1a:	4b0c      	ldr	r3, [pc, #48]	; (800ab4c <vPortEnterCritical+0x54>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d10e      	bne.n	800ab40 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ab22:	4b0b      	ldr	r3, [pc, #44]	; (800ab50 <vPortEnterCritical+0x58>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d009      	beq.n	800ab40 <vPortEnterCritical+0x48>
 800ab2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab30:	f383 8811 	msr	BASEPRI, r3
 800ab34:	f3bf 8f6f 	isb	sy
 800ab38:	f3bf 8f4f 	dsb	sy
 800ab3c:	603b      	str	r3, [r7, #0]
 800ab3e:	e7fe      	b.n	800ab3e <vPortEnterCritical+0x46>
	}
}
 800ab40:	bf00      	nop
 800ab42:	370c      	adds	r7, #12
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bc80      	pop	{r7}
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop
 800ab4c:	20000010 	.word	0x20000010
 800ab50:	e000ed04 	.word	0xe000ed04

0800ab54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ab5a:	4b10      	ldr	r3, [pc, #64]	; (800ab9c <vPortExitCritical+0x48>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d109      	bne.n	800ab76 <vPortExitCritical+0x22>
 800ab62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab66:	f383 8811 	msr	BASEPRI, r3
 800ab6a:	f3bf 8f6f 	isb	sy
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	607b      	str	r3, [r7, #4]
 800ab74:	e7fe      	b.n	800ab74 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ab76:	4b09      	ldr	r3, [pc, #36]	; (800ab9c <vPortExitCritical+0x48>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	4a07      	ldr	r2, [pc, #28]	; (800ab9c <vPortExitCritical+0x48>)
 800ab7e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ab80:	4b06      	ldr	r3, [pc, #24]	; (800ab9c <vPortExitCritical+0x48>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d104      	bne.n	800ab92 <vPortExitCritical+0x3e>
 800ab88:	2300      	movs	r3, #0
 800ab8a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ab92:	bf00      	nop
 800ab94:	370c      	adds	r7, #12
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bc80      	pop	{r7}
 800ab9a:	4770      	bx	lr
 800ab9c:	20000010 	.word	0x20000010

0800aba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aba0:	f3ef 8009 	mrs	r0, PSP
 800aba4:	f3bf 8f6f 	isb	sy
 800aba8:	4b0d      	ldr	r3, [pc, #52]	; (800abe0 <pxCurrentTCBConst>)
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800abb0:	6010      	str	r0, [r2, #0]
 800abb2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800abb6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800abba:	f380 8811 	msr	BASEPRI, r0
 800abbe:	f7fe ff2b 	bl	8009a18 <vTaskSwitchContext>
 800abc2:	f04f 0000 	mov.w	r0, #0
 800abc6:	f380 8811 	msr	BASEPRI, r0
 800abca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800abce:	6819      	ldr	r1, [r3, #0]
 800abd0:	6808      	ldr	r0, [r1, #0]
 800abd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800abd6:	f380 8809 	msr	PSP, r0
 800abda:	f3bf 8f6f 	isb	sy
 800abde:	4770      	bx	lr

0800abe0 <pxCurrentTCBConst>:
 800abe0:	200006f4 	.word	0x200006f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800abe4:	bf00      	nop
 800abe6:	bf00      	nop

0800abe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
	__asm volatile
 800abee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf2:	f383 8811 	msr	BASEPRI, r3
 800abf6:	f3bf 8f6f 	isb	sy
 800abfa:	f3bf 8f4f 	dsb	sy
 800abfe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ac00:	f7fe fe44 	bl	800988c <xTaskIncrementTick>
 800ac04:	4603      	mov	r3, r0
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d003      	beq.n	800ac12 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ac0a:	4b06      	ldr	r3, [pc, #24]	; (800ac24 <SysTick_Handler+0x3c>)
 800ac0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac10:	601a      	str	r2, [r3, #0]
 800ac12:	2300      	movs	r3, #0
 800ac14:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ac1c:	bf00      	nop
 800ac1e:	3708      	adds	r7, #8
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	e000ed04 	.word	0xe000ed04

0800ac28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ac28:	b480      	push	{r7}
 800ac2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ac2c:	4b0a      	ldr	r3, [pc, #40]	; (800ac58 <vPortSetupTimerInterrupt+0x30>)
 800ac2e:	2200      	movs	r2, #0
 800ac30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ac32:	4b0a      	ldr	r3, [pc, #40]	; (800ac5c <vPortSetupTimerInterrupt+0x34>)
 800ac34:	2200      	movs	r2, #0
 800ac36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ac38:	4b09      	ldr	r3, [pc, #36]	; (800ac60 <vPortSetupTimerInterrupt+0x38>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a09      	ldr	r2, [pc, #36]	; (800ac64 <vPortSetupTimerInterrupt+0x3c>)
 800ac3e:	fba2 2303 	umull	r2, r3, r2, r3
 800ac42:	099b      	lsrs	r3, r3, #6
 800ac44:	4a08      	ldr	r2, [pc, #32]	; (800ac68 <vPortSetupTimerInterrupt+0x40>)
 800ac46:	3b01      	subs	r3, #1
 800ac48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ac4a:	4b03      	ldr	r3, [pc, #12]	; (800ac58 <vPortSetupTimerInterrupt+0x30>)
 800ac4c:	2207      	movs	r2, #7
 800ac4e:	601a      	str	r2, [r3, #0]
}
 800ac50:	bf00      	nop
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bc80      	pop	{r7}
 800ac56:	4770      	bx	lr
 800ac58:	e000e010 	.word	0xe000e010
 800ac5c:	e000e018 	.word	0xe000e018
 800ac60:	20000004 	.word	0x20000004
 800ac64:	10624dd3 	.word	0x10624dd3
 800ac68:	e000e014 	.word	0xe000e014

0800ac6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b085      	sub	sp, #20
 800ac70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac72:	f3ef 8305 	mrs	r3, IPSR
 800ac76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2b0f      	cmp	r3, #15
 800ac7c:	d913      	bls.n	800aca6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac7e:	4a15      	ldr	r2, [pc, #84]	; (800acd4 <vPortValidateInterruptPriority+0x68>)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	4413      	add	r3, r2
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ac88:	4b13      	ldr	r3, [pc, #76]	; (800acd8 <vPortValidateInterruptPriority+0x6c>)
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	7afa      	ldrb	r2, [r7, #11]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d209      	bcs.n	800aca6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800ac92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac96:	f383 8811 	msr	BASEPRI, r3
 800ac9a:	f3bf 8f6f 	isb	sy
 800ac9e:	f3bf 8f4f 	dsb	sy
 800aca2:	607b      	str	r3, [r7, #4]
 800aca4:	e7fe      	b.n	800aca4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aca6:	4b0d      	ldr	r3, [pc, #52]	; (800acdc <vPortValidateInterruptPriority+0x70>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800acae:	4b0c      	ldr	r3, [pc, #48]	; (800ace0 <vPortValidateInterruptPriority+0x74>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d909      	bls.n	800acca <vPortValidateInterruptPriority+0x5e>
 800acb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acba:	f383 8811 	msr	BASEPRI, r3
 800acbe:	f3bf 8f6f 	isb	sy
 800acc2:	f3bf 8f4f 	dsb	sy
 800acc6:	603b      	str	r3, [r7, #0]
 800acc8:	e7fe      	b.n	800acc8 <vPortValidateInterruptPriority+0x5c>
	}
 800acca:	bf00      	nop
 800accc:	3714      	adds	r7, #20
 800acce:	46bd      	mov	sp, r7
 800acd0:	bc80      	pop	{r7}
 800acd2:	4770      	bx	lr
 800acd4:	e000e3f0 	.word	0xe000e3f0
 800acd8:	20000d20 	.word	0x20000d20
 800acdc:	e000ed0c 	.word	0xe000ed0c
 800ace0:	20000d24 	.word	0x20000d24

0800ace4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b08a      	sub	sp, #40	; 0x28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800acec:	2300      	movs	r3, #0
 800acee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800acf0:	f7fe fd02 	bl	80096f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800acf4:	4b59      	ldr	r3, [pc, #356]	; (800ae5c <pvPortMalloc+0x178>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d101      	bne.n	800ad00 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800acfc:	f000 f910 	bl	800af20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ad00:	4b57      	ldr	r3, [pc, #348]	; (800ae60 <pvPortMalloc+0x17c>)
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4013      	ands	r3, r2
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	f040 808c 	bne.w	800ae26 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d01c      	beq.n	800ad4e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800ad14:	2208      	movs	r2, #8
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	4413      	add	r3, r2
 800ad1a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f003 0307 	and.w	r3, r3, #7
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d013      	beq.n	800ad4e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f023 0307 	bic.w	r3, r3, #7
 800ad2c:	3308      	adds	r3, #8
 800ad2e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f003 0307 	and.w	r3, r3, #7
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d009      	beq.n	800ad4e <pvPortMalloc+0x6a>
 800ad3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3e:	f383 8811 	msr	BASEPRI, r3
 800ad42:	f3bf 8f6f 	isb	sy
 800ad46:	f3bf 8f4f 	dsb	sy
 800ad4a:	617b      	str	r3, [r7, #20]
 800ad4c:	e7fe      	b.n	800ad4c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d068      	beq.n	800ae26 <pvPortMalloc+0x142>
 800ad54:	4b43      	ldr	r3, [pc, #268]	; (800ae64 <pvPortMalloc+0x180>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d863      	bhi.n	800ae26 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad5e:	4b42      	ldr	r3, [pc, #264]	; (800ae68 <pvPortMalloc+0x184>)
 800ad60:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad62:	4b41      	ldr	r3, [pc, #260]	; (800ae68 <pvPortMalloc+0x184>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad68:	e004      	b.n	800ad74 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800ad6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ad6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d903      	bls.n	800ad86 <pvPortMalloc+0xa2>
 800ad7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1f1      	bne.n	800ad6a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ad86:	4b35      	ldr	r3, [pc, #212]	; (800ae5c <pvPortMalloc+0x178>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d04a      	beq.n	800ae26 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ad90:	6a3b      	ldr	r3, [r7, #32]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2208      	movs	r2, #8
 800ad96:	4413      	add	r3, r2
 800ad98:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	6a3b      	ldr	r3, [r7, #32]
 800ada0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ada2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada4:	685a      	ldr	r2, [r3, #4]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	1ad2      	subs	r2, r2, r3
 800adaa:	2308      	movs	r3, #8
 800adac:	005b      	lsls	r3, r3, #1
 800adae:	429a      	cmp	r2, r3
 800adb0:	d91e      	bls.n	800adf0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800adb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4413      	add	r3, r2
 800adb8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	f003 0307 	and.w	r3, r3, #7
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d009      	beq.n	800add8 <pvPortMalloc+0xf4>
 800adc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc8:	f383 8811 	msr	BASEPRI, r3
 800adcc:	f3bf 8f6f 	isb	sy
 800add0:	f3bf 8f4f 	dsb	sy
 800add4:	613b      	str	r3, [r7, #16]
 800add6:	e7fe      	b.n	800add6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800add8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adda:	685a      	ldr	r2, [r3, #4]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	1ad2      	subs	r2, r2, r3
 800ade0:	69bb      	ldr	r3, [r7, #24]
 800ade2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ade4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800adea:	69b8      	ldr	r0, [r7, #24]
 800adec:	f000 f8fa 	bl	800afe4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800adf0:	4b1c      	ldr	r3, [pc, #112]	; (800ae64 <pvPortMalloc+0x180>)
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	1ad3      	subs	r3, r2, r3
 800adfa:	4a1a      	ldr	r2, [pc, #104]	; (800ae64 <pvPortMalloc+0x180>)
 800adfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800adfe:	4b19      	ldr	r3, [pc, #100]	; (800ae64 <pvPortMalloc+0x180>)
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	4b1a      	ldr	r3, [pc, #104]	; (800ae6c <pvPortMalloc+0x188>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d203      	bcs.n	800ae12 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ae0a:	4b16      	ldr	r3, [pc, #88]	; (800ae64 <pvPortMalloc+0x180>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a17      	ldr	r2, [pc, #92]	; (800ae6c <pvPortMalloc+0x188>)
 800ae10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ae12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae14:	685a      	ldr	r2, [r3, #4]
 800ae16:	4b12      	ldr	r3, [pc, #72]	; (800ae60 <pvPortMalloc+0x17c>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	431a      	orrs	r2, r3
 800ae1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ae20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae22:	2200      	movs	r2, #0
 800ae24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ae26:	f7fe fc75 	bl	8009714 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d101      	bne.n	800ae34 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800ae30:	f7f6 fbe2 	bl	80015f8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae34:	69fb      	ldr	r3, [r7, #28]
 800ae36:	f003 0307 	and.w	r3, r3, #7
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d009      	beq.n	800ae52 <pvPortMalloc+0x16e>
 800ae3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae42:	f383 8811 	msr	BASEPRI, r3
 800ae46:	f3bf 8f6f 	isb	sy
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	60fb      	str	r3, [r7, #12]
 800ae50:	e7fe      	b.n	800ae50 <pvPortMalloc+0x16c>
	return pvReturn;
 800ae52:	69fb      	ldr	r3, [r7, #28]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3728      	adds	r7, #40	; 0x28
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	20003530 	.word	0x20003530
 800ae60:	2000353c 	.word	0x2000353c
 800ae64:	20003534 	.word	0x20003534
 800ae68:	20003528 	.word	0x20003528
 800ae6c:	20003538 	.word	0x20003538

0800ae70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b086      	sub	sp, #24
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d046      	beq.n	800af10 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ae82:	2308      	movs	r3, #8
 800ae84:	425b      	negs	r3, r3
 800ae86:	697a      	ldr	r2, [r7, #20]
 800ae88:	4413      	add	r3, r2
 800ae8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	685a      	ldr	r2, [r3, #4]
 800ae94:	4b20      	ldr	r3, [pc, #128]	; (800af18 <vPortFree+0xa8>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4013      	ands	r3, r2
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d109      	bne.n	800aeb2 <vPortFree+0x42>
 800ae9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea2:	f383 8811 	msr	BASEPRI, r3
 800aea6:	f3bf 8f6f 	isb	sy
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	60fb      	str	r3, [r7, #12]
 800aeb0:	e7fe      	b.n	800aeb0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d009      	beq.n	800aece <vPortFree+0x5e>
 800aeba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aebe:	f383 8811 	msr	BASEPRI, r3
 800aec2:	f3bf 8f6f 	isb	sy
 800aec6:	f3bf 8f4f 	dsb	sy
 800aeca:	60bb      	str	r3, [r7, #8]
 800aecc:	e7fe      	b.n	800aecc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	685a      	ldr	r2, [r3, #4]
 800aed2:	4b11      	ldr	r3, [pc, #68]	; (800af18 <vPortFree+0xa8>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4013      	ands	r3, r2
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d019      	beq.n	800af10 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d115      	bne.n	800af10 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	685a      	ldr	r2, [r3, #4]
 800aee8:	4b0b      	ldr	r3, [pc, #44]	; (800af18 <vPortFree+0xa8>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	43db      	mvns	r3, r3
 800aeee:	401a      	ands	r2, r3
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aef4:	f7fe fc00 	bl	80096f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	685a      	ldr	r2, [r3, #4]
 800aefc:	4b07      	ldr	r3, [pc, #28]	; (800af1c <vPortFree+0xac>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4413      	add	r3, r2
 800af02:	4a06      	ldr	r2, [pc, #24]	; (800af1c <vPortFree+0xac>)
 800af04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af06:	6938      	ldr	r0, [r7, #16]
 800af08:	f000 f86c 	bl	800afe4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800af0c:	f7fe fc02 	bl	8009714 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800af10:	bf00      	nop
 800af12:	3718      	adds	r7, #24
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}
 800af18:	2000353c 	.word	0x2000353c
 800af1c:	20003534 	.word	0x20003534

0800af20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af20:	b480      	push	{r7}
 800af22:	b085      	sub	sp, #20
 800af24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af26:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800af2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af2c:	4b27      	ldr	r3, [pc, #156]	; (800afcc <prvHeapInit+0xac>)
 800af2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f003 0307 	and.w	r3, r3, #7
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00c      	beq.n	800af54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	3307      	adds	r3, #7
 800af3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f023 0307 	bic.w	r3, r3, #7
 800af46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af48:	68ba      	ldr	r2, [r7, #8]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	1ad3      	subs	r3, r2, r3
 800af4e:	4a1f      	ldr	r2, [pc, #124]	; (800afcc <prvHeapInit+0xac>)
 800af50:	4413      	add	r3, r2
 800af52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800af58:	4a1d      	ldr	r2, [pc, #116]	; (800afd0 <prvHeapInit+0xb0>)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800af5e:	4b1c      	ldr	r3, [pc, #112]	; (800afd0 <prvHeapInit+0xb0>)
 800af60:	2200      	movs	r2, #0
 800af62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	68ba      	ldr	r2, [r7, #8]
 800af68:	4413      	add	r3, r2
 800af6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800af6c:	2208      	movs	r2, #8
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	1a9b      	subs	r3, r3, r2
 800af72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f023 0307 	bic.w	r3, r3, #7
 800af7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	4a15      	ldr	r2, [pc, #84]	; (800afd4 <prvHeapInit+0xb4>)
 800af80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800af82:	4b14      	ldr	r3, [pc, #80]	; (800afd4 <prvHeapInit+0xb4>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	2200      	movs	r2, #0
 800af88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800af8a:	4b12      	ldr	r3, [pc, #72]	; (800afd4 <prvHeapInit+0xb4>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2200      	movs	r2, #0
 800af90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	68fa      	ldr	r2, [r7, #12]
 800af9a:	1ad2      	subs	r2, r2, r3
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800afa0:	4b0c      	ldr	r3, [pc, #48]	; (800afd4 <prvHeapInit+0xb4>)
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	4a0a      	ldr	r2, [pc, #40]	; (800afd8 <prvHeapInit+0xb8>)
 800afae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	4a09      	ldr	r2, [pc, #36]	; (800afdc <prvHeapInit+0xbc>)
 800afb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800afb8:	4b09      	ldr	r3, [pc, #36]	; (800afe0 <prvHeapInit+0xc0>)
 800afba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800afbe:	601a      	str	r2, [r3, #0]
}
 800afc0:	bf00      	nop
 800afc2:	3714      	adds	r7, #20
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bc80      	pop	{r7}
 800afc8:	4770      	bx	lr
 800afca:	bf00      	nop
 800afcc:	20000d28 	.word	0x20000d28
 800afd0:	20003528 	.word	0x20003528
 800afd4:	20003530 	.word	0x20003530
 800afd8:	20003538 	.word	0x20003538
 800afdc:	20003534 	.word	0x20003534
 800afe0:	2000353c 	.word	0x2000353c

0800afe4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800afec:	4b27      	ldr	r3, [pc, #156]	; (800b08c <prvInsertBlockIntoFreeList+0xa8>)
 800afee:	60fb      	str	r3, [r7, #12]
 800aff0:	e002      	b.n	800aff8 <prvInsertBlockIntoFreeList+0x14>
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	60fb      	str	r3, [r7, #12]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	429a      	cmp	r2, r3
 800b000:	d8f7      	bhi.n	800aff2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	68ba      	ldr	r2, [r7, #8]
 800b00c:	4413      	add	r3, r2
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	429a      	cmp	r2, r3
 800b012:	d108      	bne.n	800b026 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	685a      	ldr	r2, [r3, #4]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	441a      	add	r2, r3
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	68ba      	ldr	r2, [r7, #8]
 800b030:	441a      	add	r2, r3
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	429a      	cmp	r2, r3
 800b038:	d118      	bne.n	800b06c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681a      	ldr	r2, [r3, #0]
 800b03e:	4b14      	ldr	r3, [pc, #80]	; (800b090 <prvInsertBlockIntoFreeList+0xac>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	429a      	cmp	r2, r3
 800b044:	d00d      	beq.n	800b062 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	685a      	ldr	r2, [r3, #4]
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	441a      	add	r2, r3
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	601a      	str	r2, [r3, #0]
 800b060:	e008      	b.n	800b074 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b062:	4b0b      	ldr	r3, [pc, #44]	; (800b090 <prvInsertBlockIntoFreeList+0xac>)
 800b064:	681a      	ldr	r2, [r3, #0]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	601a      	str	r2, [r3, #0]
 800b06a:	e003      	b.n	800b074 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681a      	ldr	r2, [r3, #0]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b074:	68fa      	ldr	r2, [r7, #12]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d002      	beq.n	800b082 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b082:	bf00      	nop
 800b084:	3714      	adds	r7, #20
 800b086:	46bd      	mov	sp, r7
 800b088:	bc80      	pop	{r7}
 800b08a:	4770      	bx	lr
 800b08c:	20003528 	.word	0x20003528
 800b090:	20003530 	.word	0x20003530

0800b094 <__libc_init_array>:
 800b094:	b570      	push	{r4, r5, r6, lr}
 800b096:	2500      	movs	r5, #0
 800b098:	4e0c      	ldr	r6, [pc, #48]	; (800b0cc <__libc_init_array+0x38>)
 800b09a:	4c0d      	ldr	r4, [pc, #52]	; (800b0d0 <__libc_init_array+0x3c>)
 800b09c:	1ba4      	subs	r4, r4, r6
 800b09e:	10a4      	asrs	r4, r4, #2
 800b0a0:	42a5      	cmp	r5, r4
 800b0a2:	d109      	bne.n	800b0b8 <__libc_init_array+0x24>
 800b0a4:	f000 f82e 	bl	800b104 <_init>
 800b0a8:	2500      	movs	r5, #0
 800b0aa:	4e0a      	ldr	r6, [pc, #40]	; (800b0d4 <__libc_init_array+0x40>)
 800b0ac:	4c0a      	ldr	r4, [pc, #40]	; (800b0d8 <__libc_init_array+0x44>)
 800b0ae:	1ba4      	subs	r4, r4, r6
 800b0b0:	10a4      	asrs	r4, r4, #2
 800b0b2:	42a5      	cmp	r5, r4
 800b0b4:	d105      	bne.n	800b0c2 <__libc_init_array+0x2e>
 800b0b6:	bd70      	pop	{r4, r5, r6, pc}
 800b0b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b0bc:	4798      	blx	r3
 800b0be:	3501      	adds	r5, #1
 800b0c0:	e7ee      	b.n	800b0a0 <__libc_init_array+0xc>
 800b0c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b0c6:	4798      	blx	r3
 800b0c8:	3501      	adds	r5, #1
 800b0ca:	e7f2      	b.n	800b0b2 <__libc_init_array+0x1e>
 800b0cc:	0800b4b4 	.word	0x0800b4b4
 800b0d0:	0800b4b4 	.word	0x0800b4b4
 800b0d4:	0800b4b4 	.word	0x0800b4b4
 800b0d8:	0800b4b8 	.word	0x0800b4b8

0800b0dc <memcpy>:
 800b0dc:	b510      	push	{r4, lr}
 800b0de:	1e43      	subs	r3, r0, #1
 800b0e0:	440a      	add	r2, r1
 800b0e2:	4291      	cmp	r1, r2
 800b0e4:	d100      	bne.n	800b0e8 <memcpy+0xc>
 800b0e6:	bd10      	pop	{r4, pc}
 800b0e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0f0:	e7f7      	b.n	800b0e2 <memcpy+0x6>

0800b0f2 <memset>:
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	4402      	add	r2, r0
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d100      	bne.n	800b0fc <memset+0xa>
 800b0fa:	4770      	bx	lr
 800b0fc:	f803 1b01 	strb.w	r1, [r3], #1
 800b100:	e7f9      	b.n	800b0f6 <memset+0x4>
	...

0800b104 <_init>:
 800b104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b106:	bf00      	nop
 800b108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b10a:	bc08      	pop	{r3}
 800b10c:	469e      	mov	lr, r3
 800b10e:	4770      	bx	lr

0800b110 <_fini>:
 800b110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b112:	bf00      	nop
 800b114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b116:	bc08      	pop	{r3}
 800b118:	469e      	mov	lr, r3
 800b11a:	4770      	bx	lr
