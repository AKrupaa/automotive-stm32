
Automotive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f3c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  0800a07c  0800a07c  0001a07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a42c  0800a42c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800a42c  0800a42c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a42c  0800a42c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a42c  0800a42c  0001a42c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a430  0800a430  0001a430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800a434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003808  20000010  0800a444  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003818  0800a444  00023818  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002966f  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005142  00000000  00000000  000496a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019c0  00000000  00000000  0004e7f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001750  00000000  00000000  000501b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d996  00000000  00000000  00051900  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d684  00000000  00000000  0006f296  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aa731  00000000  00000000  0008c91a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013704b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066ec  00000000  00000000  001370c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a064 	.word	0x0800a064

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	0800a064 	.word	0x0800a064

08000180 <h_bridge_init>:
//htim3 RIGHT ENGINE

// TODO: check algorithm
//https://github.com/japaric/motor-driver/blob/master/src/lib.rs

bool h_bridge_init(void) {
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000184:	2108      	movs	r1, #8
 8000186:	4805      	ldr	r0, [pc, #20]	; (800019c <h_bridge_init+0x1c>)
 8000188:	f005 f8a8 	bl	80052dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800018c:	2100      	movs	r1, #0
 800018e:	4804      	ldr	r0, [pc, #16]	; (80001a0 <h_bridge_init+0x20>)
 8000190:	f005 f8a4 	bl	80052dc <HAL_TIM_PWM_Start>

	return true;
 8000194:	2301      	movs	r3, #1
}
 8000196:	4618      	mov	r0, r3
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	20003658 	.word	0x20003658
 80001a0:	200036d0 	.word	0x200036d0

080001a4 <h_bridge_set_left_duty>:

void h_bridge_set_left_duty(uint8_t percent) {
 80001a4:	b480      	push	{r7}
 80001a6:	b085      	sub	sp, #20
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	4603      	mov	r3, r0
 80001ac:	71fb      	strb	r3, [r7, #7]
	if (percent > 100)
 80001ae:	79fb      	ldrb	r3, [r7, #7]
 80001b0:	2b64      	cmp	r3, #100	; 0x64
 80001b2:	d901      	bls.n	80001b8 <h_bridge_set_left_duty+0x14>
		percent = 100;
 80001b4:	2364      	movs	r3, #100	; 0x64
 80001b6:	71fb      	strb	r3, [r7, #7]

	if (percent < 1)
 80001b8:	79fb      	ldrb	r3, [r7, #7]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d101      	bne.n	80001c2 <h_bridge_set_left_duty+0x1e>
		percent = 0;
 80001be:	2300      	movs	r3, #0
 80001c0:	71fb      	strb	r3, [r7, #7]

	uint32_t value = percent * htim2.Init.Period / 100;
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	4a08      	ldr	r2, [pc, #32]	; (80001e8 <h_bridge_set_left_duty+0x44>)
 80001c6:	68d2      	ldr	r2, [r2, #12]
 80001c8:	fb02 f303 	mul.w	r3, r2, r3
 80001cc:	4a07      	ldr	r2, [pc, #28]	; (80001ec <h_bridge_set_left_duty+0x48>)
 80001ce:	fba2 2303 	umull	r2, r3, r2, r3
 80001d2:	095b      	lsrs	r3, r3, #5
 80001d4:	60fb      	str	r3, [r7, #12]
//	htim2.Instance->CCR1 = value;
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, value);
 80001d6:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <h_bridge_set_left_duty+0x44>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	68fa      	ldr	r2, [r7, #12]
 80001dc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80001de:	bf00      	nop
 80001e0:	3714      	adds	r7, #20
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr
 80001e8:	200036d0 	.word	0x200036d0
 80001ec:	51eb851f 	.word	0x51eb851f

080001f0 <h_bridge_set_right_duty>:

void h_bridge_set_right_duty(uint8_t percent) {
 80001f0:	b480      	push	{r7}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	71fb      	strb	r3, [r7, #7]
	if (percent > 100)
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	2b64      	cmp	r3, #100	; 0x64
 80001fe:	d901      	bls.n	8000204 <h_bridge_set_right_duty+0x14>
		percent = 100;
 8000200:	2364      	movs	r3, #100	; 0x64
 8000202:	71fb      	strb	r3, [r7, #7]

	if (percent < 1)
 8000204:	79fb      	ldrb	r3, [r7, #7]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d101      	bne.n	800020e <h_bridge_set_right_duty+0x1e>
		percent = 0;
 800020a:	2300      	movs	r3, #0
 800020c:	71fb      	strb	r3, [r7, #7]

	uint32_t value = percent * htim3.Init.Period / 100;
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	4a08      	ldr	r2, [pc, #32]	; (8000234 <h_bridge_set_right_duty+0x44>)
 8000212:	68d2      	ldr	r2, [r2, #12]
 8000214:	fb02 f303 	mul.w	r3, r2, r3
 8000218:	4a07      	ldr	r2, [pc, #28]	; (8000238 <h_bridge_set_right_duty+0x48>)
 800021a:	fba2 2303 	umull	r2, r3, r2, r3
 800021e:	095b      	lsrs	r3, r3, #5
 8000220:	60fb      	str	r3, [r7, #12]
//	htim3.Instance->CCR3 = value;
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, value);
 8000222:	4b04      	ldr	r3, [pc, #16]	; (8000234 <h_bridge_set_right_duty+0x44>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	68fa      	ldr	r2, [r7, #12]
 8000228:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800022a:	bf00      	nop
 800022c:	3714      	adds	r7, #20
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	20003658 	.word	0x20003658
 8000238:	51eb851f 	.word	0x51eb851f

0800023c <h_bridge_cw_left>:

void h_bridge_cw_left(void) {
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 8000240:	2201      	movs	r2, #1
 8000242:	2102      	movs	r1, #2
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <h_bridge_cw_left+0x1c>)
 8000246:	f002 fedb 	bl	8003000 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 800024a:	2200      	movs	r2, #0
 800024c:	2104      	movs	r1, #4
 800024e:	4802      	ldr	r0, [pc, #8]	; (8000258 <h_bridge_cw_left+0x1c>)
 8000250:	f002 fed6 	bl	8003000 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8000254:	bf00      	nop
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40020800 	.word	0x40020800

0800025c <h_bridge_cw_right>:

void h_bridge_cw_right(void) {
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 8000260:	2201      	movs	r2, #1
 8000262:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000266:	4805      	ldr	r0, [pc, #20]	; (800027c <h_bridge_cw_right+0x20>)
 8000268:	f002 feca 	bl	8003000 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 800026c:	2200      	movs	r2, #0
 800026e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000272:	4803      	ldr	r0, [pc, #12]	; (8000280 <h_bridge_cw_right+0x24>)
 8000274:	f002 fec4 	bl	8003000 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}
 800027c:	40020000 	.word	0x40020000
 8000280:	40020800 	.word	0x40020800

08000284 <h_bridge_ccw_left>:

void h_bridge_ccw_left(void) {
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 8000288:	2200      	movs	r2, #0
 800028a:	2102      	movs	r1, #2
 800028c:	4804      	ldr	r0, [pc, #16]	; (80002a0 <h_bridge_ccw_left+0x1c>)
 800028e:	f002 feb7 	bl	8003000 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 8000292:	2201      	movs	r2, #1
 8000294:	2104      	movs	r1, #4
 8000296:	4802      	ldr	r0, [pc, #8]	; (80002a0 <h_bridge_ccw_left+0x1c>)
 8000298:	f002 feb2 	bl	8003000 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40020800 	.word	0x40020800

080002a4 <h_bridge_ccw_right>:

void h_bridge_ccw_right(void) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 80002a8:	2200      	movs	r2, #0
 80002aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ae:	4805      	ldr	r0, [pc, #20]	; (80002c4 <h_bridge_ccw_right+0x20>)
 80002b0:	f002 fea6 	bl	8003000 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 80002b4:	2201      	movs	r2, #1
 80002b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ba:	4803      	ldr	r0, [pc, #12]	; (80002c8 <h_bridge_ccw_right+0x24>)
 80002bc:	f002 fea0 	bl	8003000 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	40020000 	.word	0x40020000
 80002c8:	40020800 	.word	0x40020800

080002cc <h_bridge_coast>:

/// Lets the motor coast
void h_bridge_coast(void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 80002d0:	2200      	movs	r2, #0
 80002d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002d6:	480a      	ldr	r0, [pc, #40]	; (8000300 <h_bridge_coast+0x34>)
 80002d8:	f002 fe92 	bl	8003000 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 80002dc:	2200      	movs	r2, #0
 80002de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002e2:	4808      	ldr	r0, [pc, #32]	; (8000304 <h_bridge_coast+0x38>)
 80002e4:	f002 fe8c 	bl	8003000 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 80002e8:	2200      	movs	r2, #0
 80002ea:	2102      	movs	r1, #2
 80002ec:	4805      	ldr	r0, [pc, #20]	; (8000304 <h_bridge_coast+0x38>)
 80002ee:	f002 fe87 	bl	8003000 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 80002f2:	2200      	movs	r2, #0
 80002f4:	2104      	movs	r1, #4
 80002f6:	4803      	ldr	r0, [pc, #12]	; (8000304 <h_bridge_coast+0x38>)
 80002f8:	f002 fe82 	bl	8003000 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	40020000 	.word	0x40020000
 8000304:	40020800 	.word	0x40020800

08000308 <QMC5883L_Read_Reg>:
	uint16_t buf = ((buff[1] << 8) | buff[0]);	// U2
	buf = (~buf) + 1; // decimal
	return (int) buf / 100; // our value
}

uint8_t QMC5883L_Read_Reg(uint8_t reg) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b088      	sub	sp, #32
 800030c:	af04      	add	r7, sp, #16
 800030e:	4603      	mov	r3, r0
 8000310:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[1];
	HAL_I2C_Mem_Read(QMC5883L_I2C_PORT, QMC5883L_ADDRESS, reg, 1, Buffer, 1,
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	b29a      	uxth	r2, r3
 8000316:	230a      	movs	r3, #10
 8000318:	9302      	str	r3, [sp, #8]
 800031a:	2301      	movs	r3, #1
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	f107 030c 	add.w	r3, r7, #12
 8000322:	9300      	str	r3, [sp, #0]
 8000324:	2301      	movs	r3, #1
 8000326:	213c      	movs	r1, #60	; 0x3c
 8000328:	4803      	ldr	r0, [pc, #12]	; (8000338 <QMC5883L_Read_Reg+0x30>)
 800032a:	f003 f95b 	bl	80035e4 <HAL_I2C_Mem_Read>
			10);
	return Buffer[0];
 800032e:	7b3b      	ldrb	r3, [r7, #12]
}
 8000330:	4618      	mov	r0, r3
 8000332:	3710      	adds	r7, #16
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	200035c8 	.word	0x200035c8

0800033c <QMC5883L_Write_Reg>:

void QMC5883L_Write_Reg(uint8_t reg, uint8_t data) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b086      	sub	sp, #24
 8000340:	af02      	add	r7, sp, #8
 8000342:	4603      	mov	r3, r0
 8000344:	460a      	mov	r2, r1
 8000346:	71fb      	strb	r3, [r7, #7]
 8000348:	4613      	mov	r3, r2
 800034a:	71bb      	strb	r3, [r7, #6]
	uint8_t Buffer[2] = { reg, data };
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	733b      	strb	r3, [r7, #12]
 8000350:	79bb      	ldrb	r3, [r7, #6]
 8000352:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(QMC5883L_I2C_PORT, QMC5883L_ADDRESS, Buffer, 2, 10);
 8000354:	f107 020c 	add.w	r2, r7, #12
 8000358:	230a      	movs	r3, #10
 800035a:	9300      	str	r3, [sp, #0]
 800035c:	2302      	movs	r3, #2
 800035e:	213c      	movs	r1, #60	; 0x3c
 8000360:	4803      	ldr	r0, [pc, #12]	; (8000370 <QMC5883L_Write_Reg+0x34>)
 8000362:	f003 f841 	bl	80033e8 <HAL_I2C_Master_Transmit>
}
 8000366:	bf00      	nop
 8000368:	3710      	adds	r7, #16
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	200035c8 	.word	0x200035c8

08000374 <QMC5883L_Read_Data>:

void QMC5883L_Read_Data(int16_t *MagX, int16_t *MagY, int16_t *MagZ) // (-32768 / +32768)
{
 8000374:	b590      	push	{r4, r7, lr}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	60f8      	str	r0, [r7, #12]
 800037c:	60b9      	str	r1, [r7, #8]
 800037e:	607a      	str	r2, [r7, #4]
	*MagX = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_X_LSB)
 8000380:	2004      	movs	r0, #4
 8000382:	f7ff ffc1 	bl	8000308 <QMC5883L_Read_Reg>
 8000386:	4603      	mov	r3, r0
 8000388:	b21c      	sxth	r4, r3
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_X_MSB)) << 8));
 800038a:	2003      	movs	r0, #3
 800038c:	f7ff ffbc 	bl	8000308 <QMC5883L_Read_Reg>
 8000390:	4603      	mov	r3, r0
 8000392:	021b      	lsls	r3, r3, #8
 8000394:	b21b      	sxth	r3, r3
 8000396:	4323      	orrs	r3, r4
 8000398:	b21a      	sxth	r2, r3
	*MagX = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_X_LSB)
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	801a      	strh	r2, [r3, #0]
	*MagY = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Y_LSB)
 800039e:	2008      	movs	r0, #8
 80003a0:	f7ff ffb2 	bl	8000308 <QMC5883L_Read_Reg>
 80003a4:	4603      	mov	r3, r0
 80003a6:	b21c      	sxth	r4, r3
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Y_MSB)) << 8));
 80003a8:	2007      	movs	r0, #7
 80003aa:	f7ff ffad 	bl	8000308 <QMC5883L_Read_Reg>
 80003ae:	4603      	mov	r3, r0
 80003b0:	021b      	lsls	r3, r3, #8
 80003b2:	b21b      	sxth	r3, r3
 80003b4:	4323      	orrs	r3, r4
 80003b6:	b21a      	sxth	r2, r3
	*MagY = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Y_LSB)
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	801a      	strh	r2, [r3, #0]
	*MagZ = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Z_LSB)
 80003bc:	2006      	movs	r0, #6
 80003be:	f7ff ffa3 	bl	8000308 <QMC5883L_Read_Reg>
 80003c2:	4603      	mov	r3, r0
 80003c4:	b21c      	sxth	r4, r3
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Z_MSB)) << 8));
 80003c6:	2005      	movs	r0, #5
 80003c8:	f7ff ff9e 	bl	8000308 <QMC5883L_Read_Reg>
 80003cc:	4603      	mov	r3, r0
 80003ce:	021b      	lsls	r3, r3, #8
 80003d0:	b21b      	sxth	r3, r3
 80003d2:	4323      	orrs	r3, r4
 80003d4:	b21a      	sxth	r2, r3
	*MagZ = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Z_LSB)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	801a      	strh	r2, [r3, #0]
}
 80003da:	bf00      	nop
 80003dc:	3714      	adds	r7, #20
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd90      	pop	{r4, r7, pc}

080003e2 <QMC5883L_Initialize>:
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_TEMP_READ_MSB)) << 8))
			/ 100;
}

void QMC5883L_Initialize(_qmc5883l_MODE MODE, _qmc5883l_ODR ODR,
		_qmc5883l_RNG RNG, _qmc5883l_OSR OSR) {
 80003e2:	b590      	push	{r4, r7, lr}
 80003e4:	b083      	sub	sp, #12
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	4604      	mov	r4, r0
 80003ea:	4608      	mov	r0, r1
 80003ec:	4611      	mov	r1, r2
 80003ee:	461a      	mov	r2, r3
 80003f0:	4623      	mov	r3, r4
 80003f2:	71fb      	strb	r3, [r7, #7]
 80003f4:	4603      	mov	r3, r0
 80003f6:	71bb      	strb	r3, [r7, #6]
 80003f8:	460b      	mov	r3, r1
 80003fa:	717b      	strb	r3, [r7, #5]
 80003fc:	4613      	mov	r3, r2
 80003fe:	713b      	strb	r3, [r7, #4]
	QMC5883L_Write_Reg(QMC5883L_CONFIG_3, 0x01);
 8000400:	2101      	movs	r1, #1
 8000402:	200b      	movs	r0, #11
 8000404:	f7ff ff9a 	bl	800033c <QMC5883L_Write_Reg>
	QMC5883L_Write_Reg(QMC5883L_CONFIG_1, MODE | ODR | RNG | OSR);
 8000408:	79fa      	ldrb	r2, [r7, #7]
 800040a:	79bb      	ldrb	r3, [r7, #6]
 800040c:	4313      	orrs	r3, r2
 800040e:	b2da      	uxtb	r2, r3
 8000410:	797b      	ldrb	r3, [r7, #5]
 8000412:	4313      	orrs	r3, r2
 8000414:	b2da      	uxtb	r2, r3
 8000416:	793b      	ldrb	r3, [r7, #4]
 8000418:	4313      	orrs	r3, r2
 800041a:	b2db      	uxtb	r3, r3
 800041c:	4619      	mov	r1, r3
 800041e:	2009      	movs	r0, #9
 8000420:	f7ff ff8c 	bl	800033c <QMC5883L_Write_Reg>
}
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	bd90      	pop	{r4, r7, pc}

0800042c <QMC5883L_InterruptConfig>:

void QMC5883L_Reset() {
	QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x81);
}

void QMC5883L_InterruptConfig(_qmc5883l_INT INT) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	71fb      	strb	r3, [r7, #7]
	if (INT == INTERRUPT_ENABLE) {
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	2b01      	cmp	r3, #1
 800043a:	d104      	bne.n	8000446 <QMC5883L_InterruptConfig+0x1a>
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x00);
 800043c:	2100      	movs	r1, #0
 800043e:	200a      	movs	r0, #10
 8000440:	f7ff ff7c 	bl	800033c <QMC5883L_Write_Reg>
	} else {
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x01);
	}
}
 8000444:	e003      	b.n	800044e <QMC5883L_InterruptConfig+0x22>
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x01);
 8000446:	2101      	movs	r1, #1
 8000448:	200a      	movs	r0, #10
 800044a:	f7ff ff77 	bl	800033c <QMC5883L_Write_Reg>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <device_init>:

#include "device_init.h"
#include "stdint.h"


void device_init(void) {
 8000456:	b480      	push	{r7}
 8000458:	b083      	sub	sp, #12
 800045a:	af00      	add	r7, sp, #0

	uint16_t successCnt = 0;
 800045c:	2300      	movs	r3, #0
 800045e:	80fb      	strh	r3, [r7, #6]
	uint16_t modsToInit = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < /*mod_N*/mod_0; i++) {
 8000464:	2300      	movs	r3, #0
 8000466:	807b      	strh	r3, [r7, #2]
 8000468:	bf00      	nop
		}

		modsToInit++;
	}

	if (modsToInit != successCnt) {
 800046a:	88ba      	ldrh	r2, [r7, #4]
 800046c:	88fb      	ldrh	r3, [r7, #6]
 800046e:	429a      	cmp	r2, r3
 8000470:	d000      	beq.n	8000474 <device_init+0x1e>
		// some kind of error
		while (1)
 8000472:	e7fe      	b.n	8000472 <device_init+0x1c>
			; //TODO: call some error handler
	}

}
 8000474:	bf00      	nop
 8000476:	370c      	adds	r7, #12
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr
	...

08000480 <rt_init>:
TaskHandle_t rt_tasks[rt_task_N];
QueueHandle_t rt_queues[rt_queue_N];
EventGroupHandle_t rt_evgroups[rt_evgroup_N];
TimerHandle_t rt_timers[rt_timer_N];

void rt_init(void) {
 8000480:	b5b0      	push	{r4, r5, r7, lr}
 8000482:	b08a      	sub	sp, #40	; 0x28
 8000484:	af02      	add	r7, sp, #8

	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 8000486:	2300      	movs	r3, #0
 8000488:	77fb      	strb	r3, [r7, #31]
 800048a:	e02c      	b.n	80004e6 <rt_init+0x66>
		rt_task_def_t const *def = rt_task_def + task;
 800048c:	7ffa      	ldrb	r2, [r7, #31]
 800048e:	4613      	mov	r3, r2
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	4413      	add	r3, r2
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	461a      	mov	r2, r3
 8000498:	4b47      	ldr	r3, [pc, #284]	; (80005b8 <rt_init+0x138>)
 800049a:	4413      	add	r3, r2
 800049c:	607b      	str	r3, [r7, #4]
		TaskHandle_t *handle = rt_tasks + task;
 800049e:	7ffb      	ldrb	r3, [r7, #31]
 80004a0:	009b      	lsls	r3, r3, #2
 80004a2:	4a46      	ldr	r2, [pc, #280]	; (80005bc <rt_init+0x13c>)
 80004a4:	4413      	add	r3, r2
 80004a6:	603b      	str	r3, [r7, #0]
		if (def->active) {
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	7c9b      	ldrb	r3, [r3, #18]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d014      	beq.n	80004da <rt_init+0x5a>
			if (xTaskCreate(def->pvTaskCode, def->pcName, def->usStackDepth,
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	6818      	ldr	r0, [r3, #0]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	6859      	ldr	r1, [r3, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	8a1c      	ldrh	r4, [r3, #16]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	689d      	ldr	r5, [r3, #8]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	683a      	ldr	r2, [r7, #0]
 80004c6:	9201      	str	r2, [sp, #4]
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	462b      	mov	r3, r5
 80004cc:	4622      	mov	r2, r4
 80004ce:	f007 fde2 	bl	8008096 <xTaskCreate>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d003      	beq.n	80004e0 <rt_init+0x60>
					def->pvParameters, def->uxPriority, handle) != pdPASS) {
//				error :-(
				while (1)
 80004d8:	e7fe      	b.n	80004d8 <rt_init+0x58>
					;
			}
		} else {
			*handle = 0;
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 80004e0:	7ffb      	ldrb	r3, [r7, #31]
 80004e2:	3301      	adds	r3, #1
 80004e4:	77fb      	strb	r3, [r7, #31]
 80004e6:	7ffb      	ldrb	r3, [r7, #31]
 80004e8:	2b04      	cmp	r3, #4
 80004ea:	d9cf      	bls.n	800048c <rt_init+0xc>
		}
	}

	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 80004ec:	2300      	movs	r3, #0
 80004ee:	77bb      	strb	r3, [r7, #30]
 80004f0:	e01c      	b.n	800052c <rt_init+0xac>
		rt_queue_def_t const *def = rt_queue_def + queue;
 80004f2:	7fbb      	ldrb	r3, [r7, #30]
 80004f4:	011b      	lsls	r3, r3, #4
 80004f6:	4a32      	ldr	r2, [pc, #200]	; (80005c0 <rt_init+0x140>)
 80004f8:	4413      	add	r3, r2
 80004fa:	60fb      	str	r3, [r7, #12]
		QueueHandle_t *handle = rt_queues + queue;
 80004fc:	7fbb      	ldrb	r3, [r7, #30]
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	4a30      	ldr	r2, [pc, #192]	; (80005c4 <rt_init+0x144>)
 8000502:	4413      	add	r3, r2
 8000504:	60bb      	str	r3, [r7, #8]

		if ((*handle = xQueueCreate(def->uxQueueLength, def->uxItemSize))
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	6818      	ldr	r0, [r3, #0]
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	2200      	movs	r2, #0
 8000510:	4619      	mov	r1, r3
 8000512:	f007 f931 	bl	8007778 <xQueueGenericCreate>
 8000516:	4602      	mov	r2, r0
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d100      	bne.n	8000526 <rt_init+0xa6>
				== 0) {
			while (1)
 8000524:	e7fe      	b.n	8000524 <rt_init+0xa4>
	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 8000526:	7fbb      	ldrb	r3, [r7, #30]
 8000528:	3301      	adds	r3, #1
 800052a:	77bb      	strb	r3, [r7, #30]
 800052c:	7fbb      	ldrb	r3, [r7, #30]
 800052e:	2b01      	cmp	r3, #1
 8000530:	d9df      	bls.n	80004f2 <rt_init+0x72>
				;
		}
	}

	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 8000532:	2300      	movs	r3, #0
 8000534:	777b      	strb	r3, [r7, #29]
 8000536:	e020      	b.n	800057a <rt_init+0xfa>
		rt_timer_def_t const *def = rt_timer_def + timer;
 8000538:	7f7b      	ldrb	r3, [r7, #29]
 800053a:	011b      	lsls	r3, r3, #4
 800053c:	4a22      	ldr	r2, [pc, #136]	; (80005c8 <rt_init+0x148>)
 800053e:	4413      	add	r3, r2
 8000540:	617b      	str	r3, [r7, #20]
		TimerHandle_t *handle = rt_timers + timer;
 8000542:	7f7b      	ldrb	r3, [r7, #29]
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	4a21      	ldr	r2, [pc, #132]	; (80005cc <rt_init+0x14c>)
 8000548:	4413      	add	r3, r2
 800054a:	613b      	str	r3, [r7, #16]

		if ((*handle = xTimerCreate(def->pcTimerName, def->xTimerPeriodInTicks,
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	6818      	ldr	r0, [r3, #0]
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	6859      	ldr	r1, [r3, #4]
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	689a      	ldr	r2, [r3, #8]
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	68db      	ldr	r3, [r3, #12]
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2300      	movs	r3, #0
 8000560:	f008 fe56 	bl	8009210 <xTimerCreate>
 8000564:	4602      	mov	r2, r0
 8000566:	693b      	ldr	r3, [r7, #16]
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	693b      	ldr	r3, [r7, #16]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d100      	bne.n	8000574 <rt_init+0xf4>
				def->uxAutoReload, NULL, def->pxCallbackFunction)) == 0)
			while (1)
 8000572:	e7fe      	b.n	8000572 <rt_init+0xf2>
	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 8000574:	7f7b      	ldrb	r3, [r7, #29]
 8000576:	3301      	adds	r3, #1
 8000578:	777b      	strb	r3, [r7, #29]
 800057a:	7f7b      	ldrb	r3, [r7, #29]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d9db      	bls.n	8000538 <rt_init+0xb8>
				;
	}

	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 8000580:	2300      	movs	r3, #0
 8000582:	773b      	strb	r3, [r7, #28]
 8000584:	e011      	b.n	80005aa <rt_init+0x12a>
			evgroup++) {
		EventGroupHandle_t *handle = rt_evgroups + evgroup;
 8000586:	7f3b      	ldrb	r3, [r7, #28]
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	4a11      	ldr	r2, [pc, #68]	; (80005d0 <rt_init+0x150>)
 800058c:	4413      	add	r3, r2
 800058e:	61bb      	str	r3, [r7, #24]

		if ((*handle = xEventGroupCreate()) == 0) {
 8000590:	f006 fdb8 	bl	8007104 <xEventGroupCreate>
 8000594:	4602      	mov	r2, r0
 8000596:	69bb      	ldr	r3, [r7, #24]
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	69bb      	ldr	r3, [r7, #24]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d100      	bne.n	80005a4 <rt_init+0x124>
			while (1)
 80005a2:	e7fe      	b.n	80005a2 <rt_init+0x122>
			evgroup++) {
 80005a4:	7f3b      	ldrb	r3, [r7, #28]
 80005a6:	3301      	adds	r3, #1
 80005a8:	773b      	strb	r3, [r7, #28]
	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 80005aa:	7f3b      	ldrb	r3, [r7, #28]
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d9ea      	bls.n	8000586 <rt_init+0x106>
				;
		}
	}

}
 80005b0:	bf00      	nop
 80005b2:	3720      	adds	r7, #32
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bdb0      	pop	{r4, r5, r7, pc}
 80005b8:	0800a340 	.word	0x0800a340
 80005bc:	2000353c 	.word	0x2000353c
 80005c0:	0800a3a4 	.word	0x0800a3a4
 80005c4:	20003564 	.word	0x20003564
 80005c8:	0800a3c4 	.word	0x0800a3c4
 80005cc:	20003550 	.word	0x20003550
 80005d0:	20003558 	.word	0x20003558

080005d4 <rt_evbitwait_any>:

uint32_t rt_evbitwait_any(rt_evgroup_t Ev) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af02      	add	r7, sp, #8
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	4a09      	ldr	r2, [pc, #36]	; (8000608 <rt_evbitwait_any+0x34>)
 80005e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e6:	60fb      	str	r3, [r7, #12]

	return xEventGroupWaitBits(Evh, 0x00FFFFFFu, pdTRUE, pdFALSE, portMAX_DELAY);
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2300      	movs	r3, #0
 80005f0:	2201      	movs	r2, #1
 80005f2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80005f6:	68f8      	ldr	r0, [r7, #12]
 80005f8:	f006 fd9e 	bl	8007138 <xEventGroupWaitBits>
 80005fc:	4603      	mov	r3, r0
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20003558 	.word	0x20003558

0800060c <rt_evbit_set>:

void rt_evbit_set(rt_evgroup_t Ev, uint32_t bit) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	6039      	str	r1, [r7, #0]
 8000616:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 8000618:	2201      	movs	r2, #1
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	fa02 f303 	lsl.w	r3, r2, r3
 8000620:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	4a05      	ldr	r2, [pc, #20]	; (800063c <rt_evbit_set+0x30>)
 8000626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800062a:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBits(Evh, msk);
 800062c:	68f9      	ldr	r1, [r7, #12]
 800062e:	68b8      	ldr	r0, [r7, #8]
 8000630:	f006 fe4c 	bl	80072cc <xEventGroupSetBits>
}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20003558 	.word	0x20003558

08000640 <rt_evbit_set_from_ISR>:

void rt_evbit_set_from_ISR(rt_evgroup_t Ev, uint32_t bit) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	6039      	str	r1, [r7, #0]
 800064a:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 800064c:	2201      	movs	r2, #1
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	fa02 f303 	lsl.w	r3, r2, r3
 8000654:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	4a06      	ldr	r2, [pc, #24]	; (8000674 <rt_evbit_set_from_ISR+0x34>)
 800065a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800065e:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBitsFromISR(Evh, msk, pdFALSE);
 8000660:	2200      	movs	r2, #0
 8000662:	68f9      	ldr	r1, [r7, #12]
 8000664:	68b8      	ldr	r0, [r7, #8]
 8000666:	f006 fee9 	bl	800743c <xEventGroupSetBitsFromISR>
	portYIELD_FROM_ISR(pdFALSE);
}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20003558 	.word	0x20003558

08000678 <rt_enqueue_ISR>:
	}

	return false;
}

bool rt_enqueue_ISR(rt_queue_t Q, void const *bf) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	6039      	str	r1, [r7, #0]
 8000682:	71fb      	strb	r3, [r7, #7]
//  assert(Q < rt_queue_N);

	QueueHandle_t Qh = rt_queues[Q];
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	4a0b      	ldr	r2, [pc, #44]	; (80006b4 <rt_enqueue_ISR+0x3c>)
 8000688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800068c:	60fb      	str	r3, [r7, #12]
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
	if (xQueueSendToBackFromISR(Qh, bf, &xHigherPriorityTaskWoken) == pdPASS) {
 8000692:	f107 0208 	add.w	r2, r7, #8
 8000696:	2300      	movs	r3, #0
 8000698:	6839      	ldr	r1, [r7, #0]
 800069a:	68f8      	ldr	r0, [r7, #12]
 800069c:	f007 f9c6 	bl	8007a2c <xQueueGenericSendFromISR>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d101      	bne.n	80006aa <rt_enqueue_ISR+0x32>
		return true;
 80006a6:	2301      	movs	r3, #1
 80006a8:	e000      	b.n	80006ac <rt_enqueue_ISR+0x34>
	}

	return false;
 80006aa:	2300      	movs	r3, #0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20003564 	.word	0x20003564

080006b8 <rt_dequeue>:

bool rt_dequeue(rt_queue_t Q, void *bf) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]
//  assert(Q < rt_queue_N);

	QueueHandle_t Qh = rt_queues[Q];
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	4a0d      	ldr	r2, [pc, #52]	; (80006fc <rt_dequeue+0x44>)
 80006c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006cc:	60fb      	str	r3, [r7, #12]
	TickType_t to = rt_queue_def[Q].timeout_deq;
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <rt_dequeue+0x48>)
 80006d2:	011b      	lsls	r3, r3, #4
 80006d4:	4413      	add	r3, r2
 80006d6:	330c      	adds	r3, #12
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	60bb      	str	r3, [r7, #8]

	if (xQueueReceive(Qh, bf, to) == pdPASS) {
 80006dc:	68ba      	ldr	r2, [r7, #8]
 80006de:	6839      	ldr	r1, [r7, #0]
 80006e0:	68f8      	ldr	r0, [r7, #12]
 80006e2:	f007 fa37 	bl	8007b54 <xQueueReceive>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d101      	bne.n	80006f0 <rt_dequeue+0x38>
		return true;
 80006ec:	2301      	movs	r3, #1
 80006ee:	e000      	b.n	80006f2 <rt_dequeue+0x3a>
	}

	return false;
 80006f0:	2300      	movs	r3, #0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20003564 	.word	0x20003564
 8000700:	0800a3a4 	.word	0x0800a3a4

08000704 <rt_timer_start_ISR>:

bool rt_timer_start(rt_timer_t t, uint32_t timeout) {
	return xTimerStart(rt_timers[t], timeout);
}

bool rt_timer_start_ISR(rt_timer_t t, BaseType_t *pxHigherPriorityTaskWoken) {
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b085      	sub	sp, #20
 8000708:	af02      	add	r7, sp, #8
 800070a:	4603      	mov	r3, r0
 800070c:	6039      	str	r1, [r7, #0]
 800070e:	71fb      	strb	r3, [r7, #7]
	return xTimerStartFromISR(rt_timers[t], pxHigherPriorityTaskWoken);
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <rt_timer_start_ISR+0x3c>)
 8000714:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000718:	f008 f854 	bl	80087c4 <xTaskGetTickCountFromISR>
 800071c:	4602      	mov	r2, r0
 800071e:	2300      	movs	r3, #0
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	2106      	movs	r1, #6
 8000726:	4620      	mov	r0, r4
 8000728:	f008 fdc4 	bl	80092b4 <xTimerGenericCommand>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	bf14      	ite	ne
 8000732:	2301      	movne	r3, #1
 8000734:	2300      	moveq	r3, #0
 8000736:	b2db      	uxtb	r3, r3
}
 8000738:	4618      	mov	r0, r3
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bd90      	pop	{r4, r7, pc}
 8000740:	20003550 	.word	0x20003550

08000744 <timer_BLE>:
// working all the time, checking if something is received or sending data to android device

/* ************************************************************************** */
// callback
/* ************************************************************************** */
void timer_BLE(TimerHandle_t xTimer) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, (uint8_t*) ble_pData, BLE_MAX_SIZE);
 800074c:	2203      	movs	r2, #3
 800074e:	4904      	ldr	r1, [pc, #16]	; (8000760 <timer_BLE+0x1c>)
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <timer_BLE+0x20>)
 8000752:	f006 f805 	bl	8006760 <HAL_UART_Receive_DMA>
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000356c 	.word	0x2000356c
 8000764:	20003750 	.word	0x20003750

08000768 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
//	__NOP();
//	char ble_pData[BLE_MAX_SIZE];
//	memset(ble_pData, 1, BLE_MAX_SIZE);
//	ble_receive_data(ble_pData);
	xQueueBleData ble_queue = { 0 };
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]

	ble_queue.info = ble_received;
 8000774:	2300      	movs	r3, #0
 8000776:	733b      	strb	r3, [r7, #12]

	memcpy(&ble_queue.command, ble_pData, 1);
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <HAL_UART_RxCpltCallback+0x38>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	737b      	strb	r3, [r7, #13]
	memcpy(&ble_queue.valueReg1, ble_pData + 1, 1);
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <HAL_UART_RxCpltCallback+0x3c>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	73bb      	strb	r3, [r7, #14]
	memcpy(&ble_queue.valueReg2, ble_pData + 2, 1);
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_UART_RxCpltCallback+0x40>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	73fb      	strb	r3, [r7, #15]

	rt_enqueue_ISR(rt_queue_ble, &ble_queue);
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	4619      	mov	r1, r3
 8000790:	2000      	movs	r0, #0
 8000792:	f7ff ff71 	bl	8000678 <rt_enqueue_ISR>

}
 8000796:	bf00      	nop
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	2000356c 	.word	0x2000356c
 80007a4:	2000356d 	.word	0x2000356d
 80007a8:	2000356e 	.word	0x2000356e

080007ac <task_ble>:
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart);

/* ************************************************************************** */
// task
/* ************************************************************************** */
void task_ble(void *pvParameters) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	(void*) pvParameters;

//	int i = 0;
//	const TickType_t xDelay1000ms = pdMS_TO_TICKS(5000);
	bool status;
	xQueueBleData receivedBleData = { 0 };
 80007b4:	2300      	movs	r3, #0
 80007b6:	613b      	str	r3, [r7, #16]
	char ble_pData[BLE_MAX_SIZE] = { 0 };
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	2100      	movs	r1, #0
 80007be:	460a      	mov	r2, r1
 80007c0:	801a      	strh	r2, [r3, #0]
 80007c2:	460a      	mov	r2, r1
 80007c4:	709a      	strb	r2, [r3, #2]
	uint8_t right_engine;
	for (;;) {

//		vTaskDelay(xDelay1000ms);

		status = rt_dequeue(rt_queue_ble, &receivedBleData);
 80007c6:	f107 0310 	add.w	r3, r7, #16
 80007ca:	4619      	mov	r1, r3
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff ff73 	bl	80006b8 <rt_dequeue>
 80007d2:	4603      	mov	r3, r0
 80007d4:	75fb      	strb	r3, [r7, #23]

		if (status) {
 80007d6:	7dfb      	ldrb	r3, [r7, #23]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d0f4      	beq.n	80007c6 <task_ble+0x1a>
			if (receivedBleData.info == ble_received) {
 80007dc:	7c3b      	ldrb	r3, [r7, #16]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d14c      	bne.n	800087c <task_ble+0xd0>
//				memcpy(ble_pData, receivedBleData.value, BLE_MAX_SIZE);

				switch (receivedBleData.command) {
 80007e2:	7c7b      	ldrb	r3, [r7, #17]
 80007e4:	2b02      	cmp	r3, #2
 80007e6:	d008      	beq.n	80007fa <task_ble+0x4e>
 80007e8:	2b03      	cmp	r3, #3
 80007ea:	d00b      	beq.n	8000804 <task_ble+0x58>
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d13e      	bne.n	800086e <task_ble+0xc2>
				case BLE_RECEIVED_DO_NOTHING:
					rt_evbit_set(rt_evgroup_state_machine,
 80007f0:	2100      	movs	r1, #0
 80007f2:	2001      	movs	r0, #1
 80007f4:	f7ff ff0a 	bl	800060c <rt_evbit_set>
							evgroup_state_m_do_nothing);
					break;
 80007f8:	e041      	b.n	800087e <task_ble+0xd2>
				case BLE_RECEIVED_AUTO_MANUAL:
					rt_evbit_set(rt_evgroup_state_machine,
 80007fa:	2101      	movs	r1, #1
 80007fc:	2001      	movs	r0, #1
 80007fe:	f7ff ff05 	bl	800060c <rt_evbit_set>
							evgroup_state_m_auto_manual);
					break;
 8000802:	e03c      	b.n	800087e <task_ble+0xd2>
				case BLE_RECEIVED_MOVEMENT:
//					rt_evbit_set(rt_evgroup_state_machine,
//							evgroup_state_m_movement);

					left_engine = receivedBleData.valueReg1;
 8000804:	7cbb      	ldrb	r3, [r7, #18]
 8000806:	75bb      	strb	r3, [r7, #22]
					right_engine = receivedBleData.valueReg2;
 8000808:	7cfb      	ldrb	r3, [r7, #19]
 800080a:	757b      	strb	r3, [r7, #21]
					// ^
					// ccw
					// --- |        PERCENTAGE       |

					// left engine
					if (left_engine & (1 << 8)) {
 800080c:	7dbb      	ldrb	r3, [r7, #22]
 800080e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000812:	2b00      	cmp	r3, #0
 8000814:	d009      	beq.n	800082a <task_ble+0x7e>
						h_bridge_ccw_left();
 8000816:	f7ff fd35 	bl	8000284 <h_bridge_ccw_left>
						h_bridge_set_left_duty(left_engine & 0b01111111);
 800081a:	7dbb      	ldrb	r3, [r7, #22]
 800081c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000820:	b2db      	uxtb	r3, r3
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff fcbe 	bl	80001a4 <h_bridge_set_left_duty>
 8000828:	e008      	b.n	800083c <task_ble+0x90>
					} else {
						h_bridge_cw_left();
 800082a:	f7ff fd07 	bl	800023c <h_bridge_cw_left>
						h_bridge_set_left_duty(left_engine & 0b01111111);
 800082e:	7dbb      	ldrb	r3, [r7, #22]
 8000830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fcb4 	bl	80001a4 <h_bridge_set_left_duty>
					}

					// right engine
					if (right_engine & (1 << 8)) {
 800083c:	7d7b      	ldrb	r3, [r7, #21]
 800083e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000842:	2b00      	cmp	r3, #0
 8000844:	d009      	beq.n	800085a <task_ble+0xae>
						h_bridge_ccw_right();
 8000846:	f7ff fd2d 	bl	80002a4 <h_bridge_ccw_right>

						h_bridge_set_right_duty(right_engine & 0b01111111);
 800084a:	7d7b      	ldrb	r3, [r7, #21]
 800084c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000850:	b2db      	uxtb	r3, r3
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff fccc 	bl	80001f0 <h_bridge_set_right_duty>
					} else {
						h_bridge_cw_right();
						h_bridge_set_right_duty(right_engine & 0b01111111);
					}

					break;
 8000858:	e011      	b.n	800087e <task_ble+0xd2>
						h_bridge_cw_right();
 800085a:	f7ff fcff 	bl	800025c <h_bridge_cw_right>
						h_bridge_set_right_duty(right_engine & 0b01111111);
 800085e:	7d7b      	ldrb	r3, [r7, #21]
 8000860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fcc2 	bl	80001f0 <h_bridge_set_right_duty>
					break;
 800086c:	e007      	b.n	800087e <task_ble+0xd2>
				default:
					// unknow -> free
					rt_dequeue(rt_queue_ble, &receivedBleData);
 800086e:	f107 0310 	add.w	r3, r7, #16
 8000872:	4619      	mov	r1, r3
 8000874:	2000      	movs	r0, #0
 8000876:	f7ff ff1f 	bl	80006b8 <rt_dequeue>
					break;
 800087a:	e000      	b.n	800087e <task_ble+0xd2>
				}

			}
 800087c:	bf00      	nop

			if (receivedBleData.info == ble_transmit) {
 800087e:	7c3b      	ldrb	r3, [r7, #16]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d1a0      	bne.n	80007c6 <task_ble+0x1a>

//				rt_dequeue(rt_queue_ble, &receivedBleData);
				memcpy(ble_pData, &receivedBleData.command, 1);
 8000884:	7c7b      	ldrb	r3, [r7, #17]
 8000886:	733b      	strb	r3, [r7, #12]
				memcpy(ble_pData + 1, &receivedBleData.valueReg1, 1);
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	3301      	adds	r3, #1
 800088e:	7cba      	ldrb	r2, [r7, #18]
 8000890:	701a      	strb	r2, [r3, #0]
				memcpy(ble_pData + 2, &receivedBleData.valueReg2, 1);
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	3302      	adds	r3, #2
 8000898:	7cfa      	ldrb	r2, [r7, #19]
 800089a:	701a      	strb	r2, [r3, #0]

//				ble_send_data(ble_pData, BLE_MAX_SIZE);
				HAL_UART_Transmit_DMA(&huart3, (uint8_t*) ble_pData,
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2203      	movs	r2, #3
 80008a2:	4619      	mov	r1, r3
 80008a4:	4801      	ldr	r0, [pc, #4]	; (80008ac <task_ble+0x100>)
 80008a6:	f005 feef 	bl	8006688 <HAL_UART_Transmit_DMA>
		status = rt_dequeue(rt_queue_ble, &receivedBleData);
 80008aa:	e78c      	b.n	80007c6 <task_ble+0x1a>
 80008ac:	20003750 	.word	0x20003750

080008b0 <task_eyes>:
 *      Author: Arkadiusz
 */

//#include "task_eyes.h"

void task_eyes(void *pvParameters) {
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 80008b8:	e7fe      	b.n	80008b8 <task_eyes+0x8>

080008ba <task_memory>:
 *      Author: Arkadiusz
 */

//#include "task_memory.h"

void task_memory(void *pvParameters) {
 80008ba:	b480      	push	{r7}
 80008bc:	b083      	sub	sp, #12
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 80008c2:	e7fe      	b.n	80008c2 <task_memory+0x8>

080008c4 <HAL_GPIO_EXTI_Callback>:
static uint32_t ultrasound_time = 0U;
bool ultrasound_was = false;
bool ultrasound_done = false;
uint8_t pData[BLE_MAX_SIZE];
// interrupt pin callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	80fb      	strh	r3, [r7, #6]
//	IRQ_ULTRASOUND_ECHO_Pin
	if (GPIO_Pin & IRQ_ULTRASOUND_ECHO_Pin) {
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	f003 0302 	and.w	r3, r3, #2
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d01e      	beq.n	8000916 <HAL_GPIO_EXTI_Callback+0x52>

		if (ultrasound_was == false) {
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <HAL_GPIO_EXTI_Callback+0x78>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	f083 0301 	eor.w	r3, r3, #1
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d008      	beq.n	80008f8 <HAL_GPIO_EXTI_Callback+0x34>
			ultrasound_time = HAL_GetTick();
 80008e6:	f001 f839 	bl	800195c <HAL_GetTick>
 80008ea:	4602      	mov	r2, r0
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <HAL_GPIO_EXTI_Callback+0x7c>)
 80008ee:	601a      	str	r2, [r3, #0]
			ultrasound_was = true;
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <HAL_GPIO_EXTI_Callback+0x78>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	701a      	strb	r2, [r3, #0]
 80008f6:	e00e      	b.n	8000916 <HAL_GPIO_EXTI_Callback+0x52>
		} else {
			ultrasound_time = HAL_GetTick() - ultrasound_time;
 80008f8:	f001 f830 	bl	800195c <HAL_GetTick>
 80008fc:	4602      	mov	r2, r0
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000906:	6013      	str	r3, [r2, #0]
			ultrasound_was = false;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <HAL_GPIO_EXTI_Callback+0x78>)
 800090a:	2200      	movs	r2, #0
 800090c:	701a      	strb	r2, [r3, #0]
			rt_evbit_set_from_ISR(rt_evgroup_sensors,
 800090e:	2100      	movs	r1, #0
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff fe95 	bl	8000640 <rt_evbit_set_from_ISR>
//			ultrasound_done = true;
		}
	}

//	BLE INTERRUPT -> SOMETHING IS RECEIVED
	if (GPIO_Pin & IRQ_BLE_Pin) {
 8000916:	88fb      	ldrh	r3, [r7, #6]
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	2b00      	cmp	r3, #0
 800091e:	d009      	beq.n	8000934 <HAL_GPIO_EXTI_Callback+0x70>
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]

//		ble_receive_data(pData);
		pxHigherPriorityTaskWoken = pdTRUE;
 8000924:	2301      	movs	r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
		rt_timer_start_ISR(rt_timer_BLE, &pxHigherPriorityTaskWoken);
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	4619      	mov	r1, r3
 800092e:	2000      	movs	r0, #0
 8000930:	f7ff fee8 	bl	8000704 <rt_timer_start_ISR>
//			xTimerStartFromISR(rt_timers[T], pxHigherPriorityTaskWoken);

	}
}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000030 	.word	0x20000030
 8000940:	2000002c 	.word	0x2000002c

08000944 <task_sensors>:

void task_sensors(void *pvParameters) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]

//	uint32_t evgroup = 0;

// TODO: delete this line!
//	magnetometer_init();
	QMC5883L_Initialize(MODE_CONTROL_CONTINUOUS, OUTPUT_DATA_RATE_200HZ,
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	2200      	movs	r2, #0
 8000950:	210c      	movs	r1, #12
 8000952:	2000      	movs	r0, #0
 8000954:	f7ff fd45 	bl	80003e2 <QMC5883L_Initialize>
			FULL_SCALE_2G, OVER_SAMPLE_RATIO_128);
	QMC5883L_InterruptConfig(INTERRUPT_DISABLE);
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff fd67 	bl	800042c <QMC5883L_InterruptConfig>

	//Mode Register
	//Continuous-Measurement Mode
	QMC5883L_Write_Reg(0x02, 0x00);
 800095e:	2100      	movs	r1, #0
 8000960:	2002      	movs	r0, #2
 8000962:	f7ff fceb 	bl	800033c <QMC5883L_Write_Reg>
		// na podstawie na danych zareaguj :)

		// jakis tam bit do ustawienia, np skret w lewo - uzupelnic
//			rt_evbit_set(rt_evgroup_state_machine, (1 << 8));
//		}
		int16_t X = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	823b      	strh	r3, [r7, #16]
		int16_t Y = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	81fb      	strh	r3, [r7, #14]
		int16_t Z = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	81bb      	strh	r3, [r7, #12]

		uint8_t status = QMC5883L_Read_Reg(0x09);
 8000972:	2009      	movs	r0, #9
 8000974:	f7ff fcc8 	bl	8000308 <QMC5883L_Read_Reg>
 8000978:	4603      	mov	r3, r0
 800097a:	75fb      	strb	r3, [r7, #23]
		uint8_t temp1 = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	75bb      	strb	r3, [r7, #22]
		uint8_t temp2 = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	757b      	strb	r3, [r7, #21]

		temp1 = QMC5883L_Read_Reg(0x07);
 8000984:	2007      	movs	r0, #7
 8000986:	f7ff fcbf 	bl	8000308 <QMC5883L_Read_Reg>
 800098a:	4603      	mov	r3, r0
 800098c:	75bb      	strb	r3, [r7, #22]
		temp2 = QMC5883L_Read_Reg(0x08);
 800098e:	2008      	movs	r0, #8
 8000990:	f7ff fcba 	bl	8000308 <QMC5883L_Read_Reg>
 8000994:	4603      	mov	r3, r0
 8000996:	757b      	strb	r3, [r7, #21]

		uint16_t temp = ~((temp2 << 8) | temp1) + 1;
 8000998:	7d7b      	ldrb	r3, [r7, #21]
 800099a:	021b      	lsls	r3, r3, #8
 800099c:	b21a      	sxth	r2, r3
 800099e:	7dbb      	ldrb	r3, [r7, #22]
 80009a0:	b21b      	sxth	r3, r3
 80009a2:	4313      	orrs	r3, r2
 80009a4:	b21b      	sxth	r3, r3
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	425b      	negs	r3, r3
 80009aa:	827b      	strh	r3, [r7, #18]
		temp /= 100;
 80009ac:	8a7b      	ldrh	r3, [r7, #18]
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <task_sensors+0xb4>)
 80009b0:	fba2 2303 	umull	r2, r3, r2, r3
 80009b4:	095b      	lsrs	r3, r3, #5
 80009b6:	827b      	strh	r3, [r7, #18]

		temp += 1;
 80009b8:	8a7b      	ldrh	r3, [r7, #18]
 80009ba:	3301      	adds	r3, #1
 80009bc:	827b      	strh	r3, [r7, #18]

		if (status & (1 << 0)) {
 80009be:	7dfb      	ldrb	r3, [r7, #23]
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d009      	beq.n	80009dc <task_sensors+0x98>
			QMC5883L_Read_Data(&X, &Y, &Z);
 80009c8:	f107 020c 	add.w	r2, r7, #12
 80009cc:	f107 010e 	add.w	r1, r7, #14
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fccd 	bl	8000374 <QMC5883L_Read_Data>
 80009da:	e005      	b.n	80009e8 <task_sensors+0xa4>
		} else {
			X = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	823b      	strh	r3, [r7, #16]
			Y = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	81fb      	strh	r3, [r7, #14]
			Z = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	81bb      	strh	r3, [r7, #12]
		}

		X++;
 80009e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	3301      	adds	r3, #1
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	b21b      	sxth	r3, r3
 80009f4:	823b      	strh	r3, [r7, #16]
	for (;;) {
 80009f6:	e7b6      	b.n	8000966 <task_sensors+0x22>
 80009f8:	51eb851f 	.word	0x51eb851f

080009fc <task_state_machine>:
#include "runtime.h"
#include "state_machine.h"
#include "h_bridge.h"
#include "bluetooth_le.h"

void task_state_machine(void *pvParameters) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	uint32_t evgroup = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
	bool tasks_disabled = false;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	72fb      	strb	r3, [r7, #11]
//	xQueueBleData receivedBleData = { 0 };

	for (;;) {

		evgroup = rt_evbitwait_any(rt_evgroup_state_machine);
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f7ff fde1 	bl	80005d4 <rt_evbitwait_any>
 8000a12:	60f8      	str	r0, [r7, #12]

		if (evgroup & (1 << evgroup_state_m_do_nothing)) {
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d007      	beq.n	8000a2e <task_state_machine+0x32>

			h_bridge_coast();
 8000a1e:	f7ff fc55 	bl	80002cc <h_bridge_coast>
			h_bridge_set_left_duty(0);
 8000a22:	2000      	movs	r0, #0
 8000a24:	f7ff fbbe 	bl	80001a4 <h_bridge_set_left_duty>
			h_bridge_set_right_duty(0);
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f7ff fbe1 	bl	80001f0 <h_bridge_set_right_duty>
		}
		if (evgroup & (1 << evgroup_state_m_auto_manual)) {
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	f003 0302 	and.w	r3, r3, #2
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d0e9      	beq.n	8000a0c <task_state_machine+0x10>
			if (tasks_disabled) {
 8000a38:	7afb      	ldrb	r3, [r7, #11]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d00f      	beq.n	8000a5e <task_state_machine+0x62>
				vTaskResume(rt_tasks[rt_task_eyes]);
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <task_state_machine+0x84>)
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f007 fd44 	bl	80084d0 <vTaskResume>
				vTaskResume(rt_tasks[rt_task_memory]);
 8000a48:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <task_state_machine+0x84>)
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f007 fd3f 	bl	80084d0 <vTaskResume>
				vTaskResume(rt_tasks[rt_task_sensors]);
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <task_state_machine+0x84>)
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f007 fd3a 	bl	80084d0 <vTaskResume>
 8000a5c:	e7d6      	b.n	8000a0c <task_state_machine+0x10>
			} else {
				vTaskSuspend(rt_tasks[rt_task_eyes]);
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <task_state_machine+0x84>)
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f007 fc86 	bl	8008374 <vTaskSuspend>
				vTaskSuspend(rt_tasks[rt_task_memory]);
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <task_state_machine+0x84>)
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f007 fc81 	bl	8008374 <vTaskSuspend>
				vTaskSuspend(rt_tasks[rt_task_sensors]);
 8000a72:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <task_state_machine+0x84>)
 8000a74:	68db      	ldr	r3, [r3, #12]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f007 fc7c 	bl	8008374 <vTaskSuspend>
		evgroup = rt_evbitwait_any(rt_evgroup_state_machine);
 8000a7c:	e7c6      	b.n	8000a0c <task_state_machine+0x10>
 8000a7e:	bf00      	nop
 8000a80:	2000353c 	.word	0x2000353c

08000a84 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <MX_ADC_Init+0xa8>)
 8000a96:	4a26      	ldr	r2, [pc, #152]	; (8000b30 <MX_ADC_Init+0xac>)
 8000a98:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a9a:	4b24      	ldr	r3, [pc, #144]	; (8000b2c <MX_ADC_Init+0xa8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000aa0:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <MX_ADC_Init+0xa8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa6:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <MX_ADC_Init+0xa8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aac:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <MX_ADC_Init+0xa8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ab2:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <MX_ADC_Init+0xa8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <MX_ADC_Init+0xa8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000abe:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <MX_ADC_Init+0xa8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000ac4:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <MX_ADC_Init+0xa8>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000aca:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <MX_ADC_Init+0xa8>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <MX_ADC_Init+0xa8>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <MX_ADC_Init+0xa8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_ADC_Init+0xa8>)
 8000ae2:	2210      	movs	r2, #16
 8000ae4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_ADC_Init+0xa8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_ADC_Init+0xa8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <MX_ADC_Init+0xa8>)
 8000af6:	f000 ff3b 	bl	8001970 <HAL_ADC_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8000b00:	f000 fae2 	bl	80010c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b04:	2301      	movs	r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	4619      	mov	r1, r3
 8000b14:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_ADC_Init+0xa8>)
 8000b16:	f001 f9cf 	bl	8001eb8 <HAL_ADC_ConfigChannel>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000b20:	f000 fad2 	bl	80010c8 <Error_Handler>
  }

}
 8000b24:	bf00      	nop
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20003570 	.word	0x20003570
 8000b30:	40012400 	.word	0x40012400

08000b34 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08c      	sub	sp, #48	; 0x30
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a2d      	ldr	r2, [pc, #180]	; (8000c08 <HAL_ADC_MspInit+0xd4>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d154      	bne.n	8000c00 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b56:	4b2d      	ldr	r3, [pc, #180]	; (8000c0c <HAL_ADC_MspInit+0xd8>)
 8000b58:	6a1b      	ldr	r3, [r3, #32]
 8000b5a:	4a2c      	ldr	r2, [pc, #176]	; (8000c0c <HAL_ADC_MspInit+0xd8>)
 8000b5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b60:	6213      	str	r3, [r2, #32]
 8000b62:	4b2a      	ldr	r3, [pc, #168]	; (8000c0c <HAL_ADC_MspInit+0xd8>)
 8000b64:	6a1b      	ldr	r3, [r3, #32]
 8000b66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b6a:	61bb      	str	r3, [r7, #24]
 8000b6c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	4b27      	ldr	r3, [pc, #156]	; (8000c0c <HAL_ADC_MspInit+0xd8>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	4a26      	ldr	r2, [pc, #152]	; (8000c0c <HAL_ADC_MspInit+0xd8>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	61d3      	str	r3, [r2, #28]
 8000b7a:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <HAL_ADC_MspInit+0xd8>)
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <HAL_ADC_MspInit+0xd8>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	4a20      	ldr	r2, [pc, #128]	; (8000c0c <HAL_ADC_MspInit+0xd8>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	61d3      	str	r3, [r2, #28]
 8000b92:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <HAL_ADC_MspInit+0xd8>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <HAL_ADC_MspInit+0xd8>)
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	4a1a      	ldr	r2, [pc, #104]	; (8000c0c <HAL_ADC_MspInit+0xd8>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	61d3      	str	r3, [r2, #28]
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <HAL_ADC_MspInit+0xd8>)
 8000bac:	69db      	ldr	r3, [r3, #28]
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA7     ------> ADC_IN7
    PB15     ------> ADC_IN21 
    */
    GPIO_InitStruct.Pin = ADC_BATTERY_VOLTAGE_Pin;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_BATTERY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4811      	ldr	r0, [pc, #68]	; (8000c10 <HAL_ADC_MspInit+0xdc>)
 8000bca:	f001 ffa7 	bl	8002b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_PHOTO_BACK_Pin|ADC_OPTO_LEFT_Pin|ADC_PHOTO_FRONT_Pin;
 8000bce:	2386      	movs	r3, #134	; 0x86
 8000bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	480c      	ldr	r0, [pc, #48]	; (8000c14 <HAL_ADC_MspInit+0xe0>)
 8000be2:	f001 ff9b 	bl	8002b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_OPTO_RIGHT_Pin;
 8000be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bec:	2303      	movs	r3, #3
 8000bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_OPTO_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4807      	ldr	r0, [pc, #28]	; (8000c18 <HAL_ADC_MspInit+0xe4>)
 8000bfc:	f001 ff8e 	bl	8002b1c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c00:	bf00      	nop
 8000c02:	3730      	adds	r7, #48	; 0x30
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40012400 	.word	0x40012400
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020800 	.word	0x40020800
 8000c14:	40020000 	.word	0x40020000
 8000c18:	40020400 	.word	0x40020400

08000c1c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <MX_DMA_Init+0x48>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <MX_DMA_Init+0x48>)
 8000c28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c2c:	61d3      	str	r3, [r2, #28]
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <MX_DMA_Init+0x48>)
 8000c30:	69db      	ldr	r3, [r3, #28]
 8000c32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2105      	movs	r1, #5
 8000c3e:	200c      	movs	r0, #12
 8000c40:	f001 fc9e 	bl	8002580 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c44:	200c      	movs	r0, #12
 8000c46:	f001 fcc7 	bl	80025d8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2105      	movs	r1, #5
 8000c4e:	200d      	movs	r0, #13
 8000c50:	f001 fc96 	bl	8002580 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000c54:	200d      	movs	r0, #13
 8000c56:	f001 fcbf 	bl	80025d8 <HAL_NVIC_EnableIRQ>

}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800

08000c68 <vApplicationIdleHook>:
void vApplicationMallocFailedHook(void);
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr

08000cac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cb0:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <MX_FREERTOS_Init+0x1c>)
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_FREERTOS_Init+0x20>)
 8000cb6:	f006 f91b 	bl	8006ef0 <osThreadNew>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <MX_FREERTOS_Init+0x24>)
 8000cbe:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  rt_init();
 8000cc0:	f7ff fbde 	bl	8000480 <rt_init>
  /* USER CODE END RTOS_THREADS */

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	0800a3e4 	.word	0x0800a3e4
 8000ccc:	08000cd5 	.word	0x08000cd5
 8000cd0:	200035c4 	.word	0x200035c4

08000cd4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f006 f9b1 	bl	8007044 <osDelay>
 8000ce2:	e7fb      	b.n	8000cdc <StartDefaultTask+0x8>

08000ce4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	4b72      	ldr	r3, [pc, #456]	; (8000ec4 <MX_GPIO_Init+0x1e0>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	4a71      	ldr	r2, [pc, #452]	; (8000ec4 <MX_GPIO_Init+0x1e0>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	61d3      	str	r3, [r2, #28]
 8000d06:	4b6f      	ldr	r3, [pc, #444]	; (8000ec4 <MX_GPIO_Init+0x1e0>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d12:	4b6c      	ldr	r3, [pc, #432]	; (8000ec4 <MX_GPIO_Init+0x1e0>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	4a6b      	ldr	r2, [pc, #428]	; (8000ec4 <MX_GPIO_Init+0x1e0>)
 8000d18:	f043 0320 	orr.w	r3, r3, #32
 8000d1c:	61d3      	str	r3, [r2, #28]
 8000d1e:	4b69      	ldr	r3, [pc, #420]	; (8000ec4 <MX_GPIO_Init+0x1e0>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	f003 0320 	and.w	r3, r3, #32
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	4b66      	ldr	r3, [pc, #408]	; (8000ec4 <MX_GPIO_Init+0x1e0>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	4a65      	ldr	r2, [pc, #404]	; (8000ec4 <MX_GPIO_Init+0x1e0>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	61d3      	str	r3, [r2, #28]
 8000d36:	4b63      	ldr	r3, [pc, #396]	; (8000ec4 <MX_GPIO_Init+0x1e0>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d42:	4b60      	ldr	r3, [pc, #384]	; (8000ec4 <MX_GPIO_Init+0x1e0>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	4a5f      	ldr	r2, [pc, #380]	; (8000ec4 <MX_GPIO_Init+0x1e0>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	61d3      	str	r3, [r2, #28]
 8000d4e:	4b5d      	ldr	r3, [pc, #372]	; (8000ec4 <MX_GPIO_Init+0x1e0>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5a:	4b5a      	ldr	r3, [pc, #360]	; (8000ec4 <MX_GPIO_Init+0x1e0>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	4a59      	ldr	r2, [pc, #356]	; (8000ec4 <MX_GPIO_Init+0x1e0>)
 8000d60:	f043 0308 	orr.w	r3, r3, #8
 8000d64:	61d3      	str	r3, [r2, #28]
 8000d66:	4b57      	ldr	r3, [pc, #348]	; (8000ec4 <MX_GPIO_Init+0x1e0>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	f003 0308 	and.w	r3, r3, #8
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_INa_ENGINE_LEFT_Pin|OUT_INb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_TEST_Pin 
 8000d72:	2200      	movs	r2, #0
 8000d74:	f640 616e 	movw	r1, #3694	; 0xe6e
 8000d78:	4853      	ldr	r0, [pc, #332]	; (8000ec8 <MX_GPIO_Init+0x1e4>)
 8000d7a:	f002 f941 	bl	8003000 <HAL_GPIO_WritePin>
                          |OUT_ULTRASOUND_TRIG_Pin|OUT_INb_ENGINE_RIGHT_Pin|OUT_LED1_Pin|OUT_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f248 7108 	movw	r1, #34568	; 0x8708
 8000d84:	4851      	ldr	r0, [pc, #324]	; (8000ecc <MX_GPIO_Init+0x1e8>)
 8000d86:	f002 f93b 	bl	8003000 <HAL_GPIO_WritePin>
                          |OUT_LED0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_BLE_EN_GPIO_Port, OUT_BLE_EN_Pin, GPIO_PIN_SET);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	2110      	movs	r1, #16
 8000d8e:	484e      	ldr	r0, [pc, #312]	; (8000ec8 <MX_GPIO_Init+0x1e4>)
 8000d90:	f002 f936 	bl	8003000 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12;
 8000d94:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4847      	ldr	r0, [pc, #284]	; (8000ec8 <MX_GPIO_Init+0x1e4>)
 8000daa:	f001 feb7 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = OUT_INa_ENGINE_LEFT_Pin|OUT_INb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_EN_Pin 
 8000dae:	f640 637e 	movw	r3, #3710	; 0xe7e
 8000db2:	617b      	str	r3, [r7, #20]
                          |OUT_BLE_TEST_Pin|OUT_ULTRASOUND_TRIG_Pin|OUT_INb_ENGINE_RIGHT_Pin|OUT_LED1_Pin 
                          |OUT_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4840      	ldr	r0, [pc, #256]	; (8000ec8 <MX_GPIO_Init+0x1e4>)
 8000dc8:	f001 fea8 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 8000dcc:	f248 7308 	movw	r3, #34568	; 0x8708
 8000dd0:	617b      	str	r3, [r7, #20]
                          |OUT_LED0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	4839      	ldr	r0, [pc, #228]	; (8000ecc <MX_GPIO_Init+0x1e8>)
 8000de6:	f001 fe99 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 8000dea:	f241 0370 	movw	r3, #4208	; 0x1070
 8000dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df0:	2303      	movs	r3, #3
 8000df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4833      	ldr	r0, [pc, #204]	; (8000ecc <MX_GPIO_Init+0x1e8>)
 8000e00:	f001 fe8c 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IRQ_BLE_Pin|IRQ_ULTRASOUND_ECHO_Pin;
 8000e04:	2303      	movs	r3, #3
 8000e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e08:	4b31      	ldr	r3, [pc, #196]	; (8000ed0 <MX_GPIO_Init+0x1ec>)
 8000e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4619      	mov	r1, r3
 8000e16:	482f      	ldr	r0, [pc, #188]	; (8000ed4 <MX_GPIO_Init+0x1f0>)
 8000e18:	f001 fe80 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB3 PB4 
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 8000e1c:	f242 333c 	movw	r3, #9020	; 0x233c
 8000e20:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e22:	2303      	movs	r3, #3
 8000e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4828      	ldr	r0, [pc, #160]	; (8000ed4 <MX_GPIO_Init+0x1f0>)
 8000e32:	f001 fe73 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_LEFT_Pin;
 8000e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_LEFT_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4822      	ldr	r0, [pc, #136]	; (8000ed4 <MX_GPIO_Init+0x1f0>)
 8000e4c:	f001 fe66 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_HALL_FRONT_Pin;
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN_HALL_FRONT_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	4819      	ldr	r0, [pc, #100]	; (8000ec8 <MX_GPIO_Init+0x1e4>)
 8000e64:	f001 fe5a 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_RIGHT_Pin;
 8000e68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4813      	ldr	r0, [pc, #76]	; (8000ecc <MX_GPIO_Init+0x1e8>)
 8000e7e:	f001 fe4d 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e82:	2304      	movs	r3, #4
 8000e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e86:	2303      	movs	r3, #3
 8000e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	4810      	ldr	r0, [pc, #64]	; (8000ed8 <MX_GPIO_Init+0x1f4>)
 8000e96:	f001 fe41 	bl	8002b1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2105      	movs	r1, #5
 8000e9e:	2006      	movs	r0, #6
 8000ea0:	f001 fb6e 	bl	8002580 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ea4:	2006      	movs	r0, #6
 8000ea6:	f001 fb97 	bl	80025d8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2105      	movs	r1, #5
 8000eae:	2007      	movs	r0, #7
 8000eb0:	f001 fb66 	bl	8002580 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000eb4:	2007      	movs	r0, #7
 8000eb6:	f001 fb8f 	bl	80025d8 <HAL_NVIC_EnableIRQ>

}
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	; 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020800 	.word	0x40020800
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	10110000 	.word	0x10110000
 8000ed4:	40020400 	.word	0x40020400
 8000ed8:	40020c00 	.word	0x40020c00

08000edc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000ee2:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <MX_I2C1_Init+0x54>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000ee8:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <MX_I2C1_Init+0x58>)
 8000eea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000efa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000efe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f18:	4804      	ldr	r0, [pc, #16]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f1a:	f002 f8bb 	bl	8003094 <HAL_I2C_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f24:	f000 f8d0 	bl	80010c8 <Error_Handler>
  }

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200035c8 	.word	0x200035c8
 8000f30:	40005400 	.word	0x40005400
 8000f34:	000186a0 	.word	0x000186a0

08000f38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <HAL_I2C_MspInit+0x7c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d127      	bne.n	8000faa <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_I2C_MspInit+0x80>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	4a16      	ldr	r2, [pc, #88]	; (8000fb8 <HAL_I2C_MspInit+0x80>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	61d3      	str	r3, [r2, #28]
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_I2C_MspInit+0x80>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f72:	23c0      	movs	r3, #192	; 0xc0
 8000f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f76:	2312      	movs	r3, #18
 8000f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f82:	2304      	movs	r3, #4
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480b      	ldr	r0, [pc, #44]	; (8000fbc <HAL_I2C_MspInit+0x84>)
 8000f8e:	f001 fdc5 	bl	8002b1c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <HAL_I2C_MspInit+0x80>)
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	4a08      	ldr	r2, [pc, #32]	; (8000fb8 <HAL_I2C_MspInit+0x80>)
 8000f98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f9c:	6253      	str	r3, [r2, #36]	; 0x24
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_I2C_MspInit+0x80>)
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000faa:	bf00      	nop
 8000fac:	3728      	adds	r7, #40	; 0x28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40005400 	.word	0x40005400
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020400 	.word	0x40020400

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc4:	f000 fc9f 	bl	8001906 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc8:	f000 f81c 	bl	8001004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fcc:	f7ff fe8a 	bl	8000ce4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fd0:	f7ff fe24 	bl	8000c1c <MX_DMA_Init>
  MX_ADC_Init();
 8000fd4:	f7ff fd56 	bl	8000a84 <MX_ADC_Init>
  MX_I2C1_Init();
 8000fd8:	f7ff ff80 	bl	8000edc <MX_I2C1_Init>
  MX_TIM2_Init();
 8000fdc:	f000 f986 	bl	80012ec <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fe0:	f000 f9f8 	bl	80013d4 <MX_TIM3_Init>
  MX_TIM9_Init();
 8000fe4:	f000 fa6a 	bl	80014bc <MX_TIM9_Init>
  MX_USART3_UART_Init();
 8000fe8:	f000 fba4 	bl	8001734 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	device_init();
 8000fec:	f7ff fa33 	bl	8000456 <device_init>
	h_bridge_init();
 8000ff0:	f7ff f8c6 	bl	8000180 <h_bridge_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000ff4:	f005 ff16 	bl	8006e24 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 8000ff8:	f7ff fe58 	bl	8000cac <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000ffc:	f005 ff44 	bl	8006e88 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001000:	e7fe      	b.n	8001000 <main+0x40>
	...

08001004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b092      	sub	sp, #72	; 0x48
 8001008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	2234      	movs	r2, #52	; 0x34
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f009 f81d 	bl	800a052 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001018:	463b      	mov	r3, r7
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001026:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <SystemClock_Config+0x9c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800102e:	4a1c      	ldr	r2, [pc, #112]	; (80010a0 <SystemClock_Config+0x9c>)
 8001030:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001034:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001036:	2303      	movs	r3, #3
 8001038:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800103a:	2301      	movs	r3, #1
 800103c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800103e:	2301      	movs	r3, #1
 8001040:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001042:	2310      	movs	r3, #16
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001046:	2302      	movs	r3, #2
 8001048:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800104a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001050:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001054:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8001056:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800105a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4618      	mov	r0, r3
 8001062:	f003 f813 	bl	800408c <HAL_RCC_OscConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800106c:	f000 f82c 	bl	80010c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001070:	230f      	movs	r3, #15
 8001072:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001074:	2303      	movs	r3, #3
 8001076:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001084:	463b      	mov	r3, r7
 8001086:	2101      	movs	r1, #1
 8001088:	4618      	mov	r0, r3
 800108a:	f003 fc7d 	bl	8004988 <HAL_RCC_ClockConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001094:	f000 f818 	bl	80010c8 <Error_Handler>
  }
}
 8001098:	bf00      	nop
 800109a:	3748      	adds	r7, #72	; 0x48
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40007000 	.word	0x40007000

080010a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d101      	bne.n	80010ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010b6:	f000 fc3f 	bl	8001938 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40000c00 	.word	0x40000c00

080010c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr

080010d4 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <HAL_MspInit+0x64>)
 80010f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f2:	4a16      	ldr	r2, [pc, #88]	; (800114c <HAL_MspInit+0x64>)
 80010f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f8:	6253      	str	r3, [r2, #36]	; 0x24
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_MspInit+0x64>)
 80010fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <HAL_MspInit+0x64>)
 8001108:	6a1b      	ldr	r3, [r3, #32]
 800110a:	4a10      	ldr	r2, [pc, #64]	; (800114c <HAL_MspInit+0x64>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6213      	str	r3, [r2, #32]
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <HAL_MspInit+0x64>)
 8001114:	6a1b      	ldr	r3, [r3, #32]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <HAL_MspInit+0x64>)
 8001120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <HAL_MspInit+0x64>)
 8001124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001128:	6253      	str	r3, [r2, #36]	; 0x24
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <HAL_MspInit+0x64>)
 800112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	210f      	movs	r1, #15
 800113a:	f06f 0001 	mvn.w	r0, #1
 800113e:	f001 fa1f 	bl	8002580 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800

08001150 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08c      	sub	sp, #48	; 0x30
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	202e      	movs	r0, #46	; 0x2e
 8001166:	f001 fa0b 	bl	8002580 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 800116a:	202e      	movs	r0, #46	; 0x2e
 800116c:	f001 fa34 	bl	80025d8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001170:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <HAL_InitTick+0x9c>)
 8001172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001174:	4a1d      	ldr	r2, [pc, #116]	; (80011ec <HAL_InitTick+0x9c>)
 8001176:	f043 0308 	orr.w	r3, r3, #8
 800117a:	6253      	str	r3, [r2, #36]	; 0x24
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <HAL_InitTick+0x9c>)
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001188:	f107 0210 	add.w	r2, r7, #16
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f003 fe40 	bl	8004e18 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001198:	f003 fe16 	bl	8004dc8 <HAL_RCC_GetPCLK1Freq>
 800119c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800119e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a0:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <HAL_InitTick+0xa0>)
 80011a2:	fba2 2303 	umull	r2, r3, r2, r3
 80011a6:	0c9b      	lsrs	r3, r3, #18
 80011a8:	3b01      	subs	r3, #1
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <HAL_InitTick+0xa4>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <HAL_InitTick+0xa8>)
 80011b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <HAL_InitTick+0xa4>)
 80011b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011b8:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80011ba:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <HAL_InitTick+0xa4>)
 80011bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011be:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <HAL_InitTick+0xa4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <HAL_InitTick+0xa4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80011cc:	4809      	ldr	r0, [pc, #36]	; (80011f4 <HAL_InitTick+0xa4>)
 80011ce:	f003 fec5 	bl	8004f5c <HAL_TIM_Base_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d104      	bne.n	80011e2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80011d8:	4806      	ldr	r0, [pc, #24]	; (80011f4 <HAL_InitTick+0xa4>)
 80011da:	f003 ff67 	bl	80050ac <HAL_TIM_Base_Start_IT>
 80011de:	4603      	mov	r3, r0
 80011e0:	e000      	b.n	80011e4 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3730      	adds	r7, #48	; 0x30
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40023800 	.word	0x40023800
 80011f0:	431bde83 	.word	0x431bde83
 80011f4:	2000361c 	.word	0x2000361c
 80011f8:	40000c00 	.word	0x40000c00

080011fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <HardFault_Handler+0x4>

0800120e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <MemManage_Handler+0x4>

08001214 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <BusFault_Handler+0x4>

0800121a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800121e:	e7fe      	b.n	800121e <UsageFault_Handler+0x4>

08001220 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001230:	2001      	movs	r0, #1
 8001232:	f001 ff17 	bl	8003064 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}

0800123a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800123e:	2002      	movs	r0, #2
 8001240:	f001 ff10 	bl	8003064 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <DMA1_Channel2_IRQHandler+0x10>)
 800124e:	f001 fb87 	bl	8002960 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20003790 	.word	0x20003790

0800125c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <DMA1_Channel3_IRQHandler+0x10>)
 8001262:	f001 fb7d 	bl	8002960 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	2000370c 	.word	0x2000370c

08001270 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <TIM5_IRQHandler+0x10>)
 8001276:	f004 f8c5 	bl	8005404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	2000361c 	.word	0x2000361c

08001284 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <SystemInit+0x5c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <SystemInit+0x5c>)
 800128e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001292:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <SystemInit+0x5c>)
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	4911      	ldr	r1, [pc, #68]	; (80012e0 <SystemInit+0x5c>)
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <SystemInit+0x60>)
 800129c:	4013      	ands	r3, r2
 800129e:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <SystemInit+0x5c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <SystemInit+0x5c>)
 80012a6:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80012aa:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80012ae:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <SystemInit+0x5c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <SystemInit+0x5c>)
 80012b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ba:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <SystemInit+0x5c>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	4a07      	ldr	r2, [pc, #28]	; (80012e0 <SystemInit+0x5c>)
 80012c2:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80012c6:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <SystemInit+0x5c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <SystemInit+0x64>)
 80012d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012d4:	609a      	str	r2, [r3, #8]
#endif
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	88ffc00c 	.word	0x88ffc00c
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0318 	add.w	r3, r7, #24
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800130a:	463b      	mov	r3, r7
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8001316:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <MX_TIM2_Init+0xe4>)
 8001318:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800131c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800131e:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <MX_TIM2_Init+0xe4>)
 8001320:	2200      	movs	r2, #0
 8001322:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001324:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <MX_TIM2_Init+0xe4>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3199;
 800132a:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <MX_TIM2_Init+0xe4>)
 800132c:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001330:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001332:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <MX_TIM2_Init+0xe4>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001338:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <MX_TIM2_Init+0xe4>)
 800133a:	2280      	movs	r2, #128	; 0x80
 800133c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800133e:	4824      	ldr	r0, [pc, #144]	; (80013d0 <MX_TIM2_Init+0xe4>)
 8001340:	f003 fe0c 	bl	8004f5c <HAL_TIM_Base_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800134a:	f7ff febd 	bl	80010c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001352:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001354:	f107 0318 	add.w	r3, r7, #24
 8001358:	4619      	mov	r1, r3
 800135a:	481d      	ldr	r0, [pc, #116]	; (80013d0 <MX_TIM2_Init+0xe4>)
 800135c:	f004 fabe 	bl	80058dc <HAL_TIM_ConfigClockSource>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001366:	f7ff feaf 	bl	80010c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800136a:	4819      	ldr	r0, [pc, #100]	; (80013d0 <MX_TIM2_Init+0xe4>)
 800136c:	f003 ff04 	bl	8005178 <HAL_TIM_PWM_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001376:	f7ff fea7 	bl	80010c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	4619      	mov	r1, r3
 8001388:	4811      	ldr	r0, [pc, #68]	; (80013d0 <MX_TIM2_Init+0xe4>)
 800138a:	f005 f81f 	bl	80063cc <HAL_TIMEx_MasterConfigSynchronization>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001394:	f7ff fe98 	bl	80010c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001398:	2360      	movs	r3, #96	; 0x60
 800139a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1599;
 800139c:	f240 633f 	movw	r3, #1599	; 0x63f
 80013a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80013a6:	2304      	movs	r3, #4
 80013a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013aa:	463b      	mov	r3, r7
 80013ac:	2200      	movs	r2, #0
 80013ae:	4619      	mov	r1, r3
 80013b0:	4807      	ldr	r0, [pc, #28]	; (80013d0 <MX_TIM2_Init+0xe4>)
 80013b2:	f004 f903 	bl	80055bc <HAL_TIM_PWM_ConfigChannel>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80013bc:	f7ff fe84 	bl	80010c8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80013c0:	4803      	ldr	r0, [pc, #12]	; (80013d0 <MX_TIM2_Init+0xe4>)
 80013c2:	f000 f933 	bl	800162c <HAL_TIM_MspPostInit>

}
 80013c6:	bf00      	nop
 80013c8:	3728      	adds	r7, #40	; 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200036d0 	.word	0x200036d0

080013d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013da:	f107 0318 	add.w	r3, r7, #24
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f2:	463b      	mov	r3, r7
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 80013fe:	4b2d      	ldr	r3, [pc, #180]	; (80014b4 <MX_TIM3_Init+0xe0>)
 8001400:	4a2d      	ldr	r2, [pc, #180]	; (80014b8 <MX_TIM3_Init+0xe4>)
 8001402:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001404:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <MX_TIM3_Init+0xe0>)
 8001406:	2200      	movs	r2, #0
 8001408:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140a:	4b2a      	ldr	r3, [pc, #168]	; (80014b4 <MX_TIM3_Init+0xe0>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3200-1;
 8001410:	4b28      	ldr	r3, [pc, #160]	; (80014b4 <MX_TIM3_Init+0xe0>)
 8001412:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001416:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001418:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <MX_TIM3_Init+0xe0>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800141e:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <MX_TIM3_Init+0xe0>)
 8001420:	2280      	movs	r2, #128	; 0x80
 8001422:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001424:	4823      	ldr	r0, [pc, #140]	; (80014b4 <MX_TIM3_Init+0xe0>)
 8001426:	f003 fd99 	bl	8004f5c <HAL_TIM_Base_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001430:	f7ff fe4a 	bl	80010c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001438:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800143a:	f107 0318 	add.w	r3, r7, #24
 800143e:	4619      	mov	r1, r3
 8001440:	481c      	ldr	r0, [pc, #112]	; (80014b4 <MX_TIM3_Init+0xe0>)
 8001442:	f004 fa4b 	bl	80058dc <HAL_TIM_ConfigClockSource>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800144c:	f7ff fe3c 	bl	80010c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001450:	4818      	ldr	r0, [pc, #96]	; (80014b4 <MX_TIM3_Init+0xe0>)
 8001452:	f003 fe91 	bl	8005178 <HAL_TIM_PWM_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800145c:	f7ff fe34 	bl	80010c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	4619      	mov	r1, r3
 800146e:	4811      	ldr	r0, [pc, #68]	; (80014b4 <MX_TIM3_Init+0xe0>)
 8001470:	f004 ffac 	bl	80063cc <HAL_TIMEx_MasterConfigSynchronization>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800147a:	f7ff fe25 	bl	80010c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800147e:	2360      	movs	r3, #96	; 0x60
 8001480:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8001482:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001486:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800148c:	2304      	movs	r3, #4
 800148e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001490:	463b      	mov	r3, r7
 8001492:	2208      	movs	r2, #8
 8001494:	4619      	mov	r1, r3
 8001496:	4807      	ldr	r0, [pc, #28]	; (80014b4 <MX_TIM3_Init+0xe0>)
 8001498:	f004 f890 	bl	80055bc <HAL_TIM_PWM_ConfigChannel>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80014a2:	f7ff fe11 	bl	80010c8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80014a6:	4803      	ldr	r0, [pc, #12]	; (80014b4 <MX_TIM3_Init+0xe0>)
 80014a8:	f000 f8c0 	bl	800162c <HAL_TIM_MspPostInit>

}
 80014ac:	bf00      	nop
 80014ae:	3728      	adds	r7, #40	; 0x28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20003658 	.word	0x20003658
 80014b8:	40000400 	.word	0x40000400

080014bc <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c2:	f107 0318 	add.w	r3, r7, #24
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014da:	463b      	mov	r3, r7
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 80014e6:	4b2d      	ldr	r3, [pc, #180]	; (800159c <MX_TIM9_Init+0xe0>)
 80014e8:	4a2d      	ldr	r2, [pc, #180]	; (80015a0 <MX_TIM9_Init+0xe4>)
 80014ea:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 80014ec:	4b2b      	ldr	r3, [pc, #172]	; (800159c <MX_TIM9_Init+0xe0>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f2:	4b2a      	ldr	r3, [pc, #168]	; (800159c <MX_TIM9_Init+0xe0>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 3200;
 80014f8:	4b28      	ldr	r3, [pc, #160]	; (800159c <MX_TIM9_Init+0xe0>)
 80014fa:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80014fe:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001500:	4b26      	ldr	r3, [pc, #152]	; (800159c <MX_TIM9_Init+0xe0>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001506:	4b25      	ldr	r3, [pc, #148]	; (800159c <MX_TIM9_Init+0xe0>)
 8001508:	2280      	movs	r2, #128	; 0x80
 800150a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800150c:	4823      	ldr	r0, [pc, #140]	; (800159c <MX_TIM9_Init+0xe0>)
 800150e:	f003 fd25 	bl	8004f5c <HAL_TIM_Base_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 8001518:	f7ff fdd6 	bl	80010c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001520:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001522:	f107 0318 	add.w	r3, r7, #24
 8001526:	4619      	mov	r1, r3
 8001528:	481c      	ldr	r0, [pc, #112]	; (800159c <MX_TIM9_Init+0xe0>)
 800152a:	f004 f9d7 	bl	80058dc <HAL_TIM_ConfigClockSource>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM9_Init+0x7c>
  {
    Error_Handler();
 8001534:	f7ff fdc8 	bl	80010c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001538:	4818      	ldr	r0, [pc, #96]	; (800159c <MX_TIM9_Init+0xe0>)
 800153a:	f003 fe1d 	bl	8005178 <HAL_TIM_PWM_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM9_Init+0x8c>
  {
    Error_Handler();
 8001544:	f7ff fdc0 	bl	80010c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	4619      	mov	r1, r3
 8001556:	4811      	ldr	r0, [pc, #68]	; (800159c <MX_TIM9_Init+0xe0>)
 8001558:	f004 ff38 	bl	80063cc <HAL_TIMEx_MasterConfigSynchronization>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM9_Init+0xaa>
  {
    Error_Handler();
 8001562:	f7ff fdb1 	bl	80010c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001566:	2360      	movs	r3, #96	; 0x60
 8001568:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 800156a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800156e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001578:	463b      	mov	r3, r7
 800157a:	2204      	movs	r2, #4
 800157c:	4619      	mov	r1, r3
 800157e:	4807      	ldr	r0, [pc, #28]	; (800159c <MX_TIM9_Init+0xe0>)
 8001580:	f004 f81c 	bl	80055bc <HAL_TIM_PWM_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM9_Init+0xd2>
  {
    Error_Handler();
 800158a:	f7ff fd9d 	bl	80010c8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 800158e:	4803      	ldr	r0, [pc, #12]	; (800159c <MX_TIM9_Init+0xe0>)
 8001590:	f000 f84c 	bl	800162c <HAL_TIM_MspPostInit>

}
 8001594:	bf00      	nop
 8001596:	3728      	adds	r7, #40	; 0x28
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20003694 	.word	0x20003694
 80015a0:	40010800 	.word	0x40010800

080015a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b087      	sub	sp, #28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015b4:	d10c      	bne.n	80015d0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015b6:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <HAL_TIM_Base_MspInit+0x7c>)
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	4a19      	ldr	r2, [pc, #100]	; (8001620 <HAL_TIM_Base_MspInit+0x7c>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6253      	str	r3, [r2, #36]	; 0x24
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <HAL_TIM_Base_MspInit+0x7c>)
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80015ce:	e022      	b.n	8001616 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a13      	ldr	r2, [pc, #76]	; (8001624 <HAL_TIM_Base_MspInit+0x80>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d10c      	bne.n	80015f4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <HAL_TIM_Base_MspInit+0x7c>)
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	4a10      	ldr	r2, [pc, #64]	; (8001620 <HAL_TIM_Base_MspInit+0x7c>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	6253      	str	r3, [r2, #36]	; 0x24
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <HAL_TIM_Base_MspInit+0x7c>)
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]
}
 80015f2:	e010      	b.n	8001616 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM9)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <HAL_TIM_Base_MspInit+0x84>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d10b      	bne.n	8001616 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_TIM_Base_MspInit+0x7c>)
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	4a07      	ldr	r2, [pc, #28]	; (8001620 <HAL_TIM_Base_MspInit+0x7c>)
 8001604:	f043 0304 	orr.w	r3, r3, #4
 8001608:	6213      	str	r3, [r2, #32]
 800160a:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_TIM_Base_MspInit+0x7c>)
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
}
 8001616:	bf00      	nop
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	40023800 	.word	0x40023800
 8001624:	40000400 	.word	0x40000400
 8001628:	40010800 	.word	0x40010800

0800162c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800164c:	d11c      	bne.n	8001688 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	4b33      	ldr	r3, [pc, #204]	; (800171c <HAL_TIM_MspPostInit+0xf0>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	4a32      	ldr	r2, [pc, #200]	; (800171c <HAL_TIM_MspPostInit+0xf0>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	61d3      	str	r3, [r2, #28]
 800165a:	4b30      	ldr	r3, [pc, #192]	; (800171c <HAL_TIM_MspPostInit+0xf0>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0-WKUP1     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PWM_ENGINE_LEFT_Pin;
 8001666:	2301      	movs	r3, #1
 8001668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001676:	2301      	movs	r3, #1
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_LEFT_GPIO_Port, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	4827      	ldr	r0, [pc, #156]	; (8001720 <HAL_TIM_MspPostInit+0xf4>)
 8001682:	f001 fa4b 	bl	8002b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001686:	e044      	b.n	8001712 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a25      	ldr	r2, [pc, #148]	; (8001724 <HAL_TIM_MspPostInit+0xf8>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d11d      	bne.n	80016ce <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001692:	4b22      	ldr	r3, [pc, #136]	; (800171c <HAL_TIM_MspPostInit+0xf0>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	4a21      	ldr	r2, [pc, #132]	; (800171c <HAL_TIM_MspPostInit+0xf0>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	61d3      	str	r3, [r2, #28]
 800169e:	4b1f      	ldr	r3, [pc, #124]	; (800171c <HAL_TIM_MspPostInit+0xf0>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_ENGINE_RIGHT_Pin;
 80016aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016bc:	2302      	movs	r3, #2
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	4818      	ldr	r0, [pc, #96]	; (8001728 <HAL_TIM_MspPostInit+0xfc>)
 80016c8:	f001 fa28 	bl	8002b1c <HAL_GPIO_Init>
}
 80016cc:	e021      	b.n	8001712 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM9)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a16      	ldr	r2, [pc, #88]	; (800172c <HAL_TIM_MspPostInit+0x100>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d11c      	bne.n	8001712 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d8:	4b10      	ldr	r3, [pc, #64]	; (800171c <HAL_TIM_MspPostInit+0xf0>)
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	4a0f      	ldr	r2, [pc, #60]	; (800171c <HAL_TIM_MspPostInit+0xf0>)
 80016de:	f043 0302 	orr.w	r3, r3, #2
 80016e2:	61d3      	str	r3, [r2, #28]
 80016e4:	4b0d      	ldr	r3, [pc, #52]	; (800171c <HAL_TIM_MspPostInit+0xf0>)
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 80016f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001702:	2303      	movs	r3, #3
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	4808      	ldr	r0, [pc, #32]	; (8001730 <HAL_TIM_MspPostInit+0x104>)
 800170e:	f001 fa05 	bl	8002b1c <HAL_GPIO_Init>
}
 8001712:	bf00      	nop
 8001714:	3728      	adds	r7, #40	; 0x28
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	40020000 	.word	0x40020000
 8001724:	40000400 	.word	0x40000400
 8001728:	40020800 	.word	0x40020800
 800172c:	40010800 	.word	0x40010800
 8001730:	40020400 	.word	0x40020400

08001734 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 800173a:	4a12      	ldr	r2, [pc, #72]	; (8001784 <MX_USART3_UART_Init+0x50>)
 800173c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 8001740:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001744:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 800175a:	220c      	movs	r2, #12
 800175c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800176a:	4805      	ldr	r0, [pc, #20]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 800176c:	f004 fec8 	bl	8006500 <HAL_UART_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001776:	f7ff fca7 	bl	80010c8 <Error_Handler>
  }

}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20003750 	.word	0x20003750
 8001784:	40004800 	.word	0x40004800

08001788 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a3e      	ldr	r2, [pc, #248]	; (80018a0 <HAL_UART_MspInit+0x118>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d175      	bne.n	8001896 <HAL_UART_MspInit+0x10e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017aa:	4b3e      	ldr	r3, [pc, #248]	; (80018a4 <HAL_UART_MspInit+0x11c>)
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	4a3d      	ldr	r2, [pc, #244]	; (80018a4 <HAL_UART_MspInit+0x11c>)
 80017b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b4:	6253      	str	r3, [r2, #36]	; 0x24
 80017b6:	4b3b      	ldr	r3, [pc, #236]	; (80018a4 <HAL_UART_MspInit+0x11c>)
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c2:	4b38      	ldr	r3, [pc, #224]	; (80018a4 <HAL_UART_MspInit+0x11c>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	4a37      	ldr	r2, [pc, #220]	; (80018a4 <HAL_UART_MspInit+0x11c>)
 80017c8:	f043 0302 	orr.w	r3, r3, #2
 80017cc:	61d3      	str	r3, [r2, #28]
 80017ce:	4b35      	ldr	r3, [pc, #212]	; (80018a4 <HAL_UART_MspInit+0x11c>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e8:	2303      	movs	r3, #3
 80017ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017ec:	2307      	movs	r3, #7
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4619      	mov	r1, r3
 80017f6:	482c      	ldr	r0, [pc, #176]	; (80018a8 <HAL_UART_MspInit+0x120>)
 80017f8:	f001 f990 	bl	8002b1c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80017fc:	4b2b      	ldr	r3, [pc, #172]	; (80018ac <HAL_UART_MspInit+0x124>)
 80017fe:	4a2c      	ldr	r2, [pc, #176]	; (80018b0 <HAL_UART_MspInit+0x128>)
 8001800:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001802:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <HAL_UART_MspInit+0x124>)
 8001804:	2200      	movs	r2, #0
 8001806:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001808:	4b28      	ldr	r3, [pc, #160]	; (80018ac <HAL_UART_MspInit+0x124>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800180e:	4b27      	ldr	r3, [pc, #156]	; (80018ac <HAL_UART_MspInit+0x124>)
 8001810:	2280      	movs	r2, #128	; 0x80
 8001812:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001814:	4b25      	ldr	r3, [pc, #148]	; (80018ac <HAL_UART_MspInit+0x124>)
 8001816:	2200      	movs	r2, #0
 8001818:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800181a:	4b24      	ldr	r3, [pc, #144]	; (80018ac <HAL_UART_MspInit+0x124>)
 800181c:	2200      	movs	r2, #0
 800181e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001820:	4b22      	ldr	r3, [pc, #136]	; (80018ac <HAL_UART_MspInit+0x124>)
 8001822:	2200      	movs	r2, #0
 8001824:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001826:	4b21      	ldr	r3, [pc, #132]	; (80018ac <HAL_UART_MspInit+0x124>)
 8001828:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800182c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800182e:	481f      	ldr	r0, [pc, #124]	; (80018ac <HAL_UART_MspInit+0x124>)
 8001830:	f000 feea 	bl	8002608 <HAL_DMA_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 800183a:	f7ff fc45 	bl	80010c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a1a      	ldr	r2, [pc, #104]	; (80018ac <HAL_UART_MspInit+0x124>)
 8001842:	635a      	str	r2, [r3, #52]	; 0x34
 8001844:	4a19      	ldr	r2, [pc, #100]	; (80018ac <HAL_UART_MspInit+0x124>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800184a:	4b1a      	ldr	r3, [pc, #104]	; (80018b4 <HAL_UART_MspInit+0x12c>)
 800184c:	4a1a      	ldr	r2, [pc, #104]	; (80018b8 <HAL_UART_MspInit+0x130>)
 800184e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001850:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <HAL_UART_MspInit+0x12c>)
 8001852:	2210      	movs	r2, #16
 8001854:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001856:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <HAL_UART_MspInit+0x12c>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800185c:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <HAL_UART_MspInit+0x12c>)
 800185e:	2280      	movs	r2, #128	; 0x80
 8001860:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001862:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <HAL_UART_MspInit+0x12c>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_UART_MspInit+0x12c>)
 800186a:	2200      	movs	r2, #0
 800186c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800186e:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <HAL_UART_MspInit+0x12c>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001874:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <HAL_UART_MspInit+0x12c>)
 8001876:	2200      	movs	r2, #0
 8001878:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800187a:	480e      	ldr	r0, [pc, #56]	; (80018b4 <HAL_UART_MspInit+0x12c>)
 800187c:	f000 fec4 	bl	8002608 <HAL_DMA_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8001886:	f7ff fc1f 	bl	80010c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a09      	ldr	r2, [pc, #36]	; (80018b4 <HAL_UART_MspInit+0x12c>)
 800188e:	631a      	str	r2, [r3, #48]	; 0x30
 8001890:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <HAL_UART_MspInit+0x12c>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001896:	bf00      	nop
 8001898:	3728      	adds	r7, #40	; 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40004800 	.word	0x40004800
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020400 	.word	0x40020400
 80018ac:	2000370c 	.word	0x2000370c
 80018b0:	40026030 	.word	0x40026030
 80018b4:	20003790 	.word	0x20003790
 80018b8:	4002601c 	.word	0x4002601c

080018bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80018bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80018be:	e003      	b.n	80018c8 <LoopCopyDataInit>

080018c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80018c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80018c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80018c6:	3104      	adds	r1, #4

080018c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80018c8:	480a      	ldr	r0, [pc, #40]	; (80018f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80018cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80018ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80018d0:	d3f6      	bcc.n	80018c0 <CopyDataInit>
  ldr r2, =_sbss
 80018d2:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80018d4:	e002      	b.n	80018dc <LoopFillZerobss>

080018d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80018d8:	f842 3b04 	str.w	r3, [r2], #4

080018dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80018de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80018e0:	d3f9      	bcc.n	80018d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018e2:	f7ff fccf 	bl	8001284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018e6:	f008 fb85 	bl	8009ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ea:	f7ff fb69 	bl	8000fc0 <main>
  bx lr
 80018ee:	4770      	bx	lr
  ldr r3, =_sidata
 80018f0:	0800a434 	.word	0x0800a434
  ldr r0, =_sdata
 80018f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80018f8:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80018fc:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001900:	20003818 	.word	0x20003818

08001904 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001904:	e7fe      	b.n	8001904 <ADC1_IRQHandler>

08001906 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001910:	2003      	movs	r0, #3
 8001912:	f000 fe15 	bl	8002540 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001916:	2000      	movs	r0, #0
 8001918:	f7ff fc1a 	bl	8001150 <HAL_InitTick>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d002      	beq.n	8001928 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	71fb      	strb	r3, [r7, #7]
 8001926:	e001      	b.n	800192c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001928:	f7ff fbde 	bl	80010e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800192c:	79fb      	ldrb	r3, [r7, #7]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_IncTick+0x1c>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_IncTick+0x20>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4413      	add	r3, r2
 8001946:	4a03      	ldr	r2, [pc, #12]	; (8001954 <HAL_IncTick+0x1c>)
 8001948:	6013      	str	r3, [r2, #0]
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	200037d4 	.word	0x200037d4
 8001958:	20000008 	.word	0x20000008

0800195c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return uwTick;
 8001960:	4b02      	ldr	r3, [pc, #8]	; (800196c <HAL_GetTick+0x10>)
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	200037d4 	.word	0x200037d4

08001970 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08e      	sub	sp, #56	; 0x38
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e282      	b.n	8001e96 <HAL_ADC_Init+0x526>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a9d      	ldr	r2, [pc, #628]	; (8001c0c <HAL_ADC_Init+0x29c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d004      	beq.n	80019a4 <HAL_ADC_Init+0x34>
 800199a:	f240 11bd 	movw	r1, #445	; 0x1bd
 800199e:	489c      	ldr	r0, [pc, #624]	; (8001c10 <HAL_ADC_Init+0x2a0>)
 80019a0:	f7ff fb98 	bl	80010d4 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00e      	beq.n	80019ca <HAL_ADC_Init+0x5a>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b4:	d009      	beq.n	80019ca <HAL_ADC_Init+0x5a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019be:	d004      	beq.n	80019ca <HAL_ADC_Init+0x5a>
 80019c0:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80019c4:	4892      	ldr	r0, [pc, #584]	; (8001c10 <HAL_ADC_Init+0x2a0>)
 80019c6:	f7ff fb85 	bl	80010d4 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d013      	beq.n	80019fa <HAL_ADC_Init+0x8a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019da:	d00e      	beq.n	80019fa <HAL_ADC_Init+0x8a>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019e4:	d009      	beq.n	80019fa <HAL_ADC_Init+0x8a>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80019ee:	d004      	beq.n	80019fa <HAL_ADC_Init+0x8a>
 80019f0:	f240 11bf 	movw	r1, #447	; 0x1bf
 80019f4:	4886      	ldr	r0, [pc, #536]	; (8001c10 <HAL_ADC_Init+0x2a0>)
 80019f6:	f7ff fb6d 	bl	80010d4 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d009      	beq.n	8001a16 <HAL_ADC_Init+0xa6>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a0a:	d004      	beq.n	8001a16 <HAL_ADC_Init+0xa6>
 8001a0c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001a10:	487f      	ldr	r0, [pc, #508]	; (8001c10 <HAL_ADC_Init+0x2a0>)
 8001a12:	f7ff fb5f 	bl	80010d4 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d009      	beq.n	8001a32 <HAL_ADC_Init+0xc2>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a26:	d004      	beq.n	8001a32 <HAL_ADC_Init+0xc2>
 8001a28:	f240 11c1 	movw	r1, #449	; 0x1c1
 8001a2c:	4878      	ldr	r0, [pc, #480]	; (8001c10 <HAL_ADC_Init+0x2a0>)
 8001a2e:	f7ff fb51 	bl	80010d4 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a3a:	d008      	beq.n	8001a4e <HAL_ADC_Init+0xde>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d004      	beq.n	8001a4e <HAL_ADC_Init+0xde>
 8001a44:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8001a48:	4871      	ldr	r0, [pc, #452]	; (8001c10 <HAL_ADC_Init+0x2a0>)
 8001a4a:	f7ff fb43 	bl	80010d4 <assert_failed>
  assert_param(IS_ADC_AUTOWAIT(hadc->Init.LowPowerAutoWait));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d020      	beq.n	8001a98 <HAL_ADC_Init+0x128>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	2b10      	cmp	r3, #16
 8001a5c:	d01c      	beq.n	8001a98 <HAL_ADC_Init+0x128>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	2b20      	cmp	r3, #32
 8001a64:	d018      	beq.n	8001a98 <HAL_ADC_Init+0x128>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	2b30      	cmp	r3, #48	; 0x30
 8001a6c:	d014      	beq.n	8001a98 <HAL_ADC_Init+0x128>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2b40      	cmp	r3, #64	; 0x40
 8001a74:	d010      	beq.n	8001a98 <HAL_ADC_Init+0x128>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	2b50      	cmp	r3, #80	; 0x50
 8001a7c:	d00c      	beq.n	8001a98 <HAL_ADC_Init+0x128>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	2b60      	cmp	r3, #96	; 0x60
 8001a84:	d008      	beq.n	8001a98 <HAL_ADC_Init+0x128>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	2b70      	cmp	r3, #112	; 0x70
 8001a8c:	d004      	beq.n	8001a98 <HAL_ADC_Init+0x128>
 8001a8e:	f240 11c3 	movw	r1, #451	; 0x1c3
 8001a92:	485f      	ldr	r0, [pc, #380]	; (8001c10 <HAL_ADC_Init+0x2a0>)
 8001a94:	f7ff fb1e 	bl	80010d4 <assert_failed>
  assert_param(IS_ADC_AUTOPOWEROFF(hadc->Init.LowPowerAutoPowerOff));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d013      	beq.n	8001ac8 <HAL_ADC_Init+0x158>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001aa8:	d00e      	beq.n	8001ac8 <HAL_ADC_Init+0x158>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab2:	d009      	beq.n	8001ac8 <HAL_ADC_Init+0x158>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001abc:	d004      	beq.n	8001ac8 <HAL_ADC_Init+0x158>
 8001abe:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8001ac2:	4853      	ldr	r0, [pc, #332]	; (8001c10 <HAL_ADC_Init+0x2a0>)
 8001ac4:	f7ff fb06 	bl	80010d4 <assert_failed>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d008      	beq.n	8001ae2 <HAL_ADC_Init+0x172>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d004      	beq.n	8001ae2 <HAL_ADC_Init+0x172>
 8001ad8:	f240 11c5 	movw	r1, #453	; 0x1c5
 8001adc:	484c      	ldr	r0, [pc, #304]	; (8001c10 <HAL_ADC_Init+0x2a0>)
 8001ade:	f7ff faf9 	bl	80010d4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d009      	beq.n	8001b00 <HAL_ADC_Init+0x190>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d004      	beq.n	8001b00 <HAL_ADC_Init+0x190>
 8001af6:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8001afa:	4845      	ldr	r0, [pc, #276]	; (8001c10 <HAL_ADC_Init+0x2a0>)
 8001afc:	f7ff faea 	bl	80010d4 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b08:	d03e      	beq.n	8001b88 <HAL_ADC_Init+0x218>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001b12:	d039      	beq.n	8001b88 <HAL_ADC_Init+0x218>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b18:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001b1c:	d034      	beq.n	8001b88 <HAL_ADC_Init+0x218>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b22:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8001b26:	d02f      	beq.n	8001b88 <HAL_ADC_Init+0x218>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b30:	d02a      	beq.n	8001b88 <HAL_ADC_Init+0x218>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b3a:	d025      	beq.n	8001b88 <HAL_ADC_Init+0x218>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b40:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8001b44:	d020      	beq.n	8001b88 <HAL_ADC_Init+0x218>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4a:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8001b4e:	d01b      	beq.n	8001b88 <HAL_ADC_Init+0x218>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b54:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001b58:	d016      	beq.n	8001b88 <HAL_ADC_Init+0x218>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d012      	beq.n	8001b88 <HAL_ADC_Init+0x218>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b6a:	d00d      	beq.n	8001b88 <HAL_ADC_Init+0x218>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b70:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8001b74:	d008      	beq.n	8001b88 <HAL_ADC_Init+0x218>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7a:	2b10      	cmp	r3, #16
 8001b7c:	d004      	beq.n	8001b88 <HAL_ADC_Init+0x218>
 8001b7e:	f240 11c7 	movw	r1, #455	; 0x1c7
 8001b82:	4823      	ldr	r0, [pc, #140]	; (8001c10 <HAL_ADC_Init+0x2a0>)
 8001b84:	f7ff faa6 	bl	80010d4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d009      	beq.n	8001ba6 <HAL_ADC_Init+0x236>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d004      	beq.n	8001ba6 <HAL_ADC_Init+0x236>
 8001b9c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8001ba0:	481b      	ldr	r0, [pc, #108]	; (8001c10 <HAL_ADC_Init+0x2a0>)
 8001ba2:	f7ff fa97 	bl	80010d4 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d032      	beq.n	8001c14 <HAL_ADC_Init+0x2a4>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_ADC_Init+0x24e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bba:	2b1c      	cmp	r3, #28
 8001bbc:	d904      	bls.n	8001bc8 <HAL_ADC_Init+0x258>
 8001bbe:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8001bc2:	4813      	ldr	r0, [pc, #76]	; (8001c10 <HAL_ADC_Init+0x2a0>)
 8001bc4:	f7ff fa86 	bl	80010d4 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d009      	beq.n	8001be6 <HAL_ADC_Init+0x276>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d004      	beq.n	8001be6 <HAL_ADC_Init+0x276>
 8001bdc:	f240 11cd 	movw	r1, #461	; 0x1cd
 8001be0:	480b      	ldr	r0, [pc, #44]	; (8001c10 <HAL_ADC_Init+0x2a0>)
 8001be2:	f7ff fa77 	bl	80010d4 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d011      	beq.n	8001c14 <HAL_ADC_Init+0x2a4>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_ADC_Init+0x290>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d909      	bls.n	8001c14 <HAL_ADC_Init+0x2a4>
 8001c00:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <HAL_ADC_Init+0x2a0>)
 8001c06:	f7ff fa65 	bl	80010d4 <assert_failed>
 8001c0a:	e003      	b.n	8001c14 <HAL_ADC_Init+0x2a4>
 8001c0c:	40012400 	.word	0x40012400
 8001c10:	0800a120 	.word	0x0800a120
    }
  }
      
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c18:	2b10      	cmp	r3, #16
 8001c1a:	d017      	beq.n	8001c4c <HAL_ADC_Init+0x2dc>
  {
    assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d013      	beq.n	8001c4c <HAL_ADC_Init+0x2dc>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c2c:	d00e      	beq.n	8001c4c <HAL_ADC_Init+0x2dc>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c36:	d009      	beq.n	8001c4c <HAL_ADC_Init+0x2dc>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001c40:	d004      	beq.n	8001c4c <HAL_ADC_Init+0x2dc>
 8001c42:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8001c46:	4896      	ldr	r0, [pc, #600]	; (8001ea0 <HAL_ADC_Init+0x530>)
 8001c48:	f7ff fa44 	bl	80010d4 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d115      	bne.n	8001c80 <HAL_ADC_Init+0x310>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c62:	4b90      	ldr	r3, [pc, #576]	; (8001ea4 <HAL_ADC_Init+0x534>)
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	4a8f      	ldr	r2, [pc, #572]	; (8001ea4 <HAL_ADC_Init+0x534>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6213      	str	r3, [r2, #32]
 8001c6e:	4b8d      	ldr	r3, [pc, #564]	; (8001ea4 <HAL_ADC_Init+0x534>)
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7fe ff5a 	bl	8000b34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c84:	f003 0310 	and.w	r3, r3, #16
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f040 80ff 	bne.w	8001e8c <HAL_ADC_Init+0x51c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c96:	f023 0302 	bic.w	r3, r3, #2
 8001c9a:	f043 0202 	orr.w	r2, r3, #2
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001ca2:	4b81      	ldr	r3, [pc, #516]	; (8001ea8 <HAL_ADC_Init+0x538>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	497e      	ldr	r1, [pc, #504]	; (8001ea8 <HAL_ADC_Init+0x538>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001cbc:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cca:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
 8001cce:	fa93 f3a3 	rbit	r3, r3
 8001cd2:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	fab3 f383 	clz	r3, r3
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001ce0:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001ce6:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cee:	4619      	mov	r1, r3
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf6:	fa93 f3a3 	rbit	r3, r3
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	fab3 f383 	clz	r3, r3
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001d08:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001d0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d14:	2b10      	cmp	r3, #16
 8001d16:	d007      	beq.n	8001d28 <HAL_ADC_Init+0x3b8>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001d20:	4313      	orrs	r3, r2
 8001d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d24:	4313      	orrs	r3, r2
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d32:	2b40      	cmp	r3, #64	; 0x40
 8001d34:	d04f      	beq.n	8001dd6 <HAL_ADC_Init+0x466>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001d48:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6912      	ldr	r2, [r2, #16]
 8001d4e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001d52:	d003      	beq.n	8001d5c <HAL_ADC_Init+0x3ec>
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6912      	ldr	r2, [r2, #16]
 8001d58:	2a01      	cmp	r2, #1
 8001d5a:	d102      	bne.n	8001d62 <HAL_ADC_Init+0x3f2>
 8001d5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d60:	e000      	b.n	8001d64 <HAL_ADC_Init+0x3f4>
 8001d62:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001d64:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d125      	bne.n	8001dc2 <HAL_ADC_Init+0x452>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d114      	bne.n	8001daa <HAL_ADC_Init+0x43a>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	3b01      	subs	r3, #1
 8001d86:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001d8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	fa92 f2a2 	rbit	r2, r2
 8001d92:	617a      	str	r2, [r7, #20]
  return result;
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	fab2 f282 	clz	r2, r2
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	4093      	lsls	r3, r2
 8001d9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001da4:	4313      	orrs	r3, r2
 8001da6:	633b      	str	r3, [r7, #48]	; 0x30
 8001da8:	e00b      	b.n	8001dc2 <HAL_ADC_Init+0x452>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dae:	f043 0220 	orr.w	r2, r3, #32
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dba:	f043 0201 	orr.w	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	4b38      	ldr	r3, [pc, #224]	; (8001eac <HAL_ADC_Init+0x53c>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001dd2:	430b      	orrs	r3, r1
 8001dd4:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	4b34      	ldr	r3, [pc, #208]	; (8001eb0 <HAL_ADC_Init+0x540>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001de6:	430b      	orrs	r3, r1
 8001de8:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001df2:	d003      	beq.n	8001dfc <HAL_ADC_Init+0x48c>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d119      	bne.n	8001e30 <HAL_ADC_Init+0x4c0>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001e10:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	fa92 f2a2 	rbit	r2, r2
 8001e18:	60fa      	str	r2, [r7, #12]
  return result;
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	fab2 f282 	clz	r2, r2
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	fa03 f202 	lsl.w	r2, r3, r2
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e2e:	e007      	b.n	8001e40 <HAL_ADC_Init+0x4d0>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001e3e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <HAL_ADC_Init+0x544>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d10b      	bne.n	8001e68 <HAL_ADC_Init+0x4f8>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5a:	f023 0303 	bic.w	r3, r3, #3
 8001e5e:	f043 0201 	orr.w	r2, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e66:	e014      	b.n	8001e92 <HAL_ADC_Init+0x522>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6c:	f023 0312 	bic.w	r3, r3, #18
 8001e70:	f043 0210 	orr.w	r2, r3, #16
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e7c:	f043 0201 	orr.w	r2, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001e8a:	e002      	b.n	8001e92 <HAL_ADC_Init+0x522>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3738      	adds	r7, #56	; 0x38
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	0800a120 	.word	0x0800a120
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40012700 	.word	0x40012700
 8001eac:	fcfc16ff 	.word	0xfcfc16ff
 8001eb0:	c0fff189 	.word	0xc0fff189
 8001eb4:	bf80fffe 	.word	0xbf80fffe

08001eb8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a94      	ldr	r2, [pc, #592]	; (8002120 <HAL_ADC_ConfigChannel+0x268>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d004      	beq.n	8001ede <HAL_ADC_ConfigChannel+0x26>
 8001ed4:	f240 7191 	movw	r1, #1937	; 0x791
 8001ed8:	4892      	ldr	r0, [pc, #584]	; (8002124 <HAL_ADC_ConfigChannel+0x26c>)
 8001eda:	f7ff f8fb 	bl	80010d4 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 8081 	beq.w	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d07c      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d078      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d074      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d070      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b05      	cmp	r3, #5
 8001f0e:	d06c      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b06      	cmp	r3, #6
 8001f16:	d068      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b07      	cmp	r3, #7
 8001f1e:	d064      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d060      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b09      	cmp	r3, #9
 8001f2e:	d05c      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b0a      	cmp	r3, #10
 8001f36:	d058      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b0b      	cmp	r3, #11
 8001f3e:	d054      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b0c      	cmp	r3, #12
 8001f46:	d050      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b0d      	cmp	r3, #13
 8001f4e:	d04c      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b0e      	cmp	r3, #14
 8001f56:	d048      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b0f      	cmp	r3, #15
 8001f5e:	d044      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b10      	cmp	r3, #16
 8001f66:	d040      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b11      	cmp	r3, #17
 8001f6e:	d03c      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b12      	cmp	r3, #18
 8001f76:	d038      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b13      	cmp	r3, #19
 8001f7e:	d034      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b14      	cmp	r3, #20
 8001f86:	d030      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b15      	cmp	r3, #21
 8001f8e:	d02c      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b16      	cmp	r3, #22
 8001f96:	d028      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b17      	cmp	r3, #23
 8001f9e:	d024      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b18      	cmp	r3, #24
 8001fa6:	d020      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b19      	cmp	r3, #25
 8001fae:	d01c      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b1a      	cmp	r3, #26
 8001fb6:	d018      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b1b      	cmp	r3, #27
 8001fbe:	d014      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b1c      	cmp	r3, #28
 8001fc6:	d010      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b1d      	cmp	r3, #29
 8001fce:	d00c      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b1e      	cmp	r3, #30
 8001fd6:	d008      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b1f      	cmp	r3, #31
 8001fde:	d004      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x132>
 8001fe0:	f240 7192 	movw	r1, #1938	; 0x792
 8001fe4:	484f      	ldr	r0, [pc, #316]	; (8002124 <HAL_ADC_ConfigChannel+0x26c>)
 8001fe6:	f7ff f875 	bl	80010d4 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d070      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d06c      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d068      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b04      	cmp	r3, #4
 8002008:	d064      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b05      	cmp	r3, #5
 8002010:	d060      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b06      	cmp	r3, #6
 8002018:	d05c      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b07      	cmp	r3, #7
 8002020:	d058      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b08      	cmp	r3, #8
 8002028:	d054      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b09      	cmp	r3, #9
 8002030:	d050      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b0a      	cmp	r3, #10
 8002038:	d04c      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b0b      	cmp	r3, #11
 8002040:	d048      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b0c      	cmp	r3, #12
 8002048:	d044      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b0d      	cmp	r3, #13
 8002050:	d040      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b0e      	cmp	r3, #14
 8002058:	d03c      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b0f      	cmp	r3, #15
 8002060:	d038      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b10      	cmp	r3, #16
 8002068:	d034      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b11      	cmp	r3, #17
 8002070:	d030      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b12      	cmp	r3, #18
 8002078:	d02c      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b13      	cmp	r3, #19
 8002080:	d028      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b14      	cmp	r3, #20
 8002088:	d024      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b15      	cmp	r3, #21
 8002090:	d020      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b16      	cmp	r3, #22
 8002098:	d01c      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b17      	cmp	r3, #23
 80020a0:	d018      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b18      	cmp	r3, #24
 80020a8:	d014      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b19      	cmp	r3, #25
 80020b0:	d010      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b1a      	cmp	r3, #26
 80020b8:	d00c      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b1b      	cmp	r3, #27
 80020c0:	d008      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b1c      	cmp	r3, #28
 80020c8:	d004      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x21c>
 80020ca:	f240 7193 	movw	r1, #1939	; 0x793
 80020ce:	4815      	ldr	r0, [pc, #84]	; (8002124 <HAL_ADC_ConfigChannel+0x26c>)
 80020d0:	f7ff f800 	bl	80010d4 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d025      	beq.n	8002128 <HAL_ADC_ConfigChannel+0x270>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d021      	beq.n	8002128 <HAL_ADC_ConfigChannel+0x270>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d01d      	beq.n	8002128 <HAL_ADC_ConfigChannel+0x270>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d019      	beq.n	8002128 <HAL_ADC_ConfigChannel+0x270>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d015      	beq.n	8002128 <HAL_ADC_ConfigChannel+0x270>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b05      	cmp	r3, #5
 8002102:	d011      	beq.n	8002128 <HAL_ADC_ConfigChannel+0x270>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2b06      	cmp	r3, #6
 800210a:	d00d      	beq.n	8002128 <HAL_ADC_ConfigChannel+0x270>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2b07      	cmp	r3, #7
 8002112:	d009      	beq.n	8002128 <HAL_ADC_ConfigChannel+0x270>
 8002114:	f240 7194 	movw	r1, #1940	; 0x794
 8002118:	4802      	ldr	r0, [pc, #8]	; (8002124 <HAL_ADC_ConfigChannel+0x26c>)
 800211a:	f7fe ffdb 	bl	80010d4 <assert_failed>
 800211e:	e003      	b.n	8002128 <HAL_ADC_ConfigChannel+0x270>
 8002120:	40012400 	.word	0x40012400
 8002124:	0800a120 	.word	0x0800a120
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x27e>
 8002132:	2302      	movs	r3, #2
 8002134:	e14f      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x51e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b06      	cmp	r3, #6
 8002144:	d81c      	bhi.n	8002180 <HAL_ADC_ConfigChannel+0x2c8>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	3b05      	subs	r3, #5
 8002158:	221f      	movs	r2, #31
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	4019      	ands	r1, r3
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	3b05      	subs	r3, #5
 8002172:	fa00 f203 	lsl.w	r2, r0, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	641a      	str	r2, [r3, #64]	; 0x40
 800217e:	e07e      	b.n	800227e <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b0c      	cmp	r3, #12
 8002186:	d81c      	bhi.n	80021c2 <HAL_ADC_ConfigChannel+0x30a>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	3b23      	subs	r3, #35	; 0x23
 800219a:	221f      	movs	r2, #31
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	4019      	ands	r1, r3
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	3b23      	subs	r3, #35	; 0x23
 80021b4:	fa00 f203 	lsl.w	r2, r0, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	63da      	str	r2, [r3, #60]	; 0x3c
 80021c0:	e05d      	b.n	800227e <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b12      	cmp	r3, #18
 80021c8:	d81c      	bhi.n	8002204 <HAL_ADC_ConfigChannel+0x34c>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	3b41      	subs	r3, #65	; 0x41
 80021dc:	221f      	movs	r2, #31
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	4019      	ands	r1, r3
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	3b41      	subs	r3, #65	; 0x41
 80021f6:	fa00 f203 	lsl.w	r2, r0, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	639a      	str	r2, [r3, #56]	; 0x38
 8002202:	e03c      	b.n	800227e <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b18      	cmp	r3, #24
 800220a:	d81c      	bhi.n	8002246 <HAL_ADC_ConfigChannel+0x38e>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	3b5f      	subs	r3, #95	; 0x5f
 800221e:	221f      	movs	r2, #31
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	4019      	ands	r1, r3
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	3b5f      	subs	r3, #95	; 0x5f
 8002238:	fa00 f203 	lsl.w	r2, r0, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	635a      	str	r2, [r3, #52]	; 0x34
 8002244:	e01b      	b.n	800227e <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	3b7d      	subs	r3, #125	; 0x7d
 8002258:	221f      	movs	r2, #31
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	4019      	ands	r1, r3
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	3b7d      	subs	r3, #125	; 0x7d
 8002272:	fa00 f203 	lsl.w	r2, r0, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2b09      	cmp	r3, #9
 8002284:	d81a      	bhi.n	80022bc <HAL_ADC_ConfigChannel+0x404>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6959      	ldr	r1, [r3, #20]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4613      	mov	r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4413      	add	r3, r2
 8002296:	2207      	movs	r2, #7
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	4019      	ands	r1, r3
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	6898      	ldr	r0, [r3, #8]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4613      	mov	r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4413      	add	r3, r2
 80022ae:	fa00 f203 	lsl.w	r2, r0, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	615a      	str	r2, [r3, #20]
 80022ba:	e05d      	b.n	8002378 <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b13      	cmp	r3, #19
 80022c2:	d81c      	bhi.n	80022fe <HAL_ADC_ConfigChannel+0x446>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6919      	ldr	r1, [r3, #16]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	4613      	mov	r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	4413      	add	r3, r2
 80022d4:	3b1e      	subs	r3, #30
 80022d6:	2207      	movs	r2, #7
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	4019      	ands	r1, r3
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	6898      	ldr	r0, [r3, #8]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4613      	mov	r3, r2
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	4413      	add	r3, r2
 80022ee:	3b1e      	subs	r3, #30
 80022f0:	fa00 f203 	lsl.w	r2, r0, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	611a      	str	r2, [r3, #16]
 80022fc:	e03c      	b.n	8002378 <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b1d      	cmp	r3, #29
 8002304:	d81c      	bhi.n	8002340 <HAL_ADC_ConfigChannel+0x488>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68d9      	ldr	r1, [r3, #12]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4613      	mov	r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4413      	add	r3, r2
 8002316:	3b3c      	subs	r3, #60	; 0x3c
 8002318:	2207      	movs	r2, #7
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	4019      	ands	r1, r3
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6898      	ldr	r0, [r3, #8]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	3b3c      	subs	r3, #60	; 0x3c
 8002332:	fa00 f203 	lsl.w	r2, r0, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	e01b      	b.n	8002378 <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	4613      	mov	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4413      	add	r3, r2
 8002350:	3b5a      	subs	r3, #90	; 0x5a
 8002352:	2207      	movs	r2, #7
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	4019      	ands	r1, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	6898      	ldr	r0, [r3, #8]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4613      	mov	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	3b5a      	subs	r3, #90	; 0x5a
 800236c:	fa00 f203 	lsl.w	r2, r0, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b10      	cmp	r3, #16
 800237e:	d003      	beq.n	8002388 <HAL_ADC_ConfigChannel+0x4d0>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002384:	2b11      	cmp	r3, #17
 8002386:	d121      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x514>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002388:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <HAL_ADC_ConfigChannel+0x528>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d11b      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x514>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002394:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <HAL_ADC_ConfigChannel+0x528>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4a11      	ldr	r2, [pc, #68]	; (80023e0 <HAL_ADC_ConfigChannel+0x528>)
 800239a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800239e:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b10      	cmp	r3, #16
 80023a6:	d111      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x514>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80023a8:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <HAL_ADC_ConfigChannel+0x52c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a0e      	ldr	r2, [pc, #56]	; (80023e8 <HAL_ADC_ConfigChannel+0x530>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	0c9a      	lsrs	r2, r3, #18
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80023be:	e002      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x50e>
          {
            wait_loop_index--;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1f9      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x508>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40012700 	.word	0x40012700
 80023e4:	20000000 	.word	0x20000000
 80023e8:	431bde83 	.word	0x431bde83

080023ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <__NVIC_SetPriorityGrouping+0x44>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002408:	4013      	ands	r3, r2
 800240a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002414:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800241c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800241e:	4a04      	ldr	r2, [pc, #16]	; (8002430 <__NVIC_SetPriorityGrouping+0x44>)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	60d3      	str	r3, [r2, #12]
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002438:	4b04      	ldr	r3, [pc, #16]	; (800244c <__NVIC_GetPriorityGrouping+0x18>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	0a1b      	lsrs	r3, r3, #8
 800243e:	f003 0307 	and.w	r3, r3, #7
}
 8002442:	4618      	mov	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	2b00      	cmp	r3, #0
 8002460:	db0b      	blt.n	800247a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	f003 021f 	and.w	r2, r3, #31
 8002468:	4906      	ldr	r1, [pc, #24]	; (8002484 <__NVIC_EnableIRQ+0x34>)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	2001      	movs	r0, #1
 8002472:	fa00 f202 	lsl.w	r2, r0, r2
 8002476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr
 8002484:	e000e100 	.word	0xe000e100

08002488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	6039      	str	r1, [r7, #0]
 8002492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002498:	2b00      	cmp	r3, #0
 800249a:	db0a      	blt.n	80024b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	490c      	ldr	r1, [pc, #48]	; (80024d4 <__NVIC_SetPriority+0x4c>)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	0112      	lsls	r2, r2, #4
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	440b      	add	r3, r1
 80024ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024b0:	e00a      	b.n	80024c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	4908      	ldr	r1, [pc, #32]	; (80024d8 <__NVIC_SetPriority+0x50>)
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	3b04      	subs	r3, #4
 80024c0:	0112      	lsls	r2, r2, #4
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	440b      	add	r3, r1
 80024c6:	761a      	strb	r2, [r3, #24]
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	e000e100 	.word	0xe000e100
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	; 0x24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f1c3 0307 	rsb	r3, r3, #7
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	bf28      	it	cs
 80024fa:	2304      	movcs	r3, #4
 80024fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3304      	adds	r3, #4
 8002502:	2b06      	cmp	r3, #6
 8002504:	d902      	bls.n	800250c <NVIC_EncodePriority+0x30>
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3b03      	subs	r3, #3
 800250a:	e000      	b.n	800250e <NVIC_EncodePriority+0x32>
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002510:	f04f 32ff 	mov.w	r2, #4294967295
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43da      	mvns	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	401a      	ands	r2, r3
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002524:	f04f 31ff 	mov.w	r1, #4294967295
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	43d9      	mvns	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002534:	4313      	orrs	r3, r2
         );
}
 8002536:	4618      	mov	r0, r3
 8002538:	3724      	adds	r7, #36	; 0x24
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr

08002540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b07      	cmp	r3, #7
 800254c:	d00f      	beq.n	800256e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b06      	cmp	r3, #6
 8002552:	d00c      	beq.n	800256e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b05      	cmp	r3, #5
 8002558:	d009      	beq.n	800256e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b04      	cmp	r3, #4
 800255e:	d006      	beq.n	800256e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b03      	cmp	r3, #3
 8002564:	d003      	beq.n	800256e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002566:	21ac      	movs	r1, #172	; 0xac
 8002568:	4804      	ldr	r0, [pc, #16]	; (800257c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800256a:	f7fe fdb3 	bl	80010d4 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff ff3c 	bl	80023ec <__NVIC_SetPriorityGrouping>
}
 8002574:	bf00      	nop
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	0800a158 	.word	0x0800a158

08002580 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b0f      	cmp	r3, #15
 8002596:	d903      	bls.n	80025a0 <HAL_NVIC_SetPriority+0x20>
 8002598:	21c4      	movs	r1, #196	; 0xc4
 800259a:	480e      	ldr	r0, [pc, #56]	; (80025d4 <HAL_NVIC_SetPriority+0x54>)
 800259c:	f7fe fd9a 	bl	80010d4 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b0f      	cmp	r3, #15
 80025a4:	d903      	bls.n	80025ae <HAL_NVIC_SetPriority+0x2e>
 80025a6:	21c5      	movs	r1, #197	; 0xc5
 80025a8:	480a      	ldr	r0, [pc, #40]	; (80025d4 <HAL_NVIC_SetPriority+0x54>)
 80025aa:	f7fe fd93 	bl	80010d4 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025ae:	f7ff ff41 	bl	8002434 <__NVIC_GetPriorityGrouping>
 80025b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	68b9      	ldr	r1, [r7, #8]
 80025b8:	6978      	ldr	r0, [r7, #20]
 80025ba:	f7ff ff8f 	bl	80024dc <NVIC_EncodePriority>
 80025be:	4602      	mov	r2, r0
 80025c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c4:	4611      	mov	r1, r2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff ff5e 	bl	8002488 <__NVIC_SetPriority>
}
 80025cc:	bf00      	nop
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	0800a158 	.word	0x0800a158

080025d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	da03      	bge.n	80025f2 <HAL_NVIC_EnableIRQ+0x1a>
 80025ea:	21d8      	movs	r1, #216	; 0xd8
 80025ec:	4805      	ldr	r0, [pc, #20]	; (8002604 <HAL_NVIC_EnableIRQ+0x2c>)
 80025ee:	f7fe fd71 	bl	80010d4 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff ff2a 	bl	8002450 <__NVIC_EnableIRQ>
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	0800a158 	.word	0x0800a158

08002608 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e109      	b.n	800282e <HAL_DMA_Init+0x226>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a86      	ldr	r2, [pc, #536]	; (8002838 <HAL_DMA_Init+0x230>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d03a      	beq.n	800269a <HAL_DMA_Init+0x92>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a84      	ldr	r2, [pc, #528]	; (800283c <HAL_DMA_Init+0x234>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d035      	beq.n	800269a <HAL_DMA_Init+0x92>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a83      	ldr	r2, [pc, #524]	; (8002840 <HAL_DMA_Init+0x238>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d030      	beq.n	800269a <HAL_DMA_Init+0x92>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a81      	ldr	r2, [pc, #516]	; (8002844 <HAL_DMA_Init+0x23c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d02b      	beq.n	800269a <HAL_DMA_Init+0x92>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a80      	ldr	r2, [pc, #512]	; (8002848 <HAL_DMA_Init+0x240>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d026      	beq.n	800269a <HAL_DMA_Init+0x92>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a7e      	ldr	r2, [pc, #504]	; (800284c <HAL_DMA_Init+0x244>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d021      	beq.n	800269a <HAL_DMA_Init+0x92>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a7d      	ldr	r2, [pc, #500]	; (8002850 <HAL_DMA_Init+0x248>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d01c      	beq.n	800269a <HAL_DMA_Init+0x92>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a7b      	ldr	r2, [pc, #492]	; (8002854 <HAL_DMA_Init+0x24c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d017      	beq.n	800269a <HAL_DMA_Init+0x92>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a7a      	ldr	r2, [pc, #488]	; (8002858 <HAL_DMA_Init+0x250>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d012      	beq.n	800269a <HAL_DMA_Init+0x92>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a78      	ldr	r2, [pc, #480]	; (800285c <HAL_DMA_Init+0x254>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00d      	beq.n	800269a <HAL_DMA_Init+0x92>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a77      	ldr	r2, [pc, #476]	; (8002860 <HAL_DMA_Init+0x258>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d008      	beq.n	800269a <HAL_DMA_Init+0x92>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a75      	ldr	r2, [pc, #468]	; (8002864 <HAL_DMA_Init+0x25c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d003      	beq.n	800269a <HAL_DMA_Init+0x92>
 8002692:	219a      	movs	r1, #154	; 0x9a
 8002694:	4874      	ldr	r0, [pc, #464]	; (8002868 <HAL_DMA_Init+0x260>)
 8002696:	f7fe fd1d 	bl	80010d4 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00c      	beq.n	80026bc <HAL_DMA_Init+0xb4>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b10      	cmp	r3, #16
 80026a8:	d008      	beq.n	80026bc <HAL_DMA_Init+0xb4>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026b2:	d003      	beq.n	80026bc <HAL_DMA_Init+0xb4>
 80026b4:	219b      	movs	r1, #155	; 0x9b
 80026b6:	486c      	ldr	r0, [pc, #432]	; (8002868 <HAL_DMA_Init+0x260>)
 80026b8:	f7fe fd0c 	bl	80010d4 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2b40      	cmp	r3, #64	; 0x40
 80026c2:	d007      	beq.n	80026d4 <HAL_DMA_Init+0xcc>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_DMA_Init+0xcc>
 80026cc:	219c      	movs	r1, #156	; 0x9c
 80026ce:	4866      	ldr	r0, [pc, #408]	; (8002868 <HAL_DMA_Init+0x260>)
 80026d0:	f7fe fd00 	bl	80010d4 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	2b80      	cmp	r3, #128	; 0x80
 80026da:	d007      	beq.n	80026ec <HAL_DMA_Init+0xe4>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_DMA_Init+0xe4>
 80026e4:	219d      	movs	r1, #157	; 0x9d
 80026e6:	4860      	ldr	r0, [pc, #384]	; (8002868 <HAL_DMA_Init+0x260>)
 80026e8:	f7fe fcf4 	bl	80010d4 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00d      	beq.n	8002710 <HAL_DMA_Init+0x108>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026fc:	d008      	beq.n	8002710 <HAL_DMA_Init+0x108>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002706:	d003      	beq.n	8002710 <HAL_DMA_Init+0x108>
 8002708:	219e      	movs	r1, #158	; 0x9e
 800270a:	4857      	ldr	r0, [pc, #348]	; (8002868 <HAL_DMA_Init+0x260>)
 800270c:	f7fe fce2 	bl	80010d4 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00d      	beq.n	8002734 <HAL_DMA_Init+0x12c>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002720:	d008      	beq.n	8002734 <HAL_DMA_Init+0x12c>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800272a:	d003      	beq.n	8002734 <HAL_DMA_Init+0x12c>
 800272c:	219f      	movs	r1, #159	; 0x9f
 800272e:	484e      	ldr	r0, [pc, #312]	; (8002868 <HAL_DMA_Init+0x260>)
 8002730:	f7fe fcd0 	bl	80010d4 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d007      	beq.n	800274c <HAL_DMA_Init+0x144>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	2b20      	cmp	r3, #32
 8002742:	d003      	beq.n	800274c <HAL_DMA_Init+0x144>
 8002744:	21a0      	movs	r1, #160	; 0xa0
 8002746:	4848      	ldr	r0, [pc, #288]	; (8002868 <HAL_DMA_Init+0x260>)
 8002748:	f7fe fcc4 	bl	80010d4 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d012      	beq.n	800277a <HAL_DMA_Init+0x172>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800275c:	d00d      	beq.n	800277a <HAL_DMA_Init+0x172>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002766:	d008      	beq.n	800277a <HAL_DMA_Init+0x172>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002770:	d003      	beq.n	800277a <HAL_DMA_Init+0x172>
 8002772:	21a1      	movs	r1, #161	; 0xa1
 8002774:	483c      	ldr	r0, [pc, #240]	; (8002868 <HAL_DMA_Init+0x260>)
 8002776:	f7fe fcad 	bl	80010d4 <assert_failed>

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	4b3a      	ldr	r3, [pc, #232]	; (800286c <HAL_DMA_Init+0x264>)
 8002782:	429a      	cmp	r2, r3
 8002784:	d80f      	bhi.n	80027a6 <HAL_DMA_Init+0x19e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	4b38      	ldr	r3, [pc, #224]	; (8002870 <HAL_DMA_Init+0x268>)
 800278e:	4413      	add	r3, r2
 8002790:	4a38      	ldr	r2, [pc, #224]	; (8002874 <HAL_DMA_Init+0x26c>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	091b      	lsrs	r3, r3, #4
 8002798:	009a      	lsls	r2, r3, #2
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a35      	ldr	r2, [pc, #212]	; (8002878 <HAL_DMA_Init+0x270>)
 80027a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80027a4:	e00e      	b.n	80027c4 <HAL_DMA_Init+0x1bc>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	461a      	mov	r2, r3
 80027ac:	4b33      	ldr	r3, [pc, #204]	; (800287c <HAL_DMA_Init+0x274>)
 80027ae:	4413      	add	r3, r2
 80027b0:	4a30      	ldr	r2, [pc, #192]	; (8002874 <HAL_DMA_Init+0x26c>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	091b      	lsrs	r3, r3, #4
 80027b8:	009a      	lsls	r2, r3, #2
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a2f      	ldr	r2, [pc, #188]	; (8002880 <HAL_DMA_Init+0x278>)
 80027c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80027da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80027e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002800:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	4313      	orrs	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40026008 	.word	0x40026008
 800283c:	4002601c 	.word	0x4002601c
 8002840:	40026030 	.word	0x40026030
 8002844:	40026044 	.word	0x40026044
 8002848:	40026058 	.word	0x40026058
 800284c:	4002606c 	.word	0x4002606c
 8002850:	40026080 	.word	0x40026080
 8002854:	40026408 	.word	0x40026408
 8002858:	4002641c 	.word	0x4002641c
 800285c:	40026430 	.word	0x40026430
 8002860:	40026444 	.word	0x40026444
 8002864:	40026458 	.word	0x40026458
 8002868:	0800a194 	.word	0x0800a194
 800286c:	40026407 	.word	0x40026407
 8002870:	bffd9ff8 	.word	0xbffd9ff8
 8002874:	cccccccd 	.word	0xcccccccd
 8002878:	40026000 	.word	0x40026000
 800287c:	bffd9bf8 	.word	0xbffd9bf8
 8002880:	40026400 	.word	0x40026400

08002884 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <HAL_DMA_Start_IT+0x20>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a2:	d304      	bcc.n	80028ae <HAL_DMA_Start_IT+0x2a>
 80028a4:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 80028a8:	482c      	ldr	r0, [pc, #176]	; (800295c <HAL_DMA_Start_IT+0xd8>)
 80028aa:	f7fe fc13 	bl	80010d4 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d101      	bne.n	80028bc <HAL_DMA_Start_IT+0x38>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e04b      	b.n	8002954 <HAL_DMA_Start_IT+0xd0>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d13a      	bne.n	8002946 <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0201 	bic.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	68b9      	ldr	r1, [r7, #8]
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f8e2 	bl	8002abe <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d008      	beq.n	8002914 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f042 020e 	orr.w	r2, r2, #14
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	e00f      	b.n	8002934 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0204 	bic.w	r2, r2, #4
 8002922:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 020a 	orr.w	r2, r2, #10
 8002932:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	e005      	b.n	8002952 <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800294e:	2302      	movs	r3, #2
 8002950:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002952:	7dfb      	ldrb	r3, [r7, #23]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	0800a194 	.word	0x0800a194

08002960 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	f003 031c 	and.w	r3, r3, #28
 8002980:	2204      	movs	r2, #4
 8002982:	409a      	lsls	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4013      	ands	r3, r2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d026      	beq.n	80029da <HAL_DMA_IRQHandler+0x7a>
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	2b00      	cmp	r3, #0
 8002994:	d021      	beq.n	80029da <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0320 	and.w	r3, r3, #32
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d107      	bne.n	80029b4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0204 	bic.w	r2, r2, #4
 80029b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	f003 021c 	and.w	r2, r3, #28
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c0:	2104      	movs	r1, #4
 80029c2:	fa01 f202 	lsl.w	r2, r1, r2
 80029c6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d071      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80029d8:	e06c      	b.n	8002ab4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f003 031c 	and.w	r3, r3, #28
 80029e2:	2202      	movs	r2, #2
 80029e4:	409a      	lsls	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d02e      	beq.n	8002a4c <HAL_DMA_IRQHandler+0xec>
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d029      	beq.n	8002a4c <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0320 	and.w	r3, r3, #32
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10b      	bne.n	8002a1e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 020a 	bic.w	r2, r2, #10
 8002a14:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	f003 021c 	and.w	r2, r3, #28
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2a:	2102      	movs	r1, #2
 8002a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a30:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d038      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a4a:	e033      	b.n	8002ab4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	f003 031c 	and.w	r3, r3, #28
 8002a54:	2208      	movs	r2, #8
 8002a56:	409a      	lsls	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d02a      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x156>
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d025      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 020e 	bic.w	r2, r2, #14
 8002a78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f003 021c 	and.w	r2, r3, #28
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a86:	2101      	movs	r1, #1
 8002a88:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d004      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop
}
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b085      	sub	sp, #20
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	f003 021c 	and.w	r2, r3, #28
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad8:	2101      	movs	r1, #1
 8002ada:	fa01 f202 	lsl.w	r2, r1, r2
 8002ade:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b10      	cmp	r3, #16
 8002aee:	d108      	bne.n	8002b02 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b00:	e007      	b.n	8002b12 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	60da      	str	r2, [r3, #12]
}
 8002b12:	bf00      	nop
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a3f      	ldr	r2, [pc, #252]	; (8002c34 <HAL_GPIO_Init+0x118>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d01f      	beq.n	8002b7a <HAL_GPIO_Init+0x5e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a3e      	ldr	r2, [pc, #248]	; (8002c38 <HAL_GPIO_Init+0x11c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d01b      	beq.n	8002b7a <HAL_GPIO_Init+0x5e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a3d      	ldr	r2, [pc, #244]	; (8002c3c <HAL_GPIO_Init+0x120>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d017      	beq.n	8002b7a <HAL_GPIO_Init+0x5e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a3c      	ldr	r2, [pc, #240]	; (8002c40 <HAL_GPIO_Init+0x124>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d013      	beq.n	8002b7a <HAL_GPIO_Init+0x5e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a3b      	ldr	r2, [pc, #236]	; (8002c44 <HAL_GPIO_Init+0x128>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d00f      	beq.n	8002b7a <HAL_GPIO_Init+0x5e>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a3a      	ldr	r2, [pc, #232]	; (8002c48 <HAL_GPIO_Init+0x12c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00b      	beq.n	8002b7a <HAL_GPIO_Init+0x5e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a39      	ldr	r2, [pc, #228]	; (8002c4c <HAL_GPIO_Init+0x130>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d007      	beq.n	8002b7a <HAL_GPIO_Init+0x5e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a38      	ldr	r2, [pc, #224]	; (8002c50 <HAL_GPIO_Init+0x134>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d003      	beq.n	8002b7a <HAL_GPIO_Init+0x5e>
 8002b72:	21b9      	movs	r1, #185	; 0xb9
 8002b74:	4837      	ldr	r0, [pc, #220]	; (8002c54 <HAL_GPIO_Init+0x138>)
 8002b76:	f7fe faad 	bl	80010d4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_GPIO_Init+0x74>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	0c1b      	lsrs	r3, r3, #16
 8002b8a:	041b      	lsls	r3, r3, #16
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_GPIO_Init+0x7c>
 8002b90:	21ba      	movs	r1, #186	; 0xba
 8002b92:	4830      	ldr	r0, [pc, #192]	; (8002c54 <HAL_GPIO_Init+0x138>)
 8002b94:	f7fe fa9e 	bl	80010d4 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d035      	beq.n	8002c0c <HAL_GPIO_Init+0xf0>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d031      	beq.n	8002c0c <HAL_GPIO_Init+0xf0>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b11      	cmp	r3, #17
 8002bae:	d02d      	beq.n	8002c0c <HAL_GPIO_Init+0xf0>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d029      	beq.n	8002c0c <HAL_GPIO_Init+0xf0>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b12      	cmp	r3, #18
 8002bbe:	d025      	beq.n	8002c0c <HAL_GPIO_Init+0xf0>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	4a24      	ldr	r2, [pc, #144]	; (8002c58 <HAL_GPIO_Init+0x13c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d020      	beq.n	8002c0c <HAL_GPIO_Init+0xf0>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4a23      	ldr	r2, [pc, #140]	; (8002c5c <HAL_GPIO_Init+0x140>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d01b      	beq.n	8002c0c <HAL_GPIO_Init+0xf0>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	4a21      	ldr	r2, [pc, #132]	; (8002c60 <HAL_GPIO_Init+0x144>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d016      	beq.n	8002c0c <HAL_GPIO_Init+0xf0>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4a20      	ldr	r2, [pc, #128]	; (8002c64 <HAL_GPIO_Init+0x148>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d011      	beq.n	8002c0c <HAL_GPIO_Init+0xf0>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	4a1e      	ldr	r2, [pc, #120]	; (8002c68 <HAL_GPIO_Init+0x14c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00c      	beq.n	8002c0c <HAL_GPIO_Init+0xf0>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4a1d      	ldr	r2, [pc, #116]	; (8002c6c <HAL_GPIO_Init+0x150>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d007      	beq.n	8002c0c <HAL_GPIO_Init+0xf0>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d003      	beq.n	8002c0c <HAL_GPIO_Init+0xf0>
 8002c04:	21bb      	movs	r1, #187	; 0xbb
 8002c06:	4813      	ldr	r0, [pc, #76]	; (8002c54 <HAL_GPIO_Init+0x138>)
 8002c08:	f7fe fa64 	bl	80010d4 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 81e4 	beq.w	8002fde <HAL_GPIO_Init+0x4c2>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	f000 81df 	beq.w	8002fde <HAL_GPIO_Init+0x4c2>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	f000 81da 	beq.w	8002fde <HAL_GPIO_Init+0x4c2>
 8002c2a:	21bc      	movs	r1, #188	; 0xbc
 8002c2c:	4809      	ldr	r0, [pc, #36]	; (8002c54 <HAL_GPIO_Init+0x138>)
 8002c2e:	f7fe fa51 	bl	80010d4 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002c32:	e1d4      	b.n	8002fde <HAL_GPIO_Init+0x4c2>
 8002c34:	40020000 	.word	0x40020000
 8002c38:	40020400 	.word	0x40020400
 8002c3c:	40020800 	.word	0x40020800
 8002c40:	40020c00 	.word	0x40020c00
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40021800 	.word	0x40021800
 8002c4c:	40021c00 	.word	0x40021c00
 8002c50:	40021400 	.word	0x40021400
 8002c54:	0800a1cc 	.word	0x0800a1cc
 8002c58:	10110000 	.word	0x10110000
 8002c5c:	10210000 	.word	0x10210000
 8002c60:	10310000 	.word	0x10310000
 8002c64:	10120000 	.word	0x10120000
 8002c68:	10220000 	.word	0x10220000
 8002c6c:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	2101      	movs	r1, #1
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 81a8 	beq.w	8002fd8 <HAL_GPIO_Init+0x4bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x17c>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b12      	cmp	r3, #18
 8002c96:	d14f      	bne.n	8002d38 <HAL_GPIO_Init+0x21c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a92      	ldr	r2, [pc, #584]	; (8002ee4 <HAL_GPIO_Init+0x3c8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d01f      	beq.n	8002ce0 <HAL_GPIO_Init+0x1c4>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a91      	ldr	r2, [pc, #580]	; (8002ee8 <HAL_GPIO_Init+0x3cc>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d01b      	beq.n	8002ce0 <HAL_GPIO_Init+0x1c4>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a90      	ldr	r2, [pc, #576]	; (8002eec <HAL_GPIO_Init+0x3d0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d017      	beq.n	8002ce0 <HAL_GPIO_Init+0x1c4>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a8f      	ldr	r2, [pc, #572]	; (8002ef0 <HAL_GPIO_Init+0x3d4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d013      	beq.n	8002ce0 <HAL_GPIO_Init+0x1c4>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a8e      	ldr	r2, [pc, #568]	; (8002ef4 <HAL_GPIO_Init+0x3d8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00f      	beq.n	8002ce0 <HAL_GPIO_Init+0x1c4>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a8d      	ldr	r2, [pc, #564]	; (8002ef8 <HAL_GPIO_Init+0x3dc>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d00b      	beq.n	8002ce0 <HAL_GPIO_Init+0x1c4>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a8c      	ldr	r2, [pc, #560]	; (8002efc <HAL_GPIO_Init+0x3e0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d007      	beq.n	8002ce0 <HAL_GPIO_Init+0x1c4>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a8b      	ldr	r2, [pc, #556]	; (8002f00 <HAL_GPIO_Init+0x3e4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x1c4>
 8002cd8:	21cb      	movs	r1, #203	; 0xcb
 8002cda:	488a      	ldr	r0, [pc, #552]	; (8002f04 <HAL_GPIO_Init+0x3e8>)
 8002cdc:	f7fe f9fa 	bl	80010d4 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	2b0f      	cmp	r3, #15
 8002ce6:	d903      	bls.n	8002cf0 <HAL_GPIO_Init+0x1d4>
 8002ce8:	21cc      	movs	r1, #204	; 0xcc
 8002cea:	4886      	ldr	r0, [pc, #536]	; (8002f04 <HAL_GPIO_Init+0x3e8>)
 8002cec:	f7fe f9f2 	bl	80010d4 <assert_failed>
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	08da      	lsrs	r2, r3, #3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3208      	adds	r2, #8
 8002cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cfc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	220f      	movs	r2, #15
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	08da      	lsrs	r2, r3, #3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3208      	adds	r2, #8
 8002d32:	6939      	ldr	r1, [r7, #16]
 8002d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	2203      	movs	r2, #3
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 0203 	and.w	r2, r3, #3
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d00b      	beq.n	8002d8c <HAL_GPIO_Init+0x270>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d007      	beq.n	8002d8c <HAL_GPIO_Init+0x270>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d80:	2b11      	cmp	r3, #17
 8002d82:	d003      	beq.n	8002d8c <HAL_GPIO_Init+0x270>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b12      	cmp	r3, #18
 8002d8a:	d144      	bne.n	8002e16 <HAL_GPIO_Init+0x2fa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00f      	beq.n	8002db4 <HAL_GPIO_Init+0x298>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d00b      	beq.n	8002db4 <HAL_GPIO_Init+0x298>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d007      	beq.n	8002db4 <HAL_GPIO_Init+0x298>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d003      	beq.n	8002db4 <HAL_GPIO_Init+0x298>
 8002dac:	21e1      	movs	r1, #225	; 0xe1
 8002dae:	4855      	ldr	r0, [pc, #340]	; (8002f04 <HAL_GPIO_Init+0x3e8>)
 8002db0:	f7fe f990 	bl	80010d4 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002dea:	2201      	movs	r2, #1
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43db      	mvns	r3, r3
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4013      	ands	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	091b      	lsrs	r3, r3, #4
 8002e00:	f003 0201 	and.w	r2, r3, #1
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	2203      	movs	r2, #3
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43db      	mvns	r3, r3
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 80c2 	beq.w	8002fd8 <HAL_GPIO_Init+0x4bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e54:	4b2c      	ldr	r3, [pc, #176]	; (8002f08 <HAL_GPIO_Init+0x3ec>)
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	4a2b      	ldr	r2, [pc, #172]	; (8002f08 <HAL_GPIO_Init+0x3ec>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	6213      	str	r3, [r2, #32]
 8002e60:	4b29      	ldr	r3, [pc, #164]	; (8002f08 <HAL_GPIO_Init+0x3ec>)
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8002e6c:	4a27      	ldr	r2, [pc, #156]	; (8002f0c <HAL_GPIO_Init+0x3f0>)
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	089b      	lsrs	r3, r3, #2
 8002e72:	3302      	adds	r3, #2
 8002e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f003 0303 	and.w	r3, r3, #3
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	220f      	movs	r2, #15
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a14      	ldr	r2, [pc, #80]	; (8002ee4 <HAL_GPIO_Init+0x3c8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d03b      	beq.n	8002f10 <HAL_GPIO_Init+0x3f4>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a13      	ldr	r2, [pc, #76]	; (8002ee8 <HAL_GPIO_Init+0x3cc>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d01f      	beq.n	8002ee0 <HAL_GPIO_Init+0x3c4>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a12      	ldr	r2, [pc, #72]	; (8002eec <HAL_GPIO_Init+0x3d0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d019      	beq.n	8002edc <HAL_GPIO_Init+0x3c0>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a11      	ldr	r2, [pc, #68]	; (8002ef0 <HAL_GPIO_Init+0x3d4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d013      	beq.n	8002ed8 <HAL_GPIO_Init+0x3bc>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a10      	ldr	r2, [pc, #64]	; (8002ef4 <HAL_GPIO_Init+0x3d8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00d      	beq.n	8002ed4 <HAL_GPIO_Init+0x3b8>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a11      	ldr	r2, [pc, #68]	; (8002f00 <HAL_GPIO_Init+0x3e4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d007      	beq.n	8002ed0 <HAL_GPIO_Init+0x3b4>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a0d      	ldr	r2, [pc, #52]	; (8002ef8 <HAL_GPIO_Init+0x3dc>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d101      	bne.n	8002ecc <HAL_GPIO_Init+0x3b0>
 8002ec8:	2306      	movs	r3, #6
 8002eca:	e022      	b.n	8002f12 <HAL_GPIO_Init+0x3f6>
 8002ecc:	2307      	movs	r3, #7
 8002ece:	e020      	b.n	8002f12 <HAL_GPIO_Init+0x3f6>
 8002ed0:	2305      	movs	r3, #5
 8002ed2:	e01e      	b.n	8002f12 <HAL_GPIO_Init+0x3f6>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	e01c      	b.n	8002f12 <HAL_GPIO_Init+0x3f6>
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e01a      	b.n	8002f12 <HAL_GPIO_Init+0x3f6>
 8002edc:	2302      	movs	r3, #2
 8002ede:	e018      	b.n	8002f12 <HAL_GPIO_Init+0x3f6>
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e016      	b.n	8002f12 <HAL_GPIO_Init+0x3f6>
 8002ee4:	40020000 	.word	0x40020000
 8002ee8:	40020400 	.word	0x40020400
 8002eec:	40020800 	.word	0x40020800
 8002ef0:	40020c00 	.word	0x40020c00
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40021800 	.word	0x40021800
 8002efc:	40021c00 	.word	0x40021c00
 8002f00:	40021400 	.word	0x40021400
 8002f04:	0800a1cc 	.word	0x0800a1cc
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	40010000 	.word	0x40010000
 8002f10:	2300      	movs	r3, #0
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	f002 0203 	and.w	r2, r2, #3
 8002f18:	0092      	lsls	r2, r2, #2
 8002f1a:	4093      	lsls	r3, r2
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f22:	4935      	ldr	r1, [pc, #212]	; (8002ff8 <HAL_GPIO_Init+0x4dc>)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	089b      	lsrs	r3, r3, #2
 8002f28:	3302      	adds	r3, #2
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f30:	4b32      	ldr	r3, [pc, #200]	; (8002ffc <HAL_GPIO_Init+0x4e0>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <HAL_GPIO_Init+0x438>
        {
          SET_BIT(temp, iocurrent); 
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f54:	4a29      	ldr	r2, [pc, #164]	; (8002ffc <HAL_GPIO_Init+0x4e0>)
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f5a:	4b28      	ldr	r3, [pc, #160]	; (8002ffc <HAL_GPIO_Init+0x4e0>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	43db      	mvns	r3, r3
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4013      	ands	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_GPIO_Init+0x462>
        {
          SET_BIT(temp, iocurrent); 
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f7e:	4a1f      	ldr	r2, [pc, #124]	; (8002ffc <HAL_GPIO_Init+0x4e0>)
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f84:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <HAL_GPIO_Init+0x4e0>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4013      	ands	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_GPIO_Init+0x48c>
        {
          SET_BIT(temp, iocurrent); 
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002fa8:	4a14      	ldr	r2, [pc, #80]	; (8002ffc <HAL_GPIO_Init+0x4e0>)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fae:	4b13      	ldr	r3, [pc, #76]	; (8002ffc <HAL_GPIO_Init+0x4e0>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_Init+0x4b6>
        {
          SET_BIT(temp, iocurrent); 
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002fd2:	4a0a      	ldr	r2, [pc, #40]	; (8002ffc <HAL_GPIO_Init+0x4e0>)
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f47f ae41 	bne.w	8002c70 <HAL_GPIO_Init+0x154>
  } 
}
 8002fee:	bf00      	nop
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40010000 	.word	0x40010000
 8002ffc:	40010400 	.word	0x40010400

08003000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	807b      	strh	r3, [r7, #2]
 800300c:	4613      	mov	r3, r2
 800300e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003010:	887b      	ldrh	r3, [r7, #2]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d004      	beq.n	8003020 <HAL_GPIO_WritePin+0x20>
 8003016:	887b      	ldrh	r3, [r7, #2]
 8003018:	0c1b      	lsrs	r3, r3, #16
 800301a:	041b      	lsls	r3, r3, #16
 800301c:	2b00      	cmp	r3, #0
 800301e:	d004      	beq.n	800302a <HAL_GPIO_WritePin+0x2a>
 8003020:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8003024:	480e      	ldr	r0, [pc, #56]	; (8003060 <HAL_GPIO_WritePin+0x60>)
 8003026:	f7fe f855 	bl	80010d4 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800302a:	787b      	ldrb	r3, [r7, #1]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d007      	beq.n	8003040 <HAL_GPIO_WritePin+0x40>
 8003030:	787b      	ldrb	r3, [r7, #1]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d004      	beq.n	8003040 <HAL_GPIO_WritePin+0x40>
 8003036:	f240 11a5 	movw	r1, #421	; 0x1a5
 800303a:	4809      	ldr	r0, [pc, #36]	; (8003060 <HAL_GPIO_WritePin+0x60>)
 800303c:	f7fe f84a 	bl	80010d4 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003040:	787b      	ldrb	r3, [r7, #1]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003046:	887a      	ldrh	r2, [r7, #2]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800304c:	e003      	b.n	8003056 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800304e:	887b      	ldrh	r3, [r7, #2]
 8003050:	041a      	lsls	r2, r3, #16
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	619a      	str	r2, [r3, #24]
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	0800a1cc 	.word	0x0800a1cc

08003064 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800306e:	4b08      	ldr	r3, [pc, #32]	; (8003090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	88fb      	ldrh	r3, [r7, #6]
 8003074:	4013      	ands	r3, r2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d006      	beq.n	8003088 <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800307a:	4a05      	ldr	r2, [pc, #20]	; (8003090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800307c:	88fb      	ldrh	r3, [r7, #6]
 800307e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003080:	88fb      	ldrh	r3, [r7, #6]
 8003082:	4618      	mov	r0, r3
 8003084:	f7fd fc1e 	bl	80008c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40010400 	.word	0x40010400

08003094 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e19b      	b.n	80033de <HAL_I2C_Init+0x34a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a98      	ldr	r2, [pc, #608]	; (800330c <HAL_I2C_Init+0x278>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d009      	beq.n	80030c4 <HAL_I2C_Init+0x30>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a96      	ldr	r2, [pc, #600]	; (8003310 <HAL_I2C_Init+0x27c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d004      	beq.n	80030c4 <HAL_I2C_Init+0x30>
 80030ba:	f240 11bb 	movw	r1, #443	; 0x1bb
 80030be:	4895      	ldr	r0, [pc, #596]	; (8003314 <HAL_I2C_Init+0x280>)
 80030c0:	f7fe f808 	bl	80010d4 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d004      	beq.n	80030d6 <HAL_I2C_Init+0x42>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	4a91      	ldr	r2, [pc, #580]	; (8003318 <HAL_I2C_Init+0x284>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d904      	bls.n	80030e0 <HAL_I2C_Init+0x4c>
 80030d6:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80030da:	488e      	ldr	r0, [pc, #568]	; (8003314 <HAL_I2C_Init+0x280>)
 80030dc:	f7fd fffa 	bl	80010d4 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d009      	beq.n	80030fc <HAL_I2C_Init+0x68>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030f0:	d004      	beq.n	80030fc <HAL_I2C_Init+0x68>
 80030f2:	f240 11bd 	movw	r1, #445	; 0x1bd
 80030f6:	4887      	ldr	r0, [pc, #540]	; (8003314 <HAL_I2C_Init+0x280>)
 80030f8:	f7fd ffec 	bl	80010d4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003104:	f023 0303 	bic.w	r3, r3, #3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d004      	beq.n	8003116 <HAL_I2C_Init+0x82>
 800310c:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8003110:	4880      	ldr	r0, [pc, #512]	; (8003314 <HAL_I2C_Init+0x280>)
 8003112:	f7fd ffdf 	bl	80010d4 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800311e:	d009      	beq.n	8003134 <HAL_I2C_Init+0xa0>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003128:	d004      	beq.n	8003134 <HAL_I2C_Init+0xa0>
 800312a:	f240 11bf 	movw	r1, #447	; 0x1bf
 800312e:	4879      	ldr	r0, [pc, #484]	; (8003314 <HAL_I2C_Init+0x280>)
 8003130:	f7fd ffd0 	bl	80010d4 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_I2C_Init+0xba>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d004      	beq.n	800314e <HAL_I2C_Init+0xba>
 8003144:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8003148:	4872      	ldr	r0, [pc, #456]	; (8003314 <HAL_I2C_Init+0x280>)
 800314a:	f7fd ffc3 	bl	80010d4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003156:	2b00      	cmp	r3, #0
 8003158:	d004      	beq.n	8003164 <HAL_I2C_Init+0xd0>
 800315a:	f240 11c1 	movw	r1, #449	; 0x1c1
 800315e:	486d      	ldr	r0, [pc, #436]	; (8003314 <HAL_I2C_Init+0x280>)
 8003160:	f7fd ffb8 	bl	80010d4 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d008      	beq.n	800317e <HAL_I2C_Init+0xea>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	2b40      	cmp	r3, #64	; 0x40
 8003172:	d004      	beq.n	800317e <HAL_I2C_Init+0xea>
 8003174:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8003178:	4866      	ldr	r0, [pc, #408]	; (8003314 <HAL_I2C_Init+0x280>)
 800317a:	f7fd ffab 	bl	80010d4 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d008      	beq.n	8003198 <HAL_I2C_Init+0x104>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	2b80      	cmp	r3, #128	; 0x80
 800318c:	d004      	beq.n	8003198 <HAL_I2C_Init+0x104>
 800318e:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003192:	4860      	ldr	r0, [pc, #384]	; (8003314 <HAL_I2C_Init+0x280>)
 8003194:	f7fd ff9e 	bl	80010d4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d106      	bne.n	80031b2 <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7fd fec3 	bl	8000f38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2224      	movs	r2, #36	; 0x24
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0201 	bic.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031ca:	f001 fdfd 	bl	8004dc8 <HAL_RCC_GetPCLK1Freq>
 80031ce:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	4a51      	ldr	r2, [pc, #324]	; (800331c <HAL_I2C_Init+0x288>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d807      	bhi.n	80031ea <HAL_I2C_Init+0x156>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4a50      	ldr	r2, [pc, #320]	; (8003320 <HAL_I2C_Init+0x28c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	bf94      	ite	ls
 80031e2:	2301      	movls	r3, #1
 80031e4:	2300      	movhi	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	e006      	b.n	80031f8 <HAL_I2C_Init+0x164>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4a4d      	ldr	r2, [pc, #308]	; (8003324 <HAL_I2C_Init+0x290>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	bf94      	ite	ls
 80031f2:	2301      	movls	r3, #1
 80031f4:	2300      	movhi	r3, #0
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_I2C_Init+0x16c>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0ee      	b.n	80033de <HAL_I2C_Init+0x34a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4a49      	ldr	r2, [pc, #292]	; (8003328 <HAL_I2C_Init+0x294>)
 8003204:	fba2 2303 	umull	r2, r3, r2, r3
 8003208:	0c9b      	lsrs	r3, r3, #18
 800320a:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	430a      	orrs	r2, r1
 800321e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	4a3b      	ldr	r2, [pc, #236]	; (800331c <HAL_I2C_Init+0x288>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d802      	bhi.n	800323a <HAL_I2C_Init+0x1a6>
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	3301      	adds	r3, #1
 8003238:	e009      	b.n	800324e <HAL_I2C_Init+0x1ba>
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003240:	fb02 f303 	mul.w	r3, r2, r3
 8003244:	4a39      	ldr	r2, [pc, #228]	; (800332c <HAL_I2C_Init+0x298>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	099b      	lsrs	r3, r3, #6
 800324c:	3301      	adds	r3, #1
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	430b      	orrs	r3, r1
 8003254:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003260:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	492c      	ldr	r1, [pc, #176]	; (800331c <HAL_I2C_Init+0x288>)
 800326a:	428b      	cmp	r3, r1
 800326c:	d80d      	bhi.n	800328a <HAL_I2C_Init+0x1f6>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1e59      	subs	r1, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	fbb1 f3f3 	udiv	r3, r1, r3
 800327c:	3301      	adds	r3, #1
 800327e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003282:	2b04      	cmp	r3, #4
 8003284:	bf38      	it	cc
 8003286:	2304      	movcc	r3, #4
 8003288:	e062      	b.n	8003350 <HAL_I2C_Init+0x2bc>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d111      	bne.n	80032b6 <HAL_I2C_Init+0x222>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1e58      	subs	r0, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6859      	ldr	r1, [r3, #4]
 800329a:	460b      	mov	r3, r1
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	440b      	add	r3, r1
 80032a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a4:	3301      	adds	r3, #1
 80032a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	bf0c      	ite	eq
 80032ae:	2301      	moveq	r3, #1
 80032b0:	2300      	movne	r3, #0
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	e012      	b.n	80032dc <HAL_I2C_Init+0x248>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	1e58      	subs	r0, r3, #1
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6859      	ldr	r1, [r3, #4]
 80032be:	460b      	mov	r3, r1
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	0099      	lsls	r1, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80032cc:	3301      	adds	r3, #1
 80032ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	bf0c      	ite	eq
 80032d6:	2301      	moveq	r3, #1
 80032d8:	2300      	movne	r3, #0
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <HAL_I2C_Init+0x250>
 80032e0:	2301      	movs	r3, #1
 80032e2:	e035      	b.n	8003350 <HAL_I2C_Init+0x2bc>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d121      	bne.n	8003330 <HAL_I2C_Init+0x29c>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1e58      	subs	r0, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6859      	ldr	r1, [r3, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	440b      	add	r3, r1
 80032fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80032fe:	3301      	adds	r3, #1
 8003300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003308:	e022      	b.n	8003350 <HAL_I2C_Init+0x2bc>
 800330a:	bf00      	nop
 800330c:	40005400 	.word	0x40005400
 8003310:	40005800 	.word	0x40005800
 8003314:	0800a208 	.word	0x0800a208
 8003318:	00061a80 	.word	0x00061a80
 800331c:	000186a0 	.word	0x000186a0
 8003320:	001e847f 	.word	0x001e847f
 8003324:	003d08ff 	.word	0x003d08ff
 8003328:	431bde83 	.word	0x431bde83
 800332c:	10624dd3 	.word	0x10624dd3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	1e58      	subs	r0, r3, #1
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6859      	ldr	r1, [r3, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	0099      	lsls	r1, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	fbb0 f3f3 	udiv	r3, r0, r3
 8003346:	3301      	adds	r3, #1
 8003348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800334c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	6809      	ldr	r1, [r1, #0]
 8003354:	4313      	orrs	r3, r2
 8003356:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69da      	ldr	r2, [r3, #28]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800337e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6911      	ldr	r1, [r2, #16]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	68d2      	ldr	r2, [r2, #12]
 800338a:	4311      	orrs	r1, r2
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6812      	ldr	r2, [r2, #0]
 8003390:	430b      	orrs	r3, r1
 8003392:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695a      	ldr	r2, [r3, #20]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop

080033e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	607a      	str	r2, [r7, #4]
 80033f2:	461a      	mov	r2, r3
 80033f4:	460b      	mov	r3, r1
 80033f6:	817b      	strh	r3, [r7, #10]
 80033f8:	4613      	mov	r3, r2
 80033fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033fc:	f7fe faae 	bl	800195c <HAL_GetTick>
 8003400:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b20      	cmp	r3, #32
 800340c:	f040 80e0 	bne.w	80035d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	2319      	movs	r3, #25
 8003416:	2201      	movs	r2, #1
 8003418:	4970      	ldr	r1, [pc, #448]	; (80035dc <HAL_I2C_Master_Transmit+0x1f4>)
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 fc5a 	bl	8003cd4 <I2C_WaitOnFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003426:	2302      	movs	r3, #2
 8003428:	e0d3      	b.n	80035d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003430:	2b01      	cmp	r3, #1
 8003432:	d101      	bne.n	8003438 <HAL_I2C_Master_Transmit+0x50>
 8003434:	2302      	movs	r3, #2
 8003436:	e0cc      	b.n	80035d2 <HAL_I2C_Master_Transmit+0x1ea>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b01      	cmp	r3, #1
 800344c:	d007      	beq.n	800345e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f042 0201 	orr.w	r2, r2, #1
 800345c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800346c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2221      	movs	r2, #33	; 0x21
 8003472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2210      	movs	r2, #16
 800347a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	893a      	ldrh	r2, [r7, #8]
 800348e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4a50      	ldr	r2, [pc, #320]	; (80035e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800349e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034a0:	8979      	ldrh	r1, [r7, #10]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	6a3a      	ldr	r2, [r7, #32]
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 face 	bl	8003a48 <I2C_MasterRequestWrite>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e08d      	b.n	80035d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b6:	2300      	movs	r3, #0
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80034cc:	e066      	b.n	800359c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	6a39      	ldr	r1, [r7, #32]
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 fcd4 	bl	8003e80 <I2C_WaitOnTXEFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00d      	beq.n	80034fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d107      	bne.n	80034f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e06b      	b.n	80035d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	781a      	ldrb	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b04      	cmp	r3, #4
 8003536:	d11b      	bne.n	8003570 <HAL_I2C_Master_Transmit+0x188>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353c:	2b00      	cmp	r3, #0
 800353e:	d017      	beq.n	8003570 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	781a      	ldrb	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	6a39      	ldr	r1, [r7, #32]
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 fcc4 	bl	8003f02 <I2C_WaitOnBTFFlagUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00d      	beq.n	800359c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	2b04      	cmp	r3, #4
 8003586:	d107      	bne.n	8003598 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003596:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e01a      	b.n	80035d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d194      	bne.n	80034ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	e000      	b.n	80035d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80035d0:	2302      	movs	r3, #2
  }
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	00100002 	.word	0x00100002
 80035e0:	ffff0000 	.word	0xffff0000

080035e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08c      	sub	sp, #48	; 0x30
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	4608      	mov	r0, r1
 80035ee:	4611      	mov	r1, r2
 80035f0:	461a      	mov	r2, r3
 80035f2:	4603      	mov	r3, r0
 80035f4:	817b      	strh	r3, [r7, #10]
 80035f6:	460b      	mov	r3, r1
 80035f8:	813b      	strh	r3, [r7, #8]
 80035fa:	4613      	mov	r3, r2
 80035fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035fe:	f7fe f9ad 	bl	800195c <HAL_GetTick>
 8003602:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d007      	beq.n	800361a <HAL_I2C_Mem_Read+0x36>
 800360a:	88fb      	ldrh	r3, [r7, #6]
 800360c:	2b10      	cmp	r3, #16
 800360e:	d004      	beq.n	800361a <HAL_I2C_Mem_Read+0x36>
 8003610:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8003614:	4881      	ldr	r0, [pc, #516]	; (800381c <HAL_I2C_Mem_Read+0x238>)
 8003616:	f7fd fd5d 	bl	80010d4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b20      	cmp	r3, #32
 8003624:	f040 8209 	bne.w	8003a3a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	2319      	movs	r3, #25
 800362e:	2201      	movs	r2, #1
 8003630:	497b      	ldr	r1, [pc, #492]	; (8003820 <HAL_I2C_Mem_Read+0x23c>)
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 fb4e 	bl	8003cd4 <I2C_WaitOnFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 800363e:	2302      	movs	r3, #2
 8003640:	e1fc      	b.n	8003a3c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_I2C_Mem_Read+0x6c>
 800364c:	2302      	movs	r3, #2
 800364e:	e1f5      	b.n	8003a3c <HAL_I2C_Mem_Read+0x458>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b01      	cmp	r3, #1
 8003664:	d007      	beq.n	8003676 <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f042 0201 	orr.w	r2, r2, #1
 8003674:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003684:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2222      	movs	r2, #34	; 0x22
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2240      	movs	r2, #64	; 0x40
 8003692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80036a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4a5b      	ldr	r2, [pc, #364]	; (8003824 <HAL_I2C_Mem_Read+0x240>)
 80036b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036b8:	88f8      	ldrh	r0, [r7, #6]
 80036ba:	893a      	ldrh	r2, [r7, #8]
 80036bc:	8979      	ldrh	r1, [r7, #10]
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	4603      	mov	r3, r0
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 fa33 	bl	8003b34 <I2C_RequestMemoryRead>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e1b1      	b.n	8003a3c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d113      	bne.n	8003708 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e0:	2300      	movs	r3, #0
 80036e2:	623b      	str	r3, [r7, #32]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	623b      	str	r3, [r7, #32]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	623b      	str	r3, [r7, #32]
 80036f4:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	e185      	b.n	8003a14 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370c:	2b01      	cmp	r3, #1
 800370e:	d11b      	bne.n	8003748 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371e:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003720:	2300      	movs	r3, #0
 8003722:	61fb      	str	r3, [r7, #28]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	61fb      	str	r3, [r7, #28]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	61fb      	str	r3, [r7, #28]
 8003734:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	e165      	b.n	8003a14 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374c:	2b02      	cmp	r3, #2
 800374e:	d11b      	bne.n	8003788 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800375e:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800376e:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003770:	2300      	movs	r3, #0
 8003772:	61bb      	str	r3, [r7, #24]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	61bb      	str	r3, [r7, #24]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	61bb      	str	r3, [r7, #24]
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	e145      	b.n	8003a14 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800379e:	e139      	b.n	8003a14 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	f200 80f2 	bhi.w	800398e <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d123      	bne.n	80037fa <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 fbe4 	bl	8003f84 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e13a      	b.n	8003a3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037f8:	e10c      	b.n	8003a14 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d14f      	bne.n	80038a2 <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003808:	2200      	movs	r2, #0
 800380a:	4907      	ldr	r1, [pc, #28]	; (8003828 <HAL_I2C_Mem_Read+0x244>)
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 fa61 	bl	8003cd4 <I2C_WaitOnFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d009      	beq.n	800382c <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e10f      	b.n	8003a3c <HAL_I2C_Mem_Read+0x458>
 800381c:	0800a208 	.word	0x0800a208
 8003820:	00100002 	.word	0x00100002
 8003824:	ffff0000 	.word	0xffff0000
 8003828:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800383a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038a0:	e0b8      	b.n	8003a14 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a8:	2200      	movs	r2, #0
 80038aa:	4966      	ldr	r1, [pc, #408]	; (8003a44 <HAL_I2C_Mem_Read+0x460>)
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 fa11 	bl	8003cd4 <I2C_WaitOnFlagUntilTimeout>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0bf      	b.n	8003a3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691a      	ldr	r2, [r3, #16]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003904:	2200      	movs	r2, #0
 8003906:	494f      	ldr	r1, [pc, #316]	; (8003a44 <HAL_I2C_Mem_Read+0x460>)
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 f9e3 	bl	8003cd4 <I2C_WaitOnFlagUntilTimeout>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e091      	b.n	8003a3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003926:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691a      	ldr	r2, [r3, #16]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800398c:	e042      	b.n	8003a14 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800398e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003990:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 faf6 	bl	8003f84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e04c      	b.n	8003a3c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d118      	bne.n	8003a14 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	691a      	ldr	r2, [r3, #16]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f47f aec1 	bne.w	80037a0 <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	e000      	b.n	8003a3c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003a3a:	2302      	movs	r3, #2
  }
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3728      	adds	r7, #40	; 0x28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	00010004 	.word	0x00010004

08003a48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	460b      	mov	r3, r1
 8003a56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d006      	beq.n	8003a72 <I2C_MasterRequestWrite+0x2a>
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d003      	beq.n	8003a72 <I2C_MasterRequestWrite+0x2a>
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a70:	d108      	bne.n	8003a84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	e00b      	b.n	8003a9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	2b12      	cmp	r3, #18
 8003a8a:	d107      	bne.n	8003a9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 f913 	bl	8003cd4 <I2C_WaitOnFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e035      	b.n	8003b24 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ac0:	d108      	bne.n	8003ad4 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ac2:	897b      	ldrh	r3, [r7, #10]
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ad0:	611a      	str	r2, [r3, #16]
 8003ad2:	e01b      	b.n	8003b0c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ad4:	897b      	ldrh	r3, [r7, #10]
 8003ad6:	11db      	asrs	r3, r3, #7
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	f003 0306 	and.w	r3, r3, #6
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	f063 030f 	orn	r3, r3, #15
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	490e      	ldr	r1, [pc, #56]	; (8003b2c <I2C_MasterRequestWrite+0xe4>)
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f945 	bl	8003d82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e010      	b.n	8003b24 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b02:	897b      	ldrh	r3, [r7, #10]
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	4907      	ldr	r1, [pc, #28]	; (8003b30 <I2C_MasterRequestWrite+0xe8>)
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 f935 	bl	8003d82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	00010008 	.word	0x00010008
 8003b30:	00010002 	.word	0x00010002

08003b34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	4608      	mov	r0, r1
 8003b3e:	4611      	mov	r1, r2
 8003b40:	461a      	mov	r2, r3
 8003b42:	4603      	mov	r3, r0
 8003b44:	817b      	strh	r3, [r7, #10]
 8003b46:	460b      	mov	r3, r1
 8003b48:	813b      	strh	r3, [r7, #8]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 f8aa 	bl	8003cd4 <I2C_WaitOnFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e09e      	b.n	8003cc8 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b8a:	897b      	ldrh	r3, [r7, #10]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	461a      	mov	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	6a3a      	ldr	r2, [r7, #32]
 8003b9e:	494c      	ldr	r1, [pc, #304]	; (8003cd0 <I2C_RequestMemoryRead+0x19c>)
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f8ee 	bl	8003d82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e08b      	b.n	8003cc8 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc8:	6a39      	ldr	r1, [r7, #32]
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 f958 	bl	8003e80 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00d      	beq.n	8003bf2 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d107      	bne.n	8003bee <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e06a      	b.n	8003cc8 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bf2:	88fb      	ldrh	r3, [r7, #6]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d105      	bne.n	8003c04 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bf8:	893b      	ldrh	r3, [r7, #8]
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	611a      	str	r2, [r3, #16]
 8003c02:	e021      	b.n	8003c48 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c04:	893b      	ldrh	r3, [r7, #8]
 8003c06:	0a1b      	lsrs	r3, r3, #8
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c14:	6a39      	ldr	r1, [r7, #32]
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 f932 	bl	8003e80 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00d      	beq.n	8003c3e <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d107      	bne.n	8003c3a <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e044      	b.n	8003cc8 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c3e:	893b      	ldrh	r3, [r7, #8]
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4a:	6a39      	ldr	r1, [r7, #32]
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 f917 	bl	8003e80 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00d      	beq.n	8003c74 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d107      	bne.n	8003c70 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e029      	b.n	8003cc8 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c82:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 f81f 	bl	8003cd4 <I2C_WaitOnFlagUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e013      	b.n	8003cc8 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ca0:	897b      	ldrh	r3, [r7, #10]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	6a3a      	ldr	r2, [r7, #32]
 8003cb4:	4906      	ldr	r1, [pc, #24]	; (8003cd0 <I2C_RequestMemoryRead+0x19c>)
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 f863 	bl	8003d82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	00010002 	.word	0x00010002

08003cd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	603b      	str	r3, [r7, #0]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ce4:	e025      	b.n	8003d32 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cec:	d021      	beq.n	8003d32 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cee:	f7fd fe35 	bl	800195c <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d302      	bcc.n	8003d04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d116      	bne.n	8003d32 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	f043 0220 	orr.w	r2, r3, #32
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e023      	b.n	8003d7a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	0c1b      	lsrs	r3, r3, #16
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d10d      	bne.n	8003d58 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	43da      	mvns	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4013      	ands	r3, r2
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	bf0c      	ite	eq
 8003d4e:	2301      	moveq	r3, #1
 8003d50:	2300      	movne	r3, #0
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	461a      	mov	r2, r3
 8003d56:	e00c      	b.n	8003d72 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	43da      	mvns	r2, r3
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	4013      	ands	r3, r2
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	bf0c      	ite	eq
 8003d6a:	2301      	moveq	r3, #1
 8003d6c:	2300      	movne	r3, #0
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	461a      	mov	r2, r3
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d0b6      	beq.n	8003ce6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	607a      	str	r2, [r7, #4]
 8003d8e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d90:	e051      	b.n	8003e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da0:	d123      	bne.n	8003dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	f043 0204 	orr.w	r2, r3, #4
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e046      	b.n	8003e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df0:	d021      	beq.n	8003e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df2:	f7fd fdb3 	bl	800195c <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d302      	bcc.n	8003e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d116      	bne.n	8003e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f043 0220 	orr.w	r2, r3, #32
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e020      	b.n	8003e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	0c1b      	lsrs	r3, r3, #16
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d10c      	bne.n	8003e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	43da      	mvns	r2, r3
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	bf14      	ite	ne
 8003e52:	2301      	movne	r3, #1
 8003e54:	2300      	moveq	r3, #0
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	e00b      	b.n	8003e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	43da      	mvns	r2, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	4013      	ands	r3, r2
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	bf14      	ite	ne
 8003e6c:	2301      	movne	r3, #1
 8003e6e:	2300      	moveq	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d18d      	bne.n	8003d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e8c:	e02d      	b.n	8003eea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f8ce 	bl	8004030 <I2C_IsAcknowledgeFailed>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e02d      	b.n	8003efa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea4:	d021      	beq.n	8003eea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea6:	f7fd fd59 	bl	800195c <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d302      	bcc.n	8003ebc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d116      	bne.n	8003eea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	f043 0220 	orr.w	r2, r3, #32
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e007      	b.n	8003efa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef4:	2b80      	cmp	r3, #128	; 0x80
 8003ef6:	d1ca      	bne.n	8003e8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b084      	sub	sp, #16
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f0e:	e02d      	b.n	8003f6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f88d 	bl	8004030 <I2C_IsAcknowledgeFailed>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e02d      	b.n	8003f7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f26:	d021      	beq.n	8003f6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f28:	f7fd fd18 	bl	800195c <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d302      	bcc.n	8003f3e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d116      	bne.n	8003f6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f58:	f043 0220 	orr.w	r2, r3, #32
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e007      	b.n	8003f7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d1ca      	bne.n	8003f10 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f90:	e042      	b.n	8004018 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	f003 0310 	and.w	r3, r3, #16
 8003f9c:	2b10      	cmp	r3, #16
 8003f9e:	d119      	bne.n	8003fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f06f 0210 	mvn.w	r2, #16
 8003fa8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e029      	b.n	8004028 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd4:	f7fd fcc2 	bl	800195c <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d302      	bcc.n	8003fea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d116      	bne.n	8004018 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	f043 0220 	orr.w	r2, r3, #32
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e007      	b.n	8004028 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004022:	2b40      	cmp	r3, #64	; 0x40
 8004024:	d1b5      	bne.n	8003f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004046:	d11b      	bne.n	8004080 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004050:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	f043 0204 	orr.w	r2, r3, #4
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr

0800408c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b088      	sub	sp, #32
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d102      	bne.n	80040a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	f000 bc6c 	b.w	8004978 <HAL_RCC_OscConfig+0x8ec>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d022      	beq.n	80040ee <HAL_RCC_OscConfig+0x62>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d11c      	bne.n	80040ee <HAL_RCC_OscConfig+0x62>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d116      	bne.n	80040ee <HAL_RCC_OscConfig+0x62>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d110      	bne.n	80040ee <HAL_RCC_OscConfig+0x62>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10a      	bne.n	80040ee <HAL_RCC_OscConfig+0x62>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0310 	and.w	r3, r3, #16
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d104      	bne.n	80040ee <HAL_RCC_OscConfig+0x62>
 80040e4:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80040e8:	4897      	ldr	r0, [pc, #604]	; (8004348 <HAL_RCC_OscConfig+0x2bc>)
 80040ea:	f7fc fff3 	bl	80010d4 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ee:	4b97      	ldr	r3, [pc, #604]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 030c 	and.w	r3, r3, #12
 80040f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040f8:	4b94      	ldr	r3, [pc, #592]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004100:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 808e 	beq.w	800422c <HAL_RCC_OscConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00c      	beq.n	8004132 <HAL_RCC_OscConfig+0xa6>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d008      	beq.n	8004132 <HAL_RCC_OscConfig+0xa6>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b05      	cmp	r3, #5
 8004126:	d004      	beq.n	8004132 <HAL_RCC_OscConfig+0xa6>
 8004128:	f240 1159 	movw	r1, #345	; 0x159
 800412c:	4886      	ldr	r0, [pc, #536]	; (8004348 <HAL_RCC_OscConfig+0x2bc>)
 800412e:	f7fc ffd1 	bl	80010d4 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	2b08      	cmp	r3, #8
 8004136:	d006      	beq.n	8004146 <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	2b0c      	cmp	r3, #12
 800413c:	d110      	bne.n	8004160 <HAL_RCC_OscConfig+0xd4>
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004144:	d10c      	bne.n	8004160 <HAL_RCC_OscConfig+0xd4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004146:	4b81      	ldr	r3, [pc, #516]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d06b      	beq.n	800422a <HAL_RCC_OscConfig+0x19e>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d167      	bne.n	800422a <HAL_RCC_OscConfig+0x19e>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	f000 bc0c 	b.w	8004978 <HAL_RCC_OscConfig+0x8ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d106      	bne.n	8004176 <HAL_RCC_OscConfig+0xea>
 8004168:	4b78      	ldr	r3, [pc, #480]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a77      	ldr	r2, [pc, #476]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 800416e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	e02d      	b.n	80041d2 <HAL_RCC_OscConfig+0x146>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10c      	bne.n	8004198 <HAL_RCC_OscConfig+0x10c>
 800417e:	4b73      	ldr	r3, [pc, #460]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a72      	ldr	r2, [pc, #456]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 8004184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	4b70      	ldr	r3, [pc, #448]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a6f      	ldr	r2, [pc, #444]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 8004190:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	e01c      	b.n	80041d2 <HAL_RCC_OscConfig+0x146>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b05      	cmp	r3, #5
 800419e:	d10c      	bne.n	80041ba <HAL_RCC_OscConfig+0x12e>
 80041a0:	4b6a      	ldr	r3, [pc, #424]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a69      	ldr	r2, [pc, #420]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 80041a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	4b67      	ldr	r3, [pc, #412]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a66      	ldr	r2, [pc, #408]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 80041b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	e00b      	b.n	80041d2 <HAL_RCC_OscConfig+0x146>
 80041ba:	4b64      	ldr	r3, [pc, #400]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a63      	ldr	r2, [pc, #396]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 80041c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	4b61      	ldr	r3, [pc, #388]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a60      	ldr	r2, [pc, #384]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 80041cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d013      	beq.n	8004202 <HAL_RCC_OscConfig+0x176>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041da:	f7fd fbbf 	bl	800195c <HAL_GetTick>
 80041de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041e0:	e008      	b.n	80041f4 <HAL_RCC_OscConfig+0x168>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041e2:	f7fd fbbb 	bl	800195c <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b64      	cmp	r3, #100	; 0x64
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x168>
          {
            return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e3c1      	b.n	8004978 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041f4:	4b55      	ldr	r3, [pc, #340]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0f0      	beq.n	80041e2 <HAL_RCC_OscConfig+0x156>
 8004200:	e014      	b.n	800422c <HAL_RCC_OscConfig+0x1a0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004202:	f7fd fbab 	bl	800195c <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x190>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800420a:	f7fd fba7 	bl	800195c <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b64      	cmp	r3, #100	; 0x64
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e3ad      	b.n	8004978 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800421c:	4b4b      	ldr	r3, [pc, #300]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1f0      	bne.n	800420a <HAL_RCC_OscConfig+0x17e>
 8004228:	e000      	b.n	800422c <HAL_RCC_OscConfig+0x1a0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800422a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d070      	beq.n	800431a <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <HAL_RCC_OscConfig+0x1c6>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d004      	beq.n	8004252 <HAL_RCC_OscConfig+0x1c6>
 8004248:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800424c:	483e      	ldr	r0, [pc, #248]	; (8004348 <HAL_RCC_OscConfig+0x2bc>)
 800424e:	f7fc ff41 	bl	80010d4 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	2b1f      	cmp	r3, #31
 8004258:	d904      	bls.n	8004264 <HAL_RCC_OscConfig+0x1d8>
 800425a:	f240 118d 	movw	r1, #397	; 0x18d
 800425e:	483a      	ldr	r0, [pc, #232]	; (8004348 <HAL_RCC_OscConfig+0x2bc>)
 8004260:	f7fc ff38 	bl	80010d4 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	2b04      	cmp	r3, #4
 8004268:	d005      	beq.n	8004276 <HAL_RCC_OscConfig+0x1ea>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	2b0c      	cmp	r3, #12
 800426e:	d119      	bne.n	80042a4 <HAL_RCC_OscConfig+0x218>
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d116      	bne.n	80042a4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004276:	4b35      	ldr	r3, [pc, #212]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d005      	beq.n	800428e <HAL_RCC_OscConfig+0x202>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d001      	beq.n	800428e <HAL_RCC_OscConfig+0x202>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e374      	b.n	8004978 <HAL_RCC_OscConfig+0x8ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800428e:	4b2f      	ldr	r3, [pc, #188]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	021b      	lsls	r3, r3, #8
 800429c:	492b      	ldr	r1, [pc, #172]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a2:	e03a      	b.n	800431a <HAL_RCC_OscConfig+0x28e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d020      	beq.n	80042ee <HAL_RCC_OscConfig+0x262>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042ac:	4b28      	ldr	r3, [pc, #160]	; (8004350 <HAL_RCC_OscConfig+0x2c4>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b2:	f7fd fb53 	bl	800195c <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x240>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ba:	f7fd fb4f 	bl	800195c <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x240>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e355      	b.n	8004978 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042cc:	4b1f      	ldr	r3, [pc, #124]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0f0      	beq.n	80042ba <HAL_RCC_OscConfig+0x22e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d8:	4b1c      	ldr	r3, [pc, #112]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	021b      	lsls	r3, r3, #8
 80042e6:	4919      	ldr	r1, [pc, #100]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	604b      	str	r3, [r1, #4]
 80042ec:	e015      	b.n	800431a <HAL_RCC_OscConfig+0x28e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ee:	4b18      	ldr	r3, [pc, #96]	; (8004350 <HAL_RCC_OscConfig+0x2c4>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f4:	f7fd fb32 	bl	800195c <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0x282>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042fc:	f7fd fb2e 	bl	800195c <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x282>
          {
            return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e334      	b.n	8004978 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800430e:	4b0f      	ldr	r3, [pc, #60]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f0      	bne.n	80042fc <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0310 	and.w	r3, r3, #16
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 8129 	beq.w	800457a <HAL_RCC_OscConfig+0x4ee>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	2b00      	cmp	r3, #0
 800432c:	f040 80a4 	bne.w	8004478 <HAL_RCC_OscConfig+0x3ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004330:	4b06      	ldr	r3, [pc, #24]	; (800434c <HAL_RCC_OscConfig+0x2c0>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00b      	beq.n	8004354 <HAL_RCC_OscConfig+0x2c8>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d107      	bne.n	8004354 <HAL_RCC_OscConfig+0x2c8>
      {
        return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e317      	b.n	8004978 <HAL_RCC_OscConfig+0x8ec>
 8004348:	0800a240 	.word	0x0800a240
 800434c:	40023800 	.word	0x40023800
 8004350:	42470000 	.word	0x42470000
      }
      /* Otherwise, just the calibration and MSI range change are allowed */
      else
      {
       /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	2bff      	cmp	r3, #255	; 0xff
 800435a:	d904      	bls.n	8004366 <HAL_RCC_OscConfig+0x2da>
 800435c:	f240 11d7 	movw	r1, #471	; 0x1d7
 8004360:	48a5      	ldr	r0, [pc, #660]	; (80045f8 <HAL_RCC_OscConfig+0x56c>)
 8004362:	f7fc feb7 	bl	80010d4 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d022      	beq.n	80043b4 <HAL_RCC_OscConfig+0x328>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004376:	d01d      	beq.n	80043b4 <HAL_RCC_OscConfig+0x328>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004380:	d018      	beq.n	80043b4 <HAL_RCC_OscConfig+0x328>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800438a:	d013      	beq.n	80043b4 <HAL_RCC_OscConfig+0x328>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004394:	d00e      	beq.n	80043b4 <HAL_RCC_OscConfig+0x328>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800439e:	d009      	beq.n	80043b4 <HAL_RCC_OscConfig+0x328>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80043a8:	d004      	beq.n	80043b4 <HAL_RCC_OscConfig+0x328>
 80043aa:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80043ae:	4892      	ldr	r0, [pc, #584]	; (80045f8 <HAL_RCC_OscConfig+0x56c>)
 80043b0:	f7fc fe90 	bl	80010d4 <assert_failed>

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1a      	ldr	r2, [r3, #32]
 80043b8:	4b90      	ldr	r3, [pc, #576]	; (80045fc <HAL_RCC_OscConfig+0x570>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d91d      	bls.n	8004400 <HAL_RCC_OscConfig+0x374>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 fd67 	bl	8004e9c <RCC_SetFlashLatencyFromMSIRange>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e2cf      	b.n	8004978 <HAL_RCC_OscConfig+0x8ec>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043d8:	4b88      	ldr	r3, [pc, #544]	; (80045fc <HAL_RCC_OscConfig+0x570>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	4985      	ldr	r1, [pc, #532]	; (80045fc <HAL_RCC_OscConfig+0x570>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043ea:	4b84      	ldr	r3, [pc, #528]	; (80045fc <HAL_RCC_OscConfig+0x570>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	061b      	lsls	r3, r3, #24
 80043f8:	4980      	ldr	r1, [pc, #512]	; (80045fc <HAL_RCC_OscConfig+0x570>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	604b      	str	r3, [r1, #4]
 80043fe:	e01c      	b.n	800443a <HAL_RCC_OscConfig+0x3ae>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004400:	4b7e      	ldr	r3, [pc, #504]	; (80045fc <HAL_RCC_OscConfig+0x570>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	497b      	ldr	r1, [pc, #492]	; (80045fc <HAL_RCC_OscConfig+0x570>)
 800440e:	4313      	orrs	r3, r2
 8004410:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004412:	4b7a      	ldr	r3, [pc, #488]	; (80045fc <HAL_RCC_OscConfig+0x570>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	061b      	lsls	r3, r3, #24
 8004420:	4976      	ldr	r1, [pc, #472]	; (80045fc <HAL_RCC_OscConfig+0x570>)
 8004422:	4313      	orrs	r3, r2
 8004424:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fd36 	bl	8004e9c <RCC_SetFlashLatencyFromMSIRange>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e29e      	b.n	8004978 <HAL_RCC_OscConfig+0x8ec>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	0b5b      	lsrs	r3, r3, #13
 8004440:	3301      	adds	r3, #1
 8004442:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800444a:	4a6c      	ldr	r2, [pc, #432]	; (80045fc <HAL_RCC_OscConfig+0x570>)
 800444c:	6892      	ldr	r2, [r2, #8]
 800444e:	0912      	lsrs	r2, r2, #4
 8004450:	f002 020f 	and.w	r2, r2, #15
 8004454:	496a      	ldr	r1, [pc, #424]	; (8004600 <HAL_RCC_OscConfig+0x574>)
 8004456:	5c8a      	ldrb	r2, [r1, r2]
 8004458:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800445a:	4a6a      	ldr	r2, [pc, #424]	; (8004604 <HAL_RCC_OscConfig+0x578>)
 800445c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800445e:	4b6a      	ldr	r3, [pc, #424]	; (8004608 <HAL_RCC_OscConfig+0x57c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f7fc fe74 	bl	8001150 <HAL_InitTick>
 8004468:	4603      	mov	r3, r0
 800446a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 8083 	beq.w	800457a <HAL_RCC_OscConfig+0x4ee>
        {
          return status;
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	e27f      	b.n	8004978 <HAL_RCC_OscConfig+0x8ec>
      }
    }
    else
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <HAL_RCC_OscConfig+0x406>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d004      	beq.n	8004492 <HAL_RCC_OscConfig+0x406>
 8004488:	f44f 7102 	mov.w	r1, #520	; 0x208
 800448c:	485a      	ldr	r0, [pc, #360]	; (80045f8 <HAL_RCC_OscConfig+0x56c>)
 800448e:	f7fc fe21 	bl	80010d4 <assert_failed>

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d059      	beq.n	800454e <HAL_RCC_OscConfig+0x4c2>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800449a:	4b5c      	ldr	r3, [pc, #368]	; (800460c <HAL_RCC_OscConfig+0x580>)
 800449c:	2201      	movs	r2, #1
 800449e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a0:	f7fd fa5c 	bl	800195c <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044a8:	f7fd fa58 	bl	800195c <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e25e      	b.n	8004978 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80044ba:	4b50      	ldr	r3, [pc, #320]	; (80045fc <HAL_RCC_OscConfig+0x570>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0f0      	beq.n	80044a8 <HAL_RCC_OscConfig+0x41c>
          }
        }
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	2bff      	cmp	r3, #255	; 0xff
 80044cc:	d904      	bls.n	80044d8 <HAL_RCC_OscConfig+0x44c>
 80044ce:	f44f 7107 	mov.w	r1, #540	; 0x21c
 80044d2:	4849      	ldr	r0, [pc, #292]	; (80045f8 <HAL_RCC_OscConfig+0x56c>)
 80044d4:	f7fc fdfe 	bl	80010d4 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d022      	beq.n	8004526 <HAL_RCC_OscConfig+0x49a>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044e8:	d01d      	beq.n	8004526 <HAL_RCC_OscConfig+0x49a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044f2:	d018      	beq.n	8004526 <HAL_RCC_OscConfig+0x49a>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80044fc:	d013      	beq.n	8004526 <HAL_RCC_OscConfig+0x49a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004506:	d00e      	beq.n	8004526 <HAL_RCC_OscConfig+0x49a>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004510:	d009      	beq.n	8004526 <HAL_RCC_OscConfig+0x49a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800451a:	d004      	beq.n	8004526 <HAL_RCC_OscConfig+0x49a>
 800451c:	f240 211d 	movw	r1, #541	; 0x21d
 8004520:	4835      	ldr	r0, [pc, #212]	; (80045f8 <HAL_RCC_OscConfig+0x56c>)
 8004522:	f7fc fdd7 	bl	80010d4 <assert_failed>

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004526:	4b35      	ldr	r3, [pc, #212]	; (80045fc <HAL_RCC_OscConfig+0x570>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	4932      	ldr	r1, [pc, #200]	; (80045fc <HAL_RCC_OscConfig+0x570>)
 8004534:	4313      	orrs	r3, r2
 8004536:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004538:	4b30      	ldr	r3, [pc, #192]	; (80045fc <HAL_RCC_OscConfig+0x570>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	061b      	lsls	r3, r3, #24
 8004546:	492d      	ldr	r1, [pc, #180]	; (80045fc <HAL_RCC_OscConfig+0x570>)
 8004548:	4313      	orrs	r3, r2
 800454a:	604b      	str	r3, [r1, #4]
 800454c:	e015      	b.n	800457a <HAL_RCC_OscConfig+0x4ee>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800454e:	4b2f      	ldr	r3, [pc, #188]	; (800460c <HAL_RCC_OscConfig+0x580>)
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004554:	f7fd fa02 	bl	800195c <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800455c:	f7fd f9fe 	bl	800195c <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x4e2>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e204      	b.n	8004978 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800456e:	4b23      	ldr	r3, [pc, #140]	; (80045fc <HAL_RCC_OscConfig+0x570>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b00      	cmp	r3, #0
 8004584:	d04c      	beq.n	8004620 <HAL_RCC_OscConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d008      	beq.n	80045a0 <HAL_RCC_OscConfig+0x514>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d004      	beq.n	80045a0 <HAL_RCC_OscConfig+0x514>
 8004596:	f44f 710f 	mov.w	r1, #572	; 0x23c
 800459a:	4817      	ldr	r0, [pc, #92]	; (80045f8 <HAL_RCC_OscConfig+0x56c>)
 800459c:	f7fc fd9a 	bl	80010d4 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d016      	beq.n	80045d6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045a8:	4b19      	ldr	r3, [pc, #100]	; (8004610 <HAL_RCC_OscConfig+0x584>)
 80045aa:	2201      	movs	r2, #1
 80045ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ae:	f7fd f9d5 	bl	800195c <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045b6:	f7fd f9d1 	bl	800195c <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e1d7      	b.n	8004978 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80045c8:	4b0c      	ldr	r3, [pc, #48]	; (80045fc <HAL_RCC_OscConfig+0x570>)
 80045ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0f0      	beq.n	80045b6 <HAL_RCC_OscConfig+0x52a>
 80045d4:	e024      	b.n	8004620 <HAL_RCC_OscConfig+0x594>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045d6:	4b0e      	ldr	r3, [pc, #56]	; (8004610 <HAL_RCC_OscConfig+0x584>)
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045dc:	f7fd f9be 	bl	800195c <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045e2:	e017      	b.n	8004614 <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045e4:	f7fd f9ba 	bl	800195c <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d910      	bls.n	8004614 <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e1c0      	b.n	8004978 <HAL_RCC_OscConfig+0x8ec>
 80045f6:	bf00      	nop
 80045f8:	0800a240 	.word	0x0800a240
 80045fc:	40023800 	.word	0x40023800
 8004600:	0800a414 	.word	0x0800a414
 8004604:	20000000 	.word	0x20000000
 8004608:	20000004 	.word	0x20000004
 800460c:	42470020 	.word	0x42470020
 8004610:	42470680 	.word	0x42470680
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004614:	4ba2      	ldr	r3, [pc, #648]	; (80048a0 <HAL_RCC_OscConfig+0x814>)
 8004616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1e1      	bne.n	80045e4 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 80b7 	beq.w	800479c <HAL_RCC_OscConfig+0x710>
  {
    FlagStatus       pwrclkchanged = RESET;
 800462e:	2300      	movs	r3, #0
 8004630:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00c      	beq.n	8004654 <HAL_RCC_OscConfig+0x5c8>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d008      	beq.n	8004654 <HAL_RCC_OscConfig+0x5c8>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	2b05      	cmp	r3, #5
 8004648:	d004      	beq.n	8004654 <HAL_RCC_OscConfig+0x5c8>
 800464a:	f44f 711a 	mov.w	r1, #616	; 0x268
 800464e:	4895      	ldr	r0, [pc, #596]	; (80048a4 <HAL_RCC_OscConfig+0x818>)
 8004650:	f7fc fd40 	bl	80010d4 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004654:	4b92      	ldr	r3, [pc, #584]	; (80048a0 <HAL_RCC_OscConfig+0x814>)
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10d      	bne.n	800467c <HAL_RCC_OscConfig+0x5f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004660:	4b8f      	ldr	r3, [pc, #572]	; (80048a0 <HAL_RCC_OscConfig+0x814>)
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	4a8e      	ldr	r2, [pc, #568]	; (80048a0 <HAL_RCC_OscConfig+0x814>)
 8004666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800466a:	6253      	str	r3, [r2, #36]	; 0x24
 800466c:	4b8c      	ldr	r3, [pc, #560]	; (80048a0 <HAL_RCC_OscConfig+0x814>)
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004674:	60bb      	str	r3, [r7, #8]
 8004676:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004678:	2301      	movs	r3, #1
 800467a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800467c:	4b8a      	ldr	r3, [pc, #552]	; (80048a8 <HAL_RCC_OscConfig+0x81c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004684:	2b00      	cmp	r3, #0
 8004686:	d118      	bne.n	80046ba <HAL_RCC_OscConfig+0x62e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004688:	4b87      	ldr	r3, [pc, #540]	; (80048a8 <HAL_RCC_OscConfig+0x81c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a86      	ldr	r2, [pc, #536]	; (80048a8 <HAL_RCC_OscConfig+0x81c>)
 800468e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004692:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004694:	f7fd f962 	bl	800195c <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x622>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800469c:	f7fd f95e 	bl	800195c <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b64      	cmp	r3, #100	; 0x64
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e164      	b.n	8004978 <HAL_RCC_OscConfig+0x8ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ae:	4b7e      	ldr	r3, [pc, #504]	; (80048a8 <HAL_RCC_OscConfig+0x81c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0f0      	beq.n	800469c <HAL_RCC_OscConfig+0x610>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d106      	bne.n	80046d0 <HAL_RCC_OscConfig+0x644>
 80046c2:	4b77      	ldr	r3, [pc, #476]	; (80048a0 <HAL_RCC_OscConfig+0x814>)
 80046c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c6:	4a76      	ldr	r2, [pc, #472]	; (80048a0 <HAL_RCC_OscConfig+0x814>)
 80046c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046cc:	6353      	str	r3, [r2, #52]	; 0x34
 80046ce:	e02d      	b.n	800472c <HAL_RCC_OscConfig+0x6a0>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10c      	bne.n	80046f2 <HAL_RCC_OscConfig+0x666>
 80046d8:	4b71      	ldr	r3, [pc, #452]	; (80048a0 <HAL_RCC_OscConfig+0x814>)
 80046da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046dc:	4a70      	ldr	r2, [pc, #448]	; (80048a0 <HAL_RCC_OscConfig+0x814>)
 80046de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046e2:	6353      	str	r3, [r2, #52]	; 0x34
 80046e4:	4b6e      	ldr	r3, [pc, #440]	; (80048a0 <HAL_RCC_OscConfig+0x814>)
 80046e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e8:	4a6d      	ldr	r2, [pc, #436]	; (80048a0 <HAL_RCC_OscConfig+0x814>)
 80046ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046ee:	6353      	str	r3, [r2, #52]	; 0x34
 80046f0:	e01c      	b.n	800472c <HAL_RCC_OscConfig+0x6a0>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	2b05      	cmp	r3, #5
 80046f8:	d10c      	bne.n	8004714 <HAL_RCC_OscConfig+0x688>
 80046fa:	4b69      	ldr	r3, [pc, #420]	; (80048a0 <HAL_RCC_OscConfig+0x814>)
 80046fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fe:	4a68      	ldr	r2, [pc, #416]	; (80048a0 <HAL_RCC_OscConfig+0x814>)
 8004700:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004704:	6353      	str	r3, [r2, #52]	; 0x34
 8004706:	4b66      	ldr	r3, [pc, #408]	; (80048a0 <HAL_RCC_OscConfig+0x814>)
 8004708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470a:	4a65      	ldr	r2, [pc, #404]	; (80048a0 <HAL_RCC_OscConfig+0x814>)
 800470c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004710:	6353      	str	r3, [r2, #52]	; 0x34
 8004712:	e00b      	b.n	800472c <HAL_RCC_OscConfig+0x6a0>
 8004714:	4b62      	ldr	r3, [pc, #392]	; (80048a0 <HAL_RCC_OscConfig+0x814>)
 8004716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004718:	4a61      	ldr	r2, [pc, #388]	; (80048a0 <HAL_RCC_OscConfig+0x814>)
 800471a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800471e:	6353      	str	r3, [r2, #52]	; 0x34
 8004720:	4b5f      	ldr	r3, [pc, #380]	; (80048a0 <HAL_RCC_OscConfig+0x814>)
 8004722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004724:	4a5e      	ldr	r2, [pc, #376]	; (80048a0 <HAL_RCC_OscConfig+0x814>)
 8004726:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800472a:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d015      	beq.n	8004760 <HAL_RCC_OscConfig+0x6d4>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004734:	f7fd f912 	bl	800195c <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800473a:	e00a      	b.n	8004752 <HAL_RCC_OscConfig+0x6c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800473c:	f7fd f90e 	bl	800195c <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	f241 3288 	movw	r2, #5000	; 0x1388
 800474a:	4293      	cmp	r3, r2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e112      	b.n	8004978 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004752:	4b53      	ldr	r3, [pc, #332]	; (80048a0 <HAL_RCC_OscConfig+0x814>)
 8004754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004756:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800475a:	2b00      	cmp	r3, #0
 800475c:	d0ee      	beq.n	800473c <HAL_RCC_OscConfig+0x6b0>
 800475e:	e014      	b.n	800478a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004760:	f7fd f8fc 	bl	800195c <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004766:	e00a      	b.n	800477e <HAL_RCC_OscConfig+0x6f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004768:	f7fd f8f8 	bl	800195c <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	f241 3288 	movw	r2, #5000	; 0x1388
 8004776:	4293      	cmp	r3, r2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x6f2>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e0fc      	b.n	8004978 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800477e:	4b48      	ldr	r3, [pc, #288]	; (80048a0 <HAL_RCC_OscConfig+0x814>)
 8004780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004782:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1ee      	bne.n	8004768 <HAL_RCC_OscConfig+0x6dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800478a:	7ffb      	ldrb	r3, [r7, #31]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d105      	bne.n	800479c <HAL_RCC_OscConfig+0x710>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004790:	4b43      	ldr	r3, [pc, #268]	; (80048a0 <HAL_RCC_OscConfig+0x814>)
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	4a42      	ldr	r2, [pc, #264]	; (80048a0 <HAL_RCC_OscConfig+0x814>)
 8004796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800479a:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00c      	beq.n	80047be <HAL_RCC_OscConfig+0x732>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d008      	beq.n	80047be <HAL_RCC_OscConfig+0x732>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d004      	beq.n	80047be <HAL_RCC_OscConfig+0x732>
 80047b4:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 80047b8:	483a      	ldr	r0, [pc, #232]	; (80048a4 <HAL_RCC_OscConfig+0x818>)
 80047ba:	f7fc fc8b 	bl	80010d4 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 80d7 	beq.w	8004976 <HAL_RCC_OscConfig+0x8ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	2b0c      	cmp	r3, #12
 80047cc:	f000 80b3 	beq.w	8004936 <HAL_RCC_OscConfig+0x8aa>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	f040 8097 	bne.w	8004908 <HAL_RCC_OscConfig+0x87c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d009      	beq.n	80047f6 <HAL_RCC_OscConfig+0x76a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ea:	d004      	beq.n	80047f6 <HAL_RCC_OscConfig+0x76a>
 80047ec:	f240 21b5 	movw	r1, #693	; 0x2b5
 80047f0:	482c      	ldr	r0, [pc, #176]	; (80048a4 <HAL_RCC_OscConfig+0x818>)
 80047f2:	f7fc fc6f 	bl	80010d4 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d02c      	beq.n	8004858 <HAL_RCC_OscConfig+0x7cc>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004806:	d027      	beq.n	8004858 <HAL_RCC_OscConfig+0x7cc>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004810:	d022      	beq.n	8004858 <HAL_RCC_OscConfig+0x7cc>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004816:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800481a:	d01d      	beq.n	8004858 <HAL_RCC_OscConfig+0x7cc>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004820:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004824:	d018      	beq.n	8004858 <HAL_RCC_OscConfig+0x7cc>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800482e:	d013      	beq.n	8004858 <HAL_RCC_OscConfig+0x7cc>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004838:	d00e      	beq.n	8004858 <HAL_RCC_OscConfig+0x7cc>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004842:	d009      	beq.n	8004858 <HAL_RCC_OscConfig+0x7cc>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800484c:	d004      	beq.n	8004858 <HAL_RCC_OscConfig+0x7cc>
 800484e:	f240 21b6 	movw	r1, #694	; 0x2b6
 8004852:	4814      	ldr	r0, [pc, #80]	; (80048a4 <HAL_RCC_OscConfig+0x818>)
 8004854:	f7fc fc3e 	bl	80010d4 <assert_failed>
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004860:	d00e      	beq.n	8004880 <HAL_RCC_OscConfig+0x7f4>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800486a:	d009      	beq.n	8004880 <HAL_RCC_OscConfig+0x7f4>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004874:	d004      	beq.n	8004880 <HAL_RCC_OscConfig+0x7f4>
 8004876:	f240 21b7 	movw	r1, #695	; 0x2b7
 800487a:	480a      	ldr	r0, [pc, #40]	; (80048a4 <HAL_RCC_OscConfig+0x818>)
 800487c:	f7fc fc2a 	bl	80010d4 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004880:	4b0a      	ldr	r3, [pc, #40]	; (80048ac <HAL_RCC_OscConfig+0x820>)
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004886:	f7fd f869 	bl	800195c <HAL_GetTick>
 800488a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800488c:	e010      	b.n	80048b0 <HAL_RCC_OscConfig+0x824>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800488e:	f7fd f865 	bl	800195c <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d909      	bls.n	80048b0 <HAL_RCC_OscConfig+0x824>
          {
            return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e06b      	b.n	8004978 <HAL_RCC_OscConfig+0x8ec>
 80048a0:	40023800 	.word	0x40023800
 80048a4:	0800a240 	.word	0x0800a240
 80048a8:	40007000 	.word	0x40007000
 80048ac:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048b0:	4b33      	ldr	r3, [pc, #204]	; (8004980 <HAL_RCC_OscConfig+0x8f4>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1e8      	bne.n	800488e <HAL_RCC_OscConfig+0x802>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048bc:	4b30      	ldr	r3, [pc, #192]	; (8004980 <HAL_RCC_OscConfig+0x8f4>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	4319      	orrs	r1, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d2:	430b      	orrs	r3, r1
 80048d4:	492a      	ldr	r1, [pc, #168]	; (8004980 <HAL_RCC_OscConfig+0x8f4>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048da:	4b2a      	ldr	r3, [pc, #168]	; (8004984 <HAL_RCC_OscConfig+0x8f8>)
 80048dc:	2201      	movs	r2, #1
 80048de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e0:	f7fd f83c 	bl	800195c <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x86e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048e8:	f7fd f838 	bl	800195c <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x86e>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e03e      	b.n	8004978 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048fa:	4b21      	ldr	r3, [pc, #132]	; (8004980 <HAL_RCC_OscConfig+0x8f4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0f0      	beq.n	80048e8 <HAL_RCC_OscConfig+0x85c>
 8004906:	e036      	b.n	8004976 <HAL_RCC_OscConfig+0x8ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004908:	4b1e      	ldr	r3, [pc, #120]	; (8004984 <HAL_RCC_OscConfig+0x8f8>)
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490e:	f7fd f825 	bl	800195c <HAL_GetTick>
 8004912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004914:	e008      	b.n	8004928 <HAL_RCC_OscConfig+0x89c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004916:	f7fd f821 	bl	800195c <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x89c>
          {
            return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e027      	b.n	8004978 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004928:	4b15      	ldr	r3, [pc, #84]	; (8004980 <HAL_RCC_OscConfig+0x8f4>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1f0      	bne.n	8004916 <HAL_RCC_OscConfig+0x88a>
 8004934:	e01f      	b.n	8004976 <HAL_RCC_OscConfig+0x8ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	2b01      	cmp	r3, #1
 800493c:	d101      	bne.n	8004942 <HAL_RCC_OscConfig+0x8b6>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e01a      	b.n	8004978 <HAL_RCC_OscConfig+0x8ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004942:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <HAL_RCC_OscConfig+0x8f4>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004952:	429a      	cmp	r2, r3
 8004954:	d10d      	bne.n	8004972 <HAL_RCC_OscConfig+0x8e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004960:	429a      	cmp	r2, r3
 8004962:	d106      	bne.n	8004972 <HAL_RCC_OscConfig+0x8e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800496e:	429a      	cmp	r2, r3
 8004970:	d001      	beq.n	8004976 <HAL_RCC_OscConfig+0x8ea>
        {
          return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <HAL_RCC_OscConfig+0x8ec>
        }
      }
    }
  }

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3720      	adds	r7, #32
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40023800 	.word	0x40023800
 8004984:	42470060 	.word	0x42470060

08004988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e1a4      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x35e>
  }

  assert_param(IS_FLASH_LATENCY(FLatency));
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d007      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x2a>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d004      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x2a>
 80049a8:	f240 312a 	movw	r1, #810	; 0x32a
 80049ac:	4893      	ldr	r0, [pc, #588]	; (8004bfc <HAL_RCC_ClockConfig+0x274>)
 80049ae:	f7fc fb91 	bl	80010d4 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049b2:	4b93      	ldr	r3, [pc, #588]	; (8004c00 <HAL_RCC_ClockConfig+0x278>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d919      	bls.n	80049f4 <HAL_RCC_ClockConfig+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d105      	bne.n	80049d2 <HAL_RCC_ClockConfig+0x4a>
 80049c6:	4b8e      	ldr	r3, [pc, #568]	; (8004c00 <HAL_RCC_ClockConfig+0x278>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a8d      	ldr	r2, [pc, #564]	; (8004c00 <HAL_RCC_ClockConfig+0x278>)
 80049cc:	f043 0304 	orr.w	r3, r3, #4
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	4b8b      	ldr	r3, [pc, #556]	; (8004c00 <HAL_RCC_ClockConfig+0x278>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f023 0201 	bic.w	r2, r3, #1
 80049da:	4989      	ldr	r1, [pc, #548]	; (8004c00 <HAL_RCC_ClockConfig+0x278>)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	4313      	orrs	r3, r2
 80049e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e2:	4b87      	ldr	r3, [pc, #540]	; (8004c00 <HAL_RCC_ClockConfig+0x278>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d001      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e178      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x35e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d031      	beq.n	8004a64 <HAL_RCC_ClockConfig+0xdc>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d024      	beq.n	8004a52 <HAL_RCC_ClockConfig+0xca>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	2b80      	cmp	r3, #128	; 0x80
 8004a0e:	d020      	beq.n	8004a52 <HAL_RCC_ClockConfig+0xca>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	2b90      	cmp	r3, #144	; 0x90
 8004a16:	d01c      	beq.n	8004a52 <HAL_RCC_ClockConfig+0xca>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	2ba0      	cmp	r3, #160	; 0xa0
 8004a1e:	d018      	beq.n	8004a52 <HAL_RCC_ClockConfig+0xca>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	2bb0      	cmp	r3, #176	; 0xb0
 8004a26:	d014      	beq.n	8004a52 <HAL_RCC_ClockConfig+0xca>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	2bc0      	cmp	r3, #192	; 0xc0
 8004a2e:	d010      	beq.n	8004a52 <HAL_RCC_ClockConfig+0xca>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	2bd0      	cmp	r3, #208	; 0xd0
 8004a36:	d00c      	beq.n	8004a52 <HAL_RCC_ClockConfig+0xca>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2be0      	cmp	r3, #224	; 0xe0
 8004a3e:	d008      	beq.n	8004a52 <HAL_RCC_ClockConfig+0xca>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	2bf0      	cmp	r3, #240	; 0xf0
 8004a46:	d004      	beq.n	8004a52 <HAL_RCC_ClockConfig+0xca>
 8004a48:	f240 3141 	movw	r1, #833	; 0x341
 8004a4c:	486b      	ldr	r0, [pc, #428]	; (8004bfc <HAL_RCC_ClockConfig+0x274>)
 8004a4e:	f7fc fb41 	bl	80010d4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a52:	4b6c      	ldr	r3, [pc, #432]	; (8004c04 <HAL_RCC_ClockConfig+0x27c>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	4969      	ldr	r1, [pc, #420]	; (8004c04 <HAL_RCC_ClockConfig+0x27c>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 80a3 	beq.w	8004bb8 <HAL_RCC_ClockConfig+0x230>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d010      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x114>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d00c      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x114>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d008      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x114>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d004      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x114>
 8004a92:	f44f 7152 	mov.w	r1, #840	; 0x348
 8004a96:	4859      	ldr	r0, [pc, #356]	; (8004bfc <HAL_RCC_ClockConfig+0x274>)
 8004a98:	f7fc fb1c 	bl	80010d4 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d107      	bne.n	8004ab4 <HAL_RCC_ClockConfig+0x12c>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004aa4:	4b57      	ldr	r3, [pc, #348]	; (8004c04 <HAL_RCC_ClockConfig+0x27c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d121      	bne.n	8004af4 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e118      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2b03      	cmp	r3, #3
 8004aba:	d107      	bne.n	8004acc <HAL_RCC_ClockConfig+0x144>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004abc:	4b51      	ldr	r3, [pc, #324]	; (8004c04 <HAL_RCC_ClockConfig+0x27c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d115      	bne.n	8004af4 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e10c      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d107      	bne.n	8004ae4 <HAL_RCC_ClockConfig+0x15c>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ad4:	4b4b      	ldr	r3, [pc, #300]	; (8004c04 <HAL_RCC_ClockConfig+0x27c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d109      	bne.n	8004af4 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e100      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x35e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004ae4:	4b47      	ldr	r3, [pc, #284]	; (8004c04 <HAL_RCC_ClockConfig+0x27c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e0f8      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004af4:	4b43      	ldr	r3, [pc, #268]	; (8004c04 <HAL_RCC_ClockConfig+0x27c>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f023 0203 	bic.w	r2, r3, #3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	4940      	ldr	r1, [pc, #256]	; (8004c04 <HAL_RCC_ClockConfig+0x27c>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b06:	f7fc ff29 	bl	800195c <HAL_GetTick>
 8004b0a:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d112      	bne.n	8004b3a <HAL_RCC_ClockConfig+0x1b2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b14:	e00a      	b.n	8004b2c <HAL_RCC_ClockConfig+0x1a4>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b16:	f7fc ff21 	bl	800195c <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_ClockConfig+0x1a4>
        {
          return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e0dc      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b2c:	4b35      	ldr	r3, [pc, #212]	; (8004c04 <HAL_RCC_ClockConfig+0x27c>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 030c 	and.w	r3, r3, #12
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d1ee      	bne.n	8004b16 <HAL_RCC_ClockConfig+0x18e>
 8004b38:	e03e      	b.n	8004bb8 <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	d112      	bne.n	8004b68 <HAL_RCC_ClockConfig+0x1e0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b42:	e00a      	b.n	8004b5a <HAL_RCC_ClockConfig+0x1d2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b44:	f7fc ff0a 	bl	800195c <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_ClockConfig+0x1d2>
        {
          return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e0c5      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b5a:	4b2a      	ldr	r3, [pc, #168]	; (8004c04 <HAL_RCC_ClockConfig+0x27c>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
 8004b62:	2b0c      	cmp	r3, #12
 8004b64:	d1ee      	bne.n	8004b44 <HAL_RCC_ClockConfig+0x1bc>
 8004b66:	e027      	b.n	8004bb8 <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d11d      	bne.n	8004bac <HAL_RCC_ClockConfig+0x224>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b70:	e00a      	b.n	8004b88 <HAL_RCC_ClockConfig+0x200>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b72:	f7fc fef3 	bl	800195c <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_ClockConfig+0x200>
        {
          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e0ae      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b88:	4b1e      	ldr	r3, [pc, #120]	; (8004c04 <HAL_RCC_ClockConfig+0x27c>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 030c 	and.w	r3, r3, #12
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d1ee      	bne.n	8004b72 <HAL_RCC_ClockConfig+0x1ea>
 8004b94:	e010      	b.n	8004bb8 <HAL_RCC_ClockConfig+0x230>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b96:	f7fc fee1 	bl	800195c <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_ClockConfig+0x224>
        {
          return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e09c      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x35e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004bac:	4b15      	ldr	r3, [pc, #84]	; (8004c04 <HAL_RCC_ClockConfig+0x27c>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f003 030c 	and.w	r3, r3, #12
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1ee      	bne.n	8004b96 <HAL_RCC_ClockConfig+0x20e>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bb8:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <HAL_RCC_ClockConfig+0x278>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d220      	bcs.n	8004c08 <HAL_RCC_ClockConfig+0x280>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d105      	bne.n	8004bd8 <HAL_RCC_ClockConfig+0x250>
 8004bcc:	4b0c      	ldr	r3, [pc, #48]	; (8004c00 <HAL_RCC_ClockConfig+0x278>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a0b      	ldr	r2, [pc, #44]	; (8004c00 <HAL_RCC_ClockConfig+0x278>)
 8004bd2:	f043 0304 	orr.w	r3, r3, #4
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	4b09      	ldr	r3, [pc, #36]	; (8004c00 <HAL_RCC_ClockConfig+0x278>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f023 0201 	bic.w	r2, r3, #1
 8004be0:	4907      	ldr	r1, [pc, #28]	; (8004c00 <HAL_RCC_ClockConfig+0x278>)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be8:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <HAL_RCC_ClockConfig+0x278>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d008      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x280>
    {
      return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e075      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x35e>
 8004bfa:	bf00      	nop
 8004bfc:	0800a240 	.word	0x0800a240
 8004c00:	40023c00 	.word	0x40023c00
 8004c04:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d025      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x2d8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d018      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x2c6>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c24:	d013      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x2c6>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004c2e:	d00e      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x2c6>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c38:	d009      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x2c6>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c42:	d004      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x2c6>
 8004c44:	f240 31ad 	movw	r1, #941	; 0x3ad
 8004c48:	4829      	ldr	r0, [pc, #164]	; (8004cf0 <HAL_RCC_ClockConfig+0x368>)
 8004c4a:	f7fc fa43 	bl	80010d4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c4e:	4b29      	ldr	r3, [pc, #164]	; (8004cf4 <HAL_RCC_ClockConfig+0x36c>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	4926      	ldr	r1, [pc, #152]	; (8004cf4 <HAL_RCC_ClockConfig+0x36c>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0308 	and.w	r3, r3, #8
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d026      	beq.n	8004cba <HAL_RCC_ClockConfig+0x332>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d018      	beq.n	8004ca6 <HAL_RCC_ClockConfig+0x31e>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c7c:	d013      	beq.n	8004ca6 <HAL_RCC_ClockConfig+0x31e>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004c86:	d00e      	beq.n	8004ca6 <HAL_RCC_ClockConfig+0x31e>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c90:	d009      	beq.n	8004ca6 <HAL_RCC_ClockConfig+0x31e>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c9a:	d004      	beq.n	8004ca6 <HAL_RCC_ClockConfig+0x31e>
 8004c9c:	f44f 716d 	mov.w	r1, #948	; 0x3b4
 8004ca0:	4813      	ldr	r0, [pc, #76]	; (8004cf0 <HAL_RCC_ClockConfig+0x368>)
 8004ca2:	f7fc fa17 	bl	80010d4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ca6:	4b13      	ldr	r3, [pc, #76]	; (8004cf4 <HAL_RCC_ClockConfig+0x36c>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	490f      	ldr	r1, [pc, #60]	; (8004cf4 <HAL_RCC_ClockConfig+0x36c>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cba:	f000 f823 	bl	8004d04 <HAL_RCC_GetSysClockFreq>
 8004cbe:	4601      	mov	r1, r0
 8004cc0:	4b0c      	ldr	r3, [pc, #48]	; (8004cf4 <HAL_RCC_ClockConfig+0x36c>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	091b      	lsrs	r3, r3, #4
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	4a0b      	ldr	r2, [pc, #44]	; (8004cf8 <HAL_RCC_ClockConfig+0x370>)
 8004ccc:	5cd3      	ldrb	r3, [r2, r3]
 8004cce:	fa21 f303 	lsr.w	r3, r1, r3
 8004cd2:	4a0a      	ldr	r2, [pc, #40]	; (8004cfc <HAL_RCC_ClockConfig+0x374>)
 8004cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004cd6:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <HAL_RCC_ClockConfig+0x378>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fc fa38 	bl	8001150 <HAL_InitTick>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	72fb      	strb	r3, [r7, #11]

  return status;
 8004ce4:	7afb      	ldrb	r3, [r7, #11]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	0800a240 	.word	0x0800a240
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	0800a414 	.word	0x0800a414
 8004cfc:	20000000 	.word	0x20000000
 8004d00:	20000004 	.word	0x20000004

08004d04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004d0a:	4b26      	ldr	r3, [pc, #152]	; (8004da4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f003 030c 	and.w	r3, r3, #12
 8004d16:	2b08      	cmp	r3, #8
 8004d18:	d006      	beq.n	8004d28 <HAL_RCC_GetSysClockFreq+0x24>
 8004d1a:	2b0c      	cmp	r3, #12
 8004d1c:	d007      	beq.n	8004d2e <HAL_RCC_GetSysClockFreq+0x2a>
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d12c      	bne.n	8004d7c <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d22:	4b21      	ldr	r3, [pc, #132]	; (8004da8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d24:	613b      	str	r3, [r7, #16]
      break;
 8004d26:	e037      	b.n	8004d98 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d28:	4b20      	ldr	r3, [pc, #128]	; (8004dac <HAL_RCC_GetSysClockFreq+0xa8>)
 8004d2a:	613b      	str	r3, [r7, #16]
      break;
 8004d2c:	e034      	b.n	8004d98 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	0c9b      	lsrs	r3, r3, #18
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	4a1e      	ldr	r2, [pc, #120]	; (8004db0 <HAL_RCC_GetSysClockFreq+0xac>)
 8004d38:	5cd3      	ldrb	r3, [r2, r3]
 8004d3a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	0d9b      	lsrs	r3, r3, #22
 8004d40:	f003 0303 	and.w	r3, r3, #3
 8004d44:	3301      	adds	r3, #1
 8004d46:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d48:	4b16      	ldr	r3, [pc, #88]	; (8004da4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d008      	beq.n	8004d66 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	4a15      	ldr	r2, [pc, #84]	; (8004dac <HAL_RCC_GetSysClockFreq+0xa8>)
 8004d58:	fb02 f203 	mul.w	r2, r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d62:	617b      	str	r3, [r7, #20]
 8004d64:	e007      	b.n	8004d76 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	4a0f      	ldr	r2, [pc, #60]	; (8004da8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d6a:	fb02 f203 	mul.w	r2, r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	613b      	str	r3, [r7, #16]
      break;
 8004d7a:	e00d      	b.n	8004d98 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004d7c:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	0b5b      	lsrs	r3, r3, #13
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	613b      	str	r3, [r7, #16]
      break;
 8004d96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d98:	693b      	ldr	r3, [r7, #16]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	371c      	adds	r7, #28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr
 8004da4:	40023800 	.word	0x40023800
 8004da8:	00f42400 	.word	0x00f42400
 8004dac:	007a1200 	.word	0x007a1200
 8004db0:	0800a408 	.word	0x0800a408

08004db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004db8:	4b02      	ldr	r3, [pc, #8]	; (8004dc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004dba:	681b      	ldr	r3, [r3, #0]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr
 8004dc4:	20000000 	.word	0x20000000

08004dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004dcc:	f7ff fff2 	bl	8004db4 <HAL_RCC_GetHCLKFreq>
 8004dd0:	4601      	mov	r1, r0
 8004dd2:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	0a1b      	lsrs	r3, r3, #8
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	4a03      	ldr	r2, [pc, #12]	; (8004dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dde:	5cd3      	ldrb	r3, [r2, r3]
 8004de0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40023800 	.word	0x40023800
 8004dec:	0800a424 	.word	0x0800a424

08004df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004df4:	f7ff ffde 	bl	8004db4 <HAL_RCC_GetHCLKFreq>
 8004df8:	4601      	mov	r1, r0
 8004dfa:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	0adb      	lsrs	r3, r3, #11
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	4a03      	ldr	r2, [pc, #12]	; (8004e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e06:	5cd3      	ldrb	r3, [r2, r3]
 8004e08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40023800 	.word	0x40023800
 8004e14:	0800a424 	.word	0x0800a424

08004e18 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d104      	bne.n	8004e32 <HAL_RCC_GetClockConfig+0x1a>
 8004e28:	f240 41fa 	movw	r1, #1274	; 0x4fa
 8004e2c:	4818      	ldr	r0, [pc, #96]	; (8004e90 <HAL_RCC_GetClockConfig+0x78>)
 8004e2e:	f7fc f951 	bl	80010d4 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d104      	bne.n	8004e42 <HAL_RCC_GetClockConfig+0x2a>
 8004e38:	f240 41fb 	movw	r1, #1275	; 0x4fb
 8004e3c:	4814      	ldr	r0, [pc, #80]	; (8004e90 <HAL_RCC_GetClockConfig+0x78>)
 8004e3e:	f7fc f949 	bl	80010d4 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	220f      	movs	r2, #15
 8004e46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e48:	4b12      	ldr	r3, [pc, #72]	; (8004e94 <HAL_RCC_GetClockConfig+0x7c>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 0203 	and.w	r2, r3, #3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e54:	4b0f      	ldr	r3, [pc, #60]	; (8004e94 <HAL_RCC_GetClockConfig+0x7c>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e60:	4b0c      	ldr	r3, [pc, #48]	; (8004e94 <HAL_RCC_GetClockConfig+0x7c>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e6c:	4b09      	ldr	r3, [pc, #36]	; (8004e94 <HAL_RCC_GetClockConfig+0x7c>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	08db      	lsrs	r3, r3, #3
 8004e72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004e7a:	4b07      	ldr	r3, [pc, #28]	; (8004e98 <HAL_RCC_GetClockConfig+0x80>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0201 	and.w	r2, r3, #1
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	601a      	str	r2, [r3, #0]
}
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	0800a240 	.word	0x0800a240
 8004e94:	40023800 	.word	0x40023800
 8004e98:	40023c00 	.word	0x40023c00

08004e9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004ea8:	4b29      	ldr	r3, [pc, #164]	; (8004f50 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d12c      	bne.n	8004f0e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004eb4:	4b26      	ldr	r3, [pc, #152]	; (8004f50 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d005      	beq.n	8004ecc <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004ec0:	4b24      	ldr	r3, [pc, #144]	; (8004f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	e016      	b.n	8004efa <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ecc:	4b20      	ldr	r3, [pc, #128]	; (8004f50 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	4a1f      	ldr	r2, [pc, #124]	; (8004f50 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed6:	6253      	str	r3, [r2, #36]	; 0x24
 8004ed8:	4b1d      	ldr	r3, [pc, #116]	; (8004f50 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004ee4:	4b1b      	ldr	r3, [pc, #108]	; (8004f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004eec:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eee:	4b18      	ldr	r3, [pc, #96]	; (8004f50 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	4a17      	ldr	r2, [pc, #92]	; (8004f50 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ef8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004f00:	d105      	bne.n	8004f0e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f08:	d101      	bne.n	8004f0e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d105      	bne.n	8004f20 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004f14:	4b10      	ldr	r3, [pc, #64]	; (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a0f      	ldr	r2, [pc, #60]	; (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f1a:	f043 0304 	orr.w	r3, r3, #4
 8004f1e:	6013      	str	r3, [r2, #0]
 8004f20:	4b0d      	ldr	r3, [pc, #52]	; (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f023 0201 	bic.w	r2, r3, #1
 8004f28:	490b      	ldr	r1, [pc, #44]	; (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f30:	4b09      	ldr	r3, [pc, #36]	; (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d001      	beq.n	8004f42 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e000      	b.n	8004f44 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	371c      	adds	r7, #28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bc80      	pop	{r7}
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	40023800 	.word	0x40023800
 8004f54:	40007000 	.word	0x40007000
 8004f58:	40023c00 	.word	0x40023c00

08004f5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e088      	b.n	8005080 <HAL_TIM_Base_Init+0x124>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f76:	d02c      	beq.n	8004fd2 <HAL_TIM_Base_Init+0x76>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a42      	ldr	r2, [pc, #264]	; (8005088 <HAL_TIM_Base_Init+0x12c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d027      	beq.n	8004fd2 <HAL_TIM_Base_Init+0x76>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a41      	ldr	r2, [pc, #260]	; (800508c <HAL_TIM_Base_Init+0x130>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d022      	beq.n	8004fd2 <HAL_TIM_Base_Init+0x76>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a3f      	ldr	r2, [pc, #252]	; (8005090 <HAL_TIM_Base_Init+0x134>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d01d      	beq.n	8004fd2 <HAL_TIM_Base_Init+0x76>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a3e      	ldr	r2, [pc, #248]	; (8005094 <HAL_TIM_Base_Init+0x138>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d018      	beq.n	8004fd2 <HAL_TIM_Base_Init+0x76>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a3c      	ldr	r2, [pc, #240]	; (8005098 <HAL_TIM_Base_Init+0x13c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d013      	beq.n	8004fd2 <HAL_TIM_Base_Init+0x76>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a3b      	ldr	r2, [pc, #236]	; (800509c <HAL_TIM_Base_Init+0x140>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00e      	beq.n	8004fd2 <HAL_TIM_Base_Init+0x76>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a39      	ldr	r2, [pc, #228]	; (80050a0 <HAL_TIM_Base_Init+0x144>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d009      	beq.n	8004fd2 <HAL_TIM_Base_Init+0x76>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a38      	ldr	r2, [pc, #224]	; (80050a4 <HAL_TIM_Base_Init+0x148>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d004      	beq.n	8004fd2 <HAL_TIM_Base_Init+0x76>
 8004fc8:	f240 110b 	movw	r1, #267	; 0x10b
 8004fcc:	4836      	ldr	r0, [pc, #216]	; (80050a8 <HAL_TIM_Base_Init+0x14c>)
 8004fce:	f7fc f881 	bl	80010d4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d014      	beq.n	8005004 <HAL_TIM_Base_Init+0xa8>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	2b10      	cmp	r3, #16
 8004fe0:	d010      	beq.n	8005004 <HAL_TIM_Base_Init+0xa8>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	2b20      	cmp	r3, #32
 8004fe8:	d00c      	beq.n	8005004 <HAL_TIM_Base_Init+0xa8>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	2b40      	cmp	r3, #64	; 0x40
 8004ff0:	d008      	beq.n	8005004 <HAL_TIM_Base_Init+0xa8>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	2b60      	cmp	r3, #96	; 0x60
 8004ff8:	d004      	beq.n	8005004 <HAL_TIM_Base_Init+0xa8>
 8004ffa:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8004ffe:	482a      	ldr	r0, [pc, #168]	; (80050a8 <HAL_TIM_Base_Init+0x14c>)
 8005000:	f7fc f868 	bl	80010d4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00e      	beq.n	800502a <HAL_TIM_Base_Init+0xce>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005014:	d009      	beq.n	800502a <HAL_TIM_Base_Init+0xce>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800501e:	d004      	beq.n	800502a <HAL_TIM_Base_Init+0xce>
 8005020:	f240 110d 	movw	r1, #269	; 0x10d
 8005024:	4820      	ldr	r0, [pc, #128]	; (80050a8 <HAL_TIM_Base_Init+0x14c>)
 8005026:	f7fc f855 	bl	80010d4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d008      	beq.n	8005044 <HAL_TIM_Base_Init+0xe8>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	2b80      	cmp	r3, #128	; 0x80
 8005038:	d004      	beq.n	8005044 <HAL_TIM_Base_Init+0xe8>
 800503a:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800503e:	481a      	ldr	r0, [pc, #104]	; (80050a8 <HAL_TIM_Base_Init+0x14c>)
 8005040:	f7fc f848 	bl	80010d4 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d106      	bne.n	800505e <HAL_TIM_Base_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7fc faa3 	bl	80015a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2202      	movs	r2, #2
 8005062:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3304      	adds	r3, #4
 800506e:	4619      	mov	r1, r3
 8005070:	4610      	mov	r0, r2
 8005072:	f000 ff49 	bl	8005f08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40000400 	.word	0x40000400
 800508c:	40000800 	.word	0x40000800
 8005090:	40000c00 	.word	0x40000c00
 8005094:	40001000 	.word	0x40001000
 8005098:	40001400 	.word	0x40001400
 800509c:	40010800 	.word	0x40010800
 80050a0:	40010c00 	.word	0x40010c00
 80050a4:	40011000 	.word	0x40011000
 80050a8:	0800a278 	.word	0x0800a278

080050ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050bc:	d02c      	beq.n	8005118 <HAL_TIM_Base_Start_IT+0x6c>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a24      	ldr	r2, [pc, #144]	; (8005154 <HAL_TIM_Base_Start_IT+0xa8>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d027      	beq.n	8005118 <HAL_TIM_Base_Start_IT+0x6c>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a22      	ldr	r2, [pc, #136]	; (8005158 <HAL_TIM_Base_Start_IT+0xac>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d022      	beq.n	8005118 <HAL_TIM_Base_Start_IT+0x6c>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a21      	ldr	r2, [pc, #132]	; (800515c <HAL_TIM_Base_Start_IT+0xb0>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d01d      	beq.n	8005118 <HAL_TIM_Base_Start_IT+0x6c>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1f      	ldr	r2, [pc, #124]	; (8005160 <HAL_TIM_Base_Start_IT+0xb4>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d018      	beq.n	8005118 <HAL_TIM_Base_Start_IT+0x6c>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a1e      	ldr	r2, [pc, #120]	; (8005164 <HAL_TIM_Base_Start_IT+0xb8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d013      	beq.n	8005118 <HAL_TIM_Base_Start_IT+0x6c>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a1c      	ldr	r2, [pc, #112]	; (8005168 <HAL_TIM_Base_Start_IT+0xbc>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00e      	beq.n	8005118 <HAL_TIM_Base_Start_IT+0x6c>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a1b      	ldr	r2, [pc, #108]	; (800516c <HAL_TIM_Base_Start_IT+0xc0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d009      	beq.n	8005118 <HAL_TIM_Base_Start_IT+0x6c>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a19      	ldr	r2, [pc, #100]	; (8005170 <HAL_TIM_Base_Start_IT+0xc4>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d004      	beq.n	8005118 <HAL_TIM_Base_Start_IT+0x6c>
 800510e:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 8005112:	4818      	ldr	r0, [pc, #96]	; (8005174 <HAL_TIM_Base_Start_IT+0xc8>)
 8005114:	f7fb ffde 	bl	80010d4 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0201 	orr.w	r2, r2, #1
 8005126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b06      	cmp	r3, #6
 8005138:	d007      	beq.n	800514a <HAL_TIM_Base_Start_IT+0x9e>
  {
    __HAL_TIM_ENABLE(htim);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f042 0201 	orr.w	r2, r2, #1
 8005148:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	40000400 	.word	0x40000400
 8005158:	40000800 	.word	0x40000800
 800515c:	40000c00 	.word	0x40000c00
 8005160:	40001000 	.word	0x40001000
 8005164:	40001400 	.word	0x40001400
 8005168:	40010800 	.word	0x40010800
 800516c:	40010c00 	.word	0x40010c00
 8005170:	40011000 	.word	0x40011000
 8005174:	0800a278 	.word	0x0800a278

08005178 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e088      	b.n	800529c <HAL_TIM_PWM_Init+0x124>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005192:	d02c      	beq.n	80051ee <HAL_TIM_PWM_Init+0x76>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a42      	ldr	r2, [pc, #264]	; (80052a4 <HAL_TIM_PWM_Init+0x12c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d027      	beq.n	80051ee <HAL_TIM_PWM_Init+0x76>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a41      	ldr	r2, [pc, #260]	; (80052a8 <HAL_TIM_PWM_Init+0x130>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d022      	beq.n	80051ee <HAL_TIM_PWM_Init+0x76>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a3f      	ldr	r2, [pc, #252]	; (80052ac <HAL_TIM_PWM_Init+0x134>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d01d      	beq.n	80051ee <HAL_TIM_PWM_Init+0x76>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a3e      	ldr	r2, [pc, #248]	; (80052b0 <HAL_TIM_PWM_Init+0x138>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d018      	beq.n	80051ee <HAL_TIM_PWM_Init+0x76>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a3c      	ldr	r2, [pc, #240]	; (80052b4 <HAL_TIM_PWM_Init+0x13c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d013      	beq.n	80051ee <HAL_TIM_PWM_Init+0x76>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a3b      	ldr	r2, [pc, #236]	; (80052b8 <HAL_TIM_PWM_Init+0x140>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d00e      	beq.n	80051ee <HAL_TIM_PWM_Init+0x76>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a39      	ldr	r2, [pc, #228]	; (80052bc <HAL_TIM_PWM_Init+0x144>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d009      	beq.n	80051ee <HAL_TIM_PWM_Init+0x76>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a38      	ldr	r2, [pc, #224]	; (80052c0 <HAL_TIM_PWM_Init+0x148>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d004      	beq.n	80051ee <HAL_TIM_PWM_Init+0x76>
 80051e4:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80051e8:	4836      	ldr	r0, [pc, #216]	; (80052c4 <HAL_TIM_PWM_Init+0x14c>)
 80051ea:	f7fb ff73 	bl	80010d4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d014      	beq.n	8005220 <HAL_TIM_PWM_Init+0xa8>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	2b10      	cmp	r3, #16
 80051fc:	d010      	beq.n	8005220 <HAL_TIM_PWM_Init+0xa8>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	2b20      	cmp	r3, #32
 8005204:	d00c      	beq.n	8005220 <HAL_TIM_PWM_Init+0xa8>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2b40      	cmp	r3, #64	; 0x40
 800520c:	d008      	beq.n	8005220 <HAL_TIM_PWM_Init+0xa8>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	2b60      	cmp	r3, #96	; 0x60
 8005214:	d004      	beq.n	8005220 <HAL_TIM_PWM_Init+0xa8>
 8005216:	f240 4171 	movw	r1, #1137	; 0x471
 800521a:	482a      	ldr	r0, [pc, #168]	; (80052c4 <HAL_TIM_PWM_Init+0x14c>)
 800521c:	f7fb ff5a 	bl	80010d4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00e      	beq.n	8005246 <HAL_TIM_PWM_Init+0xce>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005230:	d009      	beq.n	8005246 <HAL_TIM_PWM_Init+0xce>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800523a:	d004      	beq.n	8005246 <HAL_TIM_PWM_Init+0xce>
 800523c:	f240 4172 	movw	r1, #1138	; 0x472
 8005240:	4820      	ldr	r0, [pc, #128]	; (80052c4 <HAL_TIM_PWM_Init+0x14c>)
 8005242:	f7fb ff47 	bl	80010d4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d008      	beq.n	8005260 <HAL_TIM_PWM_Init+0xe8>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	2b80      	cmp	r3, #128	; 0x80
 8005254:	d004      	beq.n	8005260 <HAL_TIM_PWM_Init+0xe8>
 8005256:	f240 4173 	movw	r1, #1139	; 0x473
 800525a:	481a      	ldr	r0, [pc, #104]	; (80052c4 <HAL_TIM_PWM_Init+0x14c>)
 800525c:	f7fb ff3a 	bl	80010d4 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	d106      	bne.n	800527a <HAL_TIM_PWM_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f827 	bl	80052c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2202      	movs	r2, #2
 800527e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	3304      	adds	r3, #4
 800528a:	4619      	mov	r1, r3
 800528c:	4610      	mov	r0, r2
 800528e:	f000 fe3b 	bl	8005f08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	40000400 	.word	0x40000400
 80052a8:	40000800 	.word	0x40000800
 80052ac:	40000c00 	.word	0x40000c00
 80052b0:	40001000 	.word	0x40001000
 80052b4:	40001400 	.word	0x40001400
 80052b8:	40010800 	.word	0x40010800
 80052bc:	40010c00 	.word	0x40010c00
 80052c0:	40011000 	.word	0x40011000
 80052c4:	0800a278 	.word	0x0800a278

080052c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bc80      	pop	{r7}
 80052d8:	4770      	bx	lr
	...

080052dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ee:	d10b      	bne.n	8005308 <HAL_TIM_PWM_Start+0x2c>
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d05b      	beq.n	80053ae <HAL_TIM_PWM_Start+0xd2>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	d058      	beq.n	80053ae <HAL_TIM_PWM_Start+0xd2>
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d055      	beq.n	80053ae <HAL_TIM_PWM_Start+0xd2>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b0c      	cmp	r3, #12
 8005306:	d052      	beq.n	80053ae <HAL_TIM_PWM_Start+0xd2>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a36      	ldr	r2, [pc, #216]	; (80053e8 <HAL_TIM_PWM_Start+0x10c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d10b      	bne.n	800532a <HAL_TIM_PWM_Start+0x4e>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d04a      	beq.n	80053ae <HAL_TIM_PWM_Start+0xd2>
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2b04      	cmp	r3, #4
 800531c:	d047      	beq.n	80053ae <HAL_TIM_PWM_Start+0xd2>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b08      	cmp	r3, #8
 8005322:	d044      	beq.n	80053ae <HAL_TIM_PWM_Start+0xd2>
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2b0c      	cmp	r3, #12
 8005328:	d041      	beq.n	80053ae <HAL_TIM_PWM_Start+0xd2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a2f      	ldr	r2, [pc, #188]	; (80053ec <HAL_TIM_PWM_Start+0x110>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d10b      	bne.n	800534c <HAL_TIM_PWM_Start+0x70>
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d039      	beq.n	80053ae <HAL_TIM_PWM_Start+0xd2>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b04      	cmp	r3, #4
 800533e:	d036      	beq.n	80053ae <HAL_TIM_PWM_Start+0xd2>
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2b08      	cmp	r3, #8
 8005344:	d033      	beq.n	80053ae <HAL_TIM_PWM_Start+0xd2>
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b0c      	cmp	r3, #12
 800534a:	d030      	beq.n	80053ae <HAL_TIM_PWM_Start+0xd2>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a27      	ldr	r2, [pc, #156]	; (80053f0 <HAL_TIM_PWM_Start+0x114>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d10b      	bne.n	800536e <HAL_TIM_PWM_Start+0x92>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d028      	beq.n	80053ae <HAL_TIM_PWM_Start+0xd2>
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	2b04      	cmp	r3, #4
 8005360:	d025      	beq.n	80053ae <HAL_TIM_PWM_Start+0xd2>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b08      	cmp	r3, #8
 8005366:	d022      	beq.n	80053ae <HAL_TIM_PWM_Start+0xd2>
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	2b0c      	cmp	r3, #12
 800536c:	d01f      	beq.n	80053ae <HAL_TIM_PWM_Start+0xd2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a20      	ldr	r2, [pc, #128]	; (80053f4 <HAL_TIM_PWM_Start+0x118>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d105      	bne.n	8005384 <HAL_TIM_PWM_Start+0xa8>
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d017      	beq.n	80053ae <HAL_TIM_PWM_Start+0xd2>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b04      	cmp	r3, #4
 8005382:	d014      	beq.n	80053ae <HAL_TIM_PWM_Start+0xd2>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a1b      	ldr	r2, [pc, #108]	; (80053f8 <HAL_TIM_PWM_Start+0x11c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d102      	bne.n	8005394 <HAL_TIM_PWM_Start+0xb8>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00c      	beq.n	80053ae <HAL_TIM_PWM_Start+0xd2>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a18      	ldr	r2, [pc, #96]	; (80053fc <HAL_TIM_PWM_Start+0x120>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d102      	bne.n	80053a4 <HAL_TIM_PWM_Start+0xc8>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d004      	beq.n	80053ae <HAL_TIM_PWM_Start+0xd2>
 80053a4:	f44f 619d 	mov.w	r1, #1256	; 0x4e8
 80053a8:	4815      	ldr	r0, [pc, #84]	; (8005400 <HAL_TIM_PWM_Start+0x124>)
 80053aa:	f7fb fe93 	bl	80010d4 <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2201      	movs	r2, #1
 80053b4:	6839      	ldr	r1, [r7, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 ffa2 	bl	8006300 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2b06      	cmp	r3, #6
 80053cc:	d007      	beq.n	80053de <HAL_TIM_PWM_Start+0x102>
  {
    __HAL_TIM_ENABLE(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f042 0201 	orr.w	r2, r2, #1
 80053dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	40000400 	.word	0x40000400
 80053ec:	40000800 	.word	0x40000800
 80053f0:	40000c00 	.word	0x40000c00
 80053f4:	40010800 	.word	0x40010800
 80053f8:	40010c00 	.word	0x40010c00
 80053fc:	40011000 	.word	0x40011000
 8005400:	0800a278 	.word	0x0800a278

08005404 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b02      	cmp	r3, #2
 8005418:	d122      	bne.n	8005460 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b02      	cmp	r3, #2
 8005426:	d11b      	bne.n	8005460 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f06f 0202 	mvn.w	r2, #2
 8005430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 fd43 	bl	8005ed2 <HAL_TIM_IC_CaptureCallback>
 800544c:	e005      	b.n	800545a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fd36 	bl	8005ec0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 fd45 	bl	8005ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	2b04      	cmp	r3, #4
 800546c:	d122      	bne.n	80054b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	2b04      	cmp	r3, #4
 800547a:	d11b      	bne.n	80054b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f06f 0204 	mvn.w	r2, #4
 8005484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2202      	movs	r2, #2
 800548a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fd19 	bl	8005ed2 <HAL_TIM_IC_CaptureCallback>
 80054a0:	e005      	b.n	80054ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fd0c 	bl	8005ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fd1b 	bl	8005ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	f003 0308 	and.w	r3, r3, #8
 80054be:	2b08      	cmp	r3, #8
 80054c0:	d122      	bne.n	8005508 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f003 0308 	and.w	r3, r3, #8
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d11b      	bne.n	8005508 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f06f 0208 	mvn.w	r2, #8
 80054d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2204      	movs	r2, #4
 80054de:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	f003 0303 	and.w	r3, r3, #3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fcef 	bl	8005ed2 <HAL_TIM_IC_CaptureCallback>
 80054f4:	e005      	b.n	8005502 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fce2 	bl	8005ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fcf1 	bl	8005ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f003 0310 	and.w	r3, r3, #16
 8005512:	2b10      	cmp	r3, #16
 8005514:	d122      	bne.n	800555c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f003 0310 	and.w	r3, r3, #16
 8005520:	2b10      	cmp	r3, #16
 8005522:	d11b      	bne.n	800555c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f06f 0210 	mvn.w	r2, #16
 800552c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2208      	movs	r2, #8
 8005532:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fcc5 	bl	8005ed2 <HAL_TIM_IC_CaptureCallback>
 8005548:	e005      	b.n	8005556 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fcb8 	bl	8005ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fcc7 	bl	8005ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b01      	cmp	r3, #1
 8005568:	d10e      	bne.n	8005588 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b01      	cmp	r3, #1
 8005576:	d107      	bne.n	8005588 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f06f 0201 	mvn.w	r2, #1
 8005580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7fb fd8e 	bl	80010a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005592:	2b40      	cmp	r3, #64	; 0x40
 8005594:	d10e      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a0:	2b40      	cmp	r3, #64	; 0x40
 80055a2:	d107      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fca1 	bl	8005ef6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055b4:	bf00      	nop
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d010      	beq.n	80055f0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d00d      	beq.n	80055f0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b08      	cmp	r3, #8
 80055d8:	d00a      	beq.n	80055f0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b0c      	cmp	r3, #12
 80055de:	d007      	beq.n	80055f0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b3c      	cmp	r3, #60	; 0x3c
 80055e4:	d004      	beq.n	80055f0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80055e6:	f640 5169 	movw	r1, #3433	; 0xd69
 80055ea:	488d      	ldr	r0, [pc, #564]	; (8005820 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80055ec:	f7fb fd72 	bl	80010d4 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b60      	cmp	r3, #96	; 0x60
 80055f6:	d008      	beq.n	800560a <HAL_TIM_PWM_ConfigChannel+0x4e>
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b70      	cmp	r3, #112	; 0x70
 80055fe:	d004      	beq.n	800560a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8005600:	f640 516a 	movw	r1, #3434	; 0xd6a
 8005604:	4886      	ldr	r0, [pc, #536]	; (8005820 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8005606:	f7fb fd65 	bl	80010d4 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d008      	beq.n	8005624 <HAL_TIM_PWM_ConfigChannel+0x68>
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d004      	beq.n	8005624 <HAL_TIM_PWM_ConfigChannel+0x68>
 800561a:	f640 516b 	movw	r1, #3435	; 0xd6b
 800561e:	4880      	ldr	r0, [pc, #512]	; (8005820 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8005620:	f7fb fd58 	bl	80010d4 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d008      	beq.n	800563e <HAL_TIM_PWM_ConfigChannel+0x82>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	2b04      	cmp	r3, #4
 8005632:	d004      	beq.n	800563e <HAL_TIM_PWM_ConfigChannel+0x82>
 8005634:	f640 516c 	movw	r1, #3436	; 0xd6c
 8005638:	4879      	ldr	r0, [pc, #484]	; (8005820 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800563a:	f7fb fd4b 	bl	80010d4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005644:	2b01      	cmp	r3, #1
 8005646:	d101      	bne.n	800564c <HAL_TIM_PWM_ConfigChannel+0x90>
 8005648:	2302      	movs	r3, #2
 800564a:	e13b      	b.n	80058c4 <HAL_TIM_PWM_ConfigChannel+0x308>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b0c      	cmp	r3, #12
 8005660:	f200 8126 	bhi.w	80058b0 <HAL_TIM_PWM_ConfigChannel+0x2f4>
 8005664:	a201      	add	r2, pc, #4	; (adr r2, 800566c <HAL_TIM_PWM_ConfigChannel+0xb0>)
 8005666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566a:	bf00      	nop
 800566c:	080056a1 	.word	0x080056a1
 8005670:	080058b1 	.word	0x080058b1
 8005674:	080058b1 	.word	0x080058b1
 8005678:	080058b1 	.word	0x080058b1
 800567c:	08005731 	.word	0x08005731
 8005680:	080058b1 	.word	0x080058b1
 8005684:	080058b1 	.word	0x080058b1
 8005688:	080058b1 	.word	0x080058b1
 800568c:	080057af 	.word	0x080057af
 8005690:	080058b1 	.word	0x080058b1
 8005694:	080058b1 	.word	0x080058b1
 8005698:	080058b1 	.word	0x080058b1
 800569c:	0800583d 	.word	0x0800583d
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a8:	d022      	beq.n	80056f0 <HAL_TIM_PWM_ConfigChannel+0x134>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a5d      	ldr	r2, [pc, #372]	; (8005824 <HAL_TIM_PWM_ConfigChannel+0x268>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d01d      	beq.n	80056f0 <HAL_TIM_PWM_ConfigChannel+0x134>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a5b      	ldr	r2, [pc, #364]	; (8005828 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d018      	beq.n	80056f0 <HAL_TIM_PWM_ConfigChannel+0x134>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a5a      	ldr	r2, [pc, #360]	; (800582c <HAL_TIM_PWM_ConfigChannel+0x270>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d013      	beq.n	80056f0 <HAL_TIM_PWM_ConfigChannel+0x134>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a58      	ldr	r2, [pc, #352]	; (8005830 <HAL_TIM_PWM_ConfigChannel+0x274>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d00e      	beq.n	80056f0 <HAL_TIM_PWM_ConfigChannel+0x134>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a57      	ldr	r2, [pc, #348]	; (8005834 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d009      	beq.n	80056f0 <HAL_TIM_PWM_ConfigChannel+0x134>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a55      	ldr	r2, [pc, #340]	; (8005838 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d004      	beq.n	80056f0 <HAL_TIM_PWM_ConfigChannel+0x134>
 80056e6:	f640 5178 	movw	r1, #3448	; 0xd78
 80056ea:	484d      	ldr	r0, [pc, #308]	; (8005820 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80056ec:	f7fb fcf2 	bl	80010d4 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68b9      	ldr	r1, [r7, #8]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 fc76 	bl	8005fe8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699a      	ldr	r2, [r3, #24]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 0208 	orr.w	r2, r2, #8
 800570a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	699a      	ldr	r2, [r3, #24]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 0204 	bic.w	r2, r2, #4
 800571a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6999      	ldr	r1, [r3, #24]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	619a      	str	r2, [r3, #24]
      break;
 800572e:	e0c0      	b.n	80058b2 <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005738:	d018      	beq.n	800576c <HAL_TIM_PWM_ConfigChannel+0x1b0>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a39      	ldr	r2, [pc, #228]	; (8005824 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d013      	beq.n	800576c <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a37      	ldr	r2, [pc, #220]	; (8005828 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d00e      	beq.n	800576c <HAL_TIM_PWM_ConfigChannel+0x1b0>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a36      	ldr	r2, [pc, #216]	; (800582c <HAL_TIM_PWM_ConfigChannel+0x270>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d009      	beq.n	800576c <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a34      	ldr	r2, [pc, #208]	; (8005830 <HAL_TIM_PWM_ConfigChannel+0x274>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d004      	beq.n	800576c <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8005762:	f640 5189 	movw	r1, #3465	; 0xd89
 8005766:	482e      	ldr	r0, [pc, #184]	; (8005820 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8005768:	f7fb fcb4 	bl	80010d4 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68b9      	ldr	r1, [r7, #8]
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fc74 	bl	8006060 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	699a      	ldr	r2, [r3, #24]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	699a      	ldr	r2, [r3, #24]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6999      	ldr	r1, [r3, #24]
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	021a      	lsls	r2, r3, #8
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	619a      	str	r2, [r3, #24]
      break;
 80057ac:	e081      	b.n	80058b2 <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b6:	d013      	beq.n	80057e0 <HAL_TIM_PWM_ConfigChannel+0x224>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a19      	ldr	r2, [pc, #100]	; (8005824 <HAL_TIM_PWM_ConfigChannel+0x268>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d00e      	beq.n	80057e0 <HAL_TIM_PWM_ConfigChannel+0x224>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a18      	ldr	r2, [pc, #96]	; (8005828 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d009      	beq.n	80057e0 <HAL_TIM_PWM_ConfigChannel+0x224>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a16      	ldr	r2, [pc, #88]	; (800582c <HAL_TIM_PWM_ConfigChannel+0x270>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d004      	beq.n	80057e0 <HAL_TIM_PWM_ConfigChannel+0x224>
 80057d6:	f640 519a 	movw	r1, #3482	; 0xd9a
 80057da:	4811      	ldr	r0, [pc, #68]	; (8005820 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80057dc:	f7fb fc7a 	bl	80010d4 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68b9      	ldr	r1, [r7, #8]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fc78 	bl	80060dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	69da      	ldr	r2, [r3, #28]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0208 	orr.w	r2, r2, #8
 80057fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	69da      	ldr	r2, [r3, #28]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0204 	bic.w	r2, r2, #4
 800580a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	69d9      	ldr	r1, [r3, #28]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	68da      	ldr	r2, [r3, #12]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	61da      	str	r2, [r3, #28]
      break;
 800581e:	e048      	b.n	80058b2 <HAL_TIM_PWM_ConfigChannel+0x2f6>
 8005820:	0800a278 	.word	0x0800a278
 8005824:	40000400 	.word	0x40000400
 8005828:	40000800 	.word	0x40000800
 800582c:	40000c00 	.word	0x40000c00
 8005830:	40010800 	.word	0x40010800
 8005834:	40010c00 	.word	0x40010c00
 8005838:	40011000 	.word	0x40011000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005844:	d013      	beq.n	800586e <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a20      	ldr	r2, [pc, #128]	; (80058cc <HAL_TIM_PWM_ConfigChannel+0x310>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d00e      	beq.n	800586e <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a1e      	ldr	r2, [pc, #120]	; (80058d0 <HAL_TIM_PWM_ConfigChannel+0x314>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d009      	beq.n	800586e <HAL_TIM_PWM_ConfigChannel+0x2b2>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a1d      	ldr	r2, [pc, #116]	; (80058d4 <HAL_TIM_PWM_ConfigChannel+0x318>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d004      	beq.n	800586e <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8005864:	f640 51ab 	movw	r1, #3499	; 0xdab
 8005868:	481b      	ldr	r0, [pc, #108]	; (80058d8 <HAL_TIM_PWM_ConfigChannel+0x31c>)
 800586a:	f7fb fc33 	bl	80010d4 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68b9      	ldr	r1, [r7, #8]
 8005874:	4618      	mov	r0, r3
 8005876:	f000 fc6e 	bl	8006156 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69da      	ldr	r2, [r3, #28]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69da      	ldr	r2, [r3, #28]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69d9      	ldr	r1, [r3, #28]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	021a      	lsls	r2, r3, #8
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	61da      	str	r2, [r3, #28]
      break;
 80058ae:	e000      	b.n	80058b2 <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    default:
      break;
 80058b0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	40000400 	.word	0x40000400
 80058d0:	40000800 	.word	0x40000800
 80058d4:	40000c00 	.word	0x40000c00
 80058d8:	0800a278 	.word	0x0800a278

080058dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d101      	bne.n	80058f4 <HAL_TIM_ConfigClockSource+0x18>
 80058f0:	2302      	movs	r3, #2
 80058f2:	e2d7      	b.n	8005ea4 <HAL_TIM_ConfigClockSource+0x5c8>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800590c:	d029      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x86>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005916:	d024      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x86>
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d020      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x86>
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b10      	cmp	r3, #16
 8005926:	d01c      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x86>
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b20      	cmp	r3, #32
 800592e:	d018      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x86>
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b30      	cmp	r3, #48	; 0x30
 8005936:	d014      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x86>
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b40      	cmp	r3, #64	; 0x40
 800593e:	d010      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x86>
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2b50      	cmp	r3, #80	; 0x50
 8005946:	d00c      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x86>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2b60      	cmp	r3, #96	; 0x60
 800594e:	d008      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x86>
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b70      	cmp	r3, #112	; 0x70
 8005956:	d004      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x86>
 8005958:	f241 01d0 	movw	r1, #4304	; 0x10d0
 800595c:	4874      	ldr	r0, [pc, #464]	; (8005b30 <HAL_TIM_ConfigClockSource+0x254>)
 800595e:	f7fb fbb9 	bl	80010d4 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005970:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005978:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b40      	cmp	r3, #64	; 0x40
 8005988:	f000 820a 	beq.w	8005da0 <HAL_TIM_ConfigClockSource+0x4c4>
 800598c:	2b40      	cmp	r3, #64	; 0x40
 800598e:	d80f      	bhi.n	80059b0 <HAL_TIM_ConfigClockSource+0xd4>
 8005990:	2b10      	cmp	r3, #16
 8005992:	f000 8256 	beq.w	8005e42 <HAL_TIM_ConfigClockSource+0x566>
 8005996:	2b10      	cmp	r3, #16
 8005998:	d803      	bhi.n	80059a2 <HAL_TIM_ConfigClockSource+0xc6>
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 8251 	beq.w	8005e42 <HAL_TIM_ConfigClockSource+0x566>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80059a0:	e277      	b.n	8005e92 <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 80059a2:	2b20      	cmp	r3, #32
 80059a4:	f000 824d 	beq.w	8005e42 <HAL_TIM_ConfigClockSource+0x566>
 80059a8:	2b30      	cmp	r3, #48	; 0x30
 80059aa:	f000 824a 	beq.w	8005e42 <HAL_TIM_ConfigClockSource+0x566>
      break;
 80059ae:	e270      	b.n	8005e92 <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 80059b0:	2b70      	cmp	r3, #112	; 0x70
 80059b2:	d04c      	beq.n	8005a4e <HAL_TIM_ConfigClockSource+0x172>
 80059b4:	2b70      	cmp	r3, #112	; 0x70
 80059b6:	d806      	bhi.n	80059c6 <HAL_TIM_ConfigClockSource+0xea>
 80059b8:	2b50      	cmp	r3, #80	; 0x50
 80059ba:	f000 8141 	beq.w	8005c40 <HAL_TIM_ConfigClockSource+0x364>
 80059be:	2b60      	cmp	r3, #96	; 0x60
 80059c0:	f000 818f 	beq.w	8005ce2 <HAL_TIM_ConfigClockSource+0x406>
      break;
 80059c4:	e265      	b.n	8005e92 <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 80059c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ca:	d004      	beq.n	80059d6 <HAL_TIM_ConfigClockSource+0xfa>
 80059cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d0:	f000 80c0 	beq.w	8005b54 <HAL_TIM_ConfigClockSource+0x278>
      break;
 80059d4:	e25d      	b.n	8005e92 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059de:	f000 8257 	beq.w	8005e90 <HAL_TIM_ConfigClockSource+0x5b4>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a53      	ldr	r2, [pc, #332]	; (8005b34 <HAL_TIM_ConfigClockSource+0x258>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	f000 8251 	beq.w	8005e90 <HAL_TIM_ConfigClockSource+0x5b4>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a51      	ldr	r2, [pc, #324]	; (8005b38 <HAL_TIM_ConfigClockSource+0x25c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	f000 824b 	beq.w	8005e90 <HAL_TIM_ConfigClockSource+0x5b4>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a4f      	ldr	r2, [pc, #316]	; (8005b3c <HAL_TIM_ConfigClockSource+0x260>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	f000 8245 	beq.w	8005e90 <HAL_TIM_ConfigClockSource+0x5b4>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a4d      	ldr	r2, [pc, #308]	; (8005b40 <HAL_TIM_ConfigClockSource+0x264>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	f000 823f 	beq.w	8005e90 <HAL_TIM_ConfigClockSource+0x5b4>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a4b      	ldr	r2, [pc, #300]	; (8005b44 <HAL_TIM_ConfigClockSource+0x268>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	f000 8239 	beq.w	8005e90 <HAL_TIM_ConfigClockSource+0x5b4>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a49      	ldr	r2, [pc, #292]	; (8005b48 <HAL_TIM_ConfigClockSource+0x26c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	f000 8233 	beq.w	8005e90 <HAL_TIM_ConfigClockSource+0x5b4>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a47      	ldr	r2, [pc, #284]	; (8005b4c <HAL_TIM_ConfigClockSource+0x270>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	f000 822d 	beq.w	8005e90 <HAL_TIM_ConfigClockSource+0x5b4>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a45      	ldr	r2, [pc, #276]	; (8005b50 <HAL_TIM_ConfigClockSource+0x274>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	f000 8227 	beq.w	8005e90 <HAL_TIM_ConfigClockSource+0x5b4>
 8005a42:	f241 01dc 	movw	r1, #4316	; 0x10dc
 8005a46:	483a      	ldr	r0, [pc, #232]	; (8005b30 <HAL_TIM_ConfigClockSource+0x254>)
 8005a48:	f7fb fb44 	bl	80010d4 <assert_failed>
      break;
 8005a4c:	e220      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x5b4>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a56:	d018      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0x1ae>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a35      	ldr	r2, [pc, #212]	; (8005b34 <HAL_TIM_ConfigClockSource+0x258>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d013      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0x1ae>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a34      	ldr	r2, [pc, #208]	; (8005b38 <HAL_TIM_ConfigClockSource+0x25c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d00e      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0x1ae>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a32      	ldr	r2, [pc, #200]	; (8005b3c <HAL_TIM_ConfigClockSource+0x260>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d009      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0x1ae>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a33      	ldr	r2, [pc, #204]	; (8005b48 <HAL_TIM_ConfigClockSource+0x26c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d004      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0x1ae>
 8005a80:	f241 01e3 	movw	r1, #4323	; 0x10e3
 8005a84:	482a      	ldr	r0, [pc, #168]	; (8005b30 <HAL_TIM_ConfigClockSource+0x254>)
 8005a86:	f7fb fb25 	bl	80010d4 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d013      	beq.n	8005aba <HAL_TIM_ConfigClockSource+0x1de>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a9a:	d00e      	beq.n	8005aba <HAL_TIM_ConfigClockSource+0x1de>
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aa4:	d009      	beq.n	8005aba <HAL_TIM_ConfigClockSource+0x1de>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005aae:	d004      	beq.n	8005aba <HAL_TIM_ConfigClockSource+0x1de>
 8005ab0:	f241 01e6 	movw	r1, #4326	; 0x10e6
 8005ab4:	481e      	ldr	r0, [pc, #120]	; (8005b30 <HAL_TIM_ConfigClockSource+0x254>)
 8005ab6:	f7fb fb0d 	bl	80010d4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ac2:	d014      	beq.n	8005aee <HAL_TIM_ConfigClockSource+0x212>
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d010      	beq.n	8005aee <HAL_TIM_ConfigClockSource+0x212>
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00c      	beq.n	8005aee <HAL_TIM_ConfigClockSource+0x212>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d008      	beq.n	8005aee <HAL_TIM_ConfigClockSource+0x212>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2b0a      	cmp	r3, #10
 8005ae2:	d004      	beq.n	8005aee <HAL_TIM_ConfigClockSource+0x212>
 8005ae4:	f241 01e7 	movw	r1, #4327	; 0x10e7
 8005ae8:	4811      	ldr	r0, [pc, #68]	; (8005b30 <HAL_TIM_ConfigClockSource+0x254>)
 8005aea:	f7fb faf3 	bl	80010d4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	2b0f      	cmp	r3, #15
 8005af4:	d904      	bls.n	8005b00 <HAL_TIM_ConfigClockSource+0x224>
 8005af6:	f241 01e8 	movw	r1, #4328	; 0x10e8
 8005afa:	480d      	ldr	r0, [pc, #52]	; (8005b30 <HAL_TIM_ConfigClockSource+0x254>)
 8005afc:	f7fb faea 	bl	80010d4 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6818      	ldr	r0, [r3, #0]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	6899      	ldr	r1, [r3, #8]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f000 fbd6 	bl	80062c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b22:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	609a      	str	r2, [r3, #8]
      break;
 8005b2c:	e1b1      	b.n	8005e92 <HAL_TIM_ConfigClockSource+0x5b6>
 8005b2e:	bf00      	nop
 8005b30:	0800a278 	.word	0x0800a278
 8005b34:	40000400 	.word	0x40000400
 8005b38:	40000800 	.word	0x40000800
 8005b3c:	40000c00 	.word	0x40000c00
 8005b40:	40001000 	.word	0x40001000
 8005b44:	40001400 	.word	0x40001400
 8005b48:	40010800 	.word	0x40010800
 8005b4c:	40010c00 	.word	0x40010c00
 8005b50:	40011000 	.word	0x40011000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b5c:	d022      	beq.n	8005ba4 <HAL_TIM_ConfigClockSource+0x2c8>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a88      	ldr	r2, [pc, #544]	; (8005d84 <HAL_TIM_ConfigClockSource+0x4a8>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d01d      	beq.n	8005ba4 <HAL_TIM_ConfigClockSource+0x2c8>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a86      	ldr	r2, [pc, #536]	; (8005d88 <HAL_TIM_ConfigClockSource+0x4ac>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d018      	beq.n	8005ba4 <HAL_TIM_ConfigClockSource+0x2c8>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a85      	ldr	r2, [pc, #532]	; (8005d8c <HAL_TIM_ConfigClockSource+0x4b0>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d013      	beq.n	8005ba4 <HAL_TIM_ConfigClockSource+0x2c8>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a83      	ldr	r2, [pc, #524]	; (8005d90 <HAL_TIM_ConfigClockSource+0x4b4>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00e      	beq.n	8005ba4 <HAL_TIM_ConfigClockSource+0x2c8>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a82      	ldr	r2, [pc, #520]	; (8005d94 <HAL_TIM_ConfigClockSource+0x4b8>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d009      	beq.n	8005ba4 <HAL_TIM_ConfigClockSource+0x2c8>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a80      	ldr	r2, [pc, #512]	; (8005d98 <HAL_TIM_ConfigClockSource+0x4bc>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d004      	beq.n	8005ba4 <HAL_TIM_ConfigClockSource+0x2c8>
 8005b9a:	f241 01fb 	movw	r1, #4347	; 0x10fb
 8005b9e:	487f      	ldr	r0, [pc, #508]	; (8005d9c <HAL_TIM_ConfigClockSource+0x4c0>)
 8005ba0:	f7fb fa98 	bl	80010d4 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d013      	beq.n	8005bd4 <HAL_TIM_ConfigClockSource+0x2f8>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb4:	d00e      	beq.n	8005bd4 <HAL_TIM_ConfigClockSource+0x2f8>
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bbe:	d009      	beq.n	8005bd4 <HAL_TIM_ConfigClockSource+0x2f8>
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bc8:	d004      	beq.n	8005bd4 <HAL_TIM_ConfigClockSource+0x2f8>
 8005bca:	f241 01fe 	movw	r1, #4350	; 0x10fe
 8005bce:	4873      	ldr	r0, [pc, #460]	; (8005d9c <HAL_TIM_ConfigClockSource+0x4c0>)
 8005bd0:	f7fb fa80 	bl	80010d4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bdc:	d014      	beq.n	8005c08 <HAL_TIM_ConfigClockSource+0x32c>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d010      	beq.n	8005c08 <HAL_TIM_ConfigClockSource+0x32c>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00c      	beq.n	8005c08 <HAL_TIM_ConfigClockSource+0x32c>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d008      	beq.n	8005c08 <HAL_TIM_ConfigClockSource+0x32c>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	2b0a      	cmp	r3, #10
 8005bfc:	d004      	beq.n	8005c08 <HAL_TIM_ConfigClockSource+0x32c>
 8005bfe:	f241 01ff 	movw	r1, #4351	; 0x10ff
 8005c02:	4866      	ldr	r0, [pc, #408]	; (8005d9c <HAL_TIM_ConfigClockSource+0x4c0>)
 8005c04:	f7fb fa66 	bl	80010d4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	2b0f      	cmp	r3, #15
 8005c0e:	d904      	bls.n	8005c1a <HAL_TIM_ConfigClockSource+0x33e>
 8005c10:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8005c14:	4861      	ldr	r0, [pc, #388]	; (8005d9c <HAL_TIM_ConfigClockSource+0x4c0>)
 8005c16:	f7fb fa5d 	bl	80010d4 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6818      	ldr	r0, [r3, #0]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	6899      	ldr	r1, [r3, #8]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	f000 fb49 	bl	80062c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c3c:	609a      	str	r2, [r3, #8]
      break;
 8005c3e:	e128      	b.n	8005e92 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c48:	d018      	beq.n	8005c7c <HAL_TIM_ConfigClockSource+0x3a0>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a4d      	ldr	r2, [pc, #308]	; (8005d84 <HAL_TIM_ConfigClockSource+0x4a8>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d013      	beq.n	8005c7c <HAL_TIM_ConfigClockSource+0x3a0>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a4b      	ldr	r2, [pc, #300]	; (8005d88 <HAL_TIM_ConfigClockSource+0x4ac>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00e      	beq.n	8005c7c <HAL_TIM_ConfigClockSource+0x3a0>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a4a      	ldr	r2, [pc, #296]	; (8005d8c <HAL_TIM_ConfigClockSource+0x4b0>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d009      	beq.n	8005c7c <HAL_TIM_ConfigClockSource+0x3a0>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a48      	ldr	r2, [pc, #288]	; (8005d90 <HAL_TIM_ConfigClockSource+0x4b4>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d004      	beq.n	8005c7c <HAL_TIM_ConfigClockSource+0x3a0>
 8005c72:	f241 110f 	movw	r1, #4367	; 0x110f
 8005c76:	4849      	ldr	r0, [pc, #292]	; (8005d9c <HAL_TIM_ConfigClockSource+0x4c0>)
 8005c78:	f7fb fa2c 	bl	80010d4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c84:	d014      	beq.n	8005cb0 <HAL_TIM_ConfigClockSource+0x3d4>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d010      	beq.n	8005cb0 <HAL_TIM_ConfigClockSource+0x3d4>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00c      	beq.n	8005cb0 <HAL_TIM_ConfigClockSource+0x3d4>
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d008      	beq.n	8005cb0 <HAL_TIM_ConfigClockSource+0x3d4>
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2b0a      	cmp	r3, #10
 8005ca4:	d004      	beq.n	8005cb0 <HAL_TIM_ConfigClockSource+0x3d4>
 8005ca6:	f241 1112 	movw	r1, #4370	; 0x1112
 8005caa:	483c      	ldr	r0, [pc, #240]	; (8005d9c <HAL_TIM_ConfigClockSource+0x4c0>)
 8005cac:	f7fb fa12 	bl	80010d4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	2b0f      	cmp	r3, #15
 8005cb6:	d904      	bls.n	8005cc2 <HAL_TIM_ConfigClockSource+0x3e6>
 8005cb8:	f241 1113 	movw	r1, #4371	; 0x1113
 8005cbc:	4837      	ldr	r0, [pc, #220]	; (8005d9c <HAL_TIM_ConfigClockSource+0x4c0>)
 8005cbe:	f7fb fa09 	bl	80010d4 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6818      	ldr	r0, [r3, #0]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	6859      	ldr	r1, [r3, #4]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f000 fa7f 	bl	80061d2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2150      	movs	r1, #80	; 0x50
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 fad6 	bl	800628c <TIM_ITRx_SetConfig>
      break;
 8005ce0:	e0d7      	b.n	8005e92 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cea:	d018      	beq.n	8005d1e <HAL_TIM_ConfigClockSource+0x442>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a24      	ldr	r2, [pc, #144]	; (8005d84 <HAL_TIM_ConfigClockSource+0x4a8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d013      	beq.n	8005d1e <HAL_TIM_ConfigClockSource+0x442>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a23      	ldr	r2, [pc, #140]	; (8005d88 <HAL_TIM_ConfigClockSource+0x4ac>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d00e      	beq.n	8005d1e <HAL_TIM_ConfigClockSource+0x442>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a21      	ldr	r2, [pc, #132]	; (8005d8c <HAL_TIM_ConfigClockSource+0x4b0>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d009      	beq.n	8005d1e <HAL_TIM_ConfigClockSource+0x442>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a20      	ldr	r2, [pc, #128]	; (8005d90 <HAL_TIM_ConfigClockSource+0x4b4>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d004      	beq.n	8005d1e <HAL_TIM_ConfigClockSource+0x442>
 8005d14:	f241 111f 	movw	r1, #4383	; 0x111f
 8005d18:	4820      	ldr	r0, [pc, #128]	; (8005d9c <HAL_TIM_ConfigClockSource+0x4c0>)
 8005d1a:	f7fb f9db 	bl	80010d4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d26:	d014      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x476>
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d010      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x476>
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00c      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x476>
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d008      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x476>
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	2b0a      	cmp	r3, #10
 8005d46:	d004      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x476>
 8005d48:	f241 1122 	movw	r1, #4386	; 0x1122
 8005d4c:	4813      	ldr	r0, [pc, #76]	; (8005d9c <HAL_TIM_ConfigClockSource+0x4c0>)
 8005d4e:	f7fb f9c1 	bl	80010d4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	2b0f      	cmp	r3, #15
 8005d58:	d904      	bls.n	8005d64 <HAL_TIM_ConfigClockSource+0x488>
 8005d5a:	f241 1123 	movw	r1, #4387	; 0x1123
 8005d5e:	480f      	ldr	r0, [pc, #60]	; (8005d9c <HAL_TIM_ConfigClockSource+0x4c0>)
 8005d60:	f7fb f9b8 	bl	80010d4 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6818      	ldr	r0, [r3, #0]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	6859      	ldr	r1, [r3, #4]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	461a      	mov	r2, r3
 8005d72:	f000 fa5c 	bl	800622e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2160      	movs	r1, #96	; 0x60
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 fa85 	bl	800628c <TIM_ITRx_SetConfig>
      break;
 8005d82:	e086      	b.n	8005e92 <HAL_TIM_ConfigClockSource+0x5b6>
 8005d84:	40000400 	.word	0x40000400
 8005d88:	40000800 	.word	0x40000800
 8005d8c:	40000c00 	.word	0x40000c00
 8005d90:	40010800 	.word	0x40010800
 8005d94:	40010c00 	.word	0x40010c00
 8005d98:	40011000 	.word	0x40011000
 8005d9c:	0800a278 	.word	0x0800a278
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da8:	d018      	beq.n	8005ddc <HAL_TIM_ConfigClockSource+0x500>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a3f      	ldr	r2, [pc, #252]	; (8005eac <HAL_TIM_ConfigClockSource+0x5d0>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d013      	beq.n	8005ddc <HAL_TIM_ConfigClockSource+0x500>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a3d      	ldr	r2, [pc, #244]	; (8005eb0 <HAL_TIM_ConfigClockSource+0x5d4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00e      	beq.n	8005ddc <HAL_TIM_ConfigClockSource+0x500>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a3c      	ldr	r2, [pc, #240]	; (8005eb4 <HAL_TIM_ConfigClockSource+0x5d8>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d009      	beq.n	8005ddc <HAL_TIM_ConfigClockSource+0x500>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a3a      	ldr	r2, [pc, #232]	; (8005eb8 <HAL_TIM_ConfigClockSource+0x5dc>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d004      	beq.n	8005ddc <HAL_TIM_ConfigClockSource+0x500>
 8005dd2:	f241 112f 	movw	r1, #4399	; 0x112f
 8005dd6:	4839      	ldr	r0, [pc, #228]	; (8005ebc <HAL_TIM_ConfigClockSource+0x5e0>)
 8005dd8:	f7fb f97c 	bl	80010d4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005de4:	d014      	beq.n	8005e10 <HAL_TIM_ConfigClockSource+0x534>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d010      	beq.n	8005e10 <HAL_TIM_ConfigClockSource+0x534>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00c      	beq.n	8005e10 <HAL_TIM_ConfigClockSource+0x534>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d008      	beq.n	8005e10 <HAL_TIM_ConfigClockSource+0x534>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	2b0a      	cmp	r3, #10
 8005e04:	d004      	beq.n	8005e10 <HAL_TIM_ConfigClockSource+0x534>
 8005e06:	f241 1132 	movw	r1, #4402	; 0x1132
 8005e0a:	482c      	ldr	r0, [pc, #176]	; (8005ebc <HAL_TIM_ConfigClockSource+0x5e0>)
 8005e0c:	f7fb f962 	bl	80010d4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	2b0f      	cmp	r3, #15
 8005e16:	d904      	bls.n	8005e22 <HAL_TIM_ConfigClockSource+0x546>
 8005e18:	f241 1133 	movw	r1, #4403	; 0x1133
 8005e1c:	4827      	ldr	r0, [pc, #156]	; (8005ebc <HAL_TIM_ConfigClockSource+0x5e0>)
 8005e1e:	f7fb f959 	bl	80010d4 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6818      	ldr	r0, [r3, #0]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	6859      	ldr	r1, [r3, #4]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	f000 f9cf 	bl	80061d2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2140      	movs	r1, #64	; 0x40
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 fa26 	bl	800628c <TIM_ITRx_SetConfig>
      break;
 8005e40:	e027      	b.n	8005e92 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e4a:	d018      	beq.n	8005e7e <HAL_TIM_ConfigClockSource+0x5a2>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a16      	ldr	r2, [pc, #88]	; (8005eac <HAL_TIM_ConfigClockSource+0x5d0>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d013      	beq.n	8005e7e <HAL_TIM_ConfigClockSource+0x5a2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a15      	ldr	r2, [pc, #84]	; (8005eb0 <HAL_TIM_ConfigClockSource+0x5d4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d00e      	beq.n	8005e7e <HAL_TIM_ConfigClockSource+0x5a2>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a13      	ldr	r2, [pc, #76]	; (8005eb4 <HAL_TIM_ConfigClockSource+0x5d8>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d009      	beq.n	8005e7e <HAL_TIM_ConfigClockSource+0x5a2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a12      	ldr	r2, [pc, #72]	; (8005eb8 <HAL_TIM_ConfigClockSource+0x5dc>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d004      	beq.n	8005e7e <HAL_TIM_ConfigClockSource+0x5a2>
 8005e74:	f241 1142 	movw	r1, #4418	; 0x1142
 8005e78:	4810      	ldr	r0, [pc, #64]	; (8005ebc <HAL_TIM_ConfigClockSource+0x5e0>)
 8005e7a:	f7fb f92b 	bl	80010d4 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4619      	mov	r1, r3
 8005e88:	4610      	mov	r0, r2
 8005e8a:	f000 f9ff 	bl	800628c <TIM_ITRx_SetConfig>
      break;
 8005e8e:	e000      	b.n	8005e92 <HAL_TIM_ConfigClockSource+0x5b6>
      break;
 8005e90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	40000400 	.word	0x40000400
 8005eb0:	40000800 	.word	0x40000800
 8005eb4:	40000c00 	.word	0x40000c00
 8005eb8:	40010800 	.word	0x40010800
 8005ebc:	0800a278 	.word	0x0800a278

08005ec0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bc80      	pop	{r7}
 8005ed0:	4770      	bx	lr

08005ed2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bc80      	pop	{r7}
 8005ee2:	4770      	bx	lr

08005ee4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bc80      	pop	{r7}
 8005ef4:	4770      	bx	lr

08005ef6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bc80      	pop	{r7}
 8005f06:	4770      	bx	lr

08005f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f1e:	d00f      	beq.n	8005f40 <TIM_Base_SetConfig+0x38>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a2b      	ldr	r2, [pc, #172]	; (8005fd0 <TIM_Base_SetConfig+0xc8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d00b      	beq.n	8005f40 <TIM_Base_SetConfig+0x38>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a2a      	ldr	r2, [pc, #168]	; (8005fd4 <TIM_Base_SetConfig+0xcc>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d007      	beq.n	8005f40 <TIM_Base_SetConfig+0x38>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a29      	ldr	r2, [pc, #164]	; (8005fd8 <TIM_Base_SetConfig+0xd0>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d003      	beq.n	8005f40 <TIM_Base_SetConfig+0x38>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a28      	ldr	r2, [pc, #160]	; (8005fdc <TIM_Base_SetConfig+0xd4>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d108      	bne.n	8005f52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f58:	d017      	beq.n	8005f8a <TIM_Base_SetConfig+0x82>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a1c      	ldr	r2, [pc, #112]	; (8005fd0 <TIM_Base_SetConfig+0xc8>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d013      	beq.n	8005f8a <TIM_Base_SetConfig+0x82>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a1b      	ldr	r2, [pc, #108]	; (8005fd4 <TIM_Base_SetConfig+0xcc>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d00f      	beq.n	8005f8a <TIM_Base_SetConfig+0x82>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a1a      	ldr	r2, [pc, #104]	; (8005fd8 <TIM_Base_SetConfig+0xd0>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d00b      	beq.n	8005f8a <TIM_Base_SetConfig+0x82>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a19      	ldr	r2, [pc, #100]	; (8005fdc <TIM_Base_SetConfig+0xd4>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d007      	beq.n	8005f8a <TIM_Base_SetConfig+0x82>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a18      	ldr	r2, [pc, #96]	; (8005fe0 <TIM_Base_SetConfig+0xd8>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d003      	beq.n	8005f8a <TIM_Base_SetConfig+0x82>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a17      	ldr	r2, [pc, #92]	; (8005fe4 <TIM_Base_SetConfig+0xdc>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d108      	bne.n	8005f9c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	689a      	ldr	r2, [r3, #8]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	615a      	str	r2, [r3, #20]
}
 8005fc6:	bf00      	nop
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bc80      	pop	{r7}
 8005fce:	4770      	bx	lr
 8005fd0:	40000400 	.word	0x40000400
 8005fd4:	40000800 	.word	0x40000800
 8005fd8:	40000c00 	.word	0x40000c00
 8005fdc:	40010800 	.word	0x40010800
 8005fe0:	40010c00 	.word	0x40010c00
 8005fe4:	40011000 	.word	0x40011000

08005fe8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	f023 0201 	bic.w	r2, r3, #1
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 0303 	bic.w	r3, r3, #3
 800601e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f023 0302 	bic.w	r3, r3, #2
 8006030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	4313      	orrs	r3, r2
 800603a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	621a      	str	r2, [r3, #32]
}
 8006056:	bf00      	nop
 8006058:	371c      	adds	r7, #28
 800605a:	46bd      	mov	sp, r7
 800605c:	bc80      	pop	{r7}
 800605e:	4770      	bx	lr

08006060 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	f023 0210 	bic.w	r2, r3, #16
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800608e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	021b      	lsls	r3, r3, #8
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f023 0320 	bic.w	r3, r3, #32
 80060aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	011b      	lsls	r3, r3, #4
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	621a      	str	r2, [r3, #32]
}
 80060d2:	bf00      	nop
 80060d4:	371c      	adds	r7, #28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bc80      	pop	{r7}
 80060da:	4770      	bx	lr

080060dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f023 0303 	bic.w	r3, r3, #3
 8006112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	4313      	orrs	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	021b      	lsls	r3, r3, #8
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	4313      	orrs	r3, r2
 8006130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	621a      	str	r2, [r3, #32]
}
 800614c:	bf00      	nop
 800614e:	371c      	adds	r7, #28
 8006150:	46bd      	mov	sp, r7
 8006152:	bc80      	pop	{r7}
 8006154:	4770      	bx	lr

08006156 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006156:	b480      	push	{r7}
 8006158:	b087      	sub	sp, #28
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
 800615e:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006184:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800618c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	021b      	lsls	r3, r3, #8
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	4313      	orrs	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	031b      	lsls	r3, r3, #12
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	621a      	str	r2, [r3, #32]
}
 80061c8:	bf00      	nop
 80061ca:	371c      	adds	r7, #28
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bc80      	pop	{r7}
 80061d0:	4770      	bx	lr

080061d2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b087      	sub	sp, #28
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	60f8      	str	r0, [r7, #12]
 80061da:	60b9      	str	r1, [r7, #8]
 80061dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	f023 0201 	bic.w	r2, r3, #1
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	011b      	lsls	r3, r3, #4
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	4313      	orrs	r3, r2
 8006206:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f023 030a 	bic.w	r3, r3, #10
 800620e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	4313      	orrs	r3, r2
 8006216:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	621a      	str	r2, [r3, #32]
}
 8006224:	bf00      	nop
 8006226:	371c      	adds	r7, #28
 8006228:	46bd      	mov	sp, r7
 800622a:	bc80      	pop	{r7}
 800622c:	4770      	bx	lr

0800622e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800622e:	b480      	push	{r7}
 8006230:	b087      	sub	sp, #28
 8006232:	af00      	add	r7, sp, #0
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	f023 0210 	bic.w	r2, r3, #16
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006258:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	031b      	lsls	r3, r3, #12
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800626a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	011b      	lsls	r3, r3, #4
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	4313      	orrs	r3, r2
 8006274:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	621a      	str	r2, [r3, #32]
}
 8006282:	bf00      	nop
 8006284:	371c      	adds	r7, #28
 8006286:	46bd      	mov	sp, r7
 8006288:	bc80      	pop	{r7}
 800628a:	4770      	bx	lr

0800628c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	f043 0307 	orr.w	r3, r3, #7
 80062ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	609a      	str	r2, [r3, #8]
}
 80062b6:	bf00      	nop
 80062b8:	3714      	adds	r7, #20
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bc80      	pop	{r7}
 80062be:	4770      	bx	lr

080062c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	021a      	lsls	r2, r3, #8
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	431a      	orrs	r2, r3
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	609a      	str	r2, [r3, #8]
}
 80062f4:	bf00      	nop
 80062f6:	371c      	adds	r7, #28
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bc80      	pop	{r7}
 80062fc:	4770      	bx	lr
	...

08006300 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006312:	d01c      	beq.n	800634e <TIM_CCxChannelCmd+0x4e>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4a26      	ldr	r2, [pc, #152]	; (80063b0 <TIM_CCxChannelCmd+0xb0>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d018      	beq.n	800634e <TIM_CCxChannelCmd+0x4e>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4a25      	ldr	r2, [pc, #148]	; (80063b4 <TIM_CCxChannelCmd+0xb4>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d014      	beq.n	800634e <TIM_CCxChannelCmd+0x4e>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	4a24      	ldr	r2, [pc, #144]	; (80063b8 <TIM_CCxChannelCmd+0xb8>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d010      	beq.n	800634e <TIM_CCxChannelCmd+0x4e>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4a23      	ldr	r2, [pc, #140]	; (80063bc <TIM_CCxChannelCmd+0xbc>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d00c      	beq.n	800634e <TIM_CCxChannelCmd+0x4e>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	4a22      	ldr	r2, [pc, #136]	; (80063c0 <TIM_CCxChannelCmd+0xc0>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d008      	beq.n	800634e <TIM_CCxChannelCmd+0x4e>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4a21      	ldr	r2, [pc, #132]	; (80063c4 <TIM_CCxChannelCmd+0xc4>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d004      	beq.n	800634e <TIM_CCxChannelCmd+0x4e>
 8006344:	f641 0169 	movw	r1, #6249	; 0x1869
 8006348:	481f      	ldr	r0, [pc, #124]	; (80063c8 <TIM_CCxChannelCmd+0xc8>)
 800634a:	f7fa fec3 	bl	80010d4 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d010      	beq.n	8006376 <TIM_CCxChannelCmd+0x76>
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2b04      	cmp	r3, #4
 8006358:	d00d      	beq.n	8006376 <TIM_CCxChannelCmd+0x76>
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b08      	cmp	r3, #8
 800635e:	d00a      	beq.n	8006376 <TIM_CCxChannelCmd+0x76>
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	2b0c      	cmp	r3, #12
 8006364:	d007      	beq.n	8006376 <TIM_CCxChannelCmd+0x76>
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2b3c      	cmp	r3, #60	; 0x3c
 800636a:	d004      	beq.n	8006376 <TIM_CCxChannelCmd+0x76>
 800636c:	f641 016a 	movw	r1, #6250	; 0x186a
 8006370:	4815      	ldr	r0, [pc, #84]	; (80063c8 <TIM_CCxChannelCmd+0xc8>)
 8006372:	f7fa feaf 	bl	80010d4 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	f003 031f 	and.w	r3, r3, #31
 800637c:	2201      	movs	r2, #1
 800637e:	fa02 f303 	lsl.w	r3, r2, r3
 8006382:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6a1a      	ldr	r2, [r3, #32]
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	43db      	mvns	r3, r3
 800638c:	401a      	ands	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6a1a      	ldr	r2, [r3, #32]
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	f003 031f 	and.w	r3, r3, #31
 800639c:	6879      	ldr	r1, [r7, #4]
 800639e:	fa01 f303 	lsl.w	r3, r1, r3
 80063a2:	431a      	orrs	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	621a      	str	r2, [r3, #32]
}
 80063a8:	bf00      	nop
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	40000400 	.word	0x40000400
 80063b4:	40000800 	.word	0x40000800
 80063b8:	40000c00 	.word	0x40000c00
 80063bc:	40010800 	.word	0x40010800
 80063c0:	40010c00 	.word	0x40010c00
 80063c4:	40011000 	.word	0x40011000
 80063c8:	0800a278 	.word	0x0800a278

080063cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063de:	d017      	beq.n	8006410 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a41      	ldr	r2, [pc, #260]	; (80064ec <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d012      	beq.n	8006410 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a40      	ldr	r2, [pc, #256]	; (80064f0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d00d      	beq.n	8006410 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a3e      	ldr	r2, [pc, #248]	; (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d008      	beq.n	8006410 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a3d      	ldr	r2, [pc, #244]	; (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d003      	beq.n	8006410 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8006408:	215a      	movs	r1, #90	; 0x5a
 800640a:	483c      	ldr	r0, [pc, #240]	; (80064fc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800640c:	f7fa fe62 	bl	80010d4 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d01f      	beq.n	8006458 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b10      	cmp	r3, #16
 800641e:	d01b      	beq.n	8006458 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b20      	cmp	r3, #32
 8006426:	d017      	beq.n	8006458 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b30      	cmp	r3, #48	; 0x30
 800642e:	d013      	beq.n	8006458 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b40      	cmp	r3, #64	; 0x40
 8006436:	d00f      	beq.n	8006458 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b50      	cmp	r3, #80	; 0x50
 800643e:	d00b      	beq.n	8006458 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b60      	cmp	r3, #96	; 0x60
 8006446:	d007      	beq.n	8006458 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b70      	cmp	r3, #112	; 0x70
 800644e:	d003      	beq.n	8006458 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006450:	215b      	movs	r1, #91	; 0x5b
 8006452:	482a      	ldr	r0, [pc, #168]	; (80064fc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006454:	f7fa fe3e 	bl	80010d4 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	2b80      	cmp	r3, #128	; 0x80
 800645e:	d007      	beq.n	8006470 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8006468:	215c      	movs	r1, #92	; 0x5c
 800646a:	4824      	ldr	r0, [pc, #144]	; (80064fc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800646c:	f7fa fe32 	bl	80010d4 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006476:	2b01      	cmp	r3, #1
 8006478:	d101      	bne.n	800647e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
 800647a:	2302      	movs	r3, #2
 800647c:	e032      	b.n	80064e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2202      	movs	r2, #2
 800648a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064b6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	4313      	orrs	r3, r2
 80064c0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	40000400 	.word	0x40000400
 80064f0:	40000800 	.word	0x40000800
 80064f4:	40000c00 	.word	0x40000c00
 80064f8:	40010800 	.word	0x40010800
 80064fc:	0800a2b0 	.word	0x0800a2b0

08006500 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e0aa      	b.n	8006668 <HAL_UART_Init+0x168>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d02c      	beq.n	8006574 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a54      	ldr	r2, [pc, #336]	; (8006670 <HAL_UART_Init+0x170>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d00e      	beq.n	8006542 <HAL_UART_Init+0x42>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a52      	ldr	r2, [pc, #328]	; (8006674 <HAL_UART_Init+0x174>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d009      	beq.n	8006542 <HAL_UART_Init+0x42>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a51      	ldr	r2, [pc, #324]	; (8006678 <HAL_UART_Init+0x178>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d004      	beq.n	8006542 <HAL_UART_Init+0x42>
 8006538:	f240 1145 	movw	r1, #325	; 0x145
 800653c:	484f      	ldr	r0, [pc, #316]	; (800667c <HAL_UART_Init+0x17c>)
 800653e:	f7fa fdc9 	bl	80010d4 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d032      	beq.n	80065b0 <HAL_UART_Init+0xb0>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006552:	d02d      	beq.n	80065b0 <HAL_UART_Init+0xb0>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800655c:	d028      	beq.n	80065b0 <HAL_UART_Init+0xb0>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006566:	d023      	beq.n	80065b0 <HAL_UART_Init+0xb0>
 8006568:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800656c:	4843      	ldr	r0, [pc, #268]	; (800667c <HAL_UART_Init+0x17c>)
 800656e:	f7fa fdb1 	bl	80010d4 <assert_failed>
 8006572:	e01d      	b.n	80065b0 <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a3d      	ldr	r2, [pc, #244]	; (8006670 <HAL_UART_Init+0x170>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d018      	beq.n	80065b0 <HAL_UART_Init+0xb0>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a3c      	ldr	r2, [pc, #240]	; (8006674 <HAL_UART_Init+0x174>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d013      	beq.n	80065b0 <HAL_UART_Init+0xb0>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a3a      	ldr	r2, [pc, #232]	; (8006678 <HAL_UART_Init+0x178>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00e      	beq.n	80065b0 <HAL_UART_Init+0xb0>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a3a      	ldr	r2, [pc, #232]	; (8006680 <HAL_UART_Init+0x180>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d009      	beq.n	80065b0 <HAL_UART_Init+0xb0>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a38      	ldr	r2, [pc, #224]	; (8006684 <HAL_UART_Init+0x184>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d004      	beq.n	80065b0 <HAL_UART_Init+0xb0>
 80065a6:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80065aa:	4834      	ldr	r0, [pc, #208]	; (800667c <HAL_UART_Init+0x17c>)
 80065ac:	f7fa fd92 	bl	80010d4 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d009      	beq.n	80065cc <HAL_UART_Init+0xcc>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c0:	d004      	beq.n	80065cc <HAL_UART_Init+0xcc>
 80065c2:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80065c6:	482d      	ldr	r0, [pc, #180]	; (800667c <HAL_UART_Init+0x17c>)
 80065c8:	f7fa fd84 	bl	80010d4 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	69db      	ldr	r3, [r3, #28]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d009      	beq.n	80065e8 <HAL_UART_Init+0xe8>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065dc:	d004      	beq.n	80065e8 <HAL_UART_Init+0xe8>
 80065de:	f240 114d 	movw	r1, #333	; 0x14d
 80065e2:	4826      	ldr	r0, [pc, #152]	; (800667c <HAL_UART_Init+0x17c>)
 80065e4:	f7fa fd76 	bl	80010d4 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d106      	bne.n	8006602 <HAL_UART_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7fb f8c3 	bl	8001788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2224      	movs	r2, #36	; 0x24
 8006606:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68da      	ldr	r2, [r3, #12]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006618:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fa3a 	bl	8006a94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691a      	ldr	r2, [r3, #16]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800662e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	695a      	ldr	r2, [r3, #20]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800663e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68da      	ldr	r2, [r3, #12]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800664e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2220      	movs	r2, #32
 800665a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2220      	movs	r2, #32
 8006662:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3708      	adds	r7, #8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	40013800 	.word	0x40013800
 8006674:	40004400 	.word	0x40004400
 8006678:	40004800 	.word	0x40004800
 800667c:	0800a2ec 	.word	0x0800a2ec
 8006680:	40004c00 	.word	0x40004c00
 8006684:	40005000 	.word	0x40005000

08006688 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	4613      	mov	r3, r2
 8006694:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b20      	cmp	r3, #32
 80066a0:	d153      	bne.n	800674a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <HAL_UART_Transmit_DMA+0x26>
 80066a8:	88fb      	ldrh	r3, [r7, #6]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e04c      	b.n	800674c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d101      	bne.n	80066c0 <HAL_UART_Transmit_DMA+0x38>
 80066bc:	2302      	movs	r3, #2
 80066be:	e045      	b.n	800674c <HAL_UART_Transmit_DMA+0xc4>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	88fa      	ldrh	r2, [r7, #6]
 80066d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	88fa      	ldrh	r2, [r7, #6]
 80066d8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2221      	movs	r2, #33	; 0x21
 80066e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ec:	4a19      	ldr	r2, [pc, #100]	; (8006754 <HAL_UART_Transmit_DMA+0xcc>)
 80066ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f4:	4a18      	ldr	r2, [pc, #96]	; (8006758 <HAL_UART_Transmit_DMA+0xd0>)
 80066f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fc:	4a17      	ldr	r2, [pc, #92]	; (800675c <HAL_UART_Transmit_DMA+0xd4>)
 80066fe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006704:	2200      	movs	r2, #0
 8006706:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8006708:	f107 0308 	add.w	r3, r7, #8
 800670c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	6819      	ldr	r1, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3304      	adds	r3, #4
 800671c:	461a      	mov	r2, r3
 800671e:	88fb      	ldrh	r3, [r7, #6]
 8006720:	f7fc f8b0 	bl	8002884 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800672c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	695a      	ldr	r2, [r3, #20]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006744:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006746:	2300      	movs	r3, #0
 8006748:	e000      	b.n	800674c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800674a:	2302      	movs	r3, #2
  }
}
 800674c:	4618      	mov	r0, r3
 800674e:	3718      	adds	r7, #24
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	080068a9 	.word	0x080068a9
 8006758:	080068fb 	.word	0x080068fb
 800675c:	0800699b 	.word	0x0800699b

08006760 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	4613      	mov	r3, r2
 800676c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b20      	cmp	r3, #32
 8006778:	d166      	bne.n	8006848 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d002      	beq.n	8006786 <HAL_UART_Receive_DMA+0x26>
 8006780:	88fb      	ldrh	r3, [r7, #6]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e05f      	b.n	800684a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006790:	2b01      	cmp	r3, #1
 8006792:	d101      	bne.n	8006798 <HAL_UART_Receive_DMA+0x38>
 8006794:	2302      	movs	r3, #2
 8006796:	e058      	b.n	800684a <HAL_UART_Receive_DMA+0xea>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	88fa      	ldrh	r2, [r7, #6]
 80067aa:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2222      	movs	r2, #34	; 0x22
 80067b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067be:	4a25      	ldr	r2, [pc, #148]	; (8006854 <HAL_UART_Receive_DMA+0xf4>)
 80067c0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c6:	4a24      	ldr	r2, [pc, #144]	; (8006858 <HAL_UART_Receive_DMA+0xf8>)
 80067c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ce:	4a23      	ldr	r2, [pc, #140]	; (800685c <HAL_UART_Receive_DMA+0xfc>)
 80067d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d6:	2200      	movs	r2, #0
 80067d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 80067da:	f107 0308 	add.w	r3, r7, #8
 80067de:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	3304      	adds	r3, #4
 80067ea:	4619      	mov	r1, r3
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	88fb      	ldrh	r3, [r7, #6]
 80067f2:	f7fc f847 	bl	8002884 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80067f6:	2300      	movs	r3, #0
 80067f8:	613b      	str	r3, [r7, #16]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	613b      	str	r3, [r7, #16]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	613b      	str	r3, [r7, #16]
 800680a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68da      	ldr	r2, [r3, #12]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006822:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	695a      	ldr	r2, [r3, #20]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0201 	orr.w	r2, r2, #1
 8006832:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	695a      	ldr	r2, [r3, #20]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006842:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006844:	2300      	movs	r3, #0
 8006846:	e000      	b.n	800684a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006848:	2302      	movs	r3, #2
  }
}
 800684a:	4618      	mov	r0, r3
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	08006917 	.word	0x08006917
 8006858:	0800697f 	.word	0x0800697f
 800685c:	0800699b 	.word	0x0800699b

08006860 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	bc80      	pop	{r7}
 8006870:	4770      	bx	lr

08006872 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800687a:	bf00      	nop
 800687c:	370c      	adds	r7, #12
 800687e:	46bd      	mov	sp, r7
 8006880:	bc80      	pop	{r7}
 8006882:	4770      	bx	lr

08006884 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	bc80      	pop	{r7}
 8006894:	4770      	bx	lr

08006896 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006896:	b480      	push	{r7}
 8006898:	b083      	sub	sp, #12
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800689e:	bf00      	nop
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bc80      	pop	{r7}
 80068a6:	4770      	bx	lr

080068a8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0320 	and.w	r3, r3, #32
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d113      	bne.n	80068ec <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695a      	ldr	r2, [r3, #20]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068d8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68da      	ldr	r2, [r3, #12]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068e8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068ea:	e002      	b.n	80068f2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f7ff ffb7 	bl	8006860 <HAL_UART_TxCpltCallback>
}
 80068f2:	bf00      	nop
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b084      	sub	sp, #16
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006906:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f7ff ffb2 	bl	8006872 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800690e:	bf00      	nop
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006922:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0320 	and.w	r3, r3, #32
 800692e:	2b00      	cmp	r3, #0
 8006930:	d11e      	bne.n	8006970 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006946:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	695a      	ldr	r2, [r3, #20]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 0201 	bic.w	r2, r2, #1
 8006956:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	695a      	ldr	r2, [r3, #20]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006966:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2220      	movs	r2, #32
 800696c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f7f9 fef9 	bl	8000768 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006976:	bf00      	nop
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f7ff ff79 	bl	8006884 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006992:	bf00      	nop
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b084      	sub	sp, #16
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069aa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b6:	2b80      	cmp	r3, #128	; 0x80
 80069b8:	bf0c      	ite	eq
 80069ba:	2301      	moveq	r3, #1
 80069bc:	2300      	movne	r3, #0
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b21      	cmp	r3, #33	; 0x21
 80069cc:	d108      	bne.n	80069e0 <UART_DMAError+0x46>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d005      	beq.n	80069e0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2200      	movs	r2, #0
 80069d8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80069da:	68b8      	ldr	r0, [r7, #8]
 80069dc:	f000 f827 	bl	8006a2e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ea:	2b40      	cmp	r3, #64	; 0x40
 80069ec:	bf0c      	ite	eq
 80069ee:	2301      	moveq	r3, #1
 80069f0:	2300      	movne	r3, #0
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b22      	cmp	r3, #34	; 0x22
 8006a00:	d108      	bne.n	8006a14 <UART_DMAError+0x7a>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d005      	beq.n	8006a14 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006a0e:	68b8      	ldr	r0, [r7, #8]
 8006a10:	f000 f822 	bl	8006a58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a18:	f043 0210 	orr.w	r2, r3, #16
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a20:	68b8      	ldr	r0, [r7, #8]
 8006a22:	f7ff ff38 	bl	8006896 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a26:	bf00      	nop
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68da      	ldr	r2, [r3, #12]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006a44:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006a4e:	bf00      	nop
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bc80      	pop	{r7}
 8006a56:	4770      	bx	lr

08006a58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68da      	ldr	r2, [r3, #12]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006a6e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	695a      	ldr	r2, [r3, #20]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 0201 	bic.w	r2, r2, #1
 8006a7e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2220      	movs	r2, #32
 8006a84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bc80      	pop	{r7}
 8006a90:	4770      	bx	lr
	...

08006a94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	4ab2      	ldr	r2, [pc, #712]	; (8006d6c <UART_SetConfig+0x2d8>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d904      	bls.n	8006ab0 <UART_SetConfig+0x1c>
 8006aa6:	f640 31e2 	movw	r1, #3042	; 0xbe2
 8006aaa:	48b1      	ldr	r0, [pc, #708]	; (8006d70 <UART_SetConfig+0x2dc>)
 8006aac:	f7fa fb12 	bl	80010d4 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d009      	beq.n	8006acc <UART_SetConfig+0x38>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ac0:	d004      	beq.n	8006acc <UART_SetConfig+0x38>
 8006ac2:	f640 31e3 	movw	r1, #3043	; 0xbe3
 8006ac6:	48aa      	ldr	r0, [pc, #680]	; (8006d70 <UART_SetConfig+0x2dc>)
 8006ac8:	f7fa fb04 	bl	80010d4 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00e      	beq.n	8006af2 <UART_SetConfig+0x5e>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006adc:	d009      	beq.n	8006af2 <UART_SetConfig+0x5e>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006ae6:	d004      	beq.n	8006af2 <UART_SetConfig+0x5e>
 8006ae8:	f640 31e4 	movw	r1, #3044	; 0xbe4
 8006aec:	48a0      	ldr	r0, [pc, #640]	; (8006d70 <UART_SetConfig+0x2dc>)
 8006aee:	f7fa faf1 	bl	80010d4 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	695a      	ldr	r2, [r3, #20]
 8006af6:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8006afa:	4013      	ands	r3, r2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d103      	bne.n	8006b08 <UART_SetConfig+0x74>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d104      	bne.n	8006b12 <UART_SetConfig+0x7e>
 8006b08:	f640 31e5 	movw	r1, #3045	; 0xbe5
 8006b0c:	4898      	ldr	r0, [pc, #608]	; (8006d70 <UART_SetConfig+0x2dc>)
 8006b0e:	f7fa fae1 	bl	80010d4 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68da      	ldr	r2, [r3, #12]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	430a      	orrs	r2, r1
 8006b26:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	431a      	orrs	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	431a      	orrs	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006b4a:	f023 030c 	bic.w	r3, r3, #12
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	6812      	ldr	r2, [r2, #0]
 8006b52:	68f9      	ldr	r1, [r7, #12]
 8006b54:	430b      	orrs	r3, r1
 8006b56:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	699a      	ldr	r2, [r3, #24]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b76:	f040 80a5 	bne.w	8006cc4 <UART_SetConfig+0x230>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a7d      	ldr	r2, [pc, #500]	; (8006d74 <UART_SetConfig+0x2e0>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d14f      	bne.n	8006c24 <UART_SetConfig+0x190>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b84:	f7fe f934 	bl	8004df0 <HAL_RCC_GetPCLK2Freq>
 8006b88:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	009a      	lsls	r2, r3, #2
 8006b94:	441a      	add	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	005b      	lsls	r3, r3, #1
 8006b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba0:	4a75      	ldr	r2, [pc, #468]	; (8006d78 <UART_SetConfig+0x2e4>)
 8006ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba6:	095b      	lsrs	r3, r3, #5
 8006ba8:	0119      	lsls	r1, r3, #4
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	4613      	mov	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	009a      	lsls	r2, r3, #2
 8006bb4:	441a      	add	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	005b      	lsls	r3, r3, #1
 8006bbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006bc0:	4b6d      	ldr	r3, [pc, #436]	; (8006d78 <UART_SetConfig+0x2e4>)
 8006bc2:	fba3 0302 	umull	r0, r3, r3, r2
 8006bc6:	095b      	lsrs	r3, r3, #5
 8006bc8:	2064      	movs	r0, #100	; 0x64
 8006bca:	fb00 f303 	mul.w	r3, r0, r3
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	00db      	lsls	r3, r3, #3
 8006bd2:	3332      	adds	r3, #50	; 0x32
 8006bd4:	4a68      	ldr	r2, [pc, #416]	; (8006d78 <UART_SetConfig+0x2e4>)
 8006bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bda:	095b      	lsrs	r3, r3, #5
 8006bdc:	005b      	lsls	r3, r3, #1
 8006bde:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006be2:	4419      	add	r1, r3
 8006be4:	68ba      	ldr	r2, [r7, #8]
 8006be6:	4613      	mov	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	009a      	lsls	r2, r3, #2
 8006bee:	441a      	add	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	005b      	lsls	r3, r3, #1
 8006bf6:	fbb2 f2f3 	udiv	r2, r2, r3
 8006bfa:	4b5f      	ldr	r3, [pc, #380]	; (8006d78 <UART_SetConfig+0x2e4>)
 8006bfc:	fba3 0302 	umull	r0, r3, r3, r2
 8006c00:	095b      	lsrs	r3, r3, #5
 8006c02:	2064      	movs	r0, #100	; 0x64
 8006c04:	fb00 f303 	mul.w	r3, r0, r3
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	00db      	lsls	r3, r3, #3
 8006c0c:	3332      	adds	r3, #50	; 0x32
 8006c0e:	4a5a      	ldr	r2, [pc, #360]	; (8006d78 <UART_SetConfig+0x2e4>)
 8006c10:	fba2 2303 	umull	r2, r3, r2, r3
 8006c14:	095b      	lsrs	r3, r3, #5
 8006c16:	f003 0207 	and.w	r2, r3, #7
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	440a      	add	r2, r1
 8006c20:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006c22:	e0f9      	b.n	8006e18 <UART_SetConfig+0x384>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c24:	f7fe f8d0 	bl	8004dc8 <HAL_RCC_GetPCLK1Freq>
 8006c28:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	009a      	lsls	r2, r3, #2
 8006c34:	441a      	add	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	005b      	lsls	r3, r3, #1
 8006c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c40:	4a4d      	ldr	r2, [pc, #308]	; (8006d78 <UART_SetConfig+0x2e4>)
 8006c42:	fba2 2303 	umull	r2, r3, r2, r3
 8006c46:	095b      	lsrs	r3, r3, #5
 8006c48:	0119      	lsls	r1, r3, #4
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	009a      	lsls	r2, r3, #2
 8006c54:	441a      	add	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	005b      	lsls	r3, r3, #1
 8006c5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c60:	4b45      	ldr	r3, [pc, #276]	; (8006d78 <UART_SetConfig+0x2e4>)
 8006c62:	fba3 0302 	umull	r0, r3, r3, r2
 8006c66:	095b      	lsrs	r3, r3, #5
 8006c68:	2064      	movs	r0, #100	; 0x64
 8006c6a:	fb00 f303 	mul.w	r3, r0, r3
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	00db      	lsls	r3, r3, #3
 8006c72:	3332      	adds	r3, #50	; 0x32
 8006c74:	4a40      	ldr	r2, [pc, #256]	; (8006d78 <UART_SetConfig+0x2e4>)
 8006c76:	fba2 2303 	umull	r2, r3, r2, r3
 8006c7a:	095b      	lsrs	r3, r3, #5
 8006c7c:	005b      	lsls	r3, r3, #1
 8006c7e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c82:	4419      	add	r1, r3
 8006c84:	68ba      	ldr	r2, [r7, #8]
 8006c86:	4613      	mov	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	009a      	lsls	r2, r3, #2
 8006c8e:	441a      	add	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c9a:	4b37      	ldr	r3, [pc, #220]	; (8006d78 <UART_SetConfig+0x2e4>)
 8006c9c:	fba3 0302 	umull	r0, r3, r3, r2
 8006ca0:	095b      	lsrs	r3, r3, #5
 8006ca2:	2064      	movs	r0, #100	; 0x64
 8006ca4:	fb00 f303 	mul.w	r3, r0, r3
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	00db      	lsls	r3, r3, #3
 8006cac:	3332      	adds	r3, #50	; 0x32
 8006cae:	4a32      	ldr	r2, [pc, #200]	; (8006d78 <UART_SetConfig+0x2e4>)
 8006cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb4:	095b      	lsrs	r3, r3, #5
 8006cb6:	f003 0207 	and.w	r2, r3, #7
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	440a      	add	r2, r1
 8006cc0:	609a      	str	r2, [r3, #8]
}
 8006cc2:	e0a9      	b.n	8006e18 <UART_SetConfig+0x384>
    if((huart->Instance == USART1))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a2a      	ldr	r2, [pc, #168]	; (8006d74 <UART_SetConfig+0x2e0>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d156      	bne.n	8006d7c <UART_SetConfig+0x2e8>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cce:	f7fe f88f 	bl	8004df0 <HAL_RCC_GetPCLK2Freq>
 8006cd2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	009a      	lsls	r2, r3, #2
 8006cde:	441a      	add	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cea:	4a23      	ldr	r2, [pc, #140]	; (8006d78 <UART_SetConfig+0x2e4>)
 8006cec:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf0:	095b      	lsrs	r3, r3, #5
 8006cf2:	0119      	lsls	r1, r3, #4
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009a      	lsls	r2, r3, #2
 8006cfe:	441a      	add	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d0a:	4b1b      	ldr	r3, [pc, #108]	; (8006d78 <UART_SetConfig+0x2e4>)
 8006d0c:	fba3 0302 	umull	r0, r3, r3, r2
 8006d10:	095b      	lsrs	r3, r3, #5
 8006d12:	2064      	movs	r0, #100	; 0x64
 8006d14:	fb00 f303 	mul.w	r3, r0, r3
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	011b      	lsls	r3, r3, #4
 8006d1c:	3332      	adds	r3, #50	; 0x32
 8006d1e:	4a16      	ldr	r2, [pc, #88]	; (8006d78 <UART_SetConfig+0x2e4>)
 8006d20:	fba2 2303 	umull	r2, r3, r2, r3
 8006d24:	095b      	lsrs	r3, r3, #5
 8006d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d2a:	4419      	add	r1, r3
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	009a      	lsls	r2, r3, #2
 8006d36:	441a      	add	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d42:	4b0d      	ldr	r3, [pc, #52]	; (8006d78 <UART_SetConfig+0x2e4>)
 8006d44:	fba3 0302 	umull	r0, r3, r3, r2
 8006d48:	095b      	lsrs	r3, r3, #5
 8006d4a:	2064      	movs	r0, #100	; 0x64
 8006d4c:	fb00 f303 	mul.w	r3, r0, r3
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	011b      	lsls	r3, r3, #4
 8006d54:	3332      	adds	r3, #50	; 0x32
 8006d56:	4a08      	ldr	r2, [pc, #32]	; (8006d78 <UART_SetConfig+0x2e4>)
 8006d58:	fba2 2303 	umull	r2, r3, r2, r3
 8006d5c:	095b      	lsrs	r3, r3, #5
 8006d5e:	f003 020f 	and.w	r2, r3, #15
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	440a      	add	r2, r1
 8006d68:	609a      	str	r2, [r3, #8]
}
 8006d6a:	e055      	b.n	8006e18 <UART_SetConfig+0x384>
 8006d6c:	003d0900 	.word	0x003d0900
 8006d70:	0800a2ec 	.word	0x0800a2ec
 8006d74:	40013800 	.word	0x40013800
 8006d78:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d7c:	f7fe f824 	bl	8004dc8 <HAL_RCC_GetPCLK1Freq>
 8006d80:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	009a      	lsls	r2, r3, #2
 8006d8c:	441a      	add	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d98:	4a21      	ldr	r2, [pc, #132]	; (8006e20 <UART_SetConfig+0x38c>)
 8006d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d9e:	095b      	lsrs	r3, r3, #5
 8006da0:	0119      	lsls	r1, r3, #4
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	4613      	mov	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4413      	add	r3, r2
 8006daa:	009a      	lsls	r2, r3, #2
 8006dac:	441a      	add	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006db8:	4b19      	ldr	r3, [pc, #100]	; (8006e20 <UART_SetConfig+0x38c>)
 8006dba:	fba3 0302 	umull	r0, r3, r3, r2
 8006dbe:	095b      	lsrs	r3, r3, #5
 8006dc0:	2064      	movs	r0, #100	; 0x64
 8006dc2:	fb00 f303 	mul.w	r3, r0, r3
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	011b      	lsls	r3, r3, #4
 8006dca:	3332      	adds	r3, #50	; 0x32
 8006dcc:	4a14      	ldr	r2, [pc, #80]	; (8006e20 <UART_SetConfig+0x38c>)
 8006dce:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd2:	095b      	lsrs	r3, r3, #5
 8006dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dd8:	4419      	add	r1, r3
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	009a      	lsls	r2, r3, #2
 8006de4:	441a      	add	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	fbb2 f2f3 	udiv	r2, r2, r3
 8006df0:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <UART_SetConfig+0x38c>)
 8006df2:	fba3 0302 	umull	r0, r3, r3, r2
 8006df6:	095b      	lsrs	r3, r3, #5
 8006df8:	2064      	movs	r0, #100	; 0x64
 8006dfa:	fb00 f303 	mul.w	r3, r0, r3
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	011b      	lsls	r3, r3, #4
 8006e02:	3332      	adds	r3, #50	; 0x32
 8006e04:	4a06      	ldr	r2, [pc, #24]	; (8006e20 <UART_SetConfig+0x38c>)
 8006e06:	fba2 2303 	umull	r2, r3, r2, r3
 8006e0a:	095b      	lsrs	r3, r3, #5
 8006e0c:	f003 020f 	and.w	r2, r3, #15
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	440a      	add	r2, r1
 8006e16:	609a      	str	r2, [r3, #8]
}
 8006e18:	bf00      	nop
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	51eb851f 	.word	0x51eb851f

08006e24 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e2a:	f3ef 8305 	mrs	r3, IPSR
 8006e2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e30:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10f      	bne.n	8006e56 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e36:	f3ef 8310 	mrs	r3, PRIMASK
 8006e3a:	607b      	str	r3, [r7, #4]
  return(result);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d109      	bne.n	8006e56 <osKernelInitialize+0x32>
 8006e42:	4b10      	ldr	r3, [pc, #64]	; (8006e84 <osKernelInitialize+0x60>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d109      	bne.n	8006e5e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e4a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e4e:	603b      	str	r3, [r7, #0]
  return(result);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006e56:	f06f 0305 	mvn.w	r3, #5
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	e00c      	b.n	8006e78 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006e5e:	4b09      	ldr	r3, [pc, #36]	; (8006e84 <osKernelInitialize+0x60>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d105      	bne.n	8006e72 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006e66:	4b07      	ldr	r3, [pc, #28]	; (8006e84 <osKernelInitialize+0x60>)
 8006e68:	2201      	movs	r2, #1
 8006e6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	60fb      	str	r3, [r7, #12]
 8006e70:	e002      	b.n	8006e78 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006e72:	f04f 33ff 	mov.w	r3, #4294967295
 8006e76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006e78:	68fb      	ldr	r3, [r7, #12]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3714      	adds	r7, #20
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bc80      	pop	{r7}
 8006e82:	4770      	bx	lr
 8006e84:	20000034 	.word	0x20000034

08006e88 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e8e:	f3ef 8305 	mrs	r3, IPSR
 8006e92:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10f      	bne.n	8006eba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e9a:	f3ef 8310 	mrs	r3, PRIMASK
 8006e9e:	607b      	str	r3, [r7, #4]
  return(result);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d109      	bne.n	8006eba <osKernelStart+0x32>
 8006ea6:	4b11      	ldr	r3, [pc, #68]	; (8006eec <osKernelStart+0x64>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d109      	bne.n	8006ec2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006eae:	f3ef 8311 	mrs	r3, BASEPRI
 8006eb2:	603b      	str	r3, [r7, #0]
  return(result);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d003      	beq.n	8006ec2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8006eba:	f06f 0305 	mvn.w	r3, #5
 8006ebe:	60fb      	str	r3, [r7, #12]
 8006ec0:	e00e      	b.n	8006ee0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006ec2:	4b0a      	ldr	r3, [pc, #40]	; (8006eec <osKernelStart+0x64>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d107      	bne.n	8006eda <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006eca:	4b08      	ldr	r3, [pc, #32]	; (8006eec <osKernelStart+0x64>)
 8006ecc:	2202      	movs	r2, #2
 8006ece:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006ed0:	f001 fb5c 	bl	800858c <vTaskStartScheduler>
      stat = osOK;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	60fb      	str	r3, [r7, #12]
 8006ed8:	e002      	b.n	8006ee0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8006eda:	f04f 33ff 	mov.w	r3, #4294967295
 8006ede:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	20000034 	.word	0x20000034

08006ef0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b092      	sub	sp, #72	; 0x48
 8006ef4:	af04      	add	r7, sp, #16
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006efc:	2300      	movs	r3, #0
 8006efe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f00:	f3ef 8305 	mrs	r3, IPSR
 8006f04:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f040 8094 	bne.w	8007036 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8006f12:	623b      	str	r3, [r7, #32]
  return(result);
 8006f14:	6a3b      	ldr	r3, [r7, #32]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f040 808d 	bne.w	8007036 <osThreadNew+0x146>
 8006f1c:	4b48      	ldr	r3, [pc, #288]	; (8007040 <osThreadNew+0x150>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d106      	bne.n	8006f32 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f24:	f3ef 8311 	mrs	r3, BASEPRI
 8006f28:	61fb      	str	r3, [r7, #28]
  return(result);
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f040 8082 	bne.w	8007036 <osThreadNew+0x146>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d07e      	beq.n	8007036 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006f38:	2380      	movs	r3, #128	; 0x80
 8006f3a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006f3c:	2318      	movs	r3, #24
 8006f3e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006f40:	2300      	movs	r3, #0
 8006f42:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006f44:	f107 031b 	add.w	r3, r7, #27
 8006f48:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f4e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d045      	beq.n	8006fe2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <osThreadNew+0x74>
        name = attr->name;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	699b      	ldr	r3, [r3, #24]
 8006f70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d008      	beq.n	8006f8a <osThreadNew+0x9a>
 8006f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7a:	2b38      	cmp	r3, #56	; 0x38
 8006f7c:	d805      	bhi.n	8006f8a <osThreadNew+0x9a>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <osThreadNew+0x9e>
        return (NULL);
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	e054      	b.n	8007038 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	089b      	lsrs	r3, r3, #2
 8006f9c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00e      	beq.n	8006fc4 <osThreadNew+0xd4>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	2b5b      	cmp	r3, #91	; 0x5b
 8006fac:	d90a      	bls.n	8006fc4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d006      	beq.n	8006fc4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d002      	beq.n	8006fc4 <osThreadNew+0xd4>
        mem = 1;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fc2:	e010      	b.n	8006fe6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10c      	bne.n	8006fe6 <osThreadNew+0xf6>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d108      	bne.n	8006fe6 <osThreadNew+0xf6>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d104      	bne.n	8006fe6 <osThreadNew+0xf6>
          mem = 0;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fe0:	e001      	b.n	8006fe6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d110      	bne.n	800700e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ff4:	9202      	str	r2, [sp, #8]
 8006ff6:	9301      	str	r3, [sp, #4]
 8006ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007000:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f000 ffee 	bl	8007fe4 <xTaskCreateStatic>
 8007008:	4603      	mov	r3, r0
 800700a:	617b      	str	r3, [r7, #20]
 800700c:	e013      	b.n	8007036 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800700e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007010:	2b00      	cmp	r3, #0
 8007012:	d110      	bne.n	8007036 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007016:	b29a      	uxth	r2, r3
 8007018:	f107 0314 	add.w	r3, r7, #20
 800701c:	9301      	str	r3, [sp, #4]
 800701e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f001 f835 	bl	8008096 <xTaskCreate>
 800702c:	4603      	mov	r3, r0
 800702e:	2b01      	cmp	r3, #1
 8007030:	d001      	beq.n	8007036 <osThreadNew+0x146>
          hTask = NULL;
 8007032:	2300      	movs	r3, #0
 8007034:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007036:	697b      	ldr	r3, [r7, #20]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3738      	adds	r7, #56	; 0x38
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	20000034 	.word	0x20000034

08007044 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800704c:	f3ef 8305 	mrs	r3, IPSR
 8007050:	613b      	str	r3, [r7, #16]
  return(result);
 8007052:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10f      	bne.n	8007078 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007058:	f3ef 8310 	mrs	r3, PRIMASK
 800705c:	60fb      	str	r3, [r7, #12]
  return(result);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d109      	bne.n	8007078 <osDelay+0x34>
 8007064:	4b0d      	ldr	r3, [pc, #52]	; (800709c <osDelay+0x58>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2b02      	cmp	r3, #2
 800706a:	d109      	bne.n	8007080 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800706c:	f3ef 8311 	mrs	r3, BASEPRI
 8007070:	60bb      	str	r3, [r7, #8]
  return(result);
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d003      	beq.n	8007080 <osDelay+0x3c>
    stat = osErrorISR;
 8007078:	f06f 0305 	mvn.w	r3, #5
 800707c:	617b      	str	r3, [r7, #20]
 800707e:	e007      	b.n	8007090 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007080:	2300      	movs	r3, #0
 8007082:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d002      	beq.n	8007090 <osDelay+0x4c>
      vTaskDelay(ticks);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f001 f93e 	bl	800830c <vTaskDelay>
    }
  }

  return (stat);
 8007090:	697b      	ldr	r3, [r7, #20]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3718      	adds	r7, #24
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	20000034 	.word	0x20000034

080070a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4a06      	ldr	r2, [pc, #24]	; (80070c8 <vApplicationGetIdleTaskMemory+0x28>)
 80070b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	4a05      	ldr	r2, [pc, #20]	; (80070cc <vApplicationGetIdleTaskMemory+0x2c>)
 80070b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2280      	movs	r2, #128	; 0x80
 80070bc:	601a      	str	r2, [r3, #0]
}
 80070be:	bf00      	nop
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bc80      	pop	{r7}
 80070c6:	4770      	bx	lr
 80070c8:	20000038 	.word	0x20000038
 80070cc:	20000094 	.word	0x20000094

080070d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4a07      	ldr	r2, [pc, #28]	; (80070fc <vApplicationGetTimerTaskMemory+0x2c>)
 80070e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	4a06      	ldr	r2, [pc, #24]	; (8007100 <vApplicationGetTimerTaskMemory+0x30>)
 80070e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070ee:	601a      	str	r2, [r3, #0]
}
 80070f0:	bf00      	nop
 80070f2:	3714      	adds	r7, #20
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bc80      	pop	{r7}
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	20000294 	.word	0x20000294
 8007100:	200002f0 	.word	0x200002f0

08007104 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 800710a:	2020      	movs	r0, #32
 800710c:	f002 fd9a 	bl	8009c44 <pvPortMalloc>
 8007110:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00a      	beq.n	800712e <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	3304      	adds	r3, #4
 8007122:	4618      	mov	r0, r3
 8007124:	f000 f99e 	bl	8007464 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800712e:	687b      	ldr	r3, [r7, #4]
	}
 8007130:	4618      	mov	r0, r3
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b090      	sub	sp, #64	; 0x40
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
 8007144:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800714e:	2300      	movs	r3, #0
 8007150:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d109      	bne.n	800716c <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715c:	f383 8811 	msr	BASEPRI, r3
 8007160:	f3bf 8f6f 	isb	sy
 8007164:	f3bf 8f4f 	dsb	sy
 8007168:	623b      	str	r3, [r7, #32]
 800716a:	e7fe      	b.n	800716a <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d009      	beq.n	800718a <xEventGroupWaitBits+0x52>
 8007176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	61fb      	str	r3, [r7, #28]
 8007188:	e7fe      	b.n	8007188 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d109      	bne.n	80071a4 <xEventGroupWaitBits+0x6c>
 8007190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	61bb      	str	r3, [r7, #24]
 80071a2:	e7fe      	b.n	80071a2 <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071a4:	f001 fef6 	bl	8008f94 <xTaskGetSchedulerState>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d102      	bne.n	80071b4 <xEventGroupWaitBits+0x7c>
 80071ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <xEventGroupWaitBits+0x80>
 80071b4:	2301      	movs	r3, #1
 80071b6:	e000      	b.n	80071ba <xEventGroupWaitBits+0x82>
 80071b8:	2300      	movs	r3, #0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d109      	bne.n	80071d2 <xEventGroupWaitBits+0x9a>
 80071be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	617b      	str	r3, [r7, #20]
 80071d0:	e7fe      	b.n	80071d0 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 80071d2:	f001 fa3f 	bl	8008654 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80071d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80071dc:	683a      	ldr	r2, [r7, #0]
 80071de:	68b9      	ldr	r1, [r7, #8]
 80071e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80071e2:	f000 f909 	bl	80073f8 <prvTestWaitCondition>
 80071e6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80071e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00e      	beq.n	800720c <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80071ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80071f2:	2300      	movs	r3, #0
 80071f4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d028      	beq.n	800724e <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80071fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	43db      	mvns	r3, r3
 8007204:	401a      	ands	r2, r3
 8007206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007208:	601a      	str	r2, [r3, #0]
 800720a:	e020      	b.n	800724e <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800720c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800720e:	2b00      	cmp	r3, #0
 8007210:	d104      	bne.n	800721c <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8007212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007214:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8007216:	2301      	movs	r3, #1
 8007218:	633b      	str	r3, [r7, #48]	; 0x30
 800721a:	e018      	b.n	800724e <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d003      	beq.n	800722a <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8007222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007224:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007228:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d003      	beq.n	8007238 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8007230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007232:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007236:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8007238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800723a:	1d18      	adds	r0, r3, #4
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007240:	4313      	orrs	r3, r2
 8007242:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007244:	4619      	mov	r1, r3
 8007246:	f001 fc25 	bl	8008a94 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800724a:	2300      	movs	r3, #0
 800724c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800724e:	f001 fa0f 	bl	8008670 <xTaskResumeAll>
 8007252:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8007254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007256:	2b00      	cmp	r3, #0
 8007258:	d031      	beq.n	80072be <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	2b00      	cmp	r3, #0
 800725e:	d107      	bne.n	8007270 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8007260:	4b19      	ldr	r3, [pc, #100]	; (80072c8 <xEventGroupWaitBits+0x190>)
 8007262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007266:	601a      	str	r2, [r3, #0]
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8007270:	f001 ff1a 	bl	80090a8 <uxTaskResetEventItemValue>
 8007274:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8007276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d11a      	bne.n	80072b6 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 8007280:	f002 fbea 	bl	8009a58 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8007284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	68b9      	ldr	r1, [r7, #8]
 800728e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007290:	f000 f8b2 	bl	80073f8 <prvTestWaitCondition>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d009      	beq.n	80072ae <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d006      	beq.n	80072ae <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80072a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	43db      	mvns	r3, r3
 80072a8:	401a      	ands	r2, r3
 80072aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ac:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80072ae:	2301      	movs	r3, #1
 80072b0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80072b2:	f002 fbff 	bl	8009ab4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80072b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80072bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80072be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3740      	adds	r7, #64	; 0x40
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	e000ed04 	.word	0xe000ed04

080072cc <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b08e      	sub	sp, #56	; 0x38
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80072d6:	2300      	movs	r3, #0
 80072d8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80072de:	2300      	movs	r3, #0
 80072e0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d109      	bne.n	80072fc <xEventGroupSetBits+0x30>
 80072e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ec:	f383 8811 	msr	BASEPRI, r3
 80072f0:	f3bf 8f6f 	isb	sy
 80072f4:	f3bf 8f4f 	dsb	sy
 80072f8:	613b      	str	r3, [r7, #16]
 80072fa:	e7fe      	b.n	80072fa <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d009      	beq.n	800731a <xEventGroupSetBits+0x4e>
 8007306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730a:	f383 8811 	msr	BASEPRI, r3
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	f3bf 8f4f 	dsb	sy
 8007316:	60fb      	str	r3, [r7, #12]
 8007318:	e7fe      	b.n	8007318 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800731a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731c:	3304      	adds	r3, #4
 800731e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	3308      	adds	r3, #8
 8007324:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8007326:	f001 f995 	bl	8008654 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8007330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	431a      	orrs	r2, r3
 8007338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800733c:	e03c      	b.n	80073b8 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 800733e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8007344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800734a:	2300      	movs	r3, #0
 800734c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007354:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800735c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007364:	2b00      	cmp	r3, #0
 8007366:	d108      	bne.n	800737a <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8007368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	4013      	ands	r3, r2
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00b      	beq.n	800738c <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8007374:	2301      	movs	r3, #1
 8007376:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007378:	e008      	b.n	800738c <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800737a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	4013      	ands	r3, r2
 8007382:	69ba      	ldr	r2, [r7, #24]
 8007384:	429a      	cmp	r2, r3
 8007386:	d101      	bne.n	800738c <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8007388:	2301      	movs	r3, #1
 800738a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800738c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738e:	2b00      	cmp	r3, #0
 8007390:	d010      	beq.n	80073b4 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d003      	beq.n	80073a4 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800739c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80073a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80073ac:	4619      	mov	r1, r3
 80073ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80073b0:	f001 fc36 	bl	8008c20 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80073b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d1be      	bne.n	800733e <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80073c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c6:	43db      	mvns	r3, r3
 80073c8:	401a      	ands	r2, r3
 80073ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073cc:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80073ce:	f001 f94f 	bl	8008670 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80073d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d4:	681b      	ldr	r3, [r3, #0]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3738      	adds	r7, #56	; 0x38
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b082      	sub	sp, #8
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7ff ff6e 	bl	80072cc <xEventGroupSetBits>
}
 80073f0:	bf00      	nop
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80073f8:	b480      	push	{r7}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8007404:	2300      	movs	r3, #0
 8007406:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d107      	bne.n	800741e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	4013      	ands	r3, r2
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00a      	beq.n	800742e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007418:	2301      	movs	r3, #1
 800741a:	617b      	str	r3, [r7, #20]
 800741c:	e007      	b.n	800742e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	4013      	ands	r3, r2
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	429a      	cmp	r2, r3
 8007428:	d101      	bne.n	800742e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800742a:	2301      	movs	r3, #1
 800742c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800742e:	697b      	ldr	r3, [r7, #20]
}
 8007430:	4618      	mov	r0, r3
 8007432:	371c      	adds	r7, #28
 8007434:	46bd      	mov	sp, r7
 8007436:	bc80      	pop	{r7}
 8007438:	4770      	bx	lr
	...

0800743c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	68f9      	ldr	r1, [r7, #12]
 800744e:	4804      	ldr	r0, [pc, #16]	; (8007460 <xEventGroupSetBitsFromISR+0x24>)
 8007450:	f002 f9f4 	bl	800983c <xTimerPendFunctionCallFromISR>
 8007454:	6178      	str	r0, [r7, #20]

		return xReturn;
 8007456:	697b      	ldr	r3, [r7, #20]
	}
 8007458:	4618      	mov	r0, r3
 800745a:	3718      	adds	r7, #24
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	080073df 	.word	0x080073df

08007464 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f103 0208 	add.w	r2, r3, #8
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f04f 32ff 	mov.w	r2, #4294967295
 800747c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f103 0208 	add.w	r2, r3, #8
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f103 0208 	add.w	r2, r3, #8
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	bc80      	pop	{r7}
 80074a0:	4770      	bx	lr

080074a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80074a2:	b480      	push	{r7}
 80074a4:	b083      	sub	sp, #12
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bc80      	pop	{r7}
 80074b8:	4770      	bx	lr

080074ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074ba:	b480      	push	{r7}
 80074bc:	b085      	sub	sp, #20
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	689a      	ldr	r2, [r3, #8]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	683a      	ldr	r2, [r7, #0]
 80074de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	1c5a      	adds	r2, r3, #1
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	601a      	str	r2, [r3, #0]
}
 80074f6:	bf00      	nop
 80074f8:	3714      	adds	r7, #20
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bc80      	pop	{r7}
 80074fe:	4770      	bx	lr

08007500 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007516:	d103      	bne.n	8007520 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	60fb      	str	r3, [r7, #12]
 800751e:	e00c      	b.n	800753a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3308      	adds	r3, #8
 8007524:	60fb      	str	r3, [r7, #12]
 8007526:	e002      	b.n	800752e <vListInsert+0x2e>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	60fb      	str	r3, [r7, #12]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	429a      	cmp	r2, r3
 8007538:	d2f6      	bcs.n	8007528 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	685a      	ldr	r2, [r3, #4]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	683a      	ldr	r2, [r7, #0]
 8007554:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	1c5a      	adds	r2, r3, #1
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	601a      	str	r2, [r3, #0]
}
 8007566:	bf00      	nop
 8007568:	3714      	adds	r7, #20
 800756a:	46bd      	mov	sp, r7
 800756c:	bc80      	pop	{r7}
 800756e:	4770      	bx	lr

08007570 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	6892      	ldr	r2, [r2, #8]
 8007586:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	6852      	ldr	r2, [r2, #4]
 8007590:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	429a      	cmp	r2, r3
 800759a:	d103      	bne.n	80075a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	689a      	ldr	r2, [r3, #8]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	1e5a      	subs	r2, r3, #1
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	bc80      	pop	{r7}
 80075c0:	4770      	bx	lr
	...

080075c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d109      	bne.n	80075ec <xQueueGenericReset+0x28>
 80075d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075dc:	f383 8811 	msr	BASEPRI, r3
 80075e0:	f3bf 8f6f 	isb	sy
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	60bb      	str	r3, [r7, #8]
 80075ea:	e7fe      	b.n	80075ea <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80075ec:	f002 fa34 	bl	8009a58 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075f8:	68f9      	ldr	r1, [r7, #12]
 80075fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80075fc:	fb01 f303 	mul.w	r3, r1, r3
 8007600:	441a      	add	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800761c:	3b01      	subs	r3, #1
 800761e:	68f9      	ldr	r1, [r7, #12]
 8007620:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007622:	fb01 f303 	mul.w	r3, r1, r3
 8007626:	441a      	add	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	22ff      	movs	r2, #255	; 0xff
 8007630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	22ff      	movs	r2, #255	; 0xff
 8007638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d114      	bne.n	800766c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d01a      	beq.n	8007680 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	3310      	adds	r3, #16
 800764e:	4618      	mov	r0, r3
 8007650:	f001 fa84 	bl	8008b5c <xTaskRemoveFromEventList>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d012      	beq.n	8007680 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800765a:	4b0d      	ldr	r3, [pc, #52]	; (8007690 <xQueueGenericReset+0xcc>)
 800765c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007660:	601a      	str	r2, [r3, #0]
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	e009      	b.n	8007680 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	3310      	adds	r3, #16
 8007670:	4618      	mov	r0, r3
 8007672:	f7ff fef7 	bl	8007464 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	3324      	adds	r3, #36	; 0x24
 800767a:	4618      	mov	r0, r3
 800767c:	f7ff fef2 	bl	8007464 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007680:	f002 fa18 	bl	8009ab4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007684:	2301      	movs	r3, #1
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	e000ed04 	.word	0xe000ed04

08007694 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007694:	b580      	push	{r7, lr}
 8007696:	b08e      	sub	sp, #56	; 0x38
 8007698:	af02      	add	r7, sp, #8
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
 80076a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d109      	bne.n	80076bc <xQueueGenericCreateStatic+0x28>
 80076a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ac:	f383 8811 	msr	BASEPRI, r3
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80076ba:	e7fe      	b.n	80076ba <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d109      	bne.n	80076d6 <xQueueGenericCreateStatic+0x42>
 80076c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	627b      	str	r3, [r7, #36]	; 0x24
 80076d4:	e7fe      	b.n	80076d4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d002      	beq.n	80076e2 <xQueueGenericCreateStatic+0x4e>
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <xQueueGenericCreateStatic+0x52>
 80076e2:	2301      	movs	r3, #1
 80076e4:	e000      	b.n	80076e8 <xQueueGenericCreateStatic+0x54>
 80076e6:	2300      	movs	r3, #0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d109      	bne.n	8007700 <xQueueGenericCreateStatic+0x6c>
 80076ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f0:	f383 8811 	msr	BASEPRI, r3
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	623b      	str	r3, [r7, #32]
 80076fe:	e7fe      	b.n	80076fe <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d102      	bne.n	800770c <xQueueGenericCreateStatic+0x78>
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d101      	bne.n	8007710 <xQueueGenericCreateStatic+0x7c>
 800770c:	2301      	movs	r3, #1
 800770e:	e000      	b.n	8007712 <xQueueGenericCreateStatic+0x7e>
 8007710:	2300      	movs	r3, #0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d109      	bne.n	800772a <xQueueGenericCreateStatic+0x96>
 8007716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771a:	f383 8811 	msr	BASEPRI, r3
 800771e:	f3bf 8f6f 	isb	sy
 8007722:	f3bf 8f4f 	dsb	sy
 8007726:	61fb      	str	r3, [r7, #28]
 8007728:	e7fe      	b.n	8007728 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800772a:	2350      	movs	r3, #80	; 0x50
 800772c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2b50      	cmp	r3, #80	; 0x50
 8007732:	d009      	beq.n	8007748 <xQueueGenericCreateStatic+0xb4>
 8007734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	61bb      	str	r3, [r7, #24]
 8007746:	e7fe      	b.n	8007746 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800774c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00d      	beq.n	800776e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007754:	2201      	movs	r2, #1
 8007756:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800775a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800775e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	4613      	mov	r3, r2
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	68b9      	ldr	r1, [r7, #8]
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f000 f842 	bl	80077f2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007770:	4618      	mov	r0, r3
 8007772:	3730      	adds	r7, #48	; 0x30
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007778:	b580      	push	{r7, lr}
 800777a:	b08a      	sub	sp, #40	; 0x28
 800777c:	af02      	add	r7, sp, #8
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	4613      	mov	r3, r2
 8007784:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d109      	bne.n	80077a0 <xQueueGenericCreate+0x28>
 800778c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	613b      	str	r3, [r7, #16]
 800779e:	e7fe      	b.n	800779e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d102      	bne.n	80077ac <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80077a6:	2300      	movs	r3, #0
 80077a8:	61fb      	str	r3, [r7, #28]
 80077aa:	e004      	b.n	80077b6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	fb02 f303 	mul.w	r3, r2, r3
 80077b4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	3350      	adds	r3, #80	; 0x50
 80077ba:	4618      	mov	r0, r3
 80077bc:	f002 fa42 	bl	8009c44 <pvPortMalloc>
 80077c0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00f      	beq.n	80077e8 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	3350      	adds	r3, #80	; 0x50
 80077cc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80077d6:	79fa      	ldrb	r2, [r7, #7]
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	4613      	mov	r3, r2
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	68b9      	ldr	r1, [r7, #8]
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f000 f805 	bl	80077f2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80077e8:	69bb      	ldr	r3, [r7, #24]
	}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3720      	adds	r7, #32
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b084      	sub	sp, #16
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	60f8      	str	r0, [r7, #12]
 80077fa:	60b9      	str	r1, [r7, #8]
 80077fc:	607a      	str	r2, [r7, #4]
 80077fe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d103      	bne.n	800780e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	69ba      	ldr	r2, [r7, #24]
 800780a:	601a      	str	r2, [r3, #0]
 800780c:	e002      	b.n	8007814 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007820:	2101      	movs	r1, #1
 8007822:	69b8      	ldr	r0, [r7, #24]
 8007824:	f7ff fece 	bl	80075c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	78fa      	ldrb	r2, [r7, #3]
 800782c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007830:	bf00      	nop
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b08e      	sub	sp, #56	; 0x38
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
 8007844:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007846:	2300      	movs	r3, #0
 8007848:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800784e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007850:	2b00      	cmp	r3, #0
 8007852:	d109      	bne.n	8007868 <xQueueGenericSend+0x30>
 8007854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	62bb      	str	r3, [r7, #40]	; 0x28
 8007866:	e7fe      	b.n	8007866 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d103      	bne.n	8007876 <xQueueGenericSend+0x3e>
 800786e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <xQueueGenericSend+0x42>
 8007876:	2301      	movs	r3, #1
 8007878:	e000      	b.n	800787c <xQueueGenericSend+0x44>
 800787a:	2300      	movs	r3, #0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d109      	bne.n	8007894 <xQueueGenericSend+0x5c>
 8007880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	627b      	str	r3, [r7, #36]	; 0x24
 8007892:	e7fe      	b.n	8007892 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	2b02      	cmp	r3, #2
 8007898:	d103      	bne.n	80078a2 <xQueueGenericSend+0x6a>
 800789a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d101      	bne.n	80078a6 <xQueueGenericSend+0x6e>
 80078a2:	2301      	movs	r3, #1
 80078a4:	e000      	b.n	80078a8 <xQueueGenericSend+0x70>
 80078a6:	2300      	movs	r3, #0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d109      	bne.n	80078c0 <xQueueGenericSend+0x88>
 80078ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	623b      	str	r3, [r7, #32]
 80078be:	e7fe      	b.n	80078be <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078c0:	f001 fb68 	bl	8008f94 <xTaskGetSchedulerState>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d102      	bne.n	80078d0 <xQueueGenericSend+0x98>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d101      	bne.n	80078d4 <xQueueGenericSend+0x9c>
 80078d0:	2301      	movs	r3, #1
 80078d2:	e000      	b.n	80078d6 <xQueueGenericSend+0x9e>
 80078d4:	2300      	movs	r3, #0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d109      	bne.n	80078ee <xQueueGenericSend+0xb6>
 80078da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	61fb      	str	r3, [r7, #28]
 80078ec:	e7fe      	b.n	80078ec <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078ee:	f002 f8b3 	bl	8009a58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d302      	bcc.n	8007904 <xQueueGenericSend+0xcc>
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	2b02      	cmp	r3, #2
 8007902:	d129      	bne.n	8007958 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007904:	683a      	ldr	r2, [r7, #0]
 8007906:	68b9      	ldr	r1, [r7, #8]
 8007908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800790a:	f000 f9ff 	bl	8007d0c <prvCopyDataToQueue>
 800790e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007914:	2b00      	cmp	r3, #0
 8007916:	d010      	beq.n	800793a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	3324      	adds	r3, #36	; 0x24
 800791c:	4618      	mov	r0, r3
 800791e:	f001 f91d 	bl	8008b5c <xTaskRemoveFromEventList>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d013      	beq.n	8007950 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007928:	4b3f      	ldr	r3, [pc, #252]	; (8007a28 <xQueueGenericSend+0x1f0>)
 800792a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	e00a      	b.n	8007950 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800793a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793c:	2b00      	cmp	r3, #0
 800793e:	d007      	beq.n	8007950 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007940:	4b39      	ldr	r3, [pc, #228]	; (8007a28 <xQueueGenericSend+0x1f0>)
 8007942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007946:	601a      	str	r2, [r3, #0]
 8007948:	f3bf 8f4f 	dsb	sy
 800794c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007950:	f002 f8b0 	bl	8009ab4 <vPortExitCritical>
				return pdPASS;
 8007954:	2301      	movs	r3, #1
 8007956:	e063      	b.n	8007a20 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d103      	bne.n	8007966 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800795e:	f002 f8a9 	bl	8009ab4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007962:	2300      	movs	r3, #0
 8007964:	e05c      	b.n	8007a20 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007968:	2b00      	cmp	r3, #0
 800796a:	d106      	bne.n	800797a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800796c:	f107 0314 	add.w	r3, r7, #20
 8007970:	4618      	mov	r0, r3
 8007972:	f001 f9b5 	bl	8008ce0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007976:	2301      	movs	r3, #1
 8007978:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800797a:	f002 f89b 	bl	8009ab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800797e:	f000 fe69 	bl	8008654 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007982:	f002 f869 	bl	8009a58 <vPortEnterCritical>
 8007986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007988:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800798c:	b25b      	sxtb	r3, r3
 800798e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007992:	d103      	bne.n	800799c <xQueueGenericSend+0x164>
 8007994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007996:	2200      	movs	r2, #0
 8007998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800799c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079a2:	b25b      	sxtb	r3, r3
 80079a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a8:	d103      	bne.n	80079b2 <xQueueGenericSend+0x17a>
 80079aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079b2:	f002 f87f 	bl	8009ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079b6:	1d3a      	adds	r2, r7, #4
 80079b8:	f107 0314 	add.w	r3, r7, #20
 80079bc:	4611      	mov	r1, r2
 80079be:	4618      	mov	r0, r3
 80079c0:	f001 f9a4 	bl	8008d0c <xTaskCheckForTimeOut>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d124      	bne.n	8007a14 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80079ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079cc:	f000 fa96 	bl	8007efc <prvIsQueueFull>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d018      	beq.n	8007a08 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	3310      	adds	r3, #16
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	4611      	mov	r1, r2
 80079de:	4618      	mov	r0, r3
 80079e0:	f001 f834 	bl	8008a4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80079e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079e6:	f000 fa21 	bl	8007e2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80079ea:	f000 fe41 	bl	8008670 <xTaskResumeAll>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f47f af7c 	bne.w	80078ee <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80079f6:	4b0c      	ldr	r3, [pc, #48]	; (8007a28 <xQueueGenericSend+0x1f0>)
 80079f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079fc:	601a      	str	r2, [r3, #0]
 80079fe:	f3bf 8f4f 	dsb	sy
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	e772      	b.n	80078ee <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a0a:	f000 fa0f 	bl	8007e2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a0e:	f000 fe2f 	bl	8008670 <xTaskResumeAll>
 8007a12:	e76c      	b.n	80078ee <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007a14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a16:	f000 fa09 	bl	8007e2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a1a:	f000 fe29 	bl	8008670 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007a1e:	2300      	movs	r3, #0
		}
	}
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3738      	adds	r7, #56	; 0x38
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	e000ed04 	.word	0xe000ed04

08007a2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b08e      	sub	sp, #56	; 0x38
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
 8007a38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d109      	bne.n	8007a58 <xQueueGenericSendFromISR+0x2c>
 8007a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a48:	f383 8811 	msr	BASEPRI, r3
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	f3bf 8f4f 	dsb	sy
 8007a54:	627b      	str	r3, [r7, #36]	; 0x24
 8007a56:	e7fe      	b.n	8007a56 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d103      	bne.n	8007a66 <xQueueGenericSendFromISR+0x3a>
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d101      	bne.n	8007a6a <xQueueGenericSendFromISR+0x3e>
 8007a66:	2301      	movs	r3, #1
 8007a68:	e000      	b.n	8007a6c <xQueueGenericSendFromISR+0x40>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d109      	bne.n	8007a84 <xQueueGenericSendFromISR+0x58>
 8007a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	623b      	str	r3, [r7, #32]
 8007a82:	e7fe      	b.n	8007a82 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d103      	bne.n	8007a92 <xQueueGenericSendFromISR+0x66>
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d101      	bne.n	8007a96 <xQueueGenericSendFromISR+0x6a>
 8007a92:	2301      	movs	r3, #1
 8007a94:	e000      	b.n	8007a98 <xQueueGenericSendFromISR+0x6c>
 8007a96:	2300      	movs	r3, #0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d109      	bne.n	8007ab0 <xQueueGenericSendFromISR+0x84>
 8007a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	61fb      	str	r3, [r7, #28]
 8007aae:	e7fe      	b.n	8007aae <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ab0:	f002 f88c 	bl	8009bcc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ab4:	f3ef 8211 	mrs	r2, BASEPRI
 8007ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abc:	f383 8811 	msr	BASEPRI, r3
 8007ac0:	f3bf 8f6f 	isb	sy
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	61ba      	str	r2, [r7, #24]
 8007aca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007acc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ace:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d302      	bcc.n	8007ae2 <xQueueGenericSendFromISR+0xb6>
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d12c      	bne.n	8007b3c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007aec:	683a      	ldr	r2, [r7, #0]
 8007aee:	68b9      	ldr	r1, [r7, #8]
 8007af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007af2:	f000 f90b 	bl	8007d0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007af6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afe:	d112      	bne.n	8007b26 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d016      	beq.n	8007b36 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0a:	3324      	adds	r3, #36	; 0x24
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f001 f825 	bl	8008b5c <xTaskRemoveFromEventList>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00e      	beq.n	8007b36 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00b      	beq.n	8007b36 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2201      	movs	r2, #1
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	e007      	b.n	8007b36 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	b25a      	sxtb	r2, r3
 8007b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b36:	2301      	movs	r3, #1
 8007b38:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007b3a:	e001      	b.n	8007b40 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b42:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3738      	adds	r7, #56	; 0x38
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b08c      	sub	sp, #48	; 0x30
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b60:	2300      	movs	r3, #0
 8007b62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d109      	bne.n	8007b82 <xQueueReceive+0x2e>
	__asm volatile
 8007b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b72:	f383 8811 	msr	BASEPRI, r3
 8007b76:	f3bf 8f6f 	isb	sy
 8007b7a:	f3bf 8f4f 	dsb	sy
 8007b7e:	623b      	str	r3, [r7, #32]
 8007b80:	e7fe      	b.n	8007b80 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d103      	bne.n	8007b90 <xQueueReceive+0x3c>
 8007b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d101      	bne.n	8007b94 <xQueueReceive+0x40>
 8007b90:	2301      	movs	r3, #1
 8007b92:	e000      	b.n	8007b96 <xQueueReceive+0x42>
 8007b94:	2300      	movs	r3, #0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d109      	bne.n	8007bae <xQueueReceive+0x5a>
 8007b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	61fb      	str	r3, [r7, #28]
 8007bac:	e7fe      	b.n	8007bac <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007bae:	f001 f9f1 	bl	8008f94 <xTaskGetSchedulerState>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d102      	bne.n	8007bbe <xQueueReceive+0x6a>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d101      	bne.n	8007bc2 <xQueueReceive+0x6e>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e000      	b.n	8007bc4 <xQueueReceive+0x70>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d109      	bne.n	8007bdc <xQueueReceive+0x88>
 8007bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bcc:	f383 8811 	msr	BASEPRI, r3
 8007bd0:	f3bf 8f6f 	isb	sy
 8007bd4:	f3bf 8f4f 	dsb	sy
 8007bd8:	61bb      	str	r3, [r7, #24]
 8007bda:	e7fe      	b.n	8007bda <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bdc:	f001 ff3c 	bl	8009a58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d01f      	beq.n	8007c2c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007bec:	68b9      	ldr	r1, [r7, #8]
 8007bee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bf0:	f000 f8f6 	bl	8007de0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf6:	1e5a      	subs	r2, r3, #1
 8007bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00f      	beq.n	8007c24 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c06:	3310      	adds	r3, #16
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f000 ffa7 	bl	8008b5c <xTaskRemoveFromEventList>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d007      	beq.n	8007c24 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c14:	4b3c      	ldr	r3, [pc, #240]	; (8007d08 <xQueueReceive+0x1b4>)
 8007c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c1a:	601a      	str	r2, [r3, #0]
 8007c1c:	f3bf 8f4f 	dsb	sy
 8007c20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c24:	f001 ff46 	bl	8009ab4 <vPortExitCritical>
				return pdPASS;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e069      	b.n	8007d00 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d103      	bne.n	8007c3a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c32:	f001 ff3f 	bl	8009ab4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c36:	2300      	movs	r3, #0
 8007c38:	e062      	b.n	8007d00 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d106      	bne.n	8007c4e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c40:	f107 0310 	add.w	r3, r7, #16
 8007c44:	4618      	mov	r0, r3
 8007c46:	f001 f84b 	bl	8008ce0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c4e:	f001 ff31 	bl	8009ab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c52:	f000 fcff 	bl	8008654 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c56:	f001 feff 	bl	8009a58 <vPortEnterCritical>
 8007c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c60:	b25b      	sxtb	r3, r3
 8007c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c66:	d103      	bne.n	8007c70 <xQueueReceive+0x11c>
 8007c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c76:	b25b      	sxtb	r3, r3
 8007c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c7c:	d103      	bne.n	8007c86 <xQueueReceive+0x132>
 8007c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c86:	f001 ff15 	bl	8009ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c8a:	1d3a      	adds	r2, r7, #4
 8007c8c:	f107 0310 	add.w	r3, r7, #16
 8007c90:	4611      	mov	r1, r2
 8007c92:	4618      	mov	r0, r3
 8007c94:	f001 f83a 	bl	8008d0c <xTaskCheckForTimeOut>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d123      	bne.n	8007ce6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ca0:	f000 f916 	bl	8007ed0 <prvIsQueueEmpty>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d017      	beq.n	8007cda <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cac:	3324      	adds	r3, #36	; 0x24
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	4611      	mov	r1, r2
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 feca 	bl	8008a4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cba:	f000 f8b7 	bl	8007e2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cbe:	f000 fcd7 	bl	8008670 <xTaskResumeAll>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d189      	bne.n	8007bdc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007cc8:	4b0f      	ldr	r3, [pc, #60]	; (8007d08 <xQueueReceive+0x1b4>)
 8007cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cce:	601a      	str	r2, [r3, #0]
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	e780      	b.n	8007bdc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007cda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cdc:	f000 f8a6 	bl	8007e2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ce0:	f000 fcc6 	bl	8008670 <xTaskResumeAll>
 8007ce4:	e77a      	b.n	8007bdc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ce8:	f000 f8a0 	bl	8007e2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cec:	f000 fcc0 	bl	8008670 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cf2:	f000 f8ed 	bl	8007ed0 <prvIsQueueEmpty>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f43f af6f 	beq.w	8007bdc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007cfe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3730      	adds	r7, #48	; 0x30
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	e000ed04 	.word	0xe000ed04

08007d0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10d      	bne.n	8007d46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d14d      	bne.n	8007dce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	4618      	mov	r0, r3
 8007d38:	f001 f94a 	bl	8008fd0 <xTaskPriorityDisinherit>
 8007d3c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	605a      	str	r2, [r3, #4]
 8007d44:	e043      	b.n	8007dce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d119      	bne.n	8007d80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6898      	ldr	r0, [r3, #8]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d54:	461a      	mov	r2, r3
 8007d56:	68b9      	ldr	r1, [r7, #8]
 8007d58:	f002 f970 	bl	800a03c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	689a      	ldr	r2, [r3, #8]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d64:	441a      	add	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	689a      	ldr	r2, [r3, #8]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d32b      	bcc.n	8007dce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	609a      	str	r2, [r3, #8]
 8007d7e:	e026      	b.n	8007dce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	68d8      	ldr	r0, [r3, #12]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d88:	461a      	mov	r2, r3
 8007d8a:	68b9      	ldr	r1, [r7, #8]
 8007d8c:	f002 f956 	bl	800a03c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	68da      	ldr	r2, [r3, #12]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d98:	425b      	negs	r3, r3
 8007d9a:	441a      	add	r2, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	68da      	ldr	r2, [r3, #12]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d207      	bcs.n	8007dbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db4:	425b      	negs	r3, r3
 8007db6:	441a      	add	r2, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d105      	bne.n	8007dce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d002      	beq.n	8007dce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	1c5a      	adds	r2, r3, #1
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007dd6:	697b      	ldr	r3, [r7, #20]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3718      	adds	r7, #24
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d018      	beq.n	8007e24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68da      	ldr	r2, [r3, #12]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfa:	441a      	add	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68da      	ldr	r2, [r3, #12]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d303      	bcc.n	8007e14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68d9      	ldr	r1, [r3, #12]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	6838      	ldr	r0, [r7, #0]
 8007e20:	f002 f90c 	bl	800a03c <memcpy>
	}
}
 8007e24:	bf00      	nop
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007e34:	f001 fe10 	bl	8009a58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e40:	e011      	b.n	8007e66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d012      	beq.n	8007e70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	3324      	adds	r3, #36	; 0x24
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 fe84 	bl	8008b5c <xTaskRemoveFromEventList>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007e5a:	f000 ffb7 	bl	8008dcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e5e:	7bfb      	ldrb	r3, [r7, #15]
 8007e60:	3b01      	subs	r3, #1
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	dce9      	bgt.n	8007e42 <prvUnlockQueue+0x16>
 8007e6e:	e000      	b.n	8007e72 <prvUnlockQueue+0x46>
					break;
 8007e70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	22ff      	movs	r2, #255	; 0xff
 8007e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e7a:	f001 fe1b 	bl	8009ab4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e7e:	f001 fdeb 	bl	8009a58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e8a:	e011      	b.n	8007eb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d012      	beq.n	8007eba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	3310      	adds	r3, #16
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f000 fe5f 	bl	8008b5c <xTaskRemoveFromEventList>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d001      	beq.n	8007ea8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ea4:	f000 ff92 	bl	8008dcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ea8:	7bbb      	ldrb	r3, [r7, #14]
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007eb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	dce9      	bgt.n	8007e8c <prvUnlockQueue+0x60>
 8007eb8:	e000      	b.n	8007ebc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007eba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	22ff      	movs	r2, #255	; 0xff
 8007ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007ec4:	f001 fdf6 	bl	8009ab4 <vPortExitCritical>
}
 8007ec8:	bf00      	nop
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ed8:	f001 fdbe 	bl	8009a58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d102      	bne.n	8007eea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	60fb      	str	r3, [r7, #12]
 8007ee8:	e001      	b.n	8007eee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007eea:	2300      	movs	r3, #0
 8007eec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007eee:	f001 fde1 	bl	8009ab4 <vPortExitCritical>

	return xReturn;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f04:	f001 fda8 	bl	8009a58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d102      	bne.n	8007f1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007f14:	2301      	movs	r3, #1
 8007f16:	60fb      	str	r3, [r7, #12]
 8007f18:	e001      	b.n	8007f1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f1e:	f001 fdc9 	bl	8009ab4 <vPortExitCritical>

	return xReturn;
 8007f22:	68fb      	ldr	r3, [r7, #12]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f36:	2300      	movs	r3, #0
 8007f38:	60fb      	str	r3, [r7, #12]
 8007f3a:	e014      	b.n	8007f66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007f3c:	4a0e      	ldr	r2, [pc, #56]	; (8007f78 <vQueueAddToRegistry+0x4c>)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10b      	bne.n	8007f60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007f48:	490b      	ldr	r1, [pc, #44]	; (8007f78 <vQueueAddToRegistry+0x4c>)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007f52:	4a09      	ldr	r2, [pc, #36]	; (8007f78 <vQueueAddToRegistry+0x4c>)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	00db      	lsls	r3, r3, #3
 8007f58:	4413      	add	r3, r2
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007f5e:	e005      	b.n	8007f6c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	3301      	adds	r3, #1
 8007f64:	60fb      	str	r3, [r7, #12]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2b07      	cmp	r3, #7
 8007f6a:	d9e7      	bls.n	8007f3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007f6c:	bf00      	nop
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bc80      	pop	{r7}
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	200037d8 	.word	0x200037d8

08007f7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007f8c:	f001 fd64 	bl	8009a58 <vPortEnterCritical>
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f96:	b25b      	sxtb	r3, r3
 8007f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f9c:	d103      	bne.n	8007fa6 <vQueueWaitForMessageRestricted+0x2a>
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fac:	b25b      	sxtb	r3, r3
 8007fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb2:	d103      	bne.n	8007fbc <vQueueWaitForMessageRestricted+0x40>
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fbc:	f001 fd7a 	bl	8009ab4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d106      	bne.n	8007fd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	3324      	adds	r3, #36	; 0x24
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	68b9      	ldr	r1, [r7, #8]
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f000 fd99 	bl	8008b08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007fd6:	6978      	ldr	r0, [r7, #20]
 8007fd8:	f7ff ff28 	bl	8007e2c <prvUnlockQueue>
	}
 8007fdc:	bf00      	nop
 8007fde:	3718      	adds	r7, #24
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b08e      	sub	sp, #56	; 0x38
 8007fe8:	af04      	add	r7, sp, #16
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
 8007ff0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d109      	bne.n	800800c <xTaskCreateStatic+0x28>
 8007ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffc:	f383 8811 	msr	BASEPRI, r3
 8008000:	f3bf 8f6f 	isb	sy
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	623b      	str	r3, [r7, #32]
 800800a:	e7fe      	b.n	800800a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800800c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800e:	2b00      	cmp	r3, #0
 8008010:	d109      	bne.n	8008026 <xTaskCreateStatic+0x42>
 8008012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008016:	f383 8811 	msr	BASEPRI, r3
 800801a:	f3bf 8f6f 	isb	sy
 800801e:	f3bf 8f4f 	dsb	sy
 8008022:	61fb      	str	r3, [r7, #28]
 8008024:	e7fe      	b.n	8008024 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008026:	235c      	movs	r3, #92	; 0x5c
 8008028:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	2b5c      	cmp	r3, #92	; 0x5c
 800802e:	d009      	beq.n	8008044 <xTaskCreateStatic+0x60>
 8008030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	61bb      	str	r3, [r7, #24]
 8008042:	e7fe      	b.n	8008042 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008046:	2b00      	cmp	r3, #0
 8008048:	d01e      	beq.n	8008088 <xTaskCreateStatic+0xa4>
 800804a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804c:	2b00      	cmp	r3, #0
 800804e:	d01b      	beq.n	8008088 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008052:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008058:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805c:	2202      	movs	r2, #2
 800805e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008062:	2300      	movs	r3, #0
 8008064:	9303      	str	r3, [sp, #12]
 8008066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008068:	9302      	str	r3, [sp, #8]
 800806a:	f107 0314 	add.w	r3, r7, #20
 800806e:	9301      	str	r3, [sp, #4]
 8008070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	68b9      	ldr	r1, [r7, #8]
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f000 f850 	bl	8008120 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008080:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008082:	f000 f8d3 	bl	800822c <prvAddNewTaskToReadyList>
 8008086:	e001      	b.n	800808c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8008088:	2300      	movs	r3, #0
 800808a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800808c:	697b      	ldr	r3, [r7, #20]
	}
 800808e:	4618      	mov	r0, r3
 8008090:	3728      	adds	r7, #40	; 0x28
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008096:	b580      	push	{r7, lr}
 8008098:	b08c      	sub	sp, #48	; 0x30
 800809a:	af04      	add	r7, sp, #16
 800809c:	60f8      	str	r0, [r7, #12]
 800809e:	60b9      	str	r1, [r7, #8]
 80080a0:	603b      	str	r3, [r7, #0]
 80080a2:	4613      	mov	r3, r2
 80080a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080a6:	88fb      	ldrh	r3, [r7, #6]
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	4618      	mov	r0, r3
 80080ac:	f001 fdca 	bl	8009c44 <pvPortMalloc>
 80080b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00e      	beq.n	80080d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80080b8:	205c      	movs	r0, #92	; 0x5c
 80080ba:	f001 fdc3 	bl	8009c44 <pvPortMalloc>
 80080be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d003      	beq.n	80080ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	631a      	str	r2, [r3, #48]	; 0x30
 80080cc:	e005      	b.n	80080da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80080ce:	6978      	ldr	r0, [r7, #20]
 80080d0:	f001 fe7e 	bl	8009dd0 <vPortFree>
 80080d4:	e001      	b.n	80080da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80080d6:	2300      	movs	r3, #0
 80080d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d017      	beq.n	8008110 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80080e8:	88fa      	ldrh	r2, [r7, #6]
 80080ea:	2300      	movs	r3, #0
 80080ec:	9303      	str	r3, [sp, #12]
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	9302      	str	r3, [sp, #8]
 80080f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f4:	9301      	str	r3, [sp, #4]
 80080f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	68b9      	ldr	r1, [r7, #8]
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f000 f80e 	bl	8008120 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008104:	69f8      	ldr	r0, [r7, #28]
 8008106:	f000 f891 	bl	800822c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800810a:	2301      	movs	r3, #1
 800810c:	61bb      	str	r3, [r7, #24]
 800810e:	e002      	b.n	8008116 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008110:	f04f 33ff 	mov.w	r3, #4294967295
 8008114:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008116:	69bb      	ldr	r3, [r7, #24]
	}
 8008118:	4618      	mov	r0, r3
 800811a:	3720      	adds	r7, #32
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b088      	sub	sp, #32
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
 800812c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800812e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008130:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	461a      	mov	r2, r3
 8008138:	21a5      	movs	r1, #165	; 0xa5
 800813a:	f001 ff8a 	bl	800a052 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008148:	3b01      	subs	r3, #1
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	f023 0307 	bic.w	r3, r3, #7
 8008156:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	f003 0307 	and.w	r3, r3, #7
 800815e:	2b00      	cmp	r3, #0
 8008160:	d009      	beq.n	8008176 <prvInitialiseNewTask+0x56>
 8008162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008166:	f383 8811 	msr	BASEPRI, r3
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	617b      	str	r3, [r7, #20]
 8008174:	e7fe      	b.n	8008174 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008176:	2300      	movs	r3, #0
 8008178:	61fb      	str	r3, [r7, #28]
 800817a:	e012      	b.n	80081a2 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	4413      	add	r3, r2
 8008182:	7819      	ldrb	r1, [r3, #0]
 8008184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	4413      	add	r3, r2
 800818a:	3334      	adds	r3, #52	; 0x34
 800818c:	460a      	mov	r2, r1
 800818e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	4413      	add	r3, r2
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d006      	beq.n	80081aa <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	3301      	adds	r3, #1
 80081a0:	61fb      	str	r3, [r7, #28]
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	2b0f      	cmp	r3, #15
 80081a6:	d9e9      	bls.n	800817c <prvInitialiseNewTask+0x5c>
 80081a8:	e000      	b.n	80081ac <prvInitialiseNewTask+0x8c>
		{
			break;
 80081aa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80081ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80081b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b6:	2b37      	cmp	r3, #55	; 0x37
 80081b8:	d901      	bls.n	80081be <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80081ba:	2337      	movs	r3, #55	; 0x37
 80081bc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80081be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081c2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80081c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081c8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80081ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081cc:	2200      	movs	r2, #0
 80081ce:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80081d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d2:	3304      	adds	r3, #4
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7ff f964 	bl	80074a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80081da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081dc:	3318      	adds	r3, #24
 80081de:	4618      	mov	r0, r3
 80081e0:	f7ff f95f 	bl	80074a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80081e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80081f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081f8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80081fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fc:	2200      	movs	r2, #0
 80081fe:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008202:	2200      	movs	r2, #0
 8008204:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008208:	683a      	ldr	r2, [r7, #0]
 800820a:	68f9      	ldr	r1, [r7, #12]
 800820c:	69b8      	ldr	r0, [r7, #24]
 800820e:	f001 fb35 	bl	800987c <pxPortInitialiseStack>
 8008212:	4602      	mov	r2, r0
 8008214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008216:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821a:	2b00      	cmp	r3, #0
 800821c:	d002      	beq.n	8008224 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800821e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008222:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008224:	bf00      	nop
 8008226:	3720      	adds	r7, #32
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008234:	f001 fc10 	bl	8009a58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008238:	4b2d      	ldr	r3, [pc, #180]	; (80082f0 <prvAddNewTaskToReadyList+0xc4>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	3301      	adds	r3, #1
 800823e:	4a2c      	ldr	r2, [pc, #176]	; (80082f0 <prvAddNewTaskToReadyList+0xc4>)
 8008240:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008242:	4b2c      	ldr	r3, [pc, #176]	; (80082f4 <prvAddNewTaskToReadyList+0xc8>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d109      	bne.n	800825e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800824a:	4a2a      	ldr	r2, [pc, #168]	; (80082f4 <prvAddNewTaskToReadyList+0xc8>)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008250:	4b27      	ldr	r3, [pc, #156]	; (80082f0 <prvAddNewTaskToReadyList+0xc4>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d110      	bne.n	800827a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008258:	f000 fdde 	bl	8008e18 <prvInitialiseTaskLists>
 800825c:	e00d      	b.n	800827a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800825e:	4b26      	ldr	r3, [pc, #152]	; (80082f8 <prvAddNewTaskToReadyList+0xcc>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d109      	bne.n	800827a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008266:	4b23      	ldr	r3, [pc, #140]	; (80082f4 <prvAddNewTaskToReadyList+0xc8>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008270:	429a      	cmp	r2, r3
 8008272:	d802      	bhi.n	800827a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008274:	4a1f      	ldr	r2, [pc, #124]	; (80082f4 <prvAddNewTaskToReadyList+0xc8>)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800827a:	4b20      	ldr	r3, [pc, #128]	; (80082fc <prvAddNewTaskToReadyList+0xd0>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	3301      	adds	r3, #1
 8008280:	4a1e      	ldr	r2, [pc, #120]	; (80082fc <prvAddNewTaskToReadyList+0xd0>)
 8008282:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008284:	4b1d      	ldr	r3, [pc, #116]	; (80082fc <prvAddNewTaskToReadyList+0xd0>)
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008290:	4b1b      	ldr	r3, [pc, #108]	; (8008300 <prvAddNewTaskToReadyList+0xd4>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	429a      	cmp	r2, r3
 8008296:	d903      	bls.n	80082a0 <prvAddNewTaskToReadyList+0x74>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829c:	4a18      	ldr	r2, [pc, #96]	; (8008300 <prvAddNewTaskToReadyList+0xd4>)
 800829e:	6013      	str	r3, [r2, #0]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a4:	4613      	mov	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	4a15      	ldr	r2, [pc, #84]	; (8008304 <prvAddNewTaskToReadyList+0xd8>)
 80082ae:	441a      	add	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	3304      	adds	r3, #4
 80082b4:	4619      	mov	r1, r3
 80082b6:	4610      	mov	r0, r2
 80082b8:	f7ff f8ff 	bl	80074ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80082bc:	f001 fbfa 	bl	8009ab4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80082c0:	4b0d      	ldr	r3, [pc, #52]	; (80082f8 <prvAddNewTaskToReadyList+0xcc>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00e      	beq.n	80082e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80082c8:	4b0a      	ldr	r3, [pc, #40]	; (80082f4 <prvAddNewTaskToReadyList+0xc8>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d207      	bcs.n	80082e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80082d6:	4b0c      	ldr	r3, [pc, #48]	; (8008308 <prvAddNewTaskToReadyList+0xdc>)
 80082d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082dc:	601a      	str	r2, [r3, #0]
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082e6:	bf00      	nop
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	20000bc4 	.word	0x20000bc4
 80082f4:	200006f0 	.word	0x200006f0
 80082f8:	20000bd0 	.word	0x20000bd0
 80082fc:	20000be0 	.word	0x20000be0
 8008300:	20000bcc 	.word	0x20000bcc
 8008304:	200006f4 	.word	0x200006f4
 8008308:	e000ed04 	.word	0xe000ed04

0800830c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008314:	2300      	movs	r3, #0
 8008316:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d016      	beq.n	800834c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800831e:	4b13      	ldr	r3, [pc, #76]	; (800836c <vTaskDelay+0x60>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d009      	beq.n	800833a <vTaskDelay+0x2e>
 8008326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	60bb      	str	r3, [r7, #8]
 8008338:	e7fe      	b.n	8008338 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800833a:	f000 f98b 	bl	8008654 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800833e:	2100      	movs	r1, #0
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fec9 	bl	80090d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008346:	f000 f993 	bl	8008670 <xTaskResumeAll>
 800834a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d107      	bne.n	8008362 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008352:	4b07      	ldr	r3, [pc, #28]	; (8008370 <vTaskDelay+0x64>)
 8008354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008358:	601a      	str	r2, [r3, #0]
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008362:	bf00      	nop
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	20000bec 	.word	0x20000bec
 8008370:	e000ed04 	.word	0xe000ed04

08008374 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800837c:	f001 fb6c 	bl	8009a58 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d102      	bne.n	800838c <vTaskSuspend+0x18>
 8008386:	4b2f      	ldr	r3, [pc, #188]	; (8008444 <vTaskSuspend+0xd0>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	e000      	b.n	800838e <vTaskSuspend+0x1a>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	3304      	adds	r3, #4
 8008394:	4618      	mov	r0, r3
 8008396:	f7ff f8eb 	bl	8007570 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d004      	beq.n	80083ac <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	3318      	adds	r3, #24
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7ff f8e2 	bl	8007570 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	3304      	adds	r3, #4
 80083b0:	4619      	mov	r1, r3
 80083b2:	4825      	ldr	r0, [pc, #148]	; (8008448 <vTaskSuspend+0xd4>)
 80083b4:	f7ff f881 	bl	80074ba <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d103      	bne.n	80083cc <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80083cc:	f001 fb72 	bl	8009ab4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80083d0:	4b1e      	ldr	r3, [pc, #120]	; (800844c <vTaskSuspend+0xd8>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d005      	beq.n	80083e4 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80083d8:	f001 fb3e 	bl	8009a58 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80083dc:	f000 fdb6 	bl	8008f4c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80083e0:	f001 fb68 	bl	8009ab4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80083e4:	4b17      	ldr	r3, [pc, #92]	; (8008444 <vTaskSuspend+0xd0>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d126      	bne.n	800843c <vTaskSuspend+0xc8>
		{
			if( xSchedulerRunning != pdFALSE )
 80083ee:	4b17      	ldr	r3, [pc, #92]	; (800844c <vTaskSuspend+0xd8>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d016      	beq.n	8008424 <vTaskSuspend+0xb0>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80083f6:	4b16      	ldr	r3, [pc, #88]	; (8008450 <vTaskSuspend+0xdc>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d009      	beq.n	8008412 <vTaskSuspend+0x9e>
 80083fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	60bb      	str	r3, [r7, #8]
 8008410:	e7fe      	b.n	8008410 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 8008412:	4b10      	ldr	r3, [pc, #64]	; (8008454 <vTaskSuspend+0xe0>)
 8008414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008418:	601a      	str	r2, [r3, #0]
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008422:	e00b      	b.n	800843c <vTaskSuspend+0xc8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8008424:	4b08      	ldr	r3, [pc, #32]	; (8008448 <vTaskSuspend+0xd4>)
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	4b0b      	ldr	r3, [pc, #44]	; (8008458 <vTaskSuspend+0xe4>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	429a      	cmp	r2, r3
 800842e:	d103      	bne.n	8008438 <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
 8008430:	4b04      	ldr	r3, [pc, #16]	; (8008444 <vTaskSuspend+0xd0>)
 8008432:	2200      	movs	r2, #0
 8008434:	601a      	str	r2, [r3, #0]
	}
 8008436:	e001      	b.n	800843c <vTaskSuspend+0xc8>
					vTaskSwitchContext();
 8008438:	f000 fa9c 	bl	8008974 <vTaskSwitchContext>
	}
 800843c:	bf00      	nop
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	200006f0 	.word	0x200006f0
 8008448:	20000bb0 	.word	0x20000bb0
 800844c:	20000bd0 	.word	0x20000bd0
 8008450:	20000bec 	.word	0x20000bec
 8008454:	e000ed04 	.word	0xe000ed04
 8008458:	20000bc4 	.word	0x20000bc4

0800845c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800845c:	b480      	push	{r7}
 800845e:	b087      	sub	sp, #28
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8008464:	2300      	movs	r3, #0
 8008466:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d109      	bne.n	8008486 <prvTaskIsTaskSuspended+0x2a>
 8008472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008476:	f383 8811 	msr	BASEPRI, r3
 800847a:	f3bf 8f6f 	isb	sy
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	60fb      	str	r3, [r7, #12]
 8008484:	e7fe      	b.n	8008484 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	4a0f      	ldr	r2, [pc, #60]	; (80084c8 <prvTaskIsTaskSuspended+0x6c>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d101      	bne.n	8008494 <prvTaskIsTaskSuspended+0x38>
 8008490:	2301      	movs	r3, #1
 8008492:	e000      	b.n	8008496 <prvTaskIsTaskSuspended+0x3a>
 8008494:	2300      	movs	r3, #0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00f      	beq.n	80084ba <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849e:	4a0b      	ldr	r2, [pc, #44]	; (80084cc <prvTaskIsTaskSuspended+0x70>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d00a      	beq.n	80084ba <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d101      	bne.n	80084b0 <prvTaskIsTaskSuspended+0x54>
 80084ac:	2301      	movs	r3, #1
 80084ae:	e000      	b.n	80084b2 <prvTaskIsTaskSuspended+0x56>
 80084b0:	2300      	movs	r3, #0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 80084b6:	2301      	movs	r3, #1
 80084b8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80084ba:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80084bc:	4618      	mov	r0, r3
 80084be:	371c      	adds	r7, #28
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bc80      	pop	{r7}
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	20000bb0 	.word	0x20000bb0
 80084cc:	20000b84 	.word	0x20000b84

080084d0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d109      	bne.n	80084f6 <vTaskResume+0x26>
 80084e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e6:	f383 8811 	msr	BASEPRI, r3
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	60bb      	str	r3, [r7, #8]
 80084f4:	e7fe      	b.n	80084f4 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d03a      	beq.n	8008572 <vTaskResume+0xa2>
 80084fc:	4b1f      	ldr	r3, [pc, #124]	; (800857c <vTaskResume+0xac>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	429a      	cmp	r2, r3
 8008504:	d035      	beq.n	8008572 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8008506:	f001 faa7 	bl	8009a58 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f7ff ffa6 	bl	800845c <prvTaskIsTaskSuspended>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d02b      	beq.n	800856e <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	3304      	adds	r3, #4
 800851a:	4618      	mov	r0, r3
 800851c:	f7ff f828 	bl	8007570 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008524:	4b16      	ldr	r3, [pc, #88]	; (8008580 <vTaskResume+0xb0>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	429a      	cmp	r2, r3
 800852a:	d903      	bls.n	8008534 <vTaskResume+0x64>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008530:	4a13      	ldr	r2, [pc, #76]	; (8008580 <vTaskResume+0xb0>)
 8008532:	6013      	str	r3, [r2, #0]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008538:	4613      	mov	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4413      	add	r3, r2
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	4a10      	ldr	r2, [pc, #64]	; (8008584 <vTaskResume+0xb4>)
 8008542:	441a      	add	r2, r3
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	3304      	adds	r3, #4
 8008548:	4619      	mov	r1, r3
 800854a:	4610      	mov	r0, r2
 800854c:	f7fe ffb5 	bl	80074ba <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008554:	4b09      	ldr	r3, [pc, #36]	; (800857c <vTaskResume+0xac>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855a:	429a      	cmp	r2, r3
 800855c:	d307      	bcc.n	800856e <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800855e:	4b0a      	ldr	r3, [pc, #40]	; (8008588 <vTaskResume+0xb8>)
 8008560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008564:	601a      	str	r2, [r3, #0]
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800856e:	f001 faa1 	bl	8009ab4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008572:	bf00      	nop
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	200006f0 	.word	0x200006f0
 8008580:	20000bcc 	.word	0x20000bcc
 8008584:	200006f4 	.word	0x200006f4
 8008588:	e000ed04 	.word	0xe000ed04

0800858c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b08a      	sub	sp, #40	; 0x28
 8008590:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008592:	2300      	movs	r3, #0
 8008594:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008596:	2300      	movs	r3, #0
 8008598:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800859a:	463a      	mov	r2, r7
 800859c:	1d39      	adds	r1, r7, #4
 800859e:	f107 0308 	add.w	r3, r7, #8
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fe fd7c 	bl	80070a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	68ba      	ldr	r2, [r7, #8]
 80085ae:	9202      	str	r2, [sp, #8]
 80085b0:	9301      	str	r3, [sp, #4]
 80085b2:	2300      	movs	r3, #0
 80085b4:	9300      	str	r3, [sp, #0]
 80085b6:	2300      	movs	r3, #0
 80085b8:	460a      	mov	r2, r1
 80085ba:	4920      	ldr	r1, [pc, #128]	; (800863c <vTaskStartScheduler+0xb0>)
 80085bc:	4820      	ldr	r0, [pc, #128]	; (8008640 <vTaskStartScheduler+0xb4>)
 80085be:	f7ff fd11 	bl	8007fe4 <xTaskCreateStatic>
 80085c2:	4602      	mov	r2, r0
 80085c4:	4b1f      	ldr	r3, [pc, #124]	; (8008644 <vTaskStartScheduler+0xb8>)
 80085c6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80085c8:	4b1e      	ldr	r3, [pc, #120]	; (8008644 <vTaskStartScheduler+0xb8>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d002      	beq.n	80085d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80085d0:	2301      	movs	r3, #1
 80085d2:	617b      	str	r3, [r7, #20]
 80085d4:	e001      	b.n	80085da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80085d6:	2300      	movs	r3, #0
 80085d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d102      	bne.n	80085e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80085e0:	f000 fdce 	bl	8009180 <xTimerCreateTimerTask>
 80085e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d115      	bne.n	8008618 <vTaskStartScheduler+0x8c>
 80085ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80085fe:	4b12      	ldr	r3, [pc, #72]	; (8008648 <vTaskStartScheduler+0xbc>)
 8008600:	f04f 32ff 	mov.w	r2, #4294967295
 8008604:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008606:	4b11      	ldr	r3, [pc, #68]	; (800864c <vTaskStartScheduler+0xc0>)
 8008608:	2201      	movs	r2, #1
 800860a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800860c:	4b10      	ldr	r3, [pc, #64]	; (8008650 <vTaskStartScheduler+0xc4>)
 800860e:	2200      	movs	r2, #0
 8008610:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008612:	f001 f9b1 	bl	8009978 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008616:	e00d      	b.n	8008634 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800861e:	d109      	bne.n	8008634 <vTaskStartScheduler+0xa8>
 8008620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008624:	f383 8811 	msr	BASEPRI, r3
 8008628:	f3bf 8f6f 	isb	sy
 800862c:	f3bf 8f4f 	dsb	sy
 8008630:	60fb      	str	r3, [r7, #12]
 8008632:	e7fe      	b.n	8008632 <vTaskStartScheduler+0xa6>
}
 8008634:	bf00      	nop
 8008636:	3718      	adds	r7, #24
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	0800a328 	.word	0x0800a328
 8008640:	08008de5 	.word	0x08008de5
 8008644:	20000be8 	.word	0x20000be8
 8008648:	20000be4 	.word	0x20000be4
 800864c:	20000bd0 	.word	0x20000bd0
 8008650:	20000bc8 	.word	0x20000bc8

08008654 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008654:	b480      	push	{r7}
 8008656:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008658:	4b04      	ldr	r3, [pc, #16]	; (800866c <vTaskSuspendAll+0x18>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3301      	adds	r3, #1
 800865e:	4a03      	ldr	r2, [pc, #12]	; (800866c <vTaskSuspendAll+0x18>)
 8008660:	6013      	str	r3, [r2, #0]
}
 8008662:	bf00      	nop
 8008664:	46bd      	mov	sp, r7
 8008666:	bc80      	pop	{r7}
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	20000bec 	.word	0x20000bec

08008670 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008676:	2300      	movs	r3, #0
 8008678:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800867a:	2300      	movs	r3, #0
 800867c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800867e:	4b41      	ldr	r3, [pc, #260]	; (8008784 <xTaskResumeAll+0x114>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d109      	bne.n	800869a <xTaskResumeAll+0x2a>
 8008686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868a:	f383 8811 	msr	BASEPRI, r3
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	603b      	str	r3, [r7, #0]
 8008698:	e7fe      	b.n	8008698 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800869a:	f001 f9dd 	bl	8009a58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800869e:	4b39      	ldr	r3, [pc, #228]	; (8008784 <xTaskResumeAll+0x114>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	3b01      	subs	r3, #1
 80086a4:	4a37      	ldr	r2, [pc, #220]	; (8008784 <xTaskResumeAll+0x114>)
 80086a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086a8:	4b36      	ldr	r3, [pc, #216]	; (8008784 <xTaskResumeAll+0x114>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d162      	bne.n	8008776 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80086b0:	4b35      	ldr	r3, [pc, #212]	; (8008788 <xTaskResumeAll+0x118>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d05e      	beq.n	8008776 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086b8:	e02f      	b.n	800871a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80086ba:	4b34      	ldr	r3, [pc, #208]	; (800878c <xTaskResumeAll+0x11c>)
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	3318      	adds	r3, #24
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fe ff52 	bl	8007570 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	3304      	adds	r3, #4
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fe ff4d 	bl	8007570 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086da:	4b2d      	ldr	r3, [pc, #180]	; (8008790 <xTaskResumeAll+0x120>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d903      	bls.n	80086ea <xTaskResumeAll+0x7a>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e6:	4a2a      	ldr	r2, [pc, #168]	; (8008790 <xTaskResumeAll+0x120>)
 80086e8:	6013      	str	r3, [r2, #0]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ee:	4613      	mov	r3, r2
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	4413      	add	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4a27      	ldr	r2, [pc, #156]	; (8008794 <xTaskResumeAll+0x124>)
 80086f8:	441a      	add	r2, r3
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	3304      	adds	r3, #4
 80086fe:	4619      	mov	r1, r3
 8008700:	4610      	mov	r0, r2
 8008702:	f7fe feda 	bl	80074ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800870a:	4b23      	ldr	r3, [pc, #140]	; (8008798 <xTaskResumeAll+0x128>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008710:	429a      	cmp	r2, r3
 8008712:	d302      	bcc.n	800871a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008714:	4b21      	ldr	r3, [pc, #132]	; (800879c <xTaskResumeAll+0x12c>)
 8008716:	2201      	movs	r2, #1
 8008718:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800871a:	4b1c      	ldr	r3, [pc, #112]	; (800878c <xTaskResumeAll+0x11c>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1cb      	bne.n	80086ba <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d001      	beq.n	800872c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008728:	f000 fc10 	bl	8008f4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800872c:	4b1c      	ldr	r3, [pc, #112]	; (80087a0 <xTaskResumeAll+0x130>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d010      	beq.n	800875a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008738:	f000 f856 	bl	80087e8 <xTaskIncrementTick>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d002      	beq.n	8008748 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008742:	4b16      	ldr	r3, [pc, #88]	; (800879c <xTaskResumeAll+0x12c>)
 8008744:	2201      	movs	r2, #1
 8008746:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	3b01      	subs	r3, #1
 800874c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1f1      	bne.n	8008738 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008754:	4b12      	ldr	r3, [pc, #72]	; (80087a0 <xTaskResumeAll+0x130>)
 8008756:	2200      	movs	r2, #0
 8008758:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800875a:	4b10      	ldr	r3, [pc, #64]	; (800879c <xTaskResumeAll+0x12c>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d009      	beq.n	8008776 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008762:	2301      	movs	r3, #1
 8008764:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008766:	4b0f      	ldr	r3, [pc, #60]	; (80087a4 <xTaskResumeAll+0x134>)
 8008768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800876c:	601a      	str	r2, [r3, #0]
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008776:	f001 f99d 	bl	8009ab4 <vPortExitCritical>

	return xAlreadyYielded;
 800877a:	68bb      	ldr	r3, [r7, #8]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	20000bec 	.word	0x20000bec
 8008788:	20000bc4 	.word	0x20000bc4
 800878c:	20000b84 	.word	0x20000b84
 8008790:	20000bcc 	.word	0x20000bcc
 8008794:	200006f4 	.word	0x200006f4
 8008798:	200006f0 	.word	0x200006f0
 800879c:	20000bd8 	.word	0x20000bd8
 80087a0:	20000bd4 	.word	0x20000bd4
 80087a4:	e000ed04 	.word	0xe000ed04

080087a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80087ae:	4b04      	ldr	r3, [pc, #16]	; (80087c0 <xTaskGetTickCount+0x18>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80087b4:	687b      	ldr	r3, [r7, #4]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	370c      	adds	r7, #12
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bc80      	pop	{r7}
 80087be:	4770      	bx	lr
 80087c0:	20000bc8 	.word	0x20000bc8

080087c4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087ca:	f001 f9ff 	bl	8009bcc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80087ce:	2300      	movs	r3, #0
 80087d0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80087d2:	4b04      	ldr	r3, [pc, #16]	; (80087e4 <xTaskGetTickCountFromISR+0x20>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087d8:	683b      	ldr	r3, [r7, #0]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	20000bc8 	.word	0x20000bc8

080087e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b086      	sub	sp, #24
 80087ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80087ee:	2300      	movs	r3, #0
 80087f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087f2:	4b55      	ldr	r3, [pc, #340]	; (8008948 <xTaskIncrementTick+0x160>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f040 8093 	bne.w	8008922 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80087fc:	4b53      	ldr	r3, [pc, #332]	; (800894c <xTaskIncrementTick+0x164>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	3301      	adds	r3, #1
 8008802:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008804:	4a51      	ldr	r2, [pc, #324]	; (800894c <xTaskIncrementTick+0x164>)
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d11f      	bne.n	8008850 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008810:	4b4f      	ldr	r3, [pc, #316]	; (8008950 <xTaskIncrementTick+0x168>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d009      	beq.n	800882e <xTaskIncrementTick+0x46>
 800881a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	603b      	str	r3, [r7, #0]
 800882c:	e7fe      	b.n	800882c <xTaskIncrementTick+0x44>
 800882e:	4b48      	ldr	r3, [pc, #288]	; (8008950 <xTaskIncrementTick+0x168>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	60fb      	str	r3, [r7, #12]
 8008834:	4b47      	ldr	r3, [pc, #284]	; (8008954 <xTaskIncrementTick+0x16c>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a45      	ldr	r2, [pc, #276]	; (8008950 <xTaskIncrementTick+0x168>)
 800883a:	6013      	str	r3, [r2, #0]
 800883c:	4a45      	ldr	r2, [pc, #276]	; (8008954 <xTaskIncrementTick+0x16c>)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	6013      	str	r3, [r2, #0]
 8008842:	4b45      	ldr	r3, [pc, #276]	; (8008958 <xTaskIncrementTick+0x170>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3301      	adds	r3, #1
 8008848:	4a43      	ldr	r2, [pc, #268]	; (8008958 <xTaskIncrementTick+0x170>)
 800884a:	6013      	str	r3, [r2, #0]
 800884c:	f000 fb7e 	bl	8008f4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008850:	4b42      	ldr	r3, [pc, #264]	; (800895c <xTaskIncrementTick+0x174>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	693a      	ldr	r2, [r7, #16]
 8008856:	429a      	cmp	r2, r3
 8008858:	d34e      	bcc.n	80088f8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800885a:	4b3d      	ldr	r3, [pc, #244]	; (8008950 <xTaskIncrementTick+0x168>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d101      	bne.n	8008868 <xTaskIncrementTick+0x80>
 8008864:	2301      	movs	r3, #1
 8008866:	e000      	b.n	800886a <xTaskIncrementTick+0x82>
 8008868:	2300      	movs	r3, #0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d004      	beq.n	8008878 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800886e:	4b3b      	ldr	r3, [pc, #236]	; (800895c <xTaskIncrementTick+0x174>)
 8008870:	f04f 32ff 	mov.w	r2, #4294967295
 8008874:	601a      	str	r2, [r3, #0]
					break;
 8008876:	e03f      	b.n	80088f8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008878:	4b35      	ldr	r3, [pc, #212]	; (8008950 <xTaskIncrementTick+0x168>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	429a      	cmp	r2, r3
 800888e:	d203      	bcs.n	8008898 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008890:	4a32      	ldr	r2, [pc, #200]	; (800895c <xTaskIncrementTick+0x174>)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6013      	str	r3, [r2, #0]
						break;
 8008896:	e02f      	b.n	80088f8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	3304      	adds	r3, #4
 800889c:	4618      	mov	r0, r3
 800889e:	f7fe fe67 	bl	8007570 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d004      	beq.n	80088b4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	3318      	adds	r3, #24
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fe5e 	bl	8007570 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b8:	4b29      	ldr	r3, [pc, #164]	; (8008960 <xTaskIncrementTick+0x178>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d903      	bls.n	80088c8 <xTaskIncrementTick+0xe0>
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c4:	4a26      	ldr	r2, [pc, #152]	; (8008960 <xTaskIncrementTick+0x178>)
 80088c6:	6013      	str	r3, [r2, #0]
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088cc:	4613      	mov	r3, r2
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4413      	add	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4a23      	ldr	r2, [pc, #140]	; (8008964 <xTaskIncrementTick+0x17c>)
 80088d6:	441a      	add	r2, r3
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	3304      	adds	r3, #4
 80088dc:	4619      	mov	r1, r3
 80088de:	4610      	mov	r0, r2
 80088e0:	f7fe fdeb 	bl	80074ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088e8:	4b1f      	ldr	r3, [pc, #124]	; (8008968 <xTaskIncrementTick+0x180>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d3b3      	bcc.n	800885a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80088f2:	2301      	movs	r3, #1
 80088f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088f6:	e7b0      	b.n	800885a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80088f8:	4b1b      	ldr	r3, [pc, #108]	; (8008968 <xTaskIncrementTick+0x180>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088fe:	4919      	ldr	r1, [pc, #100]	; (8008964 <xTaskIncrementTick+0x17c>)
 8008900:	4613      	mov	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	4413      	add	r3, r2
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	440b      	add	r3, r1
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d901      	bls.n	8008914 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8008910:	2301      	movs	r3, #1
 8008912:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8008914:	4b15      	ldr	r3, [pc, #84]	; (800896c <xTaskIncrementTick+0x184>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d109      	bne.n	8008930 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 800891c:	f7f8 f9aa 	bl	8000c74 <vApplicationTickHook>
 8008920:	e006      	b.n	8008930 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008922:	4b12      	ldr	r3, [pc, #72]	; (800896c <xTaskIncrementTick+0x184>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3301      	adds	r3, #1
 8008928:	4a10      	ldr	r2, [pc, #64]	; (800896c <xTaskIncrementTick+0x184>)
 800892a:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800892c:	f7f8 f9a2 	bl	8000c74 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008930:	4b0f      	ldr	r3, [pc, #60]	; (8008970 <xTaskIncrementTick+0x188>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d001      	beq.n	800893c <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 8008938:	2301      	movs	r3, #1
 800893a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800893c:	697b      	ldr	r3, [r7, #20]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3718      	adds	r7, #24
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	20000bec 	.word	0x20000bec
 800894c:	20000bc8 	.word	0x20000bc8
 8008950:	20000b7c 	.word	0x20000b7c
 8008954:	20000b80 	.word	0x20000b80
 8008958:	20000bdc 	.word	0x20000bdc
 800895c:	20000be4 	.word	0x20000be4
 8008960:	20000bcc 	.word	0x20000bcc
 8008964:	200006f4 	.word	0x200006f4
 8008968:	200006f0 	.word	0x200006f0
 800896c:	20000bd4 	.word	0x20000bd4
 8008970:	20000bd8 	.word	0x20000bd8

08008974 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800897a:	4b2f      	ldr	r3, [pc, #188]	; (8008a38 <vTaskSwitchContext+0xc4>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d003      	beq.n	800898a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008982:	4b2e      	ldr	r3, [pc, #184]	; (8008a3c <vTaskSwitchContext+0xc8>)
 8008984:	2201      	movs	r2, #1
 8008986:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008988:	e051      	b.n	8008a2e <vTaskSwitchContext+0xba>
		xYieldPending = pdFALSE;
 800898a:	4b2c      	ldr	r3, [pc, #176]	; (8008a3c <vTaskSwitchContext+0xc8>)
 800898c:	2200      	movs	r2, #0
 800898e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008990:	4b2b      	ldr	r3, [pc, #172]	; (8008a40 <vTaskSwitchContext+0xcc>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	4b2a      	ldr	r3, [pc, #168]	; (8008a40 <vTaskSwitchContext+0xcc>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899c:	429a      	cmp	r2, r3
 800899e:	d808      	bhi.n	80089b2 <vTaskSwitchContext+0x3e>
 80089a0:	4b27      	ldr	r3, [pc, #156]	; (8008a40 <vTaskSwitchContext+0xcc>)
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	4b26      	ldr	r3, [pc, #152]	; (8008a40 <vTaskSwitchContext+0xcc>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	3334      	adds	r3, #52	; 0x34
 80089aa:	4619      	mov	r1, r3
 80089ac:	4610      	mov	r0, r2
 80089ae:	f7f8 f967 	bl	8000c80 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80089b2:	4b24      	ldr	r3, [pc, #144]	; (8008a44 <vTaskSwitchContext+0xd0>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	60fb      	str	r3, [r7, #12]
 80089b8:	e00f      	b.n	80089da <vTaskSwitchContext+0x66>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d109      	bne.n	80089d4 <vTaskSwitchContext+0x60>
 80089c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	607b      	str	r3, [r7, #4]
 80089d2:	e7fe      	b.n	80089d2 <vTaskSwitchContext+0x5e>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	3b01      	subs	r3, #1
 80089d8:	60fb      	str	r3, [r7, #12]
 80089da:	491b      	ldr	r1, [pc, #108]	; (8008a48 <vTaskSwitchContext+0xd4>)
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	4613      	mov	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4413      	add	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	440b      	add	r3, r1
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d0e5      	beq.n	80089ba <vTaskSwitchContext+0x46>
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	4613      	mov	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4a13      	ldr	r2, [pc, #76]	; (8008a48 <vTaskSwitchContext+0xd4>)
 80089fa:	4413      	add	r3, r2
 80089fc:	60bb      	str	r3, [r7, #8]
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	685a      	ldr	r2, [r3, #4]
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	605a      	str	r2, [r3, #4]
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	685a      	ldr	r2, [r3, #4]
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	3308      	adds	r3, #8
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d104      	bne.n	8008a1e <vTaskSwitchContext+0xaa>
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	685a      	ldr	r2, [r3, #4]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	605a      	str	r2, [r3, #4]
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	4a06      	ldr	r2, [pc, #24]	; (8008a40 <vTaskSwitchContext+0xcc>)
 8008a26:	6013      	str	r3, [r2, #0]
 8008a28:	4a06      	ldr	r2, [pc, #24]	; (8008a44 <vTaskSwitchContext+0xd0>)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6013      	str	r3, [r2, #0]
}
 8008a2e:	bf00      	nop
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	20000bec 	.word	0x20000bec
 8008a3c:	20000bd8 	.word	0x20000bd8
 8008a40:	200006f0 	.word	0x200006f0
 8008a44:	20000bcc 	.word	0x20000bcc
 8008a48:	200006f4 	.word	0x200006f4

08008a4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d109      	bne.n	8008a70 <vTaskPlaceOnEventList+0x24>
 8008a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a60:	f383 8811 	msr	BASEPRI, r3
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	60fb      	str	r3, [r7, #12]
 8008a6e:	e7fe      	b.n	8008a6e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a70:	4b07      	ldr	r3, [pc, #28]	; (8008a90 <vTaskPlaceOnEventList+0x44>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	3318      	adds	r3, #24
 8008a76:	4619      	mov	r1, r3
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f7fe fd41 	bl	8007500 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a7e:	2101      	movs	r1, #1
 8008a80:	6838      	ldr	r0, [r7, #0]
 8008a82:	f000 fb29 	bl	80090d8 <prvAddCurrentTaskToDelayedList>
}
 8008a86:	bf00      	nop
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	200006f0 	.word	0x200006f0

08008a94 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b086      	sub	sp, #24
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d109      	bne.n	8008aba <vTaskPlaceOnUnorderedEventList+0x26>
 8008aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	617b      	str	r3, [r7, #20]
 8008ab8:	e7fe      	b.n	8008ab8 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8008aba:	4b11      	ldr	r3, [pc, #68]	; (8008b00 <vTaskPlaceOnUnorderedEventList+0x6c>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d109      	bne.n	8008ad6 <vTaskPlaceOnUnorderedEventList+0x42>
 8008ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac6:	f383 8811 	msr	BASEPRI, r3
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	613b      	str	r3, [r7, #16]
 8008ad4:	e7fe      	b.n	8008ad4 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008ad6:	4b0b      	ldr	r3, [pc, #44]	; (8008b04 <vTaskPlaceOnUnorderedEventList+0x70>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68ba      	ldr	r2, [r7, #8]
 8008adc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008ae0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ae2:	4b08      	ldr	r3, [pc, #32]	; (8008b04 <vTaskPlaceOnUnorderedEventList+0x70>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3318      	adds	r3, #24
 8008ae8:	4619      	mov	r1, r3
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	f7fe fce5 	bl	80074ba <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008af0:	2101      	movs	r1, #1
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 faf0 	bl	80090d8 <prvAddCurrentTaskToDelayedList>
}
 8008af8:	bf00      	nop
 8008afa:	3718      	adds	r7, #24
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	20000bec 	.word	0x20000bec
 8008b04:	200006f0 	.word	0x200006f0

08008b08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b086      	sub	sp, #24
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d109      	bne.n	8008b2e <vTaskPlaceOnEventListRestricted+0x26>
 8008b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	617b      	str	r3, [r7, #20]
 8008b2c:	e7fe      	b.n	8008b2c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b2e:	4b0a      	ldr	r3, [pc, #40]	; (8008b58 <vTaskPlaceOnEventListRestricted+0x50>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	3318      	adds	r3, #24
 8008b34:	4619      	mov	r1, r3
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f7fe fcbf 	bl	80074ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d002      	beq.n	8008b48 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8008b42:	f04f 33ff 	mov.w	r3, #4294967295
 8008b46:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b48:	6879      	ldr	r1, [r7, #4]
 8008b4a:	68b8      	ldr	r0, [r7, #8]
 8008b4c:	f000 fac4 	bl	80090d8 <prvAddCurrentTaskToDelayedList>
	}
 8008b50:	bf00      	nop
 8008b52:	3718      	adds	r7, #24
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	200006f0 	.word	0x200006f0

08008b5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b086      	sub	sp, #24
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d109      	bne.n	8008b86 <xTaskRemoveFromEventList+0x2a>
 8008b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b76:	f383 8811 	msr	BASEPRI, r3
 8008b7a:	f3bf 8f6f 	isb	sy
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	60fb      	str	r3, [r7, #12]
 8008b84:	e7fe      	b.n	8008b84 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	3318      	adds	r3, #24
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fe fcf0 	bl	8007570 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b90:	4b1d      	ldr	r3, [pc, #116]	; (8008c08 <xTaskRemoveFromEventList+0xac>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d11d      	bne.n	8008bd4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fe fce7 	bl	8007570 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba6:	4b19      	ldr	r3, [pc, #100]	; (8008c0c <xTaskRemoveFromEventList+0xb0>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d903      	bls.n	8008bb6 <xTaskRemoveFromEventList+0x5a>
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb2:	4a16      	ldr	r2, [pc, #88]	; (8008c0c <xTaskRemoveFromEventList+0xb0>)
 8008bb4:	6013      	str	r3, [r2, #0]
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bba:	4613      	mov	r3, r2
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4413      	add	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4a13      	ldr	r2, [pc, #76]	; (8008c10 <xTaskRemoveFromEventList+0xb4>)
 8008bc4:	441a      	add	r2, r3
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	3304      	adds	r3, #4
 8008bca:	4619      	mov	r1, r3
 8008bcc:	4610      	mov	r0, r2
 8008bce:	f7fe fc74 	bl	80074ba <vListInsertEnd>
 8008bd2:	e005      	b.n	8008be0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	3318      	adds	r3, #24
 8008bd8:	4619      	mov	r1, r3
 8008bda:	480e      	ldr	r0, [pc, #56]	; (8008c14 <xTaskRemoveFromEventList+0xb8>)
 8008bdc:	f7fe fc6d 	bl	80074ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be4:	4b0c      	ldr	r3, [pc, #48]	; (8008c18 <xTaskRemoveFromEventList+0xbc>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d905      	bls.n	8008bfa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008bf2:	4b0a      	ldr	r3, [pc, #40]	; (8008c1c <xTaskRemoveFromEventList+0xc0>)
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	601a      	str	r2, [r3, #0]
 8008bf8:	e001      	b.n	8008bfe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008bfe:	697b      	ldr	r3, [r7, #20]
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3718      	adds	r7, #24
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	20000bec 	.word	0x20000bec
 8008c0c:	20000bcc 	.word	0x20000bcc
 8008c10:	200006f4 	.word	0x200006f4
 8008c14:	20000b84 	.word	0x20000b84
 8008c18:	200006f0 	.word	0x200006f0
 8008c1c:	20000bd8 	.word	0x20000bd8

08008c20 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b086      	sub	sp, #24
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8008c2a:	4b28      	ldr	r3, [pc, #160]	; (8008ccc <vTaskRemoveFromUnorderedEventList+0xac>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d109      	bne.n	8008c46 <vTaskRemoveFromUnorderedEventList+0x26>
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	613b      	str	r3, [r7, #16]
 8008c44:	e7fe      	b.n	8008c44 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d109      	bne.n	8008c70 <vTaskRemoveFromUnorderedEventList+0x50>
 8008c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c60:	f383 8811 	msr	BASEPRI, r3
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	60fb      	str	r3, [r7, #12]
 8008c6e:	e7fe      	b.n	8008c6e <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f7fe fc7d 	bl	8007570 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	3304      	adds	r3, #4
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fe fc78 	bl	8007570 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c84:	4b12      	ldr	r3, [pc, #72]	; (8008cd0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d903      	bls.n	8008c94 <vTaskRemoveFromUnorderedEventList+0x74>
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c90:	4a0f      	ldr	r2, [pc, #60]	; (8008cd0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8008c92:	6013      	str	r3, [r2, #0]
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c98:	4613      	mov	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4a0c      	ldr	r2, [pc, #48]	; (8008cd4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8008ca2:	441a      	add	r2, r3
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	3304      	adds	r3, #4
 8008ca8:	4619      	mov	r1, r3
 8008caa:	4610      	mov	r0, r2
 8008cac:	f7fe fc05 	bl	80074ba <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb4:	4b08      	ldr	r3, [pc, #32]	; (8008cd8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d902      	bls.n	8008cc4 <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8008cbe:	4b07      	ldr	r3, [pc, #28]	; (8008cdc <vTaskRemoveFromUnorderedEventList+0xbc>)
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	601a      	str	r2, [r3, #0]
	}
}
 8008cc4:	bf00      	nop
 8008cc6:	3718      	adds	r7, #24
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	20000bec 	.word	0x20000bec
 8008cd0:	20000bcc 	.word	0x20000bcc
 8008cd4:	200006f4 	.word	0x200006f4
 8008cd8:	200006f0 	.word	0x200006f0
 8008cdc:	20000bd8 	.word	0x20000bd8

08008ce0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008ce8:	4b06      	ldr	r3, [pc, #24]	; (8008d04 <vTaskInternalSetTimeOutState+0x24>)
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008cf0:	4b05      	ldr	r3, [pc, #20]	; (8008d08 <vTaskInternalSetTimeOutState+0x28>)
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	605a      	str	r2, [r3, #4]
}
 8008cf8:	bf00      	nop
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bc80      	pop	{r7}
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	20000bdc 	.word	0x20000bdc
 8008d08:	20000bc8 	.word	0x20000bc8

08008d0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b088      	sub	sp, #32
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d109      	bne.n	8008d30 <xTaskCheckForTimeOut+0x24>
 8008d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d20:	f383 8811 	msr	BASEPRI, r3
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	f3bf 8f4f 	dsb	sy
 8008d2c:	613b      	str	r3, [r7, #16]
 8008d2e:	e7fe      	b.n	8008d2e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d109      	bne.n	8008d4a <xTaskCheckForTimeOut+0x3e>
 8008d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3a:	f383 8811 	msr	BASEPRI, r3
 8008d3e:	f3bf 8f6f 	isb	sy
 8008d42:	f3bf 8f4f 	dsb	sy
 8008d46:	60fb      	str	r3, [r7, #12]
 8008d48:	e7fe      	b.n	8008d48 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008d4a:	f000 fe85 	bl	8009a58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d4e:	4b1d      	ldr	r3, [pc, #116]	; (8008dc4 <xTaskCheckForTimeOut+0xb8>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	69ba      	ldr	r2, [r7, #24]
 8008d5a:	1ad3      	subs	r3, r2, r3
 8008d5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d66:	d102      	bne.n	8008d6e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	61fb      	str	r3, [r7, #28]
 8008d6c:	e023      	b.n	8008db6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	4b15      	ldr	r3, [pc, #84]	; (8008dc8 <xTaskCheckForTimeOut+0xbc>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d007      	beq.n	8008d8a <xTaskCheckForTimeOut+0x7e>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	69ba      	ldr	r2, [r7, #24]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d302      	bcc.n	8008d8a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d84:	2301      	movs	r3, #1
 8008d86:	61fb      	str	r3, [r7, #28]
 8008d88:	e015      	b.n	8008db6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	697a      	ldr	r2, [r7, #20]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d20b      	bcs.n	8008dac <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	1ad2      	subs	r2, r2, r3
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f7ff ff9d 	bl	8008ce0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008da6:	2300      	movs	r3, #0
 8008da8:	61fb      	str	r3, [r7, #28]
 8008daa:	e004      	b.n	8008db6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	2200      	movs	r2, #0
 8008db0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008db2:	2301      	movs	r3, #1
 8008db4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008db6:	f000 fe7d 	bl	8009ab4 <vPortExitCritical>

	return xReturn;
 8008dba:	69fb      	ldr	r3, [r7, #28]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3720      	adds	r7, #32
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	20000bc8 	.word	0x20000bc8
 8008dc8:	20000bdc 	.word	0x20000bdc

08008dcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008dcc:	b480      	push	{r7}
 8008dce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008dd0:	4b03      	ldr	r3, [pc, #12]	; (8008de0 <vTaskMissedYield+0x14>)
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	601a      	str	r2, [r3, #0]
}
 8008dd6:	bf00      	nop
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bc80      	pop	{r7}
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	20000bd8 	.word	0x20000bd8

08008de4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008dec:	f000 f854 	bl	8008e98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008df0:	4b07      	ldr	r3, [pc, #28]	; (8008e10 <prvIdleTask+0x2c>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d907      	bls.n	8008e08 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008df8:	4b06      	ldr	r3, [pc, #24]	; (8008e14 <prvIdleTask+0x30>)
 8008dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dfe:	601a      	str	r2, [r3, #0]
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008e08:	f7f7 ff2e 	bl	8000c68 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008e0c:	e7ee      	b.n	8008dec <prvIdleTask+0x8>
 8008e0e:	bf00      	nop
 8008e10:	200006f4 	.word	0x200006f4
 8008e14:	e000ed04 	.word	0xe000ed04

08008e18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e1e:	2300      	movs	r3, #0
 8008e20:	607b      	str	r3, [r7, #4]
 8008e22:	e00c      	b.n	8008e3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	4613      	mov	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	4413      	add	r3, r2
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	4a12      	ldr	r2, [pc, #72]	; (8008e78 <prvInitialiseTaskLists+0x60>)
 8008e30:	4413      	add	r3, r2
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7fe fb16 	bl	8007464 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	607b      	str	r3, [r7, #4]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2b37      	cmp	r3, #55	; 0x37
 8008e42:	d9ef      	bls.n	8008e24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e44:	480d      	ldr	r0, [pc, #52]	; (8008e7c <prvInitialiseTaskLists+0x64>)
 8008e46:	f7fe fb0d 	bl	8007464 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e4a:	480d      	ldr	r0, [pc, #52]	; (8008e80 <prvInitialiseTaskLists+0x68>)
 8008e4c:	f7fe fb0a 	bl	8007464 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e50:	480c      	ldr	r0, [pc, #48]	; (8008e84 <prvInitialiseTaskLists+0x6c>)
 8008e52:	f7fe fb07 	bl	8007464 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e56:	480c      	ldr	r0, [pc, #48]	; (8008e88 <prvInitialiseTaskLists+0x70>)
 8008e58:	f7fe fb04 	bl	8007464 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e5c:	480b      	ldr	r0, [pc, #44]	; (8008e8c <prvInitialiseTaskLists+0x74>)
 8008e5e:	f7fe fb01 	bl	8007464 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e62:	4b0b      	ldr	r3, [pc, #44]	; (8008e90 <prvInitialiseTaskLists+0x78>)
 8008e64:	4a05      	ldr	r2, [pc, #20]	; (8008e7c <prvInitialiseTaskLists+0x64>)
 8008e66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e68:	4b0a      	ldr	r3, [pc, #40]	; (8008e94 <prvInitialiseTaskLists+0x7c>)
 8008e6a:	4a05      	ldr	r2, [pc, #20]	; (8008e80 <prvInitialiseTaskLists+0x68>)
 8008e6c:	601a      	str	r2, [r3, #0]
}
 8008e6e:	bf00      	nop
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	200006f4 	.word	0x200006f4
 8008e7c:	20000b54 	.word	0x20000b54
 8008e80:	20000b68 	.word	0x20000b68
 8008e84:	20000b84 	.word	0x20000b84
 8008e88:	20000b98 	.word	0x20000b98
 8008e8c:	20000bb0 	.word	0x20000bb0
 8008e90:	20000b7c 	.word	0x20000b7c
 8008e94:	20000b80 	.word	0x20000b80

08008e98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e9e:	e019      	b.n	8008ed4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ea0:	f000 fdda 	bl	8009a58 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008ea4:	4b0f      	ldr	r3, [pc, #60]	; (8008ee4 <prvCheckTasksWaitingTermination+0x4c>)
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	3304      	adds	r3, #4
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7fe fb5d 	bl	8007570 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008eb6:	4b0c      	ldr	r3, [pc, #48]	; (8008ee8 <prvCheckTasksWaitingTermination+0x50>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	4a0a      	ldr	r2, [pc, #40]	; (8008ee8 <prvCheckTasksWaitingTermination+0x50>)
 8008ebe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ec0:	4b0a      	ldr	r3, [pc, #40]	; (8008eec <prvCheckTasksWaitingTermination+0x54>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	4a09      	ldr	r2, [pc, #36]	; (8008eec <prvCheckTasksWaitingTermination+0x54>)
 8008ec8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008eca:	f000 fdf3 	bl	8009ab4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 f80e 	bl	8008ef0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ed4:	4b05      	ldr	r3, [pc, #20]	; (8008eec <prvCheckTasksWaitingTermination+0x54>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1e1      	bne.n	8008ea0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008edc:	bf00      	nop
 8008ede:	3708      	adds	r7, #8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	20000b98 	.word	0x20000b98
 8008ee8:	20000bc4 	.word	0x20000bc4
 8008eec:	20000bac 	.word	0x20000bac

08008ef0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d108      	bne.n	8008f14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f06:	4618      	mov	r0, r3
 8008f08:	f000 ff62 	bl	8009dd0 <vPortFree>
				vPortFree( pxTCB );
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 ff5f 	bl	8009dd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f12:	e017      	b.n	8008f44 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d103      	bne.n	8008f26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 ff56 	bl	8009dd0 <vPortFree>
	}
 8008f24:	e00e      	b.n	8008f44 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d009      	beq.n	8008f44 <prvDeleteTCB+0x54>
 8008f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f34:	f383 8811 	msr	BASEPRI, r3
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	60fb      	str	r3, [r7, #12]
 8008f42:	e7fe      	b.n	8008f42 <prvDeleteTCB+0x52>
	}
 8008f44:	bf00      	nop
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f52:	4b0e      	ldr	r3, [pc, #56]	; (8008f8c <prvResetNextTaskUnblockTime+0x40>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d101      	bne.n	8008f60 <prvResetNextTaskUnblockTime+0x14>
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e000      	b.n	8008f62 <prvResetNextTaskUnblockTime+0x16>
 8008f60:	2300      	movs	r3, #0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d004      	beq.n	8008f70 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f66:	4b0a      	ldr	r3, [pc, #40]	; (8008f90 <prvResetNextTaskUnblockTime+0x44>)
 8008f68:	f04f 32ff 	mov.w	r2, #4294967295
 8008f6c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f6e:	e008      	b.n	8008f82 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008f70:	4b06      	ldr	r3, [pc, #24]	; (8008f8c <prvResetNextTaskUnblockTime+0x40>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	4a04      	ldr	r2, [pc, #16]	; (8008f90 <prvResetNextTaskUnblockTime+0x44>)
 8008f80:	6013      	str	r3, [r2, #0]
}
 8008f82:	bf00      	nop
 8008f84:	370c      	adds	r7, #12
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bc80      	pop	{r7}
 8008f8a:	4770      	bx	lr
 8008f8c:	20000b7c 	.word	0x20000b7c
 8008f90:	20000be4 	.word	0x20000be4

08008f94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f9a:	4b0b      	ldr	r3, [pc, #44]	; (8008fc8 <xTaskGetSchedulerState+0x34>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d102      	bne.n	8008fa8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	607b      	str	r3, [r7, #4]
 8008fa6:	e008      	b.n	8008fba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fa8:	4b08      	ldr	r3, [pc, #32]	; (8008fcc <xTaskGetSchedulerState+0x38>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d102      	bne.n	8008fb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008fb0:	2302      	movs	r3, #2
 8008fb2:	607b      	str	r3, [r7, #4]
 8008fb4:	e001      	b.n	8008fba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008fba:	687b      	ldr	r3, [r7, #4]
	}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bc80      	pop	{r7}
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	20000bd0 	.word	0x20000bd0
 8008fcc:	20000bec 	.word	0x20000bec

08008fd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d054      	beq.n	8009090 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008fe6:	4b2d      	ldr	r3, [pc, #180]	; (800909c <xTaskPriorityDisinherit+0xcc>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	693a      	ldr	r2, [r7, #16]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d009      	beq.n	8009004 <xTaskPriorityDisinherit+0x34>
 8008ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	60fb      	str	r3, [r7, #12]
 8009002:	e7fe      	b.n	8009002 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009008:	2b00      	cmp	r3, #0
 800900a:	d109      	bne.n	8009020 <xTaskPriorityDisinherit+0x50>
 800900c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009010:	f383 8811 	msr	BASEPRI, r3
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	60bb      	str	r3, [r7, #8]
 800901e:	e7fe      	b.n	800901e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009024:	1e5a      	subs	r2, r3, #1
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009032:	429a      	cmp	r2, r3
 8009034:	d02c      	beq.n	8009090 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800903a:	2b00      	cmp	r3, #0
 800903c:	d128      	bne.n	8009090 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	3304      	adds	r3, #4
 8009042:	4618      	mov	r0, r3
 8009044:	f7fe fa94 	bl	8007570 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009054:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009060:	4b0f      	ldr	r3, [pc, #60]	; (80090a0 <xTaskPriorityDisinherit+0xd0>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	429a      	cmp	r2, r3
 8009066:	d903      	bls.n	8009070 <xTaskPriorityDisinherit+0xa0>
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906c:	4a0c      	ldr	r2, [pc, #48]	; (80090a0 <xTaskPriorityDisinherit+0xd0>)
 800906e:	6013      	str	r3, [r2, #0]
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009074:	4613      	mov	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	4413      	add	r3, r2
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	4a09      	ldr	r2, [pc, #36]	; (80090a4 <xTaskPriorityDisinherit+0xd4>)
 800907e:	441a      	add	r2, r3
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	3304      	adds	r3, #4
 8009084:	4619      	mov	r1, r3
 8009086:	4610      	mov	r0, r2
 8009088:	f7fe fa17 	bl	80074ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800908c:	2301      	movs	r3, #1
 800908e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009090:	697b      	ldr	r3, [r7, #20]
	}
 8009092:	4618      	mov	r0, r3
 8009094:	3718      	adds	r7, #24
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	200006f0 	.word	0x200006f0
 80090a0:	20000bcc 	.word	0x20000bcc
 80090a4:	200006f4 	.word	0x200006f4

080090a8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80090ae:	4b09      	ldr	r3, [pc, #36]	; (80090d4 <uxTaskResetEventItemValue+0x2c>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090b6:	4b07      	ldr	r3, [pc, #28]	; (80090d4 <uxTaskResetEventItemValue+0x2c>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090bc:	4b05      	ldr	r3, [pc, #20]	; (80090d4 <uxTaskResetEventItemValue+0x2c>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80090c4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80090c6:	687b      	ldr	r3, [r7, #4]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bc80      	pop	{r7}
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	200006f0 	.word	0x200006f0

080090d8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80090e2:	4b21      	ldr	r3, [pc, #132]	; (8009168 <prvAddCurrentTaskToDelayedList+0x90>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090e8:	4b20      	ldr	r3, [pc, #128]	; (800916c <prvAddCurrentTaskToDelayedList+0x94>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	3304      	adds	r3, #4
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fe fa3e 	bl	8007570 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090fa:	d10a      	bne.n	8009112 <prvAddCurrentTaskToDelayedList+0x3a>
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d007      	beq.n	8009112 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009102:	4b1a      	ldr	r3, [pc, #104]	; (800916c <prvAddCurrentTaskToDelayedList+0x94>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	3304      	adds	r3, #4
 8009108:	4619      	mov	r1, r3
 800910a:	4819      	ldr	r0, [pc, #100]	; (8009170 <prvAddCurrentTaskToDelayedList+0x98>)
 800910c:	f7fe f9d5 	bl	80074ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009110:	e026      	b.n	8009160 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4413      	add	r3, r2
 8009118:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800911a:	4b14      	ldr	r3, [pc, #80]	; (800916c <prvAddCurrentTaskToDelayedList+0x94>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68ba      	ldr	r2, [r7, #8]
 8009120:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	429a      	cmp	r2, r3
 8009128:	d209      	bcs.n	800913e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800912a:	4b12      	ldr	r3, [pc, #72]	; (8009174 <prvAddCurrentTaskToDelayedList+0x9c>)
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	4b0f      	ldr	r3, [pc, #60]	; (800916c <prvAddCurrentTaskToDelayedList+0x94>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	3304      	adds	r3, #4
 8009134:	4619      	mov	r1, r3
 8009136:	4610      	mov	r0, r2
 8009138:	f7fe f9e2 	bl	8007500 <vListInsert>
}
 800913c:	e010      	b.n	8009160 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800913e:	4b0e      	ldr	r3, [pc, #56]	; (8009178 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	4b0a      	ldr	r3, [pc, #40]	; (800916c <prvAddCurrentTaskToDelayedList+0x94>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	3304      	adds	r3, #4
 8009148:	4619      	mov	r1, r3
 800914a:	4610      	mov	r0, r2
 800914c:	f7fe f9d8 	bl	8007500 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009150:	4b0a      	ldr	r3, [pc, #40]	; (800917c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68ba      	ldr	r2, [r7, #8]
 8009156:	429a      	cmp	r2, r3
 8009158:	d202      	bcs.n	8009160 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800915a:	4a08      	ldr	r2, [pc, #32]	; (800917c <prvAddCurrentTaskToDelayedList+0xa4>)
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	6013      	str	r3, [r2, #0]
}
 8009160:	bf00      	nop
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	20000bc8 	.word	0x20000bc8
 800916c:	200006f0 	.word	0x200006f0
 8009170:	20000bb0 	.word	0x20000bb0
 8009174:	20000b80 	.word	0x20000b80
 8009178:	20000b7c 	.word	0x20000b7c
 800917c:	20000be4 	.word	0x20000be4

08009180 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b08a      	sub	sp, #40	; 0x28
 8009184:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009186:	2300      	movs	r3, #0
 8009188:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800918a:	f000 fb17 	bl	80097bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800918e:	4b1c      	ldr	r3, [pc, #112]	; (8009200 <xTimerCreateTimerTask+0x80>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d021      	beq.n	80091da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009196:	2300      	movs	r3, #0
 8009198:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800919a:	2300      	movs	r3, #0
 800919c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800919e:	1d3a      	adds	r2, r7, #4
 80091a0:	f107 0108 	add.w	r1, r7, #8
 80091a4:	f107 030c 	add.w	r3, r7, #12
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7fd ff91 	bl	80070d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80091ae:	6879      	ldr	r1, [r7, #4]
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	9202      	str	r2, [sp, #8]
 80091b6:	9301      	str	r3, [sp, #4]
 80091b8:	2302      	movs	r3, #2
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	2300      	movs	r3, #0
 80091be:	460a      	mov	r2, r1
 80091c0:	4910      	ldr	r1, [pc, #64]	; (8009204 <xTimerCreateTimerTask+0x84>)
 80091c2:	4811      	ldr	r0, [pc, #68]	; (8009208 <xTimerCreateTimerTask+0x88>)
 80091c4:	f7fe ff0e 	bl	8007fe4 <xTaskCreateStatic>
 80091c8:	4602      	mov	r2, r0
 80091ca:	4b10      	ldr	r3, [pc, #64]	; (800920c <xTimerCreateTimerTask+0x8c>)
 80091cc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80091ce:	4b0f      	ldr	r3, [pc, #60]	; (800920c <xTimerCreateTimerTask+0x8c>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d001      	beq.n	80091da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80091d6:	2301      	movs	r3, #1
 80091d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d109      	bne.n	80091f4 <xTimerCreateTimerTask+0x74>
 80091e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e4:	f383 8811 	msr	BASEPRI, r3
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	613b      	str	r3, [r7, #16]
 80091f2:	e7fe      	b.n	80091f2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80091f4:	697b      	ldr	r3, [r7, #20]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3718      	adds	r7, #24
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	20000c20 	.word	0x20000c20
 8009204:	0800a330 	.word	0x0800a330
 8009208:	080093cd 	.word	0x080093cd
 800920c:	20000c24 	.word	0x20000c24

08009210 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009210:	b580      	push	{r7, lr}
 8009212:	b088      	sub	sp, #32
 8009214:	af02      	add	r7, sp, #8
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	607a      	str	r2, [r7, #4]
 800921c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800921e:	2030      	movs	r0, #48	; 0x30
 8009220:	f000 fd10 	bl	8009c44 <pvPortMalloc>
 8009224:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00d      	beq.n	8009248 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	9301      	str	r3, [sp, #4]
 8009230:	6a3b      	ldr	r3, [r7, #32]
 8009232:	9300      	str	r3, [sp, #0]
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	68b9      	ldr	r1, [r7, #8]
 800923a:	68f8      	ldr	r0, [r7, #12]
 800923c:	f000 f809 	bl	8009252 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8009248:	697b      	ldr	r3, [r7, #20]
	}
 800924a:	4618      	mov	r0, r3
 800924c:	3718      	adds	r7, #24
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b086      	sub	sp, #24
 8009256:	af00      	add	r7, sp, #0
 8009258:	60f8      	str	r0, [r7, #12]
 800925a:	60b9      	str	r1, [r7, #8]
 800925c:	607a      	str	r2, [r7, #4]
 800925e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d109      	bne.n	800927a <prvInitialiseNewTimer+0x28>
 8009266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926a:	f383 8811 	msr	BASEPRI, r3
 800926e:	f3bf 8f6f 	isb	sy
 8009272:	f3bf 8f4f 	dsb	sy
 8009276:	617b      	str	r3, [r7, #20]
 8009278:	e7fe      	b.n	8009278 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800927a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927c:	2b00      	cmp	r3, #0
 800927e:	d015      	beq.n	80092ac <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009280:	f000 fa9c 	bl	80097bc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800928a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928c:	68ba      	ldr	r2, [r7, #8]
 800928e:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8009290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8009296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009298:	683a      	ldr	r2, [r7, #0]
 800929a:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800929c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929e:	6a3a      	ldr	r2, [r7, #32]
 80092a0:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80092a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a4:	3304      	adds	r3, #4
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fe f8fb 	bl	80074a2 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80092ac:	bf00      	nop
 80092ae:	3718      	adds	r7, #24
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b08a      	sub	sp, #40	; 0x28
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]
 80092c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80092c2:	2300      	movs	r3, #0
 80092c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d109      	bne.n	80092e0 <xTimerGenericCommand+0x2c>
 80092cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d0:	f383 8811 	msr	BASEPRI, r3
 80092d4:	f3bf 8f6f 	isb	sy
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	623b      	str	r3, [r7, #32]
 80092de:	e7fe      	b.n	80092de <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80092e0:	4b19      	ldr	r3, [pc, #100]	; (8009348 <xTimerGenericCommand+0x94>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d02a      	beq.n	800933e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	2b05      	cmp	r3, #5
 80092f8:	dc18      	bgt.n	800932c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80092fa:	f7ff fe4b 	bl	8008f94 <xTaskGetSchedulerState>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b02      	cmp	r3, #2
 8009302:	d109      	bne.n	8009318 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009304:	4b10      	ldr	r3, [pc, #64]	; (8009348 <xTimerGenericCommand+0x94>)
 8009306:	6818      	ldr	r0, [r3, #0]
 8009308:	f107 0110 	add.w	r1, r7, #16
 800930c:	2300      	movs	r3, #0
 800930e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009310:	f7fe fa92 	bl	8007838 <xQueueGenericSend>
 8009314:	6278      	str	r0, [r7, #36]	; 0x24
 8009316:	e012      	b.n	800933e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009318:	4b0b      	ldr	r3, [pc, #44]	; (8009348 <xTimerGenericCommand+0x94>)
 800931a:	6818      	ldr	r0, [r3, #0]
 800931c:	f107 0110 	add.w	r1, r7, #16
 8009320:	2300      	movs	r3, #0
 8009322:	2200      	movs	r2, #0
 8009324:	f7fe fa88 	bl	8007838 <xQueueGenericSend>
 8009328:	6278      	str	r0, [r7, #36]	; 0x24
 800932a:	e008      	b.n	800933e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800932c:	4b06      	ldr	r3, [pc, #24]	; (8009348 <xTimerGenericCommand+0x94>)
 800932e:	6818      	ldr	r0, [r3, #0]
 8009330:	f107 0110 	add.w	r1, r7, #16
 8009334:	2300      	movs	r3, #0
 8009336:	683a      	ldr	r2, [r7, #0]
 8009338:	f7fe fb78 	bl	8007a2c <xQueueGenericSendFromISR>
 800933c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800933e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009340:	4618      	mov	r0, r3
 8009342:	3728      	adds	r7, #40	; 0x28
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	20000c20 	.word	0x20000c20

0800934c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b088      	sub	sp, #32
 8009350:	af02      	add	r7, sp, #8
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009356:	4b1c      	ldr	r3, [pc, #112]	; (80093c8 <prvProcessExpiredTimer+0x7c>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	3304      	adds	r3, #4
 8009364:	4618      	mov	r0, r3
 8009366:	f7fe f903 	bl	8007570 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	69db      	ldr	r3, [r3, #28]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d121      	bne.n	80093b6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	699a      	ldr	r2, [r3, #24]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	18d1      	adds	r1, r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	683a      	ldr	r2, [r7, #0]
 800937e:	6978      	ldr	r0, [r7, #20]
 8009380:	f000 f8ca 	bl	8009518 <prvInsertTimerInActiveList>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d015      	beq.n	80093b6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800938a:	2300      	movs	r3, #0
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	2300      	movs	r3, #0
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	2100      	movs	r1, #0
 8009394:	6978      	ldr	r0, [r7, #20]
 8009396:	f7ff ff8d 	bl	80092b4 <xTimerGenericCommand>
 800939a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d109      	bne.n	80093b6 <prvProcessExpiredTimer+0x6a>
 80093a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a6:	f383 8811 	msr	BASEPRI, r3
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	60fb      	str	r3, [r7, #12]
 80093b4:	e7fe      	b.n	80093b4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ba:	6978      	ldr	r0, [r7, #20]
 80093bc:	4798      	blx	r3
}
 80093be:	bf00      	nop
 80093c0:	3718      	adds	r7, #24
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	20000c18 	.word	0x20000c18

080093cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 80093d4:	f7f7 fc64 	bl	8000ca0 <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093d8:	f107 0308 	add.w	r3, r7, #8
 80093dc:	4618      	mov	r0, r3
 80093de:	f000 f857 	bl	8009490 <prvGetNextExpireTime>
 80093e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	4619      	mov	r1, r3
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f000 f803 	bl	80093f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80093ee:	f000 f8d5 	bl	800959c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093f2:	e7f1      	b.n	80093d8 <prvTimerTask+0xc>

080093f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80093fe:	f7ff f929 	bl	8008654 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009402:	f107 0308 	add.w	r3, r7, #8
 8009406:	4618      	mov	r0, r3
 8009408:	f000 f866 	bl	80094d8 <prvSampleTimeNow>
 800940c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d130      	bne.n	8009476 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10a      	bne.n	8009430 <prvProcessTimerOrBlockTask+0x3c>
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	429a      	cmp	r2, r3
 8009420:	d806      	bhi.n	8009430 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009422:	f7ff f925 	bl	8008670 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009426:	68f9      	ldr	r1, [r7, #12]
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f7ff ff8f 	bl	800934c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800942e:	e024      	b.n	800947a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d008      	beq.n	8009448 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009436:	4b13      	ldr	r3, [pc, #76]	; (8009484 <prvProcessTimerOrBlockTask+0x90>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	bf0c      	ite	eq
 8009440:	2301      	moveq	r3, #1
 8009442:	2300      	movne	r3, #0
 8009444:	b2db      	uxtb	r3, r3
 8009446:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009448:	4b0f      	ldr	r3, [pc, #60]	; (8009488 <prvProcessTimerOrBlockTask+0x94>)
 800944a:	6818      	ldr	r0, [r3, #0]
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	683a      	ldr	r2, [r7, #0]
 8009454:	4619      	mov	r1, r3
 8009456:	f7fe fd91 	bl	8007f7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800945a:	f7ff f909 	bl	8008670 <xTaskResumeAll>
 800945e:	4603      	mov	r3, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d10a      	bne.n	800947a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009464:	4b09      	ldr	r3, [pc, #36]	; (800948c <prvProcessTimerOrBlockTask+0x98>)
 8009466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800946a:	601a      	str	r2, [r3, #0]
 800946c:	f3bf 8f4f 	dsb	sy
 8009470:	f3bf 8f6f 	isb	sy
}
 8009474:	e001      	b.n	800947a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009476:	f7ff f8fb 	bl	8008670 <xTaskResumeAll>
}
 800947a:	bf00      	nop
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	20000c1c 	.word	0x20000c1c
 8009488:	20000c20 	.word	0x20000c20
 800948c:	e000ed04 	.word	0xe000ed04

08009490 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009498:	4b0e      	ldr	r3, [pc, #56]	; (80094d4 <prvGetNextExpireTime+0x44>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	bf0c      	ite	eq
 80094a2:	2301      	moveq	r3, #1
 80094a4:	2300      	movne	r3, #0
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	461a      	mov	r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d105      	bne.n	80094c2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094b6:	4b07      	ldr	r3, [pc, #28]	; (80094d4 <prvGetNextExpireTime+0x44>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	60fb      	str	r3, [r7, #12]
 80094c0:	e001      	b.n	80094c6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80094c2:	2300      	movs	r3, #0
 80094c4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80094c6:	68fb      	ldr	r3, [r7, #12]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3714      	adds	r7, #20
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bc80      	pop	{r7}
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	20000c18 	.word	0x20000c18

080094d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80094e0:	f7ff f962 	bl	80087a8 <xTaskGetTickCount>
 80094e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80094e6:	4b0b      	ldr	r3, [pc, #44]	; (8009514 <prvSampleTimeNow+0x3c>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d205      	bcs.n	80094fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80094f0:	f000 f904 	bl	80096fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2201      	movs	r2, #1
 80094f8:	601a      	str	r2, [r3, #0]
 80094fa:	e002      	b.n	8009502 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009502:	4a04      	ldr	r2, [pc, #16]	; (8009514 <prvSampleTimeNow+0x3c>)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009508:	68fb      	ldr	r3, [r7, #12]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	bf00      	nop
 8009514:	20000c28 	.word	0x20000c28

08009518 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b086      	sub	sp, #24
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	607a      	str	r2, [r7, #4]
 8009524:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009526:	2300      	movs	r3, #0
 8009528:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	68ba      	ldr	r2, [r7, #8]
 800952e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009536:	68ba      	ldr	r2, [r7, #8]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	429a      	cmp	r2, r3
 800953c:	d812      	bhi.n	8009564 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	1ad2      	subs	r2, r2, r3
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	699b      	ldr	r3, [r3, #24]
 8009548:	429a      	cmp	r2, r3
 800954a:	d302      	bcc.n	8009552 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800954c:	2301      	movs	r3, #1
 800954e:	617b      	str	r3, [r7, #20]
 8009550:	e01b      	b.n	800958a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009552:	4b10      	ldr	r3, [pc, #64]	; (8009594 <prvInsertTimerInActiveList+0x7c>)
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	3304      	adds	r3, #4
 800955a:	4619      	mov	r1, r3
 800955c:	4610      	mov	r0, r2
 800955e:	f7fd ffcf 	bl	8007500 <vListInsert>
 8009562:	e012      	b.n	800958a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	429a      	cmp	r2, r3
 800956a:	d206      	bcs.n	800957a <prvInsertTimerInActiveList+0x62>
 800956c:	68ba      	ldr	r2, [r7, #8]
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	429a      	cmp	r2, r3
 8009572:	d302      	bcc.n	800957a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009574:	2301      	movs	r3, #1
 8009576:	617b      	str	r3, [r7, #20]
 8009578:	e007      	b.n	800958a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800957a:	4b07      	ldr	r3, [pc, #28]	; (8009598 <prvInsertTimerInActiveList+0x80>)
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	3304      	adds	r3, #4
 8009582:	4619      	mov	r1, r3
 8009584:	4610      	mov	r0, r2
 8009586:	f7fd ffbb 	bl	8007500 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800958a:	697b      	ldr	r3, [r7, #20]
}
 800958c:	4618      	mov	r0, r3
 800958e:	3718      	adds	r7, #24
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	20000c1c 	.word	0x20000c1c
 8009598:	20000c18 	.word	0x20000c18

0800959c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b08e      	sub	sp, #56	; 0x38
 80095a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095a2:	e099      	b.n	80096d8 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	da17      	bge.n	80095da <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80095aa:	1d3b      	adds	r3, r7, #4
 80095ac:	3304      	adds	r3, #4
 80095ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80095b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d109      	bne.n	80095ca <prvProcessReceivedCommands+0x2e>
 80095b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ba:	f383 8811 	msr	BASEPRI, r3
 80095be:	f3bf 8f6f 	isb	sy
 80095c2:	f3bf 8f4f 	dsb	sy
 80095c6:	61fb      	str	r3, [r7, #28]
 80095c8:	e7fe      	b.n	80095c8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80095ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095d0:	6850      	ldr	r0, [r2, #4]
 80095d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095d4:	6892      	ldr	r2, [r2, #8]
 80095d6:	4611      	mov	r1, r2
 80095d8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	db7a      	blt.n	80096d6 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80095e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e6:	695b      	ldr	r3, [r3, #20]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d004      	beq.n	80095f6 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ee:	3304      	adds	r3, #4
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7fd ffbd 	bl	8007570 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80095f6:	463b      	mov	r3, r7
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7ff ff6d 	bl	80094d8 <prvSampleTimeNow>
 80095fe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2b09      	cmp	r3, #9
 8009604:	d868      	bhi.n	80096d8 <prvProcessReceivedCommands+0x13c>
 8009606:	a201      	add	r2, pc, #4	; (adr r2, 800960c <prvProcessReceivedCommands+0x70>)
 8009608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960c:	08009635 	.word	0x08009635
 8009610:	08009635 	.word	0x08009635
 8009614:	08009635 	.word	0x08009635
 8009618:	080096d9 	.word	0x080096d9
 800961c:	0800968f 	.word	0x0800968f
 8009620:	080096c5 	.word	0x080096c5
 8009624:	08009635 	.word	0x08009635
 8009628:	08009635 	.word	0x08009635
 800962c:	080096d9 	.word	0x080096d9
 8009630:	0800968f 	.word	0x0800968f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009634:	68ba      	ldr	r2, [r7, #8]
 8009636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009638:	699b      	ldr	r3, [r3, #24]
 800963a:	18d1      	adds	r1, r2, r3
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009642:	f7ff ff69 	bl	8009518 <prvInsertTimerInActiveList>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d045      	beq.n	80096d8 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800964c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009652:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009656:	69db      	ldr	r3, [r3, #28]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d13d      	bne.n	80096d8 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800965c:	68ba      	ldr	r2, [r7, #8]
 800965e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009660:	699b      	ldr	r3, [r3, #24]
 8009662:	441a      	add	r2, r3
 8009664:	2300      	movs	r3, #0
 8009666:	9300      	str	r3, [sp, #0]
 8009668:	2300      	movs	r3, #0
 800966a:	2100      	movs	r1, #0
 800966c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800966e:	f7ff fe21 	bl	80092b4 <xTimerGenericCommand>
 8009672:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009674:	6a3b      	ldr	r3, [r7, #32]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d12e      	bne.n	80096d8 <prvProcessReceivedCommands+0x13c>
 800967a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967e:	f383 8811 	msr	BASEPRI, r3
 8009682:	f3bf 8f6f 	isb	sy
 8009686:	f3bf 8f4f 	dsb	sy
 800968a:	61bb      	str	r3, [r7, #24]
 800968c:	e7fe      	b.n	800968c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009692:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009696:	699b      	ldr	r3, [r3, #24]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d109      	bne.n	80096b0 <prvProcessReceivedCommands+0x114>
 800969c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a0:	f383 8811 	msr	BASEPRI, r3
 80096a4:	f3bf 8f6f 	isb	sy
 80096a8:	f3bf 8f4f 	dsb	sy
 80096ac:	617b      	str	r3, [r7, #20]
 80096ae:	e7fe      	b.n	80096ae <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80096b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b2:	699a      	ldr	r2, [r3, #24]
 80096b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b6:	18d1      	adds	r1, r2, r3
 80096b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096be:	f7ff ff2b 	bl	8009518 <prvInsertTimerInActiveList>
					break;
 80096c2:	e009      	b.n	80096d8 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80096c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d104      	bne.n	80096d8 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80096ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096d0:	f000 fb7e 	bl	8009dd0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80096d4:	e000      	b.n	80096d8 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80096d6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096d8:	4b07      	ldr	r3, [pc, #28]	; (80096f8 <prvProcessReceivedCommands+0x15c>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	1d39      	adds	r1, r7, #4
 80096de:	2200      	movs	r2, #0
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fe fa37 	bl	8007b54 <xQueueReceive>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f47f af5b 	bne.w	80095a4 <prvProcessReceivedCommands+0x8>
	}
}
 80096ee:	bf00      	nop
 80096f0:	3730      	adds	r7, #48	; 0x30
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	20000c20 	.word	0x20000c20

080096fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b088      	sub	sp, #32
 8009700:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009702:	e044      	b.n	800978e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009704:	4b2b      	ldr	r3, [pc, #172]	; (80097b4 <prvSwitchTimerLists+0xb8>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800970e:	4b29      	ldr	r3, [pc, #164]	; (80097b4 <prvSwitchTimerLists+0xb8>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	3304      	adds	r3, #4
 800971c:	4618      	mov	r0, r3
 800971e:	f7fd ff27 	bl	8007570 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009726:	68f8      	ldr	r0, [r7, #12]
 8009728:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	69db      	ldr	r3, [r3, #28]
 800972e:	2b01      	cmp	r3, #1
 8009730:	d12d      	bne.n	800978e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	699b      	ldr	r3, [r3, #24]
 8009736:	693a      	ldr	r2, [r7, #16]
 8009738:	4413      	add	r3, r2
 800973a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800973c:	68ba      	ldr	r2, [r7, #8]
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	429a      	cmp	r2, r3
 8009742:	d90e      	bls.n	8009762 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	68ba      	ldr	r2, [r7, #8]
 8009748:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009750:	4b18      	ldr	r3, [pc, #96]	; (80097b4 <prvSwitchTimerLists+0xb8>)
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	3304      	adds	r3, #4
 8009758:	4619      	mov	r1, r3
 800975a:	4610      	mov	r0, r2
 800975c:	f7fd fed0 	bl	8007500 <vListInsert>
 8009760:	e015      	b.n	800978e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009762:	2300      	movs	r3, #0
 8009764:	9300      	str	r3, [sp, #0]
 8009766:	2300      	movs	r3, #0
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	2100      	movs	r1, #0
 800976c:	68f8      	ldr	r0, [r7, #12]
 800976e:	f7ff fda1 	bl	80092b4 <xTimerGenericCommand>
 8009772:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d109      	bne.n	800978e <prvSwitchTimerLists+0x92>
 800977a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977e:	f383 8811 	msr	BASEPRI, r3
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	603b      	str	r3, [r7, #0]
 800978c:	e7fe      	b.n	800978c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800978e:	4b09      	ldr	r3, [pc, #36]	; (80097b4 <prvSwitchTimerLists+0xb8>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1b5      	bne.n	8009704 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009798:	4b06      	ldr	r3, [pc, #24]	; (80097b4 <prvSwitchTimerLists+0xb8>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800979e:	4b06      	ldr	r3, [pc, #24]	; (80097b8 <prvSwitchTimerLists+0xbc>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a04      	ldr	r2, [pc, #16]	; (80097b4 <prvSwitchTimerLists+0xb8>)
 80097a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80097a6:	4a04      	ldr	r2, [pc, #16]	; (80097b8 <prvSwitchTimerLists+0xbc>)
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	6013      	str	r3, [r2, #0]
}
 80097ac:	bf00      	nop
 80097ae:	3718      	adds	r7, #24
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	20000c18 	.word	0x20000c18
 80097b8:	20000c1c 	.word	0x20000c1c

080097bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80097c2:	f000 f949 	bl	8009a58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80097c6:	4b15      	ldr	r3, [pc, #84]	; (800981c <prvCheckForValidListAndQueue+0x60>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d120      	bne.n	8009810 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80097ce:	4814      	ldr	r0, [pc, #80]	; (8009820 <prvCheckForValidListAndQueue+0x64>)
 80097d0:	f7fd fe48 	bl	8007464 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80097d4:	4813      	ldr	r0, [pc, #76]	; (8009824 <prvCheckForValidListAndQueue+0x68>)
 80097d6:	f7fd fe45 	bl	8007464 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80097da:	4b13      	ldr	r3, [pc, #76]	; (8009828 <prvCheckForValidListAndQueue+0x6c>)
 80097dc:	4a10      	ldr	r2, [pc, #64]	; (8009820 <prvCheckForValidListAndQueue+0x64>)
 80097de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80097e0:	4b12      	ldr	r3, [pc, #72]	; (800982c <prvCheckForValidListAndQueue+0x70>)
 80097e2:	4a10      	ldr	r2, [pc, #64]	; (8009824 <prvCheckForValidListAndQueue+0x68>)
 80097e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80097e6:	2300      	movs	r3, #0
 80097e8:	9300      	str	r3, [sp, #0]
 80097ea:	4b11      	ldr	r3, [pc, #68]	; (8009830 <prvCheckForValidListAndQueue+0x74>)
 80097ec:	4a11      	ldr	r2, [pc, #68]	; (8009834 <prvCheckForValidListAndQueue+0x78>)
 80097ee:	2110      	movs	r1, #16
 80097f0:	200a      	movs	r0, #10
 80097f2:	f7fd ff4f 	bl	8007694 <xQueueGenericCreateStatic>
 80097f6:	4602      	mov	r2, r0
 80097f8:	4b08      	ldr	r3, [pc, #32]	; (800981c <prvCheckForValidListAndQueue+0x60>)
 80097fa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80097fc:	4b07      	ldr	r3, [pc, #28]	; (800981c <prvCheckForValidListAndQueue+0x60>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d005      	beq.n	8009810 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009804:	4b05      	ldr	r3, [pc, #20]	; (800981c <prvCheckForValidListAndQueue+0x60>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	490b      	ldr	r1, [pc, #44]	; (8009838 <prvCheckForValidListAndQueue+0x7c>)
 800980a:	4618      	mov	r0, r3
 800980c:	f7fe fb8e 	bl	8007f2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009810:	f000 f950 	bl	8009ab4 <vPortExitCritical>
}
 8009814:	bf00      	nop
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	20000c20 	.word	0x20000c20
 8009820:	20000bf0 	.word	0x20000bf0
 8009824:	20000c04 	.word	0x20000c04
 8009828:	20000c18 	.word	0x20000c18
 800982c:	20000c1c 	.word	0x20000c1c
 8009830:	20000ccc 	.word	0x20000ccc
 8009834:	20000c2c 	.word	0x20000c2c
 8009838:	0800a338 	.word	0x0800a338

0800983c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800983c:	b580      	push	{r7, lr}
 800983e:	b08a      	sub	sp, #40	; 0x28
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
 8009848:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800984a:	f06f 0301 	mvn.w	r3, #1
 800984e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800985c:	4b06      	ldr	r3, [pc, #24]	; (8009878 <xTimerPendFunctionCallFromISR+0x3c>)
 800985e:	6818      	ldr	r0, [r3, #0]
 8009860:	f107 0114 	add.w	r1, r7, #20
 8009864:	2300      	movs	r3, #0
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	f7fe f8e0 	bl	8007a2c <xQueueGenericSendFromISR>
 800986c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800986e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009870:	4618      	mov	r0, r3
 8009872:	3728      	adds	r7, #40	; 0x28
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	20000c20 	.word	0x20000c20

0800987c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800987c:	b480      	push	{r7}
 800987e:	b085      	sub	sp, #20
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	3b04      	subs	r3, #4
 800988c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009894:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	3b04      	subs	r3, #4
 800989a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	f023 0201 	bic.w	r2, r3, #1
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	3b04      	subs	r3, #4
 80098aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80098ac:	4a08      	ldr	r2, [pc, #32]	; (80098d0 <pxPortInitialiseStack+0x54>)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	3b14      	subs	r3, #20
 80098b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	3b20      	subs	r3, #32
 80098c2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80098c4:	68fb      	ldr	r3, [r7, #12]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3714      	adds	r7, #20
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bc80      	pop	{r7}
 80098ce:	4770      	bx	lr
 80098d0:	080098d5 	.word	0x080098d5

080098d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80098d4:	b480      	push	{r7}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80098da:	2300      	movs	r3, #0
 80098dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80098de:	4b10      	ldr	r3, [pc, #64]	; (8009920 <prvTaskExitError+0x4c>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e6:	d009      	beq.n	80098fc <prvTaskExitError+0x28>
 80098e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ec:	f383 8811 	msr	BASEPRI, r3
 80098f0:	f3bf 8f6f 	isb	sy
 80098f4:	f3bf 8f4f 	dsb	sy
 80098f8:	60fb      	str	r3, [r7, #12]
 80098fa:	e7fe      	b.n	80098fa <prvTaskExitError+0x26>
 80098fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009900:	f383 8811 	msr	BASEPRI, r3
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800990e:	bf00      	nop
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d0fc      	beq.n	8009910 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009916:	bf00      	nop
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	bc80      	pop	{r7}
 800991e:	4770      	bx	lr
 8009920:	2000000c 	.word	0x2000000c
	...

08009930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009930:	4b07      	ldr	r3, [pc, #28]	; (8009950 <pxCurrentTCBConst2>)
 8009932:	6819      	ldr	r1, [r3, #0]
 8009934:	6808      	ldr	r0, [r1, #0]
 8009936:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800993a:	f380 8809 	msr	PSP, r0
 800993e:	f3bf 8f6f 	isb	sy
 8009942:	f04f 0000 	mov.w	r0, #0
 8009946:	f380 8811 	msr	BASEPRI, r0
 800994a:	f04e 0e0d 	orr.w	lr, lr, #13
 800994e:	4770      	bx	lr

08009950 <pxCurrentTCBConst2>:
 8009950:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009954:	bf00      	nop
 8009956:	bf00      	nop

08009958 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009958:	4806      	ldr	r0, [pc, #24]	; (8009974 <prvPortStartFirstTask+0x1c>)
 800995a:	6800      	ldr	r0, [r0, #0]
 800995c:	6800      	ldr	r0, [r0, #0]
 800995e:	f380 8808 	msr	MSP, r0
 8009962:	b662      	cpsie	i
 8009964:	b661      	cpsie	f
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	df00      	svc	0
 8009970:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009972:	bf00      	nop
 8009974:	e000ed08 	.word	0xe000ed08

08009978 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800997e:	4b31      	ldr	r3, [pc, #196]	; (8009a44 <xPortStartScheduler+0xcc>)
 8009980:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	b2db      	uxtb	r3, r3
 8009988:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	22ff      	movs	r2, #255	; 0xff
 800998e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	b2db      	uxtb	r3, r3
 8009996:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009998:	78fb      	ldrb	r3, [r7, #3]
 800999a:	b2db      	uxtb	r3, r3
 800999c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80099a0:	b2da      	uxtb	r2, r3
 80099a2:	4b29      	ldr	r3, [pc, #164]	; (8009a48 <xPortStartScheduler+0xd0>)
 80099a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80099a6:	4b29      	ldr	r3, [pc, #164]	; (8009a4c <xPortStartScheduler+0xd4>)
 80099a8:	2207      	movs	r2, #7
 80099aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099ac:	e009      	b.n	80099c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80099ae:	4b27      	ldr	r3, [pc, #156]	; (8009a4c <xPortStartScheduler+0xd4>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	3b01      	subs	r3, #1
 80099b4:	4a25      	ldr	r2, [pc, #148]	; (8009a4c <xPortStartScheduler+0xd4>)
 80099b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80099b8:	78fb      	ldrb	r3, [r7, #3]
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	005b      	lsls	r3, r3, #1
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099c2:	78fb      	ldrb	r3, [r7, #3]
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099ca:	2b80      	cmp	r3, #128	; 0x80
 80099cc:	d0ef      	beq.n	80099ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80099ce:	4b1f      	ldr	r3, [pc, #124]	; (8009a4c <xPortStartScheduler+0xd4>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f1c3 0307 	rsb	r3, r3, #7
 80099d6:	2b04      	cmp	r3, #4
 80099d8:	d009      	beq.n	80099ee <xPortStartScheduler+0x76>
 80099da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099de:	f383 8811 	msr	BASEPRI, r3
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	f3bf 8f4f 	dsb	sy
 80099ea:	60bb      	str	r3, [r7, #8]
 80099ec:	e7fe      	b.n	80099ec <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80099ee:	4b17      	ldr	r3, [pc, #92]	; (8009a4c <xPortStartScheduler+0xd4>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	021b      	lsls	r3, r3, #8
 80099f4:	4a15      	ldr	r2, [pc, #84]	; (8009a4c <xPortStartScheduler+0xd4>)
 80099f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80099f8:	4b14      	ldr	r3, [pc, #80]	; (8009a4c <xPortStartScheduler+0xd4>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a00:	4a12      	ldr	r2, [pc, #72]	; (8009a4c <xPortStartScheduler+0xd4>)
 8009a02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a0c:	4b10      	ldr	r3, [pc, #64]	; (8009a50 <xPortStartScheduler+0xd8>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a0f      	ldr	r2, [pc, #60]	; (8009a50 <xPortStartScheduler+0xd8>)
 8009a12:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009a16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a18:	4b0d      	ldr	r3, [pc, #52]	; (8009a50 <xPortStartScheduler+0xd8>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a0c      	ldr	r2, [pc, #48]	; (8009a50 <xPortStartScheduler+0xd8>)
 8009a1e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009a22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a24:	f000 f8b0 	bl	8009b88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a28:	4b0a      	ldr	r3, [pc, #40]	; (8009a54 <xPortStartScheduler+0xdc>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a2e:	f7ff ff93 	bl	8009958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a32:	f7fe ff9f 	bl	8008974 <vTaskSwitchContext>
	prvTaskExitError();
 8009a36:	f7ff ff4d 	bl	80098d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	e000e400 	.word	0xe000e400
 8009a48:	20000d1c 	.word	0x20000d1c
 8009a4c:	20000d20 	.word	0x20000d20
 8009a50:	e000ed20 	.word	0xe000ed20
 8009a54:	2000000c 	.word	0x2000000c

08009a58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a70:	4b0e      	ldr	r3, [pc, #56]	; (8009aac <vPortEnterCritical+0x54>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	3301      	adds	r3, #1
 8009a76:	4a0d      	ldr	r2, [pc, #52]	; (8009aac <vPortEnterCritical+0x54>)
 8009a78:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a7a:	4b0c      	ldr	r3, [pc, #48]	; (8009aac <vPortEnterCritical+0x54>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d10e      	bne.n	8009aa0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a82:	4b0b      	ldr	r3, [pc, #44]	; (8009ab0 <vPortEnterCritical+0x58>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d009      	beq.n	8009aa0 <vPortEnterCritical+0x48>
 8009a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a90:	f383 8811 	msr	BASEPRI, r3
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	603b      	str	r3, [r7, #0]
 8009a9e:	e7fe      	b.n	8009a9e <vPortEnterCritical+0x46>
	}
}
 8009aa0:	bf00      	nop
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bc80      	pop	{r7}
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	2000000c 	.word	0x2000000c
 8009ab0:	e000ed04 	.word	0xe000ed04

08009ab4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009aba:	4b10      	ldr	r3, [pc, #64]	; (8009afc <vPortExitCritical+0x48>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d109      	bne.n	8009ad6 <vPortExitCritical+0x22>
 8009ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac6:	f383 8811 	msr	BASEPRI, r3
 8009aca:	f3bf 8f6f 	isb	sy
 8009ace:	f3bf 8f4f 	dsb	sy
 8009ad2:	607b      	str	r3, [r7, #4]
 8009ad4:	e7fe      	b.n	8009ad4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009ad6:	4b09      	ldr	r3, [pc, #36]	; (8009afc <vPortExitCritical+0x48>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	3b01      	subs	r3, #1
 8009adc:	4a07      	ldr	r2, [pc, #28]	; (8009afc <vPortExitCritical+0x48>)
 8009ade:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ae0:	4b06      	ldr	r3, [pc, #24]	; (8009afc <vPortExitCritical+0x48>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d104      	bne.n	8009af2 <vPortExitCritical+0x3e>
 8009ae8:	2300      	movs	r3, #0
 8009aea:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009af2:	bf00      	nop
 8009af4:	370c      	adds	r7, #12
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bc80      	pop	{r7}
 8009afa:	4770      	bx	lr
 8009afc:	2000000c 	.word	0x2000000c

08009b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b00:	f3ef 8009 	mrs	r0, PSP
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	4b0d      	ldr	r3, [pc, #52]	; (8009b40 <pxCurrentTCBConst>)
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009b10:	6010      	str	r0, [r2, #0]
 8009b12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009b16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009b1a:	f380 8811 	msr	BASEPRI, r0
 8009b1e:	f7fe ff29 	bl	8008974 <vTaskSwitchContext>
 8009b22:	f04f 0000 	mov.w	r0, #0
 8009b26:	f380 8811 	msr	BASEPRI, r0
 8009b2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009b2e:	6819      	ldr	r1, [r3, #0]
 8009b30:	6808      	ldr	r0, [r1, #0]
 8009b32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009b36:	f380 8809 	msr	PSP, r0
 8009b3a:	f3bf 8f6f 	isb	sy
 8009b3e:	4770      	bx	lr

08009b40 <pxCurrentTCBConst>:
 8009b40:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b44:	bf00      	nop
 8009b46:	bf00      	nop

08009b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b60:	f7fe fe42 	bl	80087e8 <xTaskIncrementTick>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d003      	beq.n	8009b72 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b6a:	4b06      	ldr	r3, [pc, #24]	; (8009b84 <SysTick_Handler+0x3c>)
 8009b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b70:	601a      	str	r2, [r3, #0]
 8009b72:	2300      	movs	r3, #0
 8009b74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b7c:	bf00      	nop
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	e000ed04 	.word	0xe000ed04

08009b88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b88:	b480      	push	{r7}
 8009b8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b8c:	4b0a      	ldr	r3, [pc, #40]	; (8009bb8 <vPortSetupTimerInterrupt+0x30>)
 8009b8e:	2200      	movs	r2, #0
 8009b90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b92:	4b0a      	ldr	r3, [pc, #40]	; (8009bbc <vPortSetupTimerInterrupt+0x34>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b98:	4b09      	ldr	r3, [pc, #36]	; (8009bc0 <vPortSetupTimerInterrupt+0x38>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a09      	ldr	r2, [pc, #36]	; (8009bc4 <vPortSetupTimerInterrupt+0x3c>)
 8009b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8009ba2:	099b      	lsrs	r3, r3, #6
 8009ba4:	4a08      	ldr	r2, [pc, #32]	; (8009bc8 <vPortSetupTimerInterrupt+0x40>)
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009baa:	4b03      	ldr	r3, [pc, #12]	; (8009bb8 <vPortSetupTimerInterrupt+0x30>)
 8009bac:	2207      	movs	r2, #7
 8009bae:	601a      	str	r2, [r3, #0]
}
 8009bb0:	bf00      	nop
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bc80      	pop	{r7}
 8009bb6:	4770      	bx	lr
 8009bb8:	e000e010 	.word	0xe000e010
 8009bbc:	e000e018 	.word	0xe000e018
 8009bc0:	20000000 	.word	0x20000000
 8009bc4:	10624dd3 	.word	0x10624dd3
 8009bc8:	e000e014 	.word	0xe000e014

08009bcc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009bcc:	b480      	push	{r7}
 8009bce:	b085      	sub	sp, #20
 8009bd0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009bd2:	f3ef 8305 	mrs	r3, IPSR
 8009bd6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2b0f      	cmp	r3, #15
 8009bdc:	d913      	bls.n	8009c06 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009bde:	4a15      	ldr	r2, [pc, #84]	; (8009c34 <vPortValidateInterruptPriority+0x68>)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	4413      	add	r3, r2
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009be8:	4b13      	ldr	r3, [pc, #76]	; (8009c38 <vPortValidateInterruptPriority+0x6c>)
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	7afa      	ldrb	r2, [r7, #11]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d209      	bcs.n	8009c06 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf6:	f383 8811 	msr	BASEPRI, r3
 8009bfa:	f3bf 8f6f 	isb	sy
 8009bfe:	f3bf 8f4f 	dsb	sy
 8009c02:	607b      	str	r3, [r7, #4]
 8009c04:	e7fe      	b.n	8009c04 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c06:	4b0d      	ldr	r3, [pc, #52]	; (8009c3c <vPortValidateInterruptPriority+0x70>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009c0e:	4b0c      	ldr	r3, [pc, #48]	; (8009c40 <vPortValidateInterruptPriority+0x74>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d909      	bls.n	8009c2a <vPortValidateInterruptPriority+0x5e>
 8009c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	603b      	str	r3, [r7, #0]
 8009c28:	e7fe      	b.n	8009c28 <vPortValidateInterruptPriority+0x5c>
	}
 8009c2a:	bf00      	nop
 8009c2c:	3714      	adds	r7, #20
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bc80      	pop	{r7}
 8009c32:	4770      	bx	lr
 8009c34:	e000e3f0 	.word	0xe000e3f0
 8009c38:	20000d1c 	.word	0x20000d1c
 8009c3c:	e000ed0c 	.word	0xe000ed0c
 8009c40:	20000d20 	.word	0x20000d20

08009c44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b08a      	sub	sp, #40	; 0x28
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c50:	f7fe fd00 	bl	8008654 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c54:	4b59      	ldr	r3, [pc, #356]	; (8009dbc <pvPortMalloc+0x178>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d101      	bne.n	8009c60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c5c:	f000 f910 	bl	8009e80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c60:	4b57      	ldr	r3, [pc, #348]	; (8009dc0 <pvPortMalloc+0x17c>)
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	4013      	ands	r3, r2
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f040 808c 	bne.w	8009d86 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d01c      	beq.n	8009cae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009c74:	2208      	movs	r2, #8
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4413      	add	r3, r2
 8009c7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f003 0307 	and.w	r3, r3, #7
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d013      	beq.n	8009cae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f023 0307 	bic.w	r3, r3, #7
 8009c8c:	3308      	adds	r3, #8
 8009c8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f003 0307 	and.w	r3, r3, #7
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d009      	beq.n	8009cae <pvPortMalloc+0x6a>
 8009c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9e:	f383 8811 	msr	BASEPRI, r3
 8009ca2:	f3bf 8f6f 	isb	sy
 8009ca6:	f3bf 8f4f 	dsb	sy
 8009caa:	617b      	str	r3, [r7, #20]
 8009cac:	e7fe      	b.n	8009cac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d068      	beq.n	8009d86 <pvPortMalloc+0x142>
 8009cb4:	4b43      	ldr	r3, [pc, #268]	; (8009dc4 <pvPortMalloc+0x180>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d863      	bhi.n	8009d86 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009cbe:	4b42      	ldr	r3, [pc, #264]	; (8009dc8 <pvPortMalloc+0x184>)
 8009cc0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009cc2:	4b41      	ldr	r3, [pc, #260]	; (8009dc8 <pvPortMalloc+0x184>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cc8:	e004      	b.n	8009cd4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ccc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d903      	bls.n	8009ce6 <pvPortMalloc+0xa2>
 8009cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1f1      	bne.n	8009cca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009ce6:	4b35      	ldr	r3, [pc, #212]	; (8009dbc <pvPortMalloc+0x178>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d04a      	beq.n	8009d86 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009cf0:	6a3b      	ldr	r3, [r7, #32]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2208      	movs	r2, #8
 8009cf6:	4413      	add	r3, r2
 8009cf8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	6a3b      	ldr	r3, [r7, #32]
 8009d00:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d04:	685a      	ldr	r2, [r3, #4]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	1ad2      	subs	r2, r2, r3
 8009d0a:	2308      	movs	r3, #8
 8009d0c:	005b      	lsls	r3, r3, #1
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d91e      	bls.n	8009d50 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4413      	add	r3, r2
 8009d18:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	f003 0307 	and.w	r3, r3, #7
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d009      	beq.n	8009d38 <pvPortMalloc+0xf4>
 8009d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	613b      	str	r3, [r7, #16]
 8009d36:	e7fe      	b.n	8009d36 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3a:	685a      	ldr	r2, [r3, #4]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	1ad2      	subs	r2, r2, r3
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d4a:	69b8      	ldr	r0, [r7, #24]
 8009d4c:	f000 f8fa 	bl	8009f44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d50:	4b1c      	ldr	r3, [pc, #112]	; (8009dc4 <pvPortMalloc+0x180>)
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	1ad3      	subs	r3, r2, r3
 8009d5a:	4a1a      	ldr	r2, [pc, #104]	; (8009dc4 <pvPortMalloc+0x180>)
 8009d5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d5e:	4b19      	ldr	r3, [pc, #100]	; (8009dc4 <pvPortMalloc+0x180>)
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	4b1a      	ldr	r3, [pc, #104]	; (8009dcc <pvPortMalloc+0x188>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d203      	bcs.n	8009d72 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d6a:	4b16      	ldr	r3, [pc, #88]	; (8009dc4 <pvPortMalloc+0x180>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a17      	ldr	r2, [pc, #92]	; (8009dcc <pvPortMalloc+0x188>)
 8009d70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d74:	685a      	ldr	r2, [r3, #4]
 8009d76:	4b12      	ldr	r3, [pc, #72]	; (8009dc0 <pvPortMalloc+0x17c>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	431a      	orrs	r2, r3
 8009d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d82:	2200      	movs	r2, #0
 8009d84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d86:	f7fe fc73 	bl	8008670 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d101      	bne.n	8009d94 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8009d90:	f7f6 ff80 	bl	8000c94 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	f003 0307 	and.w	r3, r3, #7
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d009      	beq.n	8009db2 <pvPortMalloc+0x16e>
 8009d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da2:	f383 8811 	msr	BASEPRI, r3
 8009da6:	f3bf 8f6f 	isb	sy
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	60fb      	str	r3, [r7, #12]
 8009db0:	e7fe      	b.n	8009db0 <pvPortMalloc+0x16c>
	return pvReturn;
 8009db2:	69fb      	ldr	r3, [r7, #28]
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3728      	adds	r7, #40	; 0x28
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	2000352c 	.word	0x2000352c
 8009dc0:	20003538 	.word	0x20003538
 8009dc4:	20003530 	.word	0x20003530
 8009dc8:	20003524 	.word	0x20003524
 8009dcc:	20003534 	.word	0x20003534

08009dd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b086      	sub	sp, #24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d046      	beq.n	8009e70 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009de2:	2308      	movs	r3, #8
 8009de4:	425b      	negs	r3, r3
 8009de6:	697a      	ldr	r2, [r7, #20]
 8009de8:	4413      	add	r3, r2
 8009dea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	685a      	ldr	r2, [r3, #4]
 8009df4:	4b20      	ldr	r3, [pc, #128]	; (8009e78 <vPortFree+0xa8>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4013      	ands	r3, r2
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d109      	bne.n	8009e12 <vPortFree+0x42>
 8009dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	60fb      	str	r3, [r7, #12]
 8009e10:	e7fe      	b.n	8009e10 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d009      	beq.n	8009e2e <vPortFree+0x5e>
 8009e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1e:	f383 8811 	msr	BASEPRI, r3
 8009e22:	f3bf 8f6f 	isb	sy
 8009e26:	f3bf 8f4f 	dsb	sy
 8009e2a:	60bb      	str	r3, [r7, #8]
 8009e2c:	e7fe      	b.n	8009e2c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	685a      	ldr	r2, [r3, #4]
 8009e32:	4b11      	ldr	r3, [pc, #68]	; (8009e78 <vPortFree+0xa8>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4013      	ands	r3, r2
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d019      	beq.n	8009e70 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d115      	bne.n	8009e70 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	685a      	ldr	r2, [r3, #4]
 8009e48:	4b0b      	ldr	r3, [pc, #44]	; (8009e78 <vPortFree+0xa8>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	43db      	mvns	r3, r3
 8009e4e:	401a      	ands	r2, r3
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e54:	f7fe fbfe 	bl	8008654 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	685a      	ldr	r2, [r3, #4]
 8009e5c:	4b07      	ldr	r3, [pc, #28]	; (8009e7c <vPortFree+0xac>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4413      	add	r3, r2
 8009e62:	4a06      	ldr	r2, [pc, #24]	; (8009e7c <vPortFree+0xac>)
 8009e64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e66:	6938      	ldr	r0, [r7, #16]
 8009e68:	f000 f86c 	bl	8009f44 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009e6c:	f7fe fc00 	bl	8008670 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e70:	bf00      	nop
 8009e72:	3718      	adds	r7, #24
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	20003538 	.word	0x20003538
 8009e7c:	20003530 	.word	0x20003530

08009e80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e80:	b480      	push	{r7}
 8009e82:	b085      	sub	sp, #20
 8009e84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e86:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009e8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e8c:	4b27      	ldr	r3, [pc, #156]	; (8009f2c <prvHeapInit+0xac>)
 8009e8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f003 0307 	and.w	r3, r3, #7
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d00c      	beq.n	8009eb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	3307      	adds	r3, #7
 8009e9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f023 0307 	bic.w	r3, r3, #7
 8009ea6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ea8:	68ba      	ldr	r2, [r7, #8]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	1ad3      	subs	r3, r2, r3
 8009eae:	4a1f      	ldr	r2, [pc, #124]	; (8009f2c <prvHeapInit+0xac>)
 8009eb0:	4413      	add	r3, r2
 8009eb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009eb8:	4a1d      	ldr	r2, [pc, #116]	; (8009f30 <prvHeapInit+0xb0>)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ebe:	4b1c      	ldr	r3, [pc, #112]	; (8009f30 <prvHeapInit+0xb0>)
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	68ba      	ldr	r2, [r7, #8]
 8009ec8:	4413      	add	r3, r2
 8009eca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ecc:	2208      	movs	r2, #8
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	1a9b      	subs	r3, r3, r2
 8009ed2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f023 0307 	bic.w	r3, r3, #7
 8009eda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	4a15      	ldr	r2, [pc, #84]	; (8009f34 <prvHeapInit+0xb4>)
 8009ee0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ee2:	4b14      	ldr	r3, [pc, #80]	; (8009f34 <prvHeapInit+0xb4>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009eea:	4b12      	ldr	r3, [pc, #72]	; (8009f34 <prvHeapInit+0xb4>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	1ad2      	subs	r2, r2, r3
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f00:	4b0c      	ldr	r3, [pc, #48]	; (8009f34 <prvHeapInit+0xb4>)
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	4a0a      	ldr	r2, [pc, #40]	; (8009f38 <prvHeapInit+0xb8>)
 8009f0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	4a09      	ldr	r2, [pc, #36]	; (8009f3c <prvHeapInit+0xbc>)
 8009f16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f18:	4b09      	ldr	r3, [pc, #36]	; (8009f40 <prvHeapInit+0xc0>)
 8009f1a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009f1e:	601a      	str	r2, [r3, #0]
}
 8009f20:	bf00      	nop
 8009f22:	3714      	adds	r7, #20
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bc80      	pop	{r7}
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	20000d24 	.word	0x20000d24
 8009f30:	20003524 	.word	0x20003524
 8009f34:	2000352c 	.word	0x2000352c
 8009f38:	20003534 	.word	0x20003534
 8009f3c:	20003530 	.word	0x20003530
 8009f40:	20003538 	.word	0x20003538

08009f44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f4c:	4b27      	ldr	r3, [pc, #156]	; (8009fec <prvInsertBlockIntoFreeList+0xa8>)
 8009f4e:	60fb      	str	r3, [r7, #12]
 8009f50:	e002      	b.n	8009f58 <prvInsertBlockIntoFreeList+0x14>
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	60fb      	str	r3, [r7, #12]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d8f7      	bhi.n	8009f52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d108      	bne.n	8009f86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	685a      	ldr	r2, [r3, #4]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	441a      	add	r2, r3
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	441a      	add	r2, r3
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d118      	bne.n	8009fcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	4b14      	ldr	r3, [pc, #80]	; (8009ff0 <prvInsertBlockIntoFreeList+0xac>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d00d      	beq.n	8009fc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	685a      	ldr	r2, [r3, #4]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	441a      	add	r2, r3
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	601a      	str	r2, [r3, #0]
 8009fc0:	e008      	b.n	8009fd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009fc2:	4b0b      	ldr	r3, [pc, #44]	; (8009ff0 <prvInsertBlockIntoFreeList+0xac>)
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	601a      	str	r2, [r3, #0]
 8009fca:	e003      	b.n	8009fd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d002      	beq.n	8009fe2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fe2:	bf00      	nop
 8009fe4:	3714      	adds	r7, #20
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bc80      	pop	{r7}
 8009fea:	4770      	bx	lr
 8009fec:	20003524 	.word	0x20003524
 8009ff0:	2000352c 	.word	0x2000352c

08009ff4 <__libc_init_array>:
 8009ff4:	b570      	push	{r4, r5, r6, lr}
 8009ff6:	2500      	movs	r5, #0
 8009ff8:	4e0c      	ldr	r6, [pc, #48]	; (800a02c <__libc_init_array+0x38>)
 8009ffa:	4c0d      	ldr	r4, [pc, #52]	; (800a030 <__libc_init_array+0x3c>)
 8009ffc:	1ba4      	subs	r4, r4, r6
 8009ffe:	10a4      	asrs	r4, r4, #2
 800a000:	42a5      	cmp	r5, r4
 800a002:	d109      	bne.n	800a018 <__libc_init_array+0x24>
 800a004:	f000 f82e 	bl	800a064 <_init>
 800a008:	2500      	movs	r5, #0
 800a00a:	4e0a      	ldr	r6, [pc, #40]	; (800a034 <__libc_init_array+0x40>)
 800a00c:	4c0a      	ldr	r4, [pc, #40]	; (800a038 <__libc_init_array+0x44>)
 800a00e:	1ba4      	subs	r4, r4, r6
 800a010:	10a4      	asrs	r4, r4, #2
 800a012:	42a5      	cmp	r5, r4
 800a014:	d105      	bne.n	800a022 <__libc_init_array+0x2e>
 800a016:	bd70      	pop	{r4, r5, r6, pc}
 800a018:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a01c:	4798      	blx	r3
 800a01e:	3501      	adds	r5, #1
 800a020:	e7ee      	b.n	800a000 <__libc_init_array+0xc>
 800a022:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a026:	4798      	blx	r3
 800a028:	3501      	adds	r5, #1
 800a02a:	e7f2      	b.n	800a012 <__libc_init_array+0x1e>
 800a02c:	0800a42c 	.word	0x0800a42c
 800a030:	0800a42c 	.word	0x0800a42c
 800a034:	0800a42c 	.word	0x0800a42c
 800a038:	0800a430 	.word	0x0800a430

0800a03c <memcpy>:
 800a03c:	b510      	push	{r4, lr}
 800a03e:	1e43      	subs	r3, r0, #1
 800a040:	440a      	add	r2, r1
 800a042:	4291      	cmp	r1, r2
 800a044:	d100      	bne.n	800a048 <memcpy+0xc>
 800a046:	bd10      	pop	{r4, pc}
 800a048:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a04c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a050:	e7f7      	b.n	800a042 <memcpy+0x6>

0800a052 <memset>:
 800a052:	4603      	mov	r3, r0
 800a054:	4402      	add	r2, r0
 800a056:	4293      	cmp	r3, r2
 800a058:	d100      	bne.n	800a05c <memset+0xa>
 800a05a:	4770      	bx	lr
 800a05c:	f803 1b01 	strb.w	r1, [r3], #1
 800a060:	e7f9      	b.n	800a056 <memset+0x4>
	...

0800a064 <_init>:
 800a064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a066:	bf00      	nop
 800a068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a06a:	bc08      	pop	{r3}
 800a06c:	469e      	mov	lr, r3
 800a06e:	4770      	bx	lr

0800a070 <_fini>:
 800a070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a072:	bf00      	nop
 800a074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a076:	bc08      	pop	{r3}
 800a078:	469e      	mov	lr, r3
 800a07a:	4770      	bx	lr
