
Automotive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a77c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  0800a8bc  0800a8bc  0001a8bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac7c  0800ac7c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800ac7c  0800ac7c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ac7c  0800ac7c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac7c  0800ac7c  0001ac7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac80  0800ac80  0001ac80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800ac84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000388c  20000014  0800ac98  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200038a0  0800ac98  000238a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cd59  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000057db  00000000  00000000  0004cd96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a78  00000000  00000000  00052578  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001800  00000000  00000000  00053ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e8f6  00000000  00000000  000557f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f882  00000000  00000000  000740e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ab132  00000000  00000000  00093968  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013ea9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006978  00000000  00000000  0013eb18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000014 	.word	0x20000014
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a8a4 	.word	0x0800a8a4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000018 	.word	0x20000018
 800017c:	0800a8a4 	.word	0x0800a8a4

08000180 <h_bridge_init>:
	evgroup_drive_evbit_permitted,
	evgroup_drive_evbit_N,

} drive_evgroup_bits_t;

bool h_bridge_init(void) {
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000184:	2108      	movs	r1, #8
 8000186:	4808      	ldr	r0, [pc, #32]	; (80001a8 <h_bridge_init+0x28>)
 8000188:	f005 fc4e 	bl	8005a28 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800018c:	2100      	movs	r1, #0
 800018e:	4807      	ldr	r0, [pc, #28]	; (80001ac <h_bridge_init+0x2c>)
 8000190:	f005 fc4a 	bl	8005a28 <HAL_TIM_PWM_Start>

	h_bridge_set_left_duty(0);
 8000194:	2000      	movs	r0, #0
 8000196:	f000 f80b 	bl	80001b0 <h_bridge_set_left_duty>
	h_bridge_set_right_duty(0);
 800019a:	2000      	movs	r0, #0
 800019c:	f000 f82e 	bl	80001fc <h_bridge_set_right_duty>

	return true;
 80001a0:	2301      	movs	r3, #1
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	200036e0 	.word	0x200036e0
 80001ac:	20003758 	.word	0x20003758

080001b0 <h_bridge_set_left_duty>:

void h_bridge_set_left_duty(int percent) {
 80001b0:	b480      	push	{r7}
 80001b2:	b085      	sub	sp, #20
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
	if (percent > 100)
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	2b64      	cmp	r3, #100	; 0x64
 80001bc:	dd01      	ble.n	80001c2 <h_bridge_set_left_duty+0x12>
		percent = 100;
 80001be:	2364      	movs	r3, #100	; 0x64
 80001c0:	607b      	str	r3, [r7, #4]

	if (percent < 1)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	dc01      	bgt.n	80001cc <h_bridge_set_left_duty+0x1c>
		percent = 0;
 80001c8:	2300      	movs	r3, #0
 80001ca:	607b      	str	r3, [r7, #4]

	uint32_t value = percent * htim2.Init.Period / 100;
 80001cc:	4b09      	ldr	r3, [pc, #36]	; (80001f4 <h_bridge_set_left_duty+0x44>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	687a      	ldr	r2, [r7, #4]
 80001d2:	fb02 f303 	mul.w	r3, r2, r3
 80001d6:	4a08      	ldr	r2, [pc, #32]	; (80001f8 <h_bridge_set_left_duty+0x48>)
 80001d8:	fba2 2303 	umull	r2, r3, r2, r3
 80001dc:	095b      	lsrs	r3, r3, #5
 80001de:	60fb      	str	r3, [r7, #12]
//	htim2.Instance->CCR1 = value;
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, value);
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <h_bridge_set_left_duty+0x44>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	68fa      	ldr	r2, [r7, #12]
 80001e6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80001e8:	bf00      	nop
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	20003758 	.word	0x20003758
 80001f8:	51eb851f 	.word	0x51eb851f

080001fc <h_bridge_set_right_duty>:

void h_bridge_set_right_duty(int percent) {
 80001fc:	b480      	push	{r7}
 80001fe:	b085      	sub	sp, #20
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
	if (percent > 100)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2b64      	cmp	r3, #100	; 0x64
 8000208:	dd01      	ble.n	800020e <h_bridge_set_right_duty+0x12>
		percent = 100;
 800020a:	2364      	movs	r3, #100	; 0x64
 800020c:	607b      	str	r3, [r7, #4]

	if (percent < 1)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	2b00      	cmp	r3, #0
 8000212:	dc01      	bgt.n	8000218 <h_bridge_set_right_duty+0x1c>
		percent = 0;
 8000214:	2300      	movs	r3, #0
 8000216:	607b      	str	r3, [r7, #4]

	uint32_t value = percent * htim3.Init.Period / 100;
 8000218:	4b09      	ldr	r3, [pc, #36]	; (8000240 <h_bridge_set_right_duty+0x44>)
 800021a:	68db      	ldr	r3, [r3, #12]
 800021c:	687a      	ldr	r2, [r7, #4]
 800021e:	fb02 f303 	mul.w	r3, r2, r3
 8000222:	4a08      	ldr	r2, [pc, #32]	; (8000244 <h_bridge_set_right_duty+0x48>)
 8000224:	fba2 2303 	umull	r2, r3, r2, r3
 8000228:	095b      	lsrs	r3, r3, #5
 800022a:	60fb      	str	r3, [r7, #12]
//	htim3.Instance->CCR3 = value;
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, value);
 800022c:	4b04      	ldr	r3, [pc, #16]	; (8000240 <h_bridge_set_right_duty+0x44>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	68fa      	ldr	r2, [r7, #12]
 8000232:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000234:	bf00      	nop
 8000236:	3714      	adds	r7, #20
 8000238:	46bd      	mov	sp, r7
 800023a:	bc80      	pop	{r7}
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	200036e0 	.word	0x200036e0
 8000244:	51eb851f 	.word	0x51eb851f

08000248 <h_bridge_cw_left>:

void h_bridge_cw_left(void) {
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 800024c:	2201      	movs	r2, #1
 800024e:	2102      	movs	r1, #2
 8000250:	4804      	ldr	r0, [pc, #16]	; (8000264 <h_bridge_cw_left+0x1c>)
 8000252:	f003 f9af 	bl	80035b4 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 8000256:	2200      	movs	r2, #0
 8000258:	2104      	movs	r1, #4
 800025a:	4802      	ldr	r0, [pc, #8]	; (8000264 <h_bridge_cw_left+0x1c>)
 800025c:	f003 f9aa 	bl	80035b4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8000260:	bf00      	nop
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40020800 	.word	0x40020800

08000268 <h_bridge_cw_right>:

void h_bridge_cw_right(void) {
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 800026c:	2201      	movs	r2, #1
 800026e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000272:	4805      	ldr	r0, [pc, #20]	; (8000288 <h_bridge_cw_right+0x20>)
 8000274:	f003 f99e 	bl	80035b4 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 8000278:	2200      	movs	r2, #0
 800027a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800027e:	4803      	ldr	r0, [pc, #12]	; (800028c <h_bridge_cw_right+0x24>)
 8000280:	f003 f998 	bl	80035b4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}
 8000288:	40020000 	.word	0x40020000
 800028c:	40020800 	.word	0x40020800

08000290 <h_bridge_ccw_left>:

void h_bridge_ccw_left(void) {
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 8000294:	2200      	movs	r2, #0
 8000296:	2102      	movs	r1, #2
 8000298:	4804      	ldr	r0, [pc, #16]	; (80002ac <h_bridge_ccw_left+0x1c>)
 800029a:	f003 f98b 	bl	80035b4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 800029e:	2201      	movs	r2, #1
 80002a0:	2104      	movs	r1, #4
 80002a2:	4802      	ldr	r0, [pc, #8]	; (80002ac <h_bridge_ccw_left+0x1c>)
 80002a4:	f003 f986 	bl	80035b4 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	40020800 	.word	0x40020800

080002b0 <h_bridge_ccw_right>:

void h_bridge_ccw_right(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 80002b4:	2200      	movs	r2, #0
 80002b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ba:	4805      	ldr	r0, [pc, #20]	; (80002d0 <h_bridge_ccw_right+0x20>)
 80002bc:	f003 f97a 	bl	80035b4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 80002c0:	2201      	movs	r2, #1
 80002c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002c6:	4803      	ldr	r0, [pc, #12]	; (80002d4 <h_bridge_ccw_right+0x24>)
 80002c8:	f003 f974 	bl	80035b4 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40020000 	.word	0x40020000
 80002d4:	40020800 	.word	0x40020800

080002d8 <h_bridge_coast>:

/// Lets the motor coast
void h_bridge_coast(void) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 80002dc:	2200      	movs	r2, #0
 80002de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e2:	480a      	ldr	r0, [pc, #40]	; (800030c <h_bridge_coast+0x34>)
 80002e4:	f003 f966 	bl	80035b4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 80002e8:	2200      	movs	r2, #0
 80002ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ee:	4808      	ldr	r0, [pc, #32]	; (8000310 <h_bridge_coast+0x38>)
 80002f0:	f003 f960 	bl	80035b4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 80002f4:	2200      	movs	r2, #0
 80002f6:	2102      	movs	r1, #2
 80002f8:	4805      	ldr	r0, [pc, #20]	; (8000310 <h_bridge_coast+0x38>)
 80002fa:	f003 f95b 	bl	80035b4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 80002fe:	2200      	movs	r2, #0
 8000300:	2104      	movs	r1, #4
 8000302:	4803      	ldr	r0, [pc, #12]	; (8000310 <h_bridge_coast+0x38>)
 8000304:	f003 f956 	bl	80035b4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}
 800030c:	40020000 	.word	0x40020000
 8000310:	40020800 	.word	0x40020800

08000314 <h_bridge_stop>:

void h_bridge_stop(void) {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 8000318:	2201      	movs	r2, #1
 800031a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800031e:	480a      	ldr	r0, [pc, #40]	; (8000348 <h_bridge_stop+0x34>)
 8000320:	f003 f948 	bl	80035b4 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 8000324:	2201      	movs	r2, #1
 8000326:	f44f 7100 	mov.w	r1, #512	; 0x200
 800032a:	4808      	ldr	r0, [pc, #32]	; (800034c <h_bridge_stop+0x38>)
 800032c:	f003 f942 	bl	80035b4 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 8000330:	2201      	movs	r2, #1
 8000332:	2102      	movs	r1, #2
 8000334:	4805      	ldr	r0, [pc, #20]	; (800034c <h_bridge_stop+0x38>)
 8000336:	f003 f93d 	bl	80035b4 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 800033a:	2201      	movs	r2, #1
 800033c:	2104      	movs	r1, #4
 800033e:	4803      	ldr	r0, [pc, #12]	; (800034c <h_bridge_stop+0x38>)
 8000340:	f003 f938 	bl	80035b4 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8000344:	bf00      	nop
 8000346:	bd80      	pop	{r7, pc}
 8000348:	40020000 	.word	0x40020000
 800034c:	40020800 	.word	0x40020800

08000350 <QMC5883L_Read_Reg>:
	uint16_t buf = ((buff[1] << 8) | buff[0]);	// U2
	buf = (~buf) + 1; // decimal
	return (int) buf / 100; // our value
}

uint8_t QMC5883L_Read_Reg(uint8_t reg) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b088      	sub	sp, #32
 8000354:	af04      	add	r7, sp, #16
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[1];
	HAL_I2C_Mem_Read(QMC5883L_I2C_PORT, QMC5883L_ADDRESS, reg, 1, Buffer, 1,
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	b29a      	uxth	r2, r3
 800035e:	230a      	movs	r3, #10
 8000360:	9302      	str	r3, [sp, #8]
 8000362:	2301      	movs	r3, #1
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	f107 030c 	add.w	r3, r7, #12
 800036a:	9300      	str	r3, [sp, #0]
 800036c:	2301      	movs	r3, #1
 800036e:	213c      	movs	r1, #60	; 0x3c
 8000370:	4803      	ldr	r0, [pc, #12]	; (8000380 <QMC5883L_Read_Reg+0x30>)
 8000372:	f003 fc11 	bl	8003b98 <HAL_I2C_Mem_Read>
			10);
	return Buffer[0];
 8000376:	7b3b      	ldrb	r3, [r7, #12]
}
 8000378:	4618      	mov	r0, r3
 800037a:	3710      	adds	r7, #16
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	200035d8 	.word	0x200035d8

08000384 <QMC5883L_Write_Reg>:

void QMC5883L_Write_Reg(uint8_t reg, uint8_t data) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af02      	add	r7, sp, #8
 800038a:	4603      	mov	r3, r0
 800038c:	460a      	mov	r2, r1
 800038e:	71fb      	strb	r3, [r7, #7]
 8000390:	4613      	mov	r3, r2
 8000392:	71bb      	strb	r3, [r7, #6]
	uint8_t Buffer[2] = { reg, data };
 8000394:	79fb      	ldrb	r3, [r7, #7]
 8000396:	733b      	strb	r3, [r7, #12]
 8000398:	79bb      	ldrb	r3, [r7, #6]
 800039a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(QMC5883L_I2C_PORT, QMC5883L_ADDRESS, Buffer, 2, 10);
 800039c:	f107 020c 	add.w	r2, r7, #12
 80003a0:	230a      	movs	r3, #10
 80003a2:	9300      	str	r3, [sp, #0]
 80003a4:	2302      	movs	r3, #2
 80003a6:	213c      	movs	r1, #60	; 0x3c
 80003a8:	4803      	ldr	r0, [pc, #12]	; (80003b8 <QMC5883L_Write_Reg+0x34>)
 80003aa:	f003 faf7 	bl	800399c <HAL_I2C_Master_Transmit>
}
 80003ae:	bf00      	nop
 80003b0:	3710      	adds	r7, #16
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	200035d8 	.word	0x200035d8

080003bc <QMC5883L_Read_Data>:

void QMC5883L_Read_Data(int16_t *MagX, int16_t *MagY, int16_t *MagZ) // (-32768 / +32768)
{
 80003bc:	b590      	push	{r4, r7, lr}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	60f8      	str	r0, [r7, #12]
 80003c4:	60b9      	str	r1, [r7, #8]
 80003c6:	607a      	str	r2, [r7, #4]
	*MagX = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_X_LSB)
 80003c8:	2004      	movs	r0, #4
 80003ca:	f7ff ffc1 	bl	8000350 <QMC5883L_Read_Reg>
 80003ce:	4603      	mov	r3, r0
 80003d0:	b21c      	sxth	r4, r3
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_X_MSB)) << 8));
 80003d2:	2003      	movs	r0, #3
 80003d4:	f7ff ffbc 	bl	8000350 <QMC5883L_Read_Reg>
 80003d8:	4603      	mov	r3, r0
 80003da:	021b      	lsls	r3, r3, #8
 80003dc:	b21b      	sxth	r3, r3
 80003de:	4323      	orrs	r3, r4
 80003e0:	b21a      	sxth	r2, r3
	*MagX = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_X_LSB)
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	801a      	strh	r2, [r3, #0]
	*MagY = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Y_LSB)
 80003e6:	2008      	movs	r0, #8
 80003e8:	f7ff ffb2 	bl	8000350 <QMC5883L_Read_Reg>
 80003ec:	4603      	mov	r3, r0
 80003ee:	b21c      	sxth	r4, r3
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Y_MSB)) << 8));
 80003f0:	2007      	movs	r0, #7
 80003f2:	f7ff ffad 	bl	8000350 <QMC5883L_Read_Reg>
 80003f6:	4603      	mov	r3, r0
 80003f8:	021b      	lsls	r3, r3, #8
 80003fa:	b21b      	sxth	r3, r3
 80003fc:	4323      	orrs	r3, r4
 80003fe:	b21a      	sxth	r2, r3
	*MagY = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Y_LSB)
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	801a      	strh	r2, [r3, #0]
	*MagZ = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Z_LSB)
 8000404:	2006      	movs	r0, #6
 8000406:	f7ff ffa3 	bl	8000350 <QMC5883L_Read_Reg>
 800040a:	4603      	mov	r3, r0
 800040c:	b21c      	sxth	r4, r3
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Z_MSB)) << 8));
 800040e:	2005      	movs	r0, #5
 8000410:	f7ff ff9e 	bl	8000350 <QMC5883L_Read_Reg>
 8000414:	4603      	mov	r3, r0
 8000416:	021b      	lsls	r3, r3, #8
 8000418:	b21b      	sxth	r3, r3
 800041a:	4323      	orrs	r3, r4
 800041c:	b21a      	sxth	r2, r3
	*MagZ = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Z_LSB)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	801a      	strh	r2, [r3, #0]
}
 8000422:	bf00      	nop
 8000424:	3714      	adds	r7, #20
 8000426:	46bd      	mov	sp, r7
 8000428:	bd90      	pop	{r4, r7, pc}

0800042a <QMC5883L_Initialize>:
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_TEMP_READ_MSB)) << 8))
			/ 100;
}

void QMC5883L_Initialize(_qmc5883l_MODE MODE, _qmc5883l_ODR ODR,
		_qmc5883l_RNG RNG, _qmc5883l_OSR OSR) {
 800042a:	b590      	push	{r4, r7, lr}
 800042c:	b083      	sub	sp, #12
 800042e:	af00      	add	r7, sp, #0
 8000430:	4604      	mov	r4, r0
 8000432:	4608      	mov	r0, r1
 8000434:	4611      	mov	r1, r2
 8000436:	461a      	mov	r2, r3
 8000438:	4623      	mov	r3, r4
 800043a:	71fb      	strb	r3, [r7, #7]
 800043c:	4603      	mov	r3, r0
 800043e:	71bb      	strb	r3, [r7, #6]
 8000440:	460b      	mov	r3, r1
 8000442:	717b      	strb	r3, [r7, #5]
 8000444:	4613      	mov	r3, r2
 8000446:	713b      	strb	r3, [r7, #4]
	QMC5883L_Write_Reg(QMC5883L_CONFIG_3, 0x01);
 8000448:	2101      	movs	r1, #1
 800044a:	200b      	movs	r0, #11
 800044c:	f7ff ff9a 	bl	8000384 <QMC5883L_Write_Reg>
	QMC5883L_Write_Reg(QMC5883L_CONFIG_1, MODE | ODR | RNG | OSR);
 8000450:	79fa      	ldrb	r2, [r7, #7]
 8000452:	79bb      	ldrb	r3, [r7, #6]
 8000454:	4313      	orrs	r3, r2
 8000456:	b2da      	uxtb	r2, r3
 8000458:	797b      	ldrb	r3, [r7, #5]
 800045a:	4313      	orrs	r3, r2
 800045c:	b2da      	uxtb	r2, r3
 800045e:	793b      	ldrb	r3, [r7, #4]
 8000460:	4313      	orrs	r3, r2
 8000462:	b2db      	uxtb	r3, r3
 8000464:	4619      	mov	r1, r3
 8000466:	2009      	movs	r0, #9
 8000468:	f7ff ff8c 	bl	8000384 <QMC5883L_Write_Reg>
}
 800046c:	bf00      	nop
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	bd90      	pop	{r4, r7, pc}

08000474 <QMC5883L_InterruptConfig>:

void QMC5883L_Reset() {
	QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x81);
}

void QMC5883L_InterruptConfig(_qmc5883l_INT INT) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
	if (INT == INTERRUPT_ENABLE) {
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d104      	bne.n	800048e <QMC5883L_InterruptConfig+0x1a>
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x00);
 8000484:	2100      	movs	r1, #0
 8000486:	200a      	movs	r0, #10
 8000488:	f7ff ff7c 	bl	8000384 <QMC5883L_Write_Reg>
	} else {
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x01);
	}
}
 800048c:	e003      	b.n	8000496 <QMC5883L_InterruptConfig+0x22>
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x01);
 800048e:	2101      	movs	r1, #1
 8000490:	200a      	movs	r0, #10
 8000492:	f7ff ff77 	bl	8000384 <QMC5883L_Write_Reg>
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <ultrasound_select_proper_distance>:
//	HAL_Delay(0.01);
	HAL_GPIO_WritePin(OUT_ULTRASOUND_TRIG_GPIO_Port, OUT_ULTRASOUND_TRIG_Pin,
			GPIO_PIN_RESET);
}

uint16_t ultrasound_select_proper_distance(uint8_t code) {
 800049e:	b480      	push	{r7}
 80004a0:	b083      	sub	sp, #12
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	4603      	mov	r3, r0
 80004a6:	71fb      	strb	r3, [r7, #7]
	if (code == dist5) {
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d102      	bne.n	80004b4 <ultrasound_select_proper_distance+0x16>
		return (uint16_t) ULTRASOUND_DIST_5CM_BITS;
 80004ae:	f240 438a 	movw	r3, #1162	; 0x48a
 80004b2:	e043      	b.n	800053c <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist10) {
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	d102      	bne.n	80004c0 <ultrasound_select_proper_distance+0x22>
		return (uint16_t) ULTRASOUND_DIST_10CM_BITS;
 80004ba:	f241 232b 	movw	r3, #4651	; 0x122b
 80004be:	e03d      	b.n	800053c <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist15) {
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	2b02      	cmp	r3, #2
 80004c4:	d102      	bne.n	80004cc <ultrasound_select_proper_distance+0x2e>
		return (uint16_t) ULTRASOUND_DIST_15CM_BITS;
 80004c6:	f44f 53da 	mov.w	r3, #6976	; 0x1b40
 80004ca:	e037      	b.n	800053c <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist20) {
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	2b03      	cmp	r3, #3
 80004d0:	d102      	bne.n	80004d8 <ultrasound_select_proper_distance+0x3a>
		return (uint16_t) ULTRASOUND_DIST_20CM_BITS;
 80004d2:	f242 4356 	movw	r3, #9302	; 0x2456
 80004d6:	e031      	b.n	800053c <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist25) {
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	2b04      	cmp	r3, #4
 80004dc:	d102      	bne.n	80004e4 <ultrasound_select_proper_distance+0x46>
		return (uint16_t) ULTRASOUND_DIST_25CM_BITS;
 80004de:	f642 536b 	movw	r3, #11627	; 0x2d6b
 80004e2:	e02b      	b.n	800053c <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist30) {
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	2b05      	cmp	r3, #5
 80004e8:	d102      	bne.n	80004f0 <ultrasound_select_proper_distance+0x52>
		return (uint16_t) ULTRASOUND_DIST_30CM_BITS;
 80004ea:	f243 6381 	movw	r3, #13953	; 0x3681
 80004ee:	e025      	b.n	800053c <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist35) {
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	2b06      	cmp	r3, #6
 80004f4:	d102      	bne.n	80004fc <ultrasound_select_proper_distance+0x5e>
		return (uint16_t) ULTRASOUND_DIST_35CM_BITS;
 80004f6:	f643 7397 	movw	r3, #16279	; 0x3f97
 80004fa:	e01f      	b.n	800053c <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist40) {
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	2b07      	cmp	r3, #7
 8000500:	d102      	bne.n	8000508 <ultrasound_select_proper_distance+0x6a>
		return (uint16_t) ULTRASOUND_DIST_40CM_BITS;
 8000502:	f644 03ac 	movw	r3, #18604	; 0x48ac
 8000506:	e019      	b.n	800053c <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist50) {
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	2b08      	cmp	r3, #8
 800050c:	d102      	bne.n	8000514 <ultrasound_select_proper_distance+0x76>
		return (uint16_t) ULTRASOUND_DIST_50CM_BITS;
 800050e:	f645 23d7 	movw	r3, #23255	; 0x5ad7
 8000512:	e013      	b.n	800053c <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist60) {
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	2b09      	cmp	r3, #9
 8000518:	d102      	bne.n	8000520 <ultrasound_select_proper_distance+0x82>
		return (uint16_t) ULTRASOUND_DIST_60CM_BITS;
 800051a:	f646 5302 	movw	r3, #27906	; 0x6d02
 800051e:	e00d      	b.n	800053c <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist70) {
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	2b0a      	cmp	r3, #10
 8000524:	d102      	bne.n	800052c <ultrasound_select_proper_distance+0x8e>
		return (uint16_t) ULTRASOUND_DIST_70CM_BITS;
 8000526:	f647 732e 	movw	r3, #32558	; 0x7f2e
 800052a:	e007      	b.n	800053c <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist80) {
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	2b0b      	cmp	r3, #11
 8000530:	d102      	bne.n	8000538 <ultrasound_select_proper_distance+0x9a>
		return (uint16_t) ULTRASOUND_DIST_80CM_BITS;
 8000532:	f249 1359 	movw	r3, #37209	; 0x9159
 8000536:	e001      	b.n	800053c <ultrasound_select_proper_distance+0x9e>
	} else {
		return (uint16_t) ULTRASOUND_DIST_80CM_BITS;
 8000538:	f249 1359 	movw	r3, #37209	; 0x9159
	}
}
 800053c:	4618      	mov	r0, r3
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr

08000546 <device_init>:

#include "device_init.h"
#include "stdint.h"


void device_init(void) {
 8000546:	b480      	push	{r7}
 8000548:	b083      	sub	sp, #12
 800054a:	af00      	add	r7, sp, #0

	uint16_t successCnt = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	80fb      	strh	r3, [r7, #6]
	uint16_t modsToInit = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < /*mod_N*/mod_0; i++) {
 8000554:	2300      	movs	r3, #0
 8000556:	807b      	strh	r3, [r7, #2]
 8000558:	bf00      	nop
		}

		modsToInit++;
	}

	if (modsToInit != successCnt) {
 800055a:	88ba      	ldrh	r2, [r7, #4]
 800055c:	88fb      	ldrh	r3, [r7, #6]
 800055e:	429a      	cmp	r2, r3
 8000560:	d000      	beq.n	8000564 <device_init+0x1e>
		// some kind of error
		while (1)
 8000562:	e7fe      	b.n	8000562 <device_init+0x1c>
			; //TODO: call some error handler
	}

}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr
	...

08000570 <rt_init>:
TaskHandle_t rt_tasks[rt_task_N];
QueueHandle_t rt_queues[rt_queue_N];
EventGroupHandle_t rt_evgroups[rt_evgroup_N];
TimerHandle_t rt_timers[rt_timer_N];

void rt_init(void) {
 8000570:	b5b0      	push	{r4, r5, r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af02      	add	r7, sp, #8

	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 8000576:	2300      	movs	r3, #0
 8000578:	77fb      	strb	r3, [r7, #31]
 800057a:	e02c      	b.n	80005d6 <rt_init+0x66>
		rt_task_def_t const *def = rt_task_def + task;
 800057c:	7ffa      	ldrb	r2, [r7, #31]
 800057e:	4613      	mov	r3, r2
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	4413      	add	r3, r2
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	461a      	mov	r2, r3
 8000588:	4b47      	ldr	r3, [pc, #284]	; (80006a8 <rt_init+0x138>)
 800058a:	4413      	add	r3, r2
 800058c:	607b      	str	r3, [r7, #4]
		TaskHandle_t *handle = rt_tasks + task;
 800058e:	7ffb      	ldrb	r3, [r7, #31]
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	4a46      	ldr	r2, [pc, #280]	; (80006ac <rt_init+0x13c>)
 8000594:	4413      	add	r3, r2
 8000596:	603b      	str	r3, [r7, #0]
		if (def->active) {
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	7c9b      	ldrb	r3, [r3, #18]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d014      	beq.n	80005ca <rt_init+0x5a>
			if (xTaskCreate(def->pvTaskCode, def->pcName, def->usStackDepth,
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	6818      	ldr	r0, [r3, #0]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	6859      	ldr	r1, [r3, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	8a1c      	ldrh	r4, [r3, #16]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	689d      	ldr	r5, [r3, #8]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	683a      	ldr	r2, [r7, #0]
 80005b6:	9201      	str	r2, [sp, #4]
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	462b      	mov	r3, r5
 80005bc:	4622      	mov	r2, r4
 80005be:	f008 f98c 	bl	80088da <xTaskCreate>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d003      	beq.n	80005d0 <rt_init+0x60>
					def->pvParameters, def->uxPriority, handle) != pdPASS) {
//				error :-(
				while (1)
 80005c8:	e7fe      	b.n	80005c8 <rt_init+0x58>
					;
			}
		} else {
			*handle = 0;
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 80005d0:	7ffb      	ldrb	r3, [r7, #31]
 80005d2:	3301      	adds	r3, #1
 80005d4:	77fb      	strb	r3, [r7, #31]
 80005d6:	7ffb      	ldrb	r3, [r7, #31]
 80005d8:	2b04      	cmp	r3, #4
 80005da:	d9cf      	bls.n	800057c <rt_init+0xc>
		}
	}

	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 80005dc:	2300      	movs	r3, #0
 80005de:	77bb      	strb	r3, [r7, #30]
 80005e0:	e01c      	b.n	800061c <rt_init+0xac>
		rt_queue_def_t const *def = rt_queue_def + queue;
 80005e2:	7fbb      	ldrb	r3, [r7, #30]
 80005e4:	011b      	lsls	r3, r3, #4
 80005e6:	4a32      	ldr	r2, [pc, #200]	; (80006b0 <rt_init+0x140>)
 80005e8:	4413      	add	r3, r2
 80005ea:	60fb      	str	r3, [r7, #12]
		QueueHandle_t *handle = rt_queues + queue;
 80005ec:	7fbb      	ldrb	r3, [r7, #30]
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	4a30      	ldr	r2, [pc, #192]	; (80006b4 <rt_init+0x144>)
 80005f2:	4413      	add	r3, r2
 80005f4:	60bb      	str	r3, [r7, #8]

		if ((*handle = xQueueCreate(def->uxQueueLength, def->uxItemSize))
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	6818      	ldr	r0, [r3, #0]
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	2200      	movs	r2, #0
 8000600:	4619      	mov	r1, r3
 8000602:	f007 fcdb 	bl	8007fbc <xQueueGenericCreate>
 8000606:	4602      	mov	r2, r0
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d100      	bne.n	8000616 <rt_init+0xa6>
				== 0) {
			while (1)
 8000614:	e7fe      	b.n	8000614 <rt_init+0xa4>
	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 8000616:	7fbb      	ldrb	r3, [r7, #30]
 8000618:	3301      	adds	r3, #1
 800061a:	77bb      	strb	r3, [r7, #30]
 800061c:	7fbb      	ldrb	r3, [r7, #30]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d9df      	bls.n	80005e2 <rt_init+0x72>
				;
		}
	}

	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 8000622:	2300      	movs	r3, #0
 8000624:	777b      	strb	r3, [r7, #29]
 8000626:	e020      	b.n	800066a <rt_init+0xfa>
		rt_timer_def_t const *def = rt_timer_def + timer;
 8000628:	7f7b      	ldrb	r3, [r7, #29]
 800062a:	011b      	lsls	r3, r3, #4
 800062c:	4a22      	ldr	r2, [pc, #136]	; (80006b8 <rt_init+0x148>)
 800062e:	4413      	add	r3, r2
 8000630:	617b      	str	r3, [r7, #20]
		TimerHandle_t *handle = rt_timers + timer;
 8000632:	7f7b      	ldrb	r3, [r7, #29]
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	4a21      	ldr	r2, [pc, #132]	; (80006bc <rt_init+0x14c>)
 8000638:	4413      	add	r3, r2
 800063a:	613b      	str	r3, [r7, #16]

		if ((*handle = xTimerCreate(def->pcTimerName, def->xTimerPeriodInTicks,
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	6818      	ldr	r0, [r3, #0]
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	6859      	ldr	r1, [r3, #4]
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	689a      	ldr	r2, [r3, #8]
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2300      	movs	r3, #0
 8000650:	f009 fa00 	bl	8009a54 <xTimerCreate>
 8000654:	4602      	mov	r2, r0
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d100      	bne.n	8000664 <rt_init+0xf4>
				def->uxAutoReload, NULL, def->pxCallbackFunction)) == 0)
			while (1)
 8000662:	e7fe      	b.n	8000662 <rt_init+0xf2>
	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 8000664:	7f7b      	ldrb	r3, [r7, #29]
 8000666:	3301      	adds	r3, #1
 8000668:	777b      	strb	r3, [r7, #29]
 800066a:	7f7b      	ldrb	r3, [r7, #29]
 800066c:	2b02      	cmp	r3, #2
 800066e:	d9db      	bls.n	8000628 <rt_init+0xb8>
				;
	}

	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 8000670:	2300      	movs	r3, #0
 8000672:	773b      	strb	r3, [r7, #28]
 8000674:	e011      	b.n	800069a <rt_init+0x12a>
			evgroup++) {
		EventGroupHandle_t *handle = rt_evgroups + evgroup;
 8000676:	7f3b      	ldrb	r3, [r7, #28]
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	4a11      	ldr	r2, [pc, #68]	; (80006c0 <rt_init+0x150>)
 800067c:	4413      	add	r3, r2
 800067e:	61bb      	str	r3, [r7, #24]

		if ((*handle = xEventGroupCreate()) == 0) {
 8000680:	f007 f90c 	bl	800789c <xEventGroupCreate>
 8000684:	4602      	mov	r2, r0
 8000686:	69bb      	ldr	r3, [r7, #24]
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	69bb      	ldr	r3, [r7, #24]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d100      	bne.n	8000694 <rt_init+0x124>
			while (1)
 8000692:	e7fe      	b.n	8000692 <rt_init+0x122>
			evgroup++) {
 8000694:	7f3b      	ldrb	r3, [r7, #28]
 8000696:	3301      	adds	r3, #1
 8000698:	773b      	strb	r3, [r7, #28]
	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 800069a:	7f3b      	ldrb	r3, [r7, #28]
 800069c:	2b03      	cmp	r3, #3
 800069e:	d9ea      	bls.n	8000676 <rt_init+0x106>
				;
		}
	}

}
 80006a0:	bf00      	nop
 80006a2:	3720      	adds	r7, #32
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bdb0      	pop	{r4, r5, r7, pc}
 80006a8:	0800ab80 	.word	0x0800ab80
 80006ac:	20003538 	.word	0x20003538
 80006b0:	0800abe4 	.word	0x0800abe4
 80006b4:	20003568 	.word	0x20003568
 80006b8:	0800ac04 	.word	0x0800ac04
 80006bc:	2000354c 	.word	0x2000354c
 80006c0:	20003558 	.word	0x20003558

080006c4 <rt_evbitwait_any>:

uint32_t rt_evbitwait_any(rt_evgroup_t Ev) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af02      	add	r7, sp, #8
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	4a09      	ldr	r2, [pc, #36]	; (80006f8 <rt_evbitwait_any+0x34>)
 80006d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006d6:	60fb      	str	r3, [r7, #12]

	return xEventGroupWaitBits(Evh, 0x00FFFFFFu, pdTRUE, pdFALSE, portMAX_DELAY);
 80006d8:	f04f 33ff 	mov.w	r3, #4294967295
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2300      	movs	r3, #0
 80006e0:	2201      	movs	r2, #1
 80006e2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80006e6:	68f8      	ldr	r0, [r7, #12]
 80006e8:	f007 f8f2 	bl	80078d0 <xEventGroupWaitBits>
 80006ec:	4603      	mov	r3, r0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20003558 	.word	0x20003558

080006fc <rt_evbit_check_any>:

uint32_t rt_evbit_check_any(rt_evgroup_t Ev) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af02      	add	r7, sp, #8
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	4a08      	ldr	r2, [pc, #32]	; (800072c <rt_evbit_check_any+0x30>)
 800070a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800070e:	60fb      	str	r3, [r7, #12]

	return xEventGroupWaitBits(Evh, 0x00FFFFFFu, pdFALSE, pdFALSE, 0);
 8000710:	2300      	movs	r3, #0
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2300      	movs	r3, #0
 8000716:	2200      	movs	r2, #0
 8000718:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800071c:	68f8      	ldr	r0, [r7, #12]
 800071e:	f007 f8d7 	bl	80078d0 <xEventGroupWaitBits>
 8000722:	4603      	mov	r3, r0
}
 8000724:	4618      	mov	r0, r3
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20003558 	.word	0x20003558

08000730 <rt_evbit_clear_ISR>:

	return xEventGroupClearBits(Evh, // The event group being updated.
			msk);	// The bits being cleared.
}

BaseType_t rt_evbit_clear_ISR( rt_evgroup_t Ev, uint32_t bit) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	6039      	str	r1, [r7, #0]
 800073a:	71fb      	strb	r3, [r7, #7]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	4a09      	ldr	r2, [pc, #36]	; (8000764 <rt_evbit_clear_ISR+0x34>)
 8000740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000744:	60fb      	str	r3, [r7, #12]
	EventBits_t msk = (1u << bit);
 8000746:	2201      	movs	r2, #1
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	fa02 f303 	lsl.w	r3, r2, r3
 800074e:	60bb      	str	r3, [r7, #8]

	return xEventGroupClearBitsFromISR(Evh, // The event group being updated.
 8000750:	68b9      	ldr	r1, [r7, #8]
 8000752:	68f8      	ldr	r0, [r7, #12]
 8000754:	f007 f9bc 	bl	8007ad0 <xEventGroupClearBitsFromISR>
 8000758:	4603      	mov	r3, r0
			msk);	// The bits being cleared.
}
 800075a:	4618      	mov	r0, r3
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20003558 	.word	0x20003558

08000768 <rt_evbit_set>:

void rt_evbit_set(rt_evgroup_t Ev, uint32_t bit) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	6039      	str	r1, [r7, #0]
 8000772:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 8000774:	2201      	movs	r2, #1
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	fa02 f303 	lsl.w	r3, r2, r3
 800077c:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	4a05      	ldr	r2, [pc, #20]	; (8000798 <rt_evbit_set+0x30>)
 8000782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000786:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBits(Evh, msk);
 8000788:	68f9      	ldr	r1, [r7, #12]
 800078a:	68b8      	ldr	r0, [r7, #8]
 800078c:	f007 f9b4 	bl	8007af8 <xEventGroupSetBits>
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20003558 	.word	0x20003558

0800079c <rt_evbit_set_ISR>:

void rt_evbit_set_ISR(rt_evgroup_t Ev, uint32_t bit) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	6039      	str	r1, [r7, #0]
 80007a6:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 80007a8:	2201      	movs	r2, #1
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	fa02 f303 	lsl.w	r3, r2, r3
 80007b0:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <rt_evbit_set_ISR+0x34>)
 80007b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ba:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBitsFromISR(Evh, msk, pdFALSE);
 80007bc:	2200      	movs	r2, #0
 80007be:	68f9      	ldr	r1, [r7, #12]
 80007c0:	68b8      	ldr	r0, [r7, #8]
 80007c2:	f007 fa5d 	bl	8007c80 <xEventGroupSetBitsFromISR>
//	portYIELD_FROM_ISR(pdFALSE);
}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20003558 	.word	0x20003558

080007d4 <rt_enqueue_ISR>:
	}

	return false;
}

bool rt_enqueue_ISR(rt_queue_t Q, void const *bf) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	6039      	str	r1, [r7, #0]
 80007de:	71fb      	strb	r3, [r7, #7]
//  assert(Q < rt_queue_N);

	QueueHandle_t Qh = rt_queues[Q];
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	4a0b      	ldr	r2, [pc, #44]	; (8000810 <rt_enqueue_ISR+0x3c>)
 80007e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e8:	60fb      	str	r3, [r7, #12]
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
	if (xQueueSendToBackFromISR(Qh, bf, &xHigherPriorityTaskWoken) == pdPASS) {
 80007ee:	f107 0208 	add.w	r2, r7, #8
 80007f2:	2300      	movs	r3, #0
 80007f4:	6839      	ldr	r1, [r7, #0]
 80007f6:	68f8      	ldr	r0, [r7, #12]
 80007f8:	f007 fd3a 	bl	8008270 <xQueueGenericSendFromISR>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d101      	bne.n	8000806 <rt_enqueue_ISR+0x32>
		return true;
 8000802:	2301      	movs	r3, #1
 8000804:	e000      	b.n	8000808 <rt_enqueue_ISR+0x34>
	}

	return false;
 8000806:	2300      	movs	r3, #0
}
 8000808:	4618      	mov	r0, r3
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20003568 	.word	0x20003568

08000814 <rt_dequeue>:

bool rt_dequeue(rt_queue_t Q, void *bf) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	6039      	str	r1, [r7, #0]
 800081e:	71fb      	strb	r3, [r7, #7]
//  assert(Q < rt_queue_N);

	QueueHandle_t Qh = rt_queues[Q];
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	4a0d      	ldr	r2, [pc, #52]	; (8000858 <rt_dequeue+0x44>)
 8000824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000828:	60fb      	str	r3, [r7, #12]
	TickType_t to = rt_queue_def[Q].timeout_deq;
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	4a0b      	ldr	r2, [pc, #44]	; (800085c <rt_dequeue+0x48>)
 800082e:	011b      	lsls	r3, r3, #4
 8000830:	4413      	add	r3, r2
 8000832:	330c      	adds	r3, #12
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	60bb      	str	r3, [r7, #8]

	if (xQueueReceive(Qh, bf, to) == pdPASS) {
 8000838:	68ba      	ldr	r2, [r7, #8]
 800083a:	6839      	ldr	r1, [r7, #0]
 800083c:	68f8      	ldr	r0, [r7, #12]
 800083e:	f007 fdab 	bl	8008398 <xQueueReceive>
 8000842:	4603      	mov	r3, r0
 8000844:	2b01      	cmp	r3, #1
 8000846:	d101      	bne.n	800084c <rt_dequeue+0x38>
		return true;
 8000848:	2301      	movs	r3, #1
 800084a:	e000      	b.n	800084e <rt_dequeue+0x3a>
	}

	return false;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20003568 	.word	0x20003568
 800085c:	0800abe4 	.word	0x0800abe4

08000860 <rt_timer_start>:
	}

	return false;
}

bool rt_timer_start(rt_timer_t t, uint32_t timeout) {
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b085      	sub	sp, #20
 8000864:	af02      	add	r7, sp, #8
 8000866:	4603      	mov	r3, r0
 8000868:	6039      	str	r1, [r7, #0]
 800086a:	71fb      	strb	r3, [r7, #7]
	return xTimerStart(rt_timers[t], timeout);
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	4a0b      	ldr	r2, [pc, #44]	; (800089c <rt_timer_start+0x3c>)
 8000870:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000874:	f008 fbba 	bl	8008fec <xTaskGetTickCount>
 8000878:	4602      	mov	r2, r0
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	2300      	movs	r3, #0
 8000880:	2101      	movs	r1, #1
 8000882:	4620      	mov	r0, r4
 8000884:	f009 f938 	bl	8009af8 <xTimerGenericCommand>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	bf14      	ite	ne
 800088e:	2301      	movne	r3, #1
 8000890:	2300      	moveq	r3, #0
 8000892:	b2db      	uxtb	r3, r3
}
 8000894:	4618      	mov	r0, r3
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	bd90      	pop	{r4, r7, pc}
 800089c:	2000354c 	.word	0x2000354c

080008a0 <rt_timer_start_ISR>:

bool rt_timer_start_ISR(rt_timer_t t, BaseType_t *pxHigherPriorityTaskWoken) {
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af02      	add	r7, sp, #8
 80008a6:	4603      	mov	r3, r0
 80008a8:	6039      	str	r1, [r7, #0]
 80008aa:	71fb      	strb	r3, [r7, #7]
	return xTimerStartFromISR(rt_timers[t], pxHigherPriorityTaskWoken);
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	4a0b      	ldr	r2, [pc, #44]	; (80008dc <rt_timer_start_ISR+0x3c>)
 80008b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80008b4:	f008 fba8 	bl	8009008 <xTaskGetTickCountFromISR>
 80008b8:	4602      	mov	r2, r0
 80008ba:	2300      	movs	r3, #0
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	2106      	movs	r1, #6
 80008c2:	4620      	mov	r0, r4
 80008c4:	f009 f918 	bl	8009af8 <xTimerGenericCommand>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	bf14      	ite	ne
 80008ce:	2301      	movne	r3, #1
 80008d0:	2300      	moveq	r3, #0
 80008d2:	b2db      	uxtb	r3, r3
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd90      	pop	{r4, r7, pc}
 80008dc:	2000354c 	.word	0x2000354c

080008e0 <timer_BLE>:
// working all the time, checking if something is received or sending data to android device

/* ************************************************************************** */
// callback
/* ************************************************************************** */
void timer_BLE(TimerHandle_t xTimer) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, (uint8_t*) ble_pData, BLE_MAX_SIZE);
 80008e8:	2203      	movs	r2, #3
 80008ea:	4904      	ldr	r1, [pc, #16]	; (80008fc <timer_BLE+0x1c>)
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <timer_BLE+0x20>)
 80008ee:	f006 fb0b 	bl	8006f08 <HAL_UART_Receive_DMA>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20003574 	.word	0x20003574
 8000900:	200037d8 	.word	0x200037d8

08000904 <HAL_UART_RxCpltCallback>:

void HAL_UART_TxHalfCallback(UART_HandleTypeDef *huart) {
	__NOP();
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
//	__NOP();
//	char ble_pData[BLE_MAX_SIZE];
//	memset(ble_pData, 1, BLE_MAX_SIZE);
//	ble_receive_data(ble_pData);
	xQueueBleData ble_queue = { 0 };
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]

	ble_queue.info = ble_received;
 8000910:	2300      	movs	r3, #0
 8000912:	733b      	strb	r3, [r7, #12]

	memcpy(&ble_queue.command, ble_pData, 1);
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <HAL_UART_RxCpltCallback+0x38>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	737b      	strb	r3, [r7, #13]
	memcpy(&ble_queue.valueReg1, ble_pData + 1, 1);
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <HAL_UART_RxCpltCallback+0x3c>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	73bb      	strb	r3, [r7, #14]
	memcpy(&ble_queue.valueReg2, ble_pData + 2, 1);
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <HAL_UART_RxCpltCallback+0x40>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	73fb      	strb	r3, [r7, #15]

	rt_enqueue_ISR(rt_queue_ble, &ble_queue);
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	4619      	mov	r1, r3
 800092c:	2000      	movs	r0, #0
 800092e:	f7ff ff51 	bl	80007d4 <rt_enqueue_ISR>

}
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20003574 	.word	0x20003574
 8000940:	20003575 	.word	0x20003575
 8000944:	20003576 	.word	0x20003576

08000948 <HAL_UART_ErrorCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart);/* {
 __NOP();
 }*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	__NOP();
 8000950:	bf00      	nop
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <task_ble>:

/* ************************************************************************** */
// task
/* ************************************************************************** */
void task_ble(void *pvParameters) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	(void*) pvParameters;

	bool status;
	xQueueBleData receivedBleData = { 0 };
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]

	for (;;) {

//		vTaskDelay(xDelay1000ms);

		status = rt_dequeue(rt_queue_ble, &receivedBleData);
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	4619      	mov	r1, r3
 800096e:	2000      	movs	r0, #0
 8000970:	f7ff ff50 	bl	8000814 <rt_dequeue>
 8000974:	4603      	mov	r3, r0
 8000976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (status) {
 800097a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800097e:	2b00      	cmp	r3, #0
 8000980:	d0f2      	beq.n	8000968 <task_ble+0xc>
			if (receivedBleData.info == ble_received) {
 8000982:	7b3b      	ldrb	r3, [r7, #12]
 8000984:	2b00      	cmp	r3, #0
 8000986:	f040 8087 	bne.w	8000a98 <task_ble+0x13c>
//				memcpy(ble_pData, receivedBleData.value, BLE_MAX_SIZE);

				switch (receivedBleData.command) {
 800098a:	7b7b      	ldrb	r3, [r7, #13]
 800098c:	3b01      	subs	r3, #1
 800098e:	2b08      	cmp	r3, #8
 8000990:	d87b      	bhi.n	8000a8a <task_ble+0x12e>
 8000992:	a201      	add	r2, pc, #4	; (adr r2, 8000998 <task_ble+0x3c>)
 8000994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000998:	080009bd 	.word	0x080009bd
 800099c:	080009c7 	.word	0x080009c7
 80009a0:	080009d1 	.word	0x080009d1
 80009a4:	08000a8b 	.word	0x08000a8b
 80009a8:	08000a8b 	.word	0x08000a8b
 80009ac:	08000a8b 	.word	0x08000a8b
 80009b0:	08000a8b 	.word	0x08000a8b
 80009b4:	08000a8b 	.word	0x08000a8b
 80009b8:	08000a73 	.word	0x08000a73
				case BLE_RECEIVED_DO_NOTHING:
					rt_evbit_set(rt_evgroup_state_machine,
 80009bc:	2100      	movs	r1, #0
 80009be:	2001      	movs	r0, #1
 80009c0:	f7ff fed2 	bl	8000768 <rt_evbit_set>
							evgroup_state_m_do_nothing);
					break;
 80009c4:	e069      	b.n	8000a9a <task_ble+0x13e>
				case BLE_RECEIVED_AUTO_MANUAL:
					rt_evbit_set(rt_evgroup_state_machine,
 80009c6:	2101      	movs	r1, #1
 80009c8:	2001      	movs	r0, #1
 80009ca:	f7ff fecd 	bl	8000768 <rt_evbit_set>
							evgroup_state_m_auto_manual);
					break;
 80009ce:	e064      	b.n	8000a9a <task_ble+0x13e>
				case BLE_RECEIVED_MOVEMENT:
//					rt_evbit_set(rt_evgroup_state_machine,
//							evgroup_state_m_movement);

					left_engine = receivedBleData.valueReg1;
 80009d0:	7bbb      	ldrb	r3, [r7, #14]
 80009d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					right_engine = receivedBleData.valueReg2;
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					// 0	1	1	0	0	1	0	0
					// ^
					// ccw
					// --- |        PERCENTAGE       |

					int left = u2_to_decimal(left_engine);
 80009dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 f9e3 	bl	8000dac <u2_to_decimal>
 80009e6:	61f8      	str	r0, [r7, #28]
					int right = u2_to_decimal(right_engine);
 80009e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 f9dd 	bl	8000dac <u2_to_decimal>
 80009f2:	61b8      	str	r0, [r7, #24]

					// left engine
					if (left < 0) {
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	da07      	bge.n	8000a0a <task_ble+0xae>
						h_bridge_ccw_left();
 80009fa:	f7ff fc49 	bl	8000290 <h_bridge_ccw_left>
						h_bridge_set_left_duty(-left);
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	425b      	negs	r3, r3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fbd4 	bl	80001b0 <h_bridge_set_left_duty>
 8000a08:	e013      	b.n	8000a32 <task_ble+0xd6>
					} else {
						// allowed to drive forward?
						uint32_t evbits = rt_evbit_check_any(
 8000a0a:	2003      	movs	r0, #3
 8000a0c:	f7ff fe76 	bl	80006fc <rt_evbit_check_any>
 8000a10:	6178      	str	r0, [r7, #20]
								rt_evgroup_ultrasound);
						if (evbits & (1 << evgroup_ultrasound_evbit_move)) {
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	f003 0302 	and.w	r3, r3, #2
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d005      	beq.n	8000a28 <task_ble+0xcc>
							// yes
							h_bridge_cw_left();
 8000a1c:	f7ff fc14 	bl	8000248 <h_bridge_cw_left>
							h_bridge_set_left_duty(left);
 8000a20:	69f8      	ldr	r0, [r7, #28]
 8000a22:	f7ff fbc5 	bl	80001b0 <h_bridge_set_left_duty>
 8000a26:	e004      	b.n	8000a32 <task_ble+0xd6>
						} else {
							h_bridge_stop();
 8000a28:	f7ff fc74 	bl	8000314 <h_bridge_stop>
							h_bridge_set_left_duty(0);
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f7ff fbbf 	bl	80001b0 <h_bridge_set_left_duty>
						}

					}

					// right engine
					if (right < 0) {
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	da07      	bge.n	8000a48 <task_ble+0xec>
						h_bridge_ccw_right();
 8000a38:	f7ff fc3a 	bl	80002b0 <h_bridge_ccw_right>
						h_bridge_set_right_duty(-right);
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	425b      	negs	r3, r3
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fbdb 	bl	80001fc <h_bridge_set_right_duty>
						} else {
							h_bridge_stop();
							h_bridge_set_right_duty(0);
						}
					}
					break;
 8000a46:	e028      	b.n	8000a9a <task_ble+0x13e>
						uint32_t evbits = rt_evbit_check_any(
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f7ff fe57 	bl	80006fc <rt_evbit_check_any>
 8000a4e:	6138      	str	r0, [r7, #16]
						if (evbits & (1 << evgroup_ultrasound_evbit_move)) {
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d005      	beq.n	8000a66 <task_ble+0x10a>
							h_bridge_cw_right();
 8000a5a:	f7ff fc05 	bl	8000268 <h_bridge_cw_right>
							h_bridge_set_right_duty(right);
 8000a5e:	69b8      	ldr	r0, [r7, #24]
 8000a60:	f7ff fbcc 	bl	80001fc <h_bridge_set_right_duty>
					break;
 8000a64:	e019      	b.n	8000a9a <task_ble+0x13e>
							h_bridge_stop();
 8000a66:	f7ff fc55 	bl	8000314 <h_bridge_stop>
							h_bridge_set_right_duty(0);
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f7ff fbc6 	bl	80001fc <h_bridge_set_right_duty>
					break;
 8000a70:	e013      	b.n	8000a9a <task_ble+0x13e>

				case BLE_RECEIVED_ULTRASOUND_CONFIG:

					whichOne = receivedBleData.valueReg2;
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
 8000a74:	84bb      	strh	r3, [r7, #36]	; 0x24

					ULTRASOUND_PROPER_DISTANCE_u16 = ultrasound_select_proper_distance(whichOne);
 8000a76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fd0f 	bl	800049e <ultrasound_select_proper_distance>
 8000a80:	4603      	mov	r3, r0
 8000a82:	461a      	mov	r2, r3
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <task_ble+0x168>)
 8000a86:	801a      	strh	r2, [r3, #0]

					break;
 8000a88:	e007      	b.n	8000a9a <task_ble+0x13e>
				default:
					// unknow -> free
					rt_dequeue(rt_queue_ble, &receivedBleData);
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	4619      	mov	r1, r3
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff febf 	bl	8000814 <rt_dequeue>
					break;
 8000a96:	e000      	b.n	8000a9a <task_ble+0x13e>
				}

			}
 8000a98:	bf00      	nop

			if (receivedBleData.info == ble_transmit) {
 8000a9a:	7b3b      	ldrb	r3, [r7, #12]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	f47f af63 	bne.w	8000968 <task_ble+0xc>

				memcpy(ble_pDataSend, &receivedBleData.command, 1);
 8000aa2:	7b7a      	ldrb	r2, [r7, #13]
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <task_ble+0x16c>)
 8000aa6:	701a      	strb	r2, [r3, #0]
				memcpy(ble_pDataSend + 1, &receivedBleData.valueReg1, 1);
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <task_ble+0x170>)
 8000aaa:	7bba      	ldrb	r2, [r7, #14]
 8000aac:	701a      	strb	r2, [r3, #0]
				memcpy(ble_pDataSend + 2, &receivedBleData.valueReg2, 1);
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <task_ble+0x174>)
 8000ab0:	7bfa      	ldrb	r2, [r7, #15]
 8000ab2:	701a      	strb	r2, [r3, #0]

				HAL_UART_Transmit(&huart3, (uint8_t*) ble_pDataSend,
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	4903      	ldr	r1, [pc, #12]	; (8000ac8 <task_ble+0x16c>)
 8000aba:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <task_ble+0x178>)
 8000abc:	f006 f98a 	bl	8006dd4 <HAL_UART_Transmit>
		status = rt_dequeue(rt_queue_ble, &receivedBleData);
 8000ac0:	e752      	b.n	8000968 <task_ble+0xc>
 8000ac2:	bf00      	nop
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	20003570 	.word	0x20003570
 8000acc:	20003571 	.word	0x20003571
 8000ad0:	20003572 	.word	0x20003572
 8000ad4:	200037d8 	.word	0x200037d8

08000ad8 <timer_ultrasound_sensor_tigger>:
#include "tim.h"

/* ************************************************************************** */
// callback
/* ************************************************************************** */
void timer_ultrasound_sensor_tigger(TimerHandle_t xTimer) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

	// set gpio ultrasound trigger
	HAL_GPIO_WritePin(OUT_ULTRASOUND_TRIG_GPIO_Port, OUT_ULTRASOUND_TRIG_Pin, GPIO_PIN_SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2140      	movs	r1, #64	; 0x40
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <timer_ultrasound_sensor_tigger+0x20>)
 8000ae6:	f002 fd65 	bl	80035b4 <HAL_GPIO_WritePin>

	// set timer to 10 us, and start!
	HAL_TIM_Base_Start_IT(&htim10);
 8000aea:	4804      	ldr	r0, [pc, #16]	; (8000afc <timer_ultrasound_sensor_tigger+0x24>)
 8000aec:	f004 fe84 	bl	80057f8 <HAL_TIM_Base_Start_IT>
	// also... in async is waiting for rising / falling edge (void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin))
	// if rising edge start timer 4 for counting up
	// if falling edge stop timer 4
	// calulcate difference
	// calulcate distance between obstacle and vehicle
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40020800 	.word	0x40020800
 8000afc:	200036a4 	.word	0x200036a4

08000b00 <task_eyes>:

void task_eyes(void *pvParameters) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

	// start auto-reloaded timer for triggering ultrasound sensor
	rt_timer_start(rt_timer_ultrasound_sensor_trigger, 100);
 8000b08:	2164      	movs	r1, #100	; 0x64
 8000b0a:	2002      	movs	r0, #2
 8000b0c:	f7ff fea8 	bl	8000860 <rt_timer_start>

	(void*) pvParameters;

	for (;;) {

		taskYIELD();
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <task_eyes+0x24>)
 8000b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	f3bf 8f4f 	dsb	sy
 8000b1c:	f3bf 8f6f 	isb	sy
 8000b20:	e7f6      	b.n	8000b10 <task_eyes+0x10>
 8000b22:	bf00      	nop
 8000b24:	e000ed04 	.word	0xe000ed04

08000b28 <task_memory>:
//#include "task_memory.h"

#include "FreeRTOS.h"
#include "task.h"
#include "runtime.h"
void task_memory(void *pvParameters) {
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;
//	rt_timer_start(rt_timer_jakis_tam, 300);
	for (;;) {
//		vTaskDelay(pdMS_TO_TICKS(1000));
		taskYIELD();
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <task_memory+0x1c>)
 8000b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	f3bf 8f4f 	dsb	sy
 8000b3c:	f3bf 8f6f 	isb	sy
 8000b40:	e7f6      	b.n	8000b30 <task_memory+0x8>
 8000b42:	bf00      	nop
 8000b44:	e000ed04 	.word	0xe000ed04

08000b48 <HAL_GPIO_EXTI_Callback>:
bool ultrasound_was = false;
//bool ultrasound_done = false;
uint8_t pData[BLE_MAX_SIZE];
extern char temperature_measurement[SIZE_OF_TEMPERATURE_MEASURMENT_ARRAY];
// interrupt pin callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80fb      	strh	r3, [r7, #6]
//	IRQ_ULTRASOUND_ECHO_Pin
	if (GPIO_Pin & IRQ_ULTRASOUND_ECHO_Pin) {
 8000b52:	88fb      	ldrh	r3, [r7, #6]
 8000b54:	f003 0302 	and.w	r3, r3, #2
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d021      	beq.n	8000ba0 <HAL_GPIO_EXTI_Callback+0x58>

		if (HAL_GPIO_ReadPin(IRQ_ULTRASOUND_ECHO_GPIO_Port,
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	481a      	ldr	r0, [pc, #104]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000b60:	f002 fd02 	bl	8003568 <HAL_GPIO_ReadPin>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d006      	beq.n	8000b78 <HAL_GPIO_EXTI_Callback+0x30>
				IRQ_ULTRASOUND_ECHO_Pin)) {
			TIM4->CNT = 0;
 8000b6a:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <HAL_GPIO_EXTI_Callback+0x84>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start(&htim4);
 8000b70:	4817      	ldr	r0, [pc, #92]	; (8000bd0 <HAL_GPIO_EXTI_Callback+0x88>)
 8000b72:	f004 fd75 	bl	8005660 <HAL_TIM_Base_Start>
 8000b76:	e013      	b.n	8000ba0 <HAL_GPIO_EXTI_Callback+0x58>
		} else {
			HAL_TIM_Base_Stop(&htim4);
 8000b78:	4815      	ldr	r0, [pc, #84]	; (8000bd0 <HAL_GPIO_EXTI_Callback+0x88>)
 8000b7a:	f004 fdd7 	bl	800572c <HAL_TIM_Base_Stop>
			uint16_t count = TIM4->CNT;
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <HAL_GPIO_EXTI_Callback+0x84>)
 8000b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b82:	81fb      	strh	r3, [r7, #14]

			/// 	clear 	(if > 30 cm) 	==> 	allowed to drive forward
			/// 	set 	(if < 30 cm) 	==> 	forbidden to drive forward

//			uint16_t dis30 = (uint16_t) ULTRASOUND_PROPER_DISTANCE;
			if (count > ULTRASOUND_PROPER_DISTANCE_u16) {
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000b86:	881b      	ldrh	r3, [r3, #0]
 8000b88:	89fa      	ldrh	r2, [r7, #14]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d904      	bls.n	8000b98 <HAL_GPIO_EXTI_Callback+0x50>
				rt_evbit_set_ISR(rt_evgroup_ultrasound,
 8000b8e:	2101      	movs	r1, #1
 8000b90:	2003      	movs	r0, #3
 8000b92:	f7ff fe03 	bl	800079c <rt_evbit_set_ISR>
 8000b96:	e003      	b.n	8000ba0 <HAL_GPIO_EXTI_Callback+0x58>
						evgroup_ultrasound_evbit_move);
			} else {
				rt_evbit_clear_ISR(rt_evgroup_ultrasound,
 8000b98:	2101      	movs	r1, #1
 8000b9a:	2003      	movs	r0, #3
 8000b9c:	f7ff fdc8 	bl	8000730 <rt_evbit_clear_ISR>
			}
		}
	}

//	BLE INTERRUPT -> SOMETHING IS RECEIVED
	if (GPIO_Pin & IRQ_BLE_Pin) {
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d009      	beq.n	8000bbe <HAL_GPIO_EXTI_Callback+0x76>
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]

//		ble_receive_data(pData);
		pxHigherPriorityTaskWoken = pdTRUE;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	60bb      	str	r3, [r7, #8]
		rt_timer_start_ISR(rt_timer_BLE, &pxHigherPriorityTaskWoken);
 8000bb2:	f107 0308 	add.w	r3, r7, #8
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f7ff fe71 	bl	80008a0 <rt_timer_start_ISR>
//			xTimerStartFromISR(rt_timers[T], pxHigherPriorityTaskWoken);
	}
}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40020400 	.word	0x40020400
 8000bcc:	40000800 	.word	0x40000800
 8000bd0:	20003668 	.word	0x20003668
 8000bd4:	20000000 	.word	0x20000000

08000bd8 <timer_trigger_temperature_measurement>:

/// auto-reload - triggering temperature measurement inside MCU
/// .xTimerPeriodInTicks = pdMS_TO_TICKS(6000) // 6 sec
void timer_trigger_temperature_measurement(TimerHandle_t xTimer) {
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
//	toBeTransmit_ble_pData.valueReg2 = ble_pDataSend[2];

//	rt_enqueue_ISR(rt_queue_ble, &toBeTransmit_ble_pData);

//	HAL_UART_Transmit_DMA(&huart3, (uint8_t*) ble_pDataSend, BLE_MAX_SIZE);
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
	...

08000bec <task_sensors>:
//	toBeTransmit_ble_pData.valueReg1 = ((uint8_t*) &temperature_measurement)[2]; // MSB
//	toBeTransmit_ble_pData.valueReg2 = ((uint8_t*) &temperature_measurement)[3]; // LSB
//	rt_enqueue_ISR(rt_queue_ble, &toBeTransmit_ble_pData);
}

void task_sensors(void *pvParameters) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]

//	uint32_t evgroup = 0;

// TODO: delete this line!
//	magnetometer_init();
	QMC5883L_Initialize(MODE_CONTROL_CONTINUOUS, OUTPUT_DATA_RATE_200HZ,
 8000bf4:	2380      	movs	r3, #128	; 0x80
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	210c      	movs	r1, #12
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f7ff fc15 	bl	800042a <QMC5883L_Initialize>
			FULL_SCALE_2G, OVER_SAMPLE_RATIO_128);
	QMC5883L_InterruptConfig(INTERRUPT_DISABLE);
 8000c00:	2000      	movs	r0, #0
 8000c02:	f7ff fc37 	bl	8000474 <QMC5883L_InterruptConfig>

//Mode Register
//Continuous-Measurement Mode
	QMC5883L_Write_Reg(0x02, 0x00);
 8000c06:	2100      	movs	r1, #0
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f7ff fbbb 	bl	8000384 <QMC5883L_Write_Reg>

///	 start temperature measurement every period of this timer
	rt_timer_start(rt_timer_temperature_measurement, 100);
 8000c0e:	2164      	movs	r1, #100	; 0x64
 8000c10:	2001      	movs	r0, #1
 8000c12:	f7ff fe25 	bl	8000860 <rt_timer_start>
		// na podstawie na danych zareaguj :)

		// jakis tam bit do ustawienia, np skret w lewo - uzupelnic
//			rt_evbit_set(rt_evgroup_state_machine, (1 << 8));
//		}
		int16_t X = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	823b      	strh	r3, [r7, #16]
		int16_t Y = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	81fb      	strh	r3, [r7, #14]
		int16_t Z = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	81bb      	strh	r3, [r7, #12]

		uint8_t status = QMC5883L_Read_Reg(0x09);
 8000c22:	2009      	movs	r0, #9
 8000c24:	f7ff fb94 	bl	8000350 <QMC5883L_Read_Reg>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	75fb      	strb	r3, [r7, #23]
		uint8_t temp1 = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	75bb      	strb	r3, [r7, #22]
		uint8_t temp2 = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	757b      	strb	r3, [r7, #21]

		temp1 = QMC5883L_Read_Reg(0x07);
 8000c34:	2007      	movs	r0, #7
 8000c36:	f7ff fb8b 	bl	8000350 <QMC5883L_Read_Reg>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	75bb      	strb	r3, [r7, #22]
		temp2 = QMC5883L_Read_Reg(0x08);
 8000c3e:	2008      	movs	r0, #8
 8000c40:	f7ff fb86 	bl	8000350 <QMC5883L_Read_Reg>
 8000c44:	4603      	mov	r3, r0
 8000c46:	757b      	strb	r3, [r7, #21]

		// u2 to decimal
		uint16_t temp = ~((temp2 << 8) | temp1) + 1;
 8000c48:	7d7b      	ldrb	r3, [r7, #21]
 8000c4a:	021b      	lsls	r3, r3, #8
 8000c4c:	b21a      	sxth	r2, r3
 8000c4e:	7dbb      	ldrb	r3, [r7, #22]
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	425b      	negs	r3, r3
 8000c5a:	827b      	strh	r3, [r7, #18]
		temp /= 100;
 8000c5c:	8a7b      	ldrh	r3, [r7, #18]
 8000c5e:	4a2e      	ldr	r2, [pc, #184]	; (8000d18 <task_sensors+0x12c>)
 8000c60:	fba2 2303 	umull	r2, r3, r2, r3
 8000c64:	095b      	lsrs	r3, r3, #5
 8000c66:	827b      	strh	r3, [r7, #18]

		temp += 1;
 8000c68:	8a7b      	ldrh	r3, [r7, #18]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	827b      	strh	r3, [r7, #18]

		if (status & (1 << 0)) {
 8000c6e:	7dfb      	ldrb	r3, [r7, #23]
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d040      	beq.n	8000cfa <task_sensors+0x10e>
			QMC5883L_Read_Data(&X, &Y, &Z);
 8000c78:	f107 020c 	add.w	r2, r7, #12
 8000c7c:	f107 010e 	add.w	r1, r7, #14
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fb99 	bl	80003bc <QMC5883L_Read_Data>

//			BLE_TRANSMIT_X
//			BLE_TRANSMIT_Y
//			BLE_TRANSMIT_Z

			xQueueBleData toBeTransmit_ble_pData = { 0 };
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
			toBeTransmit_ble_pData.info = ble_transmit;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	723b      	strb	r3, [r7, #8]
			toBeTransmit_ble_pData.command = BLE_TRANSMIT_X;// 1111 1111 1010 1010
 8000c92:	2305      	movs	r3, #5
 8000c94:	727b      	strb	r3, [r7, #9]

			type_casting.uint16[0] = int16_to_u2(X);
 8000c96:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f8a4 	bl	8000de8 <int16_to_u2>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <task_sensors+0x130>)
 8000ca6:	801a      	strh	r2, [r3, #0]

			toBeTransmit_ble_pData.valueReg1 = type_casting.uint8[1];//((uint8_t*) &X)[0]; // MSB // 1111 1111
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <task_sensors+0x130>)
 8000caa:	785b      	ldrb	r3, [r3, #1]
 8000cac:	72bb      	strb	r3, [r7, #10]
			toBeTransmit_ble_pData.valueReg2 = type_casting.uint8[0];//((uint8_t*) &X)[1]; // LSB 1010 1010
 8000cae:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <task_sensors+0x130>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	72fb      	strb	r3, [r7, #11]
//			rt_enqueue_ISR(rt_queue_ble, &toBeTransmit_ble_pData);

			toBeTransmit_ble_pData.command = BLE_TRANSMIT_Y;
 8000cb4:	2306      	movs	r3, #6
 8000cb6:	727b      	strb	r3, [r7, #9]
			type_casting.uint16[0] = int16_to_u2(Y);
 8000cb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 f893 	bl	8000de8 <int16_to_u2>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <task_sensors+0x130>)
 8000cc8:	801a      	strh	r2, [r3, #0]
			toBeTransmit_ble_pData.valueReg1 = type_casting.uint8[1];
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <task_sensors+0x130>)
 8000ccc:	785b      	ldrb	r3, [r3, #1]
 8000cce:	72bb      	strb	r3, [r7, #10]
			toBeTransmit_ble_pData.valueReg2 = type_casting.uint8[0];
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <task_sensors+0x130>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	72fb      	strb	r3, [r7, #11]
//			type_casting
//			type_casting.uint16[0] = X;

			//TODO: o tutaj skonczylem użyj unii, sprawdz debuggerem czy bd dzialac

			toBeTransmit_ble_pData.command = BLE_TRANSMIT_Z;
 8000cd6:	2307      	movs	r3, #7
 8000cd8:	727b      	strb	r3, [r7, #9]
			type_casting.uint16[0] = int16_to_u2(Z);
 8000cda:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f882 	bl	8000de8 <int16_to_u2>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <task_sensors+0x130>)
 8000cea:	801a      	strh	r2, [r3, #0]
			toBeTransmit_ble_pData.valueReg1 = type_casting.uint8[1];
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <task_sensors+0x130>)
 8000cee:	785b      	ldrb	r3, [r3, #1]
 8000cf0:	72bb      	strb	r3, [r7, #10]
			toBeTransmit_ble_pData.valueReg2 = type_casting.uint8[0];
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <task_sensors+0x130>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	72fb      	strb	r3, [r7, #11]
 8000cf8:	e005      	b.n	8000d06 <task_sensors+0x11a>
//			rt_enqueue(rt_queue_ble, &toBeTransmit_ble_pData);
		} else {
			X = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	823b      	strh	r3, [r7, #16]
			Y = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	81fb      	strh	r3, [r7, #14]
			Z = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	81bb      	strh	r3, [r7, #12]
		}

		taskYIELD();
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <task_sensors+0x134>)
 8000d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	f3bf 8f4f 	dsb	sy
 8000d12:	f3bf 8f6f 	isb	sy
	for (;;) {
 8000d16:	e77e      	b.n	8000c16 <task_sensors+0x2a>
 8000d18:	51eb851f 	.word	0x51eb851f
 8000d1c:	2000357c 	.word	0x2000357c
 8000d20:	e000ed04 	.word	0xe000ed04

08000d24 <task_state_machine>:
#include "runtime.h"
#include "state_machine.h"
#include "h_bridge.h"
#include "bluetooth_le.h"

void task_state_machine(void *pvParameters) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	uint32_t evgroup = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
	bool tasks_disabled = false;
 8000d30:	2300      	movs	r3, #0
 8000d32:	72fb      	strb	r3, [r7, #11]
//	xQueueBleData receivedBleData = { 0 };

	for (;;) {

		evgroup = rt_evbitwait_any(rt_evgroup_state_machine);
 8000d34:	2001      	movs	r0, #1
 8000d36:	f7ff fcc5 	bl	80006c4 <rt_evbitwait_any>
 8000d3a:	60f8      	str	r0, [r7, #12]

		if (evgroup & (1 << evgroup_state_m_do_nothing)) {
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d007      	beq.n	8000d56 <task_state_machine+0x32>

			h_bridge_coast();
 8000d46:	f7ff fac7 	bl	80002d8 <h_bridge_coast>
			h_bridge_set_left_duty(0);
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f7ff fa30 	bl	80001b0 <h_bridge_set_left_duty>
			h_bridge_set_right_duty(0);
 8000d50:	2000      	movs	r0, #0
 8000d52:	f7ff fa53 	bl	80001fc <h_bridge_set_right_duty>
		}
		if (evgroup & (1 << evgroup_state_m_auto_manual)) {
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d0e9      	beq.n	8000d34 <task_state_machine+0x10>
			if (tasks_disabled) {
 8000d60:	7afb      	ldrb	r3, [r7, #11]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d00f      	beq.n	8000d86 <task_state_machine+0x62>
				vTaskResume(rt_tasks[rt_task_eyes]);
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <task_state_machine+0x84>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f007 ffd2 	bl	8008d14 <vTaskResume>
				vTaskResume(rt_tasks[rt_task_memory]);
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <task_state_machine+0x84>)
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f007 ffcd 	bl	8008d14 <vTaskResume>
				vTaskResume(rt_tasks[rt_task_sensors]);
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <task_state_machine+0x84>)
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f007 ffc8 	bl	8008d14 <vTaskResume>
 8000d84:	e7d6      	b.n	8000d34 <task_state_machine+0x10>
			} else {
				vTaskSuspend(rt_tasks[rt_task_eyes]);
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <task_state_machine+0x84>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f007 ff14 	bl	8008bb8 <vTaskSuspend>
				vTaskSuspend(rt_tasks[rt_task_memory]);
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <task_state_machine+0x84>)
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f007 ff0f 	bl	8008bb8 <vTaskSuspend>
				vTaskSuspend(rt_tasks[rt_task_sensors]);
 8000d9a:	4b03      	ldr	r3, [pc, #12]	; (8000da8 <task_state_machine+0x84>)
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f007 ff0a 	bl	8008bb8 <vTaskSuspend>
		evgroup = rt_evbitwait_any(rt_evgroup_state_machine);
 8000da4:	e7c6      	b.n	8000d34 <task_state_machine+0x10>
 8000da6:	bf00      	nop
 8000da8:	20003538 	.word	0x20003538

08000dac <u2_to_decimal>:

#include "utility.h"
#include <math.h>
#include "stdlib.h"

int u2_to_decimal(uint8_t u2) {
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]

	char value = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	73fb      	strb	r3, [r7, #15]

	if (u2 & (1 << 7)) {
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	da0a      	bge.n	8000dd8 <u2_to_decimal+0x2c>

		value = u2;
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	73fb      	strb	r3, [r7, #15]
		value = ~value;
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	73fb      	strb	r3, [r7, #15]
		value += 1;
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	73fb      	strb	r3, [r7, #15]
		return (int) -value;
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	425b      	negs	r3, r3
 8000dd6:	e002      	b.n	8000dde <u2_to_decimal+0x32>

	} else {
		value = u2;
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	73fb      	strb	r3, [r7, #15]
		return (int) value;
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <int16_to_u2>:

uint16_t int16_to_u2(int16_t decimal) {
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	80fb      	strh	r3, [r7, #6]
	uint16_t u2 = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	81fb      	strh	r3, [r7, #14]

	if (decimal >= 0) {
 8000df6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	db02      	blt.n	8000e04 <int16_to_u2+0x1c>
		u2 = (uint16_t) decimal;
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	81fb      	strh	r3, [r7, #14]
 8000e02:	e00b      	b.n	8000e1c <int16_to_u2+0x34>
	} else {
		u2 = (uint16_t) abs(decimal);
 8000e04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	bfb8      	it	lt
 8000e0c:	425b      	neglt	r3, r3
 8000e0e:	81fb      	strh	r3, [r7, #14]
		u2 = (uint16_t) ~u2;
 8000e10:	89fb      	ldrh	r3, [r7, #14]
 8000e12:	43db      	mvns	r3, r3
 8000e14:	81fb      	strh	r3, [r7, #14]
		u2 += 1;
 8000e16:	89fb      	ldrh	r3, [r7, #14]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	81fb      	strh	r3, [r7, #14]
	}

	return u2;
 8000e1c:	89fb      	ldrh	r3, [r7, #14]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000e38:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <MX_ADC_Init+0xa8>)
 8000e3a:	4a26      	ldr	r2, [pc, #152]	; (8000ed4 <MX_ADC_Init+0xac>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e3e:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <MX_ADC_Init+0xa8>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <MX_ADC_Init+0xa8>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e4a:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <MX_ADC_Init+0xa8>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e50:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <MX_ADC_Init+0xa8>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e56:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <MX_ADC_Init+0xa8>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <MX_ADC_Init+0xa8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000e62:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <MX_ADC_Init+0xa8>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000e68:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <MX_ADC_Init+0xa8>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <MX_ADC_Init+0xa8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8000e76:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <MX_ADC_Init+0xa8>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <MX_ADC_Init+0xa8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <MX_ADC_Init+0xa8>)
 8000e86:	2210      	movs	r2, #16
 8000e88:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <MX_ADC_Init+0xa8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_ADC_Init+0xa8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e98:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <MX_ADC_Init+0xa8>)
 8000e9a:	f001 f81d 	bl	8001ed8 <HAL_ADC_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8000ea4:	f000 fb02 	bl	80014ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eac:	2301      	movs	r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_ADC_Init+0xa8>)
 8000eba:	f001 fab1 	bl	8002420 <HAL_ADC_ConfigChannel>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000ec4:	f000 faf2 	bl	80014ac <Error_Handler>
  }

}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20003580 	.word	0x20003580
 8000ed4:	40012400 	.word	0x40012400

08000ed8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	; 0x30
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a2d      	ldr	r2, [pc, #180]	; (8000fac <HAL_ADC_MspInit+0xd4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d154      	bne.n	8000fa4 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000efa:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <HAL_ADC_MspInit+0xd8>)
 8000efc:	6a1b      	ldr	r3, [r3, #32]
 8000efe:	4a2c      	ldr	r2, [pc, #176]	; (8000fb0 <HAL_ADC_MspInit+0xd8>)
 8000f00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f04:	6213      	str	r3, [r2, #32]
 8000f06:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <HAL_ADC_MspInit+0xd8>)
 8000f08:	6a1b      	ldr	r3, [r3, #32]
 8000f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f0e:	61bb      	str	r3, [r7, #24]
 8000f10:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <HAL_ADC_MspInit+0xd8>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	4a26      	ldr	r2, [pc, #152]	; (8000fb0 <HAL_ADC_MspInit+0xd8>)
 8000f18:	f043 0304 	orr.w	r3, r3, #4
 8000f1c:	61d3      	str	r3, [r2, #28]
 8000f1e:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <HAL_ADC_MspInit+0xd8>)
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	f003 0304 	and.w	r3, r3, #4
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <HAL_ADC_MspInit+0xd8>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	4a20      	ldr	r2, [pc, #128]	; (8000fb0 <HAL_ADC_MspInit+0xd8>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	61d3      	str	r3, [r2, #28]
 8000f36:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <HAL_ADC_MspInit+0xd8>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f42:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <HAL_ADC_MspInit+0xd8>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	4a1a      	ldr	r2, [pc, #104]	; (8000fb0 <HAL_ADC_MspInit+0xd8>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	61d3      	str	r3, [r2, #28]
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <HAL_ADC_MspInit+0xd8>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA7     ------> ADC_IN7
    PB15     ------> ADC_IN21 
    */
    GPIO_InitStruct.Pin = ADC_BATTERY_VOLTAGE_Pin;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_BATTERY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4811      	ldr	r0, [pc, #68]	; (8000fb4 <HAL_ADC_MspInit+0xdc>)
 8000f6e:	f002 f889 	bl	8003084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_PHOTO_BACK_Pin|ADC_OPTO_LEFT_Pin|ADC_PHOTO_FRONT_Pin;
 8000f72:	2386      	movs	r3, #134	; 0x86
 8000f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f76:	2303      	movs	r3, #3
 8000f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 031c 	add.w	r3, r7, #28
 8000f82:	4619      	mov	r1, r3
 8000f84:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <HAL_ADC_MspInit+0xe0>)
 8000f86:	f002 f87d 	bl	8003084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_OPTO_RIGHT_Pin;
 8000f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f90:	2303      	movs	r3, #3
 8000f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_OPTO_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4807      	ldr	r0, [pc, #28]	; (8000fbc <HAL_ADC_MspInit+0xe4>)
 8000fa0:	f002 f870 	bl	8003084 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	3730      	adds	r7, #48	; 0x30
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40012400 	.word	0x40012400
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	40020000 	.word	0x40020000
 8000fbc:	40020400 	.word	0x40020400

08000fc0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <MX_DMA_Init+0x48>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	4a0f      	ldr	r2, [pc, #60]	; (8001008 <MX_DMA_Init+0x48>)
 8000fcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fd0:	61d3      	str	r3, [r2, #28]
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <MX_DMA_Init+0x48>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 6, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2106      	movs	r1, #6
 8000fe2:	200c      	movs	r0, #12
 8000fe4:	f001 fd80 	bl	8002ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000fe8:	200c      	movs	r0, #12
 8000fea:	f001 fda9 	bl	8002b40 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2105      	movs	r1, #5
 8000ff2:	200d      	movs	r0, #13
 8000ff4:	f001 fd78 	bl	8002ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000ff8:	200d      	movs	r0, #13
 8000ffa:	f001 fda1 	bl	8002b40 <HAL_NVIC_EnableIRQ>

}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800

0800100c <vApplicationIdleHook>:
void vApplicationMallocFailedHook(void);
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001054:	4a05      	ldr	r2, [pc, #20]	; (800106c <MX_FREERTOS_Init+0x1c>)
 8001056:	2100      	movs	r1, #0
 8001058:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_FREERTOS_Init+0x20>)
 800105a:	f006 fb15 	bl	8007688 <osThreadNew>
 800105e:	4602      	mov	r2, r0
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <MX_FREERTOS_Init+0x24>)
 8001062:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  rt_init();
 8001064:	f7ff fa84 	bl	8000570 <rt_init>
  /* USER CODE END RTOS_THREADS */

}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	0800ac34 	.word	0x0800ac34
 8001070:	08001079 	.word	0x08001079
 8001074:	200035d4 	.word	0x200035d4

08001078 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001080:	2001      	movs	r0, #1
 8001082:	f006 fbab 	bl	80077dc <osDelay>
 8001086:	e7fb      	b.n	8001080 <StartDefaultTask+0x8>

08001088 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109e:	4b78      	ldr	r3, [pc, #480]	; (8001280 <MX_GPIO_Init+0x1f8>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	4a77      	ldr	r2, [pc, #476]	; (8001280 <MX_GPIO_Init+0x1f8>)
 80010a4:	f043 0304 	orr.w	r3, r3, #4
 80010a8:	61d3      	str	r3, [r2, #28]
 80010aa:	4b75      	ldr	r3, [pc, #468]	; (8001280 <MX_GPIO_Init+0x1f8>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b6:	4b72      	ldr	r3, [pc, #456]	; (8001280 <MX_GPIO_Init+0x1f8>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	4a71      	ldr	r2, [pc, #452]	; (8001280 <MX_GPIO_Init+0x1f8>)
 80010bc:	f043 0320 	orr.w	r3, r3, #32
 80010c0:	61d3      	str	r3, [r2, #28]
 80010c2:	4b6f      	ldr	r3, [pc, #444]	; (8001280 <MX_GPIO_Init+0x1f8>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	f003 0320 	and.w	r3, r3, #32
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	4b6c      	ldr	r3, [pc, #432]	; (8001280 <MX_GPIO_Init+0x1f8>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	4a6b      	ldr	r2, [pc, #428]	; (8001280 <MX_GPIO_Init+0x1f8>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	61d3      	str	r3, [r2, #28]
 80010da:	4b69      	ldr	r3, [pc, #420]	; (8001280 <MX_GPIO_Init+0x1f8>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e6:	4b66      	ldr	r3, [pc, #408]	; (8001280 <MX_GPIO_Init+0x1f8>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	4a65      	ldr	r2, [pc, #404]	; (8001280 <MX_GPIO_Init+0x1f8>)
 80010ec:	f043 0302 	orr.w	r3, r3, #2
 80010f0:	61d3      	str	r3, [r2, #28]
 80010f2:	4b63      	ldr	r3, [pc, #396]	; (8001280 <MX_GPIO_Init+0x1f8>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010fe:	4b60      	ldr	r3, [pc, #384]	; (8001280 <MX_GPIO_Init+0x1f8>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	4a5f      	ldr	r2, [pc, #380]	; (8001280 <MX_GPIO_Init+0x1f8>)
 8001104:	f043 0308 	orr.w	r3, r3, #8
 8001108:	61d3      	str	r3, [r2, #28]
 800110a:	4b5d      	ldr	r3, [pc, #372]	; (8001280 <MX_GPIO_Init+0x1f8>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_INa_ENGINE_LEFT_Pin|OUT_INb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_TEST_Pin 
 8001116:	2200      	movs	r2, #0
 8001118:	f640 616e 	movw	r1, #3694	; 0xe6e
 800111c:	4859      	ldr	r0, [pc, #356]	; (8001284 <MX_GPIO_Init+0x1fc>)
 800111e:	f002 fa49 	bl	80035b4 <HAL_GPIO_WritePin>
                          |OUT_ULTRASOUND_TRIG_Pin|OUT_INb_ENGINE_RIGHT_Pin|OUT_LED1_Pin|OUT_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 8001122:	2200      	movs	r2, #0
 8001124:	f248 7108 	movw	r1, #34568	; 0x8708
 8001128:	4857      	ldr	r0, [pc, #348]	; (8001288 <MX_GPIO_Init+0x200>)
 800112a:	f002 fa43 	bl	80035b4 <HAL_GPIO_WritePin>
                          |OUT_LED0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_BLE_EN_GPIO_Port, OUT_BLE_EN_Pin, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	2110      	movs	r1, #16
 8001132:	4854      	ldr	r0, [pc, #336]	; (8001284 <MX_GPIO_Init+0x1fc>)
 8001134:	f002 fa3e 	bl	80035b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12;
 8001138:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800113c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113e:	2303      	movs	r3, #3
 8001140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	484d      	ldr	r0, [pc, #308]	; (8001284 <MX_GPIO_Init+0x1fc>)
 800114e:	f001 ff99 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = OUT_INa_ENGINE_LEFT_Pin|OUT_INb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_EN_Pin 
 8001152:	f640 637e 	movw	r3, #3710	; 0xe7e
 8001156:	617b      	str	r3, [r7, #20]
                          |OUT_BLE_TEST_Pin|OUT_ULTRASOUND_TRIG_Pin|OUT_INb_ENGINE_RIGHT_Pin|OUT_LED1_Pin 
                          |OUT_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4619      	mov	r1, r3
 800116a:	4846      	ldr	r0, [pc, #280]	; (8001284 <MX_GPIO_Init+0x1fc>)
 800116c:	f001 ff8a 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 8001170:	f248 7308 	movw	r3, #34568	; 0x8708
 8001174:	617b      	str	r3, [r7, #20]
                          |OUT_LED0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	483f      	ldr	r0, [pc, #252]	; (8001288 <MX_GPIO_Init+0x200>)
 800118a:	f001 ff7b 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 800118e:	f241 0370 	movw	r3, #4208	; 0x1070
 8001192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001194:	2303      	movs	r3, #3
 8001196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	4839      	ldr	r0, [pc, #228]	; (8001288 <MX_GPIO_Init+0x200>)
 80011a4:	f001 ff6e 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_BLE_Pin;
 80011a8:	2301      	movs	r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ac:	4b37      	ldr	r3, [pc, #220]	; (800128c <MX_GPIO_Init+0x204>)
 80011ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_BLE_GPIO_Port, &GPIO_InitStruct);
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4619      	mov	r1, r3
 80011ba:	4835      	ldr	r0, [pc, #212]	; (8001290 <MX_GPIO_Init+0x208>)
 80011bc:	f001 ff62 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_ULTRASOUND_ECHO_Pin;
 80011c0:	2302      	movs	r3, #2
 80011c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80011c4:	4b33      	ldr	r3, [pc, #204]	; (8001294 <MX_GPIO_Init+0x20c>)
 80011c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_ULTRASOUND_ECHO_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4619      	mov	r1, r3
 80011d2:	482f      	ldr	r0, [pc, #188]	; (8001290 <MX_GPIO_Init+0x208>)
 80011d4:	f001 ff56 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB3 PB4 
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 80011d8:	f242 333c 	movw	r3, #9020	; 0x233c
 80011dc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011de:	2303      	movs	r3, #3
 80011e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4619      	mov	r1, r3
 80011ec:	4828      	ldr	r0, [pc, #160]	; (8001290 <MX_GPIO_Init+0x208>)
 80011ee:	f001 ff49 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_LEFT_Pin;
 80011f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_LEFT_GPIO_Port, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	4822      	ldr	r0, [pc, #136]	; (8001290 <MX_GPIO_Init+0x208>)
 8001208:	f001 ff3c 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_HALL_FRONT_Pin;
 800120c:	2380      	movs	r3, #128	; 0x80
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN_HALL_FRONT_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	4819      	ldr	r0, [pc, #100]	; (8001284 <MX_GPIO_Init+0x1fc>)
 8001220:	f001 ff30 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_RIGHT_Pin;
 8001224:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122a:	2300      	movs	r3, #0
 800122c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	4813      	ldr	r0, [pc, #76]	; (8001288 <MX_GPIO_Init+0x200>)
 800123a:	f001 ff23 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800123e:	2304      	movs	r3, #4
 8001240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001242:	2303      	movs	r3, #3
 8001244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	4811      	ldr	r0, [pc, #68]	; (8001298 <MX_GPIO_Init+0x210>)
 8001252:	f001 ff17 	bl	8003084 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2105      	movs	r1, #5
 800125a:	2006      	movs	r0, #6
 800125c:	f001 fc44 	bl	8002ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001260:	2006      	movs	r0, #6
 8001262:	f001 fc6d 	bl	8002b40 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2105      	movs	r1, #5
 800126a:	2007      	movs	r0, #7
 800126c:	f001 fc3c 	bl	8002ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001270:	2007      	movs	r0, #7
 8001272:	f001 fc65 	bl	8002b40 <HAL_NVIC_EnableIRQ>

}
 8001276:	bf00      	nop
 8001278:	3728      	adds	r7, #40	; 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800
 8001284:	40020800 	.word	0x40020800
 8001288:	40020000 	.word	0x40020000
 800128c:	10110000 	.word	0x10110000
 8001290:	40020400 	.word	0x40020400
 8001294:	10310000 	.word	0x10310000
 8001298:	40020c00 	.word	0x40020c00

0800129c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <MX_I2C1_Init+0x50>)
 80012a2:	4a13      	ldr	r2, [pc, #76]	; (80012f0 <MX_I2C1_Init+0x54>)
 80012a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_I2C1_Init+0x50>)
 80012a8:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <MX_I2C1_Init+0x58>)
 80012aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_I2C1_Init+0x50>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MX_I2C1_Init+0x50>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_I2C1_Init+0x50>)
 80012ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <MX_I2C1_Init+0x50>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_I2C1_Init+0x50>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MX_I2C1_Init+0x50>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_I2C1_Init+0x50>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <MX_I2C1_Init+0x50>)
 80012da:	f002 f9b5 	bl	8003648 <HAL_I2C_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012e4:	f000 f8e2 	bl	80014ac <Error_Handler>
  }

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200035d8 	.word	0x200035d8
 80012f0:	40005400 	.word	0x40005400
 80012f4:	000186a0 	.word	0x000186a0

080012f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a17      	ldr	r2, [pc, #92]	; (8001374 <HAL_I2C_MspInit+0x7c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d127      	bne.n	800136a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	4b17      	ldr	r3, [pc, #92]	; (8001378 <HAL_I2C_MspInit+0x80>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	4a16      	ldr	r2, [pc, #88]	; (8001378 <HAL_I2C_MspInit+0x80>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	61d3      	str	r3, [r2, #28]
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <HAL_I2C_MspInit+0x80>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001332:	23c0      	movs	r3, #192	; 0xc0
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001336:	2312      	movs	r3, #18
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800133a:	2301      	movs	r3, #1
 800133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001342:	2304      	movs	r3, #4
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	480b      	ldr	r0, [pc, #44]	; (800137c <HAL_I2C_MspInit+0x84>)
 800134e:	f001 fe99 	bl	8003084 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_I2C_MspInit+0x80>)
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	4a08      	ldr	r2, [pc, #32]	; (8001378 <HAL_I2C_MspInit+0x80>)
 8001358:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800135c:	6253      	str	r3, [r2, #36]	; 0x24
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_I2C_MspInit+0x80>)
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001362:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800136a:	bf00      	nop
 800136c:	3728      	adds	r7, #40	; 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40005400 	.word	0x40005400
 8001378:	40023800 	.word	0x40023800
 800137c:	40020400 	.word	0x40020400

08001380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001384:	f000 fd73 	bl	8001e6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001388:	f000 f820 	bl	80013cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800138c:	f7ff fe7c 	bl	8001088 <MX_GPIO_Init>
  MX_DMA_Init();
 8001390:	f7ff fe16 	bl	8000fc0 <MX_DMA_Init>
  MX_ADC_Init();
 8001394:	f7ff fd48 	bl	8000e28 <MX_ADC_Init>
  MX_I2C1_Init();
 8001398:	f7ff ff80 	bl	800129c <MX_I2C1_Init>
  MX_TIM2_Init();
 800139c:	f000 f9a2 	bl	80016e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80013a0:	f000 fa14 	bl	80017cc <MX_TIM3_Init>
  MX_TIM9_Init();
 80013a4:	f000 fad4 	bl	8001950 <MX_TIM9_Init>
  MX_USART3_UART_Init();
 80013a8:	f000 fc78 	bl	8001c9c <MX_USART3_UART_Init>
  MX_TIM4_Init();
 80013ac:	f000 fa82 	bl	80018b4 <MX_TIM4_Init>
  MX_TIM10_Init();
 80013b0:	f000 fb42 	bl	8001a38 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
	device_init();
 80013b4:	f7ff f8c7 	bl	8000546 <device_init>
	h_bridge_init();
 80013b8:	f7fe fee2 	bl	8000180 <h_bridge_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80013bc:	f006 f8fe 	bl	80075bc <osKernelInitialize>
  MX_FREERTOS_Init(); 
 80013c0:	f7ff fe46 	bl	8001050 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80013c4:	f006 f92c 	bl	8007620 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80013c8:	e7fe      	b.n	80013c8 <main+0x48>
	...

080013cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b092      	sub	sp, #72	; 0x48
 80013d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	2234      	movs	r2, #52	; 0x34
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f009 fa59 	bl	800a892 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e0:	463b      	mov	r3, r7
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <SystemClock_Config+0x9c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80013f6:	4a1c      	ldr	r2, [pc, #112]	; (8001468 <SystemClock_Config+0x9c>)
 80013f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013fc:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80013fe:	2303      	movs	r3, #3
 8001400:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001402:	2301      	movs	r3, #1
 8001404:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001406:	2301      	movs	r3, #1
 8001408:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800140a:	2310      	movs	r3, #16
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140e:	2302      	movs	r3, #2
 8001410:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001412:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001416:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001418:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800141c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 800141e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001422:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4618      	mov	r0, r3
 800142a:	f003 f909 	bl	8004640 <HAL_RCC_OscConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001434:	f000 f83a 	bl	80014ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001438:	230f      	movs	r3, #15
 800143a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800143c:	2303      	movs	r3, #3
 800143e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800144c:	463b      	mov	r3, r7
 800144e:	2101      	movs	r1, #1
 8001450:	4618      	mov	r0, r3
 8001452:	f003 fd73 	bl	8004f3c <HAL_RCC_ClockConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800145c:	f000 f826 	bl	80014ac <Error_Handler>
  }
}
 8001460:	bf00      	nop
 8001462:	3748      	adds	r7, #72	; 0x48
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40007000 	.word	0x40007000

0800146c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d101      	bne.n	8001482 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800147e:	f000 fd0f 	bl	8001ea0 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */

  // also the code for others timers if overflow :)

  // when tim10
  if(htim->Instance == TIM10) {
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d104      	bne.n	8001496 <HAL_TIM_PeriodElapsedCallback+0x2a>
	  // clear pin ultrasound trigger
	  HAL_GPIO_WritePin(OUT_ULTRASOUND_TRIG_GPIO_Port, OUT_ULTRASOUND_TRIG_Pin, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	2140      	movs	r1, #64	; 0x40
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001492:	f002 f88f 	bl	80035b4 <HAL_GPIO_WritePin>
	  // and this is it
  }

  /* USER CODE END Callback 1 */
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40000c00 	.word	0x40000c00
 80014a4:	40010c00 	.word	0x40010c00
 80014a8:	40020800 	.word	0x40020800

080014ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <HAL_MspInit+0x64>)
 80014d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d6:	4a16      	ldr	r2, [pc, #88]	; (8001530 <HAL_MspInit+0x64>)
 80014d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80014dc:	6253      	str	r3, [r2, #36]	; 0x24
 80014de:	4b14      	ldr	r3, [pc, #80]	; (8001530 <HAL_MspInit+0x64>)
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <HAL_MspInit+0x64>)
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	4a10      	ldr	r2, [pc, #64]	; (8001530 <HAL_MspInit+0x64>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6213      	str	r3, [r2, #32]
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <HAL_MspInit+0x64>)
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <HAL_MspInit+0x64>)
 8001504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <HAL_MspInit+0x64>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150c:	6253      	str	r3, [r2, #36]	; 0x24
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <HAL_MspInit+0x64>)
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	210f      	movs	r1, #15
 800151e:	f06f 0001 	mvn.w	r0, #1
 8001522:	f001 fae1 	bl	8002ae8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800

08001534 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08c      	sub	sp, #48	; 0x30
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8001544:	2200      	movs	r2, #0
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	202e      	movs	r0, #46	; 0x2e
 800154a:	f001 facd 	bl	8002ae8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 800154e:	202e      	movs	r0, #46	; 0x2e
 8001550:	f001 faf6 	bl	8002b40 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001554:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <HAL_InitTick+0x9c>)
 8001556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001558:	4a1d      	ldr	r2, [pc, #116]	; (80015d0 <HAL_InitTick+0x9c>)
 800155a:	f043 0308 	orr.w	r3, r3, #8
 800155e:	6253      	str	r3, [r2, #36]	; 0x24
 8001560:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <HAL_InitTick+0x9c>)
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800156c:	f107 0210 	add.w	r2, r7, #16
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4611      	mov	r1, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f003 ff28 	bl	80053cc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800157c:	f003 fefe 	bl	800537c <HAL_RCC_GetPCLK1Freq>
 8001580:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001584:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <HAL_InitTick+0xa0>)
 8001586:	fba2 2303 	umull	r2, r3, r2, r3
 800158a:	0c9b      	lsrs	r3, r3, #18
 800158c:	3b01      	subs	r3, #1
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <HAL_InitTick+0xa4>)
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <HAL_InitTick+0xa8>)
 8001594:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <HAL_InitTick+0xa4>)
 8001598:	f240 32e7 	movw	r2, #999	; 0x3e7
 800159c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800159e:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <HAL_InitTick+0xa4>)
 80015a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a2:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <HAL_InitTick+0xa4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_InitTick+0xa4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80015b0:	4809      	ldr	r0, [pc, #36]	; (80015d8 <HAL_InitTick+0xa4>)
 80015b2:	f003 ffad 	bl	8005510 <HAL_TIM_Base_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d104      	bne.n	80015c6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80015bc:	4806      	ldr	r0, [pc, #24]	; (80015d8 <HAL_InitTick+0xa4>)
 80015be:	f004 f91b 	bl	80057f8 <HAL_TIM_Base_Start_IT>
 80015c2:	4603      	mov	r3, r0
 80015c4:	e000      	b.n	80015c8 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3730      	adds	r7, #48	; 0x30
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40023800 	.word	0x40023800
 80015d4:	431bde83 	.word	0x431bde83
 80015d8:	2000362c 	.word	0x2000362c
 80015dc:	40000c00 	.word	0x40000c00

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <HardFault_Handler+0x4>

080015f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <MemManage_Handler+0x4>

080015f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <BusFault_Handler+0x4>

080015fe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <UsageFault_Handler+0x4>

08001604 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001614:	2001      	movs	r0, #1
 8001616:	f001 ffff 	bl	8003618 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}

0800161e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001622:	2002      	movs	r0, #2
 8001624:	f001 fff8 	bl	8003618 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}

0800162c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <DMA1_Channel2_IRQHandler+0x10>)
 8001632:	f001 fc49 	bl	8002ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20003818 	.word	0x20003818

08001640 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <DMA1_Channel3_IRQHandler+0x10>)
 8001646:	f001 fc3f 	bl	8002ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20003794 	.word	0x20003794

08001654 <TIM10_IRQHandler>:

/**
  * @brief This function handles TIM10 global interrupt.
  */
void TIM10_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM10_IRQn 0 */

  /* USER CODE END TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <TIM10_IRQHandler+0x10>)
 800165a:	f004 fa79 	bl	8005b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM10_IRQn 1 */

  /* USER CODE END TIM10_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200036a4 	.word	0x200036a4

08001668 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <TIM5_IRQHandler+0x10>)
 800166e:	f004 fa6f 	bl	8005b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	2000362c 	.word	0x2000362c

0800167c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001680:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <SystemInit+0x5c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <SystemInit+0x5c>)
 8001686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168a:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <SystemInit+0x5c>)
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	4911      	ldr	r1, [pc, #68]	; (80016d8 <SystemInit+0x5c>)
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <SystemInit+0x60>)
 8001694:	4013      	ands	r3, r2
 8001696:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <SystemInit+0x5c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <SystemInit+0x5c>)
 800169e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80016a2:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80016a6:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <SystemInit+0x5c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <SystemInit+0x5c>)
 80016ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b2:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <SystemInit+0x5c>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <SystemInit+0x5c>)
 80016ba:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80016be:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <SystemInit+0x5c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <SystemInit+0x64>)
 80016c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016cc:	609a      	str	r2, [r3, #8]
#endif
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800
 80016dc:	88ffc00c 	.word	0x88ffc00c
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	; 0x28
 80016e8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ea:	f107 0318 	add.w	r3, r7, #24
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001702:	463b      	mov	r3, r7
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 800170e:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <MX_TIM2_Init+0xe4>)
 8001710:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001714:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001716:	4b2c      	ldr	r3, [pc, #176]	; (80017c8 <MX_TIM2_Init+0xe4>)
 8001718:	2200      	movs	r2, #0
 800171a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171c:	4b2a      	ldr	r3, [pc, #168]	; (80017c8 <MX_TIM2_Init+0xe4>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3199;
 8001722:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <MX_TIM2_Init+0xe4>)
 8001724:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001728:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172a:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <MX_TIM2_Init+0xe4>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001730:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <MX_TIM2_Init+0xe4>)
 8001732:	2280      	movs	r2, #128	; 0x80
 8001734:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001736:	4824      	ldr	r0, [pc, #144]	; (80017c8 <MX_TIM2_Init+0xe4>)
 8001738:	f003 feea 	bl	8005510 <HAL_TIM_Base_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001742:	f7ff feb3 	bl	80014ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800174a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800174c:	f107 0318 	add.w	r3, r7, #24
 8001750:	4619      	mov	r1, r3
 8001752:	481d      	ldr	r0, [pc, #116]	; (80017c8 <MX_TIM2_Init+0xe4>)
 8001754:	f004 fc68 	bl	8006028 <HAL_TIM_ConfigClockSource>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800175e:	f7ff fea5 	bl	80014ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001762:	4819      	ldr	r0, [pc, #100]	; (80017c8 <MX_TIM2_Init+0xe4>)
 8001764:	f004 f8ae 	bl	80058c4 <HAL_TIM_PWM_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800176e:	f7ff fe9d 	bl	80014ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800177a:	f107 0310 	add.w	r3, r7, #16
 800177e:	4619      	mov	r1, r3
 8001780:	4811      	ldr	r0, [pc, #68]	; (80017c8 <MX_TIM2_Init+0xe4>)
 8001782:	f005 f9c9 	bl	8006b18 <HAL_TIMEx_MasterConfigSynchronization>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800178c:	f7ff fe8e 	bl	80014ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001790:	2360      	movs	r3, #96	; 0x60
 8001792:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1599;
 8001794:	f240 633f 	movw	r3, #1599	; 0x63f
 8001798:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800179e:	2304      	movs	r3, #4
 80017a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017a2:	463b      	mov	r3, r7
 80017a4:	2200      	movs	r2, #0
 80017a6:	4619      	mov	r1, r3
 80017a8:	4807      	ldr	r0, [pc, #28]	; (80017c8 <MX_TIM2_Init+0xe4>)
 80017aa:	f004 faad 	bl	8005d08 <HAL_TIM_PWM_ConfigChannel>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80017b4:	f7ff fe7a 	bl	80014ac <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80017b8:	4803      	ldr	r0, [pc, #12]	; (80017c8 <MX_TIM2_Init+0xe4>)
 80017ba:	f000 f9eb 	bl	8001b94 <HAL_TIM_MspPostInit>

}
 80017be:	bf00      	nop
 80017c0:	3728      	adds	r7, #40	; 0x28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20003758 	.word	0x20003758

080017cc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	; 0x28
 80017d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d2:	f107 0318 	add.w	r3, r7, #24
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e0:	f107 0310 	add.w	r3, r7, #16
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ea:	463b      	mov	r3, r7
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 80017f6:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <MX_TIM3_Init+0xe0>)
 80017f8:	4a2d      	ldr	r2, [pc, #180]	; (80018b0 <MX_TIM3_Init+0xe4>)
 80017fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017fc:	4b2b      	ldr	r3, [pc, #172]	; (80018ac <MX_TIM3_Init+0xe0>)
 80017fe:	2200      	movs	r2, #0
 8001800:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001802:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <MX_TIM3_Init+0xe0>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3200-1;
 8001808:	4b28      	ldr	r3, [pc, #160]	; (80018ac <MX_TIM3_Init+0xe0>)
 800180a:	f640 427f 	movw	r2, #3199	; 0xc7f
 800180e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001810:	4b26      	ldr	r3, [pc, #152]	; (80018ac <MX_TIM3_Init+0xe0>)
 8001812:	2200      	movs	r2, #0
 8001814:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001816:	4b25      	ldr	r3, [pc, #148]	; (80018ac <MX_TIM3_Init+0xe0>)
 8001818:	2280      	movs	r2, #128	; 0x80
 800181a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800181c:	4823      	ldr	r0, [pc, #140]	; (80018ac <MX_TIM3_Init+0xe0>)
 800181e:	f003 fe77 	bl	8005510 <HAL_TIM_Base_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001828:	f7ff fe40 	bl	80014ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800182c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001830:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001832:	f107 0318 	add.w	r3, r7, #24
 8001836:	4619      	mov	r1, r3
 8001838:	481c      	ldr	r0, [pc, #112]	; (80018ac <MX_TIM3_Init+0xe0>)
 800183a:	f004 fbf5 	bl	8006028 <HAL_TIM_ConfigClockSource>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001844:	f7ff fe32 	bl	80014ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001848:	4818      	ldr	r0, [pc, #96]	; (80018ac <MX_TIM3_Init+0xe0>)
 800184a:	f004 f83b 	bl	80058c4 <HAL_TIM_PWM_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001854:	f7ff fe2a 	bl	80014ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001858:	2300      	movs	r3, #0
 800185a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001860:	f107 0310 	add.w	r3, r7, #16
 8001864:	4619      	mov	r1, r3
 8001866:	4811      	ldr	r0, [pc, #68]	; (80018ac <MX_TIM3_Init+0xe0>)
 8001868:	f005 f956 	bl	8006b18 <HAL_TIMEx_MasterConfigSynchronization>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001872:	f7ff fe1b 	bl	80014ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001876:	2360      	movs	r3, #96	; 0x60
 8001878:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 800187a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800187e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001880:	2300      	movs	r3, #0
 8001882:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001884:	2304      	movs	r3, #4
 8001886:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001888:	463b      	mov	r3, r7
 800188a:	2208      	movs	r2, #8
 800188c:	4619      	mov	r1, r3
 800188e:	4807      	ldr	r0, [pc, #28]	; (80018ac <MX_TIM3_Init+0xe0>)
 8001890:	f004 fa3a 	bl	8005d08 <HAL_TIM_PWM_ConfigChannel>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 800189a:	f7ff fe07 	bl	80014ac <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800189e:	4803      	ldr	r0, [pc, #12]	; (80018ac <MX_TIM3_Init+0xe0>)
 80018a0:	f000 f978 	bl	8001b94 <HAL_TIM_MspPostInit>

}
 80018a4:	bf00      	nop
 80018a6:	3728      	adds	r7, #40	; 0x28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	200036e0 	.word	0x200036e0
 80018b0:	40000400 	.word	0x40000400

080018b4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ba:	f107 0308 	add.w	r3, r7, #8
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c8:	463b      	mov	r3, r7
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 80018d0:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <MX_TIM4_Init+0x94>)
 80018d2:	4a1e      	ldr	r2, [pc, #120]	; (800194c <MX_TIM4_Init+0x98>)
 80018d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 80018d6:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <MX_TIM4_Init+0x94>)
 80018d8:	2203      	movs	r2, #3
 80018da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018dc:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <MX_TIM4_Init+0x94>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 39999;
 80018e2:	4b19      	ldr	r3, [pc, #100]	; (8001948 <MX_TIM4_Init+0x94>)
 80018e4:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80018e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ea:	4b17      	ldr	r3, [pc, #92]	; (8001948 <MX_TIM4_Init+0x94>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f0:	4b15      	ldr	r3, [pc, #84]	; (8001948 <MX_TIM4_Init+0x94>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80018f6:	4814      	ldr	r0, [pc, #80]	; (8001948 <MX_TIM4_Init+0x94>)
 80018f8:	f003 fe0a 	bl	8005510 <HAL_TIM_Base_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001902:	f7ff fdd3 	bl	80014ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800190c:	f107 0308 	add.w	r3, r7, #8
 8001910:	4619      	mov	r1, r3
 8001912:	480d      	ldr	r0, [pc, #52]	; (8001948 <MX_TIM4_Init+0x94>)
 8001914:	f004 fb88 	bl	8006028 <HAL_TIM_ConfigClockSource>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800191e:	f7ff fdc5 	bl	80014ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800192a:	463b      	mov	r3, r7
 800192c:	4619      	mov	r1, r3
 800192e:	4806      	ldr	r0, [pc, #24]	; (8001948 <MX_TIM4_Init+0x94>)
 8001930:	f005 f8f2 	bl	8006b18 <HAL_TIMEx_MasterConfigSynchronization>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800193a:	f7ff fdb7 	bl	80014ac <Error_Handler>
  }

}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20003668 	.word	0x20003668
 800194c:	40000800 	.word	0x40000800

08001950 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	; 0x28
 8001954:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001956:	f107 0318 	add.w	r3, r7, #24
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800196e:	463b      	mov	r3, r7
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 800197a:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <MX_TIM9_Init+0xe0>)
 800197c:	4a2d      	ldr	r2, [pc, #180]	; (8001a34 <MX_TIM9_Init+0xe4>)
 800197e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001980:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <MX_TIM9_Init+0xe0>)
 8001982:	2200      	movs	r2, #0
 8001984:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001986:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <MX_TIM9_Init+0xe0>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 3200;
 800198c:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <MX_TIM9_Init+0xe0>)
 800198e:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001992:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001994:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <MX_TIM9_Init+0xe0>)
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800199a:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <MX_TIM9_Init+0xe0>)
 800199c:	2280      	movs	r2, #128	; 0x80
 800199e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80019a0:	4823      	ldr	r0, [pc, #140]	; (8001a30 <MX_TIM9_Init+0xe0>)
 80019a2:	f003 fdb5 	bl	8005510 <HAL_TIM_Base_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 80019ac:	f7ff fd7e 	bl	80014ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80019b6:	f107 0318 	add.w	r3, r7, #24
 80019ba:	4619      	mov	r1, r3
 80019bc:	481c      	ldr	r0, [pc, #112]	; (8001a30 <MX_TIM9_Init+0xe0>)
 80019be:	f004 fb33 	bl	8006028 <HAL_TIM_ConfigClockSource>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM9_Init+0x7c>
  {
    Error_Handler();
 80019c8:	f7ff fd70 	bl	80014ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80019cc:	4818      	ldr	r0, [pc, #96]	; (8001a30 <MX_TIM9_Init+0xe0>)
 80019ce:	f003 ff79 	bl	80058c4 <HAL_TIM_PWM_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM9_Init+0x8c>
  {
    Error_Handler();
 80019d8:	f7ff fd68 	bl	80014ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019dc:	2300      	movs	r3, #0
 80019de:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 80019e4:	f107 0310 	add.w	r3, r7, #16
 80019e8:	4619      	mov	r1, r3
 80019ea:	4811      	ldr	r0, [pc, #68]	; (8001a30 <MX_TIM9_Init+0xe0>)
 80019ec:	f005 f894 	bl	8006b18 <HAL_TIMEx_MasterConfigSynchronization>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM9_Init+0xaa>
  {
    Error_Handler();
 80019f6:	f7ff fd59 	bl	80014ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019fa:	2360      	movs	r3, #96	; 0x60
 80019fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 80019fe:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001a02:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	2204      	movs	r2, #4
 8001a10:	4619      	mov	r1, r3
 8001a12:	4807      	ldr	r0, [pc, #28]	; (8001a30 <MX_TIM9_Init+0xe0>)
 8001a14:	f004 f978 	bl	8005d08 <HAL_TIM_PWM_ConfigChannel>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM9_Init+0xd2>
  {
    Error_Handler();
 8001a1e:	f7ff fd45 	bl	80014ac <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 8001a22:	4803      	ldr	r0, [pc, #12]	; (8001a30 <MX_TIM9_Init+0xe0>)
 8001a24:	f000 f8b6 	bl	8001b94 <HAL_TIM_MspPostInit>

}
 8001a28:	bf00      	nop
 8001a2a:	3728      	adds	r7, #40	; 0x28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	2000371c 	.word	0x2000371c
 8001a34:	40010800 	.word	0x40010800

08001a38 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a3e:	463b      	mov	r3, r7
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]

  htim10.Instance = TIM10;
 8001a4a:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <MX_TIM10_Init+0x6c>)
 8001a4c:	4a16      	ldr	r2, [pc, #88]	; (8001aa8 <MX_TIM10_Init+0x70>)
 8001a4e:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <MX_TIM10_Init+0x6c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <MX_TIM10_Init+0x6c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1599;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_TIM10_Init+0x6c>)
 8001a5e:	f240 623f 	movw	r2, #1599	; 0x63f
 8001a62:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <MX_TIM10_Init+0x6c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <MX_TIM10_Init+0x6c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001a70:	480c      	ldr	r0, [pc, #48]	; (8001aa4 <MX_TIM10_Init+0x6c>)
 8001a72:	f003 fd4d 	bl	8005510 <HAL_TIM_Base_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 8001a7c:	f7ff fd16 	bl	80014ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a84:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 8001a86:	463b      	mov	r3, r7
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <MX_TIM10_Init+0x6c>)
 8001a8c:	f004 facc 	bl	8006028 <HAL_TIM_ConfigClockSource>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM10_Init+0x62>
  {
    Error_Handler();
 8001a96:	f7ff fd09 	bl	80014ac <Error_Handler>
  }

}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200036a4 	.word	0x200036a4
 8001aa8:	40010c00 	.word	0x40010c00

08001aac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001abc:	d10c      	bne.n	8001ad8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001abe:	4b30      	ldr	r3, [pc, #192]	; (8001b80 <HAL_TIM_Base_MspInit+0xd4>)
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	4a2f      	ldr	r2, [pc, #188]	; (8001b80 <HAL_TIM_Base_MspInit+0xd4>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6253      	str	r3, [r2, #36]	; 0x24
 8001aca:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <HAL_TIM_Base_MspInit+0xd4>)
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	61fb      	str	r3, [r7, #28]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001ad6:	e04e      	b.n	8001b76 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM3)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a29      	ldr	r2, [pc, #164]	; (8001b84 <HAL_TIM_Base_MspInit+0xd8>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d10c      	bne.n	8001afc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ae2:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <HAL_TIM_Base_MspInit+0xd4>)
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	4a26      	ldr	r2, [pc, #152]	; (8001b80 <HAL_TIM_Base_MspInit+0xd4>)
 8001ae8:	f043 0302 	orr.w	r3, r3, #2
 8001aec:	6253      	str	r3, [r2, #36]	; 0x24
 8001aee:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <HAL_TIM_Base_MspInit+0xd4>)
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	61bb      	str	r3, [r7, #24]
 8001af8:	69bb      	ldr	r3, [r7, #24]
}
 8001afa:	e03c      	b.n	8001b76 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM4)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a21      	ldr	r2, [pc, #132]	; (8001b88 <HAL_TIM_Base_MspInit+0xdc>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d10c      	bne.n	8001b20 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b06:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <HAL_TIM_Base_MspInit+0xd4>)
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	4a1d      	ldr	r2, [pc, #116]	; (8001b80 <HAL_TIM_Base_MspInit+0xd4>)
 8001b0c:	f043 0304 	orr.w	r3, r3, #4
 8001b10:	6253      	str	r3, [r2, #36]	; 0x24
 8001b12:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <HAL_TIM_Base_MspInit+0xd4>)
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	697b      	ldr	r3, [r7, #20]
}
 8001b1e:	e02a      	b.n	8001b76 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM9)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a19      	ldr	r2, [pc, #100]	; (8001b8c <HAL_TIM_Base_MspInit+0xe0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d10c      	bne.n	8001b44 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <HAL_TIM_Base_MspInit+0xd4>)
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	4a14      	ldr	r2, [pc, #80]	; (8001b80 <HAL_TIM_Base_MspInit+0xd4>)
 8001b30:	f043 0304 	orr.w	r3, r3, #4
 8001b34:	6213      	str	r3, [r2, #32]
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_TIM_Base_MspInit+0xd4>)
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]
}
 8001b42:	e018      	b.n	8001b76 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM10)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a11      	ldr	r2, [pc, #68]	; (8001b90 <HAL_TIM_Base_MspInit+0xe4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d113      	bne.n	8001b76 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <HAL_TIM_Base_MspInit+0xd4>)
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	4a0b      	ldr	r2, [pc, #44]	; (8001b80 <HAL_TIM_Base_MspInit+0xd4>)
 8001b54:	f043 0308 	orr.w	r3, r3, #8
 8001b58:	6213      	str	r3, [r2, #32]
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_TIM_Base_MspInit+0xd4>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM10_IRQn, 5, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2105      	movs	r1, #5
 8001b6a:	201a      	movs	r0, #26
 8001b6c:	f000 ffbc 	bl	8002ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
 8001b70:	201a      	movs	r0, #26
 8001b72:	f000 ffe5 	bl	8002b40 <HAL_NVIC_EnableIRQ>
}
 8001b76:	bf00      	nop
 8001b78:	3720      	adds	r7, #32
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40000400 	.word	0x40000400
 8001b88:	40000800 	.word	0x40000800
 8001b8c:	40010800 	.word	0x40010800
 8001b90:	40010c00 	.word	0x40010c00

08001b94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb4:	d11c      	bne.n	8001bf0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <HAL_TIM_MspPostInit+0xf0>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	4a32      	ldr	r2, [pc, #200]	; (8001c84 <HAL_TIM_MspPostInit+0xf0>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	61d3      	str	r3, [r2, #28]
 8001bc2:	4b30      	ldr	r3, [pc, #192]	; (8001c84 <HAL_TIM_MspPostInit+0xf0>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0-WKUP1     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PWM_ENGINE_LEFT_Pin;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bde:	2301      	movs	r3, #1
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_LEFT_GPIO_Port, &GPIO_InitStruct);
 8001be2:	f107 0314 	add.w	r3, r7, #20
 8001be6:	4619      	mov	r1, r3
 8001be8:	4827      	ldr	r0, [pc, #156]	; (8001c88 <HAL_TIM_MspPostInit+0xf4>)
 8001bea:	f001 fa4b 	bl	8003084 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001bee:	e044      	b.n	8001c7a <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a25      	ldr	r2, [pc, #148]	; (8001c8c <HAL_TIM_MspPostInit+0xf8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d11d      	bne.n	8001c36 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfa:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <HAL_TIM_MspPostInit+0xf0>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	4a21      	ldr	r2, [pc, #132]	; (8001c84 <HAL_TIM_MspPostInit+0xf0>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	61d3      	str	r3, [r2, #28]
 8001c06:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <HAL_TIM_MspPostInit+0xf0>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_ENGINE_RIGHT_Pin;
 8001c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c24:	2302      	movs	r3, #2
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4818      	ldr	r0, [pc, #96]	; (8001c90 <HAL_TIM_MspPostInit+0xfc>)
 8001c30:	f001 fa28 	bl	8003084 <HAL_GPIO_Init>
}
 8001c34:	e021      	b.n	8001c7a <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM9)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a16      	ldr	r2, [pc, #88]	; (8001c94 <HAL_TIM_MspPostInit+0x100>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d11c      	bne.n	8001c7a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c40:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <HAL_TIM_MspPostInit+0xf0>)
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	4a0f      	ldr	r2, [pc, #60]	; (8001c84 <HAL_TIM_MspPostInit+0xf0>)
 8001c46:	f043 0302 	orr.w	r3, r3, #2
 8001c4a:	61d3      	str	r3, [r2, #28]
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <HAL_TIM_MspPostInit+0xf0>)
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 8001c58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	4619      	mov	r1, r3
 8001c74:	4808      	ldr	r0, [pc, #32]	; (8001c98 <HAL_TIM_MspPostInit+0x104>)
 8001c76:	f001 fa05 	bl	8003084 <HAL_GPIO_Init>
}
 8001c7a:	bf00      	nop
 8001c7c:	3728      	adds	r7, #40	; 0x28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020000 	.word	0x40020000
 8001c8c:	40000400 	.word	0x40000400
 8001c90:	40020800 	.word	0x40020800
 8001c94:	40010800 	.word	0x40010800
 8001c98:	40020400 	.word	0x40020400

08001c9c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_USART3_UART_Init+0x4c>)
 8001ca2:	4a12      	ldr	r2, [pc, #72]	; (8001cec <MX_USART3_UART_Init+0x50>)
 8001ca4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <MX_USART3_UART_Init+0x4c>)
 8001ca8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_USART3_UART_Init+0x4c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <MX_USART3_UART_Init+0x4c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <MX_USART3_UART_Init+0x4c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <MX_USART3_UART_Init+0x4c>)
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <MX_USART3_UART_Init+0x4c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MX_USART3_UART_Init+0x4c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_USART3_UART_Init+0x4c>)
 8001cd4:	f004 ffba 	bl	8006c4c <HAL_UART_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001cde:	f7ff fbe5 	bl	80014ac <Error_Handler>
  }

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200037d8 	.word	0x200037d8
 8001cec:	40004800 	.word	0x40004800

08001cf0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a3e      	ldr	r2, [pc, #248]	; (8001e08 <HAL_UART_MspInit+0x118>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d175      	bne.n	8001dfe <HAL_UART_MspInit+0x10e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d12:	4b3e      	ldr	r3, [pc, #248]	; (8001e0c <HAL_UART_MspInit+0x11c>)
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	4a3d      	ldr	r2, [pc, #244]	; (8001e0c <HAL_UART_MspInit+0x11c>)
 8001d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d1c:	6253      	str	r3, [r2, #36]	; 0x24
 8001d1e:	4b3b      	ldr	r3, [pc, #236]	; (8001e0c <HAL_UART_MspInit+0x11c>)
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2a:	4b38      	ldr	r3, [pc, #224]	; (8001e0c <HAL_UART_MspInit+0x11c>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	4a37      	ldr	r2, [pc, #220]	; (8001e0c <HAL_UART_MspInit+0x11c>)
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	61d3      	str	r3, [r2, #28]
 8001d36:	4b35      	ldr	r3, [pc, #212]	; (8001e0c <HAL_UART_MspInit+0x11c>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d42:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d50:	2303      	movs	r3, #3
 8001d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d54:	2307      	movs	r3, #7
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	482c      	ldr	r0, [pc, #176]	; (8001e10 <HAL_UART_MspInit+0x120>)
 8001d60:	f001 f990 	bl	8003084 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001d64:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <HAL_UART_MspInit+0x124>)
 8001d66:	4a2c      	ldr	r2, [pc, #176]	; (8001e18 <HAL_UART_MspInit+0x128>)
 8001d68:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d6a:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <HAL_UART_MspInit+0x124>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d70:	4b28      	ldr	r3, [pc, #160]	; (8001e14 <HAL_UART_MspInit+0x124>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d76:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <HAL_UART_MspInit+0x124>)
 8001d78:	2280      	movs	r2, #128	; 0x80
 8001d7a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d7c:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <HAL_UART_MspInit+0x124>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d82:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <HAL_UART_MspInit+0x124>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001d88:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <HAL_UART_MspInit+0x124>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001d8e:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <HAL_UART_MspInit+0x124>)
 8001d90:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001d94:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001d96:	481f      	ldr	r0, [pc, #124]	; (8001e14 <HAL_UART_MspInit+0x124>)
 8001d98:	f000 feea 	bl	8002b70 <HAL_DMA_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8001da2:	f7ff fb83 	bl	80014ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a1a      	ldr	r2, [pc, #104]	; (8001e14 <HAL_UART_MspInit+0x124>)
 8001daa:	635a      	str	r2, [r3, #52]	; 0x34
 8001dac:	4a19      	ldr	r2, [pc, #100]	; (8001e14 <HAL_UART_MspInit+0x124>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001db2:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <HAL_UART_MspInit+0x12c>)
 8001db4:	4a1a      	ldr	r2, [pc, #104]	; (8001e20 <HAL_UART_MspInit+0x130>)
 8001db6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001db8:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <HAL_UART_MspInit+0x12c>)
 8001dba:	2210      	movs	r2, #16
 8001dbc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dbe:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <HAL_UART_MspInit+0x12c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dc4:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <HAL_UART_MspInit+0x12c>)
 8001dc6:	2280      	movs	r2, #128	; 0x80
 8001dc8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dca:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <HAL_UART_MspInit+0x12c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_UART_MspInit+0x12c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001dd6:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <HAL_UART_MspInit+0x12c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <HAL_UART_MspInit+0x12c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001de2:	480e      	ldr	r0, [pc, #56]	; (8001e1c <HAL_UART_MspInit+0x12c>)
 8001de4:	f000 fec4 	bl	8002b70 <HAL_DMA_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8001dee:	f7ff fb5d 	bl	80014ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a09      	ldr	r2, [pc, #36]	; (8001e1c <HAL_UART_MspInit+0x12c>)
 8001df6:	631a      	str	r2, [r3, #48]	; 0x30
 8001df8:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <HAL_UART_MspInit+0x12c>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001dfe:	bf00      	nop
 8001e00:	3728      	adds	r7, #40	; 0x28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40004800 	.word	0x40004800
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40020400 	.word	0x40020400
 8001e14:	20003794 	.word	0x20003794
 8001e18:	40026030 	.word	0x40026030
 8001e1c:	20003818 	.word	0x20003818
 8001e20:	4002601c 	.word	0x4002601c

08001e24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001e24:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001e26:	e003      	b.n	8001e30 <LoopCopyDataInit>

08001e28 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001e2a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001e2c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001e2e:	3104      	adds	r1, #4

08001e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001e30:	480a      	ldr	r0, [pc, #40]	; (8001e5c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001e34:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001e36:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001e38:	d3f6      	bcc.n	8001e28 <CopyDataInit>
  ldr r2, =_sbss
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	; (8001e64 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001e3c:	e002      	b.n	8001e44 <LoopFillZerobss>

08001e3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001e40:	f842 3b04 	str.w	r3, [r2], #4

08001e44 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001e46:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001e48:	d3f9      	bcc.n	8001e3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e4a:	f7ff fc17 	bl	800167c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e4e:	f008 fcf1 	bl	800a834 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e52:	f7ff fa95 	bl	8001380 <main>
  bx lr
 8001e56:	4770      	bx	lr
  ldr r3, =_sidata
 8001e58:	0800ac84 	.word	0x0800ac84
  ldr r0, =_sdata
 8001e5c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e60:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8001e64:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8001e68:	200038a0 	.word	0x200038a0

08001e6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e6c:	e7fe      	b.n	8001e6c <ADC1_IRQHandler>

08001e6e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e78:	2003      	movs	r0, #3
 8001e7a:	f000 fe15 	bl	8002aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7ff fb58 	bl	8001534 <HAL_InitTick>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	71fb      	strb	r3, [r7, #7]
 8001e8e:	e001      	b.n	8001e94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e90:	f7ff fb1c 	bl	80014cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e94:	79fb      	ldrb	r3, [r7, #7]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <HAL_IncTick+0x1c>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_IncTick+0x20>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4413      	add	r3, r2
 8001eae:	4a03      	ldr	r2, [pc, #12]	; (8001ebc <HAL_IncTick+0x1c>)
 8001eb0:	6013      	str	r3, [r2, #0]
}
 8001eb2:	bf00      	nop
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	2000385c 	.word	0x2000385c
 8001ec0:	2000000c 	.word	0x2000000c

08001ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec8:	4b02      	ldr	r3, [pc, #8]	; (8001ed4 <HAL_GetTick+0x10>)
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	2000385c 	.word	0x2000385c

08001ed8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08e      	sub	sp, #56	; 0x38
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e282      	b.n	80023fe <HAL_ADC_Init+0x526>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a9d      	ldr	r2, [pc, #628]	; (8002174 <HAL_ADC_Init+0x29c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d004      	beq.n	8001f0c <HAL_ADC_Init+0x34>
 8001f02:	f240 11bd 	movw	r1, #445	; 0x1bd
 8001f06:	489c      	ldr	r0, [pc, #624]	; (8002178 <HAL_ADC_Init+0x2a0>)
 8001f08:	f7ff fad6 	bl	80014b8 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00e      	beq.n	8001f32 <HAL_ADC_Init+0x5a>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1c:	d009      	beq.n	8001f32 <HAL_ADC_Init+0x5a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f26:	d004      	beq.n	8001f32 <HAL_ADC_Init+0x5a>
 8001f28:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8001f2c:	4892      	ldr	r0, [pc, #584]	; (8002178 <HAL_ADC_Init+0x2a0>)
 8001f2e:	f7ff fac3 	bl	80014b8 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d013      	beq.n	8001f62 <HAL_ADC_Init+0x8a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f42:	d00e      	beq.n	8001f62 <HAL_ADC_Init+0x8a>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f4c:	d009      	beq.n	8001f62 <HAL_ADC_Init+0x8a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f56:	d004      	beq.n	8001f62 <HAL_ADC_Init+0x8a>
 8001f58:	f240 11bf 	movw	r1, #447	; 0x1bf
 8001f5c:	4886      	ldr	r0, [pc, #536]	; (8002178 <HAL_ADC_Init+0x2a0>)
 8001f5e:	f7ff faab 	bl	80014b8 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d009      	beq.n	8001f7e <HAL_ADC_Init+0xa6>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f72:	d004      	beq.n	8001f7e <HAL_ADC_Init+0xa6>
 8001f74:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001f78:	487f      	ldr	r0, [pc, #508]	; (8002178 <HAL_ADC_Init+0x2a0>)
 8001f7a:	f7ff fa9d 	bl	80014b8 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d009      	beq.n	8001f9a <HAL_ADC_Init+0xc2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f8e:	d004      	beq.n	8001f9a <HAL_ADC_Init+0xc2>
 8001f90:	f240 11c1 	movw	r1, #449	; 0x1c1
 8001f94:	4878      	ldr	r0, [pc, #480]	; (8002178 <HAL_ADC_Init+0x2a0>)
 8001f96:	f7ff fa8f 	bl	80014b8 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa2:	d008      	beq.n	8001fb6 <HAL_ADC_Init+0xde>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d004      	beq.n	8001fb6 <HAL_ADC_Init+0xde>
 8001fac:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8001fb0:	4871      	ldr	r0, [pc, #452]	; (8002178 <HAL_ADC_Init+0x2a0>)
 8001fb2:	f7ff fa81 	bl	80014b8 <assert_failed>
  assert_param(IS_ADC_AUTOWAIT(hadc->Init.LowPowerAutoWait));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d020      	beq.n	8002000 <HAL_ADC_Init+0x128>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	2b10      	cmp	r3, #16
 8001fc4:	d01c      	beq.n	8002000 <HAL_ADC_Init+0x128>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	2b20      	cmp	r3, #32
 8001fcc:	d018      	beq.n	8002000 <HAL_ADC_Init+0x128>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	2b30      	cmp	r3, #48	; 0x30
 8001fd4:	d014      	beq.n	8002000 <HAL_ADC_Init+0x128>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	2b40      	cmp	r3, #64	; 0x40
 8001fdc:	d010      	beq.n	8002000 <HAL_ADC_Init+0x128>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	2b50      	cmp	r3, #80	; 0x50
 8001fe4:	d00c      	beq.n	8002000 <HAL_ADC_Init+0x128>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	2b60      	cmp	r3, #96	; 0x60
 8001fec:	d008      	beq.n	8002000 <HAL_ADC_Init+0x128>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	2b70      	cmp	r3, #112	; 0x70
 8001ff4:	d004      	beq.n	8002000 <HAL_ADC_Init+0x128>
 8001ff6:	f240 11c3 	movw	r1, #451	; 0x1c3
 8001ffa:	485f      	ldr	r0, [pc, #380]	; (8002178 <HAL_ADC_Init+0x2a0>)
 8001ffc:	f7ff fa5c 	bl	80014b8 <assert_failed>
  assert_param(IS_ADC_AUTOPOWEROFF(hadc->Init.LowPowerAutoPowerOff));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d013      	beq.n	8002030 <HAL_ADC_Init+0x158>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002010:	d00e      	beq.n	8002030 <HAL_ADC_Init+0x158>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800201a:	d009      	beq.n	8002030 <HAL_ADC_Init+0x158>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002024:	d004      	beq.n	8002030 <HAL_ADC_Init+0x158>
 8002026:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800202a:	4853      	ldr	r0, [pc, #332]	; (8002178 <HAL_ADC_Init+0x2a0>)
 800202c:	f7ff fa44 	bl	80014b8 <assert_failed>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <HAL_ADC_Init+0x172>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	2b04      	cmp	r3, #4
 800203e:	d004      	beq.n	800204a <HAL_ADC_Init+0x172>
 8002040:	f240 11c5 	movw	r1, #453	; 0x1c5
 8002044:	484c      	ldr	r0, [pc, #304]	; (8002178 <HAL_ADC_Init+0x2a0>)
 8002046:	f7ff fa37 	bl	80014b8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002050:	2b00      	cmp	r3, #0
 8002052:	d009      	beq.n	8002068 <HAL_ADC_Init+0x190>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800205a:	2b01      	cmp	r3, #1
 800205c:	d004      	beq.n	8002068 <HAL_ADC_Init+0x190>
 800205e:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8002062:	4845      	ldr	r0, [pc, #276]	; (8002178 <HAL_ADC_Init+0x2a0>)
 8002064:	f7ff fa28 	bl	80014b8 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800206c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002070:	d03e      	beq.n	80020f0 <HAL_ADC_Init+0x218>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002076:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800207a:	d039      	beq.n	80020f0 <HAL_ADC_Init+0x218>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002080:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002084:	d034      	beq.n	80020f0 <HAL_ADC_Init+0x218>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800208a:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 800208e:	d02f      	beq.n	80020f0 <HAL_ADC_Init+0x218>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002094:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002098:	d02a      	beq.n	80020f0 <HAL_ADC_Init+0x218>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020a2:	d025      	beq.n	80020f0 <HAL_ADC_Init+0x218>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80020ac:	d020      	beq.n	80020f0 <HAL_ADC_Init+0x218>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b2:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 80020b6:	d01b      	beq.n	80020f0 <HAL_ADC_Init+0x218>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020bc:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80020c0:	d016      	beq.n	80020f0 <HAL_ADC_Init+0x218>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d012      	beq.n	80020f0 <HAL_ADC_Init+0x218>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020d2:	d00d      	beq.n	80020f0 <HAL_ADC_Init+0x218>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80020dc:	d008      	beq.n	80020f0 <HAL_ADC_Init+0x218>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e2:	2b10      	cmp	r3, #16
 80020e4:	d004      	beq.n	80020f0 <HAL_ADC_Init+0x218>
 80020e6:	f240 11c7 	movw	r1, #455	; 0x1c7
 80020ea:	4823      	ldr	r0, [pc, #140]	; (8002178 <HAL_ADC_Init+0x2a0>)
 80020ec:	f7ff f9e4 	bl	80014b8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d009      	beq.n	800210e <HAL_ADC_Init+0x236>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002100:	2b01      	cmp	r3, #1
 8002102:	d004      	beq.n	800210e <HAL_ADC_Init+0x236>
 8002104:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8002108:	481b      	ldr	r0, [pc, #108]	; (8002178 <HAL_ADC_Init+0x2a0>)
 800210a:	f7ff f9d5 	bl	80014b8 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d032      	beq.n	800217c <HAL_ADC_Init+0x2a4>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_ADC_Init+0x24e>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002122:	2b1c      	cmp	r3, #28
 8002124:	d904      	bls.n	8002130 <HAL_ADC_Init+0x258>
 8002126:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800212a:	4813      	ldr	r0, [pc, #76]	; (8002178 <HAL_ADC_Init+0x2a0>)
 800212c:	f7ff f9c4 	bl	80014b8 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002136:	2b00      	cmp	r3, #0
 8002138:	d009      	beq.n	800214e <HAL_ADC_Init+0x276>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002140:	2b01      	cmp	r3, #1
 8002142:	d004      	beq.n	800214e <HAL_ADC_Init+0x276>
 8002144:	f240 11cd 	movw	r1, #461	; 0x1cd
 8002148:	480b      	ldr	r0, [pc, #44]	; (8002178 <HAL_ADC_Init+0x2a0>)
 800214a:	f7ff f9b5 	bl	80014b8 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002154:	2b00      	cmp	r3, #0
 8002156:	d011      	beq.n	800217c <HAL_ADC_Init+0x2a4>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_ADC_Init+0x290>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	2b08      	cmp	r3, #8
 8002166:	d909      	bls.n	800217c <HAL_ADC_Init+0x2a4>
 8002168:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <HAL_ADC_Init+0x2a0>)
 800216e:	f7ff f9a3 	bl	80014b8 <assert_failed>
 8002172:	e003      	b.n	800217c <HAL_ADC_Init+0x2a4>
 8002174:	40012400 	.word	0x40012400
 8002178:	0800a960 	.word	0x0800a960
    }
  }
      
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002180:	2b10      	cmp	r3, #16
 8002182:	d017      	beq.n	80021b4 <HAL_ADC_Init+0x2dc>
  {
    assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002188:	2b00      	cmp	r3, #0
 800218a:	d013      	beq.n	80021b4 <HAL_ADC_Init+0x2dc>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002190:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002194:	d00e      	beq.n	80021b4 <HAL_ADC_Init+0x2dc>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800219e:	d009      	beq.n	80021b4 <HAL_ADC_Init+0x2dc>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80021a8:	d004      	beq.n	80021b4 <HAL_ADC_Init+0x2dc>
 80021aa:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80021ae:	4896      	ldr	r0, [pc, #600]	; (8002408 <HAL_ADC_Init+0x530>)
 80021b0:	f7ff f982 	bl	80014b8 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d115      	bne.n	80021e8 <HAL_ADC_Init+0x310>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ca:	4b90      	ldr	r3, [pc, #576]	; (800240c <HAL_ADC_Init+0x534>)
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	4a8f      	ldr	r2, [pc, #572]	; (800240c <HAL_ADC_Init+0x534>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6213      	str	r3, [r2, #32]
 80021d6:	4b8d      	ldr	r3, [pc, #564]	; (800240c <HAL_ADC_Init+0x534>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7fe fe78 	bl	8000ed8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f040 80ff 	bne.w	80023f4 <HAL_ADC_Init+0x51c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021fe:	f023 0302 	bic.w	r3, r3, #2
 8002202:	f043 0202 	orr.w	r2, r3, #2
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800220a:	4b81      	ldr	r3, [pc, #516]	; (8002410 <HAL_ADC_Init+0x538>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	497e      	ldr	r1, [pc, #504]	; (8002410 <HAL_ADC_Init+0x538>)
 8002218:	4313      	orrs	r3, r2
 800221a:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002224:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800222c:	4619      	mov	r1, r3
 800222e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002232:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	fa93 f3a3 	rbit	r3, r3
 800223a:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8002248:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800224e:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002256:	4619      	mov	r1, r3
 8002258:	2302      	movs	r3, #2
 800225a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225e:	fa93 f3a3 	rbit	r3, r3
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	fab3 f383 	clz	r3, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8002270:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002274:	4313      	orrs	r3, r2
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800227c:	2b10      	cmp	r3, #16
 800227e:	d007      	beq.n	8002290 <HAL_ADC_Init+0x3b8>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002288:	4313      	orrs	r3, r2
 800228a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800228c:	4313      	orrs	r3, r2
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229a:	2b40      	cmp	r3, #64	; 0x40
 800229c:	d04f      	beq.n	800233e <HAL_ADC_Init+0x466>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022a4:	4313      	orrs	r3, r2
 80022a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80022b0:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6912      	ldr	r2, [r2, #16]
 80022b6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80022ba:	d003      	beq.n	80022c4 <HAL_ADC_Init+0x3ec>
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6912      	ldr	r2, [r2, #16]
 80022c0:	2a01      	cmp	r2, #1
 80022c2:	d102      	bne.n	80022ca <HAL_ADC_Init+0x3f2>
 80022c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022c8:	e000      	b.n	80022cc <HAL_ADC_Init+0x3f4>
 80022ca:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80022cc:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80022ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022d0:	4313      	orrs	r3, r2
 80022d2:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d125      	bne.n	800232a <HAL_ADC_Init+0x452>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d114      	bne.n	8002312 <HAL_ADC_Init+0x43a>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	3b01      	subs	r3, #1
 80022ee:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80022f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	fa92 f2a2 	rbit	r2, r2
 80022fa:	617a      	str	r2, [r7, #20]
  return result;
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	fab2 f282 	clz	r2, r2
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	4093      	lsls	r3, r2
 8002306:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800230a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800230c:	4313      	orrs	r3, r2
 800230e:	633b      	str	r3, [r7, #48]	; 0x30
 8002310:	e00b      	b.n	800232a <HAL_ADC_Init+0x452>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002316:	f043 0220 	orr.w	r2, r3, #32
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002322:	f043 0201 	orr.w	r2, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	4b38      	ldr	r3, [pc, #224]	; (8002414 <HAL_ADC_Init+0x53c>)
 8002332:	4013      	ands	r3, r2
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800233a:	430b      	orrs	r3, r1
 800233c:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	4b34      	ldr	r3, [pc, #208]	; (8002418 <HAL_ADC_Init+0x540>)
 8002346:	4013      	ands	r3, r2
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800234e:	430b      	orrs	r3, r1
 8002350:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800235a:	d003      	beq.n	8002364 <HAL_ADC_Init+0x48c>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d119      	bne.n	8002398 <HAL_ADC_Init+0x4c0>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002372:	3b01      	subs	r3, #1
 8002374:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8002378:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	fa92 f2a2 	rbit	r2, r2
 8002380:	60fa      	str	r2, [r7, #12]
  return result;
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	fab2 f282 	clz	r2, r2
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	fa03 f202 	lsl.w	r2, r3, r2
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	631a      	str	r2, [r3, #48]	; 0x30
 8002396:	e007      	b.n	80023a8 <HAL_ADC_Init+0x4d0>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80023a6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	4b1b      	ldr	r3, [pc, #108]	; (800241c <HAL_ADC_Init+0x544>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d10b      	bne.n	80023d0 <HAL_ADC_Init+0x4f8>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c2:	f023 0303 	bic.w	r3, r3, #3
 80023c6:	f043 0201 	orr.w	r2, r3, #1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	64da      	str	r2, [r3, #76]	; 0x4c
 80023ce:	e014      	b.n	80023fa <HAL_ADC_Init+0x522>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d4:	f023 0312 	bic.w	r3, r3, #18
 80023d8:	f043 0210 	orr.w	r2, r3, #16
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e4:	f043 0201 	orr.w	r2, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023f2:	e002      	b.n	80023fa <HAL_ADC_Init+0x522>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3738      	adds	r7, #56	; 0x38
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	0800a960 	.word	0x0800a960
 800240c:	40023800 	.word	0x40023800
 8002410:	40012700 	.word	0x40012700
 8002414:	fcfc16ff 	.word	0xfcfc16ff
 8002418:	c0fff189 	.word	0xc0fff189
 800241c:	bf80fffe 	.word	0xbf80fffe

08002420 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a94      	ldr	r2, [pc, #592]	; (8002688 <HAL_ADC_ConfigChannel+0x268>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d004      	beq.n	8002446 <HAL_ADC_ConfigChannel+0x26>
 800243c:	f240 7191 	movw	r1, #1937	; 0x791
 8002440:	4892      	ldr	r0, [pc, #584]	; (800268c <HAL_ADC_ConfigChannel+0x26c>)
 8002442:	f7ff f839 	bl	80014b8 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8081 	beq.w	8002552 <HAL_ADC_ConfigChannel+0x132>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d07c      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d078      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b03      	cmp	r3, #3
 8002466:	d074      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b04      	cmp	r3, #4
 800246e:	d070      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b05      	cmp	r3, #5
 8002476:	d06c      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b06      	cmp	r3, #6
 800247e:	d068      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b07      	cmp	r3, #7
 8002486:	d064      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b08      	cmp	r3, #8
 800248e:	d060      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b09      	cmp	r3, #9
 8002496:	d05c      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b0a      	cmp	r3, #10
 800249e:	d058      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b0b      	cmp	r3, #11
 80024a6:	d054      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b0c      	cmp	r3, #12
 80024ae:	d050      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b0d      	cmp	r3, #13
 80024b6:	d04c      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b0e      	cmp	r3, #14
 80024be:	d048      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b0f      	cmp	r3, #15
 80024c6:	d044      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b10      	cmp	r3, #16
 80024ce:	d040      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b11      	cmp	r3, #17
 80024d6:	d03c      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b12      	cmp	r3, #18
 80024de:	d038      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b13      	cmp	r3, #19
 80024e6:	d034      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b14      	cmp	r3, #20
 80024ee:	d030      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b15      	cmp	r3, #21
 80024f6:	d02c      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b16      	cmp	r3, #22
 80024fe:	d028      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b17      	cmp	r3, #23
 8002506:	d024      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b18      	cmp	r3, #24
 800250e:	d020      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b19      	cmp	r3, #25
 8002516:	d01c      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b1a      	cmp	r3, #26
 800251e:	d018      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b1b      	cmp	r3, #27
 8002526:	d014      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b1c      	cmp	r3, #28
 800252e:	d010      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b1d      	cmp	r3, #29
 8002536:	d00c      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b1e      	cmp	r3, #30
 800253e:	d008      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b1f      	cmp	r3, #31
 8002546:	d004      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x132>
 8002548:	f240 7192 	movw	r1, #1938	; 0x792
 800254c:	484f      	ldr	r0, [pc, #316]	; (800268c <HAL_ADC_ConfigChannel+0x26c>)
 800254e:	f7fe ffb3 	bl	80014b8 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d070      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d06c      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b03      	cmp	r3, #3
 8002568:	d068      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b04      	cmp	r3, #4
 8002570:	d064      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b05      	cmp	r3, #5
 8002578:	d060      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b06      	cmp	r3, #6
 8002580:	d05c      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b07      	cmp	r3, #7
 8002588:	d058      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b08      	cmp	r3, #8
 8002590:	d054      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b09      	cmp	r3, #9
 8002598:	d050      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b0a      	cmp	r3, #10
 80025a0:	d04c      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b0b      	cmp	r3, #11
 80025a8:	d048      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b0c      	cmp	r3, #12
 80025b0:	d044      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b0d      	cmp	r3, #13
 80025b8:	d040      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b0e      	cmp	r3, #14
 80025c0:	d03c      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b0f      	cmp	r3, #15
 80025c8:	d038      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b10      	cmp	r3, #16
 80025d0:	d034      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b11      	cmp	r3, #17
 80025d8:	d030      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b12      	cmp	r3, #18
 80025e0:	d02c      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b13      	cmp	r3, #19
 80025e8:	d028      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b14      	cmp	r3, #20
 80025f0:	d024      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b15      	cmp	r3, #21
 80025f8:	d020      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b16      	cmp	r3, #22
 8002600:	d01c      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b17      	cmp	r3, #23
 8002608:	d018      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b18      	cmp	r3, #24
 8002610:	d014      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b19      	cmp	r3, #25
 8002618:	d010      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b1a      	cmp	r3, #26
 8002620:	d00c      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b1b      	cmp	r3, #27
 8002628:	d008      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b1c      	cmp	r3, #28
 8002630:	d004      	beq.n	800263c <HAL_ADC_ConfigChannel+0x21c>
 8002632:	f240 7193 	movw	r1, #1939	; 0x793
 8002636:	4815      	ldr	r0, [pc, #84]	; (800268c <HAL_ADC_ConfigChannel+0x26c>)
 8002638:	f7fe ff3e 	bl	80014b8 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d025      	beq.n	8002690 <HAL_ADC_ConfigChannel+0x270>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d021      	beq.n	8002690 <HAL_ADC_ConfigChannel+0x270>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d01d      	beq.n	8002690 <HAL_ADC_ConfigChannel+0x270>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b03      	cmp	r3, #3
 800265a:	d019      	beq.n	8002690 <HAL_ADC_ConfigChannel+0x270>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b04      	cmp	r3, #4
 8002662:	d015      	beq.n	8002690 <HAL_ADC_ConfigChannel+0x270>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b05      	cmp	r3, #5
 800266a:	d011      	beq.n	8002690 <HAL_ADC_ConfigChannel+0x270>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2b06      	cmp	r3, #6
 8002672:	d00d      	beq.n	8002690 <HAL_ADC_ConfigChannel+0x270>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b07      	cmp	r3, #7
 800267a:	d009      	beq.n	8002690 <HAL_ADC_ConfigChannel+0x270>
 800267c:	f240 7194 	movw	r1, #1940	; 0x794
 8002680:	4802      	ldr	r0, [pc, #8]	; (800268c <HAL_ADC_ConfigChannel+0x26c>)
 8002682:	f7fe ff19 	bl	80014b8 <assert_failed>
 8002686:	e003      	b.n	8002690 <HAL_ADC_ConfigChannel+0x270>
 8002688:	40012400 	.word	0x40012400
 800268c:	0800a960 	.word	0x0800a960
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_ADC_ConfigChannel+0x27e>
 800269a:	2302      	movs	r3, #2
 800269c:	e14f      	b.n	800293e <HAL_ADC_ConfigChannel+0x51e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b06      	cmp	r3, #6
 80026ac:	d81c      	bhi.n	80026e8 <HAL_ADC_ConfigChannel+0x2c8>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	3b05      	subs	r3, #5
 80026c0:	221f      	movs	r2, #31
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	4019      	ands	r1, r3
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	3b05      	subs	r3, #5
 80026da:	fa00 f203 	lsl.w	r2, r0, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	641a      	str	r2, [r3, #64]	; 0x40
 80026e6:	e07e      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b0c      	cmp	r3, #12
 80026ee:	d81c      	bhi.n	800272a <HAL_ADC_ConfigChannel+0x30a>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	3b23      	subs	r3, #35	; 0x23
 8002702:	221f      	movs	r2, #31
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	4019      	ands	r1, r3
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	6818      	ldr	r0, [r3, #0]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	3b23      	subs	r3, #35	; 0x23
 800271c:	fa00 f203 	lsl.w	r2, r0, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	63da      	str	r2, [r3, #60]	; 0x3c
 8002728:	e05d      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b12      	cmp	r3, #18
 8002730:	d81c      	bhi.n	800276c <HAL_ADC_ConfigChannel+0x34c>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	3b41      	subs	r3, #65	; 0x41
 8002744:	221f      	movs	r2, #31
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43db      	mvns	r3, r3
 800274c:	4019      	ands	r1, r3
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	3b41      	subs	r3, #65	; 0x41
 800275e:	fa00 f203 	lsl.w	r2, r0, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	639a      	str	r2, [r3, #56]	; 0x38
 800276a:	e03c      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b18      	cmp	r3, #24
 8002772:	d81c      	bhi.n	80027ae <HAL_ADC_ConfigChannel+0x38e>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	3b5f      	subs	r3, #95	; 0x5f
 8002786:	221f      	movs	r2, #31
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	4019      	ands	r1, r3
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	6818      	ldr	r0, [r3, #0]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	3b5f      	subs	r3, #95	; 0x5f
 80027a0:	fa00 f203 	lsl.w	r2, r0, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	635a      	str	r2, [r3, #52]	; 0x34
 80027ac:	e01b      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	3b7d      	subs	r3, #125	; 0x7d
 80027c0:	221f      	movs	r2, #31
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	4019      	ands	r1, r3
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	3b7d      	subs	r3, #125	; 0x7d
 80027da:	fa00 f203 	lsl.w	r2, r0, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b09      	cmp	r3, #9
 80027ec:	d81a      	bhi.n	8002824 <HAL_ADC_ConfigChannel+0x404>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6959      	ldr	r1, [r3, #20]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4613      	mov	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4413      	add	r3, r2
 80027fe:	2207      	movs	r2, #7
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	4019      	ands	r1, r3
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	6898      	ldr	r0, [r3, #8]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4613      	mov	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	fa00 f203 	lsl.w	r2, r0, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	615a      	str	r2, [r3, #20]
 8002822:	e05d      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b13      	cmp	r3, #19
 800282a:	d81c      	bhi.n	8002866 <HAL_ADC_ConfigChannel+0x446>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6919      	ldr	r1, [r3, #16]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	4613      	mov	r3, r2
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	4413      	add	r3, r2
 800283c:	3b1e      	subs	r3, #30
 800283e:	2207      	movs	r2, #7
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	4019      	ands	r1, r3
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	6898      	ldr	r0, [r3, #8]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4613      	mov	r3, r2
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	4413      	add	r3, r2
 8002856:	3b1e      	subs	r3, #30
 8002858:	fa00 f203 	lsl.w	r2, r0, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	611a      	str	r2, [r3, #16]
 8002864:	e03c      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b1d      	cmp	r3, #29
 800286c:	d81c      	bhi.n	80028a8 <HAL_ADC_ConfigChannel+0x488>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68d9      	ldr	r1, [r3, #12]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	4613      	mov	r3, r2
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	4413      	add	r3, r2
 800287e:	3b3c      	subs	r3, #60	; 0x3c
 8002880:	2207      	movs	r2, #7
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	4019      	ands	r1, r3
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	6898      	ldr	r0, [r3, #8]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	4613      	mov	r3, r2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	4413      	add	r3, r2
 8002898:	3b3c      	subs	r3, #60	; 0x3c
 800289a:	fa00 f203 	lsl.w	r2, r0, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	e01b      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	4613      	mov	r3, r2
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	4413      	add	r3, r2
 80028b8:	3b5a      	subs	r3, #90	; 0x5a
 80028ba:	2207      	movs	r2, #7
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	4019      	ands	r1, r3
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	6898      	ldr	r0, [r3, #8]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4613      	mov	r3, r2
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	4413      	add	r3, r2
 80028d2:	3b5a      	subs	r3, #90	; 0x5a
 80028d4:	fa00 f203 	lsl.w	r2, r0, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b10      	cmp	r3, #16
 80028e6:	d003      	beq.n	80028f0 <HAL_ADC_ConfigChannel+0x4d0>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028ec:	2b11      	cmp	r3, #17
 80028ee:	d121      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x514>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80028f0:	4b15      	ldr	r3, [pc, #84]	; (8002948 <HAL_ADC_ConfigChannel+0x528>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d11b      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x514>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80028fc:	4b12      	ldr	r3, [pc, #72]	; (8002948 <HAL_ADC_ConfigChannel+0x528>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	4a11      	ldr	r2, [pc, #68]	; (8002948 <HAL_ADC_ConfigChannel+0x528>)
 8002902:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002906:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b10      	cmp	r3, #16
 800290e:	d111      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x514>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002910:	4b0e      	ldr	r3, [pc, #56]	; (800294c <HAL_ADC_ConfigChannel+0x52c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a0e      	ldr	r2, [pc, #56]	; (8002950 <HAL_ADC_ConfigChannel+0x530>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	0c9a      	lsrs	r2, r3, #18
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002926:	e002      	b.n	800292e <HAL_ADC_ConfigChannel+0x50e>
          {
            wait_loop_index--;
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	3b01      	subs	r3, #1
 800292c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f9      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x508>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800293c:	7bfb      	ldrb	r3, [r7, #15]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40012700 	.word	0x40012700
 800294c:	20000004 	.word	0x20000004
 8002950:	431bde83 	.word	0x431bde83

08002954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002964:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <__NVIC_SetPriorityGrouping+0x44>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002970:	4013      	ands	r3, r2
 8002972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800297c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002986:	4a04      	ldr	r2, [pc, #16]	; (8002998 <__NVIC_SetPriorityGrouping+0x44>)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	60d3      	str	r3, [r2, #12]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <__NVIC_GetPriorityGrouping+0x18>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	0a1b      	lsrs	r3, r3, #8
 80029a6:	f003 0307 	and.w	r3, r3, #7
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	db0b      	blt.n	80029e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	f003 021f 	and.w	r2, r3, #31
 80029d0:	4906      	ldr	r1, [pc, #24]	; (80029ec <__NVIC_EnableIRQ+0x34>)
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	2001      	movs	r0, #1
 80029da:	fa00 f202 	lsl.w	r2, r0, r2
 80029de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	e000e100 	.word	0xe000e100

080029f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	6039      	str	r1, [r7, #0]
 80029fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	db0a      	blt.n	8002a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	490c      	ldr	r1, [pc, #48]	; (8002a3c <__NVIC_SetPriority+0x4c>)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	0112      	lsls	r2, r2, #4
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	440b      	add	r3, r1
 8002a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a18:	e00a      	b.n	8002a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4908      	ldr	r1, [pc, #32]	; (8002a40 <__NVIC_SetPriority+0x50>)
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	3b04      	subs	r3, #4
 8002a28:	0112      	lsls	r2, r2, #4
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	761a      	strb	r2, [r3, #24]
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	e000e100 	.word	0xe000e100
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b089      	sub	sp, #36	; 0x24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f1c3 0307 	rsb	r3, r3, #7
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	bf28      	it	cs
 8002a62:	2304      	movcs	r3, #4
 8002a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d902      	bls.n	8002a74 <NVIC_EncodePriority+0x30>
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3b03      	subs	r3, #3
 8002a72:	e000      	b.n	8002a76 <NVIC_EncodePriority+0x32>
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	f04f 32ff 	mov.w	r2, #4294967295
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43da      	mvns	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	401a      	ands	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	43d9      	mvns	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a9c:	4313      	orrs	r3, r2
         );
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3724      	adds	r7, #36	; 0x24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b07      	cmp	r3, #7
 8002ab4:	d00f      	beq.n	8002ad6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b06      	cmp	r3, #6
 8002aba:	d00c      	beq.n	8002ad6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b05      	cmp	r3, #5
 8002ac0:	d009      	beq.n	8002ad6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d006      	beq.n	8002ad6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d003      	beq.n	8002ad6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ace:	21ac      	movs	r1, #172	; 0xac
 8002ad0:	4804      	ldr	r0, [pc, #16]	; (8002ae4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002ad2:	f7fe fcf1 	bl	80014b8 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff ff3c 	bl	8002954 <__NVIC_SetPriorityGrouping>
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	0800a998 	.word	0x0800a998

08002ae8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b0f      	cmp	r3, #15
 8002afe:	d903      	bls.n	8002b08 <HAL_NVIC_SetPriority+0x20>
 8002b00:	21c4      	movs	r1, #196	; 0xc4
 8002b02:	480e      	ldr	r0, [pc, #56]	; (8002b3c <HAL_NVIC_SetPriority+0x54>)
 8002b04:	f7fe fcd8 	bl	80014b8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	2b0f      	cmp	r3, #15
 8002b0c:	d903      	bls.n	8002b16 <HAL_NVIC_SetPriority+0x2e>
 8002b0e:	21c5      	movs	r1, #197	; 0xc5
 8002b10:	480a      	ldr	r0, [pc, #40]	; (8002b3c <HAL_NVIC_SetPriority+0x54>)
 8002b12:	f7fe fcd1 	bl	80014b8 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b16:	f7ff ff41 	bl	800299c <__NVIC_GetPriorityGrouping>
 8002b1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	6978      	ldr	r0, [r7, #20]
 8002b22:	f7ff ff8f 	bl	8002a44 <NVIC_EncodePriority>
 8002b26:	4602      	mov	r2, r0
 8002b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2c:	4611      	mov	r1, r2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff ff5e 	bl	80029f0 <__NVIC_SetPriority>
}
 8002b34:	bf00      	nop
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	0800a998 	.word	0x0800a998

08002b40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	da03      	bge.n	8002b5a <HAL_NVIC_EnableIRQ+0x1a>
 8002b52:	21d8      	movs	r1, #216	; 0xd8
 8002b54:	4805      	ldr	r0, [pc, #20]	; (8002b6c <HAL_NVIC_EnableIRQ+0x2c>)
 8002b56:	f7fe fcaf 	bl	80014b8 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff ff2a 	bl	80029b8 <__NVIC_EnableIRQ>
}
 8002b64:	bf00      	nop
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	0800a998 	.word	0x0800a998

08002b70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e109      	b.n	8002d96 <HAL_DMA_Init+0x226>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a86      	ldr	r2, [pc, #536]	; (8002da0 <HAL_DMA_Init+0x230>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d03a      	beq.n	8002c02 <HAL_DMA_Init+0x92>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a84      	ldr	r2, [pc, #528]	; (8002da4 <HAL_DMA_Init+0x234>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d035      	beq.n	8002c02 <HAL_DMA_Init+0x92>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a83      	ldr	r2, [pc, #524]	; (8002da8 <HAL_DMA_Init+0x238>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d030      	beq.n	8002c02 <HAL_DMA_Init+0x92>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a81      	ldr	r2, [pc, #516]	; (8002dac <HAL_DMA_Init+0x23c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d02b      	beq.n	8002c02 <HAL_DMA_Init+0x92>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a80      	ldr	r2, [pc, #512]	; (8002db0 <HAL_DMA_Init+0x240>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d026      	beq.n	8002c02 <HAL_DMA_Init+0x92>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a7e      	ldr	r2, [pc, #504]	; (8002db4 <HAL_DMA_Init+0x244>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d021      	beq.n	8002c02 <HAL_DMA_Init+0x92>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a7d      	ldr	r2, [pc, #500]	; (8002db8 <HAL_DMA_Init+0x248>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d01c      	beq.n	8002c02 <HAL_DMA_Init+0x92>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a7b      	ldr	r2, [pc, #492]	; (8002dbc <HAL_DMA_Init+0x24c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d017      	beq.n	8002c02 <HAL_DMA_Init+0x92>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a7a      	ldr	r2, [pc, #488]	; (8002dc0 <HAL_DMA_Init+0x250>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d012      	beq.n	8002c02 <HAL_DMA_Init+0x92>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a78      	ldr	r2, [pc, #480]	; (8002dc4 <HAL_DMA_Init+0x254>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00d      	beq.n	8002c02 <HAL_DMA_Init+0x92>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a77      	ldr	r2, [pc, #476]	; (8002dc8 <HAL_DMA_Init+0x258>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d008      	beq.n	8002c02 <HAL_DMA_Init+0x92>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a75      	ldr	r2, [pc, #468]	; (8002dcc <HAL_DMA_Init+0x25c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d003      	beq.n	8002c02 <HAL_DMA_Init+0x92>
 8002bfa:	219a      	movs	r1, #154	; 0x9a
 8002bfc:	4874      	ldr	r0, [pc, #464]	; (8002dd0 <HAL_DMA_Init+0x260>)
 8002bfe:	f7fe fc5b 	bl	80014b8 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00c      	beq.n	8002c24 <HAL_DMA_Init+0xb4>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b10      	cmp	r3, #16
 8002c10:	d008      	beq.n	8002c24 <HAL_DMA_Init+0xb4>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c1a:	d003      	beq.n	8002c24 <HAL_DMA_Init+0xb4>
 8002c1c:	219b      	movs	r1, #155	; 0x9b
 8002c1e:	486c      	ldr	r0, [pc, #432]	; (8002dd0 <HAL_DMA_Init+0x260>)
 8002c20:	f7fe fc4a 	bl	80014b8 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b40      	cmp	r3, #64	; 0x40
 8002c2a:	d007      	beq.n	8002c3c <HAL_DMA_Init+0xcc>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_DMA_Init+0xcc>
 8002c34:	219c      	movs	r1, #156	; 0x9c
 8002c36:	4866      	ldr	r0, [pc, #408]	; (8002dd0 <HAL_DMA_Init+0x260>)
 8002c38:	f7fe fc3e 	bl	80014b8 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	2b80      	cmp	r3, #128	; 0x80
 8002c42:	d007      	beq.n	8002c54 <HAL_DMA_Init+0xe4>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <HAL_DMA_Init+0xe4>
 8002c4c:	219d      	movs	r1, #157	; 0x9d
 8002c4e:	4860      	ldr	r0, [pc, #384]	; (8002dd0 <HAL_DMA_Init+0x260>)
 8002c50:	f7fe fc32 	bl	80014b8 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00d      	beq.n	8002c78 <HAL_DMA_Init+0x108>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c64:	d008      	beq.n	8002c78 <HAL_DMA_Init+0x108>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c6e:	d003      	beq.n	8002c78 <HAL_DMA_Init+0x108>
 8002c70:	219e      	movs	r1, #158	; 0x9e
 8002c72:	4857      	ldr	r0, [pc, #348]	; (8002dd0 <HAL_DMA_Init+0x260>)
 8002c74:	f7fe fc20 	bl	80014b8 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00d      	beq.n	8002c9c <HAL_DMA_Init+0x12c>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c88:	d008      	beq.n	8002c9c <HAL_DMA_Init+0x12c>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c92:	d003      	beq.n	8002c9c <HAL_DMA_Init+0x12c>
 8002c94:	219f      	movs	r1, #159	; 0x9f
 8002c96:	484e      	ldr	r0, [pc, #312]	; (8002dd0 <HAL_DMA_Init+0x260>)
 8002c98:	f7fe fc0e 	bl	80014b8 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d007      	beq.n	8002cb4 <HAL_DMA_Init+0x144>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	2b20      	cmp	r3, #32
 8002caa:	d003      	beq.n	8002cb4 <HAL_DMA_Init+0x144>
 8002cac:	21a0      	movs	r1, #160	; 0xa0
 8002cae:	4848      	ldr	r0, [pc, #288]	; (8002dd0 <HAL_DMA_Init+0x260>)
 8002cb0:	f7fe fc02 	bl	80014b8 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d012      	beq.n	8002ce2 <HAL_DMA_Init+0x172>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc4:	d00d      	beq.n	8002ce2 <HAL_DMA_Init+0x172>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cce:	d008      	beq.n	8002ce2 <HAL_DMA_Init+0x172>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cd8:	d003      	beq.n	8002ce2 <HAL_DMA_Init+0x172>
 8002cda:	21a1      	movs	r1, #161	; 0xa1
 8002cdc:	483c      	ldr	r0, [pc, #240]	; (8002dd0 <HAL_DMA_Init+0x260>)
 8002cde:	f7fe fbeb 	bl	80014b8 <assert_failed>

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4b3a      	ldr	r3, [pc, #232]	; (8002dd4 <HAL_DMA_Init+0x264>)
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d80f      	bhi.n	8002d0e <HAL_DMA_Init+0x19e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	4b38      	ldr	r3, [pc, #224]	; (8002dd8 <HAL_DMA_Init+0x268>)
 8002cf6:	4413      	add	r3, r2
 8002cf8:	4a38      	ldr	r2, [pc, #224]	; (8002ddc <HAL_DMA_Init+0x26c>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	091b      	lsrs	r3, r3, #4
 8002d00:	009a      	lsls	r2, r3, #2
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a35      	ldr	r2, [pc, #212]	; (8002de0 <HAL_DMA_Init+0x270>)
 8002d0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d0c:	e00e      	b.n	8002d2c <HAL_DMA_Init+0x1bc>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	461a      	mov	r2, r3
 8002d14:	4b33      	ldr	r3, [pc, #204]	; (8002de4 <HAL_DMA_Init+0x274>)
 8002d16:	4413      	add	r3, r2
 8002d18:	4a30      	ldr	r2, [pc, #192]	; (8002ddc <HAL_DMA_Init+0x26c>)
 8002d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1e:	091b      	lsrs	r3, r3, #4
 8002d20:	009a      	lsls	r2, r3, #2
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a2f      	ldr	r2, [pc, #188]	; (8002de8 <HAL_DMA_Init+0x278>)
 8002d2a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40026008 	.word	0x40026008
 8002da4:	4002601c 	.word	0x4002601c
 8002da8:	40026030 	.word	0x40026030
 8002dac:	40026044 	.word	0x40026044
 8002db0:	40026058 	.word	0x40026058
 8002db4:	4002606c 	.word	0x4002606c
 8002db8:	40026080 	.word	0x40026080
 8002dbc:	40026408 	.word	0x40026408
 8002dc0:	4002641c 	.word	0x4002641c
 8002dc4:	40026430 	.word	0x40026430
 8002dc8:	40026444 	.word	0x40026444
 8002dcc:	40026458 	.word	0x40026458
 8002dd0:	0800a9d4 	.word	0x0800a9d4
 8002dd4:	40026407 	.word	0x40026407
 8002dd8:	bffd9ff8 	.word	0xbffd9ff8
 8002ddc:	cccccccd 	.word	0xcccccccd
 8002de0:	40026000 	.word	0x40026000
 8002de4:	bffd9bf8 	.word	0xbffd9bf8
 8002de8:	40026400 	.word	0x40026400

08002dec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_DMA_Start_IT+0x20>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e0a:	d304      	bcc.n	8002e16 <HAL_DMA_Start_IT+0x2a>
 8002e0c:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8002e10:	482c      	ldr	r0, [pc, #176]	; (8002ec4 <HAL_DMA_Start_IT+0xd8>)
 8002e12:	f7fe fb51 	bl	80014b8 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_DMA_Start_IT+0x38>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e04b      	b.n	8002ebc <HAL_DMA_Start_IT+0xd0>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d13a      	bne.n	8002eae <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0201 	bic.w	r2, r2, #1
 8002e54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	68b9      	ldr	r1, [r7, #8]
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 f8e2 	bl	8003026 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d008      	beq.n	8002e7c <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f042 020e 	orr.w	r2, r2, #14
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	e00f      	b.n	8002e9c <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0204 	bic.w	r2, r2, #4
 8002e8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 020a 	orr.w	r2, r2, #10
 8002e9a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	e005      	b.n	8002eba <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	0800a9d4 	.word	0x0800a9d4

08002ec8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	f003 031c 	and.w	r3, r3, #28
 8002ee8:	2204      	movs	r2, #4
 8002eea:	409a      	lsls	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d026      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x7a>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d021      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0320 	and.w	r3, r3, #32
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d107      	bne.n	8002f1c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0204 	bic.w	r2, r2, #4
 8002f1a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	f003 021c 	and.w	r2, r3, #28
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f28:	2104      	movs	r1, #4
 8002f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d071      	beq.n	800301c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002f40:	e06c      	b.n	800301c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f003 031c 	and.w	r3, r3, #28
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d02e      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0xec>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d029      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0320 	and.w	r3, r3, #32
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10b      	bne.n	8002f86 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 020a 	bic.w	r2, r2, #10
 8002f7c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	f003 021c 	and.w	r2, r3, #28
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f92:	2102      	movs	r1, #2
 8002f94:	fa01 f202 	lsl.w	r2, r1, r2
 8002f98:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d038      	beq.n	800301c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002fb2:	e033      	b.n	800301c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	f003 031c 	and.w	r3, r3, #28
 8002fbc:	2208      	movs	r2, #8
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d02a      	beq.n	800301e <HAL_DMA_IRQHandler+0x156>
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d025      	beq.n	800301e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 020e 	bic.w	r2, r2, #14
 8002fe0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f003 021c 	and.w	r2, r3, #28
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fee:	2101      	movs	r1, #1
 8002ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003010:	2b00      	cmp	r3, #0
 8003012:	d004      	beq.n	800301e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800301c:	bf00      	nop
 800301e:	bf00      	nop
}
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003026:	b480      	push	{r7}
 8003028:	b085      	sub	sp, #20
 800302a:	af00      	add	r7, sp, #0
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
 8003032:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	f003 021c 	and.w	r2, r3, #28
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003040:	2101      	movs	r1, #1
 8003042:	fa01 f202 	lsl.w	r2, r1, r2
 8003046:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b10      	cmp	r3, #16
 8003056:	d108      	bne.n	800306a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003068:	e007      	b.n	800307a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	60da      	str	r2, [r3, #12]
}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr

08003084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8003096:	2300      	movs	r3, #0
 8003098:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a3f      	ldr	r2, [pc, #252]	; (800319c <HAL_GPIO_Init+0x118>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d01f      	beq.n	80030e2 <HAL_GPIO_Init+0x5e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a3e      	ldr	r2, [pc, #248]	; (80031a0 <HAL_GPIO_Init+0x11c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d01b      	beq.n	80030e2 <HAL_GPIO_Init+0x5e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a3d      	ldr	r2, [pc, #244]	; (80031a4 <HAL_GPIO_Init+0x120>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d017      	beq.n	80030e2 <HAL_GPIO_Init+0x5e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a3c      	ldr	r2, [pc, #240]	; (80031a8 <HAL_GPIO_Init+0x124>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d013      	beq.n	80030e2 <HAL_GPIO_Init+0x5e>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a3b      	ldr	r2, [pc, #236]	; (80031ac <HAL_GPIO_Init+0x128>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00f      	beq.n	80030e2 <HAL_GPIO_Init+0x5e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a3a      	ldr	r2, [pc, #232]	; (80031b0 <HAL_GPIO_Init+0x12c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00b      	beq.n	80030e2 <HAL_GPIO_Init+0x5e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a39      	ldr	r2, [pc, #228]	; (80031b4 <HAL_GPIO_Init+0x130>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d007      	beq.n	80030e2 <HAL_GPIO_Init+0x5e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a38      	ldr	r2, [pc, #224]	; (80031b8 <HAL_GPIO_Init+0x134>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d003      	beq.n	80030e2 <HAL_GPIO_Init+0x5e>
 80030da:	21b9      	movs	r1, #185	; 0xb9
 80030dc:	4837      	ldr	r0, [pc, #220]	; (80031bc <HAL_GPIO_Init+0x138>)
 80030de:	f7fe f9eb 	bl	80014b8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <HAL_GPIO_Init+0x74>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	0c1b      	lsrs	r3, r3, #16
 80030f2:	041b      	lsls	r3, r3, #16
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <HAL_GPIO_Init+0x7c>
 80030f8:	21ba      	movs	r1, #186	; 0xba
 80030fa:	4830      	ldr	r0, [pc, #192]	; (80031bc <HAL_GPIO_Init+0x138>)
 80030fc:	f7fe f9dc 	bl	80014b8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d035      	beq.n	8003174 <HAL_GPIO_Init+0xf0>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d031      	beq.n	8003174 <HAL_GPIO_Init+0xf0>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b11      	cmp	r3, #17
 8003116:	d02d      	beq.n	8003174 <HAL_GPIO_Init+0xf0>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b02      	cmp	r3, #2
 800311e:	d029      	beq.n	8003174 <HAL_GPIO_Init+0xf0>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b12      	cmp	r3, #18
 8003126:	d025      	beq.n	8003174 <HAL_GPIO_Init+0xf0>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	4a24      	ldr	r2, [pc, #144]	; (80031c0 <HAL_GPIO_Init+0x13c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d020      	beq.n	8003174 <HAL_GPIO_Init+0xf0>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	4a23      	ldr	r2, [pc, #140]	; (80031c4 <HAL_GPIO_Init+0x140>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d01b      	beq.n	8003174 <HAL_GPIO_Init+0xf0>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4a21      	ldr	r2, [pc, #132]	; (80031c8 <HAL_GPIO_Init+0x144>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d016      	beq.n	8003174 <HAL_GPIO_Init+0xf0>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	4a20      	ldr	r2, [pc, #128]	; (80031cc <HAL_GPIO_Init+0x148>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d011      	beq.n	8003174 <HAL_GPIO_Init+0xf0>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	4a1e      	ldr	r2, [pc, #120]	; (80031d0 <HAL_GPIO_Init+0x14c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d00c      	beq.n	8003174 <HAL_GPIO_Init+0xf0>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	4a1d      	ldr	r2, [pc, #116]	; (80031d4 <HAL_GPIO_Init+0x150>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d007      	beq.n	8003174 <HAL_GPIO_Init+0xf0>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b03      	cmp	r3, #3
 800316a:	d003      	beq.n	8003174 <HAL_GPIO_Init+0xf0>
 800316c:	21bb      	movs	r1, #187	; 0xbb
 800316e:	4813      	ldr	r0, [pc, #76]	; (80031bc <HAL_GPIO_Init+0x138>)
 8003170:	f7fe f9a2 	bl	80014b8 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 81e4 	beq.w	8003546 <HAL_GPIO_Init+0x4c2>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b01      	cmp	r3, #1
 8003184:	f000 81df 	beq.w	8003546 <HAL_GPIO_Init+0x4c2>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b02      	cmp	r3, #2
 800318e:	f000 81da 	beq.w	8003546 <HAL_GPIO_Init+0x4c2>
 8003192:	21bc      	movs	r1, #188	; 0xbc
 8003194:	4809      	ldr	r0, [pc, #36]	; (80031bc <HAL_GPIO_Init+0x138>)
 8003196:	f7fe f98f 	bl	80014b8 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800319a:	e1d4      	b.n	8003546 <HAL_GPIO_Init+0x4c2>
 800319c:	40020000 	.word	0x40020000
 80031a0:	40020400 	.word	0x40020400
 80031a4:	40020800 	.word	0x40020800
 80031a8:	40020c00 	.word	0x40020c00
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40021800 	.word	0x40021800
 80031b4:	40021c00 	.word	0x40021c00
 80031b8:	40021400 	.word	0x40021400
 80031bc:	0800aa0c 	.word	0x0800aa0c
 80031c0:	10110000 	.word	0x10110000
 80031c4:	10210000 	.word	0x10210000
 80031c8:	10310000 	.word	0x10310000
 80031cc:	10120000 	.word	0x10120000
 80031d0:	10220000 	.word	0x10220000
 80031d4:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	2101      	movs	r1, #1
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	fa01 f303 	lsl.w	r3, r1, r3
 80031e4:	4013      	ands	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 81a8 	beq.w	8003540 <HAL_GPIO_Init+0x4bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d003      	beq.n	8003200 <HAL_GPIO_Init+0x17c>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b12      	cmp	r3, #18
 80031fe:	d14f      	bne.n	80032a0 <HAL_GPIO_Init+0x21c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a92      	ldr	r2, [pc, #584]	; (800344c <HAL_GPIO_Init+0x3c8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d01f      	beq.n	8003248 <HAL_GPIO_Init+0x1c4>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a91      	ldr	r2, [pc, #580]	; (8003450 <HAL_GPIO_Init+0x3cc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d01b      	beq.n	8003248 <HAL_GPIO_Init+0x1c4>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a90      	ldr	r2, [pc, #576]	; (8003454 <HAL_GPIO_Init+0x3d0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d017      	beq.n	8003248 <HAL_GPIO_Init+0x1c4>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a8f      	ldr	r2, [pc, #572]	; (8003458 <HAL_GPIO_Init+0x3d4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d013      	beq.n	8003248 <HAL_GPIO_Init+0x1c4>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a8e      	ldr	r2, [pc, #568]	; (800345c <HAL_GPIO_Init+0x3d8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d00f      	beq.n	8003248 <HAL_GPIO_Init+0x1c4>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a8d      	ldr	r2, [pc, #564]	; (8003460 <HAL_GPIO_Init+0x3dc>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00b      	beq.n	8003248 <HAL_GPIO_Init+0x1c4>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a8c      	ldr	r2, [pc, #560]	; (8003464 <HAL_GPIO_Init+0x3e0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d007      	beq.n	8003248 <HAL_GPIO_Init+0x1c4>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a8b      	ldr	r2, [pc, #556]	; (8003468 <HAL_GPIO_Init+0x3e4>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d003      	beq.n	8003248 <HAL_GPIO_Init+0x1c4>
 8003240:	21cb      	movs	r1, #203	; 0xcb
 8003242:	488a      	ldr	r0, [pc, #552]	; (800346c <HAL_GPIO_Init+0x3e8>)
 8003244:	f7fe f938 	bl	80014b8 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	2b0f      	cmp	r3, #15
 800324e:	d903      	bls.n	8003258 <HAL_GPIO_Init+0x1d4>
 8003250:	21cc      	movs	r1, #204	; 0xcc
 8003252:	4886      	ldr	r0, [pc, #536]	; (800346c <HAL_GPIO_Init+0x3e8>)
 8003254:	f7fe f930 	bl	80014b8 <assert_failed>
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	08da      	lsrs	r2, r3, #3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3208      	adds	r2, #8
 8003260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003264:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	220f      	movs	r2, #15
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4013      	ands	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	08da      	lsrs	r2, r3, #3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3208      	adds	r2, #8
 800329a:	6939      	ldr	r1, [r7, #16]
 800329c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	2203      	movs	r2, #3
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4013      	ands	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f003 0203 	and.w	r2, r3, #3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d00b      	beq.n	80032f4 <HAL_GPIO_Init+0x270>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d007      	beq.n	80032f4 <HAL_GPIO_Init+0x270>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032e8:	2b11      	cmp	r3, #17
 80032ea:	d003      	beq.n	80032f4 <HAL_GPIO_Init+0x270>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b12      	cmp	r3, #18
 80032f2:	d144      	bne.n	800337e <HAL_GPIO_Init+0x2fa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00f      	beq.n	800331c <HAL_GPIO_Init+0x298>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d00b      	beq.n	800331c <HAL_GPIO_Init+0x298>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d007      	beq.n	800331c <HAL_GPIO_Init+0x298>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	2b03      	cmp	r3, #3
 8003312:	d003      	beq.n	800331c <HAL_GPIO_Init+0x298>
 8003314:	21e1      	movs	r1, #225	; 0xe1
 8003316:	4855      	ldr	r0, [pc, #340]	; (800346c <HAL_GPIO_Init+0x3e8>)
 8003318:	f7fe f8ce 	bl	80014b8 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	2203      	movs	r2, #3
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4013      	ands	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003352:	2201      	movs	r2, #1
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43db      	mvns	r3, r3
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4013      	ands	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	091b      	lsrs	r3, r3, #4
 8003368:	f003 0201 	and.w	r2, r3, #1
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	2203      	movs	r2, #3
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	43db      	mvns	r3, r3
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4013      	ands	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 80c2 	beq.w	8003540 <HAL_GPIO_Init+0x4bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033bc:	4b2c      	ldr	r3, [pc, #176]	; (8003470 <HAL_GPIO_Init+0x3ec>)
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	4a2b      	ldr	r2, [pc, #172]	; (8003470 <HAL_GPIO_Init+0x3ec>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	6213      	str	r3, [r2, #32]
 80033c8:	4b29      	ldr	r3, [pc, #164]	; (8003470 <HAL_GPIO_Init+0x3ec>)
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	60bb      	str	r3, [r7, #8]
 80033d2:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 80033d4:	4a27      	ldr	r2, [pc, #156]	; (8003474 <HAL_GPIO_Init+0x3f0>)
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	089b      	lsrs	r3, r3, #2
 80033da:	3302      	adds	r3, #2
 80033dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	220f      	movs	r2, #15
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4013      	ands	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a14      	ldr	r2, [pc, #80]	; (800344c <HAL_GPIO_Init+0x3c8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d03b      	beq.n	8003478 <HAL_GPIO_Init+0x3f4>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a13      	ldr	r2, [pc, #76]	; (8003450 <HAL_GPIO_Init+0x3cc>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d01f      	beq.n	8003448 <HAL_GPIO_Init+0x3c4>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a12      	ldr	r2, [pc, #72]	; (8003454 <HAL_GPIO_Init+0x3d0>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d019      	beq.n	8003444 <HAL_GPIO_Init+0x3c0>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a11      	ldr	r2, [pc, #68]	; (8003458 <HAL_GPIO_Init+0x3d4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d013      	beq.n	8003440 <HAL_GPIO_Init+0x3bc>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a10      	ldr	r2, [pc, #64]	; (800345c <HAL_GPIO_Init+0x3d8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d00d      	beq.n	800343c <HAL_GPIO_Init+0x3b8>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a11      	ldr	r2, [pc, #68]	; (8003468 <HAL_GPIO_Init+0x3e4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d007      	beq.n	8003438 <HAL_GPIO_Init+0x3b4>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a0d      	ldr	r2, [pc, #52]	; (8003460 <HAL_GPIO_Init+0x3dc>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d101      	bne.n	8003434 <HAL_GPIO_Init+0x3b0>
 8003430:	2306      	movs	r3, #6
 8003432:	e022      	b.n	800347a <HAL_GPIO_Init+0x3f6>
 8003434:	2307      	movs	r3, #7
 8003436:	e020      	b.n	800347a <HAL_GPIO_Init+0x3f6>
 8003438:	2305      	movs	r3, #5
 800343a:	e01e      	b.n	800347a <HAL_GPIO_Init+0x3f6>
 800343c:	2304      	movs	r3, #4
 800343e:	e01c      	b.n	800347a <HAL_GPIO_Init+0x3f6>
 8003440:	2303      	movs	r3, #3
 8003442:	e01a      	b.n	800347a <HAL_GPIO_Init+0x3f6>
 8003444:	2302      	movs	r3, #2
 8003446:	e018      	b.n	800347a <HAL_GPIO_Init+0x3f6>
 8003448:	2301      	movs	r3, #1
 800344a:	e016      	b.n	800347a <HAL_GPIO_Init+0x3f6>
 800344c:	40020000 	.word	0x40020000
 8003450:	40020400 	.word	0x40020400
 8003454:	40020800 	.word	0x40020800
 8003458:	40020c00 	.word	0x40020c00
 800345c:	40021000 	.word	0x40021000
 8003460:	40021800 	.word	0x40021800
 8003464:	40021c00 	.word	0x40021c00
 8003468:	40021400 	.word	0x40021400
 800346c:	0800aa0c 	.word	0x0800aa0c
 8003470:	40023800 	.word	0x40023800
 8003474:	40010000 	.word	0x40010000
 8003478:	2300      	movs	r3, #0
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	f002 0203 	and.w	r2, r2, #3
 8003480:	0092      	lsls	r2, r2, #2
 8003482:	4093      	lsls	r3, r2
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	4313      	orrs	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800348a:	4935      	ldr	r1, [pc, #212]	; (8003560 <HAL_GPIO_Init+0x4dc>)
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	089b      	lsrs	r3, r3, #2
 8003490:	3302      	adds	r3, #2
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003498:	4b32      	ldr	r3, [pc, #200]	; (8003564 <HAL_GPIO_Init+0x4e0>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	43db      	mvns	r3, r3
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4013      	ands	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_GPIO_Init+0x438>
        {
          SET_BIT(temp, iocurrent); 
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80034bc:	4a29      	ldr	r2, [pc, #164]	; (8003564 <HAL_GPIO_Init+0x4e0>)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034c2:	4b28      	ldr	r3, [pc, #160]	; (8003564 <HAL_GPIO_Init+0x4e0>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	43db      	mvns	r3, r3
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	4013      	ands	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_GPIO_Init+0x462>
        {
          SET_BIT(temp, iocurrent); 
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80034e6:	4a1f      	ldr	r2, [pc, #124]	; (8003564 <HAL_GPIO_Init+0x4e0>)
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034ec:	4b1d      	ldr	r3, [pc, #116]	; (8003564 <HAL_GPIO_Init+0x4e0>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	43db      	mvns	r3, r3
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4013      	ands	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_GPIO_Init+0x48c>
        {
          SET_BIT(temp, iocurrent); 
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4313      	orrs	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003510:	4a14      	ldr	r2, [pc, #80]	; (8003564 <HAL_GPIO_Init+0x4e0>)
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003516:	4b13      	ldr	r3, [pc, #76]	; (8003564 <HAL_GPIO_Init+0x4e0>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	43db      	mvns	r3, r3
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4013      	ands	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_GPIO_Init+0x4b6>
        {
          SET_BIT(temp, iocurrent); 
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800353a:	4a0a      	ldr	r2, [pc, #40]	; (8003564 <HAL_GPIO_Init+0x4e0>)
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	3301      	adds	r3, #1
 8003544:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	fa22 f303 	lsr.w	r3, r2, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	f47f ae41 	bne.w	80031d8 <HAL_GPIO_Init+0x154>
  } 
}
 8003556:	bf00      	nop
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40010000 	.word	0x40010000
 8003564:	40010400 	.word	0x40010400

08003568 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003574:	887b      	ldrh	r3, [r7, #2]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d004      	beq.n	8003584 <HAL_GPIO_ReadPin+0x1c>
 800357a:	887b      	ldrh	r3, [r7, #2]
 800357c:	0c1b      	lsrs	r3, r3, #16
 800357e:	041b      	lsls	r3, r3, #16
 8003580:	2b00      	cmp	r3, #0
 8003582:	d004      	beq.n	800358e <HAL_GPIO_ReadPin+0x26>
 8003584:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8003588:	4809      	ldr	r0, [pc, #36]	; (80035b0 <HAL_GPIO_ReadPin+0x48>)
 800358a:	f7fd ff95 	bl	80014b8 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691a      	ldr	r2, [r3, #16]
 8003592:	887b      	ldrh	r3, [r7, #2]
 8003594:	4013      	ands	r3, r2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800359a:	2301      	movs	r3, #1
 800359c:	73fb      	strb	r3, [r7, #15]
 800359e:	e001      	b.n	80035a4 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035a0:	2300      	movs	r3, #0
 80035a2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	0800aa0c 	.word	0x0800aa0c

080035b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	460b      	mov	r3, r1
 80035be:	807b      	strh	r3, [r7, #2]
 80035c0:	4613      	mov	r3, r2
 80035c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80035c4:	887b      	ldrh	r3, [r7, #2]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d004      	beq.n	80035d4 <HAL_GPIO_WritePin+0x20>
 80035ca:	887b      	ldrh	r3, [r7, #2]
 80035cc:	0c1b      	lsrs	r3, r3, #16
 80035ce:	041b      	lsls	r3, r3, #16
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d004      	beq.n	80035de <HAL_GPIO_WritePin+0x2a>
 80035d4:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80035d8:	480e      	ldr	r0, [pc, #56]	; (8003614 <HAL_GPIO_WritePin+0x60>)
 80035da:	f7fd ff6d 	bl	80014b8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80035de:	787b      	ldrb	r3, [r7, #1]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d007      	beq.n	80035f4 <HAL_GPIO_WritePin+0x40>
 80035e4:	787b      	ldrb	r3, [r7, #1]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d004      	beq.n	80035f4 <HAL_GPIO_WritePin+0x40>
 80035ea:	f240 11a5 	movw	r1, #421	; 0x1a5
 80035ee:	4809      	ldr	r0, [pc, #36]	; (8003614 <HAL_GPIO_WritePin+0x60>)
 80035f0:	f7fd ff62 	bl	80014b8 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80035f4:	787b      	ldrb	r3, [r7, #1]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035fa:	887a      	ldrh	r2, [r7, #2]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8003600:	e003      	b.n	800360a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8003602:	887b      	ldrh	r3, [r7, #2]
 8003604:	041a      	lsls	r2, r3, #16
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	619a      	str	r2, [r3, #24]
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	0800aa0c 	.word	0x0800aa0c

08003618 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8003622:	4b08      	ldr	r3, [pc, #32]	; (8003644 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003624:	695a      	ldr	r2, [r3, #20]
 8003626:	88fb      	ldrh	r3, [r7, #6]
 8003628:	4013      	ands	r3, r2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d006      	beq.n	800363c <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800362e:	4a05      	ldr	r2, [pc, #20]	; (8003644 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003630:	88fb      	ldrh	r3, [r7, #6]
 8003632:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003634:	88fb      	ldrh	r3, [r7, #6]
 8003636:	4618      	mov	r0, r3
 8003638:	f7fd fa86 	bl	8000b48 <HAL_GPIO_EXTI_Callback>
  }
}
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40010400 	.word	0x40010400

08003648 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e19b      	b.n	8003992 <HAL_I2C_Init+0x34a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a98      	ldr	r2, [pc, #608]	; (80038c0 <HAL_I2C_Init+0x278>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d009      	beq.n	8003678 <HAL_I2C_Init+0x30>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a96      	ldr	r2, [pc, #600]	; (80038c4 <HAL_I2C_Init+0x27c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d004      	beq.n	8003678 <HAL_I2C_Init+0x30>
 800366e:	f240 11bb 	movw	r1, #443	; 0x1bb
 8003672:	4895      	ldr	r0, [pc, #596]	; (80038c8 <HAL_I2C_Init+0x280>)
 8003674:	f7fd ff20 	bl	80014b8 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d004      	beq.n	800368a <HAL_I2C_Init+0x42>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	4a91      	ldr	r2, [pc, #580]	; (80038cc <HAL_I2C_Init+0x284>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d904      	bls.n	8003694 <HAL_I2C_Init+0x4c>
 800368a:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800368e:	488e      	ldr	r0, [pc, #568]	; (80038c8 <HAL_I2C_Init+0x280>)
 8003690:	f7fd ff12 	bl	80014b8 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d009      	beq.n	80036b0 <HAL_I2C_Init+0x68>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036a4:	d004      	beq.n	80036b0 <HAL_I2C_Init+0x68>
 80036a6:	f240 11bd 	movw	r1, #445	; 0x1bd
 80036aa:	4887      	ldr	r0, [pc, #540]	; (80038c8 <HAL_I2C_Init+0x280>)
 80036ac:	f7fd ff04 	bl	80014b8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036b8:	f023 0303 	bic.w	r3, r3, #3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d004      	beq.n	80036ca <HAL_I2C_Init+0x82>
 80036c0:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80036c4:	4880      	ldr	r0, [pc, #512]	; (80038c8 <HAL_I2C_Init+0x280>)
 80036c6:	f7fd fef7 	bl	80014b8 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036d2:	d009      	beq.n	80036e8 <HAL_I2C_Init+0xa0>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80036dc:	d004      	beq.n	80036e8 <HAL_I2C_Init+0xa0>
 80036de:	f240 11bf 	movw	r1, #447	; 0x1bf
 80036e2:	4879      	ldr	r0, [pc, #484]	; (80038c8 <HAL_I2C_Init+0x280>)
 80036e4:	f7fd fee8 	bl	80014b8 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_I2C_Init+0xba>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d004      	beq.n	8003702 <HAL_I2C_Init+0xba>
 80036f8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80036fc:	4872      	ldr	r0, [pc, #456]	; (80038c8 <HAL_I2C_Init+0x280>)
 80036fe:	f7fd fedb 	bl	80014b8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800370a:	2b00      	cmp	r3, #0
 800370c:	d004      	beq.n	8003718 <HAL_I2C_Init+0xd0>
 800370e:	f240 11c1 	movw	r1, #449	; 0x1c1
 8003712:	486d      	ldr	r0, [pc, #436]	; (80038c8 <HAL_I2C_Init+0x280>)
 8003714:	f7fd fed0 	bl	80014b8 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <HAL_I2C_Init+0xea>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	2b40      	cmp	r3, #64	; 0x40
 8003726:	d004      	beq.n	8003732 <HAL_I2C_Init+0xea>
 8003728:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800372c:	4866      	ldr	r0, [pc, #408]	; (80038c8 <HAL_I2C_Init+0x280>)
 800372e:	f7fd fec3 	bl	80014b8 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <HAL_I2C_Init+0x104>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	2b80      	cmp	r3, #128	; 0x80
 8003740:	d004      	beq.n	800374c <HAL_I2C_Init+0x104>
 8003742:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003746:	4860      	ldr	r0, [pc, #384]	; (80038c8 <HAL_I2C_Init+0x280>)
 8003748:	f7fd feb6 	bl	80014b8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d106      	bne.n	8003766 <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7fd fdc9 	bl	80012f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2224      	movs	r2, #36	; 0x24
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0201 	bic.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800377e:	f001 fdfd 	bl	800537c <HAL_RCC_GetPCLK1Freq>
 8003782:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	4a51      	ldr	r2, [pc, #324]	; (80038d0 <HAL_I2C_Init+0x288>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d807      	bhi.n	800379e <HAL_I2C_Init+0x156>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4a50      	ldr	r2, [pc, #320]	; (80038d4 <HAL_I2C_Init+0x28c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	bf94      	ite	ls
 8003796:	2301      	movls	r3, #1
 8003798:	2300      	movhi	r3, #0
 800379a:	b2db      	uxtb	r3, r3
 800379c:	e006      	b.n	80037ac <HAL_I2C_Init+0x164>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	4a4d      	ldr	r2, [pc, #308]	; (80038d8 <HAL_I2C_Init+0x290>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	bf94      	ite	ls
 80037a6:	2301      	movls	r3, #1
 80037a8:	2300      	movhi	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <HAL_I2C_Init+0x16c>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0ee      	b.n	8003992 <HAL_I2C_Init+0x34a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4a49      	ldr	r2, [pc, #292]	; (80038dc <HAL_I2C_Init+0x294>)
 80037b8:	fba2 2303 	umull	r2, r3, r2, r3
 80037bc:	0c9b      	lsrs	r3, r3, #18
 80037be:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	4a3b      	ldr	r2, [pc, #236]	; (80038d0 <HAL_I2C_Init+0x288>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d802      	bhi.n	80037ee <HAL_I2C_Init+0x1a6>
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	3301      	adds	r3, #1
 80037ec:	e009      	b.n	8003802 <HAL_I2C_Init+0x1ba>
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037f4:	fb02 f303 	mul.w	r3, r2, r3
 80037f8:	4a39      	ldr	r2, [pc, #228]	; (80038e0 <HAL_I2C_Init+0x298>)
 80037fa:	fba2 2303 	umull	r2, r3, r2, r3
 80037fe:	099b      	lsrs	r3, r3, #6
 8003800:	3301      	adds	r3, #1
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	430b      	orrs	r3, r1
 8003808:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003814:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	492c      	ldr	r1, [pc, #176]	; (80038d0 <HAL_I2C_Init+0x288>)
 800381e:	428b      	cmp	r3, r1
 8003820:	d80d      	bhi.n	800383e <HAL_I2C_Init+0x1f6>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1e59      	subs	r1, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003830:	3301      	adds	r3, #1
 8003832:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003836:	2b04      	cmp	r3, #4
 8003838:	bf38      	it	cc
 800383a:	2304      	movcc	r3, #4
 800383c:	e062      	b.n	8003904 <HAL_I2C_Init+0x2bc>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d111      	bne.n	800386a <HAL_I2C_Init+0x222>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1e58      	subs	r0, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6859      	ldr	r1, [r3, #4]
 800384e:	460b      	mov	r3, r1
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	440b      	add	r3, r1
 8003854:	fbb0 f3f3 	udiv	r3, r0, r3
 8003858:	3301      	adds	r3, #1
 800385a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800385e:	2b00      	cmp	r3, #0
 8003860:	bf0c      	ite	eq
 8003862:	2301      	moveq	r3, #1
 8003864:	2300      	movne	r3, #0
 8003866:	b2db      	uxtb	r3, r3
 8003868:	e012      	b.n	8003890 <HAL_I2C_Init+0x248>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	1e58      	subs	r0, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6859      	ldr	r1, [r3, #4]
 8003872:	460b      	mov	r3, r1
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	0099      	lsls	r1, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003880:	3301      	adds	r3, #1
 8003882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003886:	2b00      	cmp	r3, #0
 8003888:	bf0c      	ite	eq
 800388a:	2301      	moveq	r3, #1
 800388c:	2300      	movne	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_I2C_Init+0x250>
 8003894:	2301      	movs	r3, #1
 8003896:	e035      	b.n	8003904 <HAL_I2C_Init+0x2bc>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d121      	bne.n	80038e4 <HAL_I2C_Init+0x29c>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	1e58      	subs	r0, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6859      	ldr	r1, [r3, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	440b      	add	r3, r1
 80038ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80038b2:	3301      	adds	r3, #1
 80038b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038bc:	e022      	b.n	8003904 <HAL_I2C_Init+0x2bc>
 80038be:	bf00      	nop
 80038c0:	40005400 	.word	0x40005400
 80038c4:	40005800 	.word	0x40005800
 80038c8:	0800aa48 	.word	0x0800aa48
 80038cc:	00061a80 	.word	0x00061a80
 80038d0:	000186a0 	.word	0x000186a0
 80038d4:	001e847f 	.word	0x001e847f
 80038d8:	003d08ff 	.word	0x003d08ff
 80038dc:	431bde83 	.word	0x431bde83
 80038e0:	10624dd3 	.word	0x10624dd3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	1e58      	subs	r0, r3, #1
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6859      	ldr	r1, [r3, #4]
 80038ec:	460b      	mov	r3, r1
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	0099      	lsls	r1, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038fa:	3301      	adds	r3, #1
 80038fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003900:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	6809      	ldr	r1, [r1, #0]
 8003908:	4313      	orrs	r3, r2
 800390a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69da      	ldr	r2, [r3, #28]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003932:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6911      	ldr	r1, [r2, #16]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	68d2      	ldr	r2, [r2, #12]
 800393e:	4311      	orrs	r1, r2
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	430b      	orrs	r3, r1
 8003946:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695a      	ldr	r2, [r3, #20]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0201 	orr.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop

0800399c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	607a      	str	r2, [r7, #4]
 80039a6:	461a      	mov	r2, r3
 80039a8:	460b      	mov	r3, r1
 80039aa:	817b      	strh	r3, [r7, #10]
 80039ac:	4613      	mov	r3, r2
 80039ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039b0:	f7fe fa88 	bl	8001ec4 <HAL_GetTick>
 80039b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b20      	cmp	r3, #32
 80039c0:	f040 80e0 	bne.w	8003b84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	2319      	movs	r3, #25
 80039ca:	2201      	movs	r2, #1
 80039cc:	4970      	ldr	r1, [pc, #448]	; (8003b90 <HAL_I2C_Master_Transmit+0x1f4>)
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 fc5a 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80039da:	2302      	movs	r3, #2
 80039dc:	e0d3      	b.n	8003b86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_I2C_Master_Transmit+0x50>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e0cc      	b.n	8003b86 <HAL_I2C_Master_Transmit+0x1ea>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d007      	beq.n	8003a12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f042 0201 	orr.w	r2, r2, #1
 8003a10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2221      	movs	r2, #33	; 0x21
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2210      	movs	r2, #16
 8003a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	893a      	ldrh	r2, [r7, #8]
 8003a42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4a50      	ldr	r2, [pc, #320]	; (8003b94 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a54:	8979      	ldrh	r1, [r7, #10]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	6a3a      	ldr	r2, [r7, #32]
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 face 	bl	8003ffc <I2C_MasterRequestWrite>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e08d      	b.n	8003b86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	613b      	str	r3, [r7, #16]
 8003a7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a80:	e066      	b.n	8003b50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	6a39      	ldr	r1, [r7, #32]
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fcd4 	bl	8004434 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00d      	beq.n	8003aae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d107      	bne.n	8003aaa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e06b      	b.n	8003b86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	781a      	ldrb	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d11b      	bne.n	8003b24 <HAL_I2C_Master_Transmit+0x188>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d017      	beq.n	8003b24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	781a      	ldrb	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	6a39      	ldr	r1, [r7, #32]
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 fcc4 	bl	80044b6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00d      	beq.n	8003b50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d107      	bne.n	8003b4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e01a      	b.n	8003b86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d194      	bne.n	8003a82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	e000      	b.n	8003b86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b84:	2302      	movs	r3, #2
  }
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	00100002 	.word	0x00100002
 8003b94:	ffff0000 	.word	0xffff0000

08003b98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08c      	sub	sp, #48	; 0x30
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	4608      	mov	r0, r1
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	817b      	strh	r3, [r7, #10]
 8003baa:	460b      	mov	r3, r1
 8003bac:	813b      	strh	r3, [r7, #8]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bb2:	f7fe f987 	bl	8001ec4 <HAL_GetTick>
 8003bb6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8003bb8:	88fb      	ldrh	r3, [r7, #6]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d007      	beq.n	8003bce <HAL_I2C_Mem_Read+0x36>
 8003bbe:	88fb      	ldrh	r3, [r7, #6]
 8003bc0:	2b10      	cmp	r3, #16
 8003bc2:	d004      	beq.n	8003bce <HAL_I2C_Mem_Read+0x36>
 8003bc4:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8003bc8:	4881      	ldr	r0, [pc, #516]	; (8003dd0 <HAL_I2C_Mem_Read+0x238>)
 8003bca:	f7fd fc75 	bl	80014b8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b20      	cmp	r3, #32
 8003bd8:	f040 8209 	bne.w	8003fee <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	2319      	movs	r3, #25
 8003be2:	2201      	movs	r2, #1
 8003be4:	497b      	ldr	r1, [pc, #492]	; (8003dd4 <HAL_I2C_Mem_Read+0x23c>)
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 fb4e 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e1fc      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_I2C_Mem_Read+0x6c>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e1f5      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x458>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d007      	beq.n	8003c2a <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f042 0201 	orr.w	r2, r2, #1
 8003c28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c38:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2222      	movs	r2, #34	; 0x22
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2240      	movs	r2, #64	; 0x40
 8003c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4a5b      	ldr	r2, [pc, #364]	; (8003dd8 <HAL_I2C_Mem_Read+0x240>)
 8003c6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c6c:	88f8      	ldrh	r0, [r7, #6]
 8003c6e:	893a      	ldrh	r2, [r7, #8]
 8003c70:	8979      	ldrh	r1, [r7, #10]
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	9301      	str	r3, [sp, #4]
 8003c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 fa33 	bl	80040e8 <I2C_RequestMemoryRead>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e1b1      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d113      	bne.n	8003cbc <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c94:	2300      	movs	r3, #0
 8003c96:	623b      	str	r3, [r7, #32]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	623b      	str	r3, [r7, #32]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	623b      	str	r3, [r7, #32]
 8003ca8:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	e185      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d11b      	bne.n	8003cfc <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd2:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61fb      	str	r3, [r7, #28]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	61fb      	str	r3, [r7, #28]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	61fb      	str	r3, [r7, #28]
 8003ce8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	e165      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d11b      	bne.n	8003d3c <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d12:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d22:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d24:	2300      	movs	r3, #0
 8003d26:	61bb      	str	r3, [r7, #24]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	61bb      	str	r3, [r7, #24]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	61bb      	str	r3, [r7, #24]
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	e145      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d52:	e139      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	f200 80f2 	bhi.w	8003f42 <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d123      	bne.n	8003dae <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 fbe4 	bl	8004538 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e13a      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dac:	e10c      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d14f      	bne.n	8003e56 <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	4907      	ldr	r1, [pc, #28]	; (8003ddc <HAL_I2C_Mem_Read+0x244>)
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 fa61 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d009      	beq.n	8003de0 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e10f      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x458>
 8003dd0:	0800aa48 	.word	0x0800aa48
 8003dd4:	00100002 	.word	0x00100002
 8003dd8:	ffff0000 	.word	0xffff0000
 8003ddc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691a      	ldr	r2, [r3, #16]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e54:	e0b8      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	4966      	ldr	r1, [pc, #408]	; (8003ff8 <HAL_I2C_Mem_Read+0x460>)
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 fa11 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e0bf      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	691a      	ldr	r2, [r3, #16]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb8:	2200      	movs	r2, #0
 8003eba:	494f      	ldr	r1, [pc, #316]	; (8003ff8 <HAL_I2C_Mem_Read+0x460>)
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f9e3 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e091      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691a      	ldr	r2, [r3, #16]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	691a      	ldr	r2, [r3, #16]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f40:	e042      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 faf6 	bl	8004538 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e04c      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d118      	bne.n	8003fc8 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f47f aec1 	bne.w	8003d54 <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e000      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003fee:	2302      	movs	r3, #2
  }
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3728      	adds	r7, #40	; 0x28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	00010004 	.word	0x00010004

08003ffc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af02      	add	r7, sp, #8
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	607a      	str	r2, [r7, #4]
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	460b      	mov	r3, r1
 800400a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2b08      	cmp	r3, #8
 8004016:	d006      	beq.n	8004026 <I2C_MasterRequestWrite+0x2a>
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d003      	beq.n	8004026 <I2C_MasterRequestWrite+0x2a>
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004024:	d108      	bne.n	8004038 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	e00b      	b.n	8004050 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	2b12      	cmp	r3, #18
 800403e:	d107      	bne.n	8004050 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800404e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f913 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e035      	b.n	80040d8 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004074:	d108      	bne.n	8004088 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004076:	897b      	ldrh	r3, [r7, #10]
 8004078:	b2db      	uxtb	r3, r3
 800407a:	461a      	mov	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004084:	611a      	str	r2, [r3, #16]
 8004086:	e01b      	b.n	80040c0 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004088:	897b      	ldrh	r3, [r7, #10]
 800408a:	11db      	asrs	r3, r3, #7
 800408c:	b2db      	uxtb	r3, r3
 800408e:	f003 0306 	and.w	r3, r3, #6
 8004092:	b2db      	uxtb	r3, r3
 8004094:	f063 030f 	orn	r3, r3, #15
 8004098:	b2da      	uxtb	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	490e      	ldr	r1, [pc, #56]	; (80040e0 <I2C_MasterRequestWrite+0xe4>)
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 f945 	bl	8004336 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e010      	b.n	80040d8 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040b6:	897b      	ldrh	r3, [r7, #10]
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	4907      	ldr	r1, [pc, #28]	; (80040e4 <I2C_MasterRequestWrite+0xe8>)
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 f935 	bl	8004336 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	00010008 	.word	0x00010008
 80040e4:	00010002 	.word	0x00010002

080040e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b088      	sub	sp, #32
 80040ec:	af02      	add	r7, sp, #8
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	4608      	mov	r0, r1
 80040f2:	4611      	mov	r1, r2
 80040f4:	461a      	mov	r2, r3
 80040f6:	4603      	mov	r3, r0
 80040f8:	817b      	strh	r3, [r7, #10]
 80040fa:	460b      	mov	r3, r1
 80040fc:	813b      	strh	r3, [r7, #8]
 80040fe:	4613      	mov	r3, r2
 8004100:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004110:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004120:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	2200      	movs	r2, #0
 800412a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 f8aa 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e09e      	b.n	800427c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800413e:	897b      	ldrh	r3, [r7, #10]
 8004140:	b2db      	uxtb	r3, r3
 8004142:	461a      	mov	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800414c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	6a3a      	ldr	r2, [r7, #32]
 8004152:	494c      	ldr	r1, [pc, #304]	; (8004284 <I2C_RequestMemoryRead+0x19c>)
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 f8ee 	bl	8004336 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e08b      	b.n	800427c <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800417a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417c:	6a39      	ldr	r1, [r7, #32]
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f958 	bl	8004434 <I2C_WaitOnTXEFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00d      	beq.n	80041a6 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	2b04      	cmp	r3, #4
 8004190:	d107      	bne.n	80041a2 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e06a      	b.n	800427c <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d105      	bne.n	80041b8 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041ac:	893b      	ldrh	r3, [r7, #8]
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	611a      	str	r2, [r3, #16]
 80041b6:	e021      	b.n	80041fc <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041b8:	893b      	ldrh	r3, [r7, #8]
 80041ba:	0a1b      	lsrs	r3, r3, #8
 80041bc:	b29b      	uxth	r3, r3
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c8:	6a39      	ldr	r1, [r7, #32]
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f932 	bl	8004434 <I2C_WaitOnTXEFlagUntilTimeout>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00d      	beq.n	80041f2 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d107      	bne.n	80041ee <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e044      	b.n	800427c <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041f2:	893b      	ldrh	r3, [r7, #8]
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041fe:	6a39      	ldr	r1, [r7, #32]
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 f917 	bl	8004434 <I2C_WaitOnTXEFlagUntilTimeout>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00d      	beq.n	8004228 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	2b04      	cmp	r3, #4
 8004212:	d107      	bne.n	8004224 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004222:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e029      	b.n	800427c <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004236:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	2200      	movs	r2, #0
 8004240:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 f81f 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e013      	b.n	800427c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004254:	897b      	ldrh	r3, [r7, #10]
 8004256:	b2db      	uxtb	r3, r3
 8004258:	f043 0301 	orr.w	r3, r3, #1
 800425c:	b2da      	uxtb	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	6a3a      	ldr	r2, [r7, #32]
 8004268:	4906      	ldr	r1, [pc, #24]	; (8004284 <I2C_RequestMemoryRead+0x19c>)
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 f863 	bl	8004336 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e000      	b.n	800427c <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	00010002 	.word	0x00010002

08004288 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	4613      	mov	r3, r2
 8004296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004298:	e025      	b.n	80042e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a0:	d021      	beq.n	80042e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a2:	f7fd fe0f 	bl	8001ec4 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d302      	bcc.n	80042b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d116      	bne.n	80042e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2220      	movs	r2, #32
 80042c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	f043 0220 	orr.w	r2, r3, #32
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e023      	b.n	800432e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	0c1b      	lsrs	r3, r3, #16
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d10d      	bne.n	800430c <I2C_WaitOnFlagUntilTimeout+0x84>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	43da      	mvns	r2, r3
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4013      	ands	r3, r2
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	bf0c      	ite	eq
 8004302:	2301      	moveq	r3, #1
 8004304:	2300      	movne	r3, #0
 8004306:	b2db      	uxtb	r3, r3
 8004308:	461a      	mov	r2, r3
 800430a:	e00c      	b.n	8004326 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	43da      	mvns	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4013      	ands	r3, r2
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	bf0c      	ite	eq
 800431e:	2301      	moveq	r3, #1
 8004320:	2300      	movne	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	461a      	mov	r2, r3
 8004326:	79fb      	ldrb	r3, [r7, #7]
 8004328:	429a      	cmp	r2, r3
 800432a:	d0b6      	beq.n	800429a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b084      	sub	sp, #16
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
 8004342:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004344:	e051      	b.n	80043ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004354:	d123      	bne.n	800439e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004364:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800436e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2220      	movs	r2, #32
 800437a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f043 0204 	orr.w	r2, r3, #4
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e046      	b.n	800442c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a4:	d021      	beq.n	80043ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a6:	f7fd fd8d 	bl	8001ec4 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d302      	bcc.n	80043bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d116      	bne.n	80043ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	f043 0220 	orr.w	r2, r3, #32
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e020      	b.n	800442c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	0c1b      	lsrs	r3, r3, #16
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d10c      	bne.n	800440e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	43da      	mvns	r2, r3
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	4013      	ands	r3, r2
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	bf14      	ite	ne
 8004406:	2301      	movne	r3, #1
 8004408:	2300      	moveq	r3, #0
 800440a:	b2db      	uxtb	r3, r3
 800440c:	e00b      	b.n	8004426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	43da      	mvns	r2, r3
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	4013      	ands	r3, r2
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	bf14      	ite	ne
 8004420:	2301      	movne	r3, #1
 8004422:	2300      	moveq	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d18d      	bne.n	8004346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004440:	e02d      	b.n	800449e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f8ce 	bl	80045e4 <I2C_IsAcknowledgeFailed>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e02d      	b.n	80044ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004458:	d021      	beq.n	800449e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445a:	f7fd fd33 	bl	8001ec4 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	429a      	cmp	r2, r3
 8004468:	d302      	bcc.n	8004470 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d116      	bne.n	800449e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2220      	movs	r2, #32
 800447a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	f043 0220 	orr.w	r2, r3, #32
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e007      	b.n	80044ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a8:	2b80      	cmp	r3, #128	; 0x80
 80044aa:	d1ca      	bne.n	8004442 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b084      	sub	sp, #16
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044c2:	e02d      	b.n	8004520 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 f88d 	bl	80045e4 <I2C_IsAcknowledgeFailed>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e02d      	b.n	8004530 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044da:	d021      	beq.n	8004520 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044dc:	f7fd fcf2 	bl	8001ec4 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d302      	bcc.n	80044f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d116      	bne.n	8004520 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	f043 0220 	orr.w	r2, r3, #32
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e007      	b.n	8004530 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b04      	cmp	r3, #4
 800452c:	d1ca      	bne.n	80044c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004544:	e042      	b.n	80045cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	f003 0310 	and.w	r3, r3, #16
 8004550:	2b10      	cmp	r3, #16
 8004552:	d119      	bne.n	8004588 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f06f 0210 	mvn.w	r2, #16
 800455c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2220      	movs	r2, #32
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e029      	b.n	80045dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004588:	f7fd fc9c 	bl	8001ec4 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	429a      	cmp	r2, r3
 8004596:	d302      	bcc.n	800459e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d116      	bne.n	80045cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b8:	f043 0220 	orr.w	r2, r3, #32
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e007      	b.n	80045dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d6:	2b40      	cmp	r3, #64	; 0x40
 80045d8:	d1b5      	bne.n	8004546 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045fa:	d11b      	bne.n	8004634 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004604:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	f043 0204 	orr.w	r2, r3, #4
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e000      	b.n	8004636 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	bc80      	pop	{r7}
 800463e:	4770      	bx	lr

08004640 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d102      	bne.n	8004654 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	f000 bc6c 	b.w	8004f2c <HAL_RCC_OscConfig+0x8ec>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d022      	beq.n	80046a2 <HAL_RCC_OscConfig+0x62>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d11c      	bne.n	80046a2 <HAL_RCC_OscConfig+0x62>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d116      	bne.n	80046a2 <HAL_RCC_OscConfig+0x62>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0308 	and.w	r3, r3, #8
 800467c:	2b00      	cmp	r3, #0
 800467e:	d110      	bne.n	80046a2 <HAL_RCC_OscConfig+0x62>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10a      	bne.n	80046a2 <HAL_RCC_OscConfig+0x62>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0310 	and.w	r3, r3, #16
 8004694:	2b00      	cmp	r3, #0
 8004696:	d104      	bne.n	80046a2 <HAL_RCC_OscConfig+0x62>
 8004698:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800469c:	4897      	ldr	r0, [pc, #604]	; (80048fc <HAL_RCC_OscConfig+0x2bc>)
 800469e:	f7fc ff0b 	bl	80014b8 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046a2:	4b97      	ldr	r3, [pc, #604]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 030c 	and.w	r3, r3, #12
 80046aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046ac:	4b94      	ldr	r3, [pc, #592]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 808e 	beq.w	80047e0 <HAL_RCC_OscConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00c      	beq.n	80046e6 <HAL_RCC_OscConfig+0xa6>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d008      	beq.n	80046e6 <HAL_RCC_OscConfig+0xa6>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	2b05      	cmp	r3, #5
 80046da:	d004      	beq.n	80046e6 <HAL_RCC_OscConfig+0xa6>
 80046dc:	f240 1159 	movw	r1, #345	; 0x159
 80046e0:	4886      	ldr	r0, [pc, #536]	; (80048fc <HAL_RCC_OscConfig+0x2bc>)
 80046e2:	f7fc fee9 	bl	80014b8 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d006      	beq.n	80046fa <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	2b0c      	cmp	r3, #12
 80046f0:	d110      	bne.n	8004714 <HAL_RCC_OscConfig+0xd4>
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f8:	d10c      	bne.n	8004714 <HAL_RCC_OscConfig+0xd4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046fa:	4b81      	ldr	r3, [pc, #516]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d06b      	beq.n	80047de <HAL_RCC_OscConfig+0x19e>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d167      	bne.n	80047de <HAL_RCC_OscConfig+0x19e>
      {
        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	f000 bc0c 	b.w	8004f2c <HAL_RCC_OscConfig+0x8ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d106      	bne.n	800472a <HAL_RCC_OscConfig+0xea>
 800471c:	4b78      	ldr	r3, [pc, #480]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a77      	ldr	r2, [pc, #476]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 8004722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	e02d      	b.n	8004786 <HAL_RCC_OscConfig+0x146>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10c      	bne.n	800474c <HAL_RCC_OscConfig+0x10c>
 8004732:	4b73      	ldr	r3, [pc, #460]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a72      	ldr	r2, [pc, #456]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 8004738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	4b70      	ldr	r3, [pc, #448]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a6f      	ldr	r2, [pc, #444]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 8004744:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	e01c      	b.n	8004786 <HAL_RCC_OscConfig+0x146>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	2b05      	cmp	r3, #5
 8004752:	d10c      	bne.n	800476e <HAL_RCC_OscConfig+0x12e>
 8004754:	4b6a      	ldr	r3, [pc, #424]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a69      	ldr	r2, [pc, #420]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 800475a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	4b67      	ldr	r3, [pc, #412]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a66      	ldr	r2, [pc, #408]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 8004766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	e00b      	b.n	8004786 <HAL_RCC_OscConfig+0x146>
 800476e:	4b64      	ldr	r3, [pc, #400]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a63      	ldr	r2, [pc, #396]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 8004774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	4b61      	ldr	r3, [pc, #388]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a60      	ldr	r2, [pc, #384]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 8004780:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004784:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d013      	beq.n	80047b6 <HAL_RCC_OscConfig+0x176>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478e:	f7fd fb99 	bl	8001ec4 <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x168>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004796:	f7fd fb95 	bl	8001ec4 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b64      	cmp	r3, #100	; 0x64
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x168>
          {
            return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e3c1      	b.n	8004f2c <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047a8:	4b55      	ldr	r3, [pc, #340]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0f0      	beq.n	8004796 <HAL_RCC_OscConfig+0x156>
 80047b4:	e014      	b.n	80047e0 <HAL_RCC_OscConfig+0x1a0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b6:	f7fd fb85 	bl	8001ec4 <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x190>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047be:	f7fd fb81 	bl	8001ec4 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b64      	cmp	r3, #100	; 0x64
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e3ad      	b.n	8004f2c <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047d0:	4b4b      	ldr	r3, [pc, #300]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1f0      	bne.n	80047be <HAL_RCC_OscConfig+0x17e>
 80047dc:	e000      	b.n	80047e0 <HAL_RCC_OscConfig+0x1a0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047de:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d070      	beq.n	80048ce <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d008      	beq.n	8004806 <HAL_RCC_OscConfig+0x1c6>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d004      	beq.n	8004806 <HAL_RCC_OscConfig+0x1c6>
 80047fc:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8004800:	483e      	ldr	r0, [pc, #248]	; (80048fc <HAL_RCC_OscConfig+0x2bc>)
 8004802:	f7fc fe59 	bl	80014b8 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	2b1f      	cmp	r3, #31
 800480c:	d904      	bls.n	8004818 <HAL_RCC_OscConfig+0x1d8>
 800480e:	f240 118d 	movw	r1, #397	; 0x18d
 8004812:	483a      	ldr	r0, [pc, #232]	; (80048fc <HAL_RCC_OscConfig+0x2bc>)
 8004814:	f7fc fe50 	bl	80014b8 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	2b04      	cmp	r3, #4
 800481c:	d005      	beq.n	800482a <HAL_RCC_OscConfig+0x1ea>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	2b0c      	cmp	r3, #12
 8004822:	d119      	bne.n	8004858 <HAL_RCC_OscConfig+0x218>
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d116      	bne.n	8004858 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800482a:	4b35      	ldr	r3, [pc, #212]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d005      	beq.n	8004842 <HAL_RCC_OscConfig+0x202>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d001      	beq.n	8004842 <HAL_RCC_OscConfig+0x202>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e374      	b.n	8004f2c <HAL_RCC_OscConfig+0x8ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004842:	4b2f      	ldr	r3, [pc, #188]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	021b      	lsls	r3, r3, #8
 8004850:	492b      	ldr	r1, [pc, #172]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 8004852:	4313      	orrs	r3, r2
 8004854:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004856:	e03a      	b.n	80048ce <HAL_RCC_OscConfig+0x28e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d020      	beq.n	80048a2 <HAL_RCC_OscConfig+0x262>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004860:	4b28      	ldr	r3, [pc, #160]	; (8004904 <HAL_RCC_OscConfig+0x2c4>)
 8004862:	2201      	movs	r2, #1
 8004864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004866:	f7fd fb2d 	bl	8001ec4 <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800486c:	e008      	b.n	8004880 <HAL_RCC_OscConfig+0x240>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800486e:	f7fd fb29 	bl	8001ec4 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_OscConfig+0x240>
          {
            return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e355      	b.n	8004f2c <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004880:	4b1f      	ldr	r3, [pc, #124]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0f0      	beq.n	800486e <HAL_RCC_OscConfig+0x22e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800488c:	4b1c      	ldr	r3, [pc, #112]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	021b      	lsls	r3, r3, #8
 800489a:	4919      	ldr	r1, [pc, #100]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 800489c:	4313      	orrs	r3, r2
 800489e:	604b      	str	r3, [r1, #4]
 80048a0:	e015      	b.n	80048ce <HAL_RCC_OscConfig+0x28e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048a2:	4b18      	ldr	r3, [pc, #96]	; (8004904 <HAL_RCC_OscConfig+0x2c4>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a8:	f7fd fb0c 	bl	8001ec4 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x282>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048b0:	f7fd fb08 	bl	8001ec4 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x282>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e334      	b.n	8004f2c <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048c2:	4b0f      	ldr	r3, [pc, #60]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0310 	and.w	r3, r3, #16
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 8129 	beq.w	8004b2e <HAL_RCC_OscConfig+0x4ee>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f040 80a4 	bne.w	8004a2c <HAL_RCC_OscConfig+0x3ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048e4:	4b06      	ldr	r3, [pc, #24]	; (8004900 <HAL_RCC_OscConfig+0x2c0>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00b      	beq.n	8004908 <HAL_RCC_OscConfig+0x2c8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d107      	bne.n	8004908 <HAL_RCC_OscConfig+0x2c8>
      {
        return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e317      	b.n	8004f2c <HAL_RCC_OscConfig+0x8ec>
 80048fc:	0800aa80 	.word	0x0800aa80
 8004900:	40023800 	.word	0x40023800
 8004904:	42470000 	.word	0x42470000
      }
      /* Otherwise, just the calibration and MSI range change are allowed */
      else
      {
       /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	2bff      	cmp	r3, #255	; 0xff
 800490e:	d904      	bls.n	800491a <HAL_RCC_OscConfig+0x2da>
 8004910:	f240 11d7 	movw	r1, #471	; 0x1d7
 8004914:	48a5      	ldr	r0, [pc, #660]	; (8004bac <HAL_RCC_OscConfig+0x56c>)
 8004916:	f7fc fdcf 	bl	80014b8 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d022      	beq.n	8004968 <HAL_RCC_OscConfig+0x328>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800492a:	d01d      	beq.n	8004968 <HAL_RCC_OscConfig+0x328>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004934:	d018      	beq.n	8004968 <HAL_RCC_OscConfig+0x328>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800493e:	d013      	beq.n	8004968 <HAL_RCC_OscConfig+0x328>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004948:	d00e      	beq.n	8004968 <HAL_RCC_OscConfig+0x328>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004952:	d009      	beq.n	8004968 <HAL_RCC_OscConfig+0x328>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800495c:	d004      	beq.n	8004968 <HAL_RCC_OscConfig+0x328>
 800495e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8004962:	4892      	ldr	r0, [pc, #584]	; (8004bac <HAL_RCC_OscConfig+0x56c>)
 8004964:	f7fc fda8 	bl	80014b8 <assert_failed>

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a1a      	ldr	r2, [r3, #32]
 800496c:	4b90      	ldr	r3, [pc, #576]	; (8004bb0 <HAL_RCC_OscConfig+0x570>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004974:	429a      	cmp	r2, r3
 8004976:	d91d      	bls.n	80049b4 <HAL_RCC_OscConfig+0x374>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fd67 	bl	8005450 <RCC_SetFlashLatencyFromMSIRange>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e2cf      	b.n	8004f2c <HAL_RCC_OscConfig+0x8ec>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800498c:	4b88      	ldr	r3, [pc, #544]	; (8004bb0 <HAL_RCC_OscConfig+0x570>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	4985      	ldr	r1, [pc, #532]	; (8004bb0 <HAL_RCC_OscConfig+0x570>)
 800499a:	4313      	orrs	r3, r2
 800499c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800499e:	4b84      	ldr	r3, [pc, #528]	; (8004bb0 <HAL_RCC_OscConfig+0x570>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	061b      	lsls	r3, r3, #24
 80049ac:	4980      	ldr	r1, [pc, #512]	; (8004bb0 <HAL_RCC_OscConfig+0x570>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	604b      	str	r3, [r1, #4]
 80049b2:	e01c      	b.n	80049ee <HAL_RCC_OscConfig+0x3ae>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049b4:	4b7e      	ldr	r3, [pc, #504]	; (8004bb0 <HAL_RCC_OscConfig+0x570>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	497b      	ldr	r1, [pc, #492]	; (8004bb0 <HAL_RCC_OscConfig+0x570>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049c6:	4b7a      	ldr	r3, [pc, #488]	; (8004bb0 <HAL_RCC_OscConfig+0x570>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	061b      	lsls	r3, r3, #24
 80049d4:	4976      	ldr	r1, [pc, #472]	; (8004bb0 <HAL_RCC_OscConfig+0x570>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fd36 	bl	8005450 <RCC_SetFlashLatencyFromMSIRange>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e29e      	b.n	8004f2c <HAL_RCC_OscConfig+0x8ec>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	0b5b      	lsrs	r3, r3, #13
 80049f4:	3301      	adds	r3, #1
 80049f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80049fa:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80049fe:	4a6c      	ldr	r2, [pc, #432]	; (8004bb0 <HAL_RCC_OscConfig+0x570>)
 8004a00:	6892      	ldr	r2, [r2, #8]
 8004a02:	0912      	lsrs	r2, r2, #4
 8004a04:	f002 020f 	and.w	r2, r2, #15
 8004a08:	496a      	ldr	r1, [pc, #424]	; (8004bb4 <HAL_RCC_OscConfig+0x574>)
 8004a0a:	5c8a      	ldrb	r2, [r1, r2]
 8004a0c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004a0e:	4a6a      	ldr	r2, [pc, #424]	; (8004bb8 <HAL_RCC_OscConfig+0x578>)
 8004a10:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a12:	4b6a      	ldr	r3, [pc, #424]	; (8004bbc <HAL_RCC_OscConfig+0x57c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fc fd8c 	bl	8001534 <HAL_InitTick>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 8083 	beq.w	8004b2e <HAL_RCC_OscConfig+0x4ee>
        {
          return status;
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	e27f      	b.n	8004f2c <HAL_RCC_OscConfig+0x8ec>
      }
    }
    else
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d008      	beq.n	8004a46 <HAL_RCC_OscConfig+0x406>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d004      	beq.n	8004a46 <HAL_RCC_OscConfig+0x406>
 8004a3c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004a40:	485a      	ldr	r0, [pc, #360]	; (8004bac <HAL_RCC_OscConfig+0x56c>)
 8004a42:	f7fc fd39 	bl	80014b8 <assert_failed>

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d059      	beq.n	8004b02 <HAL_RCC_OscConfig+0x4c2>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a4e:	4b5c      	ldr	r3, [pc, #368]	; (8004bc0 <HAL_RCC_OscConfig+0x580>)
 8004a50:	2201      	movs	r2, #1
 8004a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a54:	f7fd fa36 	bl	8001ec4 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a5c:	f7fd fa32 	bl	8001ec4 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e25e      	b.n	8004f2c <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004a6e:	4b50      	ldr	r3, [pc, #320]	; (8004bb0 <HAL_RCC_OscConfig+0x570>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCC_OscConfig+0x41c>
          }
        }
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	2bff      	cmp	r3, #255	; 0xff
 8004a80:	d904      	bls.n	8004a8c <HAL_RCC_OscConfig+0x44c>
 8004a82:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8004a86:	4849      	ldr	r0, [pc, #292]	; (8004bac <HAL_RCC_OscConfig+0x56c>)
 8004a88:	f7fc fd16 	bl	80014b8 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d022      	beq.n	8004ada <HAL_RCC_OscConfig+0x49a>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a9c:	d01d      	beq.n	8004ada <HAL_RCC_OscConfig+0x49a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004aa6:	d018      	beq.n	8004ada <HAL_RCC_OscConfig+0x49a>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ab0:	d013      	beq.n	8004ada <HAL_RCC_OscConfig+0x49a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aba:	d00e      	beq.n	8004ada <HAL_RCC_OscConfig+0x49a>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ac4:	d009      	beq.n	8004ada <HAL_RCC_OscConfig+0x49a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ace:	d004      	beq.n	8004ada <HAL_RCC_OscConfig+0x49a>
 8004ad0:	f240 211d 	movw	r1, #541	; 0x21d
 8004ad4:	4835      	ldr	r0, [pc, #212]	; (8004bac <HAL_RCC_OscConfig+0x56c>)
 8004ad6:	f7fc fcef 	bl	80014b8 <assert_failed>

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ada:	4b35      	ldr	r3, [pc, #212]	; (8004bb0 <HAL_RCC_OscConfig+0x570>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	4932      	ldr	r1, [pc, #200]	; (8004bb0 <HAL_RCC_OscConfig+0x570>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004aec:	4b30      	ldr	r3, [pc, #192]	; (8004bb0 <HAL_RCC_OscConfig+0x570>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	061b      	lsls	r3, r3, #24
 8004afa:	492d      	ldr	r1, [pc, #180]	; (8004bb0 <HAL_RCC_OscConfig+0x570>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	604b      	str	r3, [r1, #4]
 8004b00:	e015      	b.n	8004b2e <HAL_RCC_OscConfig+0x4ee>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b02:	4b2f      	ldr	r3, [pc, #188]	; (8004bc0 <HAL_RCC_OscConfig+0x580>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b08:	f7fd f9dc 	bl	8001ec4 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b10:	f7fd f9d8 	bl	8001ec4 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e204      	b.n	8004f2c <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004b22:	4b23      	ldr	r3, [pc, #140]	; (8004bb0 <HAL_RCC_OscConfig+0x570>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f0      	bne.n	8004b10 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d04c      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d008      	beq.n	8004b54 <HAL_RCC_OscConfig+0x514>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d004      	beq.n	8004b54 <HAL_RCC_OscConfig+0x514>
 8004b4a:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8004b4e:	4817      	ldr	r0, [pc, #92]	; (8004bac <HAL_RCC_OscConfig+0x56c>)
 8004b50:	f7fc fcb2 	bl	80014b8 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d016      	beq.n	8004b8a <HAL_RCC_OscConfig+0x54a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b5c:	4b19      	ldr	r3, [pc, #100]	; (8004bc4 <HAL_RCC_OscConfig+0x584>)
 8004b5e:	2201      	movs	r2, #1
 8004b60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b62:	f7fd f9af 	bl	8001ec4 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b6a:	f7fd f9ab 	bl	8001ec4 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e1d7      	b.n	8004f2c <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b7c:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <HAL_RCC_OscConfig+0x570>)
 8004b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0f0      	beq.n	8004b6a <HAL_RCC_OscConfig+0x52a>
 8004b88:	e024      	b.n	8004bd4 <HAL_RCC_OscConfig+0x594>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b8a:	4b0e      	ldr	r3, [pc, #56]	; (8004bc4 <HAL_RCC_OscConfig+0x584>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b90:	f7fd f998 	bl	8001ec4 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b96:	e017      	b.n	8004bc8 <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b98:	f7fd f994 	bl	8001ec4 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d910      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e1c0      	b.n	8004f2c <HAL_RCC_OscConfig+0x8ec>
 8004baa:	bf00      	nop
 8004bac:	0800aa80 	.word	0x0800aa80
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	0800ac64 	.word	0x0800ac64
 8004bb8:	20000004 	.word	0x20000004
 8004bbc:	20000008 	.word	0x20000008
 8004bc0:	42470020 	.word	0x42470020
 8004bc4:	42470680 	.word	0x42470680
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004bc8:	4ba2      	ldr	r3, [pc, #648]	; (8004e54 <HAL_RCC_OscConfig+0x814>)
 8004bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1e1      	bne.n	8004b98 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 80b7 	beq.w	8004d50 <HAL_RCC_OscConfig+0x710>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004be2:	2300      	movs	r3, #0
 8004be4:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00c      	beq.n	8004c08 <HAL_RCC_OscConfig+0x5c8>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d008      	beq.n	8004c08 <HAL_RCC_OscConfig+0x5c8>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2b05      	cmp	r3, #5
 8004bfc:	d004      	beq.n	8004c08 <HAL_RCC_OscConfig+0x5c8>
 8004bfe:	f44f 711a 	mov.w	r1, #616	; 0x268
 8004c02:	4895      	ldr	r0, [pc, #596]	; (8004e58 <HAL_RCC_OscConfig+0x818>)
 8004c04:	f7fc fc58 	bl	80014b8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c08:	4b92      	ldr	r3, [pc, #584]	; (8004e54 <HAL_RCC_OscConfig+0x814>)
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10d      	bne.n	8004c30 <HAL_RCC_OscConfig+0x5f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c14:	4b8f      	ldr	r3, [pc, #572]	; (8004e54 <HAL_RCC_OscConfig+0x814>)
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	4a8e      	ldr	r2, [pc, #568]	; (8004e54 <HAL_RCC_OscConfig+0x814>)
 8004c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c1e:	6253      	str	r3, [r2, #36]	; 0x24
 8004c20:	4b8c      	ldr	r3, [pc, #560]	; (8004e54 <HAL_RCC_OscConfig+0x814>)
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c28:	60bb      	str	r3, [r7, #8]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c30:	4b8a      	ldr	r3, [pc, #552]	; (8004e5c <HAL_RCC_OscConfig+0x81c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d118      	bne.n	8004c6e <HAL_RCC_OscConfig+0x62e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c3c:	4b87      	ldr	r3, [pc, #540]	; (8004e5c <HAL_RCC_OscConfig+0x81c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a86      	ldr	r2, [pc, #536]	; (8004e5c <HAL_RCC_OscConfig+0x81c>)
 8004c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c48:	f7fd f93c 	bl	8001ec4 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x622>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c50:	f7fd f938 	bl	8001ec4 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b64      	cmp	r3, #100	; 0x64
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e164      	b.n	8004f2c <HAL_RCC_OscConfig+0x8ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c62:	4b7e      	ldr	r3, [pc, #504]	; (8004e5c <HAL_RCC_OscConfig+0x81c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0x610>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d106      	bne.n	8004c84 <HAL_RCC_OscConfig+0x644>
 8004c76:	4b77      	ldr	r3, [pc, #476]	; (8004e54 <HAL_RCC_OscConfig+0x814>)
 8004c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7a:	4a76      	ldr	r2, [pc, #472]	; (8004e54 <HAL_RCC_OscConfig+0x814>)
 8004c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c80:	6353      	str	r3, [r2, #52]	; 0x34
 8004c82:	e02d      	b.n	8004ce0 <HAL_RCC_OscConfig+0x6a0>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10c      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x666>
 8004c8c:	4b71      	ldr	r3, [pc, #452]	; (8004e54 <HAL_RCC_OscConfig+0x814>)
 8004c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c90:	4a70      	ldr	r2, [pc, #448]	; (8004e54 <HAL_RCC_OscConfig+0x814>)
 8004c92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c96:	6353      	str	r3, [r2, #52]	; 0x34
 8004c98:	4b6e      	ldr	r3, [pc, #440]	; (8004e54 <HAL_RCC_OscConfig+0x814>)
 8004c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9c:	4a6d      	ldr	r2, [pc, #436]	; (8004e54 <HAL_RCC_OscConfig+0x814>)
 8004c9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ca2:	6353      	str	r3, [r2, #52]	; 0x34
 8004ca4:	e01c      	b.n	8004ce0 <HAL_RCC_OscConfig+0x6a0>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	2b05      	cmp	r3, #5
 8004cac:	d10c      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x688>
 8004cae:	4b69      	ldr	r3, [pc, #420]	; (8004e54 <HAL_RCC_OscConfig+0x814>)
 8004cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb2:	4a68      	ldr	r2, [pc, #416]	; (8004e54 <HAL_RCC_OscConfig+0x814>)
 8004cb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cb8:	6353      	str	r3, [r2, #52]	; 0x34
 8004cba:	4b66      	ldr	r3, [pc, #408]	; (8004e54 <HAL_RCC_OscConfig+0x814>)
 8004cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbe:	4a65      	ldr	r2, [pc, #404]	; (8004e54 <HAL_RCC_OscConfig+0x814>)
 8004cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc4:	6353      	str	r3, [r2, #52]	; 0x34
 8004cc6:	e00b      	b.n	8004ce0 <HAL_RCC_OscConfig+0x6a0>
 8004cc8:	4b62      	ldr	r3, [pc, #392]	; (8004e54 <HAL_RCC_OscConfig+0x814>)
 8004cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ccc:	4a61      	ldr	r2, [pc, #388]	; (8004e54 <HAL_RCC_OscConfig+0x814>)
 8004cce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cd2:	6353      	str	r3, [r2, #52]	; 0x34
 8004cd4:	4b5f      	ldr	r3, [pc, #380]	; (8004e54 <HAL_RCC_OscConfig+0x814>)
 8004cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd8:	4a5e      	ldr	r2, [pc, #376]	; (8004e54 <HAL_RCC_OscConfig+0x814>)
 8004cda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cde:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d015      	beq.n	8004d14 <HAL_RCC_OscConfig+0x6d4>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ce8:	f7fd f8ec 	bl	8001ec4 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cee:	e00a      	b.n	8004d06 <HAL_RCC_OscConfig+0x6c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cf0:	f7fd f8e8 	bl	8001ec4 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e112      	b.n	8004f2c <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d06:	4b53      	ldr	r3, [pc, #332]	; (8004e54 <HAL_RCC_OscConfig+0x814>)
 8004d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0ee      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x6b0>
 8004d12:	e014      	b.n	8004d3e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d14:	f7fd f8d6 	bl	8001ec4 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d1a:	e00a      	b.n	8004d32 <HAL_RCC_OscConfig+0x6f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d1c:	f7fd f8d2 	bl	8001ec4 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x6f2>
        {
          return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e0fc      	b.n	8004f2c <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d32:	4b48      	ldr	r3, [pc, #288]	; (8004e54 <HAL_RCC_OscConfig+0x814>)
 8004d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1ee      	bne.n	8004d1c <HAL_RCC_OscConfig+0x6dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d3e:	7ffb      	ldrb	r3, [r7, #31]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d105      	bne.n	8004d50 <HAL_RCC_OscConfig+0x710>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d44:	4b43      	ldr	r3, [pc, #268]	; (8004e54 <HAL_RCC_OscConfig+0x814>)
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	4a42      	ldr	r2, [pc, #264]	; (8004e54 <HAL_RCC_OscConfig+0x814>)
 8004d4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d4e:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00c      	beq.n	8004d72 <HAL_RCC_OscConfig+0x732>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d008      	beq.n	8004d72 <HAL_RCC_OscConfig+0x732>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d004      	beq.n	8004d72 <HAL_RCC_OscConfig+0x732>
 8004d68:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8004d6c:	483a      	ldr	r0, [pc, #232]	; (8004e58 <HAL_RCC_OscConfig+0x818>)
 8004d6e:	f7fc fba3 	bl	80014b8 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 80d7 	beq.w	8004f2a <HAL_RCC_OscConfig+0x8ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	2b0c      	cmp	r3, #12
 8004d80:	f000 80b3 	beq.w	8004eea <HAL_RCC_OscConfig+0x8aa>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	f040 8097 	bne.w	8004ebc <HAL_RCC_OscConfig+0x87c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d009      	beq.n	8004daa <HAL_RCC_OscConfig+0x76a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d9e:	d004      	beq.n	8004daa <HAL_RCC_OscConfig+0x76a>
 8004da0:	f240 21b5 	movw	r1, #693	; 0x2b5
 8004da4:	482c      	ldr	r0, [pc, #176]	; (8004e58 <HAL_RCC_OscConfig+0x818>)
 8004da6:	f7fc fb87 	bl	80014b8 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d02c      	beq.n	8004e0c <HAL_RCC_OscConfig+0x7cc>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dba:	d027      	beq.n	8004e0c <HAL_RCC_OscConfig+0x7cc>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004dc4:	d022      	beq.n	8004e0c <HAL_RCC_OscConfig+0x7cc>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004dce:	d01d      	beq.n	8004e0c <HAL_RCC_OscConfig+0x7cc>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dd8:	d018      	beq.n	8004e0c <HAL_RCC_OscConfig+0x7cc>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dde:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004de2:	d013      	beq.n	8004e0c <HAL_RCC_OscConfig+0x7cc>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004dec:	d00e      	beq.n	8004e0c <HAL_RCC_OscConfig+0x7cc>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004df6:	d009      	beq.n	8004e0c <HAL_RCC_OscConfig+0x7cc>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e00:	d004      	beq.n	8004e0c <HAL_RCC_OscConfig+0x7cc>
 8004e02:	f240 21b6 	movw	r1, #694	; 0x2b6
 8004e06:	4814      	ldr	r0, [pc, #80]	; (8004e58 <HAL_RCC_OscConfig+0x818>)
 8004e08:	f7fc fb56 	bl	80014b8 <assert_failed>
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e14:	d00e      	beq.n	8004e34 <HAL_RCC_OscConfig+0x7f4>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e1e:	d009      	beq.n	8004e34 <HAL_RCC_OscConfig+0x7f4>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e28:	d004      	beq.n	8004e34 <HAL_RCC_OscConfig+0x7f4>
 8004e2a:	f240 21b7 	movw	r1, #695	; 0x2b7
 8004e2e:	480a      	ldr	r0, [pc, #40]	; (8004e58 <HAL_RCC_OscConfig+0x818>)
 8004e30:	f7fc fb42 	bl	80014b8 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e34:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <HAL_RCC_OscConfig+0x820>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3a:	f7fd f843 	bl	8001ec4 <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e40:	e010      	b.n	8004e64 <HAL_RCC_OscConfig+0x824>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e42:	f7fd f83f 	bl	8001ec4 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d909      	bls.n	8004e64 <HAL_RCC_OscConfig+0x824>
          {
            return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e06b      	b.n	8004f2c <HAL_RCC_OscConfig+0x8ec>
 8004e54:	40023800 	.word	0x40023800
 8004e58:	0800aa80 	.word	0x0800aa80
 8004e5c:	40007000 	.word	0x40007000
 8004e60:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e64:	4b33      	ldr	r3, [pc, #204]	; (8004f34 <HAL_RCC_OscConfig+0x8f4>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1e8      	bne.n	8004e42 <HAL_RCC_OscConfig+0x802>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e70:	4b30      	ldr	r3, [pc, #192]	; (8004f34 <HAL_RCC_OscConfig+0x8f4>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e80:	4319      	orrs	r1, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e86:	430b      	orrs	r3, r1
 8004e88:	492a      	ldr	r1, [pc, #168]	; (8004f34 <HAL_RCC_OscConfig+0x8f4>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e8e:	4b2a      	ldr	r3, [pc, #168]	; (8004f38 <HAL_RCC_OscConfig+0x8f8>)
 8004e90:	2201      	movs	r2, #1
 8004e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e94:	f7fd f816 	bl	8001ec4 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x86e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e9c:	f7fd f812 	bl	8001ec4 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x86e>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e03e      	b.n	8004f2c <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004eae:	4b21      	ldr	r3, [pc, #132]	; (8004f34 <HAL_RCC_OscConfig+0x8f4>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0f0      	beq.n	8004e9c <HAL_RCC_OscConfig+0x85c>
 8004eba:	e036      	b.n	8004f2a <HAL_RCC_OscConfig+0x8ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ebc:	4b1e      	ldr	r3, [pc, #120]	; (8004f38 <HAL_RCC_OscConfig+0x8f8>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec2:	f7fc ffff 	bl	8001ec4 <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x89c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eca:	f7fc fffb 	bl	8001ec4 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x89c>
          {
            return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e027      	b.n	8004f2c <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004edc:	4b15      	ldr	r3, [pc, #84]	; (8004f34 <HAL_RCC_OscConfig+0x8f4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1f0      	bne.n	8004eca <HAL_RCC_OscConfig+0x88a>
 8004ee8:	e01f      	b.n	8004f2a <HAL_RCC_OscConfig+0x8ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d101      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x8b6>
      {
        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e01a      	b.n	8004f2c <HAL_RCC_OscConfig+0x8ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ef6:	4b0f      	ldr	r3, [pc, #60]	; (8004f34 <HAL_RCC_OscConfig+0x8f4>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d10d      	bne.n	8004f26 <HAL_RCC_OscConfig+0x8e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d106      	bne.n	8004f26 <HAL_RCC_OscConfig+0x8e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d001      	beq.n	8004f2a <HAL_RCC_OscConfig+0x8ea>
        {
          return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e000      	b.n	8004f2c <HAL_RCC_OscConfig+0x8ec>
        }
      }
    }
  }

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3720      	adds	r7, #32
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	40023800 	.word	0x40023800
 8004f38:	42470060 	.word	0x42470060

08004f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e1a4      	b.n	800529a <HAL_RCC_ClockConfig+0x35e>
  }

  assert_param(IS_FLASH_LATENCY(FLatency));
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d007      	beq.n	8004f66 <HAL_RCC_ClockConfig+0x2a>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d004      	beq.n	8004f66 <HAL_RCC_ClockConfig+0x2a>
 8004f5c:	f240 312a 	movw	r1, #810	; 0x32a
 8004f60:	4893      	ldr	r0, [pc, #588]	; (80051b0 <HAL_RCC_ClockConfig+0x274>)
 8004f62:	f7fc faa9 	bl	80014b8 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f66:	4b93      	ldr	r3, [pc, #588]	; (80051b4 <HAL_RCC_ClockConfig+0x278>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d919      	bls.n	8004fa8 <HAL_RCC_ClockConfig+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d105      	bne.n	8004f86 <HAL_RCC_ClockConfig+0x4a>
 8004f7a:	4b8e      	ldr	r3, [pc, #568]	; (80051b4 <HAL_RCC_ClockConfig+0x278>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a8d      	ldr	r2, [pc, #564]	; (80051b4 <HAL_RCC_ClockConfig+0x278>)
 8004f80:	f043 0304 	orr.w	r3, r3, #4
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	4b8b      	ldr	r3, [pc, #556]	; (80051b4 <HAL_RCC_ClockConfig+0x278>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f023 0201 	bic.w	r2, r3, #1
 8004f8e:	4989      	ldr	r1, [pc, #548]	; (80051b4 <HAL_RCC_ClockConfig+0x278>)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f96:	4b87      	ldr	r3, [pc, #540]	; (80051b4 <HAL_RCC_ClockConfig+0x278>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d001      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e178      	b.n	800529a <HAL_RCC_ClockConfig+0x35e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d031      	beq.n	8005018 <HAL_RCC_ClockConfig+0xdc>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d024      	beq.n	8005006 <HAL_RCC_ClockConfig+0xca>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2b80      	cmp	r3, #128	; 0x80
 8004fc2:	d020      	beq.n	8005006 <HAL_RCC_ClockConfig+0xca>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	2b90      	cmp	r3, #144	; 0x90
 8004fca:	d01c      	beq.n	8005006 <HAL_RCC_ClockConfig+0xca>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	2ba0      	cmp	r3, #160	; 0xa0
 8004fd2:	d018      	beq.n	8005006 <HAL_RCC_ClockConfig+0xca>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	2bb0      	cmp	r3, #176	; 0xb0
 8004fda:	d014      	beq.n	8005006 <HAL_RCC_ClockConfig+0xca>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2bc0      	cmp	r3, #192	; 0xc0
 8004fe2:	d010      	beq.n	8005006 <HAL_RCC_ClockConfig+0xca>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2bd0      	cmp	r3, #208	; 0xd0
 8004fea:	d00c      	beq.n	8005006 <HAL_RCC_ClockConfig+0xca>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	2be0      	cmp	r3, #224	; 0xe0
 8004ff2:	d008      	beq.n	8005006 <HAL_RCC_ClockConfig+0xca>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	2bf0      	cmp	r3, #240	; 0xf0
 8004ffa:	d004      	beq.n	8005006 <HAL_RCC_ClockConfig+0xca>
 8004ffc:	f240 3141 	movw	r1, #833	; 0x341
 8005000:	486b      	ldr	r0, [pc, #428]	; (80051b0 <HAL_RCC_ClockConfig+0x274>)
 8005002:	f7fc fa59 	bl	80014b8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005006:	4b6c      	ldr	r3, [pc, #432]	; (80051b8 <HAL_RCC_ClockConfig+0x27c>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	4969      	ldr	r1, [pc, #420]	; (80051b8 <HAL_RCC_ClockConfig+0x27c>)
 8005014:	4313      	orrs	r3, r2
 8005016:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 80a3 	beq.w	800516c <HAL_RCC_ClockConfig+0x230>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d010      	beq.n	8005050 <HAL_RCC_ClockConfig+0x114>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d00c      	beq.n	8005050 <HAL_RCC_ClockConfig+0x114>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d008      	beq.n	8005050 <HAL_RCC_ClockConfig+0x114>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	2b03      	cmp	r3, #3
 8005044:	d004      	beq.n	8005050 <HAL_RCC_ClockConfig+0x114>
 8005046:	f44f 7152 	mov.w	r1, #840	; 0x348
 800504a:	4859      	ldr	r0, [pc, #356]	; (80051b0 <HAL_RCC_ClockConfig+0x274>)
 800504c:	f7fc fa34 	bl	80014b8 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2b02      	cmp	r3, #2
 8005056:	d107      	bne.n	8005068 <HAL_RCC_ClockConfig+0x12c>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005058:	4b57      	ldr	r3, [pc, #348]	; (80051b8 <HAL_RCC_ClockConfig+0x27c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d121      	bne.n	80050a8 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e118      	b.n	800529a <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b03      	cmp	r3, #3
 800506e:	d107      	bne.n	8005080 <HAL_RCC_ClockConfig+0x144>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005070:	4b51      	ldr	r3, [pc, #324]	; (80051b8 <HAL_RCC_ClockConfig+0x27c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d115      	bne.n	80050a8 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e10c      	b.n	800529a <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d107      	bne.n	8005098 <HAL_RCC_ClockConfig+0x15c>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005088:	4b4b      	ldr	r3, [pc, #300]	; (80051b8 <HAL_RCC_ClockConfig+0x27c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d109      	bne.n	80050a8 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e100      	b.n	800529a <HAL_RCC_ClockConfig+0x35e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005098:	4b47      	ldr	r3, [pc, #284]	; (80051b8 <HAL_RCC_ClockConfig+0x27c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e0f8      	b.n	800529a <HAL_RCC_ClockConfig+0x35e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050a8:	4b43      	ldr	r3, [pc, #268]	; (80051b8 <HAL_RCC_ClockConfig+0x27c>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f023 0203 	bic.w	r2, r3, #3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	4940      	ldr	r1, [pc, #256]	; (80051b8 <HAL_RCC_ClockConfig+0x27c>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050ba:	f7fc ff03 	bl	8001ec4 <HAL_GetTick>
 80050be:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d112      	bne.n	80050ee <HAL_RCC_ClockConfig+0x1b2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050c8:	e00a      	b.n	80050e0 <HAL_RCC_ClockConfig+0x1a4>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ca:	f7fc fefb 	bl	8001ec4 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d8:	4293      	cmp	r3, r2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_ClockConfig+0x1a4>
        {
          return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e0dc      	b.n	800529a <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050e0:	4b35      	ldr	r3, [pc, #212]	; (80051b8 <HAL_RCC_ClockConfig+0x27c>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f003 030c 	and.w	r3, r3, #12
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d1ee      	bne.n	80050ca <HAL_RCC_ClockConfig+0x18e>
 80050ec:	e03e      	b.n	800516c <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b03      	cmp	r3, #3
 80050f4:	d112      	bne.n	800511c <HAL_RCC_ClockConfig+0x1e0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050f6:	e00a      	b.n	800510e <HAL_RCC_ClockConfig+0x1d2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f8:	f7fc fee4 	bl	8001ec4 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	f241 3288 	movw	r2, #5000	; 0x1388
 8005106:	4293      	cmp	r3, r2
 8005108:	d901      	bls.n	800510e <HAL_RCC_ClockConfig+0x1d2>
        {
          return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e0c5      	b.n	800529a <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800510e:	4b2a      	ldr	r3, [pc, #168]	; (80051b8 <HAL_RCC_ClockConfig+0x27c>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f003 030c 	and.w	r3, r3, #12
 8005116:	2b0c      	cmp	r3, #12
 8005118:	d1ee      	bne.n	80050f8 <HAL_RCC_ClockConfig+0x1bc>
 800511a:	e027      	b.n	800516c <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d11d      	bne.n	8005160 <HAL_RCC_ClockConfig+0x224>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005124:	e00a      	b.n	800513c <HAL_RCC_ClockConfig+0x200>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005126:	f7fc fecd 	bl	8001ec4 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	f241 3288 	movw	r2, #5000	; 0x1388
 8005134:	4293      	cmp	r3, r2
 8005136:	d901      	bls.n	800513c <HAL_RCC_ClockConfig+0x200>
        {
          return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e0ae      	b.n	800529a <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800513c:	4b1e      	ldr	r3, [pc, #120]	; (80051b8 <HAL_RCC_ClockConfig+0x27c>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 030c 	and.w	r3, r3, #12
 8005144:	2b04      	cmp	r3, #4
 8005146:	d1ee      	bne.n	8005126 <HAL_RCC_ClockConfig+0x1ea>
 8005148:	e010      	b.n	800516c <HAL_RCC_ClockConfig+0x230>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800514a:	f7fc febb 	bl	8001ec4 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	f241 3288 	movw	r2, #5000	; 0x1388
 8005158:	4293      	cmp	r3, r2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_ClockConfig+0x224>
        {
          return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e09c      	b.n	800529a <HAL_RCC_ClockConfig+0x35e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005160:	4b15      	ldr	r3, [pc, #84]	; (80051b8 <HAL_RCC_ClockConfig+0x27c>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 030c 	and.w	r3, r3, #12
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1ee      	bne.n	800514a <HAL_RCC_ClockConfig+0x20e>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800516c:	4b11      	ldr	r3, [pc, #68]	; (80051b4 <HAL_RCC_ClockConfig+0x278>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d220      	bcs.n	80051bc <HAL_RCC_ClockConfig+0x280>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d105      	bne.n	800518c <HAL_RCC_ClockConfig+0x250>
 8005180:	4b0c      	ldr	r3, [pc, #48]	; (80051b4 <HAL_RCC_ClockConfig+0x278>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a0b      	ldr	r2, [pc, #44]	; (80051b4 <HAL_RCC_ClockConfig+0x278>)
 8005186:	f043 0304 	orr.w	r3, r3, #4
 800518a:	6013      	str	r3, [r2, #0]
 800518c:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <HAL_RCC_ClockConfig+0x278>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f023 0201 	bic.w	r2, r3, #1
 8005194:	4907      	ldr	r1, [pc, #28]	; (80051b4 <HAL_RCC_ClockConfig+0x278>)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	4313      	orrs	r3, r2
 800519a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800519c:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <HAL_RCC_ClockConfig+0x278>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d008      	beq.n	80051bc <HAL_RCC_ClockConfig+0x280>
    {
      return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e075      	b.n	800529a <HAL_RCC_ClockConfig+0x35e>
 80051ae:	bf00      	nop
 80051b0:	0800aa80 	.word	0x0800aa80
 80051b4:	40023c00 	.word	0x40023c00
 80051b8:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d025      	beq.n	8005214 <HAL_RCC_ClockConfig+0x2d8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d018      	beq.n	8005202 <HAL_RCC_ClockConfig+0x2c6>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d8:	d013      	beq.n	8005202 <HAL_RCC_ClockConfig+0x2c6>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80051e2:	d00e      	beq.n	8005202 <HAL_RCC_ClockConfig+0x2c6>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80051ec:	d009      	beq.n	8005202 <HAL_RCC_ClockConfig+0x2c6>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051f6:	d004      	beq.n	8005202 <HAL_RCC_ClockConfig+0x2c6>
 80051f8:	f240 31ad 	movw	r1, #941	; 0x3ad
 80051fc:	4829      	ldr	r0, [pc, #164]	; (80052a4 <HAL_RCC_ClockConfig+0x368>)
 80051fe:	f7fc f95b 	bl	80014b8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005202:	4b29      	ldr	r3, [pc, #164]	; (80052a8 <HAL_RCC_ClockConfig+0x36c>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	4926      	ldr	r1, [pc, #152]	; (80052a8 <HAL_RCC_ClockConfig+0x36c>)
 8005210:	4313      	orrs	r3, r2
 8005212:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0308 	and.w	r3, r3, #8
 800521c:	2b00      	cmp	r3, #0
 800521e:	d026      	beq.n	800526e <HAL_RCC_ClockConfig+0x332>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d018      	beq.n	800525a <HAL_RCC_ClockConfig+0x31e>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005230:	d013      	beq.n	800525a <HAL_RCC_ClockConfig+0x31e>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800523a:	d00e      	beq.n	800525a <HAL_RCC_ClockConfig+0x31e>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005244:	d009      	beq.n	800525a <HAL_RCC_ClockConfig+0x31e>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800524e:	d004      	beq.n	800525a <HAL_RCC_ClockConfig+0x31e>
 8005250:	f44f 716d 	mov.w	r1, #948	; 0x3b4
 8005254:	4813      	ldr	r0, [pc, #76]	; (80052a4 <HAL_RCC_ClockConfig+0x368>)
 8005256:	f7fc f92f 	bl	80014b8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800525a:	4b13      	ldr	r3, [pc, #76]	; (80052a8 <HAL_RCC_ClockConfig+0x36c>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	490f      	ldr	r1, [pc, #60]	; (80052a8 <HAL_RCC_ClockConfig+0x36c>)
 800526a:	4313      	orrs	r3, r2
 800526c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800526e:	f000 f823 	bl	80052b8 <HAL_RCC_GetSysClockFreq>
 8005272:	4601      	mov	r1, r0
 8005274:	4b0c      	ldr	r3, [pc, #48]	; (80052a8 <HAL_RCC_ClockConfig+0x36c>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	091b      	lsrs	r3, r3, #4
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	4a0b      	ldr	r2, [pc, #44]	; (80052ac <HAL_RCC_ClockConfig+0x370>)
 8005280:	5cd3      	ldrb	r3, [r2, r3]
 8005282:	fa21 f303 	lsr.w	r3, r1, r3
 8005286:	4a0a      	ldr	r2, [pc, #40]	; (80052b0 <HAL_RCC_ClockConfig+0x374>)
 8005288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800528a:	4b0a      	ldr	r3, [pc, #40]	; (80052b4 <HAL_RCC_ClockConfig+0x378>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4618      	mov	r0, r3
 8005290:	f7fc f950 	bl	8001534 <HAL_InitTick>
 8005294:	4603      	mov	r3, r0
 8005296:	72fb      	strb	r3, [r7, #11]

  return status;
 8005298:	7afb      	ldrb	r3, [r7, #11]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	0800aa80 	.word	0x0800aa80
 80052a8:	40023800 	.word	0x40023800
 80052ac:	0800ac64 	.word	0x0800ac64
 80052b0:	20000004 	.word	0x20000004
 80052b4:	20000008 	.word	0x20000008

080052b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80052be:	4b26      	ldr	r3, [pc, #152]	; (8005358 <HAL_RCC_GetSysClockFreq+0xa0>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f003 030c 	and.w	r3, r3, #12
 80052ca:	2b08      	cmp	r3, #8
 80052cc:	d006      	beq.n	80052dc <HAL_RCC_GetSysClockFreq+0x24>
 80052ce:	2b0c      	cmp	r3, #12
 80052d0:	d007      	beq.n	80052e2 <HAL_RCC_GetSysClockFreq+0x2a>
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d12c      	bne.n	8005330 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052d6:	4b21      	ldr	r3, [pc, #132]	; (800535c <HAL_RCC_GetSysClockFreq+0xa4>)
 80052d8:	613b      	str	r3, [r7, #16]
      break;
 80052da:	e037      	b.n	800534c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80052dc:	4b20      	ldr	r3, [pc, #128]	; (8005360 <HAL_RCC_GetSysClockFreq+0xa8>)
 80052de:	613b      	str	r3, [r7, #16]
      break;
 80052e0:	e034      	b.n	800534c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	0c9b      	lsrs	r3, r3, #18
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	4a1e      	ldr	r2, [pc, #120]	; (8005364 <HAL_RCC_GetSysClockFreq+0xac>)
 80052ec:	5cd3      	ldrb	r3, [r2, r3]
 80052ee:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	0d9b      	lsrs	r3, r3, #22
 80052f4:	f003 0303 	and.w	r3, r3, #3
 80052f8:	3301      	adds	r3, #1
 80052fa:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052fc:	4b16      	ldr	r3, [pc, #88]	; (8005358 <HAL_RCC_GetSysClockFreq+0xa0>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d008      	beq.n	800531a <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4a15      	ldr	r2, [pc, #84]	; (8005360 <HAL_RCC_GetSysClockFreq+0xa8>)
 800530c:	fb02 f203 	mul.w	r2, r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	fbb2 f3f3 	udiv	r3, r2, r3
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	e007      	b.n	800532a <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	4a0f      	ldr	r2, [pc, #60]	; (800535c <HAL_RCC_GetSysClockFreq+0xa4>)
 800531e:	fb02 f203 	mul.w	r2, r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	fbb2 f3f3 	udiv	r3, r2, r3
 8005328:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	613b      	str	r3, [r7, #16]
      break;
 800532e:	e00d      	b.n	800534c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005330:	4b09      	ldr	r3, [pc, #36]	; (8005358 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	0b5b      	lsrs	r3, r3, #13
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	3301      	adds	r3, #1
 8005340:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005344:	fa02 f303 	lsl.w	r3, r2, r3
 8005348:	613b      	str	r3, [r7, #16]
      break;
 800534a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800534c:	693b      	ldr	r3, [r7, #16]
}
 800534e:	4618      	mov	r0, r3
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	bc80      	pop	{r7}
 8005356:	4770      	bx	lr
 8005358:	40023800 	.word	0x40023800
 800535c:	00f42400 	.word	0x00f42400
 8005360:	007a1200 	.word	0x007a1200
 8005364:	0800ac58 	.word	0x0800ac58

08005368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005368:	b480      	push	{r7}
 800536a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800536c:	4b02      	ldr	r3, [pc, #8]	; (8005378 <HAL_RCC_GetHCLKFreq+0x10>)
 800536e:	681b      	ldr	r3, [r3, #0]
}
 8005370:	4618      	mov	r0, r3
 8005372:	46bd      	mov	sp, r7
 8005374:	bc80      	pop	{r7}
 8005376:	4770      	bx	lr
 8005378:	20000004 	.word	0x20000004

0800537c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005380:	f7ff fff2 	bl	8005368 <HAL_RCC_GetHCLKFreq>
 8005384:	4601      	mov	r1, r0
 8005386:	4b05      	ldr	r3, [pc, #20]	; (800539c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	0a1b      	lsrs	r3, r3, #8
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	4a03      	ldr	r2, [pc, #12]	; (80053a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005392:	5cd3      	ldrb	r3, [r2, r3]
 8005394:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005398:	4618      	mov	r0, r3
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40023800 	.word	0x40023800
 80053a0:	0800ac74 	.word	0x0800ac74

080053a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053a8:	f7ff ffde 	bl	8005368 <HAL_RCC_GetHCLKFreq>
 80053ac:	4601      	mov	r1, r0
 80053ae:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	0adb      	lsrs	r3, r3, #11
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	4a03      	ldr	r2, [pc, #12]	; (80053c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053ba:	5cd3      	ldrb	r3, [r2, r3]
 80053bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40023800 	.word	0x40023800
 80053c8:	0800ac74 	.word	0x0800ac74

080053cc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d104      	bne.n	80053e6 <HAL_RCC_GetClockConfig+0x1a>
 80053dc:	f240 41fa 	movw	r1, #1274	; 0x4fa
 80053e0:	4818      	ldr	r0, [pc, #96]	; (8005444 <HAL_RCC_GetClockConfig+0x78>)
 80053e2:	f7fc f869 	bl	80014b8 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d104      	bne.n	80053f6 <HAL_RCC_GetClockConfig+0x2a>
 80053ec:	f240 41fb 	movw	r1, #1275	; 0x4fb
 80053f0:	4814      	ldr	r0, [pc, #80]	; (8005444 <HAL_RCC_GetClockConfig+0x78>)
 80053f2:	f7fc f861 	bl	80014b8 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	220f      	movs	r2, #15
 80053fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80053fc:	4b12      	ldr	r3, [pc, #72]	; (8005448 <HAL_RCC_GetClockConfig+0x7c>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f003 0203 	and.w	r2, r3, #3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005408:	4b0f      	ldr	r3, [pc, #60]	; (8005448 <HAL_RCC_GetClockConfig+0x7c>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005414:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <HAL_RCC_GetClockConfig+0x7c>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005420:	4b09      	ldr	r3, [pc, #36]	; (8005448 <HAL_RCC_GetClockConfig+0x7c>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	08db      	lsrs	r3, r3, #3
 8005426:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800542e:	4b07      	ldr	r3, [pc, #28]	; (800544c <HAL_RCC_GetClockConfig+0x80>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0201 	and.w	r2, r3, #1
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	601a      	str	r2, [r3, #0]
}
 800543a:	bf00      	nop
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	0800aa80 	.word	0x0800aa80
 8005448:	40023800 	.word	0x40023800
 800544c:	40023c00 	.word	0x40023c00

08005450 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005458:	2300      	movs	r3, #0
 800545a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800545c:	4b29      	ldr	r3, [pc, #164]	; (8005504 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d12c      	bne.n	80054c2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005468:	4b26      	ldr	r3, [pc, #152]	; (8005504 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d005      	beq.n	8005480 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005474:	4b24      	ldr	r3, [pc, #144]	; (8005508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	e016      	b.n	80054ae <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005480:	4b20      	ldr	r3, [pc, #128]	; (8005504 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005484:	4a1f      	ldr	r2, [pc, #124]	; (8005504 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800548a:	6253      	str	r3, [r2, #36]	; 0x24
 800548c:	4b1d      	ldr	r3, [pc, #116]	; (8005504 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005494:	60fb      	str	r3, [r7, #12]
 8005496:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005498:	4b1b      	ldr	r3, [pc, #108]	; (8005508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80054a0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80054a2:	4b18      	ldr	r3, [pc, #96]	; (8005504 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	4a17      	ldr	r2, [pc, #92]	; (8005504 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80054a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054ac:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80054b4:	d105      	bne.n	80054c2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80054bc:	d101      	bne.n	80054c2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80054be:	2301      	movs	r3, #1
 80054c0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d105      	bne.n	80054d4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80054c8:	4b10      	ldr	r3, [pc, #64]	; (800550c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a0f      	ldr	r2, [pc, #60]	; (800550c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054ce:	f043 0304 	orr.w	r3, r3, #4
 80054d2:	6013      	str	r3, [r2, #0]
 80054d4:	4b0d      	ldr	r3, [pc, #52]	; (800550c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f023 0201 	bic.w	r2, r3, #1
 80054dc:	490b      	ldr	r1, [pc, #44]	; (800550c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80054e4:	4b09      	ldr	r3, [pc, #36]	; (800550c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d001      	beq.n	80054f6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e000      	b.n	80054f8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	371c      	adds	r7, #28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bc80      	pop	{r7}
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40023800 	.word	0x40023800
 8005508:	40007000 	.word	0x40007000
 800550c:	40023c00 	.word	0x40023c00

08005510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e088      	b.n	8005634 <HAL_TIM_Base_Init+0x124>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552a:	d02c      	beq.n	8005586 <HAL_TIM_Base_Init+0x76>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a42      	ldr	r2, [pc, #264]	; (800563c <HAL_TIM_Base_Init+0x12c>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d027      	beq.n	8005586 <HAL_TIM_Base_Init+0x76>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a41      	ldr	r2, [pc, #260]	; (8005640 <HAL_TIM_Base_Init+0x130>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d022      	beq.n	8005586 <HAL_TIM_Base_Init+0x76>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a3f      	ldr	r2, [pc, #252]	; (8005644 <HAL_TIM_Base_Init+0x134>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d01d      	beq.n	8005586 <HAL_TIM_Base_Init+0x76>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a3e      	ldr	r2, [pc, #248]	; (8005648 <HAL_TIM_Base_Init+0x138>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d018      	beq.n	8005586 <HAL_TIM_Base_Init+0x76>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a3c      	ldr	r2, [pc, #240]	; (800564c <HAL_TIM_Base_Init+0x13c>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d013      	beq.n	8005586 <HAL_TIM_Base_Init+0x76>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a3b      	ldr	r2, [pc, #236]	; (8005650 <HAL_TIM_Base_Init+0x140>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d00e      	beq.n	8005586 <HAL_TIM_Base_Init+0x76>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a39      	ldr	r2, [pc, #228]	; (8005654 <HAL_TIM_Base_Init+0x144>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d009      	beq.n	8005586 <HAL_TIM_Base_Init+0x76>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a38      	ldr	r2, [pc, #224]	; (8005658 <HAL_TIM_Base_Init+0x148>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d004      	beq.n	8005586 <HAL_TIM_Base_Init+0x76>
 800557c:	f240 110b 	movw	r1, #267	; 0x10b
 8005580:	4836      	ldr	r0, [pc, #216]	; (800565c <HAL_TIM_Base_Init+0x14c>)
 8005582:	f7fb ff99 	bl	80014b8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d014      	beq.n	80055b8 <HAL_TIM_Base_Init+0xa8>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	2b10      	cmp	r3, #16
 8005594:	d010      	beq.n	80055b8 <HAL_TIM_Base_Init+0xa8>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	2b20      	cmp	r3, #32
 800559c:	d00c      	beq.n	80055b8 <HAL_TIM_Base_Init+0xa8>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	2b40      	cmp	r3, #64	; 0x40
 80055a4:	d008      	beq.n	80055b8 <HAL_TIM_Base_Init+0xa8>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	2b60      	cmp	r3, #96	; 0x60
 80055ac:	d004      	beq.n	80055b8 <HAL_TIM_Base_Init+0xa8>
 80055ae:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80055b2:	482a      	ldr	r0, [pc, #168]	; (800565c <HAL_TIM_Base_Init+0x14c>)
 80055b4:	f7fb ff80 	bl	80014b8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00e      	beq.n	80055de <HAL_TIM_Base_Init+0xce>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055c8:	d009      	beq.n	80055de <HAL_TIM_Base_Init+0xce>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d2:	d004      	beq.n	80055de <HAL_TIM_Base_Init+0xce>
 80055d4:	f240 110d 	movw	r1, #269	; 0x10d
 80055d8:	4820      	ldr	r0, [pc, #128]	; (800565c <HAL_TIM_Base_Init+0x14c>)
 80055da:	f7fb ff6d 	bl	80014b8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d008      	beq.n	80055f8 <HAL_TIM_Base_Init+0xe8>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	2b80      	cmp	r3, #128	; 0x80
 80055ec:	d004      	beq.n	80055f8 <HAL_TIM_Base_Init+0xe8>
 80055ee:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80055f2:	481a      	ldr	r0, [pc, #104]	; (800565c <HAL_TIM_Base_Init+0x14c>)
 80055f4:	f7fb ff60 	bl	80014b8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	d106      	bne.n	8005612 <HAL_TIM_Base_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f7fc fa4d 	bl	8001aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2202      	movs	r2, #2
 8005616:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	3304      	adds	r3, #4
 8005622:	4619      	mov	r1, r3
 8005624:	4610      	mov	r0, r2
 8005626:	f001 f815 	bl	8006654 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	40000400 	.word	0x40000400
 8005640:	40000800 	.word	0x40000800
 8005644:	40000c00 	.word	0x40000c00
 8005648:	40001000 	.word	0x40001000
 800564c:	40001400 	.word	0x40001400
 8005650:	40010800 	.word	0x40010800
 8005654:	40010c00 	.word	0x40010c00
 8005658:	40011000 	.word	0x40011000
 800565c:	0800aab8 	.word	0x0800aab8

08005660 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005670:	d02c      	beq.n	80056cc <HAL_TIM_Base_Start+0x6c>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a24      	ldr	r2, [pc, #144]	; (8005708 <HAL_TIM_Base_Start+0xa8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d027      	beq.n	80056cc <HAL_TIM_Base_Start+0x6c>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a22      	ldr	r2, [pc, #136]	; (800570c <HAL_TIM_Base_Start+0xac>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d022      	beq.n	80056cc <HAL_TIM_Base_Start+0x6c>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a21      	ldr	r2, [pc, #132]	; (8005710 <HAL_TIM_Base_Start+0xb0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d01d      	beq.n	80056cc <HAL_TIM_Base_Start+0x6c>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a1f      	ldr	r2, [pc, #124]	; (8005714 <HAL_TIM_Base_Start+0xb4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d018      	beq.n	80056cc <HAL_TIM_Base_Start+0x6c>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a1e      	ldr	r2, [pc, #120]	; (8005718 <HAL_TIM_Base_Start+0xb8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d013      	beq.n	80056cc <HAL_TIM_Base_Start+0x6c>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a1c      	ldr	r2, [pc, #112]	; (800571c <HAL_TIM_Base_Start+0xbc>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d00e      	beq.n	80056cc <HAL_TIM_Base_Start+0x6c>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a1b      	ldr	r2, [pc, #108]	; (8005720 <HAL_TIM_Base_Start+0xc0>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d009      	beq.n	80056cc <HAL_TIM_Base_Start+0x6c>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a19      	ldr	r2, [pc, #100]	; (8005724 <HAL_TIM_Base_Start+0xc4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d004      	beq.n	80056cc <HAL_TIM_Base_Start+0x6c>
 80056c2:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 80056c6:	4818      	ldr	r0, [pc, #96]	; (8005728 <HAL_TIM_Base_Start+0xc8>)
 80056c8:	f7fb fef6 	bl	80014b8 <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b06      	cmp	r3, #6
 80056e4:	d007      	beq.n	80056f6 <HAL_TIM_Base_Start+0x96>
  {
    __HAL_TIM_ENABLE(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f042 0201 	orr.w	r2, r2, #1
 80056f4:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	40000400 	.word	0x40000400
 800570c:	40000800 	.word	0x40000800
 8005710:	40000c00 	.word	0x40000c00
 8005714:	40001000 	.word	0x40001000
 8005718:	40001400 	.word	0x40001400
 800571c:	40010800 	.word	0x40010800
 8005720:	40010c00 	.word	0x40010c00
 8005724:	40011000 	.word	0x40011000
 8005728:	0800aab8 	.word	0x0800aab8

0800572c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573c:	d02c      	beq.n	8005798 <HAL_TIM_Base_Stop+0x6c>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a24      	ldr	r2, [pc, #144]	; (80057d4 <HAL_TIM_Base_Stop+0xa8>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d027      	beq.n	8005798 <HAL_TIM_Base_Stop+0x6c>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a22      	ldr	r2, [pc, #136]	; (80057d8 <HAL_TIM_Base_Stop+0xac>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d022      	beq.n	8005798 <HAL_TIM_Base_Stop+0x6c>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a21      	ldr	r2, [pc, #132]	; (80057dc <HAL_TIM_Base_Stop+0xb0>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d01d      	beq.n	8005798 <HAL_TIM_Base_Stop+0x6c>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a1f      	ldr	r2, [pc, #124]	; (80057e0 <HAL_TIM_Base_Stop+0xb4>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d018      	beq.n	8005798 <HAL_TIM_Base_Stop+0x6c>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a1e      	ldr	r2, [pc, #120]	; (80057e4 <HAL_TIM_Base_Stop+0xb8>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d013      	beq.n	8005798 <HAL_TIM_Base_Stop+0x6c>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a1c      	ldr	r2, [pc, #112]	; (80057e8 <HAL_TIM_Base_Stop+0xbc>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00e      	beq.n	8005798 <HAL_TIM_Base_Stop+0x6c>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a1b      	ldr	r2, [pc, #108]	; (80057ec <HAL_TIM_Base_Stop+0xc0>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d009      	beq.n	8005798 <HAL_TIM_Base_Stop+0x6c>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a19      	ldr	r2, [pc, #100]	; (80057f0 <HAL_TIM_Base_Stop+0xc4>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d004      	beq.n	8005798 <HAL_TIM_Base_Stop+0x6c>
 800578e:	f240 1199 	movw	r1, #409	; 0x199
 8005792:	4818      	ldr	r0, [pc, #96]	; (80057f4 <HAL_TIM_Base_Stop+0xc8>)
 8005794:	f7fb fe90 	bl	80014b8 <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6a1a      	ldr	r2, [r3, #32]
 80057a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80057aa:	4013      	ands	r3, r2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d107      	bne.n	80057c0 <HAL_TIM_Base_Stop+0x94>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 0201 	bic.w	r2, r2, #1
 80057be:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	40000400 	.word	0x40000400
 80057d8:	40000800 	.word	0x40000800
 80057dc:	40000c00 	.word	0x40000c00
 80057e0:	40001000 	.word	0x40001000
 80057e4:	40001400 	.word	0x40001400
 80057e8:	40010800 	.word	0x40010800
 80057ec:	40010c00 	.word	0x40010c00
 80057f0:	40011000 	.word	0x40011000
 80057f4:	0800aab8 	.word	0x0800aab8

080057f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005808:	d02c      	beq.n	8005864 <HAL_TIM_Base_Start_IT+0x6c>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a24      	ldr	r2, [pc, #144]	; (80058a0 <HAL_TIM_Base_Start_IT+0xa8>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d027      	beq.n	8005864 <HAL_TIM_Base_Start_IT+0x6c>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a22      	ldr	r2, [pc, #136]	; (80058a4 <HAL_TIM_Base_Start_IT+0xac>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d022      	beq.n	8005864 <HAL_TIM_Base_Start_IT+0x6c>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a21      	ldr	r2, [pc, #132]	; (80058a8 <HAL_TIM_Base_Start_IT+0xb0>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d01d      	beq.n	8005864 <HAL_TIM_Base_Start_IT+0x6c>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a1f      	ldr	r2, [pc, #124]	; (80058ac <HAL_TIM_Base_Start_IT+0xb4>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d018      	beq.n	8005864 <HAL_TIM_Base_Start_IT+0x6c>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a1e      	ldr	r2, [pc, #120]	; (80058b0 <HAL_TIM_Base_Start_IT+0xb8>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d013      	beq.n	8005864 <HAL_TIM_Base_Start_IT+0x6c>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a1c      	ldr	r2, [pc, #112]	; (80058b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d00e      	beq.n	8005864 <HAL_TIM_Base_Start_IT+0x6c>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a1b      	ldr	r2, [pc, #108]	; (80058b8 <HAL_TIM_Base_Start_IT+0xc0>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d009      	beq.n	8005864 <HAL_TIM_Base_Start_IT+0x6c>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a19      	ldr	r2, [pc, #100]	; (80058bc <HAL_TIM_Base_Start_IT+0xc4>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d004      	beq.n	8005864 <HAL_TIM_Base_Start_IT+0x6c>
 800585a:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 800585e:	4818      	ldr	r0, [pc, #96]	; (80058c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005860:	f7fb fe2a 	bl	80014b8 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0201 	orr.w	r2, r2, #1
 8005872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 0307 	and.w	r3, r3, #7
 800587e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2b06      	cmp	r3, #6
 8005884:	d007      	beq.n	8005896 <HAL_TIM_Base_Start_IT+0x9e>
  {
    __HAL_TIM_ENABLE(htim);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 0201 	orr.w	r2, r2, #1
 8005894:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	40000400 	.word	0x40000400
 80058a4:	40000800 	.word	0x40000800
 80058a8:	40000c00 	.word	0x40000c00
 80058ac:	40001000 	.word	0x40001000
 80058b0:	40001400 	.word	0x40001400
 80058b4:	40010800 	.word	0x40010800
 80058b8:	40010c00 	.word	0x40010c00
 80058bc:	40011000 	.word	0x40011000
 80058c0:	0800aab8 	.word	0x0800aab8

080058c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e088      	b.n	80059e8 <HAL_TIM_PWM_Init+0x124>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058de:	d02c      	beq.n	800593a <HAL_TIM_PWM_Init+0x76>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a42      	ldr	r2, [pc, #264]	; (80059f0 <HAL_TIM_PWM_Init+0x12c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d027      	beq.n	800593a <HAL_TIM_PWM_Init+0x76>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a41      	ldr	r2, [pc, #260]	; (80059f4 <HAL_TIM_PWM_Init+0x130>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d022      	beq.n	800593a <HAL_TIM_PWM_Init+0x76>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a3f      	ldr	r2, [pc, #252]	; (80059f8 <HAL_TIM_PWM_Init+0x134>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d01d      	beq.n	800593a <HAL_TIM_PWM_Init+0x76>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a3e      	ldr	r2, [pc, #248]	; (80059fc <HAL_TIM_PWM_Init+0x138>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d018      	beq.n	800593a <HAL_TIM_PWM_Init+0x76>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a3c      	ldr	r2, [pc, #240]	; (8005a00 <HAL_TIM_PWM_Init+0x13c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <HAL_TIM_PWM_Init+0x76>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a3b      	ldr	r2, [pc, #236]	; (8005a04 <HAL_TIM_PWM_Init+0x140>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00e      	beq.n	800593a <HAL_TIM_PWM_Init+0x76>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a39      	ldr	r2, [pc, #228]	; (8005a08 <HAL_TIM_PWM_Init+0x144>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d009      	beq.n	800593a <HAL_TIM_PWM_Init+0x76>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a38      	ldr	r2, [pc, #224]	; (8005a0c <HAL_TIM_PWM_Init+0x148>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d004      	beq.n	800593a <HAL_TIM_PWM_Init+0x76>
 8005930:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8005934:	4836      	ldr	r0, [pc, #216]	; (8005a10 <HAL_TIM_PWM_Init+0x14c>)
 8005936:	f7fb fdbf 	bl	80014b8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d014      	beq.n	800596c <HAL_TIM_PWM_Init+0xa8>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	2b10      	cmp	r3, #16
 8005948:	d010      	beq.n	800596c <HAL_TIM_PWM_Init+0xa8>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	2b20      	cmp	r3, #32
 8005950:	d00c      	beq.n	800596c <HAL_TIM_PWM_Init+0xa8>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	2b40      	cmp	r3, #64	; 0x40
 8005958:	d008      	beq.n	800596c <HAL_TIM_PWM_Init+0xa8>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	2b60      	cmp	r3, #96	; 0x60
 8005960:	d004      	beq.n	800596c <HAL_TIM_PWM_Init+0xa8>
 8005962:	f240 4171 	movw	r1, #1137	; 0x471
 8005966:	482a      	ldr	r0, [pc, #168]	; (8005a10 <HAL_TIM_PWM_Init+0x14c>)
 8005968:	f7fb fda6 	bl	80014b8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00e      	beq.n	8005992 <HAL_TIM_PWM_Init+0xce>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800597c:	d009      	beq.n	8005992 <HAL_TIM_PWM_Init+0xce>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005986:	d004      	beq.n	8005992 <HAL_TIM_PWM_Init+0xce>
 8005988:	f240 4172 	movw	r1, #1138	; 0x472
 800598c:	4820      	ldr	r0, [pc, #128]	; (8005a10 <HAL_TIM_PWM_Init+0x14c>)
 800598e:	f7fb fd93 	bl	80014b8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d008      	beq.n	80059ac <HAL_TIM_PWM_Init+0xe8>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	2b80      	cmp	r3, #128	; 0x80
 80059a0:	d004      	beq.n	80059ac <HAL_TIM_PWM_Init+0xe8>
 80059a2:	f240 4173 	movw	r1, #1139	; 0x473
 80059a6:	481a      	ldr	r0, [pc, #104]	; (8005a10 <HAL_TIM_PWM_Init+0x14c>)
 80059a8:	f7fb fd86 	bl	80014b8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d106      	bne.n	80059c6 <HAL_TIM_PWM_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f827 	bl	8005a14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2202      	movs	r2, #2
 80059ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	3304      	adds	r3, #4
 80059d6:	4619      	mov	r1, r3
 80059d8:	4610      	mov	r0, r2
 80059da:	f000 fe3b 	bl	8006654 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	40000400 	.word	0x40000400
 80059f4:	40000800 	.word	0x40000800
 80059f8:	40000c00 	.word	0x40000c00
 80059fc:	40001000 	.word	0x40001000
 8005a00:	40001400 	.word	0x40001400
 8005a04:	40010800 	.word	0x40010800
 8005a08:	40010c00 	.word	0x40010c00
 8005a0c:	40011000 	.word	0x40011000
 8005a10:	0800aab8 	.word	0x0800aab8

08005a14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bc80      	pop	{r7}
 8005a24:	4770      	bx	lr
	...

08005a28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a3a:	d10b      	bne.n	8005a54 <HAL_TIM_PWM_Start+0x2c>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d05b      	beq.n	8005afa <HAL_TIM_PWM_Start+0xd2>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b04      	cmp	r3, #4
 8005a46:	d058      	beq.n	8005afa <HAL_TIM_PWM_Start+0xd2>
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	2b08      	cmp	r3, #8
 8005a4c:	d055      	beq.n	8005afa <HAL_TIM_PWM_Start+0xd2>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2b0c      	cmp	r3, #12
 8005a52:	d052      	beq.n	8005afa <HAL_TIM_PWM_Start+0xd2>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a36      	ldr	r2, [pc, #216]	; (8005b34 <HAL_TIM_PWM_Start+0x10c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d10b      	bne.n	8005a76 <HAL_TIM_PWM_Start+0x4e>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d04a      	beq.n	8005afa <HAL_TIM_PWM_Start+0xd2>
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d047      	beq.n	8005afa <HAL_TIM_PWM_Start+0xd2>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d044      	beq.n	8005afa <HAL_TIM_PWM_Start+0xd2>
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2b0c      	cmp	r3, #12
 8005a74:	d041      	beq.n	8005afa <HAL_TIM_PWM_Start+0xd2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a2f      	ldr	r2, [pc, #188]	; (8005b38 <HAL_TIM_PWM_Start+0x110>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d10b      	bne.n	8005a98 <HAL_TIM_PWM_Start+0x70>
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d039      	beq.n	8005afa <HAL_TIM_PWM_Start+0xd2>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b04      	cmp	r3, #4
 8005a8a:	d036      	beq.n	8005afa <HAL_TIM_PWM_Start+0xd2>
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b08      	cmp	r3, #8
 8005a90:	d033      	beq.n	8005afa <HAL_TIM_PWM_Start+0xd2>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b0c      	cmp	r3, #12
 8005a96:	d030      	beq.n	8005afa <HAL_TIM_PWM_Start+0xd2>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a27      	ldr	r2, [pc, #156]	; (8005b3c <HAL_TIM_PWM_Start+0x114>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d10b      	bne.n	8005aba <HAL_TIM_PWM_Start+0x92>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d028      	beq.n	8005afa <HAL_TIM_PWM_Start+0xd2>
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d025      	beq.n	8005afa <HAL_TIM_PWM_Start+0xd2>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d022      	beq.n	8005afa <HAL_TIM_PWM_Start+0xd2>
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	2b0c      	cmp	r3, #12
 8005ab8:	d01f      	beq.n	8005afa <HAL_TIM_PWM_Start+0xd2>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a20      	ldr	r2, [pc, #128]	; (8005b40 <HAL_TIM_PWM_Start+0x118>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d105      	bne.n	8005ad0 <HAL_TIM_PWM_Start+0xa8>
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d017      	beq.n	8005afa <HAL_TIM_PWM_Start+0xd2>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d014      	beq.n	8005afa <HAL_TIM_PWM_Start+0xd2>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a1b      	ldr	r2, [pc, #108]	; (8005b44 <HAL_TIM_PWM_Start+0x11c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d102      	bne.n	8005ae0 <HAL_TIM_PWM_Start+0xb8>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00c      	beq.n	8005afa <HAL_TIM_PWM_Start+0xd2>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a18      	ldr	r2, [pc, #96]	; (8005b48 <HAL_TIM_PWM_Start+0x120>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d102      	bne.n	8005af0 <HAL_TIM_PWM_Start+0xc8>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d004      	beq.n	8005afa <HAL_TIM_PWM_Start+0xd2>
 8005af0:	f44f 619d 	mov.w	r1, #1256	; 0x4e8
 8005af4:	4815      	ldr	r0, [pc, #84]	; (8005b4c <HAL_TIM_PWM_Start+0x124>)
 8005af6:	f7fb fcdf 	bl	80014b8 <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2201      	movs	r2, #1
 8005b00:	6839      	ldr	r1, [r7, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 ffa2 	bl	8006a4c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f003 0307 	and.w	r3, r3, #7
 8005b12:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2b06      	cmp	r3, #6
 8005b18:	d007      	beq.n	8005b2a <HAL_TIM_PWM_Start+0x102>
  {
    __HAL_TIM_ENABLE(htim);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f042 0201 	orr.w	r2, r2, #1
 8005b28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	40000400 	.word	0x40000400
 8005b38:	40000800 	.word	0x40000800
 8005b3c:	40000c00 	.word	0x40000c00
 8005b40:	40010800 	.word	0x40010800
 8005b44:	40010c00 	.word	0x40010c00
 8005b48:	40011000 	.word	0x40011000
 8005b4c:	0800aab8 	.word	0x0800aab8

08005b50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d122      	bne.n	8005bac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f003 0302 	and.w	r3, r3, #2
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d11b      	bne.n	8005bac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f06f 0202 	mvn.w	r2, #2
 8005b7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	f003 0303 	and.w	r3, r3, #3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fd43 	bl	800661e <HAL_TIM_IC_CaptureCallback>
 8005b98:	e005      	b.n	8005ba6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fd36 	bl	800660c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fd45 	bl	8006630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	f003 0304 	and.w	r3, r3, #4
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	d122      	bne.n	8005c00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f003 0304 	and.w	r3, r3, #4
 8005bc4:	2b04      	cmp	r3, #4
 8005bc6:	d11b      	bne.n	8005c00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f06f 0204 	mvn.w	r2, #4
 8005bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fd19 	bl	800661e <HAL_TIM_IC_CaptureCallback>
 8005bec:	e005      	b.n	8005bfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fd0c 	bl	800660c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fd1b 	bl	8006630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	f003 0308 	and.w	r3, r3, #8
 8005c0a:	2b08      	cmp	r3, #8
 8005c0c:	d122      	bne.n	8005c54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	2b08      	cmp	r3, #8
 8005c1a:	d11b      	bne.n	8005c54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f06f 0208 	mvn.w	r2, #8
 8005c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2204      	movs	r2, #4
 8005c2a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	f003 0303 	and.w	r3, r3, #3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fcef 	bl	800661e <HAL_TIM_IC_CaptureCallback>
 8005c40:	e005      	b.n	8005c4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fce2 	bl	800660c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fcf1 	bl	8006630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f003 0310 	and.w	r3, r3, #16
 8005c5e:	2b10      	cmp	r3, #16
 8005c60:	d122      	bne.n	8005ca8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f003 0310 	and.w	r3, r3, #16
 8005c6c:	2b10      	cmp	r3, #16
 8005c6e:	d11b      	bne.n	8005ca8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f06f 0210 	mvn.w	r2, #16
 8005c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2208      	movs	r2, #8
 8005c7e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fcc5 	bl	800661e <HAL_TIM_IC_CaptureCallback>
 8005c94:	e005      	b.n	8005ca2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fcb8 	bl	800660c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fcc7 	bl	8006630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d10e      	bne.n	8005cd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d107      	bne.n	8005cd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f06f 0201 	mvn.w	r2, #1
 8005ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7fb fbcc 	bl	800146c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cde:	2b40      	cmp	r3, #64	; 0x40
 8005ce0:	d10e      	bne.n	8005d00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cec:	2b40      	cmp	r3, #64	; 0x40
 8005cee:	d107      	bne.n	8005d00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fca1 	bl	8006642 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d00:	bf00      	nop
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d010      	beq.n	8005d3c <HAL_TIM_PWM_ConfigChannel+0x34>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b04      	cmp	r3, #4
 8005d1e:	d00d      	beq.n	8005d3c <HAL_TIM_PWM_ConfigChannel+0x34>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b08      	cmp	r3, #8
 8005d24:	d00a      	beq.n	8005d3c <HAL_TIM_PWM_ConfigChannel+0x34>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b0c      	cmp	r3, #12
 8005d2a:	d007      	beq.n	8005d3c <HAL_TIM_PWM_ConfigChannel+0x34>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b3c      	cmp	r3, #60	; 0x3c
 8005d30:	d004      	beq.n	8005d3c <HAL_TIM_PWM_ConfigChannel+0x34>
 8005d32:	f640 5169 	movw	r1, #3433	; 0xd69
 8005d36:	488d      	ldr	r0, [pc, #564]	; (8005f6c <HAL_TIM_PWM_ConfigChannel+0x264>)
 8005d38:	f7fb fbbe 	bl	80014b8 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b60      	cmp	r3, #96	; 0x60
 8005d42:	d008      	beq.n	8005d56 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2b70      	cmp	r3, #112	; 0x70
 8005d4a:	d004      	beq.n	8005d56 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8005d4c:	f640 516a 	movw	r1, #3434	; 0xd6a
 8005d50:	4886      	ldr	r0, [pc, #536]	; (8005f6c <HAL_TIM_PWM_ConfigChannel+0x264>)
 8005d52:	f7fb fbb1 	bl	80014b8 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d008      	beq.n	8005d70 <HAL_TIM_PWM_ConfigChannel+0x68>
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d004      	beq.n	8005d70 <HAL_TIM_PWM_ConfigChannel+0x68>
 8005d66:	f640 516b 	movw	r1, #3435	; 0xd6b
 8005d6a:	4880      	ldr	r0, [pc, #512]	; (8005f6c <HAL_TIM_PWM_ConfigChannel+0x264>)
 8005d6c:	f7fb fba4 	bl	80014b8 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d008      	beq.n	8005d8a <HAL_TIM_PWM_ConfigChannel+0x82>
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	2b04      	cmp	r3, #4
 8005d7e:	d004      	beq.n	8005d8a <HAL_TIM_PWM_ConfigChannel+0x82>
 8005d80:	f640 516c 	movw	r1, #3436	; 0xd6c
 8005d84:	4879      	ldr	r0, [pc, #484]	; (8005f6c <HAL_TIM_PWM_ConfigChannel+0x264>)
 8005d86:	f7fb fb97 	bl	80014b8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d101      	bne.n	8005d98 <HAL_TIM_PWM_ConfigChannel+0x90>
 8005d94:	2302      	movs	r3, #2
 8005d96:	e13b      	b.n	8006010 <HAL_TIM_PWM_ConfigChannel+0x308>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b0c      	cmp	r3, #12
 8005dac:	f200 8126 	bhi.w	8005ffc <HAL_TIM_PWM_ConfigChannel+0x2f4>
 8005db0:	a201      	add	r2, pc, #4	; (adr r2, 8005db8 <HAL_TIM_PWM_ConfigChannel+0xb0>)
 8005db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db6:	bf00      	nop
 8005db8:	08005ded 	.word	0x08005ded
 8005dbc:	08005ffd 	.word	0x08005ffd
 8005dc0:	08005ffd 	.word	0x08005ffd
 8005dc4:	08005ffd 	.word	0x08005ffd
 8005dc8:	08005e7d 	.word	0x08005e7d
 8005dcc:	08005ffd 	.word	0x08005ffd
 8005dd0:	08005ffd 	.word	0x08005ffd
 8005dd4:	08005ffd 	.word	0x08005ffd
 8005dd8:	08005efb 	.word	0x08005efb
 8005ddc:	08005ffd 	.word	0x08005ffd
 8005de0:	08005ffd 	.word	0x08005ffd
 8005de4:	08005ffd 	.word	0x08005ffd
 8005de8:	08005f89 	.word	0x08005f89
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df4:	d022      	beq.n	8005e3c <HAL_TIM_PWM_ConfigChannel+0x134>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a5d      	ldr	r2, [pc, #372]	; (8005f70 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d01d      	beq.n	8005e3c <HAL_TIM_PWM_ConfigChannel+0x134>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a5b      	ldr	r2, [pc, #364]	; (8005f74 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d018      	beq.n	8005e3c <HAL_TIM_PWM_ConfigChannel+0x134>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a5a      	ldr	r2, [pc, #360]	; (8005f78 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d013      	beq.n	8005e3c <HAL_TIM_PWM_ConfigChannel+0x134>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a58      	ldr	r2, [pc, #352]	; (8005f7c <HAL_TIM_PWM_ConfigChannel+0x274>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00e      	beq.n	8005e3c <HAL_TIM_PWM_ConfigChannel+0x134>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a57      	ldr	r2, [pc, #348]	; (8005f80 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d009      	beq.n	8005e3c <HAL_TIM_PWM_ConfigChannel+0x134>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a55      	ldr	r2, [pc, #340]	; (8005f84 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d004      	beq.n	8005e3c <HAL_TIM_PWM_ConfigChannel+0x134>
 8005e32:	f640 5178 	movw	r1, #3448	; 0xd78
 8005e36:	484d      	ldr	r0, [pc, #308]	; (8005f6c <HAL_TIM_PWM_ConfigChannel+0x264>)
 8005e38:	f7fb fb3e 	bl	80014b8 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68b9      	ldr	r1, [r7, #8]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fc76 	bl	8006734 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699a      	ldr	r2, [r3, #24]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0208 	orr.w	r2, r2, #8
 8005e56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699a      	ldr	r2, [r3, #24]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0204 	bic.w	r2, r2, #4
 8005e66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6999      	ldr	r1, [r3, #24]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	619a      	str	r2, [r3, #24]
      break;
 8005e7a:	e0c0      	b.n	8005ffe <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e84:	d018      	beq.n	8005eb8 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a39      	ldr	r2, [pc, #228]	; (8005f70 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d013      	beq.n	8005eb8 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a37      	ldr	r2, [pc, #220]	; (8005f74 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d00e      	beq.n	8005eb8 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a36      	ldr	r2, [pc, #216]	; (8005f78 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d009      	beq.n	8005eb8 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a34      	ldr	r2, [pc, #208]	; (8005f7c <HAL_TIM_PWM_ConfigChannel+0x274>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d004      	beq.n	8005eb8 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8005eae:	f640 5189 	movw	r1, #3465	; 0xd89
 8005eb2:	482e      	ldr	r0, [pc, #184]	; (8005f6c <HAL_TIM_PWM_ConfigChannel+0x264>)
 8005eb4:	f7fb fb00 	bl	80014b8 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68b9      	ldr	r1, [r7, #8]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 fc74 	bl	80067ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699a      	ldr	r2, [r3, #24]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ed2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699a      	ldr	r2, [r3, #24]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6999      	ldr	r1, [r3, #24]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	021a      	lsls	r2, r3, #8
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	619a      	str	r2, [r3, #24]
      break;
 8005ef8:	e081      	b.n	8005ffe <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f02:	d013      	beq.n	8005f2c <HAL_TIM_PWM_ConfigChannel+0x224>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a19      	ldr	r2, [pc, #100]	; (8005f70 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d00e      	beq.n	8005f2c <HAL_TIM_PWM_ConfigChannel+0x224>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a18      	ldr	r2, [pc, #96]	; (8005f74 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d009      	beq.n	8005f2c <HAL_TIM_PWM_ConfigChannel+0x224>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a16      	ldr	r2, [pc, #88]	; (8005f78 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d004      	beq.n	8005f2c <HAL_TIM_PWM_ConfigChannel+0x224>
 8005f22:	f640 519a 	movw	r1, #3482	; 0xd9a
 8005f26:	4811      	ldr	r0, [pc, #68]	; (8005f6c <HAL_TIM_PWM_ConfigChannel+0x264>)
 8005f28:	f7fb fac6 	bl	80014b8 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68b9      	ldr	r1, [r7, #8]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 fc78 	bl	8006828 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	69da      	ldr	r2, [r3, #28]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f042 0208 	orr.w	r2, r2, #8
 8005f46:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	69da      	ldr	r2, [r3, #28]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0204 	bic.w	r2, r2, #4
 8005f56:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	69d9      	ldr	r1, [r3, #28]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	61da      	str	r2, [r3, #28]
      break;
 8005f6a:	e048      	b.n	8005ffe <HAL_TIM_PWM_ConfigChannel+0x2f6>
 8005f6c:	0800aab8 	.word	0x0800aab8
 8005f70:	40000400 	.word	0x40000400
 8005f74:	40000800 	.word	0x40000800
 8005f78:	40000c00 	.word	0x40000c00
 8005f7c:	40010800 	.word	0x40010800
 8005f80:	40010c00 	.word	0x40010c00
 8005f84:	40011000 	.word	0x40011000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f90:	d013      	beq.n	8005fba <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a20      	ldr	r2, [pc, #128]	; (8006018 <HAL_TIM_PWM_ConfigChannel+0x310>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d00e      	beq.n	8005fba <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a1e      	ldr	r2, [pc, #120]	; (800601c <HAL_TIM_PWM_ConfigChannel+0x314>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d009      	beq.n	8005fba <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a1d      	ldr	r2, [pc, #116]	; (8006020 <HAL_TIM_PWM_ConfigChannel+0x318>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d004      	beq.n	8005fba <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8005fb0:	f640 51ab 	movw	r1, #3499	; 0xdab
 8005fb4:	481b      	ldr	r0, [pc, #108]	; (8006024 <HAL_TIM_PWM_ConfigChannel+0x31c>)
 8005fb6:	f7fb fa7f 	bl	80014b8 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68b9      	ldr	r1, [r7, #8]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f000 fc6e 	bl	80068a2 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69da      	ldr	r2, [r3, #28]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	69da      	ldr	r2, [r3, #28]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	69d9      	ldr	r1, [r3, #28]
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	021a      	lsls	r2, r3, #8
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	61da      	str	r2, [r3, #28]
      break;
 8005ffa:	e000      	b.n	8005ffe <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    default:
      break;
 8005ffc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	40000400 	.word	0x40000400
 800601c:	40000800 	.word	0x40000800
 8006020:	40000c00 	.word	0x40000c00
 8006024:	0800aab8 	.word	0x0800aab8

08006028 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006038:	2b01      	cmp	r3, #1
 800603a:	d101      	bne.n	8006040 <HAL_TIM_ConfigClockSource+0x18>
 800603c:	2302      	movs	r3, #2
 800603e:	e2d7      	b.n	80065f0 <HAL_TIM_ConfigClockSource+0x5c8>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006058:	d029      	beq.n	80060ae <HAL_TIM_ConfigClockSource+0x86>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006062:	d024      	beq.n	80060ae <HAL_TIM_ConfigClockSource+0x86>
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d020      	beq.n	80060ae <HAL_TIM_ConfigClockSource+0x86>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b10      	cmp	r3, #16
 8006072:	d01c      	beq.n	80060ae <HAL_TIM_ConfigClockSource+0x86>
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b20      	cmp	r3, #32
 800607a:	d018      	beq.n	80060ae <HAL_TIM_ConfigClockSource+0x86>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b30      	cmp	r3, #48	; 0x30
 8006082:	d014      	beq.n	80060ae <HAL_TIM_ConfigClockSource+0x86>
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b40      	cmp	r3, #64	; 0x40
 800608a:	d010      	beq.n	80060ae <HAL_TIM_ConfigClockSource+0x86>
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2b50      	cmp	r3, #80	; 0x50
 8006092:	d00c      	beq.n	80060ae <HAL_TIM_ConfigClockSource+0x86>
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b60      	cmp	r3, #96	; 0x60
 800609a:	d008      	beq.n	80060ae <HAL_TIM_ConfigClockSource+0x86>
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2b70      	cmp	r3, #112	; 0x70
 80060a2:	d004      	beq.n	80060ae <HAL_TIM_ConfigClockSource+0x86>
 80060a4:	f241 01d0 	movw	r1, #4304	; 0x10d0
 80060a8:	4874      	ldr	r0, [pc, #464]	; (800627c <HAL_TIM_ConfigClockSource+0x254>)
 80060aa:	f7fb fa05 	bl	80014b8 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060bc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060c4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b40      	cmp	r3, #64	; 0x40
 80060d4:	f000 820a 	beq.w	80064ec <HAL_TIM_ConfigClockSource+0x4c4>
 80060d8:	2b40      	cmp	r3, #64	; 0x40
 80060da:	d80f      	bhi.n	80060fc <HAL_TIM_ConfigClockSource+0xd4>
 80060dc:	2b10      	cmp	r3, #16
 80060de:	f000 8256 	beq.w	800658e <HAL_TIM_ConfigClockSource+0x566>
 80060e2:	2b10      	cmp	r3, #16
 80060e4:	d803      	bhi.n	80060ee <HAL_TIM_ConfigClockSource+0xc6>
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f000 8251 	beq.w	800658e <HAL_TIM_ConfigClockSource+0x566>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80060ec:	e277      	b.n	80065de <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 80060ee:	2b20      	cmp	r3, #32
 80060f0:	f000 824d 	beq.w	800658e <HAL_TIM_ConfigClockSource+0x566>
 80060f4:	2b30      	cmp	r3, #48	; 0x30
 80060f6:	f000 824a 	beq.w	800658e <HAL_TIM_ConfigClockSource+0x566>
      break;
 80060fa:	e270      	b.n	80065de <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 80060fc:	2b70      	cmp	r3, #112	; 0x70
 80060fe:	d04c      	beq.n	800619a <HAL_TIM_ConfigClockSource+0x172>
 8006100:	2b70      	cmp	r3, #112	; 0x70
 8006102:	d806      	bhi.n	8006112 <HAL_TIM_ConfigClockSource+0xea>
 8006104:	2b50      	cmp	r3, #80	; 0x50
 8006106:	f000 8141 	beq.w	800638c <HAL_TIM_ConfigClockSource+0x364>
 800610a:	2b60      	cmp	r3, #96	; 0x60
 800610c:	f000 818f 	beq.w	800642e <HAL_TIM_ConfigClockSource+0x406>
      break;
 8006110:	e265      	b.n	80065de <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 8006112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006116:	d004      	beq.n	8006122 <HAL_TIM_ConfigClockSource+0xfa>
 8006118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800611c:	f000 80c0 	beq.w	80062a0 <HAL_TIM_ConfigClockSource+0x278>
      break;
 8006120:	e25d      	b.n	80065de <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800612a:	f000 8257 	beq.w	80065dc <HAL_TIM_ConfigClockSource+0x5b4>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a53      	ldr	r2, [pc, #332]	; (8006280 <HAL_TIM_ConfigClockSource+0x258>)
 8006134:	4293      	cmp	r3, r2
 8006136:	f000 8251 	beq.w	80065dc <HAL_TIM_ConfigClockSource+0x5b4>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a51      	ldr	r2, [pc, #324]	; (8006284 <HAL_TIM_ConfigClockSource+0x25c>)
 8006140:	4293      	cmp	r3, r2
 8006142:	f000 824b 	beq.w	80065dc <HAL_TIM_ConfigClockSource+0x5b4>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a4f      	ldr	r2, [pc, #316]	; (8006288 <HAL_TIM_ConfigClockSource+0x260>)
 800614c:	4293      	cmp	r3, r2
 800614e:	f000 8245 	beq.w	80065dc <HAL_TIM_ConfigClockSource+0x5b4>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a4d      	ldr	r2, [pc, #308]	; (800628c <HAL_TIM_ConfigClockSource+0x264>)
 8006158:	4293      	cmp	r3, r2
 800615a:	f000 823f 	beq.w	80065dc <HAL_TIM_ConfigClockSource+0x5b4>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a4b      	ldr	r2, [pc, #300]	; (8006290 <HAL_TIM_ConfigClockSource+0x268>)
 8006164:	4293      	cmp	r3, r2
 8006166:	f000 8239 	beq.w	80065dc <HAL_TIM_ConfigClockSource+0x5b4>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a49      	ldr	r2, [pc, #292]	; (8006294 <HAL_TIM_ConfigClockSource+0x26c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	f000 8233 	beq.w	80065dc <HAL_TIM_ConfigClockSource+0x5b4>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a47      	ldr	r2, [pc, #284]	; (8006298 <HAL_TIM_ConfigClockSource+0x270>)
 800617c:	4293      	cmp	r3, r2
 800617e:	f000 822d 	beq.w	80065dc <HAL_TIM_ConfigClockSource+0x5b4>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a45      	ldr	r2, [pc, #276]	; (800629c <HAL_TIM_ConfigClockSource+0x274>)
 8006188:	4293      	cmp	r3, r2
 800618a:	f000 8227 	beq.w	80065dc <HAL_TIM_ConfigClockSource+0x5b4>
 800618e:	f241 01dc 	movw	r1, #4316	; 0x10dc
 8006192:	483a      	ldr	r0, [pc, #232]	; (800627c <HAL_TIM_ConfigClockSource+0x254>)
 8006194:	f7fb f990 	bl	80014b8 <assert_failed>
      break;
 8006198:	e220      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x5b4>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a2:	d018      	beq.n	80061d6 <HAL_TIM_ConfigClockSource+0x1ae>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a35      	ldr	r2, [pc, #212]	; (8006280 <HAL_TIM_ConfigClockSource+0x258>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d013      	beq.n	80061d6 <HAL_TIM_ConfigClockSource+0x1ae>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a34      	ldr	r2, [pc, #208]	; (8006284 <HAL_TIM_ConfigClockSource+0x25c>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d00e      	beq.n	80061d6 <HAL_TIM_ConfigClockSource+0x1ae>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a32      	ldr	r2, [pc, #200]	; (8006288 <HAL_TIM_ConfigClockSource+0x260>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d009      	beq.n	80061d6 <HAL_TIM_ConfigClockSource+0x1ae>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a33      	ldr	r2, [pc, #204]	; (8006294 <HAL_TIM_ConfigClockSource+0x26c>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d004      	beq.n	80061d6 <HAL_TIM_ConfigClockSource+0x1ae>
 80061cc:	f241 01e3 	movw	r1, #4323	; 0x10e3
 80061d0:	482a      	ldr	r0, [pc, #168]	; (800627c <HAL_TIM_ConfigClockSource+0x254>)
 80061d2:	f7fb f971 	bl	80014b8 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d013      	beq.n	8006206 <HAL_TIM_ConfigClockSource+0x1de>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e6:	d00e      	beq.n	8006206 <HAL_TIM_ConfigClockSource+0x1de>
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061f0:	d009      	beq.n	8006206 <HAL_TIM_ConfigClockSource+0x1de>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061fa:	d004      	beq.n	8006206 <HAL_TIM_ConfigClockSource+0x1de>
 80061fc:	f241 01e6 	movw	r1, #4326	; 0x10e6
 8006200:	481e      	ldr	r0, [pc, #120]	; (800627c <HAL_TIM_ConfigClockSource+0x254>)
 8006202:	f7fb f959 	bl	80014b8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800620e:	d014      	beq.n	800623a <HAL_TIM_ConfigClockSource+0x212>
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d010      	beq.n	800623a <HAL_TIM_ConfigClockSource+0x212>
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00c      	beq.n	800623a <HAL_TIM_ConfigClockSource+0x212>
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	2b02      	cmp	r3, #2
 8006226:	d008      	beq.n	800623a <HAL_TIM_ConfigClockSource+0x212>
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	2b0a      	cmp	r3, #10
 800622e:	d004      	beq.n	800623a <HAL_TIM_ConfigClockSource+0x212>
 8006230:	f241 01e7 	movw	r1, #4327	; 0x10e7
 8006234:	4811      	ldr	r0, [pc, #68]	; (800627c <HAL_TIM_ConfigClockSource+0x254>)
 8006236:	f7fb f93f 	bl	80014b8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	2b0f      	cmp	r3, #15
 8006240:	d904      	bls.n	800624c <HAL_TIM_ConfigClockSource+0x224>
 8006242:	f241 01e8 	movw	r1, #4328	; 0x10e8
 8006246:	480d      	ldr	r0, [pc, #52]	; (800627c <HAL_TIM_ConfigClockSource+0x254>)
 8006248:	f7fb f936 	bl	80014b8 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6818      	ldr	r0, [r3, #0]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	6899      	ldr	r1, [r3, #8]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f000 fbd6 	bl	8006a0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800626e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	609a      	str	r2, [r3, #8]
      break;
 8006278:	e1b1      	b.n	80065de <HAL_TIM_ConfigClockSource+0x5b6>
 800627a:	bf00      	nop
 800627c:	0800aab8 	.word	0x0800aab8
 8006280:	40000400 	.word	0x40000400
 8006284:	40000800 	.word	0x40000800
 8006288:	40000c00 	.word	0x40000c00
 800628c:	40001000 	.word	0x40001000
 8006290:	40001400 	.word	0x40001400
 8006294:	40010800 	.word	0x40010800
 8006298:	40010c00 	.word	0x40010c00
 800629c:	40011000 	.word	0x40011000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a8:	d022      	beq.n	80062f0 <HAL_TIM_ConfigClockSource+0x2c8>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a88      	ldr	r2, [pc, #544]	; (80064d0 <HAL_TIM_ConfigClockSource+0x4a8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d01d      	beq.n	80062f0 <HAL_TIM_ConfigClockSource+0x2c8>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a86      	ldr	r2, [pc, #536]	; (80064d4 <HAL_TIM_ConfigClockSource+0x4ac>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d018      	beq.n	80062f0 <HAL_TIM_ConfigClockSource+0x2c8>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a85      	ldr	r2, [pc, #532]	; (80064d8 <HAL_TIM_ConfigClockSource+0x4b0>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d013      	beq.n	80062f0 <HAL_TIM_ConfigClockSource+0x2c8>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a83      	ldr	r2, [pc, #524]	; (80064dc <HAL_TIM_ConfigClockSource+0x4b4>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d00e      	beq.n	80062f0 <HAL_TIM_ConfigClockSource+0x2c8>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a82      	ldr	r2, [pc, #520]	; (80064e0 <HAL_TIM_ConfigClockSource+0x4b8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d009      	beq.n	80062f0 <HAL_TIM_ConfigClockSource+0x2c8>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a80      	ldr	r2, [pc, #512]	; (80064e4 <HAL_TIM_ConfigClockSource+0x4bc>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d004      	beq.n	80062f0 <HAL_TIM_ConfigClockSource+0x2c8>
 80062e6:	f241 01fb 	movw	r1, #4347	; 0x10fb
 80062ea:	487f      	ldr	r0, [pc, #508]	; (80064e8 <HAL_TIM_ConfigClockSource+0x4c0>)
 80062ec:	f7fb f8e4 	bl	80014b8 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d013      	beq.n	8006320 <HAL_TIM_ConfigClockSource+0x2f8>
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006300:	d00e      	beq.n	8006320 <HAL_TIM_ConfigClockSource+0x2f8>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800630a:	d009      	beq.n	8006320 <HAL_TIM_ConfigClockSource+0x2f8>
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006314:	d004      	beq.n	8006320 <HAL_TIM_ConfigClockSource+0x2f8>
 8006316:	f241 01fe 	movw	r1, #4350	; 0x10fe
 800631a:	4873      	ldr	r0, [pc, #460]	; (80064e8 <HAL_TIM_ConfigClockSource+0x4c0>)
 800631c:	f7fb f8cc 	bl	80014b8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006328:	d014      	beq.n	8006354 <HAL_TIM_ConfigClockSource+0x32c>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d010      	beq.n	8006354 <HAL_TIM_ConfigClockSource+0x32c>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00c      	beq.n	8006354 <HAL_TIM_ConfigClockSource+0x32c>
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	2b02      	cmp	r3, #2
 8006340:	d008      	beq.n	8006354 <HAL_TIM_ConfigClockSource+0x32c>
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	2b0a      	cmp	r3, #10
 8006348:	d004      	beq.n	8006354 <HAL_TIM_ConfigClockSource+0x32c>
 800634a:	f241 01ff 	movw	r1, #4351	; 0x10ff
 800634e:	4866      	ldr	r0, [pc, #408]	; (80064e8 <HAL_TIM_ConfigClockSource+0x4c0>)
 8006350:	f7fb f8b2 	bl	80014b8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	2b0f      	cmp	r3, #15
 800635a:	d904      	bls.n	8006366 <HAL_TIM_ConfigClockSource+0x33e>
 800635c:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8006360:	4861      	ldr	r0, [pc, #388]	; (80064e8 <HAL_TIM_ConfigClockSource+0x4c0>)
 8006362:	f7fb f8a9 	bl	80014b8 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6818      	ldr	r0, [r3, #0]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	6899      	ldr	r1, [r3, #8]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	f000 fb49 	bl	8006a0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006388:	609a      	str	r2, [r3, #8]
      break;
 800638a:	e128      	b.n	80065de <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006394:	d018      	beq.n	80063c8 <HAL_TIM_ConfigClockSource+0x3a0>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a4d      	ldr	r2, [pc, #308]	; (80064d0 <HAL_TIM_ConfigClockSource+0x4a8>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d013      	beq.n	80063c8 <HAL_TIM_ConfigClockSource+0x3a0>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a4b      	ldr	r2, [pc, #300]	; (80064d4 <HAL_TIM_ConfigClockSource+0x4ac>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d00e      	beq.n	80063c8 <HAL_TIM_ConfigClockSource+0x3a0>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a4a      	ldr	r2, [pc, #296]	; (80064d8 <HAL_TIM_ConfigClockSource+0x4b0>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d009      	beq.n	80063c8 <HAL_TIM_ConfigClockSource+0x3a0>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a48      	ldr	r2, [pc, #288]	; (80064dc <HAL_TIM_ConfigClockSource+0x4b4>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d004      	beq.n	80063c8 <HAL_TIM_ConfigClockSource+0x3a0>
 80063be:	f241 110f 	movw	r1, #4367	; 0x110f
 80063c2:	4849      	ldr	r0, [pc, #292]	; (80064e8 <HAL_TIM_ConfigClockSource+0x4c0>)
 80063c4:	f7fb f878 	bl	80014b8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063d0:	d014      	beq.n	80063fc <HAL_TIM_ConfigClockSource+0x3d4>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d010      	beq.n	80063fc <HAL_TIM_ConfigClockSource+0x3d4>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00c      	beq.n	80063fc <HAL_TIM_ConfigClockSource+0x3d4>
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d008      	beq.n	80063fc <HAL_TIM_ConfigClockSource+0x3d4>
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	2b0a      	cmp	r3, #10
 80063f0:	d004      	beq.n	80063fc <HAL_TIM_ConfigClockSource+0x3d4>
 80063f2:	f241 1112 	movw	r1, #4370	; 0x1112
 80063f6:	483c      	ldr	r0, [pc, #240]	; (80064e8 <HAL_TIM_ConfigClockSource+0x4c0>)
 80063f8:	f7fb f85e 	bl	80014b8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	2b0f      	cmp	r3, #15
 8006402:	d904      	bls.n	800640e <HAL_TIM_ConfigClockSource+0x3e6>
 8006404:	f241 1113 	movw	r1, #4371	; 0x1113
 8006408:	4837      	ldr	r0, [pc, #220]	; (80064e8 <HAL_TIM_ConfigClockSource+0x4c0>)
 800640a:	f7fb f855 	bl	80014b8 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6818      	ldr	r0, [r3, #0]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	6859      	ldr	r1, [r3, #4]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	461a      	mov	r2, r3
 800641c:	f000 fa7f 	bl	800691e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2150      	movs	r1, #80	; 0x50
 8006426:	4618      	mov	r0, r3
 8006428:	f000 fad6 	bl	80069d8 <TIM_ITRx_SetConfig>
      break;
 800642c:	e0d7      	b.n	80065de <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006436:	d018      	beq.n	800646a <HAL_TIM_ConfigClockSource+0x442>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a24      	ldr	r2, [pc, #144]	; (80064d0 <HAL_TIM_ConfigClockSource+0x4a8>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d013      	beq.n	800646a <HAL_TIM_ConfigClockSource+0x442>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a23      	ldr	r2, [pc, #140]	; (80064d4 <HAL_TIM_ConfigClockSource+0x4ac>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d00e      	beq.n	800646a <HAL_TIM_ConfigClockSource+0x442>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a21      	ldr	r2, [pc, #132]	; (80064d8 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d009      	beq.n	800646a <HAL_TIM_ConfigClockSource+0x442>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a20      	ldr	r2, [pc, #128]	; (80064dc <HAL_TIM_ConfigClockSource+0x4b4>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d004      	beq.n	800646a <HAL_TIM_ConfigClockSource+0x442>
 8006460:	f241 111f 	movw	r1, #4383	; 0x111f
 8006464:	4820      	ldr	r0, [pc, #128]	; (80064e8 <HAL_TIM_ConfigClockSource+0x4c0>)
 8006466:	f7fb f827 	bl	80014b8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006472:	d014      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x476>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d010      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x476>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00c      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x476>
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	2b02      	cmp	r3, #2
 800648a:	d008      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x476>
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2b0a      	cmp	r3, #10
 8006492:	d004      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x476>
 8006494:	f241 1122 	movw	r1, #4386	; 0x1122
 8006498:	4813      	ldr	r0, [pc, #76]	; (80064e8 <HAL_TIM_ConfigClockSource+0x4c0>)
 800649a:	f7fb f80d 	bl	80014b8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	2b0f      	cmp	r3, #15
 80064a4:	d904      	bls.n	80064b0 <HAL_TIM_ConfigClockSource+0x488>
 80064a6:	f241 1123 	movw	r1, #4387	; 0x1123
 80064aa:	480f      	ldr	r0, [pc, #60]	; (80064e8 <HAL_TIM_ConfigClockSource+0x4c0>)
 80064ac:	f7fb f804 	bl	80014b8 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6818      	ldr	r0, [r3, #0]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	6859      	ldr	r1, [r3, #4]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	461a      	mov	r2, r3
 80064be:	f000 fa5c 	bl	800697a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2160      	movs	r1, #96	; 0x60
 80064c8:	4618      	mov	r0, r3
 80064ca:	f000 fa85 	bl	80069d8 <TIM_ITRx_SetConfig>
      break;
 80064ce:	e086      	b.n	80065de <HAL_TIM_ConfigClockSource+0x5b6>
 80064d0:	40000400 	.word	0x40000400
 80064d4:	40000800 	.word	0x40000800
 80064d8:	40000c00 	.word	0x40000c00
 80064dc:	40010800 	.word	0x40010800
 80064e0:	40010c00 	.word	0x40010c00
 80064e4:	40011000 	.word	0x40011000
 80064e8:	0800aab8 	.word	0x0800aab8
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f4:	d018      	beq.n	8006528 <HAL_TIM_ConfigClockSource+0x500>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a3f      	ldr	r2, [pc, #252]	; (80065f8 <HAL_TIM_ConfigClockSource+0x5d0>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d013      	beq.n	8006528 <HAL_TIM_ConfigClockSource+0x500>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a3d      	ldr	r2, [pc, #244]	; (80065fc <HAL_TIM_ConfigClockSource+0x5d4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d00e      	beq.n	8006528 <HAL_TIM_ConfigClockSource+0x500>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a3c      	ldr	r2, [pc, #240]	; (8006600 <HAL_TIM_ConfigClockSource+0x5d8>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d009      	beq.n	8006528 <HAL_TIM_ConfigClockSource+0x500>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a3a      	ldr	r2, [pc, #232]	; (8006604 <HAL_TIM_ConfigClockSource+0x5dc>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d004      	beq.n	8006528 <HAL_TIM_ConfigClockSource+0x500>
 800651e:	f241 112f 	movw	r1, #4399	; 0x112f
 8006522:	4839      	ldr	r0, [pc, #228]	; (8006608 <HAL_TIM_ConfigClockSource+0x5e0>)
 8006524:	f7fa ffc8 	bl	80014b8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006530:	d014      	beq.n	800655c <HAL_TIM_ConfigClockSource+0x534>
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d010      	beq.n	800655c <HAL_TIM_ConfigClockSource+0x534>
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00c      	beq.n	800655c <HAL_TIM_ConfigClockSource+0x534>
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	2b02      	cmp	r3, #2
 8006548:	d008      	beq.n	800655c <HAL_TIM_ConfigClockSource+0x534>
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2b0a      	cmp	r3, #10
 8006550:	d004      	beq.n	800655c <HAL_TIM_ConfigClockSource+0x534>
 8006552:	f241 1132 	movw	r1, #4402	; 0x1132
 8006556:	482c      	ldr	r0, [pc, #176]	; (8006608 <HAL_TIM_ConfigClockSource+0x5e0>)
 8006558:	f7fa ffae 	bl	80014b8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	2b0f      	cmp	r3, #15
 8006562:	d904      	bls.n	800656e <HAL_TIM_ConfigClockSource+0x546>
 8006564:	f241 1133 	movw	r1, #4403	; 0x1133
 8006568:	4827      	ldr	r0, [pc, #156]	; (8006608 <HAL_TIM_ConfigClockSource+0x5e0>)
 800656a:	f7fa ffa5 	bl	80014b8 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6818      	ldr	r0, [r3, #0]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	6859      	ldr	r1, [r3, #4]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	461a      	mov	r2, r3
 800657c:	f000 f9cf 	bl	800691e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2140      	movs	r1, #64	; 0x40
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fa26 	bl	80069d8 <TIM_ITRx_SetConfig>
      break;
 800658c:	e027      	b.n	80065de <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006596:	d018      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0x5a2>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a16      	ldr	r2, [pc, #88]	; (80065f8 <HAL_TIM_ConfigClockSource+0x5d0>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d013      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0x5a2>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a15      	ldr	r2, [pc, #84]	; (80065fc <HAL_TIM_ConfigClockSource+0x5d4>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d00e      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0x5a2>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a13      	ldr	r2, [pc, #76]	; (8006600 <HAL_TIM_ConfigClockSource+0x5d8>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d009      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0x5a2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a12      	ldr	r2, [pc, #72]	; (8006604 <HAL_TIM_ConfigClockSource+0x5dc>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d004      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0x5a2>
 80065c0:	f241 1142 	movw	r1, #4418	; 0x1142
 80065c4:	4810      	ldr	r0, [pc, #64]	; (8006608 <HAL_TIM_ConfigClockSource+0x5e0>)
 80065c6:	f7fa ff77 	bl	80014b8 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4619      	mov	r1, r3
 80065d4:	4610      	mov	r0, r2
 80065d6:	f000 f9ff 	bl	80069d8 <TIM_ITRx_SetConfig>
      break;
 80065da:	e000      	b.n	80065de <HAL_TIM_ConfigClockSource+0x5b6>
      break;
 80065dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	40000400 	.word	0x40000400
 80065fc:	40000800 	.word	0x40000800
 8006600:	40000c00 	.word	0x40000c00
 8006604:	40010800 	.word	0x40010800
 8006608:	0800aab8 	.word	0x0800aab8

0800660c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	bc80      	pop	{r7}
 800661c:	4770      	bx	lr

0800661e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800661e:	b480      	push	{r7}
 8006620:	b083      	sub	sp, #12
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	bc80      	pop	{r7}
 800662e:	4770      	bx	lr

08006630 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006638:	bf00      	nop
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	bc80      	pop	{r7}
 8006640:	4770      	bx	lr

08006642 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800664a:	bf00      	nop
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	bc80      	pop	{r7}
 8006652:	4770      	bx	lr

08006654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800666a:	d00f      	beq.n	800668c <TIM_Base_SetConfig+0x38>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a2b      	ldr	r2, [pc, #172]	; (800671c <TIM_Base_SetConfig+0xc8>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d00b      	beq.n	800668c <TIM_Base_SetConfig+0x38>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a2a      	ldr	r2, [pc, #168]	; (8006720 <TIM_Base_SetConfig+0xcc>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d007      	beq.n	800668c <TIM_Base_SetConfig+0x38>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a29      	ldr	r2, [pc, #164]	; (8006724 <TIM_Base_SetConfig+0xd0>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d003      	beq.n	800668c <TIM_Base_SetConfig+0x38>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a28      	ldr	r2, [pc, #160]	; (8006728 <TIM_Base_SetConfig+0xd4>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d108      	bne.n	800669e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	4313      	orrs	r3, r2
 800669c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a4:	d017      	beq.n	80066d6 <TIM_Base_SetConfig+0x82>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a1c      	ldr	r2, [pc, #112]	; (800671c <TIM_Base_SetConfig+0xc8>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d013      	beq.n	80066d6 <TIM_Base_SetConfig+0x82>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a1b      	ldr	r2, [pc, #108]	; (8006720 <TIM_Base_SetConfig+0xcc>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d00f      	beq.n	80066d6 <TIM_Base_SetConfig+0x82>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a1a      	ldr	r2, [pc, #104]	; (8006724 <TIM_Base_SetConfig+0xd0>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d00b      	beq.n	80066d6 <TIM_Base_SetConfig+0x82>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a19      	ldr	r2, [pc, #100]	; (8006728 <TIM_Base_SetConfig+0xd4>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d007      	beq.n	80066d6 <TIM_Base_SetConfig+0x82>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a18      	ldr	r2, [pc, #96]	; (800672c <TIM_Base_SetConfig+0xd8>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d003      	beq.n	80066d6 <TIM_Base_SetConfig+0x82>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a17      	ldr	r2, [pc, #92]	; (8006730 <TIM_Base_SetConfig+0xdc>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d108      	bne.n	80066e8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	615a      	str	r2, [r3, #20]
}
 8006712:	bf00      	nop
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr
 800671c:	40000400 	.word	0x40000400
 8006720:	40000800 	.word	0x40000800
 8006724:	40000c00 	.word	0x40000c00
 8006728:	40010800 	.word	0x40010800
 800672c:	40010c00 	.word	0x40010c00
 8006730:	40011000 	.word	0x40011000

08006734 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	f023 0201 	bic.w	r2, r3, #1
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f023 0303 	bic.w	r3, r3, #3
 800676a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f023 0302 	bic.w	r3, r3, #2
 800677c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	4313      	orrs	r3, r2
 8006786:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	621a      	str	r2, [r3, #32]
}
 80067a2:	bf00      	nop
 80067a4:	371c      	adds	r7, #28
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bc80      	pop	{r7}
 80067aa:	4770      	bx	lr

080067ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	f023 0210 	bic.w	r2, r3, #16
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	021b      	lsls	r3, r3, #8
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f023 0320 	bic.w	r3, r3, #32
 80067f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	011b      	lsls	r3, r3, #4
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	4313      	orrs	r3, r2
 8006802:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	621a      	str	r2, [r3, #32]
}
 800681e:	bf00      	nop
 8006820:	371c      	adds	r7, #28
 8006822:	46bd      	mov	sp, r7
 8006824:	bc80      	pop	{r7}
 8006826:	4770      	bx	lr

08006828 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0303 	bic.w	r3, r3, #3
 800685e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	4313      	orrs	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	021b      	lsls	r3, r3, #8
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	4313      	orrs	r3, r2
 800687c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	621a      	str	r2, [r3, #32]
}
 8006898:	bf00      	nop
 800689a:	371c      	adds	r7, #28
 800689c:	46bd      	mov	sp, r7
 800689e:	bc80      	pop	{r7}
 80068a0:	4770      	bx	lr

080068a2 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b087      	sub	sp, #28
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a1b      	ldr	r3, [r3, #32]
 80068b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068d8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	021b      	lsls	r3, r3, #8
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	031b      	lsls	r3, r3, #12
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	621a      	str	r2, [r3, #32]
}
 8006914:	bf00      	nop
 8006916:	371c      	adds	r7, #28
 8006918:	46bd      	mov	sp, r7
 800691a:	bc80      	pop	{r7}
 800691c:	4770      	bx	lr

0800691e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800691e:	b480      	push	{r7}
 8006920:	b087      	sub	sp, #28
 8006922:	af00      	add	r7, sp, #0
 8006924:	60f8      	str	r0, [r7, #12]
 8006926:	60b9      	str	r1, [r7, #8]
 8006928:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	f023 0201 	bic.w	r2, r3, #1
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006948:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	011b      	lsls	r3, r3, #4
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	4313      	orrs	r3, r2
 8006952:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f023 030a 	bic.w	r3, r3, #10
 800695a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	4313      	orrs	r3, r2
 8006962:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	621a      	str	r2, [r3, #32]
}
 8006970:	bf00      	nop
 8006972:	371c      	adds	r7, #28
 8006974:	46bd      	mov	sp, r7
 8006976:	bc80      	pop	{r7}
 8006978:	4770      	bx	lr

0800697a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800697a:	b480      	push	{r7}
 800697c:	b087      	sub	sp, #28
 800697e:	af00      	add	r7, sp, #0
 8006980:	60f8      	str	r0, [r7, #12]
 8006982:	60b9      	str	r1, [r7, #8]
 8006984:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	f023 0210 	bic.w	r2, r3, #16
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	031b      	lsls	r3, r3, #12
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	4313      	orrs	r3, r2
 80069c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	621a      	str	r2, [r3, #32]
}
 80069ce:	bf00      	nop
 80069d0:	371c      	adds	r7, #28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bc80      	pop	{r7}
 80069d6:	4770      	bx	lr

080069d8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069f0:	683a      	ldr	r2, [r7, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	f043 0307 	orr.w	r3, r3, #7
 80069fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	609a      	str	r2, [r3, #8]
}
 8006a02:	bf00      	nop
 8006a04:	3714      	adds	r7, #20
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bc80      	pop	{r7}
 8006a0a:	4770      	bx	lr

08006a0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
 8006a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	021a      	lsls	r2, r3, #8
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	609a      	str	r2, [r3, #8]
}
 8006a40:	bf00      	nop
 8006a42:	371c      	adds	r7, #28
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bc80      	pop	{r7}
 8006a48:	4770      	bx	lr
	...

08006a4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b086      	sub	sp, #24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a5e:	d01c      	beq.n	8006a9a <TIM_CCxChannelCmd+0x4e>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4a26      	ldr	r2, [pc, #152]	; (8006afc <TIM_CCxChannelCmd+0xb0>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d018      	beq.n	8006a9a <TIM_CCxChannelCmd+0x4e>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	4a25      	ldr	r2, [pc, #148]	; (8006b00 <TIM_CCxChannelCmd+0xb4>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d014      	beq.n	8006a9a <TIM_CCxChannelCmd+0x4e>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4a24      	ldr	r2, [pc, #144]	; (8006b04 <TIM_CCxChannelCmd+0xb8>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d010      	beq.n	8006a9a <TIM_CCxChannelCmd+0x4e>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4a23      	ldr	r2, [pc, #140]	; (8006b08 <TIM_CCxChannelCmd+0xbc>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d00c      	beq.n	8006a9a <TIM_CCxChannelCmd+0x4e>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4a22      	ldr	r2, [pc, #136]	; (8006b0c <TIM_CCxChannelCmd+0xc0>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d008      	beq.n	8006a9a <TIM_CCxChannelCmd+0x4e>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	4a21      	ldr	r2, [pc, #132]	; (8006b10 <TIM_CCxChannelCmd+0xc4>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d004      	beq.n	8006a9a <TIM_CCxChannelCmd+0x4e>
 8006a90:	f641 0169 	movw	r1, #6249	; 0x1869
 8006a94:	481f      	ldr	r0, [pc, #124]	; (8006b14 <TIM_CCxChannelCmd+0xc8>)
 8006a96:	f7fa fd0f 	bl	80014b8 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d010      	beq.n	8006ac2 <TIM_CCxChannelCmd+0x76>
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	2b04      	cmp	r3, #4
 8006aa4:	d00d      	beq.n	8006ac2 <TIM_CCxChannelCmd+0x76>
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	d00a      	beq.n	8006ac2 <TIM_CCxChannelCmd+0x76>
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	2b0c      	cmp	r3, #12
 8006ab0:	d007      	beq.n	8006ac2 <TIM_CCxChannelCmd+0x76>
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	2b3c      	cmp	r3, #60	; 0x3c
 8006ab6:	d004      	beq.n	8006ac2 <TIM_CCxChannelCmd+0x76>
 8006ab8:	f641 016a 	movw	r1, #6250	; 0x186a
 8006abc:	4815      	ldr	r0, [pc, #84]	; (8006b14 <TIM_CCxChannelCmd+0xc8>)
 8006abe:	f7fa fcfb 	bl	80014b8 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f003 031f 	and.w	r3, r3, #31
 8006ac8:	2201      	movs	r2, #1
 8006aca:	fa02 f303 	lsl.w	r3, r2, r3
 8006ace:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6a1a      	ldr	r2, [r3, #32]
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	43db      	mvns	r3, r3
 8006ad8:	401a      	ands	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6a1a      	ldr	r2, [r3, #32]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	f003 031f 	and.w	r3, r3, #31
 8006ae8:	6879      	ldr	r1, [r7, #4]
 8006aea:	fa01 f303 	lsl.w	r3, r1, r3
 8006aee:	431a      	orrs	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	621a      	str	r2, [r3, #32]
}
 8006af4:	bf00      	nop
 8006af6:	3718      	adds	r7, #24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	40000400 	.word	0x40000400
 8006b00:	40000800 	.word	0x40000800
 8006b04:	40000c00 	.word	0x40000c00
 8006b08:	40010800 	.word	0x40010800
 8006b0c:	40010c00 	.word	0x40010c00
 8006b10:	40011000 	.word	0x40011000
 8006b14:	0800aab8 	.word	0x0800aab8

08006b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2a:	d017      	beq.n	8006b5c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a41      	ldr	r2, [pc, #260]	; (8006c38 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d012      	beq.n	8006b5c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a40      	ldr	r2, [pc, #256]	; (8006c3c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d00d      	beq.n	8006b5c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a3e      	ldr	r2, [pc, #248]	; (8006c40 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d008      	beq.n	8006b5c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a3d      	ldr	r2, [pc, #244]	; (8006c44 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d003      	beq.n	8006b5c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8006b54:	215a      	movs	r1, #90	; 0x5a
 8006b56:	483c      	ldr	r0, [pc, #240]	; (8006c48 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006b58:	f7fa fcae 	bl	80014b8 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d01f      	beq.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b10      	cmp	r3, #16
 8006b6a:	d01b      	beq.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b20      	cmp	r3, #32
 8006b72:	d017      	beq.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b30      	cmp	r3, #48	; 0x30
 8006b7a:	d013      	beq.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b40      	cmp	r3, #64	; 0x40
 8006b82:	d00f      	beq.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b50      	cmp	r3, #80	; 0x50
 8006b8a:	d00b      	beq.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b60      	cmp	r3, #96	; 0x60
 8006b92:	d007      	beq.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b70      	cmp	r3, #112	; 0x70
 8006b9a:	d003      	beq.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006b9c:	215b      	movs	r1, #91	; 0x5b
 8006b9e:	482a      	ldr	r0, [pc, #168]	; (8006c48 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006ba0:	f7fa fc8a 	bl	80014b8 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	2b80      	cmp	r3, #128	; 0x80
 8006baa:	d007      	beq.n	8006bbc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d003      	beq.n	8006bbc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8006bb4:	215c      	movs	r1, #92	; 0x5c
 8006bb6:	4824      	ldr	r0, [pc, #144]	; (8006c48 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006bb8:	f7fa fc7e 	bl	80014b8 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d101      	bne.n	8006bca <HAL_TIMEx_MasterConfigSynchronization+0xb2>
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	e032      	b.n	8006c30 <HAL_TIMEx_MasterConfigSynchronization+0x118>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c02:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	40000400 	.word	0x40000400
 8006c3c:	40000800 	.word	0x40000800
 8006c40:	40000c00 	.word	0x40000c00
 8006c44:	40010800 	.word	0x40010800
 8006c48:	0800aaf0 	.word	0x0800aaf0

08006c4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e0aa      	b.n	8006db4 <HAL_UART_Init+0x168>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d02c      	beq.n	8006cc0 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a54      	ldr	r2, [pc, #336]	; (8006dbc <HAL_UART_Init+0x170>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d00e      	beq.n	8006c8e <HAL_UART_Init+0x42>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a52      	ldr	r2, [pc, #328]	; (8006dc0 <HAL_UART_Init+0x174>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d009      	beq.n	8006c8e <HAL_UART_Init+0x42>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a51      	ldr	r2, [pc, #324]	; (8006dc4 <HAL_UART_Init+0x178>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d004      	beq.n	8006c8e <HAL_UART_Init+0x42>
 8006c84:	f240 1145 	movw	r1, #325	; 0x145
 8006c88:	484f      	ldr	r0, [pc, #316]	; (8006dc8 <HAL_UART_Init+0x17c>)
 8006c8a:	f7fa fc15 	bl	80014b8 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d032      	beq.n	8006cfc <HAL_UART_Init+0xb0>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c9e:	d02d      	beq.n	8006cfc <HAL_UART_Init+0xb0>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ca8:	d028      	beq.n	8006cfc <HAL_UART_Init+0xb0>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cb2:	d023      	beq.n	8006cfc <HAL_UART_Init+0xb0>
 8006cb4:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8006cb8:	4843      	ldr	r0, [pc, #268]	; (8006dc8 <HAL_UART_Init+0x17c>)
 8006cba:	f7fa fbfd 	bl	80014b8 <assert_failed>
 8006cbe:	e01d      	b.n	8006cfc <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a3d      	ldr	r2, [pc, #244]	; (8006dbc <HAL_UART_Init+0x170>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d018      	beq.n	8006cfc <HAL_UART_Init+0xb0>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a3c      	ldr	r2, [pc, #240]	; (8006dc0 <HAL_UART_Init+0x174>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d013      	beq.n	8006cfc <HAL_UART_Init+0xb0>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a3a      	ldr	r2, [pc, #232]	; (8006dc4 <HAL_UART_Init+0x178>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d00e      	beq.n	8006cfc <HAL_UART_Init+0xb0>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a3a      	ldr	r2, [pc, #232]	; (8006dcc <HAL_UART_Init+0x180>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d009      	beq.n	8006cfc <HAL_UART_Init+0xb0>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a38      	ldr	r2, [pc, #224]	; (8006dd0 <HAL_UART_Init+0x184>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d004      	beq.n	8006cfc <HAL_UART_Init+0xb0>
 8006cf2:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8006cf6:	4834      	ldr	r0, [pc, #208]	; (8006dc8 <HAL_UART_Init+0x17c>)
 8006cf8:	f7fa fbde 	bl	80014b8 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d009      	beq.n	8006d18 <HAL_UART_Init+0xcc>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d0c:	d004      	beq.n	8006d18 <HAL_UART_Init+0xcc>
 8006d0e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8006d12:	482d      	ldr	r0, [pc, #180]	; (8006dc8 <HAL_UART_Init+0x17c>)
 8006d14:	f7fa fbd0 	bl	80014b8 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	69db      	ldr	r3, [r3, #28]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d009      	beq.n	8006d34 <HAL_UART_Init+0xe8>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	69db      	ldr	r3, [r3, #28]
 8006d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d28:	d004      	beq.n	8006d34 <HAL_UART_Init+0xe8>
 8006d2a:	f240 114d 	movw	r1, #333	; 0x14d
 8006d2e:	4826      	ldr	r0, [pc, #152]	; (8006dc8 <HAL_UART_Init+0x17c>)
 8006d30:	f7fa fbc2 	bl	80014b8 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d106      	bne.n	8006d4e <HAL_UART_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7fa ffd1 	bl	8001cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2224      	movs	r2, #36	; 0x24
 8006d52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68da      	ldr	r2, [r3, #12]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d64:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 fa60 	bl	800722c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	691a      	ldr	r2, [r3, #16]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d7a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	695a      	ldr	r2, [r3, #20]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d8a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68da      	ldr	r2, [r3, #12]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d9a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2220      	movs	r2, #32
 8006da6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2220      	movs	r2, #32
 8006dae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	40013800 	.word	0x40013800
 8006dc0:	40004400 	.word	0x40004400
 8006dc4:	40004800 	.word	0x40004800
 8006dc8:	0800ab2c 	.word	0x0800ab2c
 8006dcc:	40004c00 	.word	0x40004c00
 8006dd0:	40005000 	.word	0x40005000

08006dd4 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b088      	sub	sp, #32
 8006dd8:	af02      	add	r7, sp, #8
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	603b      	str	r3, [r7, #0]
 8006de0:	4613      	mov	r3, r2
 8006de2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006de4:	2300      	movs	r3, #0
 8006de6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b20      	cmp	r3, #32
 8006df2:	f040 8083 	bne.w	8006efc <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <HAL_UART_Transmit+0x2e>
 8006dfc:	88fb      	ldrh	r3, [r7, #6]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e07b      	b.n	8006efe <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d101      	bne.n	8006e14 <HAL_UART_Transmit+0x40>
 8006e10:	2302      	movs	r3, #2
 8006e12:	e074      	b.n	8006efe <HAL_UART_Transmit+0x12a>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2221      	movs	r2, #33	; 0x21
 8006e26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006e2a:	f7fb f84b 	bl	8001ec4 <HAL_GetTick>
 8006e2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	88fa      	ldrh	r2, [r7, #6]
 8006e34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	88fa      	ldrh	r2, [r7, #6]
 8006e3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006e3c:	e042      	b.n	8006ec4 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	3b01      	subs	r3, #1
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e54:	d122      	bne.n	8006e9c <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	2180      	movs	r1, #128	; 0x80
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 f966 	bl	8007132 <UART_WaitOnFlagUntilTimeout>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d001      	beq.n	8006e70 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e046      	b.n	8006efe <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e82:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d103      	bne.n	8006e94 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	3302      	adds	r3, #2
 8006e90:	60bb      	str	r3, [r7, #8]
 8006e92:	e017      	b.n	8006ec4 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	3301      	adds	r3, #1
 8006e98:	60bb      	str	r3, [r7, #8]
 8006e9a:	e013      	b.n	8006ec4 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	2180      	movs	r1, #128	; 0x80
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 f943 	bl	8007132 <UART_WaitOnFlagUntilTimeout>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e023      	b.n	8006efe <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	1c5a      	adds	r2, r3, #1
 8006eba:	60ba      	str	r2, [r7, #8]
 8006ebc:	781a      	ldrb	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1b7      	bne.n	8006e3e <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	2140      	movs	r1, #64	; 0x40
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f000 f92a 	bl	8007132 <UART_WaitOnFlagUntilTimeout>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d001      	beq.n	8006ee8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e00a      	b.n	8006efe <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2220      	movs	r2, #32
 8006eec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	e000      	b.n	8006efe <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006efc:	2302      	movs	r3, #2
  }
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3718      	adds	r7, #24
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
	...

08006f08 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	4613      	mov	r3, r2
 8006f14:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b20      	cmp	r3, #32
 8006f20:	d166      	bne.n	8006ff0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <HAL_UART_Receive_DMA+0x26>
 8006f28:	88fb      	ldrh	r3, [r7, #6]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e05f      	b.n	8006ff2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d101      	bne.n	8006f40 <HAL_UART_Receive_DMA+0x38>
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	e058      	b.n	8006ff2 <HAL_UART_Receive_DMA+0xea>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	88fa      	ldrh	r2, [r7, #6]
 8006f52:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2222      	movs	r2, #34	; 0x22
 8006f5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f66:	4a25      	ldr	r2, [pc, #148]	; (8006ffc <HAL_UART_Receive_DMA+0xf4>)
 8006f68:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f6e:	4a24      	ldr	r2, [pc, #144]	; (8007000 <HAL_UART_Receive_DMA+0xf8>)
 8006f70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f76:	4a23      	ldr	r2, [pc, #140]	; (8007004 <HAL_UART_Receive_DMA+0xfc>)
 8006f78:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f7e:	2200      	movs	r2, #0
 8006f80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8006f82:	f107 0308 	add.w	r3, r7, #8
 8006f86:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	3304      	adds	r3, #4
 8006f92:	4619      	mov	r1, r3
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	88fb      	ldrh	r3, [r7, #6]
 8006f9a:	f7fb ff27 	bl	8002dec <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	613b      	str	r3, [r7, #16]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	613b      	str	r3, [r7, #16]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	613b      	str	r3, [r7, #16]
 8006fb2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68da      	ldr	r2, [r3, #12]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fca:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	695a      	ldr	r2, [r3, #20]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f042 0201 	orr.w	r2, r2, #1
 8006fda:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	695a      	ldr	r2, [r3, #20]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fea:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006fec:	2300      	movs	r3, #0
 8006fee:	e000      	b.n	8006ff2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006ff0:	2302      	movs	r3, #2
  }
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3718      	adds	r7, #24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	0800701b 	.word	0x0800701b
 8007000:	08007083 	.word	0x08007083
 8007004:	0800709f 	.word	0x0800709f

08007008 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	bc80      	pop	{r7}
 8007018:	4770      	bx	lr

0800701a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b084      	sub	sp, #16
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007026:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0320 	and.w	r3, r3, #32
 8007032:	2b00      	cmp	r3, #0
 8007034:	d11e      	bne.n	8007074 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68da      	ldr	r2, [r3, #12]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800704a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	695a      	ldr	r2, [r3, #20]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f022 0201 	bic.w	r2, r2, #1
 800705a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	695a      	ldr	r2, [r3, #20]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800706a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2220      	movs	r2, #32
 8007070:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f7f9 fc45 	bl	8000904 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800707a:	bf00      	nop
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f7ff ffb9 	bl	8007008 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007096:	bf00      	nop
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b084      	sub	sp, #16
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ba:	2b80      	cmp	r3, #128	; 0x80
 80070bc:	bf0c      	ite	eq
 80070be:	2301      	moveq	r3, #1
 80070c0:	2300      	movne	r3, #0
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b21      	cmp	r3, #33	; 0x21
 80070d0:	d108      	bne.n	80070e4 <UART_DMAError+0x46>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d005      	beq.n	80070e4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2200      	movs	r2, #0
 80070dc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80070de:	68b8      	ldr	r0, [r7, #8]
 80070e0:	f000 f871 	bl	80071c6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ee:	2b40      	cmp	r3, #64	; 0x40
 80070f0:	bf0c      	ite	eq
 80070f2:	2301      	moveq	r3, #1
 80070f4:	2300      	movne	r3, #0
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b22      	cmp	r3, #34	; 0x22
 8007104:	d108      	bne.n	8007118 <UART_DMAError+0x7a>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d005      	beq.n	8007118 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	2200      	movs	r2, #0
 8007110:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007112:	68b8      	ldr	r0, [r7, #8]
 8007114:	f000 f86c 	bl	80071f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800711c:	f043 0210 	orr.w	r2, r3, #16
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007124:	68b8      	ldr	r0, [r7, #8]
 8007126:	f7f9 fc0f 	bl	8000948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800712a:	bf00      	nop
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b084      	sub	sp, #16
 8007136:	af00      	add	r7, sp, #0
 8007138:	60f8      	str	r0, [r7, #12]
 800713a:	60b9      	str	r1, [r7, #8]
 800713c:	603b      	str	r3, [r7, #0]
 800713e:	4613      	mov	r3, r2
 8007140:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007142:	e02c      	b.n	800719e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714a:	d028      	beq.n	800719e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d007      	beq.n	8007162 <UART_WaitOnFlagUntilTimeout+0x30>
 8007152:	f7fa feb7 	bl	8001ec4 <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	69ba      	ldr	r2, [r7, #24]
 800715e:	429a      	cmp	r2, r3
 8007160:	d21d      	bcs.n	800719e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007170:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	695a      	ldr	r2, [r3, #20]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 0201 	bic.w	r2, r2, #1
 8007180:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2220      	movs	r2, #32
 8007186:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2220      	movs	r2, #32
 800718e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e00f      	b.n	80071be <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	4013      	ands	r3, r2
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	bf0c      	ite	eq
 80071ae:	2301      	moveq	r3, #1
 80071b0:	2300      	movne	r3, #0
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	461a      	mov	r2, r3
 80071b6:	79fb      	ldrb	r3, [r7, #7]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d0c3      	beq.n	8007144 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b083      	sub	sp, #12
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68da      	ldr	r2, [r3, #12]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80071dc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2220      	movs	r2, #32
 80071e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80071e6:	bf00      	nop
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bc80      	pop	{r7}
 80071ee:	4770      	bx	lr

080071f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68da      	ldr	r2, [r3, #12]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007206:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	695a      	ldr	r2, [r3, #20]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f022 0201 	bic.w	r2, r2, #1
 8007216:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2220      	movs	r2, #32
 800721c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	bc80      	pop	{r7}
 8007228:	4770      	bx	lr
	...

0800722c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	4ab2      	ldr	r2, [pc, #712]	; (8007504 <UART_SetConfig+0x2d8>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d904      	bls.n	8007248 <UART_SetConfig+0x1c>
 800723e:	f640 31e2 	movw	r1, #3042	; 0xbe2
 8007242:	48b1      	ldr	r0, [pc, #708]	; (8007508 <UART_SetConfig+0x2dc>)
 8007244:	f7fa f938 	bl	80014b8 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d009      	beq.n	8007264 <UART_SetConfig+0x38>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007258:	d004      	beq.n	8007264 <UART_SetConfig+0x38>
 800725a:	f640 31e3 	movw	r1, #3043	; 0xbe3
 800725e:	48aa      	ldr	r0, [pc, #680]	; (8007508 <UART_SetConfig+0x2dc>)
 8007260:	f7fa f92a 	bl	80014b8 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00e      	beq.n	800728a <UART_SetConfig+0x5e>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007274:	d009      	beq.n	800728a <UART_SetConfig+0x5e>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800727e:	d004      	beq.n	800728a <UART_SetConfig+0x5e>
 8007280:	f640 31e4 	movw	r1, #3044	; 0xbe4
 8007284:	48a0      	ldr	r0, [pc, #640]	; (8007508 <UART_SetConfig+0x2dc>)
 8007286:	f7fa f917 	bl	80014b8 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	695a      	ldr	r2, [r3, #20]
 800728e:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8007292:	4013      	ands	r3, r2
 8007294:	2b00      	cmp	r3, #0
 8007296:	d103      	bne.n	80072a0 <UART_SetConfig+0x74>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d104      	bne.n	80072aa <UART_SetConfig+0x7e>
 80072a0:	f640 31e5 	movw	r1, #3045	; 0xbe5
 80072a4:	4898      	ldr	r0, [pc, #608]	; (8007508 <UART_SetConfig+0x2dc>)
 80072a6:	f7fa f907 	bl	80014b8 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68da      	ldr	r2, [r3, #12]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	430a      	orrs	r2, r1
 80072be:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	689a      	ldr	r2, [r3, #8]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	431a      	orrs	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	431a      	orrs	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	69db      	ldr	r3, [r3, #28]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80072e2:	f023 030c 	bic.w	r3, r3, #12
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	6812      	ldr	r2, [r2, #0]
 80072ea:	68f9      	ldr	r1, [r7, #12]
 80072ec:	430b      	orrs	r3, r1
 80072ee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	699a      	ldr	r2, [r3, #24]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800730e:	f040 80a5 	bne.w	800745c <UART_SetConfig+0x230>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a7d      	ldr	r2, [pc, #500]	; (800750c <UART_SetConfig+0x2e0>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d14f      	bne.n	80073bc <UART_SetConfig+0x190>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800731c:	f7fe f842 	bl	80053a4 <HAL_RCC_GetPCLK2Freq>
 8007320:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	4613      	mov	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	009a      	lsls	r2, r3, #2
 800732c:	441a      	add	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	005b      	lsls	r3, r3, #1
 8007334:	fbb2 f3f3 	udiv	r3, r2, r3
 8007338:	4a75      	ldr	r2, [pc, #468]	; (8007510 <UART_SetConfig+0x2e4>)
 800733a:	fba2 2303 	umull	r2, r3, r2, r3
 800733e:	095b      	lsrs	r3, r3, #5
 8007340:	0119      	lsls	r1, r3, #4
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	4613      	mov	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	009a      	lsls	r2, r3, #2
 800734c:	441a      	add	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	005b      	lsls	r3, r3, #1
 8007354:	fbb2 f2f3 	udiv	r2, r2, r3
 8007358:	4b6d      	ldr	r3, [pc, #436]	; (8007510 <UART_SetConfig+0x2e4>)
 800735a:	fba3 0302 	umull	r0, r3, r3, r2
 800735e:	095b      	lsrs	r3, r3, #5
 8007360:	2064      	movs	r0, #100	; 0x64
 8007362:	fb00 f303 	mul.w	r3, r0, r3
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	00db      	lsls	r3, r3, #3
 800736a:	3332      	adds	r3, #50	; 0x32
 800736c:	4a68      	ldr	r2, [pc, #416]	; (8007510 <UART_SetConfig+0x2e4>)
 800736e:	fba2 2303 	umull	r2, r3, r2, r3
 8007372:	095b      	lsrs	r3, r3, #5
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800737a:	4419      	add	r1, r3
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	4613      	mov	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	4413      	add	r3, r2
 8007384:	009a      	lsls	r2, r3, #2
 8007386:	441a      	add	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	005b      	lsls	r3, r3, #1
 800738e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007392:	4b5f      	ldr	r3, [pc, #380]	; (8007510 <UART_SetConfig+0x2e4>)
 8007394:	fba3 0302 	umull	r0, r3, r3, r2
 8007398:	095b      	lsrs	r3, r3, #5
 800739a:	2064      	movs	r0, #100	; 0x64
 800739c:	fb00 f303 	mul.w	r3, r0, r3
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	00db      	lsls	r3, r3, #3
 80073a4:	3332      	adds	r3, #50	; 0x32
 80073a6:	4a5a      	ldr	r2, [pc, #360]	; (8007510 <UART_SetConfig+0x2e4>)
 80073a8:	fba2 2303 	umull	r2, r3, r2, r3
 80073ac:	095b      	lsrs	r3, r3, #5
 80073ae:	f003 0207 	and.w	r2, r3, #7
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	440a      	add	r2, r1
 80073b8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80073ba:	e0f9      	b.n	80075b0 <UART_SetConfig+0x384>
      pclk = HAL_RCC_GetPCLK1Freq();
 80073bc:	f7fd ffde 	bl	800537c <HAL_RCC_GetPCLK1Freq>
 80073c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	4613      	mov	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	009a      	lsls	r2, r3, #2
 80073cc:	441a      	add	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	005b      	lsls	r3, r3, #1
 80073d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d8:	4a4d      	ldr	r2, [pc, #308]	; (8007510 <UART_SetConfig+0x2e4>)
 80073da:	fba2 2303 	umull	r2, r3, r2, r3
 80073de:	095b      	lsrs	r3, r3, #5
 80073e0:	0119      	lsls	r1, r3, #4
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	4613      	mov	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4413      	add	r3, r2
 80073ea:	009a      	lsls	r2, r3, #2
 80073ec:	441a      	add	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	005b      	lsls	r3, r3, #1
 80073f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80073f8:	4b45      	ldr	r3, [pc, #276]	; (8007510 <UART_SetConfig+0x2e4>)
 80073fa:	fba3 0302 	umull	r0, r3, r3, r2
 80073fe:	095b      	lsrs	r3, r3, #5
 8007400:	2064      	movs	r0, #100	; 0x64
 8007402:	fb00 f303 	mul.w	r3, r0, r3
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	00db      	lsls	r3, r3, #3
 800740a:	3332      	adds	r3, #50	; 0x32
 800740c:	4a40      	ldr	r2, [pc, #256]	; (8007510 <UART_SetConfig+0x2e4>)
 800740e:	fba2 2303 	umull	r2, r3, r2, r3
 8007412:	095b      	lsrs	r3, r3, #5
 8007414:	005b      	lsls	r3, r3, #1
 8007416:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800741a:	4419      	add	r1, r3
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	4613      	mov	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	009a      	lsls	r2, r3, #2
 8007426:	441a      	add	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	005b      	lsls	r3, r3, #1
 800742e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007432:	4b37      	ldr	r3, [pc, #220]	; (8007510 <UART_SetConfig+0x2e4>)
 8007434:	fba3 0302 	umull	r0, r3, r3, r2
 8007438:	095b      	lsrs	r3, r3, #5
 800743a:	2064      	movs	r0, #100	; 0x64
 800743c:	fb00 f303 	mul.w	r3, r0, r3
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	00db      	lsls	r3, r3, #3
 8007444:	3332      	adds	r3, #50	; 0x32
 8007446:	4a32      	ldr	r2, [pc, #200]	; (8007510 <UART_SetConfig+0x2e4>)
 8007448:	fba2 2303 	umull	r2, r3, r2, r3
 800744c:	095b      	lsrs	r3, r3, #5
 800744e:	f003 0207 	and.w	r2, r3, #7
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	440a      	add	r2, r1
 8007458:	609a      	str	r2, [r3, #8]
}
 800745a:	e0a9      	b.n	80075b0 <UART_SetConfig+0x384>
    if((huart->Instance == USART1))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a2a      	ldr	r2, [pc, #168]	; (800750c <UART_SetConfig+0x2e0>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d156      	bne.n	8007514 <UART_SetConfig+0x2e8>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007466:	f7fd ff9d 	bl	80053a4 <HAL_RCC_GetPCLK2Freq>
 800746a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	4613      	mov	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	009a      	lsls	r2, r3, #2
 8007476:	441a      	add	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007482:	4a23      	ldr	r2, [pc, #140]	; (8007510 <UART_SetConfig+0x2e4>)
 8007484:	fba2 2303 	umull	r2, r3, r2, r3
 8007488:	095b      	lsrs	r3, r3, #5
 800748a:	0119      	lsls	r1, r3, #4
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	4613      	mov	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4413      	add	r3, r2
 8007494:	009a      	lsls	r2, r3, #2
 8007496:	441a      	add	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	fbb2 f2f3 	udiv	r2, r2, r3
 80074a2:	4b1b      	ldr	r3, [pc, #108]	; (8007510 <UART_SetConfig+0x2e4>)
 80074a4:	fba3 0302 	umull	r0, r3, r3, r2
 80074a8:	095b      	lsrs	r3, r3, #5
 80074aa:	2064      	movs	r0, #100	; 0x64
 80074ac:	fb00 f303 	mul.w	r3, r0, r3
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	011b      	lsls	r3, r3, #4
 80074b4:	3332      	adds	r3, #50	; 0x32
 80074b6:	4a16      	ldr	r2, [pc, #88]	; (8007510 <UART_SetConfig+0x2e4>)
 80074b8:	fba2 2303 	umull	r2, r3, r2, r3
 80074bc:	095b      	lsrs	r3, r3, #5
 80074be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074c2:	4419      	add	r1, r3
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	4613      	mov	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	009a      	lsls	r2, r3, #2
 80074ce:	441a      	add	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80074da:	4b0d      	ldr	r3, [pc, #52]	; (8007510 <UART_SetConfig+0x2e4>)
 80074dc:	fba3 0302 	umull	r0, r3, r3, r2
 80074e0:	095b      	lsrs	r3, r3, #5
 80074e2:	2064      	movs	r0, #100	; 0x64
 80074e4:	fb00 f303 	mul.w	r3, r0, r3
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	011b      	lsls	r3, r3, #4
 80074ec:	3332      	adds	r3, #50	; 0x32
 80074ee:	4a08      	ldr	r2, [pc, #32]	; (8007510 <UART_SetConfig+0x2e4>)
 80074f0:	fba2 2303 	umull	r2, r3, r2, r3
 80074f4:	095b      	lsrs	r3, r3, #5
 80074f6:	f003 020f 	and.w	r2, r3, #15
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	440a      	add	r2, r1
 8007500:	609a      	str	r2, [r3, #8]
}
 8007502:	e055      	b.n	80075b0 <UART_SetConfig+0x384>
 8007504:	003d0900 	.word	0x003d0900
 8007508:	0800ab2c 	.word	0x0800ab2c
 800750c:	40013800 	.word	0x40013800
 8007510:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8007514:	f7fd ff32 	bl	800537c <HAL_RCC_GetPCLK1Freq>
 8007518:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	4613      	mov	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	009a      	lsls	r2, r3, #2
 8007524:	441a      	add	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007530:	4a21      	ldr	r2, [pc, #132]	; (80075b8 <UART_SetConfig+0x38c>)
 8007532:	fba2 2303 	umull	r2, r3, r2, r3
 8007536:	095b      	lsrs	r3, r3, #5
 8007538:	0119      	lsls	r1, r3, #4
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	4613      	mov	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	009a      	lsls	r2, r3, #2
 8007544:	441a      	add	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007550:	4b19      	ldr	r3, [pc, #100]	; (80075b8 <UART_SetConfig+0x38c>)
 8007552:	fba3 0302 	umull	r0, r3, r3, r2
 8007556:	095b      	lsrs	r3, r3, #5
 8007558:	2064      	movs	r0, #100	; 0x64
 800755a:	fb00 f303 	mul.w	r3, r0, r3
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	011b      	lsls	r3, r3, #4
 8007562:	3332      	adds	r3, #50	; 0x32
 8007564:	4a14      	ldr	r2, [pc, #80]	; (80075b8 <UART_SetConfig+0x38c>)
 8007566:	fba2 2303 	umull	r2, r3, r2, r3
 800756a:	095b      	lsrs	r3, r3, #5
 800756c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007570:	4419      	add	r1, r3
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	4613      	mov	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	009a      	lsls	r2, r3, #2
 800757c:	441a      	add	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	fbb2 f2f3 	udiv	r2, r2, r3
 8007588:	4b0b      	ldr	r3, [pc, #44]	; (80075b8 <UART_SetConfig+0x38c>)
 800758a:	fba3 0302 	umull	r0, r3, r3, r2
 800758e:	095b      	lsrs	r3, r3, #5
 8007590:	2064      	movs	r0, #100	; 0x64
 8007592:	fb00 f303 	mul.w	r3, r0, r3
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	011b      	lsls	r3, r3, #4
 800759a:	3332      	adds	r3, #50	; 0x32
 800759c:	4a06      	ldr	r2, [pc, #24]	; (80075b8 <UART_SetConfig+0x38c>)
 800759e:	fba2 2303 	umull	r2, r3, r2, r3
 80075a2:	095b      	lsrs	r3, r3, #5
 80075a4:	f003 020f 	and.w	r2, r3, #15
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	440a      	add	r2, r1
 80075ae:	609a      	str	r2, [r3, #8]
}
 80075b0:	bf00      	nop
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	51eb851f 	.word	0x51eb851f

080075bc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075c2:	f3ef 8305 	mrs	r3, IPSR
 80075c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80075c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10f      	bne.n	80075ee <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075ce:	f3ef 8310 	mrs	r3, PRIMASK
 80075d2:	607b      	str	r3, [r7, #4]
  return(result);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d109      	bne.n	80075ee <osKernelInitialize+0x32>
 80075da:	4b10      	ldr	r3, [pc, #64]	; (800761c <osKernelInitialize+0x60>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d109      	bne.n	80075f6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075e2:	f3ef 8311 	mrs	r3, BASEPRI
 80075e6:	603b      	str	r3, [r7, #0]
  return(result);
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d003      	beq.n	80075f6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80075ee:	f06f 0305 	mvn.w	r3, #5
 80075f2:	60fb      	str	r3, [r7, #12]
 80075f4:	e00c      	b.n	8007610 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80075f6:	4b09      	ldr	r3, [pc, #36]	; (800761c <osKernelInitialize+0x60>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d105      	bne.n	800760a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80075fe:	4b07      	ldr	r3, [pc, #28]	; (800761c <osKernelInitialize+0x60>)
 8007600:	2201      	movs	r2, #1
 8007602:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007604:	2300      	movs	r3, #0
 8007606:	60fb      	str	r3, [r7, #12]
 8007608:	e002      	b.n	8007610 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800760a:	f04f 33ff 	mov.w	r3, #4294967295
 800760e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007610:	68fb      	ldr	r3, [r7, #12]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	bc80      	pop	{r7}
 800761a:	4770      	bx	lr
 800761c:	20000030 	.word	0x20000030

08007620 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007626:	f3ef 8305 	mrs	r3, IPSR
 800762a:	60bb      	str	r3, [r7, #8]
  return(result);
 800762c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10f      	bne.n	8007652 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007632:	f3ef 8310 	mrs	r3, PRIMASK
 8007636:	607b      	str	r3, [r7, #4]
  return(result);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d109      	bne.n	8007652 <osKernelStart+0x32>
 800763e:	4b11      	ldr	r3, [pc, #68]	; (8007684 <osKernelStart+0x64>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2b02      	cmp	r3, #2
 8007644:	d109      	bne.n	800765a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007646:	f3ef 8311 	mrs	r3, BASEPRI
 800764a:	603b      	str	r3, [r7, #0]
  return(result);
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d003      	beq.n	800765a <osKernelStart+0x3a>
    stat = osErrorISR;
 8007652:	f06f 0305 	mvn.w	r3, #5
 8007656:	60fb      	str	r3, [r7, #12]
 8007658:	e00e      	b.n	8007678 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800765a:	4b0a      	ldr	r3, [pc, #40]	; (8007684 <osKernelStart+0x64>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d107      	bne.n	8007672 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8007662:	4b08      	ldr	r3, [pc, #32]	; (8007684 <osKernelStart+0x64>)
 8007664:	2202      	movs	r2, #2
 8007666:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007668:	f001 fbb2 	bl	8008dd0 <vTaskStartScheduler>
      stat = osOK;
 800766c:	2300      	movs	r3, #0
 800766e:	60fb      	str	r3, [r7, #12]
 8007670:	e002      	b.n	8007678 <osKernelStart+0x58>
    } else {
      stat = osError;
 8007672:	f04f 33ff 	mov.w	r3, #4294967295
 8007676:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007678:	68fb      	ldr	r3, [r7, #12]
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	20000030 	.word	0x20000030

08007688 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007688:	b580      	push	{r7, lr}
 800768a:	b092      	sub	sp, #72	; 0x48
 800768c:	af04      	add	r7, sp, #16
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007694:	2300      	movs	r3, #0
 8007696:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007698:	f3ef 8305 	mrs	r3, IPSR
 800769c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f040 8094 	bne.w	80077ce <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076a6:	f3ef 8310 	mrs	r3, PRIMASK
 80076aa:	623b      	str	r3, [r7, #32]
  return(result);
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f040 808d 	bne.w	80077ce <osThreadNew+0x146>
 80076b4:	4b48      	ldr	r3, [pc, #288]	; (80077d8 <osThreadNew+0x150>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d106      	bne.n	80076ca <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076bc:	f3ef 8311 	mrs	r3, BASEPRI
 80076c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f040 8082 	bne.w	80077ce <osThreadNew+0x146>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d07e      	beq.n	80077ce <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80076d0:	2380      	movs	r3, #128	; 0x80
 80076d2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80076d4:	2318      	movs	r3, #24
 80076d6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80076d8:	2300      	movs	r3, #0
 80076da:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80076dc:	f107 031b 	add.w	r3, r7, #27
 80076e0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80076e2:	f04f 33ff 	mov.w	r3, #4294967295
 80076e6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d045      	beq.n	800777a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d002      	beq.n	80076fc <osThreadNew+0x74>
        name = attr->name;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d002      	beq.n	800770a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800770a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770c:	2b00      	cmp	r3, #0
 800770e:	d008      	beq.n	8007722 <osThreadNew+0x9a>
 8007710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007712:	2b38      	cmp	r3, #56	; 0x38
 8007714:	d805      	bhi.n	8007722 <osThreadNew+0x9a>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <osThreadNew+0x9e>
        return (NULL);
 8007722:	2300      	movs	r3, #0
 8007724:	e054      	b.n	80077d0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d003      	beq.n	8007736 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	089b      	lsrs	r3, r3, #2
 8007734:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00e      	beq.n	800775c <osThreadNew+0xd4>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	2b5b      	cmp	r3, #91	; 0x5b
 8007744:	d90a      	bls.n	800775c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800774a:	2b00      	cmp	r3, #0
 800774c:	d006      	beq.n	800775c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d002      	beq.n	800775c <osThreadNew+0xd4>
        mem = 1;
 8007756:	2301      	movs	r3, #1
 8007758:	62bb      	str	r3, [r7, #40]	; 0x28
 800775a:	e010      	b.n	800777e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10c      	bne.n	800777e <osThreadNew+0xf6>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d108      	bne.n	800777e <osThreadNew+0xf6>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d104      	bne.n	800777e <osThreadNew+0xf6>
          mem = 0;
 8007774:	2300      	movs	r3, #0
 8007776:	62bb      	str	r3, [r7, #40]	; 0x28
 8007778:	e001      	b.n	800777e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800777a:	2300      	movs	r3, #0
 800777c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800777e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007780:	2b01      	cmp	r3, #1
 8007782:	d110      	bne.n	80077a6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800778c:	9202      	str	r2, [sp, #8]
 800778e:	9301      	str	r3, [sp, #4]
 8007790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007798:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f001 f844 	bl	8008828 <xTaskCreateStatic>
 80077a0:	4603      	mov	r3, r0
 80077a2:	617b      	str	r3, [r7, #20]
 80077a4:	e013      	b.n	80077ce <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80077a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d110      	bne.n	80077ce <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80077ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	f107 0314 	add.w	r3, r7, #20
 80077b4:	9301      	str	r3, [sp, #4]
 80077b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b8:	9300      	str	r3, [sp, #0]
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f001 f88b 	bl	80088da <xTaskCreate>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d001      	beq.n	80077ce <osThreadNew+0x146>
          hTask = NULL;
 80077ca:	2300      	movs	r3, #0
 80077cc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80077ce:	697b      	ldr	r3, [r7, #20]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3738      	adds	r7, #56	; 0x38
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	20000030 	.word	0x20000030

080077dc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077e4:	f3ef 8305 	mrs	r3, IPSR
 80077e8:	613b      	str	r3, [r7, #16]
  return(result);
 80077ea:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10f      	bne.n	8007810 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077f0:	f3ef 8310 	mrs	r3, PRIMASK
 80077f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d109      	bne.n	8007810 <osDelay+0x34>
 80077fc:	4b0d      	ldr	r3, [pc, #52]	; (8007834 <osDelay+0x58>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b02      	cmp	r3, #2
 8007802:	d109      	bne.n	8007818 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007804:	f3ef 8311 	mrs	r3, BASEPRI
 8007808:	60bb      	str	r3, [r7, #8]
  return(result);
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d003      	beq.n	8007818 <osDelay+0x3c>
    stat = osErrorISR;
 8007810:	f06f 0305 	mvn.w	r3, #5
 8007814:	617b      	str	r3, [r7, #20]
 8007816:	e007      	b.n	8007828 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007818:	2300      	movs	r3, #0
 800781a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d002      	beq.n	8007828 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f001 f994 	bl	8008b50 <vTaskDelay>
    }
  }

  return (stat);
 8007828:	697b      	ldr	r3, [r7, #20]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3718      	adds	r7, #24
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	20000030 	.word	0x20000030

08007838 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	4a06      	ldr	r2, [pc, #24]	; (8007860 <vApplicationGetIdleTaskMemory+0x28>)
 8007848:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	4a05      	ldr	r2, [pc, #20]	; (8007864 <vApplicationGetIdleTaskMemory+0x2c>)
 800784e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2280      	movs	r2, #128	; 0x80
 8007854:	601a      	str	r2, [r3, #0]
}
 8007856:	bf00      	nop
 8007858:	3714      	adds	r7, #20
 800785a:	46bd      	mov	sp, r7
 800785c:	bc80      	pop	{r7}
 800785e:	4770      	bx	lr
 8007860:	20000034 	.word	0x20000034
 8007864:	20000090 	.word	0x20000090

08007868 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	4a07      	ldr	r2, [pc, #28]	; (8007894 <vApplicationGetTimerTaskMemory+0x2c>)
 8007878:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	4a06      	ldr	r2, [pc, #24]	; (8007898 <vApplicationGetTimerTaskMemory+0x30>)
 800787e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007886:	601a      	str	r2, [r3, #0]
}
 8007888:	bf00      	nop
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	bc80      	pop	{r7}
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	20000290 	.word	0x20000290
 8007898:	200002ec 	.word	0x200002ec

0800789c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80078a2:	2020      	movs	r0, #32
 80078a4:	f002 fdee 	bl	800a484 <pvPortMalloc>
 80078a8:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00a      	beq.n	80078c6 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	3304      	adds	r3, #4
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 f9f4 	bl	8007ca8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80078c6:	687b      	ldr	r3, [r7, #4]
	}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b090      	sub	sp, #64	; 0x40
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
 80078dc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80078e2:	2300      	movs	r3, #0
 80078e4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80078e6:	2300      	movs	r3, #0
 80078e8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d109      	bne.n	8007904 <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80078f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f4:	f383 8811 	msr	BASEPRI, r3
 80078f8:	f3bf 8f6f 	isb	sy
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	623b      	str	r3, [r7, #32]
 8007902:	e7fe      	b.n	8007902 <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d009      	beq.n	8007922 <xEventGroupWaitBits+0x52>
 800790e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007912:	f383 8811 	msr	BASEPRI, r3
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	61fb      	str	r3, [r7, #28]
 8007920:	e7fe      	b.n	8007920 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d109      	bne.n	800793c <xEventGroupWaitBits+0x6c>
 8007928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792c:	f383 8811 	msr	BASEPRI, r3
 8007930:	f3bf 8f6f 	isb	sy
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	61bb      	str	r3, [r7, #24]
 800793a:	e7fe      	b.n	800793a <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800793c:	f001 ff4c 	bl	80097d8 <xTaskGetSchedulerState>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d102      	bne.n	800794c <xEventGroupWaitBits+0x7c>
 8007946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007948:	2b00      	cmp	r3, #0
 800794a:	d101      	bne.n	8007950 <xEventGroupWaitBits+0x80>
 800794c:	2301      	movs	r3, #1
 800794e:	e000      	b.n	8007952 <xEventGroupWaitBits+0x82>
 8007950:	2300      	movs	r3, #0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d109      	bne.n	800796a <xEventGroupWaitBits+0x9a>
 8007956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	617b      	str	r3, [r7, #20]
 8007968:	e7fe      	b.n	8007968 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 800796a:	f001 fa95 	bl	8008e98 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800796e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	68b9      	ldr	r1, [r7, #8]
 8007978:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800797a:	f000 f960 	bl	8007c3e <prvTestWaitCondition>
 800797e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8007980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00e      	beq.n	80079a4 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8007986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007988:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800798a:	2300      	movs	r3, #0
 800798c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d028      	beq.n	80079e6 <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	43db      	mvns	r3, r3
 800799c:	401a      	ands	r2, r3
 800799e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a0:	601a      	str	r2, [r3, #0]
 80079a2:	e020      	b.n	80079e6 <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80079a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d104      	bne.n	80079b4 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80079aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ac:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80079ae:	2301      	movs	r3, #1
 80079b0:	633b      	str	r3, [r7, #48]	; 0x30
 80079b2:	e018      	b.n	80079e6 <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d003      	beq.n	80079c2 <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80079ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079c0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d003      	beq.n	80079d0 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80079c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80079ce:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80079d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d2:	1d18      	adds	r0, r3, #4
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d8:	4313      	orrs	r3, r2
 80079da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079dc:	4619      	mov	r1, r3
 80079de:	f001 fc7b 	bl	80092d8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80079e2:	2300      	movs	r3, #0
 80079e4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80079e6:	f001 fa65 	bl	8008eb4 <xTaskResumeAll>
 80079ea:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80079ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d031      	beq.n	8007a56 <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 80079f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d107      	bne.n	8007a08 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 80079f8:	4b19      	ldr	r3, [pc, #100]	; (8007a60 <xEventGroupWaitBits+0x190>)
 80079fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079fe:	601a      	str	r2, [r3, #0]
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8007a08:	f001 ff70 	bl	80098ec <uxTaskResetEventItemValue>
 8007a0c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8007a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d11a      	bne.n	8007a4e <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 8007a18:	f002 fc3e 	bl	800a298 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8007a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	68b9      	ldr	r1, [r7, #8]
 8007a26:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007a28:	f000 f909 	bl	8007c3e <prvTestWaitCondition>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d009      	beq.n	8007a46 <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d006      	beq.n	8007a46 <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	43db      	mvns	r3, r3
 8007a40:	401a      	ands	r2, r3
 8007a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a44:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8007a46:	2301      	movs	r3, #1
 8007a48:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8007a4a:	f002 fc53 	bl	800a2f4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a54:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8007a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3740      	adds	r7, #64	; 0x40
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	e000ed04 	.word	0xe000ed04

08007a64 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d109      	bne.n	8007a8c <xEventGroupClearBits+0x28>
 8007a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7c:	f383 8811 	msr	BASEPRI, r3
 8007a80:	f3bf 8f6f 	isb	sy
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	60fb      	str	r3, [r7, #12]
 8007a8a:	e7fe      	b.n	8007a8a <xEventGroupClearBits+0x26>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d009      	beq.n	8007aaa <xEventGroupClearBits+0x46>
 8007a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9a:	f383 8811 	msr	BASEPRI, r3
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	f3bf 8f4f 	dsb	sy
 8007aa6:	60bb      	str	r3, [r7, #8]
 8007aa8:	e7fe      	b.n	8007aa8 <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
 8007aaa:	f002 fbf5 	bl	800a298 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	43db      	mvns	r3, r3
 8007abc:	401a      	ands	r2, r3
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8007ac2:	f002 fc17 	bl	800a2f4 <vPortExitCritical>

	return uxReturn;
 8007ac6:	693b      	ldr	r3, [r7, #16]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3718      	adds	r7, #24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
 8007ada:	2300      	movs	r3, #0
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	6879      	ldr	r1, [r7, #4]
 8007ae0:	4804      	ldr	r0, [pc, #16]	; (8007af4 <xEventGroupClearBitsFromISR+0x24>)
 8007ae2:	f002 facd 	bl	800a080 <xTimerPendFunctionCallFromISR>
 8007ae6:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
	}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	08007c25 	.word	0x08007c25

08007af8 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b08e      	sub	sp, #56	; 0x38
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8007b02:	2300      	movs	r3, #0
 8007b04:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d109      	bne.n	8007b28 <xEventGroupSetBits+0x30>
 8007b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b18:	f383 8811 	msr	BASEPRI, r3
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	613b      	str	r3, [r7, #16]
 8007b26:	e7fe      	b.n	8007b26 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d009      	beq.n	8007b46 <xEventGroupSetBits+0x4e>
 8007b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b36:	f383 8811 	msr	BASEPRI, r3
 8007b3a:	f3bf 8f6f 	isb	sy
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	60fb      	str	r3, [r7, #12]
 8007b44:	e7fe      	b.n	8007b44 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8007b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b48:	3304      	adds	r3, #4
 8007b4a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4e:	3308      	adds	r3, #8
 8007b50:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8007b52:	f001 f9a1 	bl	8008e98 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8007b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8007b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	431a      	orrs	r2, r3
 8007b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b66:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8007b68:	e03c      	b.n	8007be4 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8007b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8007b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8007b76:	2300      	movs	r3, #0
 8007b78:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007b80:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007b88:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d108      	bne.n	8007ba6 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8007b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00b      	beq.n	8007bb8 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ba4:	e008      	b.n	8007bb8 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8007ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	4013      	ands	r3, r2
 8007bae:	69ba      	ldr	r2, [r7, #24]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d101      	bne.n	8007bb8 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8007bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d010      	beq.n	8007be0 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d003      	beq.n	8007bd0 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8007bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8007bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007bd8:	4619      	mov	r1, r3
 8007bda:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007bdc:	f001 fc42 	bl	8009464 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8007be4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007be6:	6a3b      	ldr	r3, [r7, #32]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d1be      	bne.n	8007b6a <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf2:	43db      	mvns	r3, r3
 8007bf4:	401a      	ands	r2, r3
 8007bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8007bfa:	f001 f95b 	bl	8008eb4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8007bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c00:	681b      	ldr	r3, [r3, #0]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3738      	adds	r7, #56	; 0x38
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b082      	sub	sp, #8
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7ff ff6e 	bl	8007af8 <xEventGroupSetBits>
}
 8007c1c:	bf00      	nop
 8007c1e:	3708      	adds	r7, #8
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7ff ff17 	bl	8007a64 <xEventGroupClearBits>
}
 8007c36:	bf00      	nop
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b087      	sub	sp, #28
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	60f8      	str	r0, [r7, #12]
 8007c46:	60b9      	str	r1, [r7, #8]
 8007c48:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d107      	bne.n	8007c64 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	4013      	ands	r3, r2
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00a      	beq.n	8007c74 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	617b      	str	r3, [r7, #20]
 8007c62:	e007      	b.n	8007c74 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	4013      	ands	r3, r2
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d101      	bne.n	8007c74 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007c70:	2301      	movs	r3, #1
 8007c72:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8007c74:	697b      	ldr	r3, [r7, #20]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	371c      	adds	r7, #28
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bc80      	pop	{r7}
 8007c7e:	4770      	bx	lr

08007c80 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b086      	sub	sp, #24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	68f9      	ldr	r1, [r7, #12]
 8007c92:	4804      	ldr	r0, [pc, #16]	; (8007ca4 <xEventGroupSetBitsFromISR+0x24>)
 8007c94:	f002 f9f4 	bl	800a080 <xTimerPendFunctionCallFromISR>
 8007c98:	6178      	str	r0, [r7, #20]

		return xReturn;
 8007c9a:	697b      	ldr	r3, [r7, #20]
	}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3718      	adds	r7, #24
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	08007c0b 	.word	0x08007c0b

08007ca8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f103 0208 	add.w	r2, r3, #8
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f103 0208 	add.w	r2, r3, #8
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f103 0208 	add.w	r2, r3, #8
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007cdc:	bf00      	nop
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bc80      	pop	{r7}
 8007ce4:	4770      	bx	lr

08007ce6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bc80      	pop	{r7}
 8007cfc:	4770      	bx	lr

08007cfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b085      	sub	sp, #20
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	689a      	ldr	r2, [r3, #8]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	683a      	ldr	r2, [r7, #0]
 8007d22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	1c5a      	adds	r2, r3, #1
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	601a      	str	r2, [r3, #0]
}
 8007d3a:	bf00      	nop
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bc80      	pop	{r7}
 8007d42:	4770      	bx	lr

08007d44 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5a:	d103      	bne.n	8007d64 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	60fb      	str	r3, [r7, #12]
 8007d62:	e00c      	b.n	8007d7e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	3308      	adds	r3, #8
 8007d68:	60fb      	str	r3, [r7, #12]
 8007d6a:	e002      	b.n	8007d72 <vListInsert+0x2e>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	60fb      	str	r3, [r7, #12]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d2f6      	bcs.n	8007d6c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	685a      	ldr	r2, [r3, #4]
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	1c5a      	adds	r2, r3, #1
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	601a      	str	r2, [r3, #0]
}
 8007daa:	bf00      	nop
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bc80      	pop	{r7}
 8007db2:	4770      	bx	lr

08007db4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	6892      	ldr	r2, [r2, #8]
 8007dca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	6852      	ldr	r2, [r2, #4]
 8007dd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d103      	bne.n	8007de8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	689a      	ldr	r2, [r3, #8]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	1e5a      	subs	r2, r3, #1
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3714      	adds	r7, #20
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bc80      	pop	{r7}
 8007e04:	4770      	bx	lr
	...

08007e08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d109      	bne.n	8007e30 <xQueueGenericReset+0x28>
 8007e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	60bb      	str	r3, [r7, #8]
 8007e2e:	e7fe      	b.n	8007e2e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007e30:	f002 fa32 	bl	800a298 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e3c:	68f9      	ldr	r1, [r7, #12]
 8007e3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e40:	fb01 f303 	mul.w	r3, r1, r3
 8007e44:	441a      	add	r2, r3
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e60:	3b01      	subs	r3, #1
 8007e62:	68f9      	ldr	r1, [r7, #12]
 8007e64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e66:	fb01 f303 	mul.w	r3, r1, r3
 8007e6a:	441a      	add	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	22ff      	movs	r2, #255	; 0xff
 8007e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	22ff      	movs	r2, #255	; 0xff
 8007e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d114      	bne.n	8007eb0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d01a      	beq.n	8007ec4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	3310      	adds	r3, #16
 8007e92:	4618      	mov	r0, r3
 8007e94:	f001 fa84 	bl	80093a0 <xTaskRemoveFromEventList>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d012      	beq.n	8007ec4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007e9e:	4b0d      	ldr	r3, [pc, #52]	; (8007ed4 <xQueueGenericReset+0xcc>)
 8007ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ea4:	601a      	str	r2, [r3, #0]
 8007ea6:	f3bf 8f4f 	dsb	sy
 8007eaa:	f3bf 8f6f 	isb	sy
 8007eae:	e009      	b.n	8007ec4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	3310      	adds	r3, #16
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7ff fef7 	bl	8007ca8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	3324      	adds	r3, #36	; 0x24
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7ff fef2 	bl	8007ca8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007ec4:	f002 fa16 	bl	800a2f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007ec8:	2301      	movs	r3, #1
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	e000ed04 	.word	0xe000ed04

08007ed8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b08e      	sub	sp, #56	; 0x38
 8007edc:	af02      	add	r7, sp, #8
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
 8007ee4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d109      	bne.n	8007f00 <xQueueGenericCreateStatic+0x28>
 8007eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007efe:	e7fe      	b.n	8007efe <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d109      	bne.n	8007f1a <xQueueGenericCreateStatic+0x42>
 8007f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0a:	f383 8811 	msr	BASEPRI, r3
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	627b      	str	r3, [r7, #36]	; 0x24
 8007f18:	e7fe      	b.n	8007f18 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <xQueueGenericCreateStatic+0x4e>
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d001      	beq.n	8007f2a <xQueueGenericCreateStatic+0x52>
 8007f26:	2301      	movs	r3, #1
 8007f28:	e000      	b.n	8007f2c <xQueueGenericCreateStatic+0x54>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d109      	bne.n	8007f44 <xQueueGenericCreateStatic+0x6c>
 8007f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	623b      	str	r3, [r7, #32]
 8007f42:	e7fe      	b.n	8007f42 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d102      	bne.n	8007f50 <xQueueGenericCreateStatic+0x78>
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d101      	bne.n	8007f54 <xQueueGenericCreateStatic+0x7c>
 8007f50:	2301      	movs	r3, #1
 8007f52:	e000      	b.n	8007f56 <xQueueGenericCreateStatic+0x7e>
 8007f54:	2300      	movs	r3, #0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d109      	bne.n	8007f6e <xQueueGenericCreateStatic+0x96>
 8007f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	61fb      	str	r3, [r7, #28]
 8007f6c:	e7fe      	b.n	8007f6c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007f6e:	2350      	movs	r3, #80	; 0x50
 8007f70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2b50      	cmp	r3, #80	; 0x50
 8007f76:	d009      	beq.n	8007f8c <xQueueGenericCreateStatic+0xb4>
 8007f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7c:	f383 8811 	msr	BASEPRI, r3
 8007f80:	f3bf 8f6f 	isb	sy
 8007f84:	f3bf 8f4f 	dsb	sy
 8007f88:	61bb      	str	r3, [r7, #24]
 8007f8a:	e7fe      	b.n	8007f8a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00d      	beq.n	8007fb2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f9e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	68b9      	ldr	r1, [r7, #8]
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f000 f842 	bl	8008036 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3730      	adds	r7, #48	; 0x30
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b08a      	sub	sp, #40	; 0x28
 8007fc0:	af02      	add	r7, sp, #8
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d109      	bne.n	8007fe4 <xQueueGenericCreate+0x28>
 8007fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	613b      	str	r3, [r7, #16]
 8007fe2:	e7fe      	b.n	8007fe2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d102      	bne.n	8007ff0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	61fb      	str	r3, [r7, #28]
 8007fee:	e004      	b.n	8007ffa <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	fb02 f303 	mul.w	r3, r2, r3
 8007ff8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	3350      	adds	r3, #80	; 0x50
 8007ffe:	4618      	mov	r0, r3
 8008000:	f002 fa40 	bl	800a484 <pvPortMalloc>
 8008004:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00f      	beq.n	800802c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	3350      	adds	r3, #80	; 0x50
 8008010:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800801a:	79fa      	ldrb	r2, [r7, #7]
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	4613      	mov	r3, r2
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	68b9      	ldr	r1, [r7, #8]
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f000 f805 	bl	8008036 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800802c:	69bb      	ldr	r3, [r7, #24]
	}
 800802e:	4618      	mov	r0, r3
 8008030:	3720      	adds	r7, #32
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b084      	sub	sp, #16
 800803a:	af00      	add	r7, sp, #0
 800803c:	60f8      	str	r0, [r7, #12]
 800803e:	60b9      	str	r1, [r7, #8]
 8008040:	607a      	str	r2, [r7, #4]
 8008042:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d103      	bne.n	8008052 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	69ba      	ldr	r2, [r7, #24]
 800804e:	601a      	str	r2, [r3, #0]
 8008050:	e002      	b.n	8008058 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008064:	2101      	movs	r1, #1
 8008066:	69b8      	ldr	r0, [r7, #24]
 8008068:	f7ff fece 	bl	8007e08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	78fa      	ldrb	r2, [r7, #3]
 8008070:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008074:	bf00      	nop
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b08e      	sub	sp, #56	; 0x38
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
 8008088:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800808a:	2300      	movs	r3, #0
 800808c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008094:	2b00      	cmp	r3, #0
 8008096:	d109      	bne.n	80080ac <xQueueGenericSend+0x30>
 8008098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809c:	f383 8811 	msr	BASEPRI, r3
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80080aa:	e7fe      	b.n	80080aa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d103      	bne.n	80080ba <xQueueGenericSend+0x3e>
 80080b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d101      	bne.n	80080be <xQueueGenericSend+0x42>
 80080ba:	2301      	movs	r3, #1
 80080bc:	e000      	b.n	80080c0 <xQueueGenericSend+0x44>
 80080be:	2300      	movs	r3, #0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d109      	bne.n	80080d8 <xQueueGenericSend+0x5c>
 80080c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c8:	f383 8811 	msr	BASEPRI, r3
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	627b      	str	r3, [r7, #36]	; 0x24
 80080d6:	e7fe      	b.n	80080d6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d103      	bne.n	80080e6 <xQueueGenericSend+0x6a>
 80080de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d101      	bne.n	80080ea <xQueueGenericSend+0x6e>
 80080e6:	2301      	movs	r3, #1
 80080e8:	e000      	b.n	80080ec <xQueueGenericSend+0x70>
 80080ea:	2300      	movs	r3, #0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d109      	bne.n	8008104 <xQueueGenericSend+0x88>
 80080f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	623b      	str	r3, [r7, #32]
 8008102:	e7fe      	b.n	8008102 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008104:	f001 fb68 	bl	80097d8 <xTaskGetSchedulerState>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d102      	bne.n	8008114 <xQueueGenericSend+0x98>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <xQueueGenericSend+0x9c>
 8008114:	2301      	movs	r3, #1
 8008116:	e000      	b.n	800811a <xQueueGenericSend+0x9e>
 8008118:	2300      	movs	r3, #0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d109      	bne.n	8008132 <xQueueGenericSend+0xb6>
 800811e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008122:	f383 8811 	msr	BASEPRI, r3
 8008126:	f3bf 8f6f 	isb	sy
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	61fb      	str	r3, [r7, #28]
 8008130:	e7fe      	b.n	8008130 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008132:	f002 f8b1 	bl	800a298 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800813a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800813e:	429a      	cmp	r2, r3
 8008140:	d302      	bcc.n	8008148 <xQueueGenericSend+0xcc>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b02      	cmp	r3, #2
 8008146:	d129      	bne.n	800819c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008148:	683a      	ldr	r2, [r7, #0]
 800814a:	68b9      	ldr	r1, [r7, #8]
 800814c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800814e:	f000 f9ff 	bl	8008550 <prvCopyDataToQueue>
 8008152:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008158:	2b00      	cmp	r3, #0
 800815a:	d010      	beq.n	800817e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800815c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815e:	3324      	adds	r3, #36	; 0x24
 8008160:	4618      	mov	r0, r3
 8008162:	f001 f91d 	bl	80093a0 <xTaskRemoveFromEventList>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d013      	beq.n	8008194 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800816c:	4b3f      	ldr	r3, [pc, #252]	; (800826c <xQueueGenericSend+0x1f0>)
 800816e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008172:	601a      	str	r2, [r3, #0]
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	e00a      	b.n	8008194 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800817e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008180:	2b00      	cmp	r3, #0
 8008182:	d007      	beq.n	8008194 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008184:	4b39      	ldr	r3, [pc, #228]	; (800826c <xQueueGenericSend+0x1f0>)
 8008186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800818a:	601a      	str	r2, [r3, #0]
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008194:	f002 f8ae 	bl	800a2f4 <vPortExitCritical>
				return pdPASS;
 8008198:	2301      	movs	r3, #1
 800819a:	e063      	b.n	8008264 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d103      	bne.n	80081aa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081a2:	f002 f8a7 	bl	800a2f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80081a6:	2300      	movs	r3, #0
 80081a8:	e05c      	b.n	8008264 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d106      	bne.n	80081be <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081b0:	f107 0314 	add.w	r3, r7, #20
 80081b4:	4618      	mov	r0, r3
 80081b6:	f001 f9b5 	bl	8009524 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081ba:	2301      	movs	r3, #1
 80081bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081be:	f002 f899 	bl	800a2f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081c2:	f000 fe69 	bl	8008e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081c6:	f002 f867 	bl	800a298 <vPortEnterCritical>
 80081ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081d0:	b25b      	sxtb	r3, r3
 80081d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d6:	d103      	bne.n	80081e0 <xQueueGenericSend+0x164>
 80081d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081e6:	b25b      	sxtb	r3, r3
 80081e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ec:	d103      	bne.n	80081f6 <xQueueGenericSend+0x17a>
 80081ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081f6:	f002 f87d 	bl	800a2f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081fa:	1d3a      	adds	r2, r7, #4
 80081fc:	f107 0314 	add.w	r3, r7, #20
 8008200:	4611      	mov	r1, r2
 8008202:	4618      	mov	r0, r3
 8008204:	f001 f9a4 	bl	8009550 <xTaskCheckForTimeOut>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d124      	bne.n	8008258 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800820e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008210:	f000 fa96 	bl	8008740 <prvIsQueueFull>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d018      	beq.n	800824c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800821a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821c:	3310      	adds	r3, #16
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	4611      	mov	r1, r2
 8008222:	4618      	mov	r0, r3
 8008224:	f001 f834 	bl	8009290 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800822a:	f000 fa21 	bl	8008670 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800822e:	f000 fe41 	bl	8008eb4 <xTaskResumeAll>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	f47f af7c 	bne.w	8008132 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800823a:	4b0c      	ldr	r3, [pc, #48]	; (800826c <xQueueGenericSend+0x1f0>)
 800823c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008240:	601a      	str	r2, [r3, #0]
 8008242:	f3bf 8f4f 	dsb	sy
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	e772      	b.n	8008132 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800824c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800824e:	f000 fa0f 	bl	8008670 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008252:	f000 fe2f 	bl	8008eb4 <xTaskResumeAll>
 8008256:	e76c      	b.n	8008132 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800825a:	f000 fa09 	bl	8008670 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800825e:	f000 fe29 	bl	8008eb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008262:	2300      	movs	r3, #0
		}
	}
}
 8008264:	4618      	mov	r0, r3
 8008266:	3738      	adds	r7, #56	; 0x38
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	e000ed04 	.word	0xe000ed04

08008270 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b08e      	sub	sp, #56	; 0x38
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	607a      	str	r2, [r7, #4]
 800827c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008284:	2b00      	cmp	r3, #0
 8008286:	d109      	bne.n	800829c <xQueueGenericSendFromISR+0x2c>
 8008288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828c:	f383 8811 	msr	BASEPRI, r3
 8008290:	f3bf 8f6f 	isb	sy
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	627b      	str	r3, [r7, #36]	; 0x24
 800829a:	e7fe      	b.n	800829a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d103      	bne.n	80082aa <xQueueGenericSendFromISR+0x3a>
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <xQueueGenericSendFromISR+0x3e>
 80082aa:	2301      	movs	r3, #1
 80082ac:	e000      	b.n	80082b0 <xQueueGenericSendFromISR+0x40>
 80082ae:	2300      	movs	r3, #0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d109      	bne.n	80082c8 <xQueueGenericSendFromISR+0x58>
 80082b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b8:	f383 8811 	msr	BASEPRI, r3
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	623b      	str	r3, [r7, #32]
 80082c6:	e7fe      	b.n	80082c6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d103      	bne.n	80082d6 <xQueueGenericSendFromISR+0x66>
 80082ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d101      	bne.n	80082da <xQueueGenericSendFromISR+0x6a>
 80082d6:	2301      	movs	r3, #1
 80082d8:	e000      	b.n	80082dc <xQueueGenericSendFromISR+0x6c>
 80082da:	2300      	movs	r3, #0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d109      	bne.n	80082f4 <xQueueGenericSendFromISR+0x84>
 80082e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	61fb      	str	r3, [r7, #28]
 80082f2:	e7fe      	b.n	80082f2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082f4:	f002 f88a 	bl	800a40c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80082f8:	f3ef 8211 	mrs	r2, BASEPRI
 80082fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008300:	f383 8811 	msr	BASEPRI, r3
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	f3bf 8f4f 	dsb	sy
 800830c:	61ba      	str	r2, [r7, #24]
 800830e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008310:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008312:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008316:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800831c:	429a      	cmp	r2, r3
 800831e:	d302      	bcc.n	8008326 <xQueueGenericSendFromISR+0xb6>
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	2b02      	cmp	r3, #2
 8008324:	d12c      	bne.n	8008380 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008328:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800832c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008330:	683a      	ldr	r2, [r7, #0]
 8008332:	68b9      	ldr	r1, [r7, #8]
 8008334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008336:	f000 f90b 	bl	8008550 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800833a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800833e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008342:	d112      	bne.n	800836a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008348:	2b00      	cmp	r3, #0
 800834a:	d016      	beq.n	800837a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800834c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834e:	3324      	adds	r3, #36	; 0x24
 8008350:	4618      	mov	r0, r3
 8008352:	f001 f825 	bl	80093a0 <xTaskRemoveFromEventList>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00e      	beq.n	800837a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00b      	beq.n	800837a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	601a      	str	r2, [r3, #0]
 8008368:	e007      	b.n	800837a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800836a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800836e:	3301      	adds	r3, #1
 8008370:	b2db      	uxtb	r3, r3
 8008372:	b25a      	sxtb	r2, r3
 8008374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800837a:	2301      	movs	r3, #1
 800837c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800837e:	e001      	b.n	8008384 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008380:	2300      	movs	r3, #0
 8008382:	637b      	str	r3, [r7, #52]	; 0x34
 8008384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008386:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800838e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008390:	4618      	mov	r0, r3
 8008392:	3738      	adds	r7, #56	; 0x38
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b08c      	sub	sp, #48	; 0x30
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80083a4:	2300      	movs	r3, #0
 80083a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80083ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d109      	bne.n	80083c6 <xQueueReceive+0x2e>
	__asm volatile
 80083b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b6:	f383 8811 	msr	BASEPRI, r3
 80083ba:	f3bf 8f6f 	isb	sy
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	623b      	str	r3, [r7, #32]
 80083c4:	e7fe      	b.n	80083c4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d103      	bne.n	80083d4 <xQueueReceive+0x3c>
 80083cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d101      	bne.n	80083d8 <xQueueReceive+0x40>
 80083d4:	2301      	movs	r3, #1
 80083d6:	e000      	b.n	80083da <xQueueReceive+0x42>
 80083d8:	2300      	movs	r3, #0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d109      	bne.n	80083f2 <xQueueReceive+0x5a>
 80083de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	61fb      	str	r3, [r7, #28]
 80083f0:	e7fe      	b.n	80083f0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083f2:	f001 f9f1 	bl	80097d8 <xTaskGetSchedulerState>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d102      	bne.n	8008402 <xQueueReceive+0x6a>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d101      	bne.n	8008406 <xQueueReceive+0x6e>
 8008402:	2301      	movs	r3, #1
 8008404:	e000      	b.n	8008408 <xQueueReceive+0x70>
 8008406:	2300      	movs	r3, #0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d109      	bne.n	8008420 <xQueueReceive+0x88>
 800840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	61bb      	str	r3, [r7, #24]
 800841e:	e7fe      	b.n	800841e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008420:	f001 ff3a 	bl	800a298 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008428:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842c:	2b00      	cmp	r3, #0
 800842e:	d01f      	beq.n	8008470 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008430:	68b9      	ldr	r1, [r7, #8]
 8008432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008434:	f000 f8f6 	bl	8008624 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	1e5a      	subs	r2, r3, #1
 800843c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00f      	beq.n	8008468 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844a:	3310      	adds	r3, #16
 800844c:	4618      	mov	r0, r3
 800844e:	f000 ffa7 	bl	80093a0 <xTaskRemoveFromEventList>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d007      	beq.n	8008468 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008458:	4b3c      	ldr	r3, [pc, #240]	; (800854c <xQueueReceive+0x1b4>)
 800845a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800845e:	601a      	str	r2, [r3, #0]
 8008460:	f3bf 8f4f 	dsb	sy
 8008464:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008468:	f001 ff44 	bl	800a2f4 <vPortExitCritical>
				return pdPASS;
 800846c:	2301      	movs	r3, #1
 800846e:	e069      	b.n	8008544 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d103      	bne.n	800847e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008476:	f001 ff3d 	bl	800a2f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800847a:	2300      	movs	r3, #0
 800847c:	e062      	b.n	8008544 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800847e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008480:	2b00      	cmp	r3, #0
 8008482:	d106      	bne.n	8008492 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008484:	f107 0310 	add.w	r3, r7, #16
 8008488:	4618      	mov	r0, r3
 800848a:	f001 f84b 	bl	8009524 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800848e:	2301      	movs	r3, #1
 8008490:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008492:	f001 ff2f 	bl	800a2f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008496:	f000 fcff 	bl	8008e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800849a:	f001 fefd 	bl	800a298 <vPortEnterCritical>
 800849e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084a4:	b25b      	sxtb	r3, r3
 80084a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084aa:	d103      	bne.n	80084b4 <xQueueReceive+0x11c>
 80084ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ae:	2200      	movs	r2, #0
 80084b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084ba:	b25b      	sxtb	r3, r3
 80084bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c0:	d103      	bne.n	80084ca <xQueueReceive+0x132>
 80084c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084ca:	f001 ff13 	bl	800a2f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084ce:	1d3a      	adds	r2, r7, #4
 80084d0:	f107 0310 	add.w	r3, r7, #16
 80084d4:	4611      	mov	r1, r2
 80084d6:	4618      	mov	r0, r3
 80084d8:	f001 f83a 	bl	8009550 <xTaskCheckForTimeOut>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d123      	bne.n	800852a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084e4:	f000 f916 	bl	8008714 <prvIsQueueEmpty>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d017      	beq.n	800851e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80084ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f0:	3324      	adds	r3, #36	; 0x24
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	4611      	mov	r1, r2
 80084f6:	4618      	mov	r0, r3
 80084f8:	f000 feca 	bl	8009290 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80084fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084fe:	f000 f8b7 	bl	8008670 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008502:	f000 fcd7 	bl	8008eb4 <xTaskResumeAll>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d189      	bne.n	8008420 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800850c:	4b0f      	ldr	r3, [pc, #60]	; (800854c <xQueueReceive+0x1b4>)
 800850e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	f3bf 8f4f 	dsb	sy
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	e780      	b.n	8008420 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800851e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008520:	f000 f8a6 	bl	8008670 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008524:	f000 fcc6 	bl	8008eb4 <xTaskResumeAll>
 8008528:	e77a      	b.n	8008420 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800852a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800852c:	f000 f8a0 	bl	8008670 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008530:	f000 fcc0 	bl	8008eb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008536:	f000 f8ed 	bl	8008714 <prvIsQueueEmpty>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	f43f af6f 	beq.w	8008420 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008542:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008544:	4618      	mov	r0, r3
 8008546:	3730      	adds	r7, #48	; 0x30
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	e000ed04 	.word	0xe000ed04

08008550 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800855c:	2300      	movs	r3, #0
 800855e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008564:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10d      	bne.n	800858a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d14d      	bne.n	8008612 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	4618      	mov	r0, r3
 800857c:	f001 f94a 	bl	8009814 <xTaskPriorityDisinherit>
 8008580:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	605a      	str	r2, [r3, #4]
 8008588:	e043      	b.n	8008612 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d119      	bne.n	80085c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6898      	ldr	r0, [r3, #8]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008598:	461a      	mov	r2, r3
 800859a:	68b9      	ldr	r1, [r7, #8]
 800859c:	f002 f96e 	bl	800a87c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	689a      	ldr	r2, [r3, #8]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a8:	441a      	add	r2, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	689a      	ldr	r2, [r3, #8]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d32b      	bcc.n	8008612 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	609a      	str	r2, [r3, #8]
 80085c2:	e026      	b.n	8008612 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	68d8      	ldr	r0, [r3, #12]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085cc:	461a      	mov	r2, r3
 80085ce:	68b9      	ldr	r1, [r7, #8]
 80085d0:	f002 f954 	bl	800a87c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	68da      	ldr	r2, [r3, #12]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085dc:	425b      	negs	r3, r3
 80085de:	441a      	add	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	68da      	ldr	r2, [r3, #12]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d207      	bcs.n	8008600 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	685a      	ldr	r2, [r3, #4]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f8:	425b      	negs	r3, r3
 80085fa:	441a      	add	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2b02      	cmp	r3, #2
 8008604:	d105      	bne.n	8008612 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d002      	beq.n	8008612 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	3b01      	subs	r3, #1
 8008610:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	1c5a      	adds	r2, r3, #1
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800861a:	697b      	ldr	r3, [r7, #20]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3718      	adds	r7, #24
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008632:	2b00      	cmp	r3, #0
 8008634:	d018      	beq.n	8008668 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	68da      	ldr	r2, [r3, #12]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863e:	441a      	add	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	68da      	ldr	r2, [r3, #12]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	429a      	cmp	r2, r3
 800864e:	d303      	bcc.n	8008658 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68d9      	ldr	r1, [r3, #12]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008660:	461a      	mov	r2, r3
 8008662:	6838      	ldr	r0, [r7, #0]
 8008664:	f002 f90a 	bl	800a87c <memcpy>
	}
}
 8008668:	bf00      	nop
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008678:	f001 fe0e 	bl	800a298 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008682:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008684:	e011      	b.n	80086aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868a:	2b00      	cmp	r3, #0
 800868c:	d012      	beq.n	80086b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	3324      	adds	r3, #36	; 0x24
 8008692:	4618      	mov	r0, r3
 8008694:	f000 fe84 	bl	80093a0 <xTaskRemoveFromEventList>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800869e:	f000 ffb7 	bl	8009610 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80086a2:	7bfb      	ldrb	r3, [r7, #15]
 80086a4:	3b01      	subs	r3, #1
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80086aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	dce9      	bgt.n	8008686 <prvUnlockQueue+0x16>
 80086b2:	e000      	b.n	80086b6 <prvUnlockQueue+0x46>
					break;
 80086b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	22ff      	movs	r2, #255	; 0xff
 80086ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80086be:	f001 fe19 	bl	800a2f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80086c2:	f001 fde9 	bl	800a298 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086ce:	e011      	b.n	80086f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d012      	beq.n	80086fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	3310      	adds	r3, #16
 80086dc:	4618      	mov	r0, r3
 80086de:	f000 fe5f 	bl	80093a0 <xTaskRemoveFromEventList>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d001      	beq.n	80086ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80086e8:	f000 ff92 	bl	8009610 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80086ec:	7bbb      	ldrb	r3, [r7, #14]
 80086ee:	3b01      	subs	r3, #1
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	dce9      	bgt.n	80086d0 <prvUnlockQueue+0x60>
 80086fc:	e000      	b.n	8008700 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80086fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	22ff      	movs	r2, #255	; 0xff
 8008704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008708:	f001 fdf4 	bl	800a2f4 <vPortExitCritical>
}
 800870c:	bf00      	nop
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800871c:	f001 fdbc 	bl	800a298 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008724:	2b00      	cmp	r3, #0
 8008726:	d102      	bne.n	800872e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008728:	2301      	movs	r3, #1
 800872a:	60fb      	str	r3, [r7, #12]
 800872c:	e001      	b.n	8008732 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800872e:	2300      	movs	r3, #0
 8008730:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008732:	f001 fddf 	bl	800a2f4 <vPortExitCritical>

	return xReturn;
 8008736:	68fb      	ldr	r3, [r7, #12]
}
 8008738:	4618      	mov	r0, r3
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008748:	f001 fda6 	bl	800a298 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008754:	429a      	cmp	r2, r3
 8008756:	d102      	bne.n	800875e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008758:	2301      	movs	r3, #1
 800875a:	60fb      	str	r3, [r7, #12]
 800875c:	e001      	b.n	8008762 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800875e:	2300      	movs	r3, #0
 8008760:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008762:	f001 fdc7 	bl	800a2f4 <vPortExitCritical>

	return xReturn;
 8008766:	68fb      	ldr	r3, [r7, #12]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800877a:	2300      	movs	r3, #0
 800877c:	60fb      	str	r3, [r7, #12]
 800877e:	e014      	b.n	80087aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008780:	4a0e      	ldr	r2, [pc, #56]	; (80087bc <vQueueAddToRegistry+0x4c>)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10b      	bne.n	80087a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800878c:	490b      	ldr	r1, [pc, #44]	; (80087bc <vQueueAddToRegistry+0x4c>)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	683a      	ldr	r2, [r7, #0]
 8008792:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008796:	4a09      	ldr	r2, [pc, #36]	; (80087bc <vQueueAddToRegistry+0x4c>)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	00db      	lsls	r3, r3, #3
 800879c:	4413      	add	r3, r2
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80087a2:	e005      	b.n	80087b0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	3301      	adds	r3, #1
 80087a8:	60fb      	str	r3, [r7, #12]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2b07      	cmp	r3, #7
 80087ae:	d9e7      	bls.n	8008780 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80087b0:	bf00      	nop
 80087b2:	3714      	adds	r7, #20
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bc80      	pop	{r7}
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	20003860 	.word	0x20003860

080087c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80087d0:	f001 fd62 	bl	800a298 <vPortEnterCritical>
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087da:	b25b      	sxtb	r3, r3
 80087dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e0:	d103      	bne.n	80087ea <vQueueWaitForMessageRestricted+0x2a>
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087f0:	b25b      	sxtb	r3, r3
 80087f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f6:	d103      	bne.n	8008800 <vQueueWaitForMessageRestricted+0x40>
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008800:	f001 fd78 	bl	800a2f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008808:	2b00      	cmp	r3, #0
 800880a:	d106      	bne.n	800881a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	3324      	adds	r3, #36	; 0x24
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	68b9      	ldr	r1, [r7, #8]
 8008814:	4618      	mov	r0, r3
 8008816:	f000 fd99 	bl	800934c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800881a:	6978      	ldr	r0, [r7, #20]
 800881c:	f7ff ff28 	bl	8008670 <prvUnlockQueue>
	}
 8008820:	bf00      	nop
 8008822:	3718      	adds	r7, #24
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008828:	b580      	push	{r7, lr}
 800882a:	b08e      	sub	sp, #56	; 0x38
 800882c:	af04      	add	r7, sp, #16
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
 8008834:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008838:	2b00      	cmp	r3, #0
 800883a:	d109      	bne.n	8008850 <xTaskCreateStatic+0x28>
 800883c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	623b      	str	r3, [r7, #32]
 800884e:	e7fe      	b.n	800884e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008852:	2b00      	cmp	r3, #0
 8008854:	d109      	bne.n	800886a <xTaskCreateStatic+0x42>
 8008856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885a:	f383 8811 	msr	BASEPRI, r3
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	61fb      	str	r3, [r7, #28]
 8008868:	e7fe      	b.n	8008868 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800886a:	235c      	movs	r3, #92	; 0x5c
 800886c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	2b5c      	cmp	r3, #92	; 0x5c
 8008872:	d009      	beq.n	8008888 <xTaskCreateStatic+0x60>
 8008874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	61bb      	str	r3, [r7, #24]
 8008886:	e7fe      	b.n	8008886 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888a:	2b00      	cmp	r3, #0
 800888c:	d01e      	beq.n	80088cc <xTaskCreateStatic+0xa4>
 800888e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008890:	2b00      	cmp	r3, #0
 8008892:	d01b      	beq.n	80088cc <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008896:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800889c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800889e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a0:	2202      	movs	r2, #2
 80088a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80088a6:	2300      	movs	r3, #0
 80088a8:	9303      	str	r3, [sp, #12]
 80088aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ac:	9302      	str	r3, [sp, #8]
 80088ae:	f107 0314 	add.w	r3, r7, #20
 80088b2:	9301      	str	r3, [sp, #4]
 80088b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b6:	9300      	str	r3, [sp, #0]
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	68b9      	ldr	r1, [r7, #8]
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f000 f850 	bl	8008964 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088c6:	f000 f8d3 	bl	8008a70 <prvAddNewTaskToReadyList>
 80088ca:	e001      	b.n	80088d0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80088cc:	2300      	movs	r3, #0
 80088ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80088d0:	697b      	ldr	r3, [r7, #20]
	}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3728      	adds	r7, #40	; 0x28
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b08c      	sub	sp, #48	; 0x30
 80088de:	af04      	add	r7, sp, #16
 80088e0:	60f8      	str	r0, [r7, #12]
 80088e2:	60b9      	str	r1, [r7, #8]
 80088e4:	603b      	str	r3, [r7, #0]
 80088e6:	4613      	mov	r3, r2
 80088e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088ea:	88fb      	ldrh	r3, [r7, #6]
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	4618      	mov	r0, r3
 80088f0:	f001 fdc8 	bl	800a484 <pvPortMalloc>
 80088f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00e      	beq.n	800891a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80088fc:	205c      	movs	r0, #92	; 0x5c
 80088fe:	f001 fdc1 	bl	800a484 <pvPortMalloc>
 8008902:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d003      	beq.n	8008912 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	697a      	ldr	r2, [r7, #20]
 800890e:	631a      	str	r2, [r3, #48]	; 0x30
 8008910:	e005      	b.n	800891e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008912:	6978      	ldr	r0, [r7, #20]
 8008914:	f001 fe7c 	bl	800a610 <vPortFree>
 8008918:	e001      	b.n	800891e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800891a:	2300      	movs	r3, #0
 800891c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d017      	beq.n	8008954 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	2200      	movs	r2, #0
 8008928:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800892c:	88fa      	ldrh	r2, [r7, #6]
 800892e:	2300      	movs	r3, #0
 8008930:	9303      	str	r3, [sp, #12]
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	9302      	str	r3, [sp, #8]
 8008936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008938:	9301      	str	r3, [sp, #4]
 800893a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	68b9      	ldr	r1, [r7, #8]
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f000 f80e 	bl	8008964 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008948:	69f8      	ldr	r0, [r7, #28]
 800894a:	f000 f891 	bl	8008a70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800894e:	2301      	movs	r3, #1
 8008950:	61bb      	str	r3, [r7, #24]
 8008952:	e002      	b.n	800895a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008954:	f04f 33ff 	mov.w	r3, #4294967295
 8008958:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800895a:	69bb      	ldr	r3, [r7, #24]
	}
 800895c:	4618      	mov	r0, r3
 800895e:	3720      	adds	r7, #32
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b088      	sub	sp, #32
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	607a      	str	r2, [r7, #4]
 8008970:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008974:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	461a      	mov	r2, r3
 800897c:	21a5      	movs	r1, #165	; 0xa5
 800897e:	f001 ff88 	bl	800a892 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800898c:	3b01      	subs	r3, #1
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4413      	add	r3, r2
 8008992:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	f023 0307 	bic.w	r3, r3, #7
 800899a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	f003 0307 	and.w	r3, r3, #7
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d009      	beq.n	80089ba <prvInitialiseNewTask+0x56>
 80089a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089aa:	f383 8811 	msr	BASEPRI, r3
 80089ae:	f3bf 8f6f 	isb	sy
 80089b2:	f3bf 8f4f 	dsb	sy
 80089b6:	617b      	str	r3, [r7, #20]
 80089b8:	e7fe      	b.n	80089b8 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089ba:	2300      	movs	r3, #0
 80089bc:	61fb      	str	r3, [r7, #28]
 80089be:	e012      	b.n	80089e6 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80089c0:	68ba      	ldr	r2, [r7, #8]
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	4413      	add	r3, r2
 80089c6:	7819      	ldrb	r1, [r3, #0]
 80089c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	4413      	add	r3, r2
 80089ce:	3334      	adds	r3, #52	; 0x34
 80089d0:	460a      	mov	r2, r1
 80089d2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	4413      	add	r3, r2
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d006      	beq.n	80089ee <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	3301      	adds	r3, #1
 80089e4:	61fb      	str	r3, [r7, #28]
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	2b0f      	cmp	r3, #15
 80089ea:	d9e9      	bls.n	80089c0 <prvInitialiseNewTask+0x5c>
 80089ec:	e000      	b.n	80089f0 <prvInitialiseNewTask+0x8c>
		{
			break;
 80089ee:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80089f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80089f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fa:	2b37      	cmp	r3, #55	; 0x37
 80089fc:	d901      	bls.n	8008a02 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80089fe:	2337      	movs	r3, #55	; 0x37
 8008a00:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a06:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a0c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a10:	2200      	movs	r2, #0
 8008a12:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a16:	3304      	adds	r3, #4
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7ff f964 	bl	8007ce6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a20:	3318      	adds	r3, #24
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7ff f95f 	bl	8007ce6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a2c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a36:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a3c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a40:	2200      	movs	r2, #0
 8008a42:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a4c:	683a      	ldr	r2, [r7, #0]
 8008a4e:	68f9      	ldr	r1, [r7, #12]
 8008a50:	69b8      	ldr	r0, [r7, #24]
 8008a52:	f001 fb35 	bl	800a0c0 <pxPortInitialiseStack>
 8008a56:	4602      	mov	r2, r0
 8008a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d002      	beq.n	8008a68 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a68:	bf00      	nop
 8008a6a:	3720      	adds	r7, #32
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a78:	f001 fc0e 	bl	800a298 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a7c:	4b2d      	ldr	r3, [pc, #180]	; (8008b34 <prvAddNewTaskToReadyList+0xc4>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	3301      	adds	r3, #1
 8008a82:	4a2c      	ldr	r2, [pc, #176]	; (8008b34 <prvAddNewTaskToReadyList+0xc4>)
 8008a84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a86:	4b2c      	ldr	r3, [pc, #176]	; (8008b38 <prvAddNewTaskToReadyList+0xc8>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d109      	bne.n	8008aa2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a8e:	4a2a      	ldr	r2, [pc, #168]	; (8008b38 <prvAddNewTaskToReadyList+0xc8>)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a94:	4b27      	ldr	r3, [pc, #156]	; (8008b34 <prvAddNewTaskToReadyList+0xc4>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d110      	bne.n	8008abe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a9c:	f000 fdde 	bl	800965c <prvInitialiseTaskLists>
 8008aa0:	e00d      	b.n	8008abe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008aa2:	4b26      	ldr	r3, [pc, #152]	; (8008b3c <prvAddNewTaskToReadyList+0xcc>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d109      	bne.n	8008abe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008aaa:	4b23      	ldr	r3, [pc, #140]	; (8008b38 <prvAddNewTaskToReadyList+0xc8>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d802      	bhi.n	8008abe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ab8:	4a1f      	ldr	r2, [pc, #124]	; (8008b38 <prvAddNewTaskToReadyList+0xc8>)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008abe:	4b20      	ldr	r3, [pc, #128]	; (8008b40 <prvAddNewTaskToReadyList+0xd0>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	4a1e      	ldr	r2, [pc, #120]	; (8008b40 <prvAddNewTaskToReadyList+0xd0>)
 8008ac6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008ac8:	4b1d      	ldr	r3, [pc, #116]	; (8008b40 <prvAddNewTaskToReadyList+0xd0>)
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad4:	4b1b      	ldr	r3, [pc, #108]	; (8008b44 <prvAddNewTaskToReadyList+0xd4>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d903      	bls.n	8008ae4 <prvAddNewTaskToReadyList+0x74>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae0:	4a18      	ldr	r2, [pc, #96]	; (8008b44 <prvAddNewTaskToReadyList+0xd4>)
 8008ae2:	6013      	str	r3, [r2, #0]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae8:	4613      	mov	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	4413      	add	r3, r2
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	4a15      	ldr	r2, [pc, #84]	; (8008b48 <prvAddNewTaskToReadyList+0xd8>)
 8008af2:	441a      	add	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	3304      	adds	r3, #4
 8008af8:	4619      	mov	r1, r3
 8008afa:	4610      	mov	r0, r2
 8008afc:	f7ff f8ff 	bl	8007cfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008b00:	f001 fbf8 	bl	800a2f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008b04:	4b0d      	ldr	r3, [pc, #52]	; (8008b3c <prvAddNewTaskToReadyList+0xcc>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00e      	beq.n	8008b2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b0c:	4b0a      	ldr	r3, [pc, #40]	; (8008b38 <prvAddNewTaskToReadyList+0xc8>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d207      	bcs.n	8008b2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b1a:	4b0c      	ldr	r3, [pc, #48]	; (8008b4c <prvAddNewTaskToReadyList+0xdc>)
 8008b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b20:	601a      	str	r2, [r3, #0]
 8008b22:	f3bf 8f4f 	dsb	sy
 8008b26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b2a:	bf00      	nop
 8008b2c:	3708      	adds	r7, #8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	20000bc0 	.word	0x20000bc0
 8008b38:	200006ec 	.word	0x200006ec
 8008b3c:	20000bcc 	.word	0x20000bcc
 8008b40:	20000bdc 	.word	0x20000bdc
 8008b44:	20000bc8 	.word	0x20000bc8
 8008b48:	200006f0 	.word	0x200006f0
 8008b4c:	e000ed04 	.word	0xe000ed04

08008b50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d016      	beq.n	8008b90 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b62:	4b13      	ldr	r3, [pc, #76]	; (8008bb0 <vTaskDelay+0x60>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d009      	beq.n	8008b7e <vTaskDelay+0x2e>
 8008b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6e:	f383 8811 	msr	BASEPRI, r3
 8008b72:	f3bf 8f6f 	isb	sy
 8008b76:	f3bf 8f4f 	dsb	sy
 8008b7a:	60bb      	str	r3, [r7, #8]
 8008b7c:	e7fe      	b.n	8008b7c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008b7e:	f000 f98b 	bl	8008e98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b82:	2100      	movs	r1, #0
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 fec9 	bl	800991c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b8a:	f000 f993 	bl	8008eb4 <xTaskResumeAll>
 8008b8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d107      	bne.n	8008ba6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008b96:	4b07      	ldr	r3, [pc, #28]	; (8008bb4 <vTaskDelay+0x64>)
 8008b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b9c:	601a      	str	r2, [r3, #0]
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ba6:	bf00      	nop
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	20000be8 	.word	0x20000be8
 8008bb4:	e000ed04 	.word	0xe000ed04

08008bb8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008bc0:	f001 fb6a 	bl	800a298 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d102      	bne.n	8008bd0 <vTaskSuspend+0x18>
 8008bca:	4b2f      	ldr	r3, [pc, #188]	; (8008c88 <vTaskSuspend+0xd0>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	e000      	b.n	8008bd2 <vTaskSuspend+0x1a>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	3304      	adds	r3, #4
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7ff f8eb 	bl	8007db4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d004      	beq.n	8008bf0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	3318      	adds	r3, #24
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7ff f8e2 	bl	8007db4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4825      	ldr	r0, [pc, #148]	; (8008c8c <vTaskSuspend+0xd4>)
 8008bf8:	f7ff f881 	bl	8007cfe <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d103      	bne.n	8008c10 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8008c10:	f001 fb70 	bl	800a2f4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8008c14:	4b1e      	ldr	r3, [pc, #120]	; (8008c90 <vTaskSuspend+0xd8>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d005      	beq.n	8008c28 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8008c1c:	f001 fb3c 	bl	800a298 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8008c20:	f000 fdb6 	bl	8009790 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8008c24:	f001 fb66 	bl	800a2f4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8008c28:	4b17      	ldr	r3, [pc, #92]	; (8008c88 <vTaskSuspend+0xd0>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d126      	bne.n	8008c80 <vTaskSuspend+0xc8>
		{
			if( xSchedulerRunning != pdFALSE )
 8008c32:	4b17      	ldr	r3, [pc, #92]	; (8008c90 <vTaskSuspend+0xd8>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d016      	beq.n	8008c68 <vTaskSuspend+0xb0>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8008c3a:	4b16      	ldr	r3, [pc, #88]	; (8008c94 <vTaskSuspend+0xdc>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d009      	beq.n	8008c56 <vTaskSuspend+0x9e>
 8008c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c46:	f383 8811 	msr	BASEPRI, r3
 8008c4a:	f3bf 8f6f 	isb	sy
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	60bb      	str	r3, [r7, #8]
 8008c54:	e7fe      	b.n	8008c54 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 8008c56:	4b10      	ldr	r3, [pc, #64]	; (8008c98 <vTaskSuspend+0xe0>)
 8008c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c5c:	601a      	str	r2, [r3, #0]
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c66:	e00b      	b.n	8008c80 <vTaskSuspend+0xc8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8008c68:	4b08      	ldr	r3, [pc, #32]	; (8008c8c <vTaskSuspend+0xd4>)
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	4b0b      	ldr	r3, [pc, #44]	; (8008c9c <vTaskSuspend+0xe4>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d103      	bne.n	8008c7c <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
 8008c74:	4b04      	ldr	r3, [pc, #16]	; (8008c88 <vTaskSuspend+0xd0>)
 8008c76:	2200      	movs	r2, #0
 8008c78:	601a      	str	r2, [r3, #0]
	}
 8008c7a:	e001      	b.n	8008c80 <vTaskSuspend+0xc8>
					vTaskSwitchContext();
 8008c7c:	f000 fa9c 	bl	80091b8 <vTaskSwitchContext>
	}
 8008c80:	bf00      	nop
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	200006ec 	.word	0x200006ec
 8008c8c:	20000bac 	.word	0x20000bac
 8008c90:	20000bcc 	.word	0x20000bcc
 8008c94:	20000be8 	.word	0x20000be8
 8008c98:	e000ed04 	.word	0xe000ed04
 8008c9c:	20000bc0 	.word	0x20000bc0

08008ca0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b087      	sub	sp, #28
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d109      	bne.n	8008cca <prvTaskIsTaskSuspended+0x2a>
 8008cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cba:	f383 8811 	msr	BASEPRI, r3
 8008cbe:	f3bf 8f6f 	isb	sy
 8008cc2:	f3bf 8f4f 	dsb	sy
 8008cc6:	60fb      	str	r3, [r7, #12]
 8008cc8:	e7fe      	b.n	8008cc8 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	4a0f      	ldr	r2, [pc, #60]	; (8008d0c <prvTaskIsTaskSuspended+0x6c>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d101      	bne.n	8008cd8 <prvTaskIsTaskSuspended+0x38>
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e000      	b.n	8008cda <prvTaskIsTaskSuspended+0x3a>
 8008cd8:	2300      	movs	r3, #0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00f      	beq.n	8008cfe <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce2:	4a0b      	ldr	r2, [pc, #44]	; (8008d10 <prvTaskIsTaskSuspended+0x70>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d00a      	beq.n	8008cfe <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d101      	bne.n	8008cf4 <prvTaskIsTaskSuspended+0x54>
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e000      	b.n	8008cf6 <prvTaskIsTaskSuspended+0x56>
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d001      	beq.n	8008cfe <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008cfe:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008d00:	4618      	mov	r0, r3
 8008d02:	371c      	adds	r7, #28
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bc80      	pop	{r7}
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	20000bac 	.word	0x20000bac
 8008d10:	20000b80 	.word	0x20000b80

08008d14 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d109      	bne.n	8008d3a <vTaskResume+0x26>
 8008d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2a:	f383 8811 	msr	BASEPRI, r3
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	60bb      	str	r3, [r7, #8]
 8008d38:	e7fe      	b.n	8008d38 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d03a      	beq.n	8008db6 <vTaskResume+0xa2>
 8008d40:	4b1f      	ldr	r3, [pc, #124]	; (8008dc0 <vTaskResume+0xac>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d035      	beq.n	8008db6 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8008d4a:	f001 faa5 	bl	800a298 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008d4e:	68f8      	ldr	r0, [r7, #12]
 8008d50:	f7ff ffa6 	bl	8008ca0 <prvTaskIsTaskSuspended>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d02b      	beq.n	8008db2 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7ff f828 	bl	8007db4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d68:	4b16      	ldr	r3, [pc, #88]	; (8008dc4 <vTaskResume+0xb0>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d903      	bls.n	8008d78 <vTaskResume+0x64>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d74:	4a13      	ldr	r2, [pc, #76]	; (8008dc4 <vTaskResume+0xb0>)
 8008d76:	6013      	str	r3, [r2, #0]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	4413      	add	r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	4a10      	ldr	r2, [pc, #64]	; (8008dc8 <vTaskResume+0xb4>)
 8008d86:	441a      	add	r2, r3
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	3304      	adds	r3, #4
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	4610      	mov	r0, r2
 8008d90:	f7fe ffb5 	bl	8007cfe <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d98:	4b09      	ldr	r3, [pc, #36]	; (8008dc0 <vTaskResume+0xac>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d307      	bcc.n	8008db2 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8008da2:	4b0a      	ldr	r3, [pc, #40]	; (8008dcc <vTaskResume+0xb8>)
 8008da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008da8:	601a      	str	r2, [r3, #0]
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8008db2:	f001 fa9f 	bl	800a2f4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008db6:	bf00      	nop
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	200006ec 	.word	0x200006ec
 8008dc4:	20000bc8 	.word	0x20000bc8
 8008dc8:	200006f0 	.word	0x200006f0
 8008dcc:	e000ed04 	.word	0xe000ed04

08008dd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b08a      	sub	sp, #40	; 0x28
 8008dd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008dde:	463a      	mov	r2, r7
 8008de0:	1d39      	adds	r1, r7, #4
 8008de2:	f107 0308 	add.w	r3, r7, #8
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fe fd26 	bl	8007838 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008dec:	6839      	ldr	r1, [r7, #0]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	68ba      	ldr	r2, [r7, #8]
 8008df2:	9202      	str	r2, [sp, #8]
 8008df4:	9301      	str	r3, [sp, #4]
 8008df6:	2300      	movs	r3, #0
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	460a      	mov	r2, r1
 8008dfe:	4920      	ldr	r1, [pc, #128]	; (8008e80 <vTaskStartScheduler+0xb0>)
 8008e00:	4820      	ldr	r0, [pc, #128]	; (8008e84 <vTaskStartScheduler+0xb4>)
 8008e02:	f7ff fd11 	bl	8008828 <xTaskCreateStatic>
 8008e06:	4602      	mov	r2, r0
 8008e08:	4b1f      	ldr	r3, [pc, #124]	; (8008e88 <vTaskStartScheduler+0xb8>)
 8008e0a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e0c:	4b1e      	ldr	r3, [pc, #120]	; (8008e88 <vTaskStartScheduler+0xb8>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d002      	beq.n	8008e1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008e14:	2301      	movs	r3, #1
 8008e16:	617b      	str	r3, [r7, #20]
 8008e18:	e001      	b.n	8008e1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d102      	bne.n	8008e2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008e24:	f000 fdce 	bl	80099c4 <xTimerCreateTimerTask>
 8008e28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d115      	bne.n	8008e5c <vTaskStartScheduler+0x8c>
 8008e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e34:	f383 8811 	msr	BASEPRI, r3
 8008e38:	f3bf 8f6f 	isb	sy
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008e42:	4b12      	ldr	r3, [pc, #72]	; (8008e8c <vTaskStartScheduler+0xbc>)
 8008e44:	f04f 32ff 	mov.w	r2, #4294967295
 8008e48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e4a:	4b11      	ldr	r3, [pc, #68]	; (8008e90 <vTaskStartScheduler+0xc0>)
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008e50:	4b10      	ldr	r3, [pc, #64]	; (8008e94 <vTaskStartScheduler+0xc4>)
 8008e52:	2200      	movs	r2, #0
 8008e54:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e56:	f001 f9af 	bl	800a1b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e5a:	e00d      	b.n	8008e78 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e62:	d109      	bne.n	8008e78 <vTaskStartScheduler+0xa8>
 8008e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e68:	f383 8811 	msr	BASEPRI, r3
 8008e6c:	f3bf 8f6f 	isb	sy
 8008e70:	f3bf 8f4f 	dsb	sy
 8008e74:	60fb      	str	r3, [r7, #12]
 8008e76:	e7fe      	b.n	8008e76 <vTaskStartScheduler+0xa6>
}
 8008e78:	bf00      	nop
 8008e7a:	3718      	adds	r7, #24
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	0800ab68 	.word	0x0800ab68
 8008e84:	08009629 	.word	0x08009629
 8008e88:	20000be4 	.word	0x20000be4
 8008e8c:	20000be0 	.word	0x20000be0
 8008e90:	20000bcc 	.word	0x20000bcc
 8008e94:	20000bc4 	.word	0x20000bc4

08008e98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e98:	b480      	push	{r7}
 8008e9a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008e9c:	4b04      	ldr	r3, [pc, #16]	; (8008eb0 <vTaskSuspendAll+0x18>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	4a03      	ldr	r2, [pc, #12]	; (8008eb0 <vTaskSuspendAll+0x18>)
 8008ea4:	6013      	str	r3, [r2, #0]
}
 8008ea6:	bf00      	nop
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bc80      	pop	{r7}
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	20000be8 	.word	0x20000be8

08008eb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008ec2:	4b41      	ldr	r3, [pc, #260]	; (8008fc8 <xTaskResumeAll+0x114>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d109      	bne.n	8008ede <xTaskResumeAll+0x2a>
 8008eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ece:	f383 8811 	msr	BASEPRI, r3
 8008ed2:	f3bf 8f6f 	isb	sy
 8008ed6:	f3bf 8f4f 	dsb	sy
 8008eda:	603b      	str	r3, [r7, #0]
 8008edc:	e7fe      	b.n	8008edc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ede:	f001 f9db 	bl	800a298 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ee2:	4b39      	ldr	r3, [pc, #228]	; (8008fc8 <xTaskResumeAll+0x114>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	4a37      	ldr	r2, [pc, #220]	; (8008fc8 <xTaskResumeAll+0x114>)
 8008eea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008eec:	4b36      	ldr	r3, [pc, #216]	; (8008fc8 <xTaskResumeAll+0x114>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d162      	bne.n	8008fba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ef4:	4b35      	ldr	r3, [pc, #212]	; (8008fcc <xTaskResumeAll+0x118>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d05e      	beq.n	8008fba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008efc:	e02f      	b.n	8008f5e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008efe:	4b34      	ldr	r3, [pc, #208]	; (8008fd0 <xTaskResumeAll+0x11c>)
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	3318      	adds	r3, #24
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fe ff52 	bl	8007db4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	3304      	adds	r3, #4
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7fe ff4d 	bl	8007db4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f1e:	4b2d      	ldr	r3, [pc, #180]	; (8008fd4 <xTaskResumeAll+0x120>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d903      	bls.n	8008f2e <xTaskResumeAll+0x7a>
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f2a:	4a2a      	ldr	r2, [pc, #168]	; (8008fd4 <xTaskResumeAll+0x120>)
 8008f2c:	6013      	str	r3, [r2, #0]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f32:	4613      	mov	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	4413      	add	r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	4a27      	ldr	r2, [pc, #156]	; (8008fd8 <xTaskResumeAll+0x124>)
 8008f3c:	441a      	add	r2, r3
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	3304      	adds	r3, #4
 8008f42:	4619      	mov	r1, r3
 8008f44:	4610      	mov	r0, r2
 8008f46:	f7fe feda 	bl	8007cfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f4e:	4b23      	ldr	r3, [pc, #140]	; (8008fdc <xTaskResumeAll+0x128>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d302      	bcc.n	8008f5e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008f58:	4b21      	ldr	r3, [pc, #132]	; (8008fe0 <xTaskResumeAll+0x12c>)
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f5e:	4b1c      	ldr	r3, [pc, #112]	; (8008fd0 <xTaskResumeAll+0x11c>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1cb      	bne.n	8008efe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d001      	beq.n	8008f70 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f6c:	f000 fc10 	bl	8009790 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008f70:	4b1c      	ldr	r3, [pc, #112]	; (8008fe4 <xTaskResumeAll+0x130>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d010      	beq.n	8008f9e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f7c:	f000 f856 	bl	800902c <xTaskIncrementTick>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d002      	beq.n	8008f8c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008f86:	4b16      	ldr	r3, [pc, #88]	; (8008fe0 <xTaskResumeAll+0x12c>)
 8008f88:	2201      	movs	r2, #1
 8008f8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1f1      	bne.n	8008f7c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008f98:	4b12      	ldr	r3, [pc, #72]	; (8008fe4 <xTaskResumeAll+0x130>)
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f9e:	4b10      	ldr	r3, [pc, #64]	; (8008fe0 <xTaskResumeAll+0x12c>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d009      	beq.n	8008fba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008faa:	4b0f      	ldr	r3, [pc, #60]	; (8008fe8 <xTaskResumeAll+0x134>)
 8008fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fb0:	601a      	str	r2, [r3, #0]
 8008fb2:	f3bf 8f4f 	dsb	sy
 8008fb6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008fba:	f001 f99b 	bl	800a2f4 <vPortExitCritical>

	return xAlreadyYielded;
 8008fbe:	68bb      	ldr	r3, [r7, #8]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	20000be8 	.word	0x20000be8
 8008fcc:	20000bc0 	.word	0x20000bc0
 8008fd0:	20000b80 	.word	0x20000b80
 8008fd4:	20000bc8 	.word	0x20000bc8
 8008fd8:	200006f0 	.word	0x200006f0
 8008fdc:	200006ec 	.word	0x200006ec
 8008fe0:	20000bd4 	.word	0x20000bd4
 8008fe4:	20000bd0 	.word	0x20000bd0
 8008fe8:	e000ed04 	.word	0xe000ed04

08008fec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ff2:	4b04      	ldr	r3, [pc, #16]	; (8009004 <xTaskGetTickCount+0x18>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ff8:	687b      	ldr	r3, [r7, #4]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	370c      	adds	r7, #12
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bc80      	pop	{r7}
 8009002:	4770      	bx	lr
 8009004:	20000bc4 	.word	0x20000bc4

08009008 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800900e:	f001 f9fd 	bl	800a40c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009012:	2300      	movs	r3, #0
 8009014:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009016:	4b04      	ldr	r3, [pc, #16]	; (8009028 <xTaskGetTickCountFromISR+0x20>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800901c:	683b      	ldr	r3, [r7, #0]
}
 800901e:	4618      	mov	r0, r3
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	20000bc4 	.word	0x20000bc4

0800902c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b086      	sub	sp, #24
 8009030:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009032:	2300      	movs	r3, #0
 8009034:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009036:	4b55      	ldr	r3, [pc, #340]	; (800918c <xTaskIncrementTick+0x160>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	f040 8093 	bne.w	8009166 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009040:	4b53      	ldr	r3, [pc, #332]	; (8009190 <xTaskIncrementTick+0x164>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	3301      	adds	r3, #1
 8009046:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009048:	4a51      	ldr	r2, [pc, #324]	; (8009190 <xTaskIncrementTick+0x164>)
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d11f      	bne.n	8009094 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009054:	4b4f      	ldr	r3, [pc, #316]	; (8009194 <xTaskIncrementTick+0x168>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d009      	beq.n	8009072 <xTaskIncrementTick+0x46>
 800905e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009062:	f383 8811 	msr	BASEPRI, r3
 8009066:	f3bf 8f6f 	isb	sy
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	603b      	str	r3, [r7, #0]
 8009070:	e7fe      	b.n	8009070 <xTaskIncrementTick+0x44>
 8009072:	4b48      	ldr	r3, [pc, #288]	; (8009194 <xTaskIncrementTick+0x168>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	60fb      	str	r3, [r7, #12]
 8009078:	4b47      	ldr	r3, [pc, #284]	; (8009198 <xTaskIncrementTick+0x16c>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a45      	ldr	r2, [pc, #276]	; (8009194 <xTaskIncrementTick+0x168>)
 800907e:	6013      	str	r3, [r2, #0]
 8009080:	4a45      	ldr	r2, [pc, #276]	; (8009198 <xTaskIncrementTick+0x16c>)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6013      	str	r3, [r2, #0]
 8009086:	4b45      	ldr	r3, [pc, #276]	; (800919c <xTaskIncrementTick+0x170>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3301      	adds	r3, #1
 800908c:	4a43      	ldr	r2, [pc, #268]	; (800919c <xTaskIncrementTick+0x170>)
 800908e:	6013      	str	r3, [r2, #0]
 8009090:	f000 fb7e 	bl	8009790 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009094:	4b42      	ldr	r3, [pc, #264]	; (80091a0 <xTaskIncrementTick+0x174>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	693a      	ldr	r2, [r7, #16]
 800909a:	429a      	cmp	r2, r3
 800909c:	d34e      	bcc.n	800913c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800909e:	4b3d      	ldr	r3, [pc, #244]	; (8009194 <xTaskIncrementTick+0x168>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d101      	bne.n	80090ac <xTaskIncrementTick+0x80>
 80090a8:	2301      	movs	r3, #1
 80090aa:	e000      	b.n	80090ae <xTaskIncrementTick+0x82>
 80090ac:	2300      	movs	r3, #0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d004      	beq.n	80090bc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090b2:	4b3b      	ldr	r3, [pc, #236]	; (80091a0 <xTaskIncrementTick+0x174>)
 80090b4:	f04f 32ff 	mov.w	r2, #4294967295
 80090b8:	601a      	str	r2, [r3, #0]
					break;
 80090ba:	e03f      	b.n	800913c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80090bc:	4b35      	ldr	r3, [pc, #212]	; (8009194 <xTaskIncrementTick+0x168>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80090cc:	693a      	ldr	r2, [r7, #16]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d203      	bcs.n	80090dc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80090d4:	4a32      	ldr	r2, [pc, #200]	; (80091a0 <xTaskIncrementTick+0x174>)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6013      	str	r3, [r2, #0]
						break;
 80090da:	e02f      	b.n	800913c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	3304      	adds	r3, #4
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7fe fe67 	bl	8007db4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d004      	beq.n	80090f8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	3318      	adds	r3, #24
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fe fe5e 	bl	8007db4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090fc:	4b29      	ldr	r3, [pc, #164]	; (80091a4 <xTaskIncrementTick+0x178>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	429a      	cmp	r2, r3
 8009102:	d903      	bls.n	800910c <xTaskIncrementTick+0xe0>
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009108:	4a26      	ldr	r2, [pc, #152]	; (80091a4 <xTaskIncrementTick+0x178>)
 800910a:	6013      	str	r3, [r2, #0]
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009110:	4613      	mov	r3, r2
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	4413      	add	r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	4a23      	ldr	r2, [pc, #140]	; (80091a8 <xTaskIncrementTick+0x17c>)
 800911a:	441a      	add	r2, r3
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	3304      	adds	r3, #4
 8009120:	4619      	mov	r1, r3
 8009122:	4610      	mov	r0, r2
 8009124:	f7fe fdeb 	bl	8007cfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800912c:	4b1f      	ldr	r3, [pc, #124]	; (80091ac <xTaskIncrementTick+0x180>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009132:	429a      	cmp	r2, r3
 8009134:	d3b3      	bcc.n	800909e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009136:	2301      	movs	r3, #1
 8009138:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800913a:	e7b0      	b.n	800909e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800913c:	4b1b      	ldr	r3, [pc, #108]	; (80091ac <xTaskIncrementTick+0x180>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009142:	4919      	ldr	r1, [pc, #100]	; (80091a8 <xTaskIncrementTick+0x17c>)
 8009144:	4613      	mov	r3, r2
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	4413      	add	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	440b      	add	r3, r1
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d901      	bls.n	8009158 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8009154:	2301      	movs	r3, #1
 8009156:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8009158:	4b15      	ldr	r3, [pc, #84]	; (80091b0 <xTaskIncrementTick+0x184>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d109      	bne.n	8009174 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 8009160:	f7f7 ff5a 	bl	8001018 <vApplicationTickHook>
 8009164:	e006      	b.n	8009174 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009166:	4b12      	ldr	r3, [pc, #72]	; (80091b0 <xTaskIncrementTick+0x184>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3301      	adds	r3, #1
 800916c:	4a10      	ldr	r2, [pc, #64]	; (80091b0 <xTaskIncrementTick+0x184>)
 800916e:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8009170:	f7f7 ff52 	bl	8001018 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009174:	4b0f      	ldr	r3, [pc, #60]	; (80091b4 <xTaskIncrementTick+0x188>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d001      	beq.n	8009180 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 800917c:	2301      	movs	r3, #1
 800917e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009180:	697b      	ldr	r3, [r7, #20]
}
 8009182:	4618      	mov	r0, r3
 8009184:	3718      	adds	r7, #24
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	20000be8 	.word	0x20000be8
 8009190:	20000bc4 	.word	0x20000bc4
 8009194:	20000b78 	.word	0x20000b78
 8009198:	20000b7c 	.word	0x20000b7c
 800919c:	20000bd8 	.word	0x20000bd8
 80091a0:	20000be0 	.word	0x20000be0
 80091a4:	20000bc8 	.word	0x20000bc8
 80091a8:	200006f0 	.word	0x200006f0
 80091ac:	200006ec 	.word	0x200006ec
 80091b0:	20000bd0 	.word	0x20000bd0
 80091b4:	20000bd4 	.word	0x20000bd4

080091b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80091be:	4b2f      	ldr	r3, [pc, #188]	; (800927c <vTaskSwitchContext+0xc4>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d003      	beq.n	80091ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80091c6:	4b2e      	ldr	r3, [pc, #184]	; (8009280 <vTaskSwitchContext+0xc8>)
 80091c8:	2201      	movs	r2, #1
 80091ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80091cc:	e051      	b.n	8009272 <vTaskSwitchContext+0xba>
		xYieldPending = pdFALSE;
 80091ce:	4b2c      	ldr	r3, [pc, #176]	; (8009280 <vTaskSwitchContext+0xc8>)
 80091d0:	2200      	movs	r2, #0
 80091d2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80091d4:	4b2b      	ldr	r3, [pc, #172]	; (8009284 <vTaskSwitchContext+0xcc>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	4b2a      	ldr	r3, [pc, #168]	; (8009284 <vTaskSwitchContext+0xcc>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d808      	bhi.n	80091f6 <vTaskSwitchContext+0x3e>
 80091e4:	4b27      	ldr	r3, [pc, #156]	; (8009284 <vTaskSwitchContext+0xcc>)
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	4b26      	ldr	r3, [pc, #152]	; (8009284 <vTaskSwitchContext+0xcc>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	3334      	adds	r3, #52	; 0x34
 80091ee:	4619      	mov	r1, r3
 80091f0:	4610      	mov	r0, r2
 80091f2:	f7f7 ff17 	bl	8001024 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80091f6:	4b24      	ldr	r3, [pc, #144]	; (8009288 <vTaskSwitchContext+0xd0>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	60fb      	str	r3, [r7, #12]
 80091fc:	e00f      	b.n	800921e <vTaskSwitchContext+0x66>
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d109      	bne.n	8009218 <vTaskSwitchContext+0x60>
 8009204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	607b      	str	r3, [r7, #4]
 8009216:	e7fe      	b.n	8009216 <vTaskSwitchContext+0x5e>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	3b01      	subs	r3, #1
 800921c:	60fb      	str	r3, [r7, #12]
 800921e:	491b      	ldr	r1, [pc, #108]	; (800928c <vTaskSwitchContext+0xd4>)
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	4613      	mov	r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4413      	add	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	440b      	add	r3, r1
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d0e5      	beq.n	80091fe <vTaskSwitchContext+0x46>
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	4613      	mov	r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	4413      	add	r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4a13      	ldr	r2, [pc, #76]	; (800928c <vTaskSwitchContext+0xd4>)
 800923e:	4413      	add	r3, r2
 8009240:	60bb      	str	r3, [r7, #8]
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	685a      	ldr	r2, [r3, #4]
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	605a      	str	r2, [r3, #4]
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	685a      	ldr	r2, [r3, #4]
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	3308      	adds	r3, #8
 8009254:	429a      	cmp	r2, r3
 8009256:	d104      	bne.n	8009262 <vTaskSwitchContext+0xaa>
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	685a      	ldr	r2, [r3, #4]
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	605a      	str	r2, [r3, #4]
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	4a06      	ldr	r2, [pc, #24]	; (8009284 <vTaskSwitchContext+0xcc>)
 800926a:	6013      	str	r3, [r2, #0]
 800926c:	4a06      	ldr	r2, [pc, #24]	; (8009288 <vTaskSwitchContext+0xd0>)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6013      	str	r3, [r2, #0]
}
 8009272:	bf00      	nop
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	20000be8 	.word	0x20000be8
 8009280:	20000bd4 	.word	0x20000bd4
 8009284:	200006ec 	.word	0x200006ec
 8009288:	20000bc8 	.word	0x20000bc8
 800928c:	200006f0 	.word	0x200006f0

08009290 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d109      	bne.n	80092b4 <vTaskPlaceOnEventList+0x24>
 80092a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a4:	f383 8811 	msr	BASEPRI, r3
 80092a8:	f3bf 8f6f 	isb	sy
 80092ac:	f3bf 8f4f 	dsb	sy
 80092b0:	60fb      	str	r3, [r7, #12]
 80092b2:	e7fe      	b.n	80092b2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092b4:	4b07      	ldr	r3, [pc, #28]	; (80092d4 <vTaskPlaceOnEventList+0x44>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	3318      	adds	r3, #24
 80092ba:	4619      	mov	r1, r3
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f7fe fd41 	bl	8007d44 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80092c2:	2101      	movs	r1, #1
 80092c4:	6838      	ldr	r0, [r7, #0]
 80092c6:	f000 fb29 	bl	800991c <prvAddCurrentTaskToDelayedList>
}
 80092ca:	bf00      	nop
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	200006ec 	.word	0x200006ec

080092d8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b086      	sub	sp, #24
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d109      	bne.n	80092fe <vTaskPlaceOnUnorderedEventList+0x26>
 80092ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ee:	f383 8811 	msr	BASEPRI, r3
 80092f2:	f3bf 8f6f 	isb	sy
 80092f6:	f3bf 8f4f 	dsb	sy
 80092fa:	617b      	str	r3, [r7, #20]
 80092fc:	e7fe      	b.n	80092fc <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80092fe:	4b11      	ldr	r3, [pc, #68]	; (8009344 <vTaskPlaceOnUnorderedEventList+0x6c>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d109      	bne.n	800931a <vTaskPlaceOnUnorderedEventList+0x42>
 8009306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930a:	f383 8811 	msr	BASEPRI, r3
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	613b      	str	r3, [r7, #16]
 8009318:	e7fe      	b.n	8009318 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800931a:	4b0b      	ldr	r3, [pc, #44]	; (8009348 <vTaskPlaceOnUnorderedEventList+0x70>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009324:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009326:	4b08      	ldr	r3, [pc, #32]	; (8009348 <vTaskPlaceOnUnorderedEventList+0x70>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	3318      	adds	r3, #24
 800932c:	4619      	mov	r1, r3
 800932e:	68f8      	ldr	r0, [r7, #12]
 8009330:	f7fe fce5 	bl	8007cfe <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009334:	2101      	movs	r1, #1
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 faf0 	bl	800991c <prvAddCurrentTaskToDelayedList>
}
 800933c:	bf00      	nop
 800933e:	3718      	adds	r7, #24
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	20000be8 	.word	0x20000be8
 8009348:	200006ec 	.word	0x200006ec

0800934c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800934c:	b580      	push	{r7, lr}
 800934e:	b086      	sub	sp, #24
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d109      	bne.n	8009372 <vTaskPlaceOnEventListRestricted+0x26>
 800935e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009362:	f383 8811 	msr	BASEPRI, r3
 8009366:	f3bf 8f6f 	isb	sy
 800936a:	f3bf 8f4f 	dsb	sy
 800936e:	617b      	str	r3, [r7, #20]
 8009370:	e7fe      	b.n	8009370 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009372:	4b0a      	ldr	r3, [pc, #40]	; (800939c <vTaskPlaceOnEventListRestricted+0x50>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	3318      	adds	r3, #24
 8009378:	4619      	mov	r1, r3
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f7fe fcbf 	bl	8007cfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d002      	beq.n	800938c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8009386:	f04f 33ff 	mov.w	r3, #4294967295
 800938a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800938c:	6879      	ldr	r1, [r7, #4]
 800938e:	68b8      	ldr	r0, [r7, #8]
 8009390:	f000 fac4 	bl	800991c <prvAddCurrentTaskToDelayedList>
	}
 8009394:	bf00      	nop
 8009396:	3718      	adds	r7, #24
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	200006ec 	.word	0x200006ec

080093a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b086      	sub	sp, #24
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d109      	bne.n	80093ca <xTaskRemoveFromEventList+0x2a>
 80093b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ba:	f383 8811 	msr	BASEPRI, r3
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	60fb      	str	r3, [r7, #12]
 80093c8:	e7fe      	b.n	80093c8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	3318      	adds	r3, #24
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fe fcf0 	bl	8007db4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093d4:	4b1d      	ldr	r3, [pc, #116]	; (800944c <xTaskRemoveFromEventList+0xac>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d11d      	bne.n	8009418 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	3304      	adds	r3, #4
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7fe fce7 	bl	8007db4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ea:	4b19      	ldr	r3, [pc, #100]	; (8009450 <xTaskRemoveFromEventList+0xb0>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d903      	bls.n	80093fa <xTaskRemoveFromEventList+0x5a>
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f6:	4a16      	ldr	r2, [pc, #88]	; (8009450 <xTaskRemoveFromEventList+0xb0>)
 80093f8:	6013      	str	r3, [r2, #0]
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093fe:	4613      	mov	r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4413      	add	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4a13      	ldr	r2, [pc, #76]	; (8009454 <xTaskRemoveFromEventList+0xb4>)
 8009408:	441a      	add	r2, r3
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	3304      	adds	r3, #4
 800940e:	4619      	mov	r1, r3
 8009410:	4610      	mov	r0, r2
 8009412:	f7fe fc74 	bl	8007cfe <vListInsertEnd>
 8009416:	e005      	b.n	8009424 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	3318      	adds	r3, #24
 800941c:	4619      	mov	r1, r3
 800941e:	480e      	ldr	r0, [pc, #56]	; (8009458 <xTaskRemoveFromEventList+0xb8>)
 8009420:	f7fe fc6d 	bl	8007cfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009428:	4b0c      	ldr	r3, [pc, #48]	; (800945c <xTaskRemoveFromEventList+0xbc>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942e:	429a      	cmp	r2, r3
 8009430:	d905      	bls.n	800943e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009432:	2301      	movs	r3, #1
 8009434:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009436:	4b0a      	ldr	r3, [pc, #40]	; (8009460 <xTaskRemoveFromEventList+0xc0>)
 8009438:	2201      	movs	r2, #1
 800943a:	601a      	str	r2, [r3, #0]
 800943c:	e001      	b.n	8009442 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800943e:	2300      	movs	r3, #0
 8009440:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009442:	697b      	ldr	r3, [r7, #20]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3718      	adds	r7, #24
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	20000be8 	.word	0x20000be8
 8009450:	20000bc8 	.word	0x20000bc8
 8009454:	200006f0 	.word	0x200006f0
 8009458:	20000b80 	.word	0x20000b80
 800945c:	200006ec 	.word	0x200006ec
 8009460:	20000bd4 	.word	0x20000bd4

08009464 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b086      	sub	sp, #24
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800946e:	4b28      	ldr	r3, [pc, #160]	; (8009510 <vTaskRemoveFromUnorderedEventList+0xac>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d109      	bne.n	800948a <vTaskRemoveFromUnorderedEventList+0x26>
 8009476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947a:	f383 8811 	msr	BASEPRI, r3
 800947e:	f3bf 8f6f 	isb	sy
 8009482:	f3bf 8f4f 	dsb	sy
 8009486:	613b      	str	r3, [r7, #16]
 8009488:	e7fe      	b.n	8009488 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d109      	bne.n	80094b4 <vTaskRemoveFromUnorderedEventList+0x50>
 80094a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	60fb      	str	r3, [r7, #12]
 80094b2:	e7fe      	b.n	80094b2 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7fe fc7d 	bl	8007db4 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	3304      	adds	r3, #4
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fe fc78 	bl	8007db4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c8:	4b12      	ldr	r3, [pc, #72]	; (8009514 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d903      	bls.n	80094d8 <vTaskRemoveFromUnorderedEventList+0x74>
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d4:	4a0f      	ldr	r2, [pc, #60]	; (8009514 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80094d6:	6013      	str	r3, [r2, #0]
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094dc:	4613      	mov	r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	4413      	add	r3, r2
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	4a0c      	ldr	r2, [pc, #48]	; (8009518 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80094e6:	441a      	add	r2, r3
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	3304      	adds	r3, #4
 80094ec:	4619      	mov	r1, r3
 80094ee:	4610      	mov	r0, r2
 80094f0:	f7fe fc05 	bl	8007cfe <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f8:	4b08      	ldr	r3, [pc, #32]	; (800951c <vTaskRemoveFromUnorderedEventList+0xb8>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fe:	429a      	cmp	r2, r3
 8009500:	d902      	bls.n	8009508 <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009502:	4b07      	ldr	r3, [pc, #28]	; (8009520 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8009504:	2201      	movs	r2, #1
 8009506:	601a      	str	r2, [r3, #0]
	}
}
 8009508:	bf00      	nop
 800950a:	3718      	adds	r7, #24
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	20000be8 	.word	0x20000be8
 8009514:	20000bc8 	.word	0x20000bc8
 8009518:	200006f0 	.word	0x200006f0
 800951c:	200006ec 	.word	0x200006ec
 8009520:	20000bd4 	.word	0x20000bd4

08009524 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800952c:	4b06      	ldr	r3, [pc, #24]	; (8009548 <vTaskInternalSetTimeOutState+0x24>)
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009534:	4b05      	ldr	r3, [pc, #20]	; (800954c <vTaskInternalSetTimeOutState+0x28>)
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	605a      	str	r2, [r3, #4]
}
 800953c:	bf00      	nop
 800953e:	370c      	adds	r7, #12
 8009540:	46bd      	mov	sp, r7
 8009542:	bc80      	pop	{r7}
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop
 8009548:	20000bd8 	.word	0x20000bd8
 800954c:	20000bc4 	.word	0x20000bc4

08009550 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b088      	sub	sp, #32
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d109      	bne.n	8009574 <xTaskCheckForTimeOut+0x24>
 8009560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	613b      	str	r3, [r7, #16]
 8009572:	e7fe      	b.n	8009572 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d109      	bne.n	800958e <xTaskCheckForTimeOut+0x3e>
 800957a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957e:	f383 8811 	msr	BASEPRI, r3
 8009582:	f3bf 8f6f 	isb	sy
 8009586:	f3bf 8f4f 	dsb	sy
 800958a:	60fb      	str	r3, [r7, #12]
 800958c:	e7fe      	b.n	800958c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800958e:	f000 fe83 	bl	800a298 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009592:	4b1d      	ldr	r3, [pc, #116]	; (8009608 <xTaskCheckForTimeOut+0xb8>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	69ba      	ldr	r2, [r7, #24]
 800959e:	1ad3      	subs	r3, r2, r3
 80095a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095aa:	d102      	bne.n	80095b2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80095ac:	2300      	movs	r3, #0
 80095ae:	61fb      	str	r3, [r7, #28]
 80095b0:	e023      	b.n	80095fa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	4b15      	ldr	r3, [pc, #84]	; (800960c <xTaskCheckForTimeOut+0xbc>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d007      	beq.n	80095ce <xTaskCheckForTimeOut+0x7e>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	69ba      	ldr	r2, [r7, #24]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d302      	bcc.n	80095ce <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80095c8:	2301      	movs	r3, #1
 80095ca:	61fb      	str	r3, [r7, #28]
 80095cc:	e015      	b.n	80095fa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	697a      	ldr	r2, [r7, #20]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d20b      	bcs.n	80095f0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	1ad2      	subs	r2, r2, r3
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f7ff ff9d 	bl	8009524 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80095ea:	2300      	movs	r3, #0
 80095ec:	61fb      	str	r3, [r7, #28]
 80095ee:	e004      	b.n	80095fa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	2200      	movs	r2, #0
 80095f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80095f6:	2301      	movs	r3, #1
 80095f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80095fa:	f000 fe7b 	bl	800a2f4 <vPortExitCritical>

	return xReturn;
 80095fe:	69fb      	ldr	r3, [r7, #28]
}
 8009600:	4618      	mov	r0, r3
 8009602:	3720      	adds	r7, #32
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}
 8009608:	20000bc4 	.word	0x20000bc4
 800960c:	20000bd8 	.word	0x20000bd8

08009610 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009610:	b480      	push	{r7}
 8009612:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009614:	4b03      	ldr	r3, [pc, #12]	; (8009624 <vTaskMissedYield+0x14>)
 8009616:	2201      	movs	r2, #1
 8009618:	601a      	str	r2, [r3, #0]
}
 800961a:	bf00      	nop
 800961c:	46bd      	mov	sp, r7
 800961e:	bc80      	pop	{r7}
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	20000bd4 	.word	0x20000bd4

08009628 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009630:	f000 f854 	bl	80096dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009634:	4b07      	ldr	r3, [pc, #28]	; (8009654 <prvIdleTask+0x2c>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2b01      	cmp	r3, #1
 800963a:	d907      	bls.n	800964c <prvIdleTask+0x24>
			{
				taskYIELD();
 800963c:	4b06      	ldr	r3, [pc, #24]	; (8009658 <prvIdleTask+0x30>)
 800963e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009642:	601a      	str	r2, [r3, #0]
 8009644:	f3bf 8f4f 	dsb	sy
 8009648:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800964c:	f7f7 fcde 	bl	800100c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009650:	e7ee      	b.n	8009630 <prvIdleTask+0x8>
 8009652:	bf00      	nop
 8009654:	200006f0 	.word	0x200006f0
 8009658:	e000ed04 	.word	0xe000ed04

0800965c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009662:	2300      	movs	r3, #0
 8009664:	607b      	str	r3, [r7, #4]
 8009666:	e00c      	b.n	8009682 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	4613      	mov	r3, r2
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	4413      	add	r3, r2
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	4a12      	ldr	r2, [pc, #72]	; (80096bc <prvInitialiseTaskLists+0x60>)
 8009674:	4413      	add	r3, r2
 8009676:	4618      	mov	r0, r3
 8009678:	f7fe fb16 	bl	8007ca8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	3301      	adds	r3, #1
 8009680:	607b      	str	r3, [r7, #4]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2b37      	cmp	r3, #55	; 0x37
 8009686:	d9ef      	bls.n	8009668 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009688:	480d      	ldr	r0, [pc, #52]	; (80096c0 <prvInitialiseTaskLists+0x64>)
 800968a:	f7fe fb0d 	bl	8007ca8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800968e:	480d      	ldr	r0, [pc, #52]	; (80096c4 <prvInitialiseTaskLists+0x68>)
 8009690:	f7fe fb0a 	bl	8007ca8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009694:	480c      	ldr	r0, [pc, #48]	; (80096c8 <prvInitialiseTaskLists+0x6c>)
 8009696:	f7fe fb07 	bl	8007ca8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800969a:	480c      	ldr	r0, [pc, #48]	; (80096cc <prvInitialiseTaskLists+0x70>)
 800969c:	f7fe fb04 	bl	8007ca8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80096a0:	480b      	ldr	r0, [pc, #44]	; (80096d0 <prvInitialiseTaskLists+0x74>)
 80096a2:	f7fe fb01 	bl	8007ca8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80096a6:	4b0b      	ldr	r3, [pc, #44]	; (80096d4 <prvInitialiseTaskLists+0x78>)
 80096a8:	4a05      	ldr	r2, [pc, #20]	; (80096c0 <prvInitialiseTaskLists+0x64>)
 80096aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80096ac:	4b0a      	ldr	r3, [pc, #40]	; (80096d8 <prvInitialiseTaskLists+0x7c>)
 80096ae:	4a05      	ldr	r2, [pc, #20]	; (80096c4 <prvInitialiseTaskLists+0x68>)
 80096b0:	601a      	str	r2, [r3, #0]
}
 80096b2:	bf00      	nop
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	200006f0 	.word	0x200006f0
 80096c0:	20000b50 	.word	0x20000b50
 80096c4:	20000b64 	.word	0x20000b64
 80096c8:	20000b80 	.word	0x20000b80
 80096cc:	20000b94 	.word	0x20000b94
 80096d0:	20000bac 	.word	0x20000bac
 80096d4:	20000b78 	.word	0x20000b78
 80096d8:	20000b7c 	.word	0x20000b7c

080096dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096e2:	e019      	b.n	8009718 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80096e4:	f000 fdd8 	bl	800a298 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80096e8:	4b0f      	ldr	r3, [pc, #60]	; (8009728 <prvCheckTasksWaitingTermination+0x4c>)
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	3304      	adds	r3, #4
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fe fb5d 	bl	8007db4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80096fa:	4b0c      	ldr	r3, [pc, #48]	; (800972c <prvCheckTasksWaitingTermination+0x50>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	3b01      	subs	r3, #1
 8009700:	4a0a      	ldr	r2, [pc, #40]	; (800972c <prvCheckTasksWaitingTermination+0x50>)
 8009702:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009704:	4b0a      	ldr	r3, [pc, #40]	; (8009730 <prvCheckTasksWaitingTermination+0x54>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	3b01      	subs	r3, #1
 800970a:	4a09      	ldr	r2, [pc, #36]	; (8009730 <prvCheckTasksWaitingTermination+0x54>)
 800970c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800970e:	f000 fdf1 	bl	800a2f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f80e 	bl	8009734 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009718:	4b05      	ldr	r3, [pc, #20]	; (8009730 <prvCheckTasksWaitingTermination+0x54>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d1e1      	bne.n	80096e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009720:	bf00      	nop
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	20000b94 	.word	0x20000b94
 800972c:	20000bc0 	.word	0x20000bc0
 8009730:	20000ba8 	.word	0x20000ba8

08009734 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009742:	2b00      	cmp	r3, #0
 8009744:	d108      	bne.n	8009758 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800974a:	4618      	mov	r0, r3
 800974c:	f000 ff60 	bl	800a610 <vPortFree>
				vPortFree( pxTCB );
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 ff5d 	bl	800a610 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009756:	e017      	b.n	8009788 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800975e:	2b01      	cmp	r3, #1
 8009760:	d103      	bne.n	800976a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 ff54 	bl	800a610 <vPortFree>
	}
 8009768:	e00e      	b.n	8009788 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009770:	2b02      	cmp	r3, #2
 8009772:	d009      	beq.n	8009788 <prvDeleteTCB+0x54>
 8009774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009778:	f383 8811 	msr	BASEPRI, r3
 800977c:	f3bf 8f6f 	isb	sy
 8009780:	f3bf 8f4f 	dsb	sy
 8009784:	60fb      	str	r3, [r7, #12]
 8009786:	e7fe      	b.n	8009786 <prvDeleteTCB+0x52>
	}
 8009788:	bf00      	nop
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009796:	4b0e      	ldr	r3, [pc, #56]	; (80097d0 <prvResetNextTaskUnblockTime+0x40>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d101      	bne.n	80097a4 <prvResetNextTaskUnblockTime+0x14>
 80097a0:	2301      	movs	r3, #1
 80097a2:	e000      	b.n	80097a6 <prvResetNextTaskUnblockTime+0x16>
 80097a4:	2300      	movs	r3, #0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d004      	beq.n	80097b4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80097aa:	4b0a      	ldr	r3, [pc, #40]	; (80097d4 <prvResetNextTaskUnblockTime+0x44>)
 80097ac:	f04f 32ff 	mov.w	r2, #4294967295
 80097b0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80097b2:	e008      	b.n	80097c6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80097b4:	4b06      	ldr	r3, [pc, #24]	; (80097d0 <prvResetNextTaskUnblockTime+0x40>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	4a04      	ldr	r2, [pc, #16]	; (80097d4 <prvResetNextTaskUnblockTime+0x44>)
 80097c4:	6013      	str	r3, [r2, #0]
}
 80097c6:	bf00      	nop
 80097c8:	370c      	adds	r7, #12
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bc80      	pop	{r7}
 80097ce:	4770      	bx	lr
 80097d0:	20000b78 	.word	0x20000b78
 80097d4:	20000be0 	.word	0x20000be0

080097d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80097de:	4b0b      	ldr	r3, [pc, #44]	; (800980c <xTaskGetSchedulerState+0x34>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d102      	bne.n	80097ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80097e6:	2301      	movs	r3, #1
 80097e8:	607b      	str	r3, [r7, #4]
 80097ea:	e008      	b.n	80097fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097ec:	4b08      	ldr	r3, [pc, #32]	; (8009810 <xTaskGetSchedulerState+0x38>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d102      	bne.n	80097fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80097f4:	2302      	movs	r3, #2
 80097f6:	607b      	str	r3, [r7, #4]
 80097f8:	e001      	b.n	80097fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80097fa:	2300      	movs	r3, #0
 80097fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80097fe:	687b      	ldr	r3, [r7, #4]
	}
 8009800:	4618      	mov	r0, r3
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	bc80      	pop	{r7}
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	20000bcc 	.word	0x20000bcc
 8009810:	20000be8 	.word	0x20000be8

08009814 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009814:	b580      	push	{r7, lr}
 8009816:	b086      	sub	sp, #24
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009820:	2300      	movs	r3, #0
 8009822:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d054      	beq.n	80098d4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800982a:	4b2d      	ldr	r3, [pc, #180]	; (80098e0 <xTaskPriorityDisinherit+0xcc>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	693a      	ldr	r2, [r7, #16]
 8009830:	429a      	cmp	r2, r3
 8009832:	d009      	beq.n	8009848 <xTaskPriorityDisinherit+0x34>
 8009834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009838:	f383 8811 	msr	BASEPRI, r3
 800983c:	f3bf 8f6f 	isb	sy
 8009840:	f3bf 8f4f 	dsb	sy
 8009844:	60fb      	str	r3, [r7, #12]
 8009846:	e7fe      	b.n	8009846 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800984c:	2b00      	cmp	r3, #0
 800984e:	d109      	bne.n	8009864 <xTaskPriorityDisinherit+0x50>
 8009850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009854:	f383 8811 	msr	BASEPRI, r3
 8009858:	f3bf 8f6f 	isb	sy
 800985c:	f3bf 8f4f 	dsb	sy
 8009860:	60bb      	str	r3, [r7, #8]
 8009862:	e7fe      	b.n	8009862 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009868:	1e5a      	subs	r2, r3, #1
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009876:	429a      	cmp	r2, r3
 8009878:	d02c      	beq.n	80098d4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800987e:	2b00      	cmp	r3, #0
 8009880:	d128      	bne.n	80098d4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	3304      	adds	r3, #4
 8009886:	4618      	mov	r0, r3
 8009888:	f7fe fa94 	bl	8007db4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009898:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a4:	4b0f      	ldr	r3, [pc, #60]	; (80098e4 <xTaskPriorityDisinherit+0xd0>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d903      	bls.n	80098b4 <xTaskPriorityDisinherit+0xa0>
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b0:	4a0c      	ldr	r2, [pc, #48]	; (80098e4 <xTaskPriorityDisinherit+0xd0>)
 80098b2:	6013      	str	r3, [r2, #0]
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098b8:	4613      	mov	r3, r2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	4413      	add	r3, r2
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	4a09      	ldr	r2, [pc, #36]	; (80098e8 <xTaskPriorityDisinherit+0xd4>)
 80098c2:	441a      	add	r2, r3
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	3304      	adds	r3, #4
 80098c8:	4619      	mov	r1, r3
 80098ca:	4610      	mov	r0, r2
 80098cc:	f7fe fa17 	bl	8007cfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80098d0:	2301      	movs	r3, #1
 80098d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80098d4:	697b      	ldr	r3, [r7, #20]
	}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3718      	adds	r7, #24
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	200006ec 	.word	0x200006ec
 80098e4:	20000bc8 	.word	0x20000bc8
 80098e8:	200006f0 	.word	0x200006f0

080098ec <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80098f2:	4b09      	ldr	r3, [pc, #36]	; (8009918 <uxTaskResetEventItemValue+0x2c>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	699b      	ldr	r3, [r3, #24]
 80098f8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098fa:	4b07      	ldr	r3, [pc, #28]	; (8009918 <uxTaskResetEventItemValue+0x2c>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009900:	4b05      	ldr	r3, [pc, #20]	; (8009918 <uxTaskResetEventItemValue+0x2c>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8009908:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800990a:	687b      	ldr	r3, [r7, #4]
}
 800990c:	4618      	mov	r0, r3
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	bc80      	pop	{r7}
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop
 8009918:	200006ec 	.word	0x200006ec

0800991c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009926:	4b21      	ldr	r3, [pc, #132]	; (80099ac <prvAddCurrentTaskToDelayedList+0x90>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800992c:	4b20      	ldr	r3, [pc, #128]	; (80099b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	3304      	adds	r3, #4
 8009932:	4618      	mov	r0, r3
 8009934:	f7fe fa3e 	bl	8007db4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800993e:	d10a      	bne.n	8009956 <prvAddCurrentTaskToDelayedList+0x3a>
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d007      	beq.n	8009956 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009946:	4b1a      	ldr	r3, [pc, #104]	; (80099b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	3304      	adds	r3, #4
 800994c:	4619      	mov	r1, r3
 800994e:	4819      	ldr	r0, [pc, #100]	; (80099b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009950:	f7fe f9d5 	bl	8007cfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009954:	e026      	b.n	80099a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009956:	68fa      	ldr	r2, [r7, #12]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4413      	add	r3, r2
 800995c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800995e:	4b14      	ldr	r3, [pc, #80]	; (80099b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68ba      	ldr	r2, [r7, #8]
 8009964:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009966:	68ba      	ldr	r2, [r7, #8]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	429a      	cmp	r2, r3
 800996c:	d209      	bcs.n	8009982 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800996e:	4b12      	ldr	r3, [pc, #72]	; (80099b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	4b0f      	ldr	r3, [pc, #60]	; (80099b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	3304      	adds	r3, #4
 8009978:	4619      	mov	r1, r3
 800997a:	4610      	mov	r0, r2
 800997c:	f7fe f9e2 	bl	8007d44 <vListInsert>
}
 8009980:	e010      	b.n	80099a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009982:	4b0e      	ldr	r3, [pc, #56]	; (80099bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	4b0a      	ldr	r3, [pc, #40]	; (80099b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	3304      	adds	r3, #4
 800998c:	4619      	mov	r1, r3
 800998e:	4610      	mov	r0, r2
 8009990:	f7fe f9d8 	bl	8007d44 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009994:	4b0a      	ldr	r3, [pc, #40]	; (80099c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68ba      	ldr	r2, [r7, #8]
 800999a:	429a      	cmp	r2, r3
 800999c:	d202      	bcs.n	80099a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800999e:	4a08      	ldr	r2, [pc, #32]	; (80099c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	6013      	str	r3, [r2, #0]
}
 80099a4:	bf00      	nop
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	20000bc4 	.word	0x20000bc4
 80099b0:	200006ec 	.word	0x200006ec
 80099b4:	20000bac 	.word	0x20000bac
 80099b8:	20000b7c 	.word	0x20000b7c
 80099bc:	20000b78 	.word	0x20000b78
 80099c0:	20000be0 	.word	0x20000be0

080099c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b08a      	sub	sp, #40	; 0x28
 80099c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80099ca:	2300      	movs	r3, #0
 80099cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80099ce:	f000 fb17 	bl	800a000 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80099d2:	4b1c      	ldr	r3, [pc, #112]	; (8009a44 <xTimerCreateTimerTask+0x80>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d021      	beq.n	8009a1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80099da:	2300      	movs	r3, #0
 80099dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80099de:	2300      	movs	r3, #0
 80099e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80099e2:	1d3a      	adds	r2, r7, #4
 80099e4:	f107 0108 	add.w	r1, r7, #8
 80099e8:	f107 030c 	add.w	r3, r7, #12
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7fd ff3b 	bl	8007868 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80099f2:	6879      	ldr	r1, [r7, #4]
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	68fa      	ldr	r2, [r7, #12]
 80099f8:	9202      	str	r2, [sp, #8]
 80099fa:	9301      	str	r3, [sp, #4]
 80099fc:	2302      	movs	r3, #2
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	2300      	movs	r3, #0
 8009a02:	460a      	mov	r2, r1
 8009a04:	4910      	ldr	r1, [pc, #64]	; (8009a48 <xTimerCreateTimerTask+0x84>)
 8009a06:	4811      	ldr	r0, [pc, #68]	; (8009a4c <xTimerCreateTimerTask+0x88>)
 8009a08:	f7fe ff0e 	bl	8008828 <xTaskCreateStatic>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	4b10      	ldr	r3, [pc, #64]	; (8009a50 <xTimerCreateTimerTask+0x8c>)
 8009a10:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009a12:	4b0f      	ldr	r3, [pc, #60]	; (8009a50 <xTimerCreateTimerTask+0x8c>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d001      	beq.n	8009a1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d109      	bne.n	8009a38 <xTimerCreateTimerTask+0x74>
 8009a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	613b      	str	r3, [r7, #16]
 8009a36:	e7fe      	b.n	8009a36 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8009a38:	697b      	ldr	r3, [r7, #20]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3718      	adds	r7, #24
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	20000c1c 	.word	0x20000c1c
 8009a48:	0800ab70 	.word	0x0800ab70
 8009a4c:	08009c11 	.word	0x08009c11
 8009a50:	20000c20 	.word	0x20000c20

08009a54 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b088      	sub	sp, #32
 8009a58:	af02      	add	r7, sp, #8
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
 8009a60:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8009a62:	2030      	movs	r0, #48	; 0x30
 8009a64:	f000 fd0e 	bl	800a484 <pvPortMalloc>
 8009a68:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d00d      	beq.n	8009a8c <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	9301      	str	r3, [sp, #4]
 8009a74:	6a3b      	ldr	r3, [r7, #32]
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	68b9      	ldr	r1, [r7, #8]
 8009a7e:	68f8      	ldr	r0, [r7, #12]
 8009a80:	f000 f809 	bl	8009a96 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8009a8c:	697b      	ldr	r3, [r7, #20]
	}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3718      	adds	r7, #24
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b086      	sub	sp, #24
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	60f8      	str	r0, [r7, #12]
 8009a9e:	60b9      	str	r1, [r7, #8]
 8009aa0:	607a      	str	r2, [r7, #4]
 8009aa2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d109      	bne.n	8009abe <prvInitialiseNewTimer+0x28>
 8009aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aae:	f383 8811 	msr	BASEPRI, r3
 8009ab2:	f3bf 8f6f 	isb	sy
 8009ab6:	f3bf 8f4f 	dsb	sy
 8009aba:	617b      	str	r3, [r7, #20]
 8009abc:	e7fe      	b.n	8009abc <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8009abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d015      	beq.n	8009af0 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009ac4:	f000 fa9c 	bl	800a000 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aca:	68fa      	ldr	r2, [r7, #12]
 8009acc:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8009ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009adc:	683a      	ldr	r2, [r7, #0]
 8009ade:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae2:	6a3a      	ldr	r2, [r7, #32]
 8009ae4:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae8:	3304      	adds	r3, #4
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fe f8fb 	bl	8007ce6 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009af0:	bf00      	nop
 8009af2:	3718      	adds	r7, #24
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b08a      	sub	sp, #40	; 0x28
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	607a      	str	r2, [r7, #4]
 8009b04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009b06:	2300      	movs	r3, #0
 8009b08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d109      	bne.n	8009b24 <xTimerGenericCommand+0x2c>
 8009b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	623b      	str	r3, [r7, #32]
 8009b22:	e7fe      	b.n	8009b22 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009b24:	4b19      	ldr	r3, [pc, #100]	; (8009b8c <xTimerGenericCommand+0x94>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d02a      	beq.n	8009b82 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	2b05      	cmp	r3, #5
 8009b3c:	dc18      	bgt.n	8009b70 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009b3e:	f7ff fe4b 	bl	80097d8 <xTaskGetSchedulerState>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	d109      	bne.n	8009b5c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009b48:	4b10      	ldr	r3, [pc, #64]	; (8009b8c <xTimerGenericCommand+0x94>)
 8009b4a:	6818      	ldr	r0, [r3, #0]
 8009b4c:	f107 0110 	add.w	r1, r7, #16
 8009b50:	2300      	movs	r3, #0
 8009b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b54:	f7fe fa92 	bl	800807c <xQueueGenericSend>
 8009b58:	6278      	str	r0, [r7, #36]	; 0x24
 8009b5a:	e012      	b.n	8009b82 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009b5c:	4b0b      	ldr	r3, [pc, #44]	; (8009b8c <xTimerGenericCommand+0x94>)
 8009b5e:	6818      	ldr	r0, [r3, #0]
 8009b60:	f107 0110 	add.w	r1, r7, #16
 8009b64:	2300      	movs	r3, #0
 8009b66:	2200      	movs	r2, #0
 8009b68:	f7fe fa88 	bl	800807c <xQueueGenericSend>
 8009b6c:	6278      	str	r0, [r7, #36]	; 0x24
 8009b6e:	e008      	b.n	8009b82 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009b70:	4b06      	ldr	r3, [pc, #24]	; (8009b8c <xTimerGenericCommand+0x94>)
 8009b72:	6818      	ldr	r0, [r3, #0]
 8009b74:	f107 0110 	add.w	r1, r7, #16
 8009b78:	2300      	movs	r3, #0
 8009b7a:	683a      	ldr	r2, [r7, #0]
 8009b7c:	f7fe fb78 	bl	8008270 <xQueueGenericSendFromISR>
 8009b80:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3728      	adds	r7, #40	; 0x28
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	20000c1c 	.word	0x20000c1c

08009b90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b088      	sub	sp, #32
 8009b94:	af02      	add	r7, sp, #8
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b9a:	4b1c      	ldr	r3, [pc, #112]	; (8009c0c <prvProcessExpiredTimer+0x7c>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	3304      	adds	r3, #4
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7fe f903 	bl	8007db4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	69db      	ldr	r3, [r3, #28]
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d121      	bne.n	8009bfa <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	699a      	ldr	r2, [r3, #24]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	18d1      	adds	r1, r2, r3
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	683a      	ldr	r2, [r7, #0]
 8009bc2:	6978      	ldr	r0, [r7, #20]
 8009bc4:	f000 f8ca 	bl	8009d5c <prvInsertTimerInActiveList>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d015      	beq.n	8009bfa <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009bce:	2300      	movs	r3, #0
 8009bd0:	9300      	str	r3, [sp, #0]
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	2100      	movs	r1, #0
 8009bd8:	6978      	ldr	r0, [r7, #20]
 8009bda:	f7ff ff8d 	bl	8009af8 <xTimerGenericCommand>
 8009bde:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d109      	bne.n	8009bfa <prvProcessExpiredTimer+0x6a>
 8009be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bea:	f383 8811 	msr	BASEPRI, r3
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f3bf 8f4f 	dsb	sy
 8009bf6:	60fb      	str	r3, [r7, #12]
 8009bf8:	e7fe      	b.n	8009bf8 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfe:	6978      	ldr	r0, [r7, #20]
 8009c00:	4798      	blx	r3
}
 8009c02:	bf00      	nop
 8009c04:	3718      	adds	r7, #24
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	20000c14 	.word	0x20000c14

08009c10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 8009c18:	f7f7 fa14 	bl	8001044 <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c1c:	f107 0308 	add.w	r3, r7, #8
 8009c20:	4618      	mov	r0, r3
 8009c22:	f000 f857 	bl	8009cd4 <prvGetNextExpireTime>
 8009c26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	68f8      	ldr	r0, [r7, #12]
 8009c2e:	f000 f803 	bl	8009c38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009c32:	f000 f8d5 	bl	8009de0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c36:	e7f1      	b.n	8009c1c <prvTimerTask+0xc>

08009c38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009c42:	f7ff f929 	bl	8008e98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c46:	f107 0308 	add.w	r3, r7, #8
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f000 f866 	bl	8009d1c <prvSampleTimeNow>
 8009c50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d130      	bne.n	8009cba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d10a      	bne.n	8009c74 <prvProcessTimerOrBlockTask+0x3c>
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d806      	bhi.n	8009c74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009c66:	f7ff f925 	bl	8008eb4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009c6a:	68f9      	ldr	r1, [r7, #12]
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f7ff ff8f 	bl	8009b90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009c72:	e024      	b.n	8009cbe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d008      	beq.n	8009c8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009c7a:	4b13      	ldr	r3, [pc, #76]	; (8009cc8 <prvProcessTimerOrBlockTask+0x90>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	bf0c      	ite	eq
 8009c84:	2301      	moveq	r3, #1
 8009c86:	2300      	movne	r3, #0
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009c8c:	4b0f      	ldr	r3, [pc, #60]	; (8009ccc <prvProcessTimerOrBlockTask+0x94>)
 8009c8e:	6818      	ldr	r0, [r3, #0]
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	683a      	ldr	r2, [r7, #0]
 8009c98:	4619      	mov	r1, r3
 8009c9a:	f7fe fd91 	bl	80087c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009c9e:	f7ff f909 	bl	8008eb4 <xTaskResumeAll>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10a      	bne.n	8009cbe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009ca8:	4b09      	ldr	r3, [pc, #36]	; (8009cd0 <prvProcessTimerOrBlockTask+0x98>)
 8009caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cae:	601a      	str	r2, [r3, #0]
 8009cb0:	f3bf 8f4f 	dsb	sy
 8009cb4:	f3bf 8f6f 	isb	sy
}
 8009cb8:	e001      	b.n	8009cbe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009cba:	f7ff f8fb 	bl	8008eb4 <xTaskResumeAll>
}
 8009cbe:	bf00      	nop
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	20000c18 	.word	0x20000c18
 8009ccc:	20000c1c 	.word	0x20000c1c
 8009cd0:	e000ed04 	.word	0xe000ed04

08009cd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009cdc:	4b0e      	ldr	r3, [pc, #56]	; (8009d18 <prvGetNextExpireTime+0x44>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	bf0c      	ite	eq
 8009ce6:	2301      	moveq	r3, #1
 8009ce8:	2300      	movne	r3, #0
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	461a      	mov	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d105      	bne.n	8009d06 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009cfa:	4b07      	ldr	r3, [pc, #28]	; (8009d18 <prvGetNextExpireTime+0x44>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	60fb      	str	r3, [r7, #12]
 8009d04:	e001      	b.n	8009d0a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009d06:	2300      	movs	r3, #0
 8009d08:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3714      	adds	r7, #20
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bc80      	pop	{r7}
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	20000c14 	.word	0x20000c14

08009d1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009d24:	f7ff f962 	bl	8008fec <xTaskGetTickCount>
 8009d28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009d2a:	4b0b      	ldr	r3, [pc, #44]	; (8009d58 <prvSampleTimeNow+0x3c>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d205      	bcs.n	8009d40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009d34:	f000 f904 	bl	8009f40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	601a      	str	r2, [r3, #0]
 8009d3e:	e002      	b.n	8009d46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009d46:	4a04      	ldr	r2, [pc, #16]	; (8009d58 <prvSampleTimeNow+0x3c>)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	20000c24 	.word	0x20000c24

08009d5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	607a      	str	r2, [r7, #4]
 8009d68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	68ba      	ldr	r2, [r7, #8]
 8009d72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009d7a:	68ba      	ldr	r2, [r7, #8]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d812      	bhi.n	8009da8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	1ad2      	subs	r2, r2, r3
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	699b      	ldr	r3, [r3, #24]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d302      	bcc.n	8009d96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009d90:	2301      	movs	r3, #1
 8009d92:	617b      	str	r3, [r7, #20]
 8009d94:	e01b      	b.n	8009dce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d96:	4b10      	ldr	r3, [pc, #64]	; (8009dd8 <prvInsertTimerInActiveList+0x7c>)
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	3304      	adds	r3, #4
 8009d9e:	4619      	mov	r1, r3
 8009da0:	4610      	mov	r0, r2
 8009da2:	f7fd ffcf 	bl	8007d44 <vListInsert>
 8009da6:	e012      	b.n	8009dce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d206      	bcs.n	8009dbe <prvInsertTimerInActiveList+0x62>
 8009db0:	68ba      	ldr	r2, [r7, #8]
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d302      	bcc.n	8009dbe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009db8:	2301      	movs	r3, #1
 8009dba:	617b      	str	r3, [r7, #20]
 8009dbc:	e007      	b.n	8009dce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009dbe:	4b07      	ldr	r3, [pc, #28]	; (8009ddc <prvInsertTimerInActiveList+0x80>)
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	3304      	adds	r3, #4
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	4610      	mov	r0, r2
 8009dca:	f7fd ffbb 	bl	8007d44 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009dce:	697b      	ldr	r3, [r7, #20]
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3718      	adds	r7, #24
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	20000c18 	.word	0x20000c18
 8009ddc:	20000c14 	.word	0x20000c14

08009de0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b08e      	sub	sp, #56	; 0x38
 8009de4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009de6:	e099      	b.n	8009f1c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	da17      	bge.n	8009e1e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009dee:	1d3b      	adds	r3, r7, #4
 8009df0:	3304      	adds	r3, #4
 8009df2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d109      	bne.n	8009e0e <prvProcessReceivedCommands+0x2e>
 8009dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfe:	f383 8811 	msr	BASEPRI, r3
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	61fb      	str	r3, [r7, #28]
 8009e0c:	e7fe      	b.n	8009e0c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e14:	6850      	ldr	r0, [r2, #4]
 8009e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e18:	6892      	ldr	r2, [r2, #8]
 8009e1a:	4611      	mov	r1, r2
 8009e1c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	db7a      	blt.n	8009f1a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2a:	695b      	ldr	r3, [r3, #20]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d004      	beq.n	8009e3a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e32:	3304      	adds	r3, #4
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7fd ffbd 	bl	8007db4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e3a:	463b      	mov	r3, r7
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7ff ff6d 	bl	8009d1c <prvSampleTimeNow>
 8009e42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2b09      	cmp	r3, #9
 8009e48:	d868      	bhi.n	8009f1c <prvProcessReceivedCommands+0x13c>
 8009e4a:	a201      	add	r2, pc, #4	; (adr r2, 8009e50 <prvProcessReceivedCommands+0x70>)
 8009e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e50:	08009e79 	.word	0x08009e79
 8009e54:	08009e79 	.word	0x08009e79
 8009e58:	08009e79 	.word	0x08009e79
 8009e5c:	08009f1d 	.word	0x08009f1d
 8009e60:	08009ed3 	.word	0x08009ed3
 8009e64:	08009f09 	.word	0x08009f09
 8009e68:	08009e79 	.word	0x08009e79
 8009e6c:	08009e79 	.word	0x08009e79
 8009e70:	08009f1d 	.word	0x08009f1d
 8009e74:	08009ed3 	.word	0x08009ed3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009e78:	68ba      	ldr	r2, [r7, #8]
 8009e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	18d1      	adds	r1, r2, r3
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e86:	f7ff ff69 	bl	8009d5c <prvInsertTimerInActiveList>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d045      	beq.n	8009f1c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e96:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9a:	69db      	ldr	r3, [r3, #28]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d13d      	bne.n	8009f1c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009ea0:	68ba      	ldr	r2, [r7, #8]
 8009ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea4:	699b      	ldr	r3, [r3, #24]
 8009ea6:	441a      	add	r2, r3
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	9300      	str	r3, [sp, #0]
 8009eac:	2300      	movs	r3, #0
 8009eae:	2100      	movs	r1, #0
 8009eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009eb2:	f7ff fe21 	bl	8009af8 <xTimerGenericCommand>
 8009eb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009eb8:	6a3b      	ldr	r3, [r7, #32]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d12e      	bne.n	8009f1c <prvProcessReceivedCommands+0x13c>
 8009ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec2:	f383 8811 	msr	BASEPRI, r3
 8009ec6:	f3bf 8f6f 	isb	sy
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	61bb      	str	r3, [r7, #24]
 8009ed0:	e7fe      	b.n	8009ed0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009ed2:	68ba      	ldr	r2, [r7, #8]
 8009ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eda:	699b      	ldr	r3, [r3, #24]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d109      	bne.n	8009ef4 <prvProcessReceivedCommands+0x114>
 8009ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee4:	f383 8811 	msr	BASEPRI, r3
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	617b      	str	r3, [r7, #20]
 8009ef2:	e7fe      	b.n	8009ef2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef6:	699a      	ldr	r2, [r3, #24]
 8009ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efa:	18d1      	adds	r1, r2, r3
 8009efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f02:	f7ff ff2b 	bl	8009d5c <prvInsertTimerInActiveList>
					break;
 8009f06:	e009      	b.n	8009f1c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d104      	bne.n	8009f1c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8009f12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f14:	f000 fb7c 	bl	800a610 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009f18:	e000      	b.n	8009f1c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009f1a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f1c:	4b07      	ldr	r3, [pc, #28]	; (8009f3c <prvProcessReceivedCommands+0x15c>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	1d39      	adds	r1, r7, #4
 8009f22:	2200      	movs	r2, #0
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7fe fa37 	bl	8008398 <xQueueReceive>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	f47f af5b 	bne.w	8009de8 <prvProcessReceivedCommands+0x8>
	}
}
 8009f32:	bf00      	nop
 8009f34:	3730      	adds	r7, #48	; 0x30
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	20000c1c 	.word	0x20000c1c

08009f40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b088      	sub	sp, #32
 8009f44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f46:	e044      	b.n	8009fd2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f48:	4b2b      	ldr	r3, [pc, #172]	; (8009ff8 <prvSwitchTimerLists+0xb8>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f52:	4b29      	ldr	r3, [pc, #164]	; (8009ff8 <prvSwitchTimerLists+0xb8>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	3304      	adds	r3, #4
 8009f60:	4618      	mov	r0, r3
 8009f62:	f7fd ff27 	bl	8007db4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	69db      	ldr	r3, [r3, #28]
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d12d      	bne.n	8009fd2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	699b      	ldr	r3, [r3, #24]
 8009f7a:	693a      	ldr	r2, [r7, #16]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d90e      	bls.n	8009fa6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f94:	4b18      	ldr	r3, [pc, #96]	; (8009ff8 <prvSwitchTimerLists+0xb8>)
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	3304      	adds	r3, #4
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	4610      	mov	r0, r2
 8009fa0:	f7fd fed0 	bl	8007d44 <vListInsert>
 8009fa4:	e015      	b.n	8009fd2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	9300      	str	r3, [sp, #0]
 8009faa:	2300      	movs	r3, #0
 8009fac:	693a      	ldr	r2, [r7, #16]
 8009fae:	2100      	movs	r1, #0
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f7ff fda1 	bl	8009af8 <xTimerGenericCommand>
 8009fb6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d109      	bne.n	8009fd2 <prvSwitchTimerLists+0x92>
 8009fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc2:	f383 8811 	msr	BASEPRI, r3
 8009fc6:	f3bf 8f6f 	isb	sy
 8009fca:	f3bf 8f4f 	dsb	sy
 8009fce:	603b      	str	r3, [r7, #0]
 8009fd0:	e7fe      	b.n	8009fd0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009fd2:	4b09      	ldr	r3, [pc, #36]	; (8009ff8 <prvSwitchTimerLists+0xb8>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d1b5      	bne.n	8009f48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009fdc:	4b06      	ldr	r3, [pc, #24]	; (8009ff8 <prvSwitchTimerLists+0xb8>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009fe2:	4b06      	ldr	r3, [pc, #24]	; (8009ffc <prvSwitchTimerLists+0xbc>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a04      	ldr	r2, [pc, #16]	; (8009ff8 <prvSwitchTimerLists+0xb8>)
 8009fe8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009fea:	4a04      	ldr	r2, [pc, #16]	; (8009ffc <prvSwitchTimerLists+0xbc>)
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	6013      	str	r3, [r2, #0]
}
 8009ff0:	bf00      	nop
 8009ff2:	3718      	adds	r7, #24
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}
 8009ff8:	20000c14 	.word	0x20000c14
 8009ffc:	20000c18 	.word	0x20000c18

0800a000 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b082      	sub	sp, #8
 800a004:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a006:	f000 f947 	bl	800a298 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a00a:	4b15      	ldr	r3, [pc, #84]	; (800a060 <prvCheckForValidListAndQueue+0x60>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d120      	bne.n	800a054 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a012:	4814      	ldr	r0, [pc, #80]	; (800a064 <prvCheckForValidListAndQueue+0x64>)
 800a014:	f7fd fe48 	bl	8007ca8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a018:	4813      	ldr	r0, [pc, #76]	; (800a068 <prvCheckForValidListAndQueue+0x68>)
 800a01a:	f7fd fe45 	bl	8007ca8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a01e:	4b13      	ldr	r3, [pc, #76]	; (800a06c <prvCheckForValidListAndQueue+0x6c>)
 800a020:	4a10      	ldr	r2, [pc, #64]	; (800a064 <prvCheckForValidListAndQueue+0x64>)
 800a022:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a024:	4b12      	ldr	r3, [pc, #72]	; (800a070 <prvCheckForValidListAndQueue+0x70>)
 800a026:	4a10      	ldr	r2, [pc, #64]	; (800a068 <prvCheckForValidListAndQueue+0x68>)
 800a028:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a02a:	2300      	movs	r3, #0
 800a02c:	9300      	str	r3, [sp, #0]
 800a02e:	4b11      	ldr	r3, [pc, #68]	; (800a074 <prvCheckForValidListAndQueue+0x74>)
 800a030:	4a11      	ldr	r2, [pc, #68]	; (800a078 <prvCheckForValidListAndQueue+0x78>)
 800a032:	2110      	movs	r1, #16
 800a034:	200a      	movs	r0, #10
 800a036:	f7fd ff4f 	bl	8007ed8 <xQueueGenericCreateStatic>
 800a03a:	4602      	mov	r2, r0
 800a03c:	4b08      	ldr	r3, [pc, #32]	; (800a060 <prvCheckForValidListAndQueue+0x60>)
 800a03e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a040:	4b07      	ldr	r3, [pc, #28]	; (800a060 <prvCheckForValidListAndQueue+0x60>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d005      	beq.n	800a054 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a048:	4b05      	ldr	r3, [pc, #20]	; (800a060 <prvCheckForValidListAndQueue+0x60>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	490b      	ldr	r1, [pc, #44]	; (800a07c <prvCheckForValidListAndQueue+0x7c>)
 800a04e:	4618      	mov	r0, r3
 800a050:	f7fe fb8e 	bl	8008770 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a054:	f000 f94e 	bl	800a2f4 <vPortExitCritical>
}
 800a058:	bf00      	nop
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	20000c1c 	.word	0x20000c1c
 800a064:	20000bec 	.word	0x20000bec
 800a068:	20000c00 	.word	0x20000c00
 800a06c:	20000c14 	.word	0x20000c14
 800a070:	20000c18 	.word	0x20000c18
 800a074:	20000cc8 	.word	0x20000cc8
 800a078:	20000c28 	.word	0x20000c28
 800a07c:	0800ab78 	.word	0x0800ab78

0800a080 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a080:	b580      	push	{r7, lr}
 800a082:	b08a      	sub	sp, #40	; 0x28
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	607a      	str	r2, [r7, #4]
 800a08c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800a08e:	f06f 0301 	mvn.w	r3, #1
 800a092:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a0a0:	4b06      	ldr	r3, [pc, #24]	; (800a0bc <xTimerPendFunctionCallFromISR+0x3c>)
 800a0a2:	6818      	ldr	r0, [r3, #0]
 800a0a4:	f107 0114 	add.w	r1, r7, #20
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	f7fe f8e0 	bl	8008270 <xQueueGenericSendFromISR>
 800a0b0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3728      	adds	r7, #40	; 0x28
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	20000c1c 	.word	0x20000c1c

0800a0c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	3b04      	subs	r3, #4
 800a0d0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a0d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	3b04      	subs	r3, #4
 800a0de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	f023 0201 	bic.w	r2, r3, #1
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	3b04      	subs	r3, #4
 800a0ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a0f0:	4a08      	ldr	r2, [pc, #32]	; (800a114 <pxPortInitialiseStack+0x54>)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	3b14      	subs	r3, #20
 800a0fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	3b20      	subs	r3, #32
 800a106:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a108:	68fb      	ldr	r3, [r7, #12]
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3714      	adds	r7, #20
 800a10e:	46bd      	mov	sp, r7
 800a110:	bc80      	pop	{r7}
 800a112:	4770      	bx	lr
 800a114:	0800a119 	.word	0x0800a119

0800a118 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a118:	b480      	push	{r7}
 800a11a:	b085      	sub	sp, #20
 800a11c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a11e:	2300      	movs	r3, #0
 800a120:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a122:	4b10      	ldr	r3, [pc, #64]	; (800a164 <prvTaskExitError+0x4c>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12a:	d009      	beq.n	800a140 <prvTaskExitError+0x28>
 800a12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a130:	f383 8811 	msr	BASEPRI, r3
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	f3bf 8f4f 	dsb	sy
 800a13c:	60fb      	str	r3, [r7, #12]
 800a13e:	e7fe      	b.n	800a13e <prvTaskExitError+0x26>
 800a140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a144:	f383 8811 	msr	BASEPRI, r3
 800a148:	f3bf 8f6f 	isb	sy
 800a14c:	f3bf 8f4f 	dsb	sy
 800a150:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a152:	bf00      	nop
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d0fc      	beq.n	800a154 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a15a:	bf00      	nop
 800a15c:	3714      	adds	r7, #20
 800a15e:	46bd      	mov	sp, r7
 800a160:	bc80      	pop	{r7}
 800a162:	4770      	bx	lr
 800a164:	20000010 	.word	0x20000010
	...

0800a170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a170:	4b07      	ldr	r3, [pc, #28]	; (800a190 <pxCurrentTCBConst2>)
 800a172:	6819      	ldr	r1, [r3, #0]
 800a174:	6808      	ldr	r0, [r1, #0]
 800a176:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a17a:	f380 8809 	msr	PSP, r0
 800a17e:	f3bf 8f6f 	isb	sy
 800a182:	f04f 0000 	mov.w	r0, #0
 800a186:	f380 8811 	msr	BASEPRI, r0
 800a18a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a18e:	4770      	bx	lr

0800a190 <pxCurrentTCBConst2>:
 800a190:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a194:	bf00      	nop
 800a196:	bf00      	nop

0800a198 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a198:	4806      	ldr	r0, [pc, #24]	; (800a1b4 <prvPortStartFirstTask+0x1c>)
 800a19a:	6800      	ldr	r0, [r0, #0]
 800a19c:	6800      	ldr	r0, [r0, #0]
 800a19e:	f380 8808 	msr	MSP, r0
 800a1a2:	b662      	cpsie	i
 800a1a4:	b661      	cpsie	f
 800a1a6:	f3bf 8f4f 	dsb	sy
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	df00      	svc	0
 800a1b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a1b2:	bf00      	nop
 800a1b4:	e000ed08 	.word	0xe000ed08

0800a1b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a1be:	4b31      	ldr	r3, [pc, #196]	; (800a284 <xPortStartScheduler+0xcc>)
 800a1c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	22ff      	movs	r2, #255	; 0xff
 800a1ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a1d8:	78fb      	ldrb	r3, [r7, #3]
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a1e0:	b2da      	uxtb	r2, r3
 800a1e2:	4b29      	ldr	r3, [pc, #164]	; (800a288 <xPortStartScheduler+0xd0>)
 800a1e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a1e6:	4b29      	ldr	r3, [pc, #164]	; (800a28c <xPortStartScheduler+0xd4>)
 800a1e8:	2207      	movs	r2, #7
 800a1ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a1ec:	e009      	b.n	800a202 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a1ee:	4b27      	ldr	r3, [pc, #156]	; (800a28c <xPortStartScheduler+0xd4>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	4a25      	ldr	r2, [pc, #148]	; (800a28c <xPortStartScheduler+0xd4>)
 800a1f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a1f8:	78fb      	ldrb	r3, [r7, #3]
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	005b      	lsls	r3, r3, #1
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a202:	78fb      	ldrb	r3, [r7, #3]
 800a204:	b2db      	uxtb	r3, r3
 800a206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a20a:	2b80      	cmp	r3, #128	; 0x80
 800a20c:	d0ef      	beq.n	800a1ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a20e:	4b1f      	ldr	r3, [pc, #124]	; (800a28c <xPortStartScheduler+0xd4>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f1c3 0307 	rsb	r3, r3, #7
 800a216:	2b04      	cmp	r3, #4
 800a218:	d009      	beq.n	800a22e <xPortStartScheduler+0x76>
 800a21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21e:	f383 8811 	msr	BASEPRI, r3
 800a222:	f3bf 8f6f 	isb	sy
 800a226:	f3bf 8f4f 	dsb	sy
 800a22a:	60bb      	str	r3, [r7, #8]
 800a22c:	e7fe      	b.n	800a22c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a22e:	4b17      	ldr	r3, [pc, #92]	; (800a28c <xPortStartScheduler+0xd4>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	021b      	lsls	r3, r3, #8
 800a234:	4a15      	ldr	r2, [pc, #84]	; (800a28c <xPortStartScheduler+0xd4>)
 800a236:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a238:	4b14      	ldr	r3, [pc, #80]	; (800a28c <xPortStartScheduler+0xd4>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a240:	4a12      	ldr	r2, [pc, #72]	; (800a28c <xPortStartScheduler+0xd4>)
 800a242:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	b2da      	uxtb	r2, r3
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a24c:	4b10      	ldr	r3, [pc, #64]	; (800a290 <xPortStartScheduler+0xd8>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a0f      	ldr	r2, [pc, #60]	; (800a290 <xPortStartScheduler+0xd8>)
 800a252:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a256:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a258:	4b0d      	ldr	r3, [pc, #52]	; (800a290 <xPortStartScheduler+0xd8>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a0c      	ldr	r2, [pc, #48]	; (800a290 <xPortStartScheduler+0xd8>)
 800a25e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a262:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a264:	f000 f8b0 	bl	800a3c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a268:	4b0a      	ldr	r3, [pc, #40]	; (800a294 <xPortStartScheduler+0xdc>)
 800a26a:	2200      	movs	r2, #0
 800a26c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a26e:	f7ff ff93 	bl	800a198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a272:	f7fe ffa1 	bl	80091b8 <vTaskSwitchContext>
	prvTaskExitError();
 800a276:	f7ff ff4f 	bl	800a118 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a27a:	2300      	movs	r3, #0
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	e000e400 	.word	0xe000e400
 800a288:	20000d18 	.word	0x20000d18
 800a28c:	20000d1c 	.word	0x20000d1c
 800a290:	e000ed20 	.word	0xe000ed20
 800a294:	20000010 	.word	0x20000010

0800a298 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a2:	f383 8811 	msr	BASEPRI, r3
 800a2a6:	f3bf 8f6f 	isb	sy
 800a2aa:	f3bf 8f4f 	dsb	sy
 800a2ae:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a2b0:	4b0e      	ldr	r3, [pc, #56]	; (800a2ec <vPortEnterCritical+0x54>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	4a0d      	ldr	r2, [pc, #52]	; (800a2ec <vPortEnterCritical+0x54>)
 800a2b8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a2ba:	4b0c      	ldr	r3, [pc, #48]	; (800a2ec <vPortEnterCritical+0x54>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d10e      	bne.n	800a2e0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a2c2:	4b0b      	ldr	r3, [pc, #44]	; (800a2f0 <vPortEnterCritical+0x58>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d009      	beq.n	800a2e0 <vPortEnterCritical+0x48>
 800a2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d0:	f383 8811 	msr	BASEPRI, r3
 800a2d4:	f3bf 8f6f 	isb	sy
 800a2d8:	f3bf 8f4f 	dsb	sy
 800a2dc:	603b      	str	r3, [r7, #0]
 800a2de:	e7fe      	b.n	800a2de <vPortEnterCritical+0x46>
	}
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bc80      	pop	{r7}
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop
 800a2ec:	20000010 	.word	0x20000010
 800a2f0:	e000ed04 	.word	0xe000ed04

0800a2f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a2fa:	4b10      	ldr	r3, [pc, #64]	; (800a33c <vPortExitCritical+0x48>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d109      	bne.n	800a316 <vPortExitCritical+0x22>
 800a302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a306:	f383 8811 	msr	BASEPRI, r3
 800a30a:	f3bf 8f6f 	isb	sy
 800a30e:	f3bf 8f4f 	dsb	sy
 800a312:	607b      	str	r3, [r7, #4]
 800a314:	e7fe      	b.n	800a314 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a316:	4b09      	ldr	r3, [pc, #36]	; (800a33c <vPortExitCritical+0x48>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3b01      	subs	r3, #1
 800a31c:	4a07      	ldr	r2, [pc, #28]	; (800a33c <vPortExitCritical+0x48>)
 800a31e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a320:	4b06      	ldr	r3, [pc, #24]	; (800a33c <vPortExitCritical+0x48>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d104      	bne.n	800a332 <vPortExitCritical+0x3e>
 800a328:	2300      	movs	r3, #0
 800a32a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a332:	bf00      	nop
 800a334:	370c      	adds	r7, #12
 800a336:	46bd      	mov	sp, r7
 800a338:	bc80      	pop	{r7}
 800a33a:	4770      	bx	lr
 800a33c:	20000010 	.word	0x20000010

0800a340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a340:	f3ef 8009 	mrs	r0, PSP
 800a344:	f3bf 8f6f 	isb	sy
 800a348:	4b0d      	ldr	r3, [pc, #52]	; (800a380 <pxCurrentTCBConst>)
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a350:	6010      	str	r0, [r2, #0]
 800a352:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a356:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a35a:	f380 8811 	msr	BASEPRI, r0
 800a35e:	f7fe ff2b 	bl	80091b8 <vTaskSwitchContext>
 800a362:	f04f 0000 	mov.w	r0, #0
 800a366:	f380 8811 	msr	BASEPRI, r0
 800a36a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a36e:	6819      	ldr	r1, [r3, #0]
 800a370:	6808      	ldr	r0, [r1, #0]
 800a372:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a376:	f380 8809 	msr	PSP, r0
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	4770      	bx	lr

0800a380 <pxCurrentTCBConst>:
 800a380:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a384:	bf00      	nop
 800a386:	bf00      	nop

0800a388 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
	__asm volatile
 800a38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a392:	f383 8811 	msr	BASEPRI, r3
 800a396:	f3bf 8f6f 	isb	sy
 800a39a:	f3bf 8f4f 	dsb	sy
 800a39e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a3a0:	f7fe fe44 	bl	800902c <xTaskIncrementTick>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d003      	beq.n	800a3b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a3aa:	4b06      	ldr	r3, [pc, #24]	; (800a3c4 <SysTick_Handler+0x3c>)
 800a3ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3b0:	601a      	str	r2, [r3, #0]
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a3bc:	bf00      	nop
 800a3be:	3708      	adds	r7, #8
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	e000ed04 	.word	0xe000ed04

0800a3c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a3cc:	4b0a      	ldr	r3, [pc, #40]	; (800a3f8 <vPortSetupTimerInterrupt+0x30>)
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a3d2:	4b0a      	ldr	r3, [pc, #40]	; (800a3fc <vPortSetupTimerInterrupt+0x34>)
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a3d8:	4b09      	ldr	r3, [pc, #36]	; (800a400 <vPortSetupTimerInterrupt+0x38>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a09      	ldr	r2, [pc, #36]	; (800a404 <vPortSetupTimerInterrupt+0x3c>)
 800a3de:	fba2 2303 	umull	r2, r3, r2, r3
 800a3e2:	099b      	lsrs	r3, r3, #6
 800a3e4:	4a08      	ldr	r2, [pc, #32]	; (800a408 <vPortSetupTimerInterrupt+0x40>)
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a3ea:	4b03      	ldr	r3, [pc, #12]	; (800a3f8 <vPortSetupTimerInterrupt+0x30>)
 800a3ec:	2207      	movs	r2, #7
 800a3ee:	601a      	str	r2, [r3, #0]
}
 800a3f0:	bf00      	nop
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bc80      	pop	{r7}
 800a3f6:	4770      	bx	lr
 800a3f8:	e000e010 	.word	0xe000e010
 800a3fc:	e000e018 	.word	0xe000e018
 800a400:	20000004 	.word	0x20000004
 800a404:	10624dd3 	.word	0x10624dd3
 800a408:	e000e014 	.word	0xe000e014

0800a40c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a40c:	b480      	push	{r7}
 800a40e:	b085      	sub	sp, #20
 800a410:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a412:	f3ef 8305 	mrs	r3, IPSR
 800a416:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2b0f      	cmp	r3, #15
 800a41c:	d913      	bls.n	800a446 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a41e:	4a15      	ldr	r2, [pc, #84]	; (800a474 <vPortValidateInterruptPriority+0x68>)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	4413      	add	r3, r2
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a428:	4b13      	ldr	r3, [pc, #76]	; (800a478 <vPortValidateInterruptPriority+0x6c>)
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	7afa      	ldrb	r2, [r7, #11]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d209      	bcs.n	800a446 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a436:	f383 8811 	msr	BASEPRI, r3
 800a43a:	f3bf 8f6f 	isb	sy
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	607b      	str	r3, [r7, #4]
 800a444:	e7fe      	b.n	800a444 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a446:	4b0d      	ldr	r3, [pc, #52]	; (800a47c <vPortValidateInterruptPriority+0x70>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a44e:	4b0c      	ldr	r3, [pc, #48]	; (800a480 <vPortValidateInterruptPriority+0x74>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	429a      	cmp	r2, r3
 800a454:	d909      	bls.n	800a46a <vPortValidateInterruptPriority+0x5e>
 800a456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45a:	f383 8811 	msr	BASEPRI, r3
 800a45e:	f3bf 8f6f 	isb	sy
 800a462:	f3bf 8f4f 	dsb	sy
 800a466:	603b      	str	r3, [r7, #0]
 800a468:	e7fe      	b.n	800a468 <vPortValidateInterruptPriority+0x5c>
	}
 800a46a:	bf00      	nop
 800a46c:	3714      	adds	r7, #20
 800a46e:	46bd      	mov	sp, r7
 800a470:	bc80      	pop	{r7}
 800a472:	4770      	bx	lr
 800a474:	e000e3f0 	.word	0xe000e3f0
 800a478:	20000d18 	.word	0x20000d18
 800a47c:	e000ed0c 	.word	0xe000ed0c
 800a480:	20000d1c 	.word	0x20000d1c

0800a484 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b08a      	sub	sp, #40	; 0x28
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a48c:	2300      	movs	r3, #0
 800a48e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a490:	f7fe fd02 	bl	8008e98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a494:	4b59      	ldr	r3, [pc, #356]	; (800a5fc <pvPortMalloc+0x178>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d101      	bne.n	800a4a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a49c:	f000 f910 	bl	800a6c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a4a0:	4b57      	ldr	r3, [pc, #348]	; (800a600 <pvPortMalloc+0x17c>)
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4013      	ands	r3, r2
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f040 808c 	bne.w	800a5c6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d01c      	beq.n	800a4ee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a4b4:	2208      	movs	r2, #8
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	4413      	add	r3, r2
 800a4ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f003 0307 	and.w	r3, r3, #7
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d013      	beq.n	800a4ee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f023 0307 	bic.w	r3, r3, #7
 800a4cc:	3308      	adds	r3, #8
 800a4ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f003 0307 	and.w	r3, r3, #7
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d009      	beq.n	800a4ee <pvPortMalloc+0x6a>
 800a4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4de:	f383 8811 	msr	BASEPRI, r3
 800a4e2:	f3bf 8f6f 	isb	sy
 800a4e6:	f3bf 8f4f 	dsb	sy
 800a4ea:	617b      	str	r3, [r7, #20]
 800a4ec:	e7fe      	b.n	800a4ec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d068      	beq.n	800a5c6 <pvPortMalloc+0x142>
 800a4f4:	4b43      	ldr	r3, [pc, #268]	; (800a604 <pvPortMalloc+0x180>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d863      	bhi.n	800a5c6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a4fe:	4b42      	ldr	r3, [pc, #264]	; (800a608 <pvPortMalloc+0x184>)
 800a500:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a502:	4b41      	ldr	r3, [pc, #260]	; (800a608 <pvPortMalloc+0x184>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a508:	e004      	b.n	800a514 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d903      	bls.n	800a526 <pvPortMalloc+0xa2>
 800a51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1f1      	bne.n	800a50a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a526:	4b35      	ldr	r3, [pc, #212]	; (800a5fc <pvPortMalloc+0x178>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d04a      	beq.n	800a5c6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a530:	6a3b      	ldr	r3, [r7, #32]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2208      	movs	r2, #8
 800a536:	4413      	add	r3, r2
 800a538:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	6a3b      	ldr	r3, [r7, #32]
 800a540:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a544:	685a      	ldr	r2, [r3, #4]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	1ad2      	subs	r2, r2, r3
 800a54a:	2308      	movs	r3, #8
 800a54c:	005b      	lsls	r3, r3, #1
 800a54e:	429a      	cmp	r2, r3
 800a550:	d91e      	bls.n	800a590 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4413      	add	r3, r2
 800a558:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	f003 0307 	and.w	r3, r3, #7
 800a560:	2b00      	cmp	r3, #0
 800a562:	d009      	beq.n	800a578 <pvPortMalloc+0xf4>
 800a564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a568:	f383 8811 	msr	BASEPRI, r3
 800a56c:	f3bf 8f6f 	isb	sy
 800a570:	f3bf 8f4f 	dsb	sy
 800a574:	613b      	str	r3, [r7, #16]
 800a576:	e7fe      	b.n	800a576 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57a:	685a      	ldr	r2, [r3, #4]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	1ad2      	subs	r2, r2, r3
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a58a:	69b8      	ldr	r0, [r7, #24]
 800a58c:	f000 f8fa 	bl	800a784 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a590:	4b1c      	ldr	r3, [pc, #112]	; (800a604 <pvPortMalloc+0x180>)
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	4a1a      	ldr	r2, [pc, #104]	; (800a604 <pvPortMalloc+0x180>)
 800a59c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a59e:	4b19      	ldr	r3, [pc, #100]	; (800a604 <pvPortMalloc+0x180>)
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	4b1a      	ldr	r3, [pc, #104]	; (800a60c <pvPortMalloc+0x188>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d203      	bcs.n	800a5b2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a5aa:	4b16      	ldr	r3, [pc, #88]	; (800a604 <pvPortMalloc+0x180>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a17      	ldr	r2, [pc, #92]	; (800a60c <pvPortMalloc+0x188>)
 800a5b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b4:	685a      	ldr	r2, [r3, #4]
 800a5b6:	4b12      	ldr	r3, [pc, #72]	; (800a600 <pvPortMalloc+0x17c>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	431a      	orrs	r2, r3
 800a5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a5c6:	f7fe fc75 	bl	8008eb4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d101      	bne.n	800a5d4 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800a5d0:	f7f6 fd32 	bl	8001038 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	f003 0307 	and.w	r3, r3, #7
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d009      	beq.n	800a5f2 <pvPortMalloc+0x16e>
 800a5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	60fb      	str	r3, [r7, #12]
 800a5f0:	e7fe      	b.n	800a5f0 <pvPortMalloc+0x16c>
	return pvReturn;
 800a5f2:	69fb      	ldr	r3, [r7, #28]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3728      	adds	r7, #40	; 0x28
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	20003528 	.word	0x20003528
 800a600:	20003534 	.word	0x20003534
 800a604:	2000352c 	.word	0x2000352c
 800a608:	20003520 	.word	0x20003520
 800a60c:	20003530 	.word	0x20003530

0800a610 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b086      	sub	sp, #24
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d046      	beq.n	800a6b0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a622:	2308      	movs	r3, #8
 800a624:	425b      	negs	r3, r3
 800a626:	697a      	ldr	r2, [r7, #20]
 800a628:	4413      	add	r3, r2
 800a62a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	685a      	ldr	r2, [r3, #4]
 800a634:	4b20      	ldr	r3, [pc, #128]	; (800a6b8 <vPortFree+0xa8>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4013      	ands	r3, r2
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d109      	bne.n	800a652 <vPortFree+0x42>
 800a63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a642:	f383 8811 	msr	BASEPRI, r3
 800a646:	f3bf 8f6f 	isb	sy
 800a64a:	f3bf 8f4f 	dsb	sy
 800a64e:	60fb      	str	r3, [r7, #12]
 800a650:	e7fe      	b.n	800a650 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d009      	beq.n	800a66e <vPortFree+0x5e>
 800a65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65e:	f383 8811 	msr	BASEPRI, r3
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	60bb      	str	r3, [r7, #8]
 800a66c:	e7fe      	b.n	800a66c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	685a      	ldr	r2, [r3, #4]
 800a672:	4b11      	ldr	r3, [pc, #68]	; (800a6b8 <vPortFree+0xa8>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4013      	ands	r3, r2
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d019      	beq.n	800a6b0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d115      	bne.n	800a6b0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	685a      	ldr	r2, [r3, #4]
 800a688:	4b0b      	ldr	r3, [pc, #44]	; (800a6b8 <vPortFree+0xa8>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	43db      	mvns	r3, r3
 800a68e:	401a      	ands	r2, r3
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a694:	f7fe fc00 	bl	8008e98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	685a      	ldr	r2, [r3, #4]
 800a69c:	4b07      	ldr	r3, [pc, #28]	; (800a6bc <vPortFree+0xac>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	4a06      	ldr	r2, [pc, #24]	; (800a6bc <vPortFree+0xac>)
 800a6a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a6a6:	6938      	ldr	r0, [r7, #16]
 800a6a8:	f000 f86c 	bl	800a784 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a6ac:	f7fe fc02 	bl	8008eb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a6b0:	bf00      	nop
 800a6b2:	3718      	adds	r7, #24
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	20003534 	.word	0x20003534
 800a6bc:	2000352c 	.word	0x2000352c

0800a6c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b085      	sub	sp, #20
 800a6c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a6c6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a6ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a6cc:	4b27      	ldr	r3, [pc, #156]	; (800a76c <prvHeapInit+0xac>)
 800a6ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f003 0307 	and.w	r3, r3, #7
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00c      	beq.n	800a6f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	3307      	adds	r3, #7
 800a6de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f023 0307 	bic.w	r3, r3, #7
 800a6e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a6e8:	68ba      	ldr	r2, [r7, #8]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	1ad3      	subs	r3, r2, r3
 800a6ee:	4a1f      	ldr	r2, [pc, #124]	; (800a76c <prvHeapInit+0xac>)
 800a6f0:	4413      	add	r3, r2
 800a6f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a6f8:	4a1d      	ldr	r2, [pc, #116]	; (800a770 <prvHeapInit+0xb0>)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a6fe:	4b1c      	ldr	r3, [pc, #112]	; (800a770 <prvHeapInit+0xb0>)
 800a700:	2200      	movs	r2, #0
 800a702:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	68ba      	ldr	r2, [r7, #8]
 800a708:	4413      	add	r3, r2
 800a70a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a70c:	2208      	movs	r2, #8
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	1a9b      	subs	r3, r3, r2
 800a712:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f023 0307 	bic.w	r3, r3, #7
 800a71a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	4a15      	ldr	r2, [pc, #84]	; (800a774 <prvHeapInit+0xb4>)
 800a720:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a722:	4b14      	ldr	r3, [pc, #80]	; (800a774 <prvHeapInit+0xb4>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2200      	movs	r2, #0
 800a728:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a72a:	4b12      	ldr	r3, [pc, #72]	; (800a774 <prvHeapInit+0xb4>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2200      	movs	r2, #0
 800a730:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	68fa      	ldr	r2, [r7, #12]
 800a73a:	1ad2      	subs	r2, r2, r3
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a740:	4b0c      	ldr	r3, [pc, #48]	; (800a774 <prvHeapInit+0xb4>)
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	4a0a      	ldr	r2, [pc, #40]	; (800a778 <prvHeapInit+0xb8>)
 800a74e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	4a09      	ldr	r2, [pc, #36]	; (800a77c <prvHeapInit+0xbc>)
 800a756:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a758:	4b09      	ldr	r3, [pc, #36]	; (800a780 <prvHeapInit+0xc0>)
 800a75a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a75e:	601a      	str	r2, [r3, #0]
}
 800a760:	bf00      	nop
 800a762:	3714      	adds	r7, #20
 800a764:	46bd      	mov	sp, r7
 800a766:	bc80      	pop	{r7}
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	20000d20 	.word	0x20000d20
 800a770:	20003520 	.word	0x20003520
 800a774:	20003528 	.word	0x20003528
 800a778:	20003530 	.word	0x20003530
 800a77c:	2000352c 	.word	0x2000352c
 800a780:	20003534 	.word	0x20003534

0800a784 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a784:	b480      	push	{r7}
 800a786:	b085      	sub	sp, #20
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a78c:	4b27      	ldr	r3, [pc, #156]	; (800a82c <prvInsertBlockIntoFreeList+0xa8>)
 800a78e:	60fb      	str	r3, [r7, #12]
 800a790:	e002      	b.n	800a798 <prvInsertBlockIntoFreeList+0x14>
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	60fb      	str	r3, [r7, #12]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d8f7      	bhi.n	800a792 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	68ba      	ldr	r2, [r7, #8]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d108      	bne.n	800a7c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	685a      	ldr	r2, [r3, #4]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	441a      	add	r2, r3
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	68ba      	ldr	r2, [r7, #8]
 800a7d0:	441a      	add	r2, r3
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d118      	bne.n	800a80c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	4b14      	ldr	r3, [pc, #80]	; (800a830 <prvInsertBlockIntoFreeList+0xac>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d00d      	beq.n	800a802 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	685a      	ldr	r2, [r3, #4]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	441a      	add	r2, r3
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	601a      	str	r2, [r3, #0]
 800a800:	e008      	b.n	800a814 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a802:	4b0b      	ldr	r3, [pc, #44]	; (800a830 <prvInsertBlockIntoFreeList+0xac>)
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	601a      	str	r2, [r3, #0]
 800a80a:	e003      	b.n	800a814 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a814:	68fa      	ldr	r2, [r7, #12]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d002      	beq.n	800a822 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a822:	bf00      	nop
 800a824:	3714      	adds	r7, #20
 800a826:	46bd      	mov	sp, r7
 800a828:	bc80      	pop	{r7}
 800a82a:	4770      	bx	lr
 800a82c:	20003520 	.word	0x20003520
 800a830:	20003528 	.word	0x20003528

0800a834 <__libc_init_array>:
 800a834:	b570      	push	{r4, r5, r6, lr}
 800a836:	2500      	movs	r5, #0
 800a838:	4e0c      	ldr	r6, [pc, #48]	; (800a86c <__libc_init_array+0x38>)
 800a83a:	4c0d      	ldr	r4, [pc, #52]	; (800a870 <__libc_init_array+0x3c>)
 800a83c:	1ba4      	subs	r4, r4, r6
 800a83e:	10a4      	asrs	r4, r4, #2
 800a840:	42a5      	cmp	r5, r4
 800a842:	d109      	bne.n	800a858 <__libc_init_array+0x24>
 800a844:	f000 f82e 	bl	800a8a4 <_init>
 800a848:	2500      	movs	r5, #0
 800a84a:	4e0a      	ldr	r6, [pc, #40]	; (800a874 <__libc_init_array+0x40>)
 800a84c:	4c0a      	ldr	r4, [pc, #40]	; (800a878 <__libc_init_array+0x44>)
 800a84e:	1ba4      	subs	r4, r4, r6
 800a850:	10a4      	asrs	r4, r4, #2
 800a852:	42a5      	cmp	r5, r4
 800a854:	d105      	bne.n	800a862 <__libc_init_array+0x2e>
 800a856:	bd70      	pop	{r4, r5, r6, pc}
 800a858:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a85c:	4798      	blx	r3
 800a85e:	3501      	adds	r5, #1
 800a860:	e7ee      	b.n	800a840 <__libc_init_array+0xc>
 800a862:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a866:	4798      	blx	r3
 800a868:	3501      	adds	r5, #1
 800a86a:	e7f2      	b.n	800a852 <__libc_init_array+0x1e>
 800a86c:	0800ac7c 	.word	0x0800ac7c
 800a870:	0800ac7c 	.word	0x0800ac7c
 800a874:	0800ac7c 	.word	0x0800ac7c
 800a878:	0800ac80 	.word	0x0800ac80

0800a87c <memcpy>:
 800a87c:	b510      	push	{r4, lr}
 800a87e:	1e43      	subs	r3, r0, #1
 800a880:	440a      	add	r2, r1
 800a882:	4291      	cmp	r1, r2
 800a884:	d100      	bne.n	800a888 <memcpy+0xc>
 800a886:	bd10      	pop	{r4, pc}
 800a888:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a88c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a890:	e7f7      	b.n	800a882 <memcpy+0x6>

0800a892 <memset>:
 800a892:	4603      	mov	r3, r0
 800a894:	4402      	add	r2, r0
 800a896:	4293      	cmp	r3, r2
 800a898:	d100      	bne.n	800a89c <memset+0xa>
 800a89a:	4770      	bx	lr
 800a89c:	f803 1b01 	strb.w	r1, [r3], #1
 800a8a0:	e7f9      	b.n	800a896 <memset+0x4>
	...

0800a8a4 <_init>:
 800a8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a6:	bf00      	nop
 800a8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8aa:	bc08      	pop	{r3}
 800a8ac:	469e      	mov	lr, r3
 800a8ae:	4770      	bx	lr

0800a8b0 <_fini>:
 800a8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8b2:	bf00      	nop
 800a8b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8b6:	bc08      	pop	{r3}
 800a8b8:	469e      	mov	lr, r3
 800a8ba:	4770      	bx	lr
