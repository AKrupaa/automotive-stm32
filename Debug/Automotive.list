
Automotive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007524  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08007664  08007664  00017664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007754  08007754  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08007754  08007754  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007754  08007754  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007754  08007754  00017754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007758  08007758  00017758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800775c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b44  20000064  080077c0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ba8  080077c0  00021ba8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf3f  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bd8  00000000  00000000  0003bfcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001750  00000000  00000000  0003fba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001510  00000000  00000000  000412f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a9d9  00000000  00000000  00042808  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015a14  00000000  00000000  0005d1e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a66ce  00000000  00000000  00072bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001192c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d74  00000000  00000000  00119340  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000064 	.word	0x20000064
 800015c:	00000000 	.word	0x00000000
 8000160:	0800764c 	.word	0x0800764c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000068 	.word	0x20000068
 800017c:	0800764c 	.word	0x0800764c

08000180 <h_bridge_init>:
 *  Created on: Mar 28, 2021
 *      Author: Arkadiusz
 */
#include "h_bridge.h"

bool h_bridge_init(void) {
 8000180:	b480      	push	{r7}
 8000182:	af00      	add	r7, sp, #0
	;
	return true;
 8000184:	2301      	movs	r3, #1
}
 8000186:	4618      	mov	r0, r3
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr

0800018e <bluetooth_le_init>:
 *      Author: Arkadiusz
 */

#include "bluetooth_le.h"

bool bluetooth_le_init(void) {
 800018e:	b480      	push	{r7}
 8000190:	af00      	add	r7, sp, #0
	;
	return true;
 8000192:	2301      	movs	r3, #1
}
 8000194:	4618      	mov	r0, r3
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr

0800019c <eeprom_init>:
 *      Author: Arkadiusz
 */

#include "eeprom.h"

bool eeprom_init(void) {
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
	;
	return true;
 80001a0:	2301      	movs	r3, #1
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr

080001aa <hall_init>:
 *  Created on: Mar 28, 2021
 *      Author: Arkadiusz
 */

#include "hall.h"
bool hall_init(void) {
 80001aa:	b480      	push	{r7}
 80001ac:	af00      	add	r7, sp, #0
	;
	return true;
 80001ae:	2301      	movs	r3, #1
}
 80001b0:	4618      	mov	r0, r3
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bc80      	pop	{r7}
 80001b6:	4770      	bx	lr

080001b8 <magnetometer_init>:
 *
 *  Created on: Mar 28, 2021
 *      Author: Arkadiusz
 */
#include "magnetometer.h"
bool magnetometer_init(void) {
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	;
	return true;
 80001bc:	2301      	movs	r3, #1
}
 80001be:	4618      	mov	r0, r3
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <proximity_init>:
 *  Created on: Mar 28, 2021
 *      Author: Arkadiusz
 */

#include "proximity.h"
bool proximity_init(void) {
 80001c6:	b480      	push	{r7}
 80001c8:	af00      	add	r7, sp, #0
	;
	return true;
 80001ca:	2301      	movs	r3, #1
}
 80001cc:	4618      	mov	r0, r3
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr

080001d4 <optocoupler_init>:
 *  Created on: Mar 28, 2021
 *      Author: Arkadiusz
 */

#include "optocoupler.h"
bool optocoupler_init(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	;
	return true;
 80001d8:	2301      	movs	r3, #1
}
 80001da:	4618      	mov	r0, r3
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
	...

080001e4 <device_init>:
 *      Author: Arkadiusz
 */

#include "device_init.h"
#include "stdint.h"
void device_init(void) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0

	uint16_t successCnt = 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	80fb      	strh	r3, [r7, #6]
	uint16_t modsToInit = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < mod_N; i++) {
 80001f2:	2300      	movs	r3, #0
 80001f4:	807b      	strh	r3, [r7, #2]
 80001f6:	e01f      	b.n	8000238 <device_init+0x54>
		if (modules_cfg[i].active == true) {
 80001f8:	887a      	ldrh	r2, [r7, #2]
 80001fa:	4915      	ldr	r1, [pc, #84]	; (8000250 <device_init+0x6c>)
 80001fc:	4613      	mov	r3, r2
 80001fe:	005b      	lsls	r3, r3, #1
 8000200:	4413      	add	r3, r2
 8000202:	009b      	lsls	r3, r3, #2
 8000204:	440b      	add	r3, r1
 8000206:	3308      	adds	r3, #8
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d00e      	beq.n	800022c <device_init+0x48>

			if (modules_cfg[i].init_function() == true) {
 800020e:	887a      	ldrh	r2, [r7, #2]
 8000210:	490f      	ldr	r1, [pc, #60]	; (8000250 <device_init+0x6c>)
 8000212:	4613      	mov	r3, r2
 8000214:	005b      	lsls	r3, r3, #1
 8000216:	4413      	add	r3, r2
 8000218:	009b      	lsls	r3, r3, #2
 800021a:	440b      	add	r3, r1
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4798      	blx	r3
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d002      	beq.n	800022c <device_init+0x48>
				successCnt++;
 8000226:	88fb      	ldrh	r3, [r7, #6]
 8000228:	3301      	adds	r3, #1
 800022a:	80fb      	strh	r3, [r7, #6]
			}
		}

		modsToInit++;
 800022c:	88bb      	ldrh	r3, [r7, #4]
 800022e:	3301      	adds	r3, #1
 8000230:	80bb      	strh	r3, [r7, #4]
	for (uint16_t i = 0; i < mod_N; i++) {
 8000232:	887b      	ldrh	r3, [r7, #2]
 8000234:	3301      	adds	r3, #1
 8000236:	807b      	strh	r3, [r7, #2]
 8000238:	887b      	ldrh	r3, [r7, #2]
 800023a:	2b06      	cmp	r3, #6
 800023c:	d9dc      	bls.n	80001f8 <device_init+0x14>
	}

	if (modsToInit != successCnt) {
 800023e:	88ba      	ldrh	r2, [r7, #4]
 8000240:	88fb      	ldrh	r3, [r7, #6]
 8000242:	429a      	cmp	r2, r3
 8000244:	d000      	beq.n	8000248 <device_init+0x64>
		// some kind of error
		while (1)
 8000246:	e7fe      	b.n	8000246 <device_init+0x62>
			; //TODO: call some error handler
	}

}
 8000248:	bf00      	nop
 800024a:	3708      	adds	r7, #8
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000000 	.word	0x20000000

08000254 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	605a      	str	r2, [r3, #4]
 8000262:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000264:	4b25      	ldr	r3, [pc, #148]	; (80002fc <MX_ADC_Init+0xa8>)
 8000266:	4a26      	ldr	r2, [pc, #152]	; (8000300 <MX_ADC_Init+0xac>)
 8000268:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800026a:	4b24      	ldr	r3, [pc, #144]	; (80002fc <MX_ADC_Init+0xa8>)
 800026c:	2200      	movs	r2, #0
 800026e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000270:	4b22      	ldr	r3, [pc, #136]	; (80002fc <MX_ADC_Init+0xa8>)
 8000272:	2200      	movs	r2, #0
 8000274:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000276:	4b21      	ldr	r3, [pc, #132]	; (80002fc <MX_ADC_Init+0xa8>)
 8000278:	2200      	movs	r2, #0
 800027a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800027c:	4b1f      	ldr	r3, [pc, #124]	; (80002fc <MX_ADC_Init+0xa8>)
 800027e:	2200      	movs	r2, #0
 8000280:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000282:	4b1e      	ldr	r3, [pc, #120]	; (80002fc <MX_ADC_Init+0xa8>)
 8000284:	2200      	movs	r2, #0
 8000286:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000288:	4b1c      	ldr	r3, [pc, #112]	; (80002fc <MX_ADC_Init+0xa8>)
 800028a:	2200      	movs	r2, #0
 800028c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800028e:	4b1b      	ldr	r3, [pc, #108]	; (80002fc <MX_ADC_Init+0xa8>)
 8000290:	2200      	movs	r2, #0
 8000292:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000294:	4b19      	ldr	r3, [pc, #100]	; (80002fc <MX_ADC_Init+0xa8>)
 8000296:	2200      	movs	r2, #0
 8000298:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 800029a:	4b18      	ldr	r3, [pc, #96]	; (80002fc <MX_ADC_Init+0xa8>)
 800029c:	2200      	movs	r2, #0
 800029e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80002a2:	4b16      	ldr	r3, [pc, #88]	; (80002fc <MX_ADC_Init+0xa8>)
 80002a4:	2201      	movs	r2, #1
 80002a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80002a8:	4b14      	ldr	r3, [pc, #80]	; (80002fc <MX_ADC_Init+0xa8>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002b0:	4b12      	ldr	r3, [pc, #72]	; (80002fc <MX_ADC_Init+0xa8>)
 80002b2:	2210      	movs	r2, #16
 80002b4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002b6:	4b11      	ldr	r3, [pc, #68]	; (80002fc <MX_ADC_Init+0xa8>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80002bc:	4b0f      	ldr	r3, [pc, #60]	; (80002fc <MX_ADC_Init+0xa8>)
 80002be:	2200      	movs	r2, #0
 80002c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80002c4:	480d      	ldr	r0, [pc, #52]	; (80002fc <MX_ADC_Init+0xa8>)
 80002c6:	f000 fe1d 	bl	8000f04 <HAL_ADC_Init>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 80002d0:	f000 fa86 	bl	80007e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002d4:	2301      	movs	r3, #1
 80002d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002d8:	2301      	movs	r3, #1
 80002da:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 80002dc:	2300      	movs	r3, #0
 80002de:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	4619      	mov	r1, r3
 80002e4:	4805      	ldr	r0, [pc, #20]	; (80002fc <MX_ADC_Init+0xa8>)
 80002e6:	f000 ff53 	bl	8001190 <HAL_ADC_ConfigChannel>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 80002f0:	f000 fa76 	bl	80007e0 <Error_Handler>
  }

}
 80002f4:	bf00      	nop
 80002f6:	3710      	adds	r7, #16
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20001988 	.word	0x20001988
 8000300:	40012400 	.word	0x40012400

08000304 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b08c      	sub	sp, #48	; 0x30
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030c:	f107 031c 	add.w	r3, r7, #28
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	609a      	str	r2, [r3, #8]
 8000318:	60da      	str	r2, [r3, #12]
 800031a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a2d      	ldr	r2, [pc, #180]	; (80003d8 <HAL_ADC_MspInit+0xd4>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d154      	bne.n	80003d0 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <HAL_ADC_MspInit+0xd8>)
 8000328:	6a1b      	ldr	r3, [r3, #32]
 800032a:	4a2c      	ldr	r2, [pc, #176]	; (80003dc <HAL_ADC_MspInit+0xd8>)
 800032c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000330:	6213      	str	r3, [r2, #32]
 8000332:	4b2a      	ldr	r3, [pc, #168]	; (80003dc <HAL_ADC_MspInit+0xd8>)
 8000334:	6a1b      	ldr	r3, [r3, #32]
 8000336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800033a:	61bb      	str	r3, [r7, #24]
 800033c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800033e:	4b27      	ldr	r3, [pc, #156]	; (80003dc <HAL_ADC_MspInit+0xd8>)
 8000340:	69db      	ldr	r3, [r3, #28]
 8000342:	4a26      	ldr	r2, [pc, #152]	; (80003dc <HAL_ADC_MspInit+0xd8>)
 8000344:	f043 0304 	orr.w	r3, r3, #4
 8000348:	61d3      	str	r3, [r2, #28]
 800034a:	4b24      	ldr	r3, [pc, #144]	; (80003dc <HAL_ADC_MspInit+0xd8>)
 800034c:	69db      	ldr	r3, [r3, #28]
 800034e:	f003 0304 	and.w	r3, r3, #4
 8000352:	617b      	str	r3, [r7, #20]
 8000354:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000356:	4b21      	ldr	r3, [pc, #132]	; (80003dc <HAL_ADC_MspInit+0xd8>)
 8000358:	69db      	ldr	r3, [r3, #28]
 800035a:	4a20      	ldr	r2, [pc, #128]	; (80003dc <HAL_ADC_MspInit+0xd8>)
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	61d3      	str	r3, [r2, #28]
 8000362:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <HAL_ADC_MspInit+0xd8>)
 8000364:	69db      	ldr	r3, [r3, #28]
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	613b      	str	r3, [r7, #16]
 800036c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800036e:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <HAL_ADC_MspInit+0xd8>)
 8000370:	69db      	ldr	r3, [r3, #28]
 8000372:	4a1a      	ldr	r2, [pc, #104]	; (80003dc <HAL_ADC_MspInit+0xd8>)
 8000374:	f043 0302 	orr.w	r3, r3, #2
 8000378:	61d3      	str	r3, [r2, #28]
 800037a:	4b18      	ldr	r3, [pc, #96]	; (80003dc <HAL_ADC_MspInit+0xd8>)
 800037c:	69db      	ldr	r3, [r3, #28]
 800037e:	f003 0302 	and.w	r3, r3, #2
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA7     ------> ADC_IN7
    PB15     ------> ADC_IN21 
    */
    GPIO_InitStruct.Pin = ADC_BATTERY_VOLTAGE_Pin;
 8000386:	2301      	movs	r3, #1
 8000388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800038a:	2303      	movs	r3, #3
 800038c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038e:	2300      	movs	r3, #0
 8000390:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_BATTERY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8000392:	f107 031c 	add.w	r3, r7, #28
 8000396:	4619      	mov	r1, r3
 8000398:	4811      	ldr	r0, [pc, #68]	; (80003e0 <HAL_ADC_MspInit+0xdc>)
 800039a:	f001 f993 	bl	80016c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_PHOTO_BACK_Pin|ADC_OPTO_LEFT_Pin|ADC_PHOTO_FRONT_Pin;
 800039e:	2386      	movs	r3, #134	; 0x86
 80003a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003a2:	2303      	movs	r3, #3
 80003a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a6:	2300      	movs	r3, #0
 80003a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003aa:	f107 031c 	add.w	r3, r7, #28
 80003ae:	4619      	mov	r1, r3
 80003b0:	480c      	ldr	r0, [pc, #48]	; (80003e4 <HAL_ADC_MspInit+0xe0>)
 80003b2:	f001 f987 	bl	80016c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_OPTO_RIGHT_Pin;
 80003b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003bc:	2303      	movs	r3, #3
 80003be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c0:	2300      	movs	r3, #0
 80003c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_OPTO_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80003c4:	f107 031c 	add.w	r3, r7, #28
 80003c8:	4619      	mov	r1, r3
 80003ca:	4807      	ldr	r0, [pc, #28]	; (80003e8 <HAL_ADC_MspInit+0xe4>)
 80003cc:	f001 f97a 	bl	80016c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003d0:	bf00      	nop
 80003d2:	3730      	adds	r7, #48	; 0x30
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40012400 	.word	0x40012400
 80003dc:	40023800 	.word	0x40023800
 80003e0:	40020800 	.word	0x40020800
 80003e4:	40020000 	.word	0x40020000
 80003e8:	40020400 	.word	0x40020400

080003ec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80003f0:	4a04      	ldr	r2, [pc, #16]	; (8000404 <MX_FREERTOS_Init+0x18>)
 80003f2:	2100      	movs	r1, #0
 80003f4:	4804      	ldr	r0, [pc, #16]	; (8000408 <MX_FREERTOS_Init+0x1c>)
 80003f6:	f004 fcc1 	bl	8004d7c <osThreadNew>
 80003fa:	4602      	mov	r2, r0
 80003fc:	4b03      	ldr	r3, [pc, #12]	; (800040c <MX_FREERTOS_Init+0x20>)
 80003fe:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	0800770c 	.word	0x0800770c
 8000408:	08000411 	.word	0x08000411
 800040c:	200019dc 	.word	0x200019dc

08000410 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000418:	2001      	movs	r0, #1
 800041a:	f004 fd59 	bl	8004ed0 <osDelay>
 800041e:	e7fb      	b.n	8000418 <StartDefaultTask+0x8>

08000420 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b08a      	sub	sp, #40	; 0x28
 8000424:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000426:	f107 0314 	add.w	r3, r7, #20
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]
 8000434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000436:	4b67      	ldr	r3, [pc, #412]	; (80005d4 <MX_GPIO_Init+0x1b4>)
 8000438:	69db      	ldr	r3, [r3, #28]
 800043a:	4a66      	ldr	r2, [pc, #408]	; (80005d4 <MX_GPIO_Init+0x1b4>)
 800043c:	f043 0304 	orr.w	r3, r3, #4
 8000440:	61d3      	str	r3, [r2, #28]
 8000442:	4b64      	ldr	r3, [pc, #400]	; (80005d4 <MX_GPIO_Init+0x1b4>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	f003 0304 	and.w	r3, r3, #4
 800044a:	613b      	str	r3, [r7, #16]
 800044c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800044e:	4b61      	ldr	r3, [pc, #388]	; (80005d4 <MX_GPIO_Init+0x1b4>)
 8000450:	69db      	ldr	r3, [r3, #28]
 8000452:	4a60      	ldr	r2, [pc, #384]	; (80005d4 <MX_GPIO_Init+0x1b4>)
 8000454:	f043 0320 	orr.w	r3, r3, #32
 8000458:	61d3      	str	r3, [r2, #28]
 800045a:	4b5e      	ldr	r3, [pc, #376]	; (80005d4 <MX_GPIO_Init+0x1b4>)
 800045c:	69db      	ldr	r3, [r3, #28]
 800045e:	f003 0320 	and.w	r3, r3, #32
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000466:	4b5b      	ldr	r3, [pc, #364]	; (80005d4 <MX_GPIO_Init+0x1b4>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	4a5a      	ldr	r2, [pc, #360]	; (80005d4 <MX_GPIO_Init+0x1b4>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	61d3      	str	r3, [r2, #28]
 8000472:	4b58      	ldr	r3, [pc, #352]	; (80005d4 <MX_GPIO_Init+0x1b4>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047e:	4b55      	ldr	r3, [pc, #340]	; (80005d4 <MX_GPIO_Init+0x1b4>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	4a54      	ldr	r2, [pc, #336]	; (80005d4 <MX_GPIO_Init+0x1b4>)
 8000484:	f043 0302 	orr.w	r3, r3, #2
 8000488:	61d3      	str	r3, [r2, #28]
 800048a:	4b52      	ldr	r3, [pc, #328]	; (80005d4 <MX_GPIO_Init+0x1b4>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	f003 0302 	and.w	r3, r3, #2
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000496:	4b4f      	ldr	r3, [pc, #316]	; (80005d4 <MX_GPIO_Init+0x1b4>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	4a4e      	ldr	r2, [pc, #312]	; (80005d4 <MX_GPIO_Init+0x1b4>)
 800049c:	f043 0308 	orr.w	r3, r3, #8
 80004a0:	61d3      	str	r3, [r2, #28]
 80004a2:	4b4c      	ldr	r3, [pc, #304]	; (80005d4 <MX_GPIO_Init+0x1b4>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	f003 0308 	and.w	r3, r3, #8
 80004aa:	603b      	str	r3, [r7, #0]
 80004ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_INa_ENGINE_LEFT_Pin|OUT_INnb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_EN_Pin 
 80004ae:	2200      	movs	r2, #0
 80004b0:	f640 617e 	movw	r1, #3710	; 0xe7e
 80004b4:	4848      	ldr	r0, [pc, #288]	; (80005d8 <MX_GPIO_Init+0x1b8>)
 80004b6:	f001 fa93 	bl	80019e0 <HAL_GPIO_WritePin>
                          |OUT_BLE_TEST_Pin|OUT_ULTRASOUND_TRIG_Pin|OUT_INb_RIGHT_Pin|OUT_LED1_Pin 
                          |OUT_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 80004ba:	2200      	movs	r2, #0
 80004bc:	f248 7108 	movw	r1, #34568	; 0x8708
 80004c0:	4846      	ldr	r0, [pc, #280]	; (80005dc <MX_GPIO_Init+0x1bc>)
 80004c2:	f001 fa8d 	bl	80019e0 <HAL_GPIO_WritePin>
                          |OUT_LED0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12;
 80004c6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80004ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004cc:	2303      	movs	r3, #3
 80004ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004d4:	f107 0314 	add.w	r3, r7, #20
 80004d8:	4619      	mov	r1, r3
 80004da:	483f      	ldr	r0, [pc, #252]	; (80005d8 <MX_GPIO_Init+0x1b8>)
 80004dc:	f001 f8f2 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = OUT_INa_ENGINE_LEFT_Pin|OUT_INnb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_EN_Pin 
 80004e0:	f640 637e 	movw	r3, #3710	; 0xe7e
 80004e4:	617b      	str	r3, [r7, #20]
                          |OUT_BLE_TEST_Pin|OUT_ULTRASOUND_TRIG_Pin|OUT_INb_RIGHT_Pin|OUT_LED1_Pin 
                          |OUT_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e6:	2301      	movs	r3, #1
 80004e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	2300      	movs	r3, #0
 80004ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ee:	2300      	movs	r3, #0
 80004f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004f2:	f107 0314 	add.w	r3, r7, #20
 80004f6:	4619      	mov	r1, r3
 80004f8:	4837      	ldr	r0, [pc, #220]	; (80005d8 <MX_GPIO_Init+0x1b8>)
 80004fa:	f001 f8e3 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 80004fe:	f248 7308 	movw	r3, #34568	; 0x8708
 8000502:	617b      	str	r3, [r7, #20]
                          |OUT_LED0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000504:	2301      	movs	r3, #1
 8000506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	2300      	movs	r3, #0
 800050a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050c:	2300      	movs	r3, #0
 800050e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000510:	f107 0314 	add.w	r3, r7, #20
 8000514:	4619      	mov	r1, r3
 8000516:	4831      	ldr	r0, [pc, #196]	; (80005dc <MX_GPIO_Init+0x1bc>)
 8000518:	f001 f8d4 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 800051c:	f241 0370 	movw	r3, #4208	; 0x1070
 8000520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000522:	2303      	movs	r3, #3
 8000524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	2300      	movs	r3, #0
 8000528:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052a:	f107 0314 	add.w	r3, r7, #20
 800052e:	4619      	mov	r1, r3
 8000530:	482a      	ldr	r0, [pc, #168]	; (80005dc <MX_GPIO_Init+0x1bc>)
 8000532:	f001 f8c7 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IRQ_BLE_Pin|IRQ_ULTRASOUND_ECHO_Pin;
 8000536:	2303      	movs	r3, #3
 8000538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800053a:	4b29      	ldr	r3, [pc, #164]	; (80005e0 <MX_GPIO_Init+0x1c0>)
 800053c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	4619      	mov	r1, r3
 8000548:	4826      	ldr	r0, [pc, #152]	; (80005e4 <MX_GPIO_Init+0x1c4>)
 800054a:	f001 f8bb 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB3 PB4 
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 800054e:	f242 333c 	movw	r3, #9020	; 0x233c
 8000552:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000554:	2303      	movs	r3, #3
 8000556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055c:	f107 0314 	add.w	r3, r7, #20
 8000560:	4619      	mov	r1, r3
 8000562:	4820      	ldr	r0, [pc, #128]	; (80005e4 <MX_GPIO_Init+0x1c4>)
 8000564:	f001 f8ae 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_RIGHT_Pin;
 8000568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800056c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056e:	2300      	movs	r3, #0
 8000570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	4619      	mov	r1, r3
 800057c:	4819      	ldr	r0, [pc, #100]	; (80005e4 <MX_GPIO_Init+0x1c4>)
 800057e:	f001 f8a1 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_HALL_FRONT_Pin;
 8000582:	2380      	movs	r3, #128	; 0x80
 8000584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN_HALL_FRONT_GPIO_Port, &GPIO_InitStruct);
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	4619      	mov	r1, r3
 8000594:	4810      	ldr	r0, [pc, #64]	; (80005d8 <MX_GPIO_Init+0x1b8>)
 8000596:	f001 f895 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_RIGHTA11_Pin;
 800059a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800059e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_RIGHTA11_GPIO_Port, &GPIO_InitStruct);
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	4619      	mov	r1, r3
 80005ae:	480b      	ldr	r0, [pc, #44]	; (80005dc <MX_GPIO_Init+0x1bc>)
 80005b0:	f001 f888 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005b4:	2304      	movs	r3, #4
 80005b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b8:	2303      	movs	r3, #3
 80005ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4619      	mov	r1, r3
 80005c6:	4808      	ldr	r0, [pc, #32]	; (80005e8 <MX_GPIO_Init+0x1c8>)
 80005c8:	f001 f87c 	bl	80016c4 <HAL_GPIO_Init>

}
 80005cc:	bf00      	nop
 80005ce:	3728      	adds	r7, #40	; 0x28
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40020800 	.word	0x40020800
 80005dc:	40020000 	.word	0x40020000
 80005e0:	10110000 	.word	0x10110000
 80005e4:	40020400 	.word	0x40020400
 80005e8:	40020c00 	.word	0x40020c00

080005ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_I2C1_Init+0x50>)
 80005f2:	4a13      	ldr	r2, [pc, #76]	; (8000640 <MX_I2C1_Init+0x54>)
 80005f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_I2C1_Init+0x50>)
 80005f8:	4a12      	ldr	r2, [pc, #72]	; (8000644 <MX_I2C1_Init+0x58>)
 80005fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_I2C1_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_I2C1_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_I2C1_Init+0x50>)
 800060a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800060e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <MX_I2C1_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_I2C1_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000628:	4804      	ldr	r0, [pc, #16]	; (800063c <MX_I2C1_Init+0x50>)
 800062a:	f001 f9f1 	bl	8001a10 <HAL_I2C_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000634:	f000 f8d4 	bl	80007e0 <Error_Handler>
  }

}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200019e0 	.word	0x200019e0
 8000640:	40005400 	.word	0x40005400
 8000644:	000186a0 	.word	0x000186a0

08000648 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a1b      	ldr	r2, [pc, #108]	; (80006d4 <HAL_I2C_MspInit+0x8c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d12f      	bne.n	80006ca <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800066a:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <HAL_I2C_MspInit+0x90>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	4a1a      	ldr	r2, [pc, #104]	; (80006d8 <HAL_I2C_MspInit+0x90>)
 8000670:	f043 0302 	orr.w	r3, r3, #2
 8000674:	61d3      	str	r3, [r2, #28]
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <HAL_I2C_MspInit+0x90>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	f003 0302 	and.w	r3, r3, #2
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000682:	23c0      	movs	r3, #192	; 0xc0
 8000684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000686:	2312      	movs	r3, #18
 8000688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800068a:	2301      	movs	r3, #1
 800068c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068e:	2303      	movs	r3, #3
 8000690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000692:	2304      	movs	r3, #4
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	480f      	ldr	r0, [pc, #60]	; (80006dc <HAL_I2C_MspInit+0x94>)
 800069e:	f001 f811 	bl	80016c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <HAL_I2C_MspInit+0x90>)
 80006a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a6:	4a0c      	ldr	r2, [pc, #48]	; (80006d8 <HAL_I2C_MspInit+0x90>)
 80006a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ac:	6253      	str	r3, [r2, #36]	; 0x24
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <HAL_I2C_MspInit+0x90>)
 80006b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2105      	movs	r1, #5
 80006be:	201f      	movs	r0, #31
 80006c0:	f000 ff87 	bl	80015d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80006c4:	201f      	movs	r0, #31
 80006c6:	f000 ffa0 	bl	800160a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006ca:	bf00      	nop
 80006cc:	3728      	adds	r7, #40	; 0x28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40005400 	.word	0x40005400
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40020400 	.word	0x40020400

080006e0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006e4:	f000 fbd9 	bl	8000e9a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006e8:	f000 f818 	bl	800071c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006ec:	f7ff fe98 	bl	8000420 <MX_GPIO_Init>
	MX_ADC_Init();
 80006f0:	f7ff fdb0 	bl	8000254 <MX_ADC_Init>
	MX_I2C1_Init();
 80006f4:	f7ff ff7a 	bl	80005ec <MX_I2C1_Init>
	MX_TIM2_Init();
 80006f8:	f000 f96c 	bl	80009d4 <MX_TIM2_Init>
	MX_TIM3_Init();
 80006fc:	f000 f9be 	bl	8000a7c <MX_TIM3_Init>
	MX_TIM9_Init();
 8000700:	f000 fa12 	bl	8000b28 <MX_TIM9_Init>
	MX_USART3_UART_Init();
 8000704:	f000 fb2e 	bl	8000d64 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	device_init();
 8000708:	f7ff fd6c 	bl	80001e4 <device_init>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize(); /* Call init function for freertos objects (in freertos.c) */
 800070c:	f004 fad0 	bl	8004cb0 <osKernelInitialize>
	MX_FREERTOS_Init();
 8000710:	f7ff fe6c 	bl	80003ec <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 8000714:	f004 fafe 	bl	8004d14 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000718:	e7fe      	b.n	8000718 <main+0x38>
	...

0800071c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b092      	sub	sp, #72	; 0x48
 8000720:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2234      	movs	r2, #52	; 0x34
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f006 ff85 	bl	800763a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000730:	463b      	mov	r3, r7
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073e:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <SystemClock_Config+0x9c>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000746:	4a1c      	ldr	r2, [pc, #112]	; (80007b8 <SystemClock_Config+0x9c>)
 8000748:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800074c:	6013      	str	r3, [r2, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800074e:	2303      	movs	r3, #3
 8000750:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000752:	2301      	movs	r3, #1
 8000754:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000756:	2301      	movs	r3, #1
 8000758:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075a:	2310      	movs	r3, #16
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075e:	2302      	movs	r3, #2
 8000760:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000762:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000766:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000768:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800076c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 800076e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000772:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4618      	mov	r0, r3
 800077a:	f002 fd1f 	bl	80031bc <HAL_RCC_OscConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x6c>
		Error_Handler();
 8000784:	f000 f82c 	bl	80007e0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000788:	230f      	movs	r3, #15
 800078a:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078c:	2303      	movs	r3, #3
 800078e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800079c:	463b      	mov	r3, r7
 800079e:	2101      	movs	r1, #1
 80007a0:	4618      	mov	r0, r3
 80007a2:	f003 f83b 	bl	800381c <HAL_RCC_ClockConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x94>
		Error_Handler();
 80007ac:	f000 f818 	bl	80007e0 <Error_Handler>
	}
}
 80007b0:	bf00      	nop
 80007b2:	3748      	adds	r7, #72	; 0x48
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40007000 	.word	0x40007000

080007bc <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a04      	ldr	r2, [pc, #16]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d101      	bne.n	80007d2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80007ce:	f000 fb7d 	bl	8000ecc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40000c00 	.word	0x40000c00

080007e0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <HAL_MspInit+0x64>)
 80007f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f6:	4a16      	ldr	r2, [pc, #88]	; (8000850 <HAL_MspInit+0x64>)
 80007f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007fc:	6253      	str	r3, [r2, #36]	; 0x24
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <HAL_MspInit+0x64>)
 8000800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000802:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <HAL_MspInit+0x64>)
 800080c:	6a1b      	ldr	r3, [r3, #32]
 800080e:	4a10      	ldr	r2, [pc, #64]	; (8000850 <HAL_MspInit+0x64>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6213      	str	r3, [r2, #32]
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <HAL_MspInit+0x64>)
 8000818:	6a1b      	ldr	r3, [r3, #32]
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <HAL_MspInit+0x64>)
 8000824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000826:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <HAL_MspInit+0x64>)
 8000828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082c:	6253      	str	r3, [r2, #36]	; 0x24
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <HAL_MspInit+0x64>)
 8000830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	210f      	movs	r1, #15
 800083e:	f06f 0001 	mvn.w	r0, #1
 8000842:	f000 fec6 	bl	80015d2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800

08000854 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08c      	sub	sp, #48	; 0x30
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8000864:	2200      	movs	r2, #0
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	202e      	movs	r0, #46	; 0x2e
 800086a:	f000 feb2 	bl	80015d2 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 800086e:	202e      	movs	r0, #46	; 0x2e
 8000870:	f000 fecb 	bl	800160a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <HAL_InitTick+0x9c>)
 8000876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000878:	4a1d      	ldr	r2, [pc, #116]	; (80008f0 <HAL_InitTick+0x9c>)
 800087a:	f043 0308 	orr.w	r3, r3, #8
 800087e:	6253      	str	r3, [r2, #36]	; 0x24
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <HAL_InitTick+0x9c>)
 8000882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000884:	f003 0308 	and.w	r3, r3, #8
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800088c:	f107 0210 	add.w	r2, r7, #16
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4611      	mov	r1, r2
 8000896:	4618      	mov	r0, r3
 8000898:	f003 f97e 	bl	8003b98 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800089c:	f003 f954 	bl	8003b48 <HAL_RCC_GetPCLK1Freq>
 80008a0:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80008a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a4:	4a13      	ldr	r2, [pc, #76]	; (80008f4 <HAL_InitTick+0xa0>)
 80008a6:	fba2 2303 	umull	r2, r3, r2, r3
 80008aa:	0c9b      	lsrs	r3, r3, #18
 80008ac:	3b01      	subs	r3, #1
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <HAL_InitTick+0xa4>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <HAL_InitTick+0xa8>)
 80008b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <HAL_InitTick+0xa4>)
 80008b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008bc:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <HAL_InitTick+0xa4>)
 80008c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c2:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_InitTick+0xa4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <HAL_InitTick+0xa4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <HAL_InitTick+0xa4>)
 80008d2:	f003 f9f1 	bl	8003cb8 <HAL_TIM_Base_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d104      	bne.n	80008e6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80008dc:	4806      	ldr	r0, [pc, #24]	; (80008f8 <HAL_InitTick+0xa4>)
 80008de:	f003 fa1f 	bl	8003d20 <HAL_TIM_Base_Start_IT>
 80008e2:	4603      	mov	r3, r0
 80008e4:	e000      	b.n	80008e8 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3730      	adds	r7, #48	; 0x30
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800
 80008f4:	431bde83 	.word	0x431bde83
 80008f8:	20001a34 	.word	0x20001a34
 80008fc:	40000c00 	.word	0x40000c00

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <HardFault_Handler+0x4>

08000912 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <MemManage_Handler+0x4>

08000918 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <BusFault_Handler+0x4>

0800091e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <UsageFault_Handler+0x4>

08000924 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000934:	4802      	ldr	r0, [pc, #8]	; (8000940 <I2C1_EV_IRQHandler+0x10>)
 8000936:	f001 f993 	bl	8001c60 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200019e0 	.word	0x200019e0

08000944 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000948:	4802      	ldr	r0, [pc, #8]	; (8000954 <USART3_IRQHandler+0x10>)
 800094a:	f003 fdf3 	bl	8004534 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20001b24 	.word	0x20001b24

08000958 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800095c:	4802      	ldr	r0, [pc, #8]	; (8000968 <TIM5_IRQHandler+0x10>)
 800095e:	f003 fa2d 	bl	8003dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20001a34 	.word	0x20001a34

0800096c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <SystemInit+0x5c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a14      	ldr	r2, [pc, #80]	; (80009c8 <SystemInit+0x5c>)
 8000976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800097a:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <SystemInit+0x5c>)
 800097e:	689a      	ldr	r2, [r3, #8]
 8000980:	4911      	ldr	r1, [pc, #68]	; (80009c8 <SystemInit+0x5c>)
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <SystemInit+0x60>)
 8000984:	4013      	ands	r3, r2
 8000986:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <SystemInit+0x5c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <SystemInit+0x5c>)
 800098e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000992:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000996:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <SystemInit+0x5c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <SystemInit+0x5c>)
 800099e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009a2:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <SystemInit+0x5c>)
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <SystemInit+0x5c>)
 80009aa:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80009ae:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <SystemInit+0x5c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <SystemInit+0x64>)
 80009b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009bc:	609a      	str	r2, [r3, #8]
#endif
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	88ffc00c 	.word	0x88ffc00c
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009da:	f107 0310 	add.w	r3, r7, #16
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009e4:	463b      	mov	r3, r7
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 80009f0:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <MX_TIM2_Init+0xa4>)
 80009f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009f8:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <MX_TIM2_Init+0xa4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fe:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <MX_TIM2_Init+0xa4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000a04:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <MX_TIM2_Init+0xa4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_TIM2_Init+0xa4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a10:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <MX_TIM2_Init+0xa4>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a16:	4818      	ldr	r0, [pc, #96]	; (8000a78 <MX_TIM2_Init+0xa4>)
 8000a18:	f003 f9a5 	bl	8003d66 <HAL_TIM_PWM_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000a22:	f7ff fedd 	bl	80007e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	4619      	mov	r1, r3
 8000a34:	4810      	ldr	r0, [pc, #64]	; (8000a78 <MX_TIM2_Init+0xa4>)
 8000a36:	f003 fcec 	bl	8004412 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a40:	f7ff fece 	bl	80007e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a44:	2360      	movs	r3, #96	; 0x60
 8000a46:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a54:	463b      	mov	r3, r7
 8000a56:	2200      	movs	r2, #0
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4807      	ldr	r0, [pc, #28]	; (8000a78 <MX_TIM2_Init+0xa4>)
 8000a5c:	f003 fa8a 	bl	8003f74 <HAL_TIM_PWM_ConfigChannel>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000a66:	f7ff febb 	bl	80007e0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000a6a:	4803      	ldr	r0, [pc, #12]	; (8000a78 <MX_TIM2_Init+0xa4>)
 8000a6c:	f000 f8f6 	bl	8000c5c <HAL_TIM_MspPostInit>

}
 8000a70:	bf00      	nop
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20001ae8 	.word	0x20001ae8

08000a7c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a82:	f107 0310 	add.w	r3, r7, #16
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8000a98:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <MX_TIM3_Init+0xa4>)
 8000a9a:	4a22      	ldr	r2, [pc, #136]	; (8000b24 <MX_TIM3_Init+0xa8>)
 8000a9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a9e:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <MX_TIM3_Init+0xa4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa4:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <MX_TIM3_Init+0xa4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8000aaa:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <MX_TIM3_Init+0xa4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <MX_TIM3_Init+0xa4>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_TIM3_Init+0xa4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000abc:	4818      	ldr	r0, [pc, #96]	; (8000b20 <MX_TIM3_Init+0xa4>)
 8000abe:	f003 f952 	bl	8003d66 <HAL_TIM_PWM_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000ac8:	f7ff fe8a 	bl	80007e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000acc:	2300      	movs	r3, #0
 8000ace:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4811      	ldr	r0, [pc, #68]	; (8000b20 <MX_TIM3_Init+0xa4>)
 8000adc:	f003 fc99 	bl	8004412 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000ae6:	f7ff fe7b 	bl	80007e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aea:	2360      	movs	r3, #96	; 0x60
 8000aec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000afa:	463b      	mov	r3, r7
 8000afc:	2208      	movs	r2, #8
 8000afe:	4619      	mov	r1, r3
 8000b00:	4807      	ldr	r0, [pc, #28]	; (8000b20 <MX_TIM3_Init+0xa4>)
 8000b02:	f003 fa37 	bl	8003f74 <HAL_TIM_PWM_ConfigChannel>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000b0c:	f7ff fe68 	bl	80007e0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000b10:	4803      	ldr	r0, [pc, #12]	; (8000b20 <MX_TIM3_Init+0xa4>)
 8000b12:	f000 f8a3 	bl	8000c5c <HAL_TIM_MspPostInit>

}
 8000b16:	bf00      	nop
 8000b18:	3718      	adds	r7, #24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20001a70 	.word	0x20001a70
 8000b24:	40000400 	.word	0x40000400

08000b28 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b38:	463b      	mov	r3, r7
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8000b44:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <MX_TIM9_Init+0xa4>)
 8000b46:	4a22      	ldr	r2, [pc, #136]	; (8000bd0 <MX_TIM9_Init+0xa8>)
 8000b48:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000b4a:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <MX_TIM9_Init+0xa4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b50:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <MX_TIM9_Init+0xa4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0;
 8000b56:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <MX_TIM9_Init+0xa4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <MX_TIM9_Init+0xa4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <MX_TIM9_Init+0xa4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000b68:	4818      	ldr	r0, [pc, #96]	; (8000bcc <MX_TIM9_Init+0xa4>)
 8000b6a:	f003 f8fc 	bl	8003d66 <HAL_TIM_PWM_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 8000b74:	f7ff fe34 	bl	80007e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	4619      	mov	r1, r3
 8000b86:	4811      	ldr	r0, [pc, #68]	; (8000bcc <MX_TIM9_Init+0xa4>)
 8000b88:	f003 fc43 	bl	8004412 <HAL_TIMEx_MasterConfigSynchronization>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM9_Init+0x6e>
  {
    Error_Handler();
 8000b92:	f7ff fe25 	bl	80007e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b96:	2360      	movs	r3, #96	; 0x60
 8000b98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	2204      	movs	r2, #4
 8000baa:	4619      	mov	r1, r3
 8000bac:	4807      	ldr	r0, [pc, #28]	; (8000bcc <MX_TIM9_Init+0xa4>)
 8000bae:	f003 f9e1 	bl	8003f74 <HAL_TIM_PWM_ConfigChannel>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM9_Init+0x94>
  {
    Error_Handler();
 8000bb8:	f7ff fe12 	bl	80007e0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 8000bbc:	4803      	ldr	r0, [pc, #12]	; (8000bcc <MX_TIM9_Init+0xa4>)
 8000bbe:	f000 f84d 	bl	8000c5c <HAL_TIM_MspPostInit>

}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20001aac 	.word	0x20001aac
 8000bd0:	40010800 	.word	0x40010800

08000bd4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b087      	sub	sp, #28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000be4:	d10c      	bne.n	8000c00 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000be6:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <HAL_TIM_PWM_MspInit+0x7c>)
 8000be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bea:	4a19      	ldr	r2, [pc, #100]	; (8000c50 <HAL_TIM_PWM_MspInit+0x7c>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6253      	str	r3, [r2, #36]	; 0x24
 8000bf2:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <HAL_TIM_PWM_MspInit+0x7c>)
 8000bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8000bfe:	e022      	b.n	8000c46 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a13      	ldr	r2, [pc, #76]	; (8000c54 <HAL_TIM_PWM_MspInit+0x80>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d10c      	bne.n	8000c24 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <HAL_TIM_PWM_MspInit+0x7c>)
 8000c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0e:	4a10      	ldr	r2, [pc, #64]	; (8000c50 <HAL_TIM_PWM_MspInit+0x7c>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	6253      	str	r3, [r2, #36]	; 0x24
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_TIM_PWM_MspInit+0x7c>)
 8000c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
}
 8000c22:	e010      	b.n	8000c46 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM9)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <HAL_TIM_PWM_MspInit+0x84>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d10b      	bne.n	8000c46 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <HAL_TIM_PWM_MspInit+0x7c>)
 8000c30:	6a1b      	ldr	r3, [r3, #32]
 8000c32:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <HAL_TIM_PWM_MspInit+0x7c>)
 8000c34:	f043 0304 	orr.w	r3, r3, #4
 8000c38:	6213      	str	r3, [r2, #32]
 8000c3a:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_TIM_PWM_MspInit+0x7c>)
 8000c3c:	6a1b      	ldr	r3, [r3, #32]
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
}
 8000c46:	bf00      	nop
 8000c48:	371c      	adds	r7, #28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40000400 	.word	0x40000400
 8000c58:	40010800 	.word	0x40010800

08000c5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c7c:	d11c      	bne.n	8000cb8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b33      	ldr	r3, [pc, #204]	; (8000d4c <HAL_TIM_MspPostInit+0xf0>)
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	4a32      	ldr	r2, [pc, #200]	; (8000d4c <HAL_TIM_MspPostInit+0xf0>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	61d3      	str	r3, [r2, #28]
 8000c8a:	4b30      	ldr	r3, [pc, #192]	; (8000d4c <HAL_TIM_MspPostInit+0xf0>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0-WKUP1     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PWM_ENGINE_LEFT_Pin;
 8000c96:	2301      	movs	r3, #1
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_LEFT_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4827      	ldr	r0, [pc, #156]	; (8000d50 <HAL_TIM_MspPostInit+0xf4>)
 8000cb2:	f000 fd07 	bl	80016c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8000cb6:	e044      	b.n	8000d42 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a25      	ldr	r2, [pc, #148]	; (8000d54 <HAL_TIM_MspPostInit+0xf8>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d11d      	bne.n	8000cfe <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc2:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <HAL_TIM_MspPostInit+0xf0>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	4a21      	ldr	r2, [pc, #132]	; (8000d4c <HAL_TIM_MspPostInit+0xf0>)
 8000cc8:	f043 0304 	orr.w	r3, r3, #4
 8000ccc:	61d3      	str	r3, [r2, #28]
 8000cce:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <HAL_TIM_MspPostInit+0xf0>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	f003 0304 	and.w	r3, r3, #4
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_ENGINE_RIGHT_Pin;
 8000cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cec:	2302      	movs	r3, #2
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4818      	ldr	r0, [pc, #96]	; (8000d58 <HAL_TIM_MspPostInit+0xfc>)
 8000cf8:	f000 fce4 	bl	80016c4 <HAL_GPIO_Init>
}
 8000cfc:	e021      	b.n	8000d42 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM9)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a16      	ldr	r2, [pc, #88]	; (8000d5c <HAL_TIM_MspPostInit+0x100>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d11c      	bne.n	8000d42 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d08:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <HAL_TIM_MspPostInit+0xf0>)
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	4a0f      	ldr	r2, [pc, #60]	; (8000d4c <HAL_TIM_MspPostInit+0xf0>)
 8000d0e:	f043 0302 	orr.w	r3, r3, #2
 8000d12:	61d3      	str	r3, [r2, #28]
 8000d14:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <HAL_TIM_MspPostInit+0xf0>)
 8000d16:	69db      	ldr	r3, [r3, #28]
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 8000d20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000d32:	2303      	movs	r3, #3
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4808      	ldr	r0, [pc, #32]	; (8000d60 <HAL_TIM_MspPostInit+0x104>)
 8000d3e:	f000 fcc1 	bl	80016c4 <HAL_GPIO_Init>
}
 8000d42:	bf00      	nop
 8000d44:	3728      	adds	r7, #40	; 0x28
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020000 	.word	0x40020000
 8000d54:	40000400 	.word	0x40000400
 8000d58:	40020800 	.word	0x40020800
 8000d5c:	40010800 	.word	0x40010800
 8000d60:	40020400 	.word	0x40020400

08000d64 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_USART3_UART_Init+0x4c>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <MX_USART3_UART_Init+0x50>)
 8000d6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <MX_USART3_UART_Init+0x4c>)
 8000d70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_USART3_UART_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <MX_USART3_UART_Init+0x4c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <MX_USART3_UART_Init+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_USART3_UART_Init+0x4c>)
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <MX_USART3_UART_Init+0x4c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_USART3_UART_Init+0x4c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_USART3_UART_Init+0x4c>)
 8000d9c:	f003 fb7d 	bl	800449a <HAL_UART_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000da6:	f7ff fd1b 	bl	80007e0 <Error_Handler>
  }

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20001b24 	.word	0x20001b24
 8000db4:	40004800 	.word	0x40004800

08000db8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a1b      	ldr	r2, [pc, #108]	; (8000e44 <HAL_UART_MspInit+0x8c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d130      	bne.n	8000e3c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dda:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <HAL_UART_MspInit+0x90>)
 8000ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dde:	4a1a      	ldr	r2, [pc, #104]	; (8000e48 <HAL_UART_MspInit+0x90>)
 8000de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de4:	6253      	str	r3, [r2, #36]	; 0x24
 8000de6:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <HAL_UART_MspInit+0x90>)
 8000de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <HAL_UART_MspInit+0x90>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <HAL_UART_MspInit+0x90>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	61d3      	str	r3, [r2, #28]
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_UART_MspInit+0x90>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4619      	mov	r1, r3
 8000e26:	4809      	ldr	r0, [pc, #36]	; (8000e4c <HAL_UART_MspInit+0x94>)
 8000e28:	f000 fc4c 	bl	80016c4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2105      	movs	r1, #5
 8000e30:	2027      	movs	r0, #39	; 0x27
 8000e32:	f000 fbce 	bl	80015d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e36:	2027      	movs	r0, #39	; 0x27
 8000e38:	f000 fbe7 	bl	800160a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	3728      	adds	r7, #40	; 0x28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40004800 	.word	0x40004800
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020400 	.word	0x40020400

08000e50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e50:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e52:	e003      	b.n	8000e5c <LoopCopyDataInit>

08000e54 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e56:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e58:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e5a:	3104      	adds	r1, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e5c:	480a      	ldr	r0, [pc, #40]	; (8000e88 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000e60:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e62:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e64:	d3f6      	bcc.n	8000e54 <CopyDataInit>
  ldr r2, =_sbss
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000e68:	e002      	b.n	8000e70 <LoopFillZerobss>

08000e6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e6c:	f842 3b04 	str.w	r3, [r2], #4

08000e70 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e72:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e74:	d3f9      	bcc.n	8000e6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e76:	f7ff fd79 	bl	800096c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7a:	f006 fbaf 	bl	80075dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e7e:	f7ff fc2f 	bl	80006e0 <main>
  bx lr
 8000e82:	4770      	bx	lr
  ldr r3, =_sidata
 8000e84:	0800775c 	.word	0x0800775c
  ldr r0, =_sdata
 8000e88:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e8c:	20000064 	.word	0x20000064
  ldr r2, =_sbss
 8000e90:	20000064 	.word	0x20000064
  ldr r3, = _ebss
 8000e94:	20001ba8 	.word	0x20001ba8

08000e98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC1_IRQHandler>

08000e9a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f000 fb89 	bl	80015bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f7ff fcd2 	bl	8000854 <HAL_InitTick>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	71fb      	strb	r3, [r7, #7]
 8000eba:	e001      	b.n	8000ec0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ebc:	f7ff fc96 	bl	80007ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <HAL_IncTick+0x1c>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_IncTick+0x20>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a03      	ldr	r2, [pc, #12]	; (8000ee8 <HAL_IncTick+0x1c>)
 8000edc:	6013      	str	r3, [r2, #0]
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20001b64 	.word	0x20001b64
 8000eec:	2000005c 	.word	0x2000005c

08000ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef4:	4b02      	ldr	r3, [pc, #8]	; (8000f00 <HAL_GetTick+0x10>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	20001b64 	.word	0x20001b64

08000f04 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08e      	sub	sp, #56	; 0x38
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d101      	bne.n	8000f24 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e127      	b.n	8001174 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	691b      	ldr	r3, [r3, #16]
 8000f28:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d115      	bne.n	8000f5e <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f40:	4b8e      	ldr	r3, [pc, #568]	; (800117c <HAL_ADC_Init+0x278>)
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	4a8d      	ldr	r2, [pc, #564]	; (800117c <HAL_ADC_Init+0x278>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	6213      	str	r3, [r2, #32]
 8000f4c:	4b8b      	ldr	r3, [pc, #556]	; (800117c <HAL_ADC_Init+0x278>)
 8000f4e:	6a1b      	ldr	r3, [r3, #32]
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff f9d3 	bl	8000304 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f62:	f003 0310 	and.w	r3, r3, #16
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f040 80ff 	bne.w	800116a <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f70:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f74:	f023 0302 	bic.w	r3, r3, #2
 8000f78:	f043 0202 	orr.w	r2, r3, #2
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000f80:	4b7f      	ldr	r3, [pc, #508]	; (8001180 <HAL_ADC_Init+0x27c>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	497c      	ldr	r1, [pc, #496]	; (8001180 <HAL_ADC_Init+0x27c>)
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000f9a:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fa8:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000faa:	6a3b      	ldr	r3, [r7, #32]
 8000fac:	fa93 f3a3 	rbit	r3, r3
 8000fb0:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fab3 f383 	clz	r3, r3
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000fbe:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000fc4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fcc:	4619      	mov	r1, r3
 8000fce:	2302      	movs	r3, #2
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd4:	fa93 f3a3 	rbit	r3, r3
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fdc:	fab3 f383 	clz	r3, r3
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8000fe6:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fea:	4313      	orrs	r3, r2
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff2:	2b10      	cmp	r3, #16
 8000ff4:	d007      	beq.n	8001006 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000ffe:	4313      	orrs	r3, r2
 8001000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001002:	4313      	orrs	r3, r2
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001010:	2b40      	cmp	r3, #64	; 0x40
 8001012:	d04f      	beq.n	80010b4 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800101a:	4313      	orrs	r3, r2
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001026:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	6912      	ldr	r2, [r2, #16]
 800102c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001030:	d003      	beq.n	800103a <HAL_ADC_Init+0x136>
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	6912      	ldr	r2, [r2, #16]
 8001036:	2a01      	cmp	r2, #1
 8001038:	d102      	bne.n	8001040 <HAL_ADC_Init+0x13c>
 800103a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800103e:	e000      	b.n	8001042 <HAL_ADC_Init+0x13e>
 8001040:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001042:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001046:	4313      	orrs	r3, r2
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001050:	2b01      	cmp	r3, #1
 8001052:	d125      	bne.n	80010a0 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800105a:	2b00      	cmp	r3, #0
 800105c:	d114      	bne.n	8001088 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	3b01      	subs	r3, #1
 8001064:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001068:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	fa92 f2a2 	rbit	r2, r2
 8001070:	617a      	str	r2, [r7, #20]
  return result;
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	fab2 f282 	clz	r2, r2
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	4093      	lsls	r3, r2
 800107c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001082:	4313      	orrs	r3, r2
 8001084:	633b      	str	r3, [r7, #48]	; 0x30
 8001086:	e00b      	b.n	80010a0 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108c:	f043 0220 	orr.w	r2, r3, #32
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001098:	f043 0201 	orr.w	r2, r3, #1
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	4b37      	ldr	r3, [pc, #220]	; (8001184 <HAL_ADC_Init+0x280>)
 80010a8:	4013      	ands	r3, r2
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	6812      	ldr	r2, [r2, #0]
 80010ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80010b0:	430b      	orrs	r3, r1
 80010b2:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	4b33      	ldr	r3, [pc, #204]	; (8001188 <HAL_ADC_Init+0x284>)
 80010bc:	4013      	ands	r3, r2
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	6812      	ldr	r2, [r2, #0]
 80010c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80010c4:	430b      	orrs	r3, r1
 80010c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010d0:	d003      	beq.n	80010da <HAL_ADC_Init+0x1d6>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d119      	bne.n	800110e <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e8:	3b01      	subs	r3, #1
 80010ea:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80010ee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	fa92 f2a2 	rbit	r2, r2
 80010f6:	60fa      	str	r2, [r7, #12]
  return result;
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	fab2 f282 	clz	r2, r2
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	fa03 f202 	lsl.w	r2, r3, r2
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	430a      	orrs	r2, r1
 800110a:	631a      	str	r2, [r3, #48]	; 0x30
 800110c:	e007      	b.n	800111e <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 800111c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <HAL_ADC_Init+0x288>)
 8001126:	4013      	ands	r3, r2
 8001128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800112a:	429a      	cmp	r2, r3
 800112c:	d10b      	bne.n	8001146 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001138:	f023 0303 	bic.w	r3, r3, #3
 800113c:	f043 0201 	orr.w	r2, r3, #1
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	64da      	str	r2, [r3, #76]	; 0x4c
 8001144:	e014      	b.n	8001170 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	f023 0312 	bic.w	r3, r3, #18
 800114e:	f043 0210 	orr.w	r2, r3, #16
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800115a:	f043 0201 	orr.w	r2, r3, #1
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001168:	e002      	b.n	8001170 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001170:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001174:	4618      	mov	r0, r3
 8001176:	3738      	adds	r7, #56	; 0x38
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40023800 	.word	0x40023800
 8001180:	40012700 	.word	0x40012700
 8001184:	fcfc16ff 	.word	0xfcfc16ff
 8001188:	c0fff189 	.word	0xc0fff189
 800118c:	bf80fffe 	.word	0xbf80fffe

08001190 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d101      	bne.n	80011b0 <HAL_ADC_ConfigChannel+0x20>
 80011ac:	2302      	movs	r3, #2
 80011ae:	e14f      	b.n	8001450 <HAL_ADC_ConfigChannel+0x2c0>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b06      	cmp	r3, #6
 80011be:	d81c      	bhi.n	80011fa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	3b05      	subs	r3, #5
 80011d2:	221f      	movs	r2, #31
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	4019      	ands	r1, r3
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	6818      	ldr	r0, [r3, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	3b05      	subs	r3, #5
 80011ec:	fa00 f203 	lsl.w	r2, r0, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	430a      	orrs	r2, r1
 80011f6:	641a      	str	r2, [r3, #64]	; 0x40
 80011f8:	e07e      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b0c      	cmp	r3, #12
 8001200:	d81c      	bhi.n	800123c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	4613      	mov	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4413      	add	r3, r2
 8001212:	3b23      	subs	r3, #35	; 0x23
 8001214:	221f      	movs	r2, #31
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	4019      	ands	r1, r3
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	6818      	ldr	r0, [r3, #0]
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	3b23      	subs	r3, #35	; 0x23
 800122e:	fa00 f203 	lsl.w	r2, r0, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	430a      	orrs	r2, r1
 8001238:	63da      	str	r2, [r3, #60]	; 0x3c
 800123a:	e05d      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b12      	cmp	r3, #18
 8001242:	d81c      	bhi.n	800127e <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	3b41      	subs	r3, #65	; 0x41
 8001256:	221f      	movs	r2, #31
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	4019      	ands	r1, r3
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	6818      	ldr	r0, [r3, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	3b41      	subs	r3, #65	; 0x41
 8001270:	fa00 f203 	lsl.w	r2, r0, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	430a      	orrs	r2, r1
 800127a:	639a      	str	r2, [r3, #56]	; 0x38
 800127c:	e03c      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b18      	cmp	r3, #24
 8001284:	d81c      	bhi.n	80012c0 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	3b5f      	subs	r3, #95	; 0x5f
 8001298:	221f      	movs	r2, #31
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	4019      	ands	r1, r3
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	6818      	ldr	r0, [r3, #0]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	3b5f      	subs	r3, #95	; 0x5f
 80012b2:	fa00 f203 	lsl.w	r2, r0, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	635a      	str	r2, [r3, #52]	; 0x34
 80012be:	e01b      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	3b7d      	subs	r3, #125	; 0x7d
 80012d2:	221f      	movs	r2, #31
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	4019      	ands	r1, r3
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	3b7d      	subs	r3, #125	; 0x7d
 80012ec:	fa00 f203 	lsl.w	r2, r0, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	430a      	orrs	r2, r1
 80012f6:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b09      	cmp	r3, #9
 80012fe:	d81a      	bhi.n	8001336 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6959      	ldr	r1, [r3, #20]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4613      	mov	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4413      	add	r3, r2
 8001310:	2207      	movs	r2, #7
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	4019      	ands	r1, r3
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	6898      	ldr	r0, [r3, #8]
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4613      	mov	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4413      	add	r3, r2
 8001328:	fa00 f203 	lsl.w	r2, r0, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	430a      	orrs	r2, r1
 8001332:	615a      	str	r2, [r3, #20]
 8001334:	e05d      	b.n	80013f2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b13      	cmp	r3, #19
 800133c:	d81c      	bhi.n	8001378 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6919      	ldr	r1, [r3, #16]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4613      	mov	r3, r2
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	4413      	add	r3, r2
 800134e:	3b1e      	subs	r3, #30
 8001350:	2207      	movs	r2, #7
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	4019      	ands	r1, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	6898      	ldr	r0, [r3, #8]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4613      	mov	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	3b1e      	subs	r3, #30
 800136a:	fa00 f203 	lsl.w	r2, r0, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	430a      	orrs	r2, r1
 8001374:	611a      	str	r2, [r3, #16]
 8001376:	e03c      	b.n	80013f2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b1d      	cmp	r3, #29
 800137e:	d81c      	bhi.n	80013ba <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68d9      	ldr	r1, [r3, #12]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	4613      	mov	r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4413      	add	r3, r2
 8001390:	3b3c      	subs	r3, #60	; 0x3c
 8001392:	2207      	movs	r2, #7
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	4019      	ands	r1, r3
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	6898      	ldr	r0, [r3, #8]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	3b3c      	subs	r3, #60	; 0x3c
 80013ac:	fa00 f203 	lsl.w	r2, r0, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	e01b      	b.n	80013f2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4613      	mov	r3, r2
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	4413      	add	r3, r2
 80013ca:	3b5a      	subs	r3, #90	; 0x5a
 80013cc:	2207      	movs	r2, #7
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	4019      	ands	r1, r3
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	6898      	ldr	r0, [r3, #8]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4613      	mov	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4413      	add	r3, r2
 80013e4:	3b5a      	subs	r3, #90	; 0x5a
 80013e6:	fa00 f203 	lsl.w	r2, r0, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b10      	cmp	r3, #16
 80013f8:	d003      	beq.n	8001402 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013fe:	2b11      	cmp	r3, #17
 8001400:	d121      	bne.n	8001446 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001402:	4b16      	ldr	r3, [pc, #88]	; (800145c <HAL_ADC_ConfigChannel+0x2cc>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d11b      	bne.n	8001446 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <HAL_ADC_ConfigChannel+0x2cc>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	4a12      	ldr	r2, [pc, #72]	; (800145c <HAL_ADC_ConfigChannel+0x2cc>)
 8001414:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001418:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b10      	cmp	r3, #16
 8001420:	d111      	bne.n	8001446 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <HAL_ADC_ConfigChannel+0x2d0>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <HAL_ADC_ConfigChannel+0x2d4>)
 8001428:	fba2 2303 	umull	r2, r3, r2, r3
 800142c:	0c9a      	lsrs	r2, r3, #18
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001438:	e002      	b.n	8001440 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	3b01      	subs	r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f9      	bne.n	800143a <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800144e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40012700 	.word	0x40012700
 8001460:	20000054 	.word	0x20000054
 8001464:	431bde83 	.word	0x431bde83

08001468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001484:	4013      	ands	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149a:	4a04      	ldr	r2, [pc, #16]	; (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	60d3      	str	r3, [r2, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <__NVIC_GetPriorityGrouping+0x18>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	f003 0307 	and.w	r3, r3, #7
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	db0b      	blt.n	80014f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	f003 021f 	and.w	r2, r3, #31
 80014e4:	4906      	ldr	r1, [pc, #24]	; (8001500 <__NVIC_EnableIRQ+0x34>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	095b      	lsrs	r3, r3, #5
 80014ec:	2001      	movs	r0, #1
 80014ee:	fa00 f202 	lsl.w	r2, r0, r2
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	e000e100 	.word	0xe000e100

08001504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	db0a      	blt.n	800152e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	490c      	ldr	r1, [pc, #48]	; (8001550 <__NVIC_SetPriority+0x4c>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	0112      	lsls	r2, r2, #4
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	440b      	add	r3, r1
 8001528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800152c:	e00a      	b.n	8001544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4908      	ldr	r1, [pc, #32]	; (8001554 <__NVIC_SetPriority+0x50>)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	3b04      	subs	r3, #4
 800153c:	0112      	lsls	r2, r2, #4
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	440b      	add	r3, r1
 8001542:	761a      	strb	r2, [r3, #24]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000e100 	.word	0xe000e100
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	; 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f1c3 0307 	rsb	r3, r3, #7
 8001572:	2b04      	cmp	r3, #4
 8001574:	bf28      	it	cs
 8001576:	2304      	movcs	r3, #4
 8001578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3304      	adds	r3, #4
 800157e:	2b06      	cmp	r3, #6
 8001580:	d902      	bls.n	8001588 <NVIC_EncodePriority+0x30>
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3b03      	subs	r3, #3
 8001586:	e000      	b.n	800158a <NVIC_EncodePriority+0x32>
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	f04f 32ff 	mov.w	r2, #4294967295
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	401a      	ands	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a0:	f04f 31ff 	mov.w	r1, #4294967295
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43d9      	mvns	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	4313      	orrs	r3, r2
         );
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3724      	adds	r7, #36	; 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ff4f 	bl	8001468 <__NVIC_SetPriorityGrouping>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e4:	f7ff ff64 	bl	80014b0 <__NVIC_GetPriorityGrouping>
 80015e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	6978      	ldr	r0, [r7, #20]
 80015f0:	f7ff ffb2 	bl	8001558 <NVIC_EncodePriority>
 80015f4:	4602      	mov	r2, r0
 80015f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff81 	bl	8001504 <__NVIC_SetPriority>
}
 8001602:	bf00      	nop
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff57 	bl	80014cc <__NVIC_EnableIRQ>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b084      	sub	sp, #16
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d005      	beq.n	800164a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2204      	movs	r2, #4
 8001642:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	73fb      	strb	r3, [r7, #15]
 8001648:	e029      	b.n	800169e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 020e 	bic.w	r2, r2, #14
 8001658:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 0201 	bic.w	r2, r2, #1
 8001668:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f003 021c 	and.w	r2, r3, #28
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001676:	2101      	movs	r1, #1
 8001678:	fa01 f202 	lsl.w	r2, r1, r2
 800167c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	4798      	blx	r3
    }
  }
  return status;
 800169e:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016b6:	b2db      	uxtb	r3, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
	...

080016c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80016c4:	b480      	push	{r7}
 80016c6:	b087      	sub	sp, #28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80016da:	e160      	b.n	800199e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	2101      	movs	r1, #1
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	fa01 f303 	lsl.w	r3, r1, r3
 80016e8:	4013      	ands	r3, r2
 80016ea:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 8152 	beq.w	8001998 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0x40>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b12      	cmp	r3, #18
 8001702:	d123      	bne.n	800174c <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	08da      	lsrs	r2, r3, #3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3208      	adds	r2, #8
 800170c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001710:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	220f      	movs	r2, #15
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	691a      	ldr	r2, [r3, #16]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	08da      	lsrs	r2, r3, #3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3208      	adds	r2, #8
 8001746:	6939      	ldr	r1, [r7, #16]
 8001748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	2203      	movs	r2, #3
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0203 	and.w	r2, r3, #3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d00b      	beq.n	80017a0 <HAL_GPIO_Init+0xdc>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b02      	cmp	r3, #2
 800178e:	d007      	beq.n	80017a0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001794:	2b11      	cmp	r3, #17
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b12      	cmp	r3, #18
 800179e:	d130      	bne.n	8001802 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	2203      	movs	r2, #3
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80017d6:	2201      	movs	r2, #1
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	091b      	lsrs	r3, r3, #4
 80017ec:	f003 0201 	and.w	r2, r3, #1
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 80ac 	beq.w	8001998 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001840:	4b5d      	ldr	r3, [pc, #372]	; (80019b8 <HAL_GPIO_Init+0x2f4>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	4a5c      	ldr	r2, [pc, #368]	; (80019b8 <HAL_GPIO_Init+0x2f4>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6213      	str	r3, [r2, #32]
 800184c:	4b5a      	ldr	r3, [pc, #360]	; (80019b8 <HAL_GPIO_Init+0x2f4>)
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8001858:	4a58      	ldr	r2, [pc, #352]	; (80019bc <HAL_GPIO_Init+0x2f8>)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	089b      	lsrs	r3, r3, #2
 800185e:	3302      	adds	r3, #2
 8001860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001864:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	220f      	movs	r2, #15
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a50      	ldr	r2, [pc, #320]	; (80019c0 <HAL_GPIO_Init+0x2fc>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d025      	beq.n	80018d0 <HAL_GPIO_Init+0x20c>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a4f      	ldr	r2, [pc, #316]	; (80019c4 <HAL_GPIO_Init+0x300>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d01f      	beq.n	80018cc <HAL_GPIO_Init+0x208>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a4e      	ldr	r2, [pc, #312]	; (80019c8 <HAL_GPIO_Init+0x304>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d019      	beq.n	80018c8 <HAL_GPIO_Init+0x204>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a4d      	ldr	r2, [pc, #308]	; (80019cc <HAL_GPIO_Init+0x308>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d013      	beq.n	80018c4 <HAL_GPIO_Init+0x200>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a4c      	ldr	r2, [pc, #304]	; (80019d0 <HAL_GPIO_Init+0x30c>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d00d      	beq.n	80018c0 <HAL_GPIO_Init+0x1fc>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a4b      	ldr	r2, [pc, #300]	; (80019d4 <HAL_GPIO_Init+0x310>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d007      	beq.n	80018bc <HAL_GPIO_Init+0x1f8>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a4a      	ldr	r2, [pc, #296]	; (80019d8 <HAL_GPIO_Init+0x314>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d101      	bne.n	80018b8 <HAL_GPIO_Init+0x1f4>
 80018b4:	2306      	movs	r3, #6
 80018b6:	e00c      	b.n	80018d2 <HAL_GPIO_Init+0x20e>
 80018b8:	2307      	movs	r3, #7
 80018ba:	e00a      	b.n	80018d2 <HAL_GPIO_Init+0x20e>
 80018bc:	2305      	movs	r3, #5
 80018be:	e008      	b.n	80018d2 <HAL_GPIO_Init+0x20e>
 80018c0:	2304      	movs	r3, #4
 80018c2:	e006      	b.n	80018d2 <HAL_GPIO_Init+0x20e>
 80018c4:	2303      	movs	r3, #3
 80018c6:	e004      	b.n	80018d2 <HAL_GPIO_Init+0x20e>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e002      	b.n	80018d2 <HAL_GPIO_Init+0x20e>
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <HAL_GPIO_Init+0x20e>
 80018d0:	2300      	movs	r3, #0
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	f002 0203 	and.w	r2, r2, #3
 80018d8:	0092      	lsls	r2, r2, #2
 80018da:	4093      	lsls	r3, r2
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80018e2:	4936      	ldr	r1, [pc, #216]	; (80019bc <HAL_GPIO_Init+0x2f8>)
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	3302      	adds	r3, #2
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018f0:	4b3a      	ldr	r3, [pc, #232]	; (80019dc <HAL_GPIO_Init+0x318>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4013      	ands	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001914:	4a31      	ldr	r2, [pc, #196]	; (80019dc <HAL_GPIO_Init+0x318>)
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800191a:	4b30      	ldr	r3, [pc, #192]	; (80019dc <HAL_GPIO_Init+0x318>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	43db      	mvns	r3, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4313      	orrs	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800193e:	4a27      	ldr	r2, [pc, #156]	; (80019dc <HAL_GPIO_Init+0x318>)
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001944:	4b25      	ldr	r3, [pc, #148]	; (80019dc <HAL_GPIO_Init+0x318>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	43db      	mvns	r3, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4313      	orrs	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001968:	4a1c      	ldr	r2, [pc, #112]	; (80019dc <HAL_GPIO_Init+0x318>)
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800196e:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <HAL_GPIO_Init+0x318>)
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	43db      	mvns	r3, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4313      	orrs	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001992:	4a12      	ldr	r2, [pc, #72]	; (80019dc <HAL_GPIO_Init+0x318>)
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	3301      	adds	r3, #1
 800199c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	fa22 f303 	lsr.w	r3, r2, r3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f47f ae97 	bne.w	80016dc <HAL_GPIO_Init+0x18>
  } 
}
 80019ae:	bf00      	nop
 80019b0:	371c      	adds	r7, #28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40010000 	.word	0x40010000
 80019c0:	40020000 	.word	0x40020000
 80019c4:	40020400 	.word	0x40020400
 80019c8:	40020800 	.word	0x40020800
 80019cc:	40020c00 	.word	0x40020c00
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40021400 	.word	0x40021400
 80019d8:	40021800 	.word	0x40021800
 80019dc:	40010400 	.word	0x40010400

080019e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	807b      	strh	r3, [r7, #2]
 80019ec:	4613      	mov	r3, r2
 80019ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019f0:	787b      	ldrb	r3, [r7, #1]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019f6:	887a      	ldrh	r2, [r7, #2]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80019fc:	e003      	b.n	8001a06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80019fe:	887b      	ldrh	r3, [r7, #2]
 8001a00:	041a      	lsls	r2, r3, #16
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	619a      	str	r2, [r3, #24]
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e10f      	b.n	8001c42 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d106      	bne.n	8001a3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7fe fe06 	bl	8000648 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2224      	movs	r2, #36	; 0x24
 8001a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0201 	bic.w	r2, r2, #1
 8001a52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a54:	f002 f878 	bl	8003b48 <HAL_RCC_GetPCLK1Freq>
 8001a58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4a7b      	ldr	r2, [pc, #492]	; (8001c4c <HAL_I2C_Init+0x23c>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d807      	bhi.n	8001a74 <HAL_I2C_Init+0x64>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4a7a      	ldr	r2, [pc, #488]	; (8001c50 <HAL_I2C_Init+0x240>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	bf94      	ite	ls
 8001a6c:	2301      	movls	r3, #1
 8001a6e:	2300      	movhi	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	e006      	b.n	8001a82 <HAL_I2C_Init+0x72>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4a77      	ldr	r2, [pc, #476]	; (8001c54 <HAL_I2C_Init+0x244>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	bf94      	ite	ls
 8001a7c:	2301      	movls	r3, #1
 8001a7e:	2300      	movhi	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e0db      	b.n	8001c42 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4a72      	ldr	r2, [pc, #456]	; (8001c58 <HAL_I2C_Init+0x248>)
 8001a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a92:	0c9b      	lsrs	r3, r3, #18
 8001a94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4a64      	ldr	r2, [pc, #400]	; (8001c4c <HAL_I2C_Init+0x23c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d802      	bhi.n	8001ac4 <HAL_I2C_Init+0xb4>
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	e009      	b.n	8001ad8 <HAL_I2C_Init+0xc8>
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001aca:	fb02 f303 	mul.w	r3, r2, r3
 8001ace:	4a63      	ldr	r2, [pc, #396]	; (8001c5c <HAL_I2C_Init+0x24c>)
 8001ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad4:	099b      	lsrs	r3, r3, #6
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	430b      	orrs	r3, r1
 8001ade:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001aea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4956      	ldr	r1, [pc, #344]	; (8001c4c <HAL_I2C_Init+0x23c>)
 8001af4:	428b      	cmp	r3, r1
 8001af6:	d80d      	bhi.n	8001b14 <HAL_I2C_Init+0x104>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	1e59      	subs	r1, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b06:	3301      	adds	r3, #1
 8001b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	bf38      	it	cc
 8001b10:	2304      	movcc	r3, #4
 8001b12:	e04f      	b.n	8001bb4 <HAL_I2C_Init+0x1a4>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d111      	bne.n	8001b40 <HAL_I2C_Init+0x130>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	1e58      	subs	r0, r3, #1
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6859      	ldr	r1, [r3, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	440b      	add	r3, r1
 8001b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b2e:	3301      	adds	r3, #1
 8001b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	bf0c      	ite	eq
 8001b38:	2301      	moveq	r3, #1
 8001b3a:	2300      	movne	r3, #0
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	e012      	b.n	8001b66 <HAL_I2C_Init+0x156>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1e58      	subs	r0, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6859      	ldr	r1, [r3, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	0099      	lsls	r1, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b56:	3301      	adds	r3, #1
 8001b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	bf0c      	ite	eq
 8001b60:	2301      	moveq	r3, #1
 8001b62:	2300      	movne	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_I2C_Init+0x15e>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e022      	b.n	8001bb4 <HAL_I2C_Init+0x1a4>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10e      	bne.n	8001b94 <HAL_I2C_Init+0x184>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1e58      	subs	r0, r3, #1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6859      	ldr	r1, [r3, #4]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	440b      	add	r3, r1
 8001b84:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b88:	3301      	adds	r3, #1
 8001b8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b92:	e00f      	b.n	8001bb4 <HAL_I2C_Init+0x1a4>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	1e58      	subs	r0, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6859      	ldr	r1, [r3, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	0099      	lsls	r1, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001baa:	3301      	adds	r3, #1
 8001bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	6809      	ldr	r1, [r1, #0]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69da      	ldr	r2, [r3, #28]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001be2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6911      	ldr	r1, [r2, #16]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	68d2      	ldr	r2, [r2, #12]
 8001bee:	4311      	orrs	r1, r2
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	695a      	ldr	r2, [r3, #20]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0201 	orr.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	000186a0 	.word	0x000186a0
 8001c50:	001e847f 	.word	0x001e847f
 8001c54:	003d08ff 	.word	0x003d08ff
 8001c58:	431bde83 	.word	0x431bde83
 8001c5c:	10624dd3 	.word	0x10624dd3

08001c60 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c78:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c80:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c88:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	2b10      	cmp	r3, #16
 8001c8e:	d003      	beq.n	8001c98 <HAL_I2C_EV_IRQHandler+0x38>
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	2b40      	cmp	r3, #64	; 0x40
 8001c94:	f040 80b6 	bne.w	8001e04 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10d      	bne.n	8001cce <HAL_I2C_EV_IRQHandler+0x6e>
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001cb8:	d003      	beq.n	8001cc2 <HAL_I2C_EV_IRQHandler+0x62>
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001cc0:	d101      	bne.n	8001cc6 <HAL_I2C_EV_IRQHandler+0x66>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <HAL_I2C_EV_IRQHandler+0x68>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	f000 8127 	beq.w	8001f1c <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00c      	beq.n	8001cf2 <HAL_I2C_EV_IRQHandler+0x92>
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	0a5b      	lsrs	r3, r3, #9
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d006      	beq.n	8001cf2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f001 fa4e 	bl	8003186 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 fc56 	bl	800259c <I2C_Master_SB>
 8001cf0:	e087      	b.n	8001e02 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	08db      	lsrs	r3, r3, #3
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d009      	beq.n	8001d12 <HAL_I2C_EV_IRQHandler+0xb2>
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	0a5b      	lsrs	r3, r3, #9
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 fccb 	bl	80026a6 <I2C_Master_ADD10>
 8001d10:	e077      	b.n	8001e02 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	085b      	lsrs	r3, r3, #1
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d009      	beq.n	8001d32 <HAL_I2C_EV_IRQHandler+0xd2>
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	0a5b      	lsrs	r3, r3, #9
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 fce4 	bl	80026f8 <I2C_Master_ADDR>
 8001d30:	e067      	b.n	8001e02 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	089b      	lsrs	r3, r3, #2
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d030      	beq.n	8001da0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d4c:	f000 80e8 	beq.w	8001f20 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	09db      	lsrs	r3, r3, #7
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00f      	beq.n	8001d7c <HAL_I2C_EV_IRQHandler+0x11c>
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	0a9b      	lsrs	r3, r3, #10
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d009      	beq.n	8001d7c <HAL_I2C_EV_IRQHandler+0x11c>
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d103      	bne.n	8001d7c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f937 	bl	8001fe8 <I2C_MasterTransmit_TXE>
 8001d7a:	e042      	b.n	8001e02 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	089b      	lsrs	r3, r3, #2
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 80cb 	beq.w	8001f20 <HAL_I2C_EV_IRQHandler+0x2c0>
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	0a5b      	lsrs	r3, r3, #9
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 80c4 	beq.w	8001f20 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 fa1d 	bl	80021d8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d9e:	e0bf      	b.n	8001f20 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dae:	f000 80b7 	beq.w	8001f20 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	099b      	lsrs	r3, r3, #6
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00f      	beq.n	8001dde <HAL_I2C_EV_IRQHandler+0x17e>
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	0a9b      	lsrs	r3, r3, #10
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d009      	beq.n	8001dde <HAL_I2C_EV_IRQHandler+0x17e>
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	089b      	lsrs	r3, r3, #2
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d103      	bne.n	8001dde <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 fa74 	bl	80022c4 <I2C_MasterReceive_RXNE>
 8001ddc:	e011      	b.n	8001e02 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	089b      	lsrs	r3, r3, #2
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 809a 	beq.w	8001f20 <HAL_I2C_EV_IRQHandler+0x2c0>
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	0a5b      	lsrs	r3, r3, #9
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 8093 	beq.w	8001f20 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 fae4 	bl	80023c8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e00:	e08e      	b.n	8001f20 <HAL_I2C_EV_IRQHandler+0x2c0>
 8001e02:	e08d      	b.n	8001f20 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d004      	beq.n	8001e16 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	61fb      	str	r3, [r7, #28]
 8001e14:	e007      	b.n	8001e26 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	085b      	lsrs	r3, r3, #1
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d012      	beq.n	8001e58 <HAL_I2C_EV_IRQHandler+0x1f8>
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	0a5b      	lsrs	r3, r3, #9
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00c      	beq.n	8001e58 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001e4e:	69b9      	ldr	r1, [r7, #24]
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 fe9d 	bl	8002b90 <I2C_Slave_ADDR>
 8001e56:	e066      	b.n	8001f26 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	091b      	lsrs	r3, r3, #4
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d009      	beq.n	8001e78 <HAL_I2C_EV_IRQHandler+0x218>
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	0a5b      	lsrs	r3, r3, #9
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 fed1 	bl	8002c18 <I2C_Slave_STOPF>
 8001e76:	e056      	b.n	8001f26 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001e78:	7bbb      	ldrb	r3, [r7, #14]
 8001e7a:	2b21      	cmp	r3, #33	; 0x21
 8001e7c:	d002      	beq.n	8001e84 <HAL_I2C_EV_IRQHandler+0x224>
 8001e7e:	7bbb      	ldrb	r3, [r7, #14]
 8001e80:	2b29      	cmp	r3, #41	; 0x29
 8001e82:	d125      	bne.n	8001ed0 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	09db      	lsrs	r3, r3, #7
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00f      	beq.n	8001eb0 <HAL_I2C_EV_IRQHandler+0x250>
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	0a9b      	lsrs	r3, r3, #10
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d009      	beq.n	8001eb0 <HAL_I2C_EV_IRQHandler+0x250>
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	089b      	lsrs	r3, r3, #2
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d103      	bne.n	8001eb0 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 fdb5 	bl	8002a18 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001eae:	e039      	b.n	8001f24 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d033      	beq.n	8001f24 <HAL_I2C_EV_IRQHandler+0x2c4>
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	0a5b      	lsrs	r3, r3, #9
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d02d      	beq.n	8001f24 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 fde2 	bl	8002a92 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ece:	e029      	b.n	8001f24 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	099b      	lsrs	r3, r3, #6
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00f      	beq.n	8001efc <HAL_I2C_EV_IRQHandler+0x29c>
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	0a9b      	lsrs	r3, r3, #10
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d009      	beq.n	8001efc <HAL_I2C_EV_IRQHandler+0x29c>
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	089b      	lsrs	r3, r3, #2
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d103      	bne.n	8001efc <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 fdec 	bl	8002ad2 <I2C_SlaveReceive_RXNE>
 8001efa:	e014      	b.n	8001f26 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	089b      	lsrs	r3, r3, #2
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00e      	beq.n	8001f26 <HAL_I2C_EV_IRQHandler+0x2c6>
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	0a5b      	lsrs	r3, r3, #9
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 fe1a 	bl	8002b4e <I2C_SlaveReceive_BTF>
 8001f1a:	e004      	b.n	8001f26 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8001f1c:	bf00      	nop
 8001f1e:	e002      	b.n	8001f26 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f20:	bf00      	nop
 8001f22:	e000      	b.n	8001f26 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f24:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001f26:	3720      	adds	r7, #32
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr

08001f3e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr

08001f62 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	70fb      	strb	r3, [r7, #3]
 8001f80:	4613      	mov	r3, r2
 8001f82:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr

08001f8e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ffe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200a:	2b00      	cmp	r3, #0
 800200c:	d150      	bne.n	80020b0 <I2C_MasterTransmit_TXE+0xc8>
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	2b21      	cmp	r3, #33	; 0x21
 8002012:	d14d      	bne.n	80020b0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b08      	cmp	r3, #8
 8002018:	d01d      	beq.n	8002056 <I2C_MasterTransmit_TXE+0x6e>
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b20      	cmp	r3, #32
 800201e:	d01a      	beq.n	8002056 <I2C_MasterTransmit_TXE+0x6e>
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002026:	d016      	beq.n	8002056 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002036:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2211      	movs	r2, #17
 800203c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2220      	movs	r2, #32
 800204a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ff6c 	bl	8001f2c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002054:	e0bc      	b.n	80021d0 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002064:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002074:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2220      	movs	r2, #32
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b40      	cmp	r3, #64	; 0x40
 800208e:	d107      	bne.n	80020a0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff ff81 	bl	8001fa0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800209e:	e097      	b.n	80021d0 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ff3f 	bl	8001f2c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020ae:	e08f      	b.n	80021d0 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	2b21      	cmp	r3, #33	; 0x21
 80020b4:	d007      	beq.n	80020c6 <I2C_MasterTransmit_TXE+0xde>
 80020b6:	7bbb      	ldrb	r3, [r7, #14]
 80020b8:	2b40      	cmp	r3, #64	; 0x40
 80020ba:	f040 8089 	bne.w	80021d0 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	2b22      	cmp	r3, #34	; 0x22
 80020c2:	f040 8085 	bne.w	80021d0 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d108      	bne.n	80020e2 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020de:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80020e0:	e076      	b.n	80021d0 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b40      	cmp	r3, #64	; 0x40
 80020ec:	d15d      	bne.n	80021aa <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d11d      	bne.n	8002132 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d10b      	bne.n	8002116 <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002102:	b2da      	uxtb	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800210e:	1c9a      	adds	r2, r3, #2
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002114:	e05c      	b.n	80021d0 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211a:	b29b      	uxth	r3, r3
 800211c:	121b      	asrs	r3, r3, #8
 800211e:	b2da      	uxtb	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002130:	e04e      	b.n	80021d0 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002136:	2b01      	cmp	r3, #1
 8002138:	d10b      	bne.n	8002152 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800213e:	b2da      	uxtb	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002150:	e03e      	b.n	80021d0 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002156:	2b02      	cmp	r3, #2
 8002158:	d13a      	bne.n	80021d0 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b22      	cmp	r3, #34	; 0x22
 8002164:	d108      	bne.n	8002178 <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002174:	601a      	str	r2, [r3, #0]
}
 8002176:	e02b      	b.n	80021d0 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b21      	cmp	r3, #33	; 0x21
 8002182:	d125      	bne.n	80021d0 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	781a      	ldrb	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219e:	b29b      	uxth	r3, r3
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80021a8:	e012      	b.n	80021d0 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	781a      	ldrb	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80021ce:	e7ff      	b.n	80021d0 <I2C_MasterTransmit_TXE+0x1e8>
 80021d0:	bf00      	nop
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b21      	cmp	r3, #33	; 0x21
 80021f0:	d164      	bne.n	80022bc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d012      	beq.n	8002222 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	781a      	ldrb	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002216:	b29b      	uxth	r3, r3
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 8002220:	e04c      	b.n	80022bc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b08      	cmp	r3, #8
 8002226:	d01d      	beq.n	8002264 <I2C_MasterTransmit_BTF+0x8c>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b20      	cmp	r3, #32
 800222c:	d01a      	beq.n	8002264 <I2C_MasterTransmit_BTF+0x8c>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002234:	d016      	beq.n	8002264 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002244:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2211      	movs	r2, #17
 800224a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2220      	movs	r2, #32
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff fe65 	bl	8001f2c <HAL_I2C_MasterTxCpltCallback>
}
 8002262:	e02b      	b.n	80022bc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002272:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002282:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2220      	movs	r2, #32
 800228e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b40      	cmp	r3, #64	; 0x40
 800229c:	d107      	bne.n	80022ae <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff fe7a 	bl	8001fa0 <HAL_I2C_MemTxCpltCallback>
}
 80022ac:	e006      	b.n	80022bc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff fe38 	bl	8001f2c <HAL_I2C_MasterTxCpltCallback>
}
 80022bc:	bf00      	nop
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b22      	cmp	r3, #34	; 0x22
 80022d6:	d173      	bne.n	80023c0 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022dc:	b29b      	uxth	r3, r3
 80022de:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d920      	bls.n	8002328 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002302:	b29b      	uxth	r3, r3
 8002304:	3b01      	subs	r3, #1
 8002306:	b29a      	uxth	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002310:	b29b      	uxth	r3, r3
 8002312:	2b03      	cmp	r3, #3
 8002314:	d154      	bne.n	80023c0 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002324:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002326:	e04b      	b.n	80023c0 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	2b02      	cmp	r3, #2
 800232e:	d047      	beq.n	80023c0 <I2C_MasterReceive_RXNE+0xfc>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d002      	beq.n	800233c <I2C_MasterReceive_RXNE+0x78>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d141      	bne.n	80023c0 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800234a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800235a:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	691a      	ldr	r2, [r3, #16]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002378:	b29b      	uxth	r3, r3
 800237a:	3b01      	subs	r3, #1
 800237c:	b29a      	uxth	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2220      	movs	r2, #32
 8002386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b40      	cmp	r3, #64	; 0x40
 8002394:	d10a      	bne.n	80023ac <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff fe04 	bl	8001fb2 <HAL_I2C_MemRxCpltCallback>
}
 80023aa:	e009      	b.n	80023c0 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2212      	movs	r2, #18
 80023b8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff fdbf 	bl	8001f3e <HAL_I2C_MasterRxCpltCallback>
}
 80023c0:	bf00      	nop
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023da:	b29b      	uxth	r3, r3
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d11b      	bne.n	8002418 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ee:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691a      	ldr	r2, [r3, #16]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002416:	e0bd      	b.n	8002594 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241c:	b29b      	uxth	r3, r3
 800241e:	2b03      	cmp	r3, #3
 8002420:	d129      	bne.n	8002476 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002430:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b04      	cmp	r3, #4
 8002436:	d00a      	beq.n	800244e <I2C_MasterReceive_BTF+0x86>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d007      	beq.n	800244e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800244c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246a:	b29b      	uxth	r3, r3
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002474:	e08e      	b.n	8002594 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247a:	b29b      	uxth	r3, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d176      	bne.n	800256e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d002      	beq.n	800248c <I2C_MasterReceive_BTF+0xc4>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2b10      	cmp	r3, #16
 800248a:	d108      	bne.n	800249e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	e019      	b.n	80024d2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d002      	beq.n	80024aa <I2C_MasterReceive_BTF+0xe2>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d108      	bne.n	80024bc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	e00a      	b.n	80024d2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b10      	cmp	r3, #16
 80024c0:	d007      	beq.n	80024d2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002514:	b29b      	uxth	r3, r3
 8002516:	3b01      	subs	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800252c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2220      	movs	r2, #32
 8002532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b40      	cmp	r3, #64	; 0x40
 8002540:	d10a      	bne.n	8002558 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff fd2e 	bl	8001fb2 <HAL_I2C_MemRxCpltCallback>
}
 8002556:	e01d      	b.n	8002594 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2212      	movs	r2, #18
 8002564:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff fce9 	bl	8001f3e <HAL_I2C_MasterRxCpltCallback>
}
 800256c:	e012      	b.n	8002594 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	1c5a      	adds	r2, r3, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258a:	b29b      	uxth	r3, r3
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002594:	bf00      	nop
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b40      	cmp	r3, #64	; 0x40
 80025ae:	d117      	bne.n	80025e0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d109      	bne.n	80025cc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	461a      	mov	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025c8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80025ca:	e067      	b.n	800269c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	611a      	str	r2, [r3, #16]
}
 80025de:	e05d      	b.n	800269c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025e8:	d133      	bne.n	8002652 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b21      	cmp	r3, #33	; 0x21
 80025f4:	d109      	bne.n	800260a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	461a      	mov	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002606:	611a      	str	r2, [r3, #16]
 8002608:	e008      	b.n	800261c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	b2db      	uxtb	r3, r3
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	b2da      	uxtb	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002620:	2b00      	cmp	r3, #0
 8002622:	d103      	bne.n	800262c <I2C_Master_SB+0x90>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002628:	2b00      	cmp	r3, #0
 800262a:	d037      	beq.n	800269c <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002632:	2b00      	cmp	r3, #0
 8002634:	d104      	bne.n	8002640 <I2C_Master_SB+0xa4>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	2b00      	cmp	r3, #0
 800263e:	d02d      	beq.n	800269c <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800264e:	605a      	str	r2, [r3, #4]
}
 8002650:	e024      	b.n	800269c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10e      	bne.n	8002678 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	b29b      	uxth	r3, r3
 8002660:	11db      	asrs	r3, r3, #7
 8002662:	b2db      	uxtb	r3, r3
 8002664:	f003 0306 	and.w	r3, r3, #6
 8002668:	b2db      	uxtb	r3, r3
 800266a:	f063 030f 	orn	r3, r3, #15
 800266e:	b2da      	uxtb	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	611a      	str	r2, [r3, #16]
}
 8002676:	e011      	b.n	800269c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800267c:	2b01      	cmp	r3, #1
 800267e:	d10d      	bne.n	800269c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002684:	b29b      	uxth	r3, r3
 8002686:	11db      	asrs	r3, r3, #7
 8002688:	b2db      	uxtb	r3, r3
 800268a:	f003 0306 	and.w	r3, r3, #6
 800268e:	b2db      	uxtb	r3, r3
 8002690:	f063 030e 	orn	r3, r3, #14
 8002694:	b2da      	uxtb	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	611a      	str	r2, [r3, #16]
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr

080026a6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d103      	bne.n	80026ca <I2C_Master_ADD10+0x24>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d011      	beq.n	80026ee <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d104      	bne.n	80026de <I2C_Master_ADD10+0x38>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d007      	beq.n	80026ee <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ec:	605a      	str	r2, [r3, #4]
    }
  }
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b091      	sub	sp, #68	; 0x44
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002706:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002714:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b22      	cmp	r3, #34	; 0x22
 8002720:	f040 8169 	bne.w	80029f6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10f      	bne.n	800274c <I2C_Master_ADDR+0x54>
 800272c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002730:	2b40      	cmp	r3, #64	; 0x40
 8002732:	d10b      	bne.n	800274c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002734:	2300      	movs	r3, #0
 8002736:	633b      	str	r3, [r7, #48]	; 0x30
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	633b      	str	r3, [r7, #48]	; 0x30
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	633b      	str	r3, [r7, #48]	; 0x30
 8002748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274a:	e160      	b.n	8002a0e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002750:	2b00      	cmp	r3, #0
 8002752:	d11d      	bne.n	8002790 <I2C_Master_ADDR+0x98>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800275c:	d118      	bne.n	8002790 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800275e:	2300      	movs	r3, #0
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002772:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002782:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	651a      	str	r2, [r3, #80]	; 0x50
 800278e:	e13e      	b.n	8002a0e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d113      	bne.n	80027c2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279a:	2300      	movs	r3, #0
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ae:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	e115      	b.n	80029ee <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	f040 808a 	bne.w	80028e2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80027ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027d4:	d137      	bne.n	8002846 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027f4:	d113      	bne.n	800281e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002804:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002806:	2300      	movs	r3, #0
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	e0e7      	b.n	80029ee <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800281e:	2300      	movs	r3, #0
 8002820:	623b      	str	r3, [r7, #32]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	623b      	str	r3, [r7, #32]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	623b      	str	r3, [r7, #32]
 8002832:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	e0d3      	b.n	80029ee <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002848:	2b08      	cmp	r3, #8
 800284a:	d02e      	beq.n	80028aa <I2C_Master_ADDR+0x1b2>
 800284c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284e:	2b20      	cmp	r3, #32
 8002850:	d02b      	beq.n	80028aa <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002854:	2b12      	cmp	r3, #18
 8002856:	d102      	bne.n	800285e <I2C_Master_ADDR+0x166>
 8002858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285a:	2b01      	cmp	r3, #1
 800285c:	d125      	bne.n	80028aa <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800285e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002860:	2b04      	cmp	r3, #4
 8002862:	d00e      	beq.n	8002882 <I2C_Master_ADDR+0x18a>
 8002864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002866:	2b02      	cmp	r3, #2
 8002868:	d00b      	beq.n	8002882 <I2C_Master_ADDR+0x18a>
 800286a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286c:	2b10      	cmp	r3, #16
 800286e:	d008      	beq.n	8002882 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	e007      	b.n	8002892 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002890:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	e0a1      	b.n	80029ee <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028b8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ba:	2300      	movs	r3, #0
 80028bc:	61bb      	str	r3, [r7, #24]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	61bb      	str	r3, [r7, #24]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	61bb      	str	r3, [r7, #24]
 80028ce:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e085      	b.n	80029ee <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d14d      	bne.n	8002988 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80028ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d016      	beq.n	8002920 <I2C_Master_ADDR+0x228>
 80028f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d013      	beq.n	8002920 <I2C_Master_ADDR+0x228>
 80028f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fa:	2b10      	cmp	r3, #16
 80028fc:	d010      	beq.n	8002920 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800290c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	e007      	b.n	8002930 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800292e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800293a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800293e:	d117      	bne.n	8002970 <I2C_Master_ADDR+0x278>
 8002940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002942:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002946:	d00b      	beq.n	8002960 <I2C_Master_ADDR+0x268>
 8002948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294a:	2b01      	cmp	r3, #1
 800294c:	d008      	beq.n	8002960 <I2C_Master_ADDR+0x268>
 800294e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002950:	2b08      	cmp	r3, #8
 8002952:	d005      	beq.n	8002960 <I2C_Master_ADDR+0x268>
 8002954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002956:	2b10      	cmp	r3, #16
 8002958:	d002      	beq.n	8002960 <I2C_Master_ADDR+0x268>
 800295a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295c:	2b20      	cmp	r3, #32
 800295e:	d107      	bne.n	8002970 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800296e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	e032      	b.n	80029ee <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002996:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029a6:	d117      	bne.n	80029d8 <I2C_Master_ADDR+0x2e0>
 80029a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029ae:	d00b      	beq.n	80029c8 <I2C_Master_ADDR+0x2d0>
 80029b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d008      	beq.n	80029c8 <I2C_Master_ADDR+0x2d0>
 80029b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d005      	beq.n	80029c8 <I2C_Master_ADDR+0x2d0>
 80029bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029be:	2b10      	cmp	r3, #16
 80029c0:	d002      	beq.n	80029c8 <I2C_Master_ADDR+0x2d0>
 80029c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c4:	2b20      	cmp	r3, #32
 80029c6:	d107      	bne.n	80029d8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029d6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d8:	2300      	movs	r3, #0
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80029f4:	e00b      	b.n	8002a0e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
}
 8002a0c:	e7ff      	b.n	8002a0e <I2C_Master_ADDR+0x316>
 8002a0e:	bf00      	nop
 8002a10:	3744      	adds	r7, #68	; 0x44
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr

08002a18 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a26:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d02b      	beq.n	8002a8a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	781a      	ldrb	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	1c5a      	adds	r2, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d114      	bne.n	8002a8a <I2C_SlaveTransmit_TXE+0x72>
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	2b29      	cmp	r3, #41	; 0x29
 8002a64:	d111      	bne.n	8002a8a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a74:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2221      	movs	r2, #33	; 0x21
 8002a7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2228      	movs	r2, #40	; 0x28
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff fa63 	bl	8001f50 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d011      	beq.n	8002ac8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	781a      	ldrb	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d02c      	beq.n	8002b46 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691a      	ldr	r2, [r3, #16]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	1c5a      	adds	r2, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d114      	bne.n	8002b46 <I2C_SlaveReceive_RXNE+0x74>
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
 8002b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8002b20:	d111      	bne.n	8002b46 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b30:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2222      	movs	r2, #34	; 0x22
 8002b36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2228      	movs	r2, #40	; 0x28
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff fa0e 	bl	8001f62 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002b46:	bf00      	nop
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d012      	beq.n	8002b86 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691a      	ldr	r2, [r3, #16]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002baa:	2b28      	cmp	r3, #40	; 0x28
 8002bac:	d127      	bne.n	8002bfe <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bbc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	089b      	lsrs	r3, r3, #2
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	09db      	lsrs	r3, r3, #7
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d103      	bne.n	8002be2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	81bb      	strh	r3, [r7, #12]
 8002be0:	e002      	b.n	8002be8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002bf0:	89ba      	ldrh	r2, [r7, #12]
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff f9bc 	bl	8001f74 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002bfc:	e008      	b.n	8002c10 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f06f 0202 	mvn.w	r2, #2
 8002c06:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002c10:	bf00      	nop
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c26:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c36:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60bb      	str	r3, [r7, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0201 	orr.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c64:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c74:	d172      	bne.n	8002d5c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	2b22      	cmp	r3, #34	; 0x22
 8002c7a:	d002      	beq.n	8002c82 <I2C_Slave_STOPF+0x6a>
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8002c80:	d135      	bne.n	8002cee <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f043 0204 	orr.w	r2, r3, #4
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cb4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fe fcf4 	bl	80016a8 <HAL_DMA_GetState>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d049      	beq.n	8002d5a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cca:	4a69      	ldr	r2, [pc, #420]	; (8002e70 <I2C_Slave_STOPF+0x258>)
 8002ccc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fe fca7 	bl	8001626 <HAL_DMA_Abort_IT>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d03d      	beq.n	8002d5a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ce8:	4610      	mov	r0, r2
 8002cea:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002cec:	e035      	b.n	8002d5a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	f043 0204 	orr.w	r2, r3, #4
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d20:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe fcbe 	bl	80016a8 <HAL_DMA_GetState>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d014      	beq.n	8002d5c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d36:	4a4e      	ldr	r2, [pc, #312]	; (8002e70 <I2C_Slave_STOPF+0x258>)
 8002d38:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe fc71 	bl	8001626 <HAL_DMA_Abort_IT>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d008      	beq.n	8002d5c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d54:	4610      	mov	r0, r2
 8002d56:	4798      	blx	r3
 8002d58:	e000      	b.n	8002d5c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d5a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d03e      	beq.n	8002de4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d112      	bne.n	8002d9a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691a      	ldr	r2, [r3, #16]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da4:	2b40      	cmp	r3, #64	; 0x40
 8002da6:	d112      	bne.n	8002dce <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691a      	ldr	r2, [r3, #16]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	1c5a      	adds	r2, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	f043 0204 	orr.w	r2, r3, #4
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f843 	bl	8002e78 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002df2:	e039      	b.n	8002e68 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	2b2a      	cmp	r3, #42	; 0x2a
 8002df8:	d109      	bne.n	8002e0e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2228      	movs	r2, #40	; 0x28
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff f8aa 	bl	8001f62 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b28      	cmp	r3, #40	; 0x28
 8002e18:	d111      	bne.n	8002e3e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a15      	ldr	r2, [pc, #84]	; (8002e74 <I2C_Slave_STOPF+0x25c>)
 8002e1e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff f8a9 	bl	8001f8e <HAL_I2C_ListenCpltCallback>
}
 8002e3c:	e014      	b.n	8002e68 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	2b22      	cmp	r3, #34	; 0x22
 8002e44:	d002      	beq.n	8002e4c <I2C_Slave_STOPF+0x234>
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
 8002e48:	2b22      	cmp	r3, #34	; 0x22
 8002e4a:	d10d      	bne.n	8002e68 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2220      	movs	r2, #32
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff f87d 	bl	8001f62 <HAL_I2C_SlaveRxCpltCallback>
}
 8002e68:	bf00      	nop
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	080030a9 	.word	0x080030a9
 8002e74:	ffff0000 	.word	0xffff0000

08002e78 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e86:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b10      	cmp	r3, #16
 8002e92:	d10a      	bne.n	8002eaa <I2C_ITError+0x32>
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	2b22      	cmp	r3, #34	; 0x22
 8002e98:	d107      	bne.n	8002eaa <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ea8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002eb0:	2b28      	cmp	r3, #40	; 0x28
 8002eb2:	d107      	bne.n	8002ec4 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2228      	movs	r2, #40	; 0x28
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002ec2:	e015      	b.n	8002ef0 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ed2:	d006      	beq.n	8002ee2 <I2C_ITError+0x6a>
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
 8002ed6:	2b60      	cmp	r3, #96	; 0x60
 8002ed8:	d003      	beq.n	8002ee2 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002efe:	d162      	bne.n	8002fc6 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f0e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d020      	beq.n	8002f60 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f22:	4a5f      	ldr	r2, [pc, #380]	; (80030a0 <I2C_ITError+0x228>)
 8002f24:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fe fb7b 	bl	8001626 <HAL_DMA_Abort_IT>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 8089 	beq.w	800304a <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	4798      	blx	r3
 8002f5e:	e074      	b.n	800304a <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	4a4e      	ldr	r2, [pc, #312]	; (80030a0 <I2C_ITError+0x228>)
 8002f66:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fe fb5a 	bl	8001626 <HAL_DMA_Abort_IT>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d068      	beq.n	800304a <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f82:	2b40      	cmp	r3, #64	; 0x40
 8002f84:	d10b      	bne.n	8002f9e <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0201 	bic.w	r2, r2, #1
 8002fac:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	4798      	blx	r3
 8002fc4:	e041      	b.n	800304a <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b60      	cmp	r3, #96	; 0x60
 8002fd0:	d125      	bne.n	800301e <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fea:	2b40      	cmp	r3, #64	; 0x40
 8002fec:	d10b      	bne.n	8003006 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0201 	bic.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fe ffdd 	bl	8001fd6 <HAL_I2C_AbortCpltCallback>
 800301c:	e015      	b.n	800304a <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003028:	2b40      	cmp	r3, #64	; 0x40
 800302a:	d10b      	bne.n	8003044 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691a      	ldr	r2, [r3, #16]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	1c5a      	adds	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7fe ffbd 	bl	8001fc4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003050:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b04      	cmp	r3, #4
 800305c:	d11b      	bne.n	8003096 <I2C_ITError+0x21e>
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	2b28      	cmp	r3, #40	; 0x28
 8003062:	d118      	bne.n	8003096 <I2C_ITError+0x21e>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003072:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a0b      	ldr	r2, [pc, #44]	; (80030a4 <I2C_ITError+0x22c>)
 8003078:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7fe ff7c 	bl	8001f8e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003096:	bf00      	nop
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	080030a9 	.word	0x080030a9
 80030a4:	ffff0000 	.word	0xffff0000

080030a8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030bc:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c2:	2200      	movs	r2, #0
 80030c4:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ca:	2200      	movs	r2, #0
 80030cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030dc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e8:	2200      	movs	r2, #0
 80030ea:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f0:	2200      	movs	r2, #0
 80030f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0201 	bic.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b60      	cmp	r3, #96	; 0x60
 800310e:	d10e      	bne.n	800312e <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f7fe ff55 	bl	8001fd6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800312c:	e027      	b.n	800317e <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800312e:	7afb      	ldrb	r3, [r7, #11]
 8003130:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003134:	2b28      	cmp	r3, #40	; 0x28
 8003136:	d117      	bne.n	8003168 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003156:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2228      	movs	r2, #40	; 0x28
 8003162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003166:	e007      	b.n	8003178 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f7fe ff23 	bl	8001fc4 <HAL_I2C_ErrorCallback>
}
 800317e:	bf00      	nop
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003192:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003196:	d103      	bne.n	80031a0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800319e:	e007      	b.n	80031b0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80031a8:	d102      	bne.n	80031b0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2208      	movs	r2, #8
 80031ae:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr
	...

080031bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e31d      	b.n	800380a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ce:	4b94      	ldr	r3, [pc, #592]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 030c 	and.w	r3, r3, #12
 80031d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031d8:	4b91      	ldr	r3, [pc, #580]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d07b      	beq.n	80032e6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d006      	beq.n	8003202 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d10f      	bne.n	800321a <HAL_RCC_OscConfig+0x5e>
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003200:	d10b      	bne.n	800321a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003202:	4b87      	ldr	r3, [pc, #540]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d06a      	beq.n	80032e4 <HAL_RCC_OscConfig+0x128>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d166      	bne.n	80032e4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e2f7      	b.n	800380a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d106      	bne.n	8003230 <HAL_RCC_OscConfig+0x74>
 8003222:	4b7f      	ldr	r3, [pc, #508]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a7e      	ldr	r2, [pc, #504]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 8003228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	e02d      	b.n	800328c <HAL_RCC_OscConfig+0xd0>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10c      	bne.n	8003252 <HAL_RCC_OscConfig+0x96>
 8003238:	4b79      	ldr	r3, [pc, #484]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a78      	ldr	r2, [pc, #480]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 800323e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	4b76      	ldr	r3, [pc, #472]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a75      	ldr	r2, [pc, #468]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 800324a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	e01c      	b.n	800328c <HAL_RCC_OscConfig+0xd0>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b05      	cmp	r3, #5
 8003258:	d10c      	bne.n	8003274 <HAL_RCC_OscConfig+0xb8>
 800325a:	4b71      	ldr	r3, [pc, #452]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a70      	ldr	r2, [pc, #448]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 8003260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	4b6e      	ldr	r3, [pc, #440]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a6d      	ldr	r2, [pc, #436]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 800326c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	e00b      	b.n	800328c <HAL_RCC_OscConfig+0xd0>
 8003274:	4b6a      	ldr	r3, [pc, #424]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a69      	ldr	r2, [pc, #420]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 800327a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	4b67      	ldr	r3, [pc, #412]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a66      	ldr	r2, [pc, #408]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 8003286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800328a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d013      	beq.n	80032bc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7fd fe2c 	bl	8000ef0 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800329c:	f7fd fe28 	bl	8000ef0 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	; 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e2ad      	b.n	800380a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032ae:	4b5c      	ldr	r3, [pc, #368]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0xe0>
 80032ba:	e014      	b.n	80032e6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032bc:	f7fd fe18 	bl	8000ef0 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c4:	f7fd fe14 	bl	8000ef0 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b64      	cmp	r3, #100	; 0x64
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e299      	b.n	800380a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032d6:	4b52      	ldr	r3, [pc, #328]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x108>
 80032e2:	e000      	b.n	80032e6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d05a      	beq.n	80033a8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d005      	beq.n	8003304 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2b0c      	cmp	r3, #12
 80032fc:	d119      	bne.n	8003332 <HAL_RCC_OscConfig+0x176>
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d116      	bne.n	8003332 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003304:	4b46      	ldr	r3, [pc, #280]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <HAL_RCC_OscConfig+0x160>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d001      	beq.n	800331c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e276      	b.n	800380a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800331c:	4b40      	ldr	r3, [pc, #256]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	021b      	lsls	r3, r3, #8
 800332a:	493d      	ldr	r1, [pc, #244]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 800332c:	4313      	orrs	r3, r2
 800332e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003330:	e03a      	b.n	80033a8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d020      	beq.n	800337c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800333a:	4b3a      	ldr	r3, [pc, #232]	; (8003424 <HAL_RCC_OscConfig+0x268>)
 800333c:	2201      	movs	r2, #1
 800333e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003340:	f7fd fdd6 	bl	8000ef0 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003348:	f7fd fdd2 	bl	8000ef0 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e257      	b.n	800380a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800335a:	4b31      	ldr	r3, [pc, #196]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f0      	beq.n	8003348 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003366:	4b2e      	ldr	r3, [pc, #184]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	021b      	lsls	r3, r3, #8
 8003374:	492a      	ldr	r1, [pc, #168]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 8003376:	4313      	orrs	r3, r2
 8003378:	604b      	str	r3, [r1, #4]
 800337a:	e015      	b.n	80033a8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800337c:	4b29      	ldr	r3, [pc, #164]	; (8003424 <HAL_RCC_OscConfig+0x268>)
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003382:	f7fd fdb5 	bl	8000ef0 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800338a:	f7fd fdb1 	bl	8000ef0 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e236      	b.n	800380a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800339c:	4b20      	ldr	r3, [pc, #128]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1f0      	bne.n	800338a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0310 	and.w	r3, r3, #16
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80b8 	beq.w	8003526 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d170      	bne.n	800349e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033bc:	4b18      	ldr	r3, [pc, #96]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <HAL_RCC_OscConfig+0x218>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e21a      	b.n	800380a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1a      	ldr	r2, [r3, #32]
 80033d8:	4b11      	ldr	r3, [pc, #68]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d921      	bls.n	8003428 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 fc05 	bl	8003bf8 <RCC_SetFlashLatencyFromMSIRange>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e208      	b.n	800380a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033f8:	4b09      	ldr	r3, [pc, #36]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	4906      	ldr	r1, [pc, #24]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 8003406:	4313      	orrs	r3, r2
 8003408:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800340a:	4b05      	ldr	r3, [pc, #20]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	061b      	lsls	r3, r3, #24
 8003418:	4901      	ldr	r1, [pc, #4]	; (8003420 <HAL_RCC_OscConfig+0x264>)
 800341a:	4313      	orrs	r3, r2
 800341c:	604b      	str	r3, [r1, #4]
 800341e:	e020      	b.n	8003462 <HAL_RCC_OscConfig+0x2a6>
 8003420:	40023800 	.word	0x40023800
 8003424:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003428:	4ba4      	ldr	r3, [pc, #656]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	49a1      	ldr	r1, [pc, #644]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 8003436:	4313      	orrs	r3, r2
 8003438:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800343a:	4ba0      	ldr	r3, [pc, #640]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	061b      	lsls	r3, r3, #24
 8003448:	499c      	ldr	r1, [pc, #624]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 800344a:	4313      	orrs	r3, r2
 800344c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	4618      	mov	r0, r3
 8003454:	f000 fbd0 	bl	8003bf8 <RCC_SetFlashLatencyFromMSIRange>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e1d3      	b.n	800380a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	0b5b      	lsrs	r3, r3, #13
 8003468:	3301      	adds	r3, #1
 800346a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003472:	4a92      	ldr	r2, [pc, #584]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 8003474:	6892      	ldr	r2, [r2, #8]
 8003476:	0912      	lsrs	r2, r2, #4
 8003478:	f002 020f 	and.w	r2, r2, #15
 800347c:	4990      	ldr	r1, [pc, #576]	; (80036c0 <HAL_RCC_OscConfig+0x504>)
 800347e:	5c8a      	ldrb	r2, [r1, r2]
 8003480:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003482:	4a90      	ldr	r2, [pc, #576]	; (80036c4 <HAL_RCC_OscConfig+0x508>)
 8003484:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003486:	4b90      	ldr	r3, [pc, #576]	; (80036c8 <HAL_RCC_OscConfig+0x50c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fd f9e2 	bl	8000854 <HAL_InitTick>
 8003490:	4603      	mov	r3, r0
 8003492:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d045      	beq.n	8003526 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	e1b5      	b.n	800380a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d029      	beq.n	80034fa <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034a6:	4b89      	ldr	r3, [pc, #548]	; (80036cc <HAL_RCC_OscConfig+0x510>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ac:	f7fd fd20 	bl	8000ef0 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034b4:	f7fd fd1c 	bl	8000ef0 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e1a1      	b.n	800380a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80034c6:	4b7d      	ldr	r3, [pc, #500]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034d2:	4b7a      	ldr	r3, [pc, #488]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	4977      	ldr	r1, [pc, #476]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034e4:	4b75      	ldr	r3, [pc, #468]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	061b      	lsls	r3, r3, #24
 80034f2:	4972      	ldr	r1, [pc, #456]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	604b      	str	r3, [r1, #4]
 80034f8:	e015      	b.n	8003526 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034fa:	4b74      	ldr	r3, [pc, #464]	; (80036cc <HAL_RCC_OscConfig+0x510>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003500:	f7fd fcf6 	bl	8000ef0 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003508:	f7fd fcf2 	bl	8000ef0 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e177      	b.n	800380a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800351a:	4b68      	ldr	r3, [pc, #416]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d030      	beq.n	8003594 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d016      	beq.n	8003568 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353a:	4b65      	ldr	r3, [pc, #404]	; (80036d0 <HAL_RCC_OscConfig+0x514>)
 800353c:	2201      	movs	r2, #1
 800353e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003540:	f7fd fcd6 	bl	8000ef0 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003548:	f7fd fcd2 	bl	8000ef0 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e157      	b.n	800380a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800355a:	4b58      	ldr	r3, [pc, #352]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 800355c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0x38c>
 8003566:	e015      	b.n	8003594 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003568:	4b59      	ldr	r3, [pc, #356]	; (80036d0 <HAL_RCC_OscConfig+0x514>)
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356e:	f7fd fcbf 	bl	8000ef0 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003576:	f7fd fcbb 	bl	8000ef0 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e140      	b.n	800380a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003588:	4b4c      	ldr	r3, [pc, #304]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 800358a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1f0      	bne.n	8003576 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80b5 	beq.w	800370c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035a2:	2300      	movs	r3, #0
 80035a4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a6:	4b45      	ldr	r3, [pc, #276]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10d      	bne.n	80035ce <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b2:	4b42      	ldr	r3, [pc, #264]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	4a41      	ldr	r2, [pc, #260]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 80035b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035bc:	6253      	str	r3, [r2, #36]	; 0x24
 80035be:	4b3f      	ldr	r3, [pc, #252]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c6:	60bb      	str	r3, [r7, #8]
 80035c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ca:	2301      	movs	r3, #1
 80035cc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ce:	4b41      	ldr	r3, [pc, #260]	; (80036d4 <HAL_RCC_OscConfig+0x518>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d118      	bne.n	800360c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035da:	4b3e      	ldr	r3, [pc, #248]	; (80036d4 <HAL_RCC_OscConfig+0x518>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a3d      	ldr	r2, [pc, #244]	; (80036d4 <HAL_RCC_OscConfig+0x518>)
 80035e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e6:	f7fd fc83 	bl	8000ef0 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ee:	f7fd fc7f 	bl	8000ef0 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b64      	cmp	r3, #100	; 0x64
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e104      	b.n	800380a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003600:	4b34      	ldr	r3, [pc, #208]	; (80036d4 <HAL_RCC_OscConfig+0x518>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d106      	bne.n	8003622 <HAL_RCC_OscConfig+0x466>
 8003614:	4b29      	ldr	r3, [pc, #164]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 8003616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003618:	4a28      	ldr	r2, [pc, #160]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 800361a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361e:	6353      	str	r3, [r2, #52]	; 0x34
 8003620:	e02d      	b.n	800367e <HAL_RCC_OscConfig+0x4c2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10c      	bne.n	8003644 <HAL_RCC_OscConfig+0x488>
 800362a:	4b24      	ldr	r3, [pc, #144]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 800362c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362e:	4a23      	ldr	r2, [pc, #140]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 8003630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003634:	6353      	str	r3, [r2, #52]	; 0x34
 8003636:	4b21      	ldr	r3, [pc, #132]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 8003638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363a:	4a20      	ldr	r2, [pc, #128]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 800363c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003640:	6353      	str	r3, [r2, #52]	; 0x34
 8003642:	e01c      	b.n	800367e <HAL_RCC_OscConfig+0x4c2>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b05      	cmp	r3, #5
 800364a:	d10c      	bne.n	8003666 <HAL_RCC_OscConfig+0x4aa>
 800364c:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 800364e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003650:	4a1a      	ldr	r2, [pc, #104]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 8003652:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003656:	6353      	str	r3, [r2, #52]	; 0x34
 8003658:	4b18      	ldr	r3, [pc, #96]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 800365a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800365c:	4a17      	ldr	r2, [pc, #92]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 800365e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003662:	6353      	str	r3, [r2, #52]	; 0x34
 8003664:	e00b      	b.n	800367e <HAL_RCC_OscConfig+0x4c2>
 8003666:	4b15      	ldr	r3, [pc, #84]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 8003668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366a:	4a14      	ldr	r2, [pc, #80]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 800366c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003670:	6353      	str	r3, [r2, #52]	; 0x34
 8003672:	4b12      	ldr	r3, [pc, #72]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 8003674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003676:	4a11      	ldr	r2, [pc, #68]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 8003678:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800367c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d015      	beq.n	80036b2 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003686:	f7fd fc33 	bl	8000ef0 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800368c:	e00a      	b.n	80036a4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800368e:	f7fd fc2f 	bl	8000ef0 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	f241 3288 	movw	r2, #5000	; 0x1388
 800369c:	4293      	cmp	r3, r2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e0b2      	b.n	800380a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036a4:	4b05      	ldr	r3, [pc, #20]	; (80036bc <HAL_RCC_OscConfig+0x500>)
 80036a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0ee      	beq.n	800368e <HAL_RCC_OscConfig+0x4d2>
 80036b0:	e023      	b.n	80036fa <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b2:	f7fd fc1d 	bl	8000ef0 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036b8:	e019      	b.n	80036ee <HAL_RCC_OscConfig+0x532>
 80036ba:	bf00      	nop
 80036bc:	40023800 	.word	0x40023800
 80036c0:	0800773c 	.word	0x0800773c
 80036c4:	20000054 	.word	0x20000054
 80036c8:	20000058 	.word	0x20000058
 80036cc:	42470020 	.word	0x42470020
 80036d0:	42470680 	.word	0x42470680
 80036d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d8:	f7fd fc0a 	bl	8000ef0 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e08d      	b.n	800380a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036ee:	4b49      	ldr	r3, [pc, #292]	; (8003814 <HAL_RCC_OscConfig+0x658>)
 80036f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1ee      	bne.n	80036d8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036fa:	7ffb      	ldrb	r3, [r7, #31]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d105      	bne.n	800370c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003700:	4b44      	ldr	r3, [pc, #272]	; (8003814 <HAL_RCC_OscConfig+0x658>)
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	4a43      	ldr	r2, [pc, #268]	; (8003814 <HAL_RCC_OscConfig+0x658>)
 8003706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	2b00      	cmp	r3, #0
 8003712:	d079      	beq.n	8003808 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	2b0c      	cmp	r3, #12
 8003718:	d056      	beq.n	80037c8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	2b02      	cmp	r3, #2
 8003720:	d13b      	bne.n	800379a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003722:	4b3d      	ldr	r3, [pc, #244]	; (8003818 <HAL_RCC_OscConfig+0x65c>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003728:	f7fd fbe2 	bl	8000ef0 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003730:	f7fd fbde 	bl	8000ef0 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e063      	b.n	800380a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003742:	4b34      	ldr	r3, [pc, #208]	; (8003814 <HAL_RCC_OscConfig+0x658>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f0      	bne.n	8003730 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800374e:	4b31      	ldr	r3, [pc, #196]	; (8003814 <HAL_RCC_OscConfig+0x658>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375e:	4319      	orrs	r1, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	430b      	orrs	r3, r1
 8003766:	492b      	ldr	r1, [pc, #172]	; (8003814 <HAL_RCC_OscConfig+0x658>)
 8003768:	4313      	orrs	r3, r2
 800376a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800376c:	4b2a      	ldr	r3, [pc, #168]	; (8003818 <HAL_RCC_OscConfig+0x65c>)
 800376e:	2201      	movs	r2, #1
 8003770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003772:	f7fd fbbd 	bl	8000ef0 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800377a:	f7fd fbb9 	bl	8000ef0 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e03e      	b.n	800380a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800378c:	4b21      	ldr	r3, [pc, #132]	; (8003814 <HAL_RCC_OscConfig+0x658>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0f0      	beq.n	800377a <HAL_RCC_OscConfig+0x5be>
 8003798:	e036      	b.n	8003808 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379a:	4b1f      	ldr	r3, [pc, #124]	; (8003818 <HAL_RCC_OscConfig+0x65c>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7fd fba6 	bl	8000ef0 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a8:	f7fd fba2 	bl	8000ef0 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e027      	b.n	800380a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037ba:	4b16      	ldr	r3, [pc, #88]	; (8003814 <HAL_RCC_OscConfig+0x658>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x5ec>
 80037c6:	e01f      	b.n	8003808 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e01a      	b.n	800380a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037d4:	4b0f      	ldr	r3, [pc, #60]	; (8003814 <HAL_RCC_OscConfig+0x658>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d10d      	bne.n	8003804 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d106      	bne.n	8003804 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003800:	429a      	cmp	r2, r3
 8003802:	d001      	beq.n	8003808 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3720      	adds	r7, #32
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40023800 	.word	0x40023800
 8003818:	42470060 	.word	0x42470060

0800381c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e11a      	b.n	8003a66 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003830:	4b8f      	ldr	r3, [pc, #572]	; (8003a70 <HAL_RCC_ClockConfig+0x254>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d919      	bls.n	8003872 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d105      	bne.n	8003850 <HAL_RCC_ClockConfig+0x34>
 8003844:	4b8a      	ldr	r3, [pc, #552]	; (8003a70 <HAL_RCC_ClockConfig+0x254>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a89      	ldr	r2, [pc, #548]	; (8003a70 <HAL_RCC_ClockConfig+0x254>)
 800384a:	f043 0304 	orr.w	r3, r3, #4
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	4b87      	ldr	r3, [pc, #540]	; (8003a70 <HAL_RCC_ClockConfig+0x254>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f023 0201 	bic.w	r2, r3, #1
 8003858:	4985      	ldr	r1, [pc, #532]	; (8003a70 <HAL_RCC_ClockConfig+0x254>)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	4313      	orrs	r3, r2
 800385e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003860:	4b83      	ldr	r3, [pc, #524]	; (8003a70 <HAL_RCC_ClockConfig+0x254>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d001      	beq.n	8003872 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e0f9      	b.n	8003a66 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d008      	beq.n	8003890 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800387e:	4b7d      	ldr	r3, [pc, #500]	; (8003a74 <HAL_RCC_ClockConfig+0x258>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	497a      	ldr	r1, [pc, #488]	; (8003a74 <HAL_RCC_ClockConfig+0x258>)
 800388c:	4313      	orrs	r3, r2
 800388e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 808e 	beq.w	80039ba <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d107      	bne.n	80038b6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038a6:	4b73      	ldr	r3, [pc, #460]	; (8003a74 <HAL_RCC_ClockConfig+0x258>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d121      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e0d7      	b.n	8003a66 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b03      	cmp	r3, #3
 80038bc:	d107      	bne.n	80038ce <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038be:	4b6d      	ldr	r3, [pc, #436]	; (8003a74 <HAL_RCC_ClockConfig+0x258>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d115      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e0cb      	b.n	8003a66 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d107      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038d6:	4b67      	ldr	r3, [pc, #412]	; (8003a74 <HAL_RCC_ClockConfig+0x258>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d109      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e0bf      	b.n	8003a66 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80038e6:	4b63      	ldr	r3, [pc, #396]	; (8003a74 <HAL_RCC_ClockConfig+0x258>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e0b7      	b.n	8003a66 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038f6:	4b5f      	ldr	r3, [pc, #380]	; (8003a74 <HAL_RCC_ClockConfig+0x258>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f023 0203 	bic.w	r2, r3, #3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	495c      	ldr	r1, [pc, #368]	; (8003a74 <HAL_RCC_ClockConfig+0x258>)
 8003904:	4313      	orrs	r3, r2
 8003906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003908:	f7fd faf2 	bl	8000ef0 <HAL_GetTick>
 800390c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d112      	bne.n	800393c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003916:	e00a      	b.n	800392e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003918:	f7fd faea 	bl	8000ef0 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f241 3288 	movw	r2, #5000	; 0x1388
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e09b      	b.n	8003a66 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800392e:	4b51      	ldr	r3, [pc, #324]	; (8003a74 <HAL_RCC_ClockConfig+0x258>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 030c 	and.w	r3, r3, #12
 8003936:	2b08      	cmp	r3, #8
 8003938:	d1ee      	bne.n	8003918 <HAL_RCC_ClockConfig+0xfc>
 800393a:	e03e      	b.n	80039ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b03      	cmp	r3, #3
 8003942:	d112      	bne.n	800396a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003944:	e00a      	b.n	800395c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003946:	f7fd fad3 	bl	8000ef0 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	f241 3288 	movw	r2, #5000	; 0x1388
 8003954:	4293      	cmp	r3, r2
 8003956:	d901      	bls.n	800395c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e084      	b.n	8003a66 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800395c:	4b45      	ldr	r3, [pc, #276]	; (8003a74 <HAL_RCC_ClockConfig+0x258>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 030c 	and.w	r3, r3, #12
 8003964:	2b0c      	cmp	r3, #12
 8003966:	d1ee      	bne.n	8003946 <HAL_RCC_ClockConfig+0x12a>
 8003968:	e027      	b.n	80039ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d11d      	bne.n	80039ae <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003972:	e00a      	b.n	800398a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003974:	f7fd fabc 	bl	8000ef0 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e06d      	b.n	8003a66 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800398a:	4b3a      	ldr	r3, [pc, #232]	; (8003a74 <HAL_RCC_ClockConfig+0x258>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
 8003992:	2b04      	cmp	r3, #4
 8003994:	d1ee      	bne.n	8003974 <HAL_RCC_ClockConfig+0x158>
 8003996:	e010      	b.n	80039ba <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003998:	f7fd faaa 	bl	8000ef0 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e05b      	b.n	8003a66 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80039ae:	4b31      	ldr	r3, [pc, #196]	; (8003a74 <HAL_RCC_ClockConfig+0x258>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1ee      	bne.n	8003998 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039ba:	4b2d      	ldr	r3, [pc, #180]	; (8003a70 <HAL_RCC_ClockConfig+0x254>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d219      	bcs.n	80039fc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d105      	bne.n	80039da <HAL_RCC_ClockConfig+0x1be>
 80039ce:	4b28      	ldr	r3, [pc, #160]	; (8003a70 <HAL_RCC_ClockConfig+0x254>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a27      	ldr	r2, [pc, #156]	; (8003a70 <HAL_RCC_ClockConfig+0x254>)
 80039d4:	f043 0304 	orr.w	r3, r3, #4
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	4b25      	ldr	r3, [pc, #148]	; (8003a70 <HAL_RCC_ClockConfig+0x254>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 0201 	bic.w	r2, r3, #1
 80039e2:	4923      	ldr	r1, [pc, #140]	; (8003a70 <HAL_RCC_ClockConfig+0x254>)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ea:	4b21      	ldr	r3, [pc, #132]	; (8003a70 <HAL_RCC_ClockConfig+0x254>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e034      	b.n	8003a66 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a08:	4b1a      	ldr	r3, [pc, #104]	; (8003a74 <HAL_RCC_ClockConfig+0x258>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	4917      	ldr	r1, [pc, #92]	; (8003a74 <HAL_RCC_ClockConfig+0x258>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d009      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a26:	4b13      	ldr	r3, [pc, #76]	; (8003a74 <HAL_RCC_ClockConfig+0x258>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	490f      	ldr	r1, [pc, #60]	; (8003a74 <HAL_RCC_ClockConfig+0x258>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a3a:	f000 f823 	bl	8003a84 <HAL_RCC_GetSysClockFreq>
 8003a3e:	4601      	mov	r1, r0
 8003a40:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <HAL_RCC_ClockConfig+0x258>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	091b      	lsrs	r3, r3, #4
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	4a0b      	ldr	r2, [pc, #44]	; (8003a78 <HAL_RCC_ClockConfig+0x25c>)
 8003a4c:	5cd3      	ldrb	r3, [r2, r3]
 8003a4e:	fa21 f303 	lsr.w	r3, r1, r3
 8003a52:	4a0a      	ldr	r2, [pc, #40]	; (8003a7c <HAL_RCC_ClockConfig+0x260>)
 8003a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a56:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <HAL_RCC_ClockConfig+0x264>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fc fefa 	bl	8000854 <HAL_InitTick>
 8003a60:	4603      	mov	r3, r0
 8003a62:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a64:	7afb      	ldrb	r3, [r7, #11]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40023c00 	.word	0x40023c00
 8003a74:	40023800 	.word	0x40023800
 8003a78:	0800773c 	.word	0x0800773c
 8003a7c:	20000054 	.word	0x20000054
 8003a80:	20000058 	.word	0x20000058

08003a84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003a8a:	4b26      	ldr	r3, [pc, #152]	; (8003b24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 030c 	and.w	r3, r3, #12
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d006      	beq.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x24>
 8003a9a:	2b0c      	cmp	r3, #12
 8003a9c:	d007      	beq.n	8003aae <HAL_RCC_GetSysClockFreq+0x2a>
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d12c      	bne.n	8003afc <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003aa2:	4b21      	ldr	r3, [pc, #132]	; (8003b28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003aa4:	613b      	str	r3, [r7, #16]
      break;
 8003aa6:	e037      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003aa8:	4b20      	ldr	r3, [pc, #128]	; (8003b2c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003aaa:	613b      	str	r3, [r7, #16]
      break;
 8003aac:	e034      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	0c9b      	lsrs	r3, r3, #18
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	4a1e      	ldr	r2, [pc, #120]	; (8003b30 <HAL_RCC_GetSysClockFreq+0xac>)
 8003ab8:	5cd3      	ldrb	r3, [r2, r3]
 8003aba:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	0d9b      	lsrs	r3, r3, #22
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ac8:	4b16      	ldr	r3, [pc, #88]	; (8003b24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d008      	beq.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	4a15      	ldr	r2, [pc, #84]	; (8003b2c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003ad8:	fb02 f203 	mul.w	r2, r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae2:	617b      	str	r3, [r7, #20]
 8003ae4:	e007      	b.n	8003af6 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	4a0f      	ldr	r2, [pc, #60]	; (8003b28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003aea:	fb02 f203 	mul.w	r2, r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	613b      	str	r3, [r7, #16]
      break;
 8003afa:	e00d      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003afc:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	0b5b      	lsrs	r3, r3, #13
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	613b      	str	r3, [r7, #16]
      break;
 8003b16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b18:	693b      	ldr	r3, [r7, #16]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	371c      	adds	r7, #28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr
 8003b24:	40023800 	.word	0x40023800
 8003b28:	00f42400 	.word	0x00f42400
 8003b2c:	007a1200 	.word	0x007a1200
 8003b30:	08007730 	.word	0x08007730

08003b34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b38:	4b02      	ldr	r3, [pc, #8]	; (8003b44 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr
 8003b44:	20000054 	.word	0x20000054

08003b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b4c:	f7ff fff2 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 8003b50:	4601      	mov	r1, r0
 8003b52:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	0a1b      	lsrs	r3, r3, #8
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	4a03      	ldr	r2, [pc, #12]	; (8003b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b5e:	5cd3      	ldrb	r3, [r2, r3]
 8003b60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	0800774c 	.word	0x0800774c

08003b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b74:	f7ff ffde 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 8003b78:	4601      	mov	r1, r0
 8003b7a:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	0adb      	lsrs	r3, r3, #11
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	4a03      	ldr	r2, [pc, #12]	; (8003b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b86:	5cd3      	ldrb	r3, [r2, r3]
 8003b88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40023800 	.word	0x40023800
 8003b94:	0800774c 	.word	0x0800774c

08003b98 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	220f      	movs	r2, #15
 8003ba6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ba8:	4b11      	ldr	r3, [pc, #68]	; (8003bf0 <HAL_RCC_GetClockConfig+0x58>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 0203 	and.w	r2, r3, #3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003bb4:	4b0e      	ldr	r3, [pc, #56]	; (8003bf0 <HAL_RCC_GetClockConfig+0x58>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <HAL_RCC_GetClockConfig+0x58>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003bcc:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <HAL_RCC_GetClockConfig+0x58>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	08db      	lsrs	r3, r3, #3
 8003bd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003bda:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0201 	and.w	r2, r3, #1
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	601a      	str	r2, [r3, #0]
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	40023c00 	.word	0x40023c00

08003bf8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c00:	2300      	movs	r3, #0
 8003c02:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003c04:	4b29      	ldr	r3, [pc, #164]	; (8003cac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d12c      	bne.n	8003c6a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c10:	4b26      	ldr	r3, [pc, #152]	; (8003cac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003c1c:	4b24      	ldr	r3, [pc, #144]	; (8003cb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003c24:	617b      	str	r3, [r7, #20]
 8003c26:	e016      	b.n	8003c56 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c28:	4b20      	ldr	r3, [pc, #128]	; (8003cac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	4a1f      	ldr	r2, [pc, #124]	; (8003cac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c32:	6253      	str	r3, [r2, #36]	; 0x24
 8003c34:	4b1d      	ldr	r3, [pc, #116]	; (8003cac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003c40:	4b1b      	ldr	r3, [pc, #108]	; (8003cb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003c48:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c4a:	4b18      	ldr	r3, [pc, #96]	; (8003cac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	4a17      	ldr	r2, [pc, #92]	; (8003cac <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c54:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003c5c:	d105      	bne.n	8003c6a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c64:	d101      	bne.n	8003c6a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003c66:	2301      	movs	r3, #1
 8003c68:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d105      	bne.n	8003c7c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003c70:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a0f      	ldr	r2, [pc, #60]	; (8003cb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c76:	f043 0304 	orr.w	r3, r3, #4
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	4b0d      	ldr	r3, [pc, #52]	; (8003cb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f023 0201 	bic.w	r2, r3, #1
 8003c84:	490b      	ldr	r1, [pc, #44]	; (8003cb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c8c:	4b09      	ldr	r3, [pc, #36]	; (8003cb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d001      	beq.n	8003c9e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	371c      	adds	r7, #28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	40007000 	.word	0x40007000
 8003cb4:	40023c00 	.word	0x40023c00

08003cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e01d      	b.n	8003d06 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f815 	bl	8003d0e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	f000 fa26 	bl	8004148 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr

08003d20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b06      	cmp	r3, #6
 8003d48:	d007      	beq.n	8003d5a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 0201 	orr.w	r2, r2, #1
 8003d58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bc80      	pop	{r7}
 8003d64:	4770      	bx	lr

08003d66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e01d      	b.n	8003db4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d106      	bne.n	8003d92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7fc ff21 	bl	8000bd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2202      	movs	r2, #2
 8003d96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	3304      	adds	r3, #4
 8003da2:	4619      	mov	r1, r3
 8003da4:	4610      	mov	r0, r2
 8003da6:	f000 f9cf 	bl	8004148 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d122      	bne.n	8003e18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d11b      	bne.n	8003e18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f06f 0202 	mvn.w	r2, #2
 8003de8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f987 	bl	8004112 <HAL_TIM_IC_CaptureCallback>
 8003e04:	e005      	b.n	8003e12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f97a 	bl	8004100 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f989 	bl	8004124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d122      	bne.n	8003e6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d11b      	bne.n	8003e6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f06f 0204 	mvn.w	r2, #4
 8003e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2202      	movs	r2, #2
 8003e42:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f95d 	bl	8004112 <HAL_TIM_IC_CaptureCallback>
 8003e58:	e005      	b.n	8003e66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f950 	bl	8004100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f95f 	bl	8004124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d122      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d11b      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0208 	mvn.w	r2, #8
 8003e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2204      	movs	r2, #4
 8003e96:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	f003 0303 	and.w	r3, r3, #3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f933 	bl	8004112 <HAL_TIM_IC_CaptureCallback>
 8003eac:	e005      	b.n	8003eba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f926 	bl	8004100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f935 	bl	8004124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f003 0310 	and.w	r3, r3, #16
 8003eca:	2b10      	cmp	r3, #16
 8003ecc:	d122      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	2b10      	cmp	r3, #16
 8003eda:	d11b      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0210 	mvn.w	r2, #16
 8003ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2208      	movs	r2, #8
 8003eea:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f909 	bl	8004112 <HAL_TIM_IC_CaptureCallback>
 8003f00:	e005      	b.n	8003f0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f8fc 	bl	8004100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f90b 	bl	8004124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d10e      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d107      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0201 	mvn.w	r2, #1
 8003f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fc fc3e 	bl	80007bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4a:	2b40      	cmp	r3, #64	; 0x40
 8003f4c:	d10e      	bne.n	8003f6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f58:	2b40      	cmp	r3, #64	; 0x40
 8003f5a:	d107      	bne.n	8003f6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f8e5 	bl	8004136 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f6c:	bf00      	nop
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e0b4      	b.n	80040f8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2202      	movs	r2, #2
 8003f9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b0c      	cmp	r3, #12
 8003fa2:	f200 809f 	bhi.w	80040e4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003fa6:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fac:	08003fe1 	.word	0x08003fe1
 8003fb0:	080040e5 	.word	0x080040e5
 8003fb4:	080040e5 	.word	0x080040e5
 8003fb8:	080040e5 	.word	0x080040e5
 8003fbc:	08004021 	.word	0x08004021
 8003fc0:	080040e5 	.word	0x080040e5
 8003fc4:	080040e5 	.word	0x080040e5
 8003fc8:	080040e5 	.word	0x080040e5
 8003fcc:	08004063 	.word	0x08004063
 8003fd0:	080040e5 	.word	0x080040e5
 8003fd4:	080040e5 	.word	0x080040e5
 8003fd8:	080040e5 	.word	0x080040e5
 8003fdc:	080040a3 	.word	0x080040a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68b9      	ldr	r1, [r7, #8]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 f91e 	bl	8004228 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699a      	ldr	r2, [r3, #24]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0208 	orr.w	r2, r2, #8
 8003ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0204 	bic.w	r2, r2, #4
 800400a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6999      	ldr	r1, [r3, #24]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	619a      	str	r2, [r3, #24]
      break;
 800401e:	e062      	b.n	80040e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68b9      	ldr	r1, [r7, #8]
 8004026:	4618      	mov	r0, r3
 8004028:	f000 f93a 	bl	80042a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800403a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800404a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6999      	ldr	r1, [r3, #24]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	021a      	lsls	r2, r3, #8
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	619a      	str	r2, [r3, #24]
      break;
 8004060:	e041      	b.n	80040e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68b9      	ldr	r1, [r7, #8]
 8004068:	4618      	mov	r0, r3
 800406a:	f000 f957 	bl	800431c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	69da      	ldr	r2, [r3, #28]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f042 0208 	orr.w	r2, r2, #8
 800407c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	69da      	ldr	r2, [r3, #28]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0204 	bic.w	r2, r2, #4
 800408c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	69d9      	ldr	r1, [r3, #28]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	61da      	str	r2, [r3, #28]
      break;
 80040a0:	e021      	b.n	80040e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 f974 	bl	8004396 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69da      	ldr	r2, [r3, #28]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69da      	ldr	r2, [r3, #28]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69d9      	ldr	r1, [r3, #28]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	021a      	lsls	r2, r3, #8
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	61da      	str	r2, [r3, #28]
      break;
 80040e2:	e000      	b.n	80040e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80040e4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr

08004112 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr

08004124 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr

08004136 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr

08004148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415e:	d00f      	beq.n	8004180 <TIM_Base_SetConfig+0x38>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a2b      	ldr	r2, [pc, #172]	; (8004210 <TIM_Base_SetConfig+0xc8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d00b      	beq.n	8004180 <TIM_Base_SetConfig+0x38>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a2a      	ldr	r2, [pc, #168]	; (8004214 <TIM_Base_SetConfig+0xcc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d007      	beq.n	8004180 <TIM_Base_SetConfig+0x38>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a29      	ldr	r2, [pc, #164]	; (8004218 <TIM_Base_SetConfig+0xd0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d003      	beq.n	8004180 <TIM_Base_SetConfig+0x38>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a28      	ldr	r2, [pc, #160]	; (800421c <TIM_Base_SetConfig+0xd4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d108      	bne.n	8004192 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004198:	d017      	beq.n	80041ca <TIM_Base_SetConfig+0x82>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a1c      	ldr	r2, [pc, #112]	; (8004210 <TIM_Base_SetConfig+0xc8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d013      	beq.n	80041ca <TIM_Base_SetConfig+0x82>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a1b      	ldr	r2, [pc, #108]	; (8004214 <TIM_Base_SetConfig+0xcc>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00f      	beq.n	80041ca <TIM_Base_SetConfig+0x82>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a1a      	ldr	r2, [pc, #104]	; (8004218 <TIM_Base_SetConfig+0xd0>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d00b      	beq.n	80041ca <TIM_Base_SetConfig+0x82>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a19      	ldr	r2, [pc, #100]	; (800421c <TIM_Base_SetConfig+0xd4>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d007      	beq.n	80041ca <TIM_Base_SetConfig+0x82>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a18      	ldr	r2, [pc, #96]	; (8004220 <TIM_Base_SetConfig+0xd8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d003      	beq.n	80041ca <TIM_Base_SetConfig+0x82>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a17      	ldr	r2, [pc, #92]	; (8004224 <TIM_Base_SetConfig+0xdc>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d108      	bne.n	80041dc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	4313      	orrs	r3, r2
 80041da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	615a      	str	r2, [r3, #20]
}
 8004206:	bf00      	nop
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr
 8004210:	40000400 	.word	0x40000400
 8004214:	40000800 	.word	0x40000800
 8004218:	40000c00 	.word	0x40000c00
 800421c:	40010800 	.word	0x40010800
 8004220:	40010c00 	.word	0x40010c00
 8004224:	40011000 	.word	0x40011000

08004228 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	f023 0201 	bic.w	r2, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0303 	bic.w	r3, r3, #3
 800425e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f023 0302 	bic.w	r3, r3, #2
 8004270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	621a      	str	r2, [r3, #32]
}
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	bc80      	pop	{r7}
 800429e:	4770      	bx	lr

080042a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	f023 0210 	bic.w	r2, r3, #16
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	021b      	lsls	r3, r3, #8
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f023 0320 	bic.w	r3, r3, #32
 80042ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	621a      	str	r2, [r3, #32]
}
 8004312:	bf00      	nop
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr

0800431c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0303 	bic.w	r3, r3, #3
 8004352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	021b      	lsls	r3, r3, #8
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	621a      	str	r2, [r3, #32]
}
 800438c:	bf00      	nop
 800438e:	371c      	adds	r7, #28
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr

08004396 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004396:	b480      	push	{r7}
 8004398:	b087      	sub	sp, #28
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043cc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	021b      	lsls	r3, r3, #8
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	031b      	lsls	r3, r3, #12
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	621a      	str	r2, [r3, #32]
}
 8004408:	bf00      	nop
 800440a:	371c      	adds	r7, #28
 800440c:	46bd      	mov	sp, r7
 800440e:	bc80      	pop	{r7}
 8004410:	4770      	bx	lr

08004412 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004412:	b480      	push	{r7}
 8004414:	b085      	sub	sp, #20
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
 800441a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004422:	2b01      	cmp	r3, #1
 8004424:	d101      	bne.n	800442a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004426:	2302      	movs	r3, #2
 8004428:	e032      	b.n	8004490 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2202      	movs	r2, #2
 8004436:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004450:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	4313      	orrs	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004462:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	4313      	orrs	r3, r2
 800446c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr

0800449a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b082      	sub	sp, #8
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e03f      	b.n	800452c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d106      	bne.n	80044c6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7fc fc79 	bl	8000db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2224      	movs	r2, #36	; 0x24
 80044ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fa5e 	bl	80049a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695a      	ldr	r2, [r3, #20]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004502:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004512:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2220      	movs	r2, #32
 800451e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004554:	2300      	movs	r3, #0
 8004556:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004558:	2300      	movs	r3, #0
 800455a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10d      	bne.n	8004586 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	f003 0320 	and.w	r3, r3, #32
 8004570:	2b00      	cmp	r3, #0
 8004572:	d008      	beq.n	8004586 <HAL_UART_IRQHandler+0x52>
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	f003 0320 	and.w	r3, r3, #32
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f98d 	bl	800489e <UART_Receive_IT>
      return;
 8004584:	e0cc      	b.n	8004720 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80ab 	beq.w	80046e4 <HAL_UART_IRQHandler+0x1b0>
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d105      	bne.n	80045a4 <HAL_UART_IRQHandler+0x70>
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 80a0 	beq.w	80046e4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <HAL_UART_IRQHandler+0x90>
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d005      	beq.n	80045c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045bc:	f043 0201 	orr.w	r2, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <HAL_UART_IRQHandler+0xb0>
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045dc:	f043 0202 	orr.w	r2, r3, #2
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <HAL_UART_IRQHandler+0xd0>
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d005      	beq.n	8004604 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fc:	f043 0204 	orr.w	r2, r3, #4
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <HAL_UART_IRQHandler+0xf0>
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461c:	f043 0208 	orr.w	r2, r3, #8
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004628:	2b00      	cmp	r3, #0
 800462a:	d078      	beq.n	800471e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	f003 0320 	and.w	r3, r3, #32
 8004632:	2b00      	cmp	r3, #0
 8004634:	d007      	beq.n	8004646 <HAL_UART_IRQHandler+0x112>
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	f003 0320 	and.w	r3, r3, #32
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f92c 	bl	800489e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004650:	2b40      	cmp	r3, #64	; 0x40
 8004652:	bf0c      	ite	eq
 8004654:	2301      	moveq	r3, #1
 8004656:	2300      	movne	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004660:	f003 0308 	and.w	r3, r3, #8
 8004664:	2b00      	cmp	r3, #0
 8004666:	d102      	bne.n	800466e <HAL_UART_IRQHandler+0x13a>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d031      	beq.n	80046d2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f877 	bl	8004762 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467e:	2b40      	cmp	r3, #64	; 0x40
 8004680:	d123      	bne.n	80046ca <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	695a      	ldr	r2, [r3, #20]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004690:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004696:	2b00      	cmp	r3, #0
 8004698:	d013      	beq.n	80046c2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800469e:	4a22      	ldr	r2, [pc, #136]	; (8004728 <HAL_UART_IRQHandler+0x1f4>)
 80046a0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fc ffbd 	bl	8001626 <HAL_DMA_Abort_IT>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d016      	beq.n	80046e0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046bc:	4610      	mov	r0, r2
 80046be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c0:	e00e      	b.n	80046e0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f844 	bl	8004750 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c8:	e00a      	b.n	80046e0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f840 	bl	8004750 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046d0:	e006      	b.n	80046e0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f83c 	bl	8004750 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80046de:	e01e      	b.n	800471e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e0:	bf00      	nop
    return;
 80046e2:	e01c      	b.n	800471e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d008      	beq.n	8004700 <HAL_UART_IRQHandler+0x1cc>
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f863 	bl	80047c4 <UART_Transmit_IT>
    return;
 80046fe:	e00f      	b.n	8004720 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <HAL_UART_IRQHandler+0x1ec>
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f8aa 	bl	800486e <UART_EndTransmit_IT>
    return;
 800471a:	bf00      	nop
 800471c:	e000      	b.n	8004720 <HAL_UART_IRQHandler+0x1ec>
    return;
 800471e:	bf00      	nop
  }
}
 8004720:	3720      	adds	r7, #32
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	0800479d 	.word	0x0800479d

0800472c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr

0800473e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr

08004750 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr

08004762 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004778:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	695a      	ldr	r2, [r3, #20]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0201 	bic.w	r2, r2, #1
 8004788:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	bc80      	pop	{r7}
 800479a:	4770      	bx	lr

0800479c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f7ff ffca 	bl	8004750 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047bc:	bf00      	nop
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b21      	cmp	r3, #33	; 0x21
 80047d6:	d144      	bne.n	8004862 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e0:	d11a      	bne.n	8004818 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	461a      	mov	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047f6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d105      	bne.n	800480c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	1c9a      	adds	r2, r3, #2
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	621a      	str	r2, [r3, #32]
 800480a:	e00e      	b.n	800482a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	621a      	str	r2, [r3, #32]
 8004816:	e008      	b.n	800482a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	1c59      	adds	r1, r3, #1
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6211      	str	r1, [r2, #32]
 8004822:	781a      	ldrb	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29b      	uxth	r3, r3
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	4619      	mov	r1, r3
 8004838:	84d1      	strh	r1, [r2, #38]	; 0x26
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10f      	bne.n	800485e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800484c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68da      	ldr	r2, [r3, #12]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800485c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	e000      	b.n	8004864 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004862:	2302      	movs	r3, #2
  }
}
 8004864:	4618      	mov	r0, r3
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	bc80      	pop	{r7}
 800486c:	4770      	bx	lr

0800486e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b082      	sub	sp, #8
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68da      	ldr	r2, [r3, #12]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004884:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2220      	movs	r2, #32
 800488a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7ff ff4c 	bl	800472c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b084      	sub	sp, #16
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b22      	cmp	r3, #34	; 0x22
 80048b0:	d171      	bne.n	8004996 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ba:	d123      	bne.n	8004904 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10e      	bne.n	80048e8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e0:	1c9a      	adds	r2, r3, #2
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	629a      	str	r2, [r3, #40]	; 0x28
 80048e6:	e029      	b.n	800493c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fc:	1c5a      	adds	r2, r3, #1
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	629a      	str	r2, [r3, #40]	; 0x28
 8004902:	e01b      	b.n	800493c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10a      	bne.n	8004922 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6858      	ldr	r0, [r3, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	1c59      	adds	r1, r3, #1
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6291      	str	r1, [r2, #40]	; 0x28
 800491c:	b2c2      	uxtb	r2, r0
 800491e:	701a      	strb	r2, [r3, #0]
 8004920:	e00c      	b.n	800493c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	b2da      	uxtb	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492e:	1c58      	adds	r0, r3, #1
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	6288      	str	r0, [r1, #40]	; 0x28
 8004934:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b29b      	uxth	r3, r3
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	4619      	mov	r1, r3
 800494a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800494c:	2b00      	cmp	r3, #0
 800494e:	d120      	bne.n	8004992 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0220 	bic.w	r2, r2, #32
 800495e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800496e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	695a      	ldr	r2, [r3, #20]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0201 	bic.w	r2, r2, #1
 800497e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7ff fed8 	bl	800473e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	e002      	b.n	8004998 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	e000      	b.n	8004998 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004996:	2302      	movs	r3, #2
  }
}
 8004998:	4618      	mov	r0, r3
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68da      	ldr	r2, [r3, #12]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80049e0:	f023 030c 	bic.w	r3, r3, #12
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6812      	ldr	r2, [r2, #0]
 80049e8:	68f9      	ldr	r1, [r7, #12]
 80049ea:	430b      	orrs	r3, r1
 80049ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	699a      	ldr	r2, [r3, #24]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a0c:	f040 80a5 	bne.w	8004b5a <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4aa4      	ldr	r2, [pc, #656]	; (8004ca8 <UART_SetConfig+0x308>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d14f      	bne.n	8004aba <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a1a:	f7ff f8a9 	bl	8003b70 <HAL_RCC_GetPCLK2Freq>
 8004a1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	009a      	lsls	r2, r3, #2
 8004a2a:	441a      	add	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a36:	4a9d      	ldr	r2, [pc, #628]	; (8004cac <UART_SetConfig+0x30c>)
 8004a38:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3c:	095b      	lsrs	r3, r3, #5
 8004a3e:	0119      	lsls	r1, r3, #4
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009a      	lsls	r2, r3, #2
 8004a4a:	441a      	add	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a56:	4b95      	ldr	r3, [pc, #596]	; (8004cac <UART_SetConfig+0x30c>)
 8004a58:	fba3 0302 	umull	r0, r3, r3, r2
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	2064      	movs	r0, #100	; 0x64
 8004a60:	fb00 f303 	mul.w	r3, r0, r3
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	3332      	adds	r3, #50	; 0x32
 8004a6a:	4a90      	ldr	r2, [pc, #576]	; (8004cac <UART_SetConfig+0x30c>)
 8004a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a78:	4419      	add	r1, r3
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	009a      	lsls	r2, r3, #2
 8004a84:	441a      	add	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	005b      	lsls	r3, r3, #1
 8004a8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a90:	4b86      	ldr	r3, [pc, #536]	; (8004cac <UART_SetConfig+0x30c>)
 8004a92:	fba3 0302 	umull	r0, r3, r3, r2
 8004a96:	095b      	lsrs	r3, r3, #5
 8004a98:	2064      	movs	r0, #100	; 0x64
 8004a9a:	fb00 f303 	mul.w	r3, r0, r3
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	3332      	adds	r3, #50	; 0x32
 8004aa4:	4a81      	ldr	r2, [pc, #516]	; (8004cac <UART_SetConfig+0x30c>)
 8004aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aaa:	095b      	lsrs	r3, r3, #5
 8004aac:	f003 0207 	and.w	r2, r3, #7
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	440a      	add	r2, r1
 8004ab6:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004ab8:	e0f1      	b.n	8004c9e <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004aba:	f7ff f845 	bl	8003b48 <HAL_RCC_GetPCLK1Freq>
 8004abe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	009a      	lsls	r2, r3, #2
 8004aca:	441a      	add	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad6:	4a75      	ldr	r2, [pc, #468]	; (8004cac <UART_SetConfig+0x30c>)
 8004ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8004adc:	095b      	lsrs	r3, r3, #5
 8004ade:	0119      	lsls	r1, r3, #4
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	009a      	lsls	r2, r3, #2
 8004aea:	441a      	add	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004af6:	4b6d      	ldr	r3, [pc, #436]	; (8004cac <UART_SetConfig+0x30c>)
 8004af8:	fba3 0302 	umull	r0, r3, r3, r2
 8004afc:	095b      	lsrs	r3, r3, #5
 8004afe:	2064      	movs	r0, #100	; 0x64
 8004b00:	fb00 f303 	mul.w	r3, r0, r3
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	3332      	adds	r3, #50	; 0x32
 8004b0a:	4a68      	ldr	r2, [pc, #416]	; (8004cac <UART_SetConfig+0x30c>)
 8004b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b10:	095b      	lsrs	r3, r3, #5
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b18:	4419      	add	r1, r3
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	009a      	lsls	r2, r3, #2
 8004b24:	441a      	add	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b30:	4b5e      	ldr	r3, [pc, #376]	; (8004cac <UART_SetConfig+0x30c>)
 8004b32:	fba3 0302 	umull	r0, r3, r3, r2
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	2064      	movs	r0, #100	; 0x64
 8004b3a:	fb00 f303 	mul.w	r3, r0, r3
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	3332      	adds	r3, #50	; 0x32
 8004b44:	4a59      	ldr	r2, [pc, #356]	; (8004cac <UART_SetConfig+0x30c>)
 8004b46:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	f003 0207 	and.w	r2, r3, #7
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	440a      	add	r2, r1
 8004b56:	609a      	str	r2, [r3, #8]
}
 8004b58:	e0a1      	b.n	8004c9e <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a52      	ldr	r2, [pc, #328]	; (8004ca8 <UART_SetConfig+0x308>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d14e      	bne.n	8004c02 <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b64:	f7ff f804 	bl	8003b70 <HAL_RCC_GetPCLK2Freq>
 8004b68:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	009a      	lsls	r2, r3, #2
 8004b74:	441a      	add	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b80:	4a4a      	ldr	r2, [pc, #296]	; (8004cac <UART_SetConfig+0x30c>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	095b      	lsrs	r3, r3, #5
 8004b88:	0119      	lsls	r1, r3, #4
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	009a      	lsls	r2, r3, #2
 8004b94:	441a      	add	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ba0:	4b42      	ldr	r3, [pc, #264]	; (8004cac <UART_SetConfig+0x30c>)
 8004ba2:	fba3 0302 	umull	r0, r3, r3, r2
 8004ba6:	095b      	lsrs	r3, r3, #5
 8004ba8:	2064      	movs	r0, #100	; 0x64
 8004baa:	fb00 f303 	mul.w	r3, r0, r3
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	3332      	adds	r3, #50	; 0x32
 8004bb4:	4a3d      	ldr	r2, [pc, #244]	; (8004cac <UART_SetConfig+0x30c>)
 8004bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bba:	095b      	lsrs	r3, r3, #5
 8004bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bc0:	4419      	add	r1, r3
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	009a      	lsls	r2, r3, #2
 8004bcc:	441a      	add	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bd8:	4b34      	ldr	r3, [pc, #208]	; (8004cac <UART_SetConfig+0x30c>)
 8004bda:	fba3 0302 	umull	r0, r3, r3, r2
 8004bde:	095b      	lsrs	r3, r3, #5
 8004be0:	2064      	movs	r0, #100	; 0x64
 8004be2:	fb00 f303 	mul.w	r3, r0, r3
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	3332      	adds	r3, #50	; 0x32
 8004bec:	4a2f      	ldr	r2, [pc, #188]	; (8004cac <UART_SetConfig+0x30c>)
 8004bee:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf2:	095b      	lsrs	r3, r3, #5
 8004bf4:	f003 020f 	and.w	r2, r3, #15
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	440a      	add	r2, r1
 8004bfe:	609a      	str	r2, [r3, #8]
}
 8004c00:	e04d      	b.n	8004c9e <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c02:	f7fe ffa1 	bl	8003b48 <HAL_RCC_GetPCLK1Freq>
 8004c06:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	009a      	lsls	r2, r3, #2
 8004c12:	441a      	add	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1e:	4a23      	ldr	r2, [pc, #140]	; (8004cac <UART_SetConfig+0x30c>)
 8004c20:	fba2 2303 	umull	r2, r3, r2, r3
 8004c24:	095b      	lsrs	r3, r3, #5
 8004c26:	0119      	lsls	r1, r3, #4
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	009a      	lsls	r2, r3, #2
 8004c32:	441a      	add	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c3e:	4b1b      	ldr	r3, [pc, #108]	; (8004cac <UART_SetConfig+0x30c>)
 8004c40:	fba3 0302 	umull	r0, r3, r3, r2
 8004c44:	095b      	lsrs	r3, r3, #5
 8004c46:	2064      	movs	r0, #100	; 0x64
 8004c48:	fb00 f303 	mul.w	r3, r0, r3
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	3332      	adds	r3, #50	; 0x32
 8004c52:	4a16      	ldr	r2, [pc, #88]	; (8004cac <UART_SetConfig+0x30c>)
 8004c54:	fba2 2303 	umull	r2, r3, r2, r3
 8004c58:	095b      	lsrs	r3, r3, #5
 8004c5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c5e:	4419      	add	r1, r3
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	4613      	mov	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	009a      	lsls	r2, r3, #2
 8004c6a:	441a      	add	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c76:	4b0d      	ldr	r3, [pc, #52]	; (8004cac <UART_SetConfig+0x30c>)
 8004c78:	fba3 0302 	umull	r0, r3, r3, r2
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	2064      	movs	r0, #100	; 0x64
 8004c80:	fb00 f303 	mul.w	r3, r0, r3
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	3332      	adds	r3, #50	; 0x32
 8004c8a:	4a08      	ldr	r2, [pc, #32]	; (8004cac <UART_SetConfig+0x30c>)
 8004c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c90:	095b      	lsrs	r3, r3, #5
 8004c92:	f003 020f 	and.w	r2, r3, #15
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	440a      	add	r2, r1
 8004c9c:	609a      	str	r2, [r3, #8]
}
 8004c9e:	bf00      	nop
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40013800 	.word	0x40013800
 8004cac:	51eb851f 	.word	0x51eb851f

08004cb0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cb6:	f3ef 8305 	mrs	r3, IPSR
 8004cba:	60bb      	str	r3, [r7, #8]
  return(result);
 8004cbc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10f      	bne.n	8004ce2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8004cc6:	607b      	str	r3, [r7, #4]
  return(result);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d109      	bne.n	8004ce2 <osKernelInitialize+0x32>
 8004cce:	4b10      	ldr	r3, [pc, #64]	; (8004d10 <osKernelInitialize+0x60>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d109      	bne.n	8004cea <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004cd6:	f3ef 8311 	mrs	r3, BASEPRI
 8004cda:	603b      	str	r3, [r7, #0]
  return(result);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004ce2:	f06f 0305 	mvn.w	r3, #5
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	e00c      	b.n	8004d04 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004cea:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <osKernelInitialize+0x60>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d105      	bne.n	8004cfe <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004cf2:	4b07      	ldr	r3, [pc, #28]	; (8004d10 <osKernelInitialize+0x60>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	e002      	b.n	8004d04 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8004d02:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004d04:	68fb      	ldr	r3, [r7, #12]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bc80      	pop	{r7}
 8004d0e:	4770      	bx	lr
 8004d10:	20000080 	.word	0x20000080

08004d14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d1a:	f3ef 8305 	mrs	r3, IPSR
 8004d1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10f      	bne.n	8004d46 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d26:	f3ef 8310 	mrs	r3, PRIMASK
 8004d2a:	607b      	str	r3, [r7, #4]
  return(result);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d109      	bne.n	8004d46 <osKernelStart+0x32>
 8004d32:	4b11      	ldr	r3, [pc, #68]	; (8004d78 <osKernelStart+0x64>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d109      	bne.n	8004d4e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d3a:	f3ef 8311 	mrs	r3, BASEPRI
 8004d3e:	603b      	str	r3, [r7, #0]
  return(result);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004d46:	f06f 0305 	mvn.w	r3, #5
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	e00e      	b.n	8004d6c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004d4e:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <osKernelStart+0x64>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d107      	bne.n	8004d66 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004d56:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <osKernelStart+0x64>)
 8004d58:	2202      	movs	r2, #2
 8004d5a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004d5c:	f001 f864 	bl	8005e28 <vTaskStartScheduler>
      stat = osOK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	e002      	b.n	8004d6c <osKernelStart+0x58>
    } else {
      stat = osError;
 8004d66:	f04f 33ff 	mov.w	r3, #4294967295
 8004d6a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000080 	.word	0x20000080

08004d7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b092      	sub	sp, #72	; 0x48
 8004d80:	af04      	add	r7, sp, #16
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d8c:	f3ef 8305 	mrs	r3, IPSR
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f040 8094 	bne.w	8004ec2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d9e:	623b      	str	r3, [r7, #32]
  return(result);
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f040 808d 	bne.w	8004ec2 <osThreadNew+0x146>
 8004da8:	4b48      	ldr	r3, [pc, #288]	; (8004ecc <osThreadNew+0x150>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d106      	bne.n	8004dbe <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004db0:	f3ef 8311 	mrs	r3, BASEPRI
 8004db4:	61fb      	str	r3, [r7, #28]
  return(result);
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f040 8082 	bne.w	8004ec2 <osThreadNew+0x146>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d07e      	beq.n	8004ec2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004dc4:	2380      	movs	r3, #128	; 0x80
 8004dc6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004dc8:	2318      	movs	r3, #24
 8004dca:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004dcc:	2300      	movs	r3, #0
 8004dce:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004dd0:	f107 031b 	add.w	r3, r7, #27
 8004dd4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dda:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d045      	beq.n	8004e6e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <osThreadNew+0x74>
        name = attr->name;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d008      	beq.n	8004e16 <osThreadNew+0x9a>
 8004e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e06:	2b38      	cmp	r3, #56	; 0x38
 8004e08:	d805      	bhi.n	8004e16 <osThreadNew+0x9a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <osThreadNew+0x9e>
        return (NULL);
 8004e16:	2300      	movs	r3, #0
 8004e18:	e054      	b.n	8004ec4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	089b      	lsrs	r3, r3, #2
 8004e28:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00e      	beq.n	8004e50 <osThreadNew+0xd4>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	2b5b      	cmp	r3, #91	; 0x5b
 8004e38:	d90a      	bls.n	8004e50 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d006      	beq.n	8004e50 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <osThreadNew+0xd4>
        mem = 1;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e4e:	e010      	b.n	8004e72 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10c      	bne.n	8004e72 <osThreadNew+0xf6>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d108      	bne.n	8004e72 <osThreadNew+0xf6>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d104      	bne.n	8004e72 <osThreadNew+0xf6>
          mem = 0;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e6c:	e001      	b.n	8004e72 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d110      	bne.n	8004e9a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e80:	9202      	str	r2, [sp, #8]
 8004e82:	9301      	str	r3, [sp, #4]
 8004e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 fe02 	bl	8005a98 <xTaskCreateStatic>
 8004e94:	4603      	mov	r3, r0
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	e013      	b.n	8004ec2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d110      	bne.n	8004ec2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	f107 0314 	add.w	r3, r7, #20
 8004ea8:	9301      	str	r3, [sp, #4]
 8004eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 fe49 	bl	8005b4a <xTaskCreate>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d001      	beq.n	8004ec2 <osThreadNew+0x146>
          hTask = NULL;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004ec2:	697b      	ldr	r3, [r7, #20]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3738      	adds	r7, #56	; 0x38
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20000080 	.word	0x20000080

08004ed0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ed8:	f3ef 8305 	mrs	r3, IPSR
 8004edc:	613b      	str	r3, [r7, #16]
  return(result);
 8004ede:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10f      	bne.n	8004f04 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ee8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d109      	bne.n	8004f04 <osDelay+0x34>
 8004ef0:	4b0d      	ldr	r3, [pc, #52]	; (8004f28 <osDelay+0x58>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d109      	bne.n	8004f0c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ef8:	f3ef 8311 	mrs	r3, BASEPRI
 8004efc:	60bb      	str	r3, [r7, #8]
  return(result);
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <osDelay+0x3c>
    stat = osErrorISR;
 8004f04:	f06f 0305 	mvn.w	r3, #5
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	e007      	b.n	8004f1c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 ff52 	bl	8005dc0 <vTaskDelay>
    }
  }

  return (stat);
 8004f1c:	697b      	ldr	r3, [r7, #20]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	20000080 	.word	0x20000080

08004f2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4a06      	ldr	r2, [pc, #24]	; (8004f54 <vApplicationGetIdleTaskMemory+0x28>)
 8004f3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	4a05      	ldr	r2, [pc, #20]	; (8004f58 <vApplicationGetIdleTaskMemory+0x2c>)
 8004f42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2280      	movs	r2, #128	; 0x80
 8004f48:	601a      	str	r2, [r3, #0]
}
 8004f4a:	bf00      	nop
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr
 8004f54:	20000084 	.word	0x20000084
 8004f58:	200000e0 	.word	0x200000e0

08004f5c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4a07      	ldr	r2, [pc, #28]	; (8004f88 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f6c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	4a06      	ldr	r2, [pc, #24]	; (8004f8c <vApplicationGetTimerTaskMemory+0x30>)
 8004f72:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f7a:	601a      	str	r2, [r3, #0]
}
 8004f7c:	bf00      	nop
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bc80      	pop	{r7}
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	200002e0 	.word	0x200002e0
 8004f8c:	2000033c 	.word	0x2000033c

08004f90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f103 0208 	add.w	r2, r3, #8
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f103 0208 	add.w	r2, r3, #8
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f103 0208 	add.w	r2, r3, #8
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bc80      	pop	{r7}
 8004fcc:	4770      	bx	lr

08004fce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc80      	pop	{r7}
 8004fe4:	4770      	bx	lr

08004fe6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b085      	sub	sp, #20
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	1c5a      	adds	r2, r3, #1
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	601a      	str	r2, [r3, #0]
}
 8005022:	bf00      	nop
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	bc80      	pop	{r7}
 800502a:	4770      	bx	lr

0800502c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005042:	d103      	bne.n	800504c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	e00c      	b.n	8005066 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3308      	adds	r3, #8
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	e002      	b.n	800505a <vListInsert+0x2e>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	429a      	cmp	r2, r3
 8005064:	d2f6      	bcs.n	8005054 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	601a      	str	r2, [r3, #0]
}
 8005092:	bf00      	nop
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr

0800509c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6892      	ldr	r2, [r2, #8]
 80050b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6852      	ldr	r2, [r2, #4]
 80050bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d103      	bne.n	80050d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	1e5a      	subs	r2, r3, #1
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bc80      	pop	{r7}
 80050ec:	4770      	bx	lr
	...

080050f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d109      	bne.n	8005118 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005108:	f383 8811 	msr	BASEPRI, r3
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	60bb      	str	r3, [r7, #8]
 8005116:	e7fe      	b.n	8005116 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005118:	f001 ff96 	bl	8007048 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005124:	68f9      	ldr	r1, [r7, #12]
 8005126:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005128:	fb01 f303 	mul.w	r3, r1, r3
 800512c:	441a      	add	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005148:	3b01      	subs	r3, #1
 800514a:	68f9      	ldr	r1, [r7, #12]
 800514c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800514e:	fb01 f303 	mul.w	r3, r1, r3
 8005152:	441a      	add	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	22ff      	movs	r2, #255	; 0xff
 800515c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	22ff      	movs	r2, #255	; 0xff
 8005164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d114      	bne.n	8005198 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d01a      	beq.n	80051ac <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	3310      	adds	r3, #16
 800517a:	4618      	mov	r0, r3
 800517c:	f001 f8d8 	bl	8006330 <xTaskRemoveFromEventList>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d012      	beq.n	80051ac <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005186:	4b0d      	ldr	r3, [pc, #52]	; (80051bc <xQueueGenericReset+0xcc>)
 8005188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	e009      	b.n	80051ac <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	3310      	adds	r3, #16
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff fef7 	bl	8004f90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3324      	adds	r3, #36	; 0x24
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff fef2 	bl	8004f90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051ac:	f001 ff7a 	bl	80070a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051b0:	2301      	movs	r3, #1
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	e000ed04 	.word	0xe000ed04

080051c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08e      	sub	sp, #56	; 0x38
 80051c4:	af02      	add	r7, sp, #8
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d109      	bne.n	80051e8 <xQueueGenericCreateStatic+0x28>
 80051d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80051e6:	e7fe      	b.n	80051e6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d109      	bne.n	8005202 <xQueueGenericCreateStatic+0x42>
 80051ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005200:	e7fe      	b.n	8005200 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <xQueueGenericCreateStatic+0x4e>
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <xQueueGenericCreateStatic+0x52>
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <xQueueGenericCreateStatic+0x54>
 8005212:	2300      	movs	r3, #0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d109      	bne.n	800522c <xQueueGenericCreateStatic+0x6c>
 8005218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	623b      	str	r3, [r7, #32]
 800522a:	e7fe      	b.n	800522a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d102      	bne.n	8005238 <xQueueGenericCreateStatic+0x78>
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <xQueueGenericCreateStatic+0x7c>
 8005238:	2301      	movs	r3, #1
 800523a:	e000      	b.n	800523e <xQueueGenericCreateStatic+0x7e>
 800523c:	2300      	movs	r3, #0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d109      	bne.n	8005256 <xQueueGenericCreateStatic+0x96>
 8005242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005246:	f383 8811 	msr	BASEPRI, r3
 800524a:	f3bf 8f6f 	isb	sy
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	61fb      	str	r3, [r7, #28]
 8005254:	e7fe      	b.n	8005254 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005256:	2350      	movs	r3, #80	; 0x50
 8005258:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2b50      	cmp	r3, #80	; 0x50
 800525e:	d009      	beq.n	8005274 <xQueueGenericCreateStatic+0xb4>
 8005260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	61bb      	str	r3, [r7, #24]
 8005272:	e7fe      	b.n	8005272 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00d      	beq.n	800529a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800527e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005286:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	4613      	mov	r3, r2
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	68b9      	ldr	r1, [r7, #8]
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 f805 	bl	80052a4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800529a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800529c:	4618      	mov	r0, r3
 800529e:	3730      	adds	r7, #48	; 0x30
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
 80052b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d103      	bne.n	80052c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	e002      	b.n	80052c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80052d2:	2101      	movs	r1, #1
 80052d4:	69b8      	ldr	r0, [r7, #24]
 80052d6:	f7ff ff0b 	bl	80050f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	78fa      	ldrb	r2, [r7, #3]
 80052de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80052e2:	bf00      	nop
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b08e      	sub	sp, #56	; 0x38
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80052fa:	2300      	movs	r3, #0
 80052fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005304:	2b00      	cmp	r3, #0
 8005306:	d109      	bne.n	800531c <xQueueGenericSend+0x30>
 8005308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	62bb      	str	r3, [r7, #40]	; 0x28
 800531a:	e7fe      	b.n	800531a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d103      	bne.n	800532a <xQueueGenericSend+0x3e>
 8005322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <xQueueGenericSend+0x42>
 800532a:	2301      	movs	r3, #1
 800532c:	e000      	b.n	8005330 <xQueueGenericSend+0x44>
 800532e:	2300      	movs	r3, #0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d109      	bne.n	8005348 <xQueueGenericSend+0x5c>
 8005334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	627b      	str	r3, [r7, #36]	; 0x24
 8005346:	e7fe      	b.n	8005346 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2b02      	cmp	r3, #2
 800534c:	d103      	bne.n	8005356 <xQueueGenericSend+0x6a>
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005352:	2b01      	cmp	r3, #1
 8005354:	d101      	bne.n	800535a <xQueueGenericSend+0x6e>
 8005356:	2301      	movs	r3, #1
 8005358:	e000      	b.n	800535c <xQueueGenericSend+0x70>
 800535a:	2300      	movs	r3, #0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d109      	bne.n	8005374 <xQueueGenericSend+0x88>
 8005360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	623b      	str	r3, [r7, #32]
 8005372:	e7fe      	b.n	8005372 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005374:	f001 f996 	bl	80066a4 <xTaskGetSchedulerState>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d102      	bne.n	8005384 <xQueueGenericSend+0x98>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <xQueueGenericSend+0x9c>
 8005384:	2301      	movs	r3, #1
 8005386:	e000      	b.n	800538a <xQueueGenericSend+0x9e>
 8005388:	2300      	movs	r3, #0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d109      	bne.n	80053a2 <xQueueGenericSend+0xb6>
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	61fb      	str	r3, [r7, #28]
 80053a0:	e7fe      	b.n	80053a0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053a2:	f001 fe51 	bl	8007048 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d302      	bcc.n	80053b8 <xQueueGenericSend+0xcc>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d129      	bne.n	800540c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	68b9      	ldr	r1, [r7, #8]
 80053bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053be:	f000 f9ff 	bl	80057c0 <prvCopyDataToQueue>
 80053c2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d010      	beq.n	80053ee <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ce:	3324      	adds	r3, #36	; 0x24
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 ffad 	bl	8006330 <xTaskRemoveFromEventList>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d013      	beq.n	8005404 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80053dc:	4b3f      	ldr	r3, [pc, #252]	; (80054dc <xQueueGenericSend+0x1f0>)
 80053de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	e00a      	b.n	8005404 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80053ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d007      	beq.n	8005404 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80053f4:	4b39      	ldr	r3, [pc, #228]	; (80054dc <xQueueGenericSend+0x1f0>)
 80053f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005404:	f001 fe4e 	bl	80070a4 <vPortExitCritical>
				return pdPASS;
 8005408:	2301      	movs	r3, #1
 800540a:	e063      	b.n	80054d4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d103      	bne.n	800541a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005412:	f001 fe47 	bl	80070a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005416:	2300      	movs	r3, #0
 8005418:	e05c      	b.n	80054d4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800541a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541c:	2b00      	cmp	r3, #0
 800541e:	d106      	bne.n	800542e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005420:	f107 0314 	add.w	r3, r7, #20
 8005424:	4618      	mov	r0, r3
 8005426:	f000 ffe5 	bl	80063f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800542a:	2301      	movs	r3, #1
 800542c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800542e:	f001 fe39 	bl	80070a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005432:	f000 fd5d 	bl	8005ef0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005436:	f001 fe07 	bl	8007048 <vPortEnterCritical>
 800543a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005440:	b25b      	sxtb	r3, r3
 8005442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005446:	d103      	bne.n	8005450 <xQueueGenericSend+0x164>
 8005448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005452:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005456:	b25b      	sxtb	r3, r3
 8005458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545c:	d103      	bne.n	8005466 <xQueueGenericSend+0x17a>
 800545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005466:	f001 fe1d 	bl	80070a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800546a:	1d3a      	adds	r2, r7, #4
 800546c:	f107 0314 	add.w	r3, r7, #20
 8005470:	4611      	mov	r1, r2
 8005472:	4618      	mov	r0, r3
 8005474:	f000 ffd4 	bl	8006420 <xTaskCheckForTimeOut>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d124      	bne.n	80054c8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800547e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005480:	f000 fa96 	bl	80059b0 <prvIsQueueFull>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d018      	beq.n	80054bc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	3310      	adds	r3, #16
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	4611      	mov	r1, r2
 8005492:	4618      	mov	r0, r3
 8005494:	f000 fefe 	bl	8006294 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800549a:	f000 fa21 	bl	80058e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800549e:	f000 fd35 	bl	8005f0c <xTaskResumeAll>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f47f af7c 	bne.w	80053a2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80054aa:	4b0c      	ldr	r3, [pc, #48]	; (80054dc <xQueueGenericSend+0x1f0>)
 80054ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	e772      	b.n	80053a2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80054bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054be:	f000 fa0f 	bl	80058e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054c2:	f000 fd23 	bl	8005f0c <xTaskResumeAll>
 80054c6:	e76c      	b.n	80053a2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80054c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054ca:	f000 fa09 	bl	80058e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054ce:	f000 fd1d 	bl	8005f0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80054d2:	2300      	movs	r3, #0
		}
	}
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3738      	adds	r7, #56	; 0x38
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	e000ed04 	.word	0xe000ed04

080054e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08e      	sub	sp, #56	; 0x38
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80054f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d109      	bne.n	800550c <xQueueGenericSendFromISR+0x2c>
 80054f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	627b      	str	r3, [r7, #36]	; 0x24
 800550a:	e7fe      	b.n	800550a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d103      	bne.n	800551a <xQueueGenericSendFromISR+0x3a>
 8005512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <xQueueGenericSendFromISR+0x3e>
 800551a:	2301      	movs	r3, #1
 800551c:	e000      	b.n	8005520 <xQueueGenericSendFromISR+0x40>
 800551e:	2300      	movs	r3, #0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d109      	bne.n	8005538 <xQueueGenericSendFromISR+0x58>
 8005524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	623b      	str	r3, [r7, #32]
 8005536:	e7fe      	b.n	8005536 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2b02      	cmp	r3, #2
 800553c:	d103      	bne.n	8005546 <xQueueGenericSendFromISR+0x66>
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005542:	2b01      	cmp	r3, #1
 8005544:	d101      	bne.n	800554a <xQueueGenericSendFromISR+0x6a>
 8005546:	2301      	movs	r3, #1
 8005548:	e000      	b.n	800554c <xQueueGenericSendFromISR+0x6c>
 800554a:	2300      	movs	r3, #0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d109      	bne.n	8005564 <xQueueGenericSendFromISR+0x84>
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	61fb      	str	r3, [r7, #28]
 8005562:	e7fe      	b.n	8005562 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005564:	f001 fe2a 	bl	80071bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005568:	f3ef 8211 	mrs	r2, BASEPRI
 800556c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	61ba      	str	r2, [r7, #24]
 800557e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005580:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005582:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005586:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558c:	429a      	cmp	r2, r3
 800558e:	d302      	bcc.n	8005596 <xQueueGenericSendFromISR+0xb6>
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	2b02      	cmp	r3, #2
 8005594:	d12c      	bne.n	80055f0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005598:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800559c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	68b9      	ldr	r1, [r7, #8]
 80055a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055a6:	f000 f90b 	bl	80057c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80055aa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80055ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b2:	d112      	bne.n	80055da <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d016      	beq.n	80055ea <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055be:	3324      	adds	r3, #36	; 0x24
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 feb5 	bl	8006330 <xTaskRemoveFromEventList>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00e      	beq.n	80055ea <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00b      	beq.n	80055ea <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	e007      	b.n	80055ea <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80055da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055de:	3301      	adds	r3, #1
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	b25a      	sxtb	r2, r3
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80055ea:	2301      	movs	r3, #1
 80055ec:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80055ee:	e001      	b.n	80055f4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80055f0:	2300      	movs	r3, #0
 80055f2:	637b      	str	r3, [r7, #52]	; 0x34
 80055f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80055fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005600:	4618      	mov	r0, r3
 8005602:	3738      	adds	r7, #56	; 0x38
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08c      	sub	sp, #48	; 0x30
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005614:	2300      	movs	r3, #0
 8005616:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561e:	2b00      	cmp	r3, #0
 8005620:	d109      	bne.n	8005636 <xQueueReceive+0x2e>
	__asm volatile
 8005622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	623b      	str	r3, [r7, #32]
 8005634:	e7fe      	b.n	8005634 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d103      	bne.n	8005644 <xQueueReceive+0x3c>
 800563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <xQueueReceive+0x40>
 8005644:	2301      	movs	r3, #1
 8005646:	e000      	b.n	800564a <xQueueReceive+0x42>
 8005648:	2300      	movs	r3, #0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <xQueueReceive+0x5a>
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	61fb      	str	r3, [r7, #28]
 8005660:	e7fe      	b.n	8005660 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005662:	f001 f81f 	bl	80066a4 <xTaskGetSchedulerState>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d102      	bne.n	8005672 <xQueueReceive+0x6a>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <xQueueReceive+0x6e>
 8005672:	2301      	movs	r3, #1
 8005674:	e000      	b.n	8005678 <xQueueReceive+0x70>
 8005676:	2300      	movs	r3, #0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d109      	bne.n	8005690 <xQueueReceive+0x88>
 800567c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	61bb      	str	r3, [r7, #24]
 800568e:	e7fe      	b.n	800568e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005690:	f001 fcda 	bl	8007048 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005698:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	2b00      	cmp	r3, #0
 800569e:	d01f      	beq.n	80056e0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80056a0:	68b9      	ldr	r1, [r7, #8]
 80056a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056a4:	f000 f8f6 	bl	8005894 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	1e5a      	subs	r2, r3, #1
 80056ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ae:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00f      	beq.n	80056d8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ba:	3310      	adds	r3, #16
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 fe37 	bl	8006330 <xTaskRemoveFromEventList>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d007      	beq.n	80056d8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80056c8:	4b3c      	ldr	r3, [pc, #240]	; (80057bc <xQueueReceive+0x1b4>)
 80056ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80056d8:	f001 fce4 	bl	80070a4 <vPortExitCritical>
				return pdPASS;
 80056dc:	2301      	movs	r3, #1
 80056de:	e069      	b.n	80057b4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d103      	bne.n	80056ee <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056e6:	f001 fcdd 	bl	80070a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056ea:	2300      	movs	r3, #0
 80056ec:	e062      	b.n	80057b4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d106      	bne.n	8005702 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056f4:	f107 0310 	add.w	r3, r7, #16
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 fe7b 	bl	80063f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056fe:	2301      	movs	r3, #1
 8005700:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005702:	f001 fccf 	bl	80070a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005706:	f000 fbf3 	bl	8005ef0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800570a:	f001 fc9d 	bl	8007048 <vPortEnterCritical>
 800570e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005710:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005714:	b25b      	sxtb	r3, r3
 8005716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571a:	d103      	bne.n	8005724 <xQueueReceive+0x11c>
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	2200      	movs	r2, #0
 8005720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005726:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800572a:	b25b      	sxtb	r3, r3
 800572c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005730:	d103      	bne.n	800573a <xQueueReceive+0x132>
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800573a:	f001 fcb3 	bl	80070a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800573e:	1d3a      	adds	r2, r7, #4
 8005740:	f107 0310 	add.w	r3, r7, #16
 8005744:	4611      	mov	r1, r2
 8005746:	4618      	mov	r0, r3
 8005748:	f000 fe6a 	bl	8006420 <xTaskCheckForTimeOut>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d123      	bne.n	800579a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005754:	f000 f916 	bl	8005984 <prvIsQueueEmpty>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d017      	beq.n	800578e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800575e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005760:	3324      	adds	r3, #36	; 0x24
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	4611      	mov	r1, r2
 8005766:	4618      	mov	r0, r3
 8005768:	f000 fd94 	bl	8006294 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800576c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800576e:	f000 f8b7 	bl	80058e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005772:	f000 fbcb 	bl	8005f0c <xTaskResumeAll>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d189      	bne.n	8005690 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800577c:	4b0f      	ldr	r3, [pc, #60]	; (80057bc <xQueueReceive+0x1b4>)
 800577e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	e780      	b.n	8005690 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800578e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005790:	f000 f8a6 	bl	80058e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005794:	f000 fbba 	bl	8005f0c <xTaskResumeAll>
 8005798:	e77a      	b.n	8005690 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800579a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800579c:	f000 f8a0 	bl	80058e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057a0:	f000 fbb4 	bl	8005f0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057a6:	f000 f8ed 	bl	8005984 <prvIsQueueEmpty>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f43f af6f 	beq.w	8005690 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80057b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3730      	adds	r7, #48	; 0x30
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	e000ed04 	.word	0xe000ed04

080057c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80057cc:	2300      	movs	r3, #0
 80057ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10d      	bne.n	80057fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d14d      	bne.n	8005882 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 ff78 	bl	80066e0 <xTaskPriorityDisinherit>
 80057f0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	605a      	str	r2, [r3, #4]
 80057f8:	e043      	b.n	8005882 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d119      	bne.n	8005834 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6898      	ldr	r0, [r3, #8]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005808:	461a      	mov	r2, r3
 800580a:	68b9      	ldr	r1, [r7, #8]
 800580c:	f001 ff0a 	bl	8007624 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	441a      	add	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	429a      	cmp	r2, r3
 8005828:	d32b      	bcc.n	8005882 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	609a      	str	r2, [r3, #8]
 8005832:	e026      	b.n	8005882 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	68d8      	ldr	r0, [r3, #12]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	461a      	mov	r2, r3
 800583e:	68b9      	ldr	r1, [r7, #8]
 8005840:	f001 fef0 	bl	8007624 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	68da      	ldr	r2, [r3, #12]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584c:	425b      	negs	r3, r3
 800584e:	441a      	add	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	68da      	ldr	r2, [r3, #12]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	429a      	cmp	r2, r3
 800585e:	d207      	bcs.n	8005870 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005868:	425b      	negs	r3, r3
 800586a:	441a      	add	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b02      	cmp	r3, #2
 8005874:	d105      	bne.n	8005882 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d002      	beq.n	8005882 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	3b01      	subs	r3, #1
 8005880:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800588a:	697b      	ldr	r3, [r7, #20]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d018      	beq.n	80058d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68da      	ldr	r2, [r3, #12]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	441a      	add	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68da      	ldr	r2, [r3, #12]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d303      	bcc.n	80058c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68d9      	ldr	r1, [r3, #12]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d0:	461a      	mov	r2, r3
 80058d2:	6838      	ldr	r0, [r7, #0]
 80058d4:	f001 fea6 	bl	8007624 <memcpy>
	}
}
 80058d8:	bf00      	nop
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80058e8:	f001 fbae 	bl	8007048 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058f4:	e011      	b.n	800591a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d012      	beq.n	8005924 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	3324      	adds	r3, #36	; 0x24
 8005902:	4618      	mov	r0, r3
 8005904:	f000 fd14 	bl	8006330 <xTaskRemoveFromEventList>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800590e:	f000 fde7 	bl	80064e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005912:	7bfb      	ldrb	r3, [r7, #15]
 8005914:	3b01      	subs	r3, #1
 8005916:	b2db      	uxtb	r3, r3
 8005918:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800591a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800591e:	2b00      	cmp	r3, #0
 8005920:	dce9      	bgt.n	80058f6 <prvUnlockQueue+0x16>
 8005922:	e000      	b.n	8005926 <prvUnlockQueue+0x46>
					break;
 8005924:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	22ff      	movs	r2, #255	; 0xff
 800592a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800592e:	f001 fbb9 	bl	80070a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005932:	f001 fb89 	bl	8007048 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800593c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800593e:	e011      	b.n	8005964 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d012      	beq.n	800596e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3310      	adds	r3, #16
 800594c:	4618      	mov	r0, r3
 800594e:	f000 fcef 	bl	8006330 <xTaskRemoveFromEventList>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005958:	f000 fdc2 	bl	80064e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800595c:	7bbb      	ldrb	r3, [r7, #14]
 800595e:	3b01      	subs	r3, #1
 8005960:	b2db      	uxtb	r3, r3
 8005962:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005964:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005968:	2b00      	cmp	r3, #0
 800596a:	dce9      	bgt.n	8005940 <prvUnlockQueue+0x60>
 800596c:	e000      	b.n	8005970 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800596e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	22ff      	movs	r2, #255	; 0xff
 8005974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005978:	f001 fb94 	bl	80070a4 <vPortExitCritical>
}
 800597c:	bf00      	nop
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800598c:	f001 fb5c 	bl	8007048 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005994:	2b00      	cmp	r3, #0
 8005996:	d102      	bne.n	800599e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005998:	2301      	movs	r3, #1
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	e001      	b.n	80059a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800599e:	2300      	movs	r3, #0
 80059a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059a2:	f001 fb7f 	bl	80070a4 <vPortExitCritical>

	return xReturn;
 80059a6:	68fb      	ldr	r3, [r7, #12]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059b8:	f001 fb46 	bl	8007048 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d102      	bne.n	80059ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80059c8:	2301      	movs	r3, #1
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	e001      	b.n	80059d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80059ce:	2300      	movs	r3, #0
 80059d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059d2:	f001 fb67 	bl	80070a4 <vPortExitCritical>

	return xReturn;
 80059d6:	68fb      	ldr	r3, [r7, #12]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059ea:	2300      	movs	r3, #0
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	e014      	b.n	8005a1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80059f0:	4a0e      	ldr	r2, [pc, #56]	; (8005a2c <vQueueAddToRegistry+0x4c>)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10b      	bne.n	8005a14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80059fc:	490b      	ldr	r1, [pc, #44]	; (8005a2c <vQueueAddToRegistry+0x4c>)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005a06:	4a09      	ldr	r2, [pc, #36]	; (8005a2c <vQueueAddToRegistry+0x4c>)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	4413      	add	r3, r2
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a12:	e005      	b.n	8005a20 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	3301      	adds	r3, #1
 8005a18:	60fb      	str	r3, [r7, #12]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2b07      	cmp	r3, #7
 8005a1e:	d9e7      	bls.n	80059f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a20:	bf00      	nop
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bc80      	pop	{r7}
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	20001b68 	.word	0x20001b68

08005a30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005a40:	f001 fb02 	bl	8007048 <vPortEnterCritical>
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a4a:	b25b      	sxtb	r3, r3
 8005a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a50:	d103      	bne.n	8005a5a <vQueueWaitForMessageRestricted+0x2a>
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a60:	b25b      	sxtb	r3, r3
 8005a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a66:	d103      	bne.n	8005a70 <vQueueWaitForMessageRestricted+0x40>
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a70:	f001 fb18 	bl	80070a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d106      	bne.n	8005a8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	3324      	adds	r3, #36	; 0x24
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	68b9      	ldr	r1, [r7, #8]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 fc29 	bl	80062dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a8a:	6978      	ldr	r0, [r7, #20]
 8005a8c:	f7ff ff28 	bl	80058e0 <prvUnlockQueue>
	}
 8005a90:	bf00      	nop
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08e      	sub	sp, #56	; 0x38
 8005a9c:	af04      	add	r7, sp, #16
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d109      	bne.n	8005ac0 <xTaskCreateStatic+0x28>
 8005aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab0:	f383 8811 	msr	BASEPRI, r3
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	623b      	str	r3, [r7, #32]
 8005abe:	e7fe      	b.n	8005abe <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d109      	bne.n	8005ada <xTaskCreateStatic+0x42>
 8005ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aca:	f383 8811 	msr	BASEPRI, r3
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	f3bf 8f4f 	dsb	sy
 8005ad6:	61fb      	str	r3, [r7, #28]
 8005ad8:	e7fe      	b.n	8005ad8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ada:	235c      	movs	r3, #92	; 0x5c
 8005adc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	2b5c      	cmp	r3, #92	; 0x5c
 8005ae2:	d009      	beq.n	8005af8 <xTaskCreateStatic+0x60>
 8005ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	61bb      	str	r3, [r7, #24]
 8005af6:	e7fe      	b.n	8005af6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d01e      	beq.n	8005b3c <xTaskCreateStatic+0xa4>
 8005afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d01b      	beq.n	8005b3c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b06:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b0c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	2202      	movs	r2, #2
 8005b12:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b16:	2300      	movs	r3, #0
 8005b18:	9303      	str	r3, [sp, #12]
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	9302      	str	r3, [sp, #8]
 8005b1e:	f107 0314 	add.w	r3, r7, #20
 8005b22:	9301      	str	r3, [sp, #4]
 8005b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	68b9      	ldr	r1, [r7, #8]
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 f850 	bl	8005bd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b36:	f000 f8d3 	bl	8005ce0 <prvAddNewTaskToReadyList>
 8005b3a:	e001      	b.n	8005b40 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b40:	697b      	ldr	r3, [r7, #20]
	}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3728      	adds	r7, #40	; 0x28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b08c      	sub	sp, #48	; 0x30
 8005b4e:	af04      	add	r7, sp, #16
 8005b50:	60f8      	str	r0, [r7, #12]
 8005b52:	60b9      	str	r1, [r7, #8]
 8005b54:	603b      	str	r3, [r7, #0]
 8005b56:	4613      	mov	r3, r2
 8005b58:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b5a:	88fb      	ldrh	r3, [r7, #6]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f001 fb68 	bl	8007234 <pvPortMalloc>
 8005b64:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00e      	beq.n	8005b8a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005b6c:	205c      	movs	r0, #92	; 0x5c
 8005b6e:	f001 fb61 	bl	8007234 <pvPortMalloc>
 8005b72:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	631a      	str	r2, [r3, #48]	; 0x30
 8005b80:	e005      	b.n	8005b8e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b82:	6978      	ldr	r0, [r7, #20]
 8005b84:	f001 fc18 	bl	80073b8 <vPortFree>
 8005b88:	e001      	b.n	8005b8e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d017      	beq.n	8005bc4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b9c:	88fa      	ldrh	r2, [r7, #6]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	9303      	str	r3, [sp, #12]
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	9302      	str	r3, [sp, #8]
 8005ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba8:	9301      	str	r3, [sp, #4]
 8005baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68b9      	ldr	r1, [r7, #8]
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 f80e 	bl	8005bd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bb8:	69f8      	ldr	r0, [r7, #28]
 8005bba:	f000 f891 	bl	8005ce0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	61bb      	str	r3, [r7, #24]
 8005bc2:	e002      	b.n	8005bca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005bca:	69bb      	ldr	r3, [r7, #24]
	}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3720      	adds	r7, #32
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	461a      	mov	r2, r3
 8005bec:	21a5      	movs	r1, #165	; 0xa5
 8005bee:	f001 fd24 	bl	800763a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	f023 0307 	bic.w	r3, r3, #7
 8005c0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	f003 0307 	and.w	r3, r3, #7
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d009      	beq.n	8005c2a <prvInitialiseNewTask+0x56>
 8005c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	617b      	str	r3, [r7, #20]
 8005c28:	e7fe      	b.n	8005c28 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	61fb      	str	r3, [r7, #28]
 8005c2e:	e012      	b.n	8005c56 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	4413      	add	r3, r2
 8005c36:	7819      	ldrb	r1, [r3, #0]
 8005c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	3334      	adds	r3, #52	; 0x34
 8005c40:	460a      	mov	r2, r1
 8005c42:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	4413      	add	r3, r2
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d006      	beq.n	8005c5e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	3301      	adds	r3, #1
 8005c54:	61fb      	str	r3, [r7, #28]
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	2b0f      	cmp	r3, #15
 8005c5a:	d9e9      	bls.n	8005c30 <prvInitialiseNewTask+0x5c>
 8005c5c:	e000      	b.n	8005c60 <prvInitialiseNewTask+0x8c>
		{
			break;
 8005c5e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6a:	2b37      	cmp	r3, #55	; 0x37
 8005c6c:	d901      	bls.n	8005c72 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c6e:	2337      	movs	r3, #55	; 0x37
 8005c70:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c76:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c7c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c80:	2200      	movs	r2, #0
 8005c82:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c86:	3304      	adds	r3, #4
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff f9a0 	bl	8004fce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	3318      	adds	r3, #24
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7ff f99b 	bl	8004fce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c9c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	68f9      	ldr	r1, [r7, #12]
 8005cc0:	69b8      	ldr	r0, [r7, #24]
 8005cc2:	f001 f8d7 	bl	8006e74 <pxPortInitialiseStack>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cca:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cd8:	bf00      	nop
 8005cda:	3720      	adds	r7, #32
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ce8:	f001 f9ae 	bl	8007048 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005cec:	4b2d      	ldr	r3, [pc, #180]	; (8005da4 <prvAddNewTaskToReadyList+0xc4>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	4a2c      	ldr	r2, [pc, #176]	; (8005da4 <prvAddNewTaskToReadyList+0xc4>)
 8005cf4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005cf6:	4b2c      	ldr	r3, [pc, #176]	; (8005da8 <prvAddNewTaskToReadyList+0xc8>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d109      	bne.n	8005d12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005cfe:	4a2a      	ldr	r2, [pc, #168]	; (8005da8 <prvAddNewTaskToReadyList+0xc8>)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d04:	4b27      	ldr	r3, [pc, #156]	; (8005da4 <prvAddNewTaskToReadyList+0xc4>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d110      	bne.n	8005d2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d0c:	f000 fc0c 	bl	8006528 <prvInitialiseTaskLists>
 8005d10:	e00d      	b.n	8005d2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d12:	4b26      	ldr	r3, [pc, #152]	; (8005dac <prvAddNewTaskToReadyList+0xcc>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d109      	bne.n	8005d2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d1a:	4b23      	ldr	r3, [pc, #140]	; (8005da8 <prvAddNewTaskToReadyList+0xc8>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d802      	bhi.n	8005d2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d28:	4a1f      	ldr	r2, [pc, #124]	; (8005da8 <prvAddNewTaskToReadyList+0xc8>)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d2e:	4b20      	ldr	r3, [pc, #128]	; (8005db0 <prvAddNewTaskToReadyList+0xd0>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3301      	adds	r3, #1
 8005d34:	4a1e      	ldr	r2, [pc, #120]	; (8005db0 <prvAddNewTaskToReadyList+0xd0>)
 8005d36:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d38:	4b1d      	ldr	r3, [pc, #116]	; (8005db0 <prvAddNewTaskToReadyList+0xd0>)
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d44:	4b1b      	ldr	r3, [pc, #108]	; (8005db4 <prvAddNewTaskToReadyList+0xd4>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d903      	bls.n	8005d54 <prvAddNewTaskToReadyList+0x74>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d50:	4a18      	ldr	r2, [pc, #96]	; (8005db4 <prvAddNewTaskToReadyList+0xd4>)
 8005d52:	6013      	str	r3, [r2, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d58:	4613      	mov	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4a15      	ldr	r2, [pc, #84]	; (8005db8 <prvAddNewTaskToReadyList+0xd8>)
 8005d62:	441a      	add	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3304      	adds	r3, #4
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4610      	mov	r0, r2
 8005d6c:	f7ff f93b 	bl	8004fe6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d70:	f001 f998 	bl	80070a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d74:	4b0d      	ldr	r3, [pc, #52]	; (8005dac <prvAddNewTaskToReadyList+0xcc>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00e      	beq.n	8005d9a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d7c:	4b0a      	ldr	r3, [pc, #40]	; (8005da8 <prvAddNewTaskToReadyList+0xc8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d207      	bcs.n	8005d9a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d8a:	4b0c      	ldr	r3, [pc, #48]	; (8005dbc <prvAddNewTaskToReadyList+0xdc>)
 8005d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d9a:	bf00      	nop
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	20000c10 	.word	0x20000c10
 8005da8:	2000073c 	.word	0x2000073c
 8005dac:	20000c1c 	.word	0x20000c1c
 8005db0:	20000c2c 	.word	0x20000c2c
 8005db4:	20000c18 	.word	0x20000c18
 8005db8:	20000740 	.word	0x20000740
 8005dbc:	e000ed04 	.word	0xe000ed04

08005dc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d016      	beq.n	8005e00 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005dd2:	4b13      	ldr	r3, [pc, #76]	; (8005e20 <vTaskDelay+0x60>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d009      	beq.n	8005dee <vTaskDelay+0x2e>
 8005dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	60bb      	str	r3, [r7, #8]
 8005dec:	e7fe      	b.n	8005dec <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005dee:	f000 f87f 	bl	8005ef0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005df2:	2100      	movs	r1, #0
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 fcdf 	bl	80067b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005dfa:	f000 f887 	bl	8005f0c <xTaskResumeAll>
 8005dfe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d107      	bne.n	8005e16 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005e06:	4b07      	ldr	r3, [pc, #28]	; (8005e24 <vTaskDelay+0x64>)
 8005e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e16:	bf00      	nop
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	20000c38 	.word	0x20000c38
 8005e24:	e000ed04 	.word	0xe000ed04

08005e28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08a      	sub	sp, #40	; 0x28
 8005e2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e32:	2300      	movs	r3, #0
 8005e34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e36:	463a      	mov	r2, r7
 8005e38:	1d39      	adds	r1, r7, #4
 8005e3a:	f107 0308 	add.w	r3, r7, #8
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7ff f874 	bl	8004f2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e44:	6839      	ldr	r1, [r7, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	9202      	str	r2, [sp, #8]
 8005e4c:	9301      	str	r3, [sp, #4]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	2300      	movs	r3, #0
 8005e54:	460a      	mov	r2, r1
 8005e56:	4920      	ldr	r1, [pc, #128]	; (8005ed8 <vTaskStartScheduler+0xb0>)
 8005e58:	4820      	ldr	r0, [pc, #128]	; (8005edc <vTaskStartScheduler+0xb4>)
 8005e5a:	f7ff fe1d 	bl	8005a98 <xTaskCreateStatic>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	4b1f      	ldr	r3, [pc, #124]	; (8005ee0 <vTaskStartScheduler+0xb8>)
 8005e62:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e64:	4b1e      	ldr	r3, [pc, #120]	; (8005ee0 <vTaskStartScheduler+0xb8>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	617b      	str	r3, [r7, #20]
 8005e70:	e001      	b.n	8005e76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e72:	2300      	movs	r3, #0
 8005e74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d102      	bne.n	8005e82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005e7c:	f000 fcf0 	bl	8006860 <xTimerCreateTimerTask>
 8005e80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d115      	bne.n	8005eb4 <vTaskStartScheduler+0x8c>
 8005e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8c:	f383 8811 	msr	BASEPRI, r3
 8005e90:	f3bf 8f6f 	isb	sy
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e9a:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <vTaskStartScheduler+0xbc>)
 8005e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ea2:	4b11      	ldr	r3, [pc, #68]	; (8005ee8 <vTaskStartScheduler+0xc0>)
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005ea8:	4b10      	ldr	r3, [pc, #64]	; (8005eec <vTaskStartScheduler+0xc4>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005eae:	f001 f85b 	bl	8006f68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005eb2:	e00d      	b.n	8005ed0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eba:	d109      	bne.n	8005ed0 <vTaskStartScheduler+0xa8>
 8005ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec0:	f383 8811 	msr	BASEPRI, r3
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	e7fe      	b.n	8005ece <vTaskStartScheduler+0xa6>
}
 8005ed0:	bf00      	nop
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	080076f4 	.word	0x080076f4
 8005edc:	080064f9 	.word	0x080064f9
 8005ee0:	20000c34 	.word	0x20000c34
 8005ee4:	20000c30 	.word	0x20000c30
 8005ee8:	20000c1c 	.word	0x20000c1c
 8005eec:	20000c14 	.word	0x20000c14

08005ef0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005ef4:	4b04      	ldr	r3, [pc, #16]	; (8005f08 <vTaskSuspendAll+0x18>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	4a03      	ldr	r2, [pc, #12]	; (8005f08 <vTaskSuspendAll+0x18>)
 8005efc:	6013      	str	r3, [r2, #0]
}
 8005efe:	bf00      	nop
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bc80      	pop	{r7}
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	20000c38 	.word	0x20000c38

08005f0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f12:	2300      	movs	r3, #0
 8005f14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f16:	2300      	movs	r3, #0
 8005f18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f1a:	4b41      	ldr	r3, [pc, #260]	; (8006020 <xTaskResumeAll+0x114>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d109      	bne.n	8005f36 <xTaskResumeAll+0x2a>
 8005f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	603b      	str	r3, [r7, #0]
 8005f34:	e7fe      	b.n	8005f34 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f36:	f001 f887 	bl	8007048 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f3a:	4b39      	ldr	r3, [pc, #228]	; (8006020 <xTaskResumeAll+0x114>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	4a37      	ldr	r2, [pc, #220]	; (8006020 <xTaskResumeAll+0x114>)
 8005f42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f44:	4b36      	ldr	r3, [pc, #216]	; (8006020 <xTaskResumeAll+0x114>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d162      	bne.n	8006012 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f4c:	4b35      	ldr	r3, [pc, #212]	; (8006024 <xTaskResumeAll+0x118>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d05e      	beq.n	8006012 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f54:	e02f      	b.n	8005fb6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005f56:	4b34      	ldr	r3, [pc, #208]	; (8006028 <xTaskResumeAll+0x11c>)
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3318      	adds	r3, #24
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7ff f89a 	bl	800509c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7ff f895 	bl	800509c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f76:	4b2d      	ldr	r3, [pc, #180]	; (800602c <xTaskResumeAll+0x120>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d903      	bls.n	8005f86 <xTaskResumeAll+0x7a>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f82:	4a2a      	ldr	r2, [pc, #168]	; (800602c <xTaskResumeAll+0x120>)
 8005f84:	6013      	str	r3, [r2, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4a27      	ldr	r2, [pc, #156]	; (8006030 <xTaskResumeAll+0x124>)
 8005f94:	441a      	add	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	3304      	adds	r3, #4
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	f7ff f822 	bl	8004fe6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa6:	4b23      	ldr	r3, [pc, #140]	; (8006034 <xTaskResumeAll+0x128>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d302      	bcc.n	8005fb6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005fb0:	4b21      	ldr	r3, [pc, #132]	; (8006038 <xTaskResumeAll+0x12c>)
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fb6:	4b1c      	ldr	r3, [pc, #112]	; (8006028 <xTaskResumeAll+0x11c>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1cb      	bne.n	8005f56 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005fc4:	f000 fb4a 	bl	800665c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005fc8:	4b1c      	ldr	r3, [pc, #112]	; (800603c <xTaskResumeAll+0x130>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d010      	beq.n	8005ff6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005fd4:	f000 f844 	bl	8006060 <xTaskIncrementTick>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d002      	beq.n	8005fe4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005fde:	4b16      	ldr	r3, [pc, #88]	; (8006038 <xTaskResumeAll+0x12c>)
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1f1      	bne.n	8005fd4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005ff0:	4b12      	ldr	r3, [pc, #72]	; (800603c <xTaskResumeAll+0x130>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ff6:	4b10      	ldr	r3, [pc, #64]	; (8006038 <xTaskResumeAll+0x12c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d009      	beq.n	8006012 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ffe:	2301      	movs	r3, #1
 8006000:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006002:	4b0f      	ldr	r3, [pc, #60]	; (8006040 <xTaskResumeAll+0x134>)
 8006004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006012:	f001 f847 	bl	80070a4 <vPortExitCritical>

	return xAlreadyYielded;
 8006016:	68bb      	ldr	r3, [r7, #8]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	20000c38 	.word	0x20000c38
 8006024:	20000c10 	.word	0x20000c10
 8006028:	20000bd0 	.word	0x20000bd0
 800602c:	20000c18 	.word	0x20000c18
 8006030:	20000740 	.word	0x20000740
 8006034:	2000073c 	.word	0x2000073c
 8006038:	20000c24 	.word	0x20000c24
 800603c:	20000c20 	.word	0x20000c20
 8006040:	e000ed04 	.word	0xe000ed04

08006044 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800604a:	4b04      	ldr	r3, [pc, #16]	; (800605c <xTaskGetTickCount+0x18>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006050:	687b      	ldr	r3, [r7, #4]
}
 8006052:	4618      	mov	r0, r3
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	bc80      	pop	{r7}
 800605a:	4770      	bx	lr
 800605c:	20000c14 	.word	0x20000c14

08006060 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006066:	2300      	movs	r3, #0
 8006068:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800606a:	4b51      	ldr	r3, [pc, #324]	; (80061b0 <xTaskIncrementTick+0x150>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	f040 808d 	bne.w	800618e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006074:	4b4f      	ldr	r3, [pc, #316]	; (80061b4 <xTaskIncrementTick+0x154>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3301      	adds	r3, #1
 800607a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800607c:	4a4d      	ldr	r2, [pc, #308]	; (80061b4 <xTaskIncrementTick+0x154>)
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d11f      	bne.n	80060c8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006088:	4b4b      	ldr	r3, [pc, #300]	; (80061b8 <xTaskIncrementTick+0x158>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d009      	beq.n	80060a6 <xTaskIncrementTick+0x46>
 8006092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	603b      	str	r3, [r7, #0]
 80060a4:	e7fe      	b.n	80060a4 <xTaskIncrementTick+0x44>
 80060a6:	4b44      	ldr	r3, [pc, #272]	; (80061b8 <xTaskIncrementTick+0x158>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	4b43      	ldr	r3, [pc, #268]	; (80061bc <xTaskIncrementTick+0x15c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a41      	ldr	r2, [pc, #260]	; (80061b8 <xTaskIncrementTick+0x158>)
 80060b2:	6013      	str	r3, [r2, #0]
 80060b4:	4a41      	ldr	r2, [pc, #260]	; (80061bc <xTaskIncrementTick+0x15c>)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6013      	str	r3, [r2, #0]
 80060ba:	4b41      	ldr	r3, [pc, #260]	; (80061c0 <xTaskIncrementTick+0x160>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3301      	adds	r3, #1
 80060c0:	4a3f      	ldr	r2, [pc, #252]	; (80061c0 <xTaskIncrementTick+0x160>)
 80060c2:	6013      	str	r3, [r2, #0]
 80060c4:	f000 faca 	bl	800665c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060c8:	4b3e      	ldr	r3, [pc, #248]	; (80061c4 <xTaskIncrementTick+0x164>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d34e      	bcc.n	8006170 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060d2:	4b39      	ldr	r3, [pc, #228]	; (80061b8 <xTaskIncrementTick+0x158>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <xTaskIncrementTick+0x80>
 80060dc:	2301      	movs	r3, #1
 80060de:	e000      	b.n	80060e2 <xTaskIncrementTick+0x82>
 80060e0:	2300      	movs	r3, #0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d004      	beq.n	80060f0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060e6:	4b37      	ldr	r3, [pc, #220]	; (80061c4 <xTaskIncrementTick+0x164>)
 80060e8:	f04f 32ff 	mov.w	r2, #4294967295
 80060ec:	601a      	str	r2, [r3, #0]
					break;
 80060ee:	e03f      	b.n	8006170 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80060f0:	4b31      	ldr	r3, [pc, #196]	; (80061b8 <xTaskIncrementTick+0x158>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	429a      	cmp	r2, r3
 8006106:	d203      	bcs.n	8006110 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006108:	4a2e      	ldr	r2, [pc, #184]	; (80061c4 <xTaskIncrementTick+0x164>)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6013      	str	r3, [r2, #0]
						break;
 800610e:	e02f      	b.n	8006170 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	3304      	adds	r3, #4
 8006114:	4618      	mov	r0, r3
 8006116:	f7fe ffc1 	bl	800509c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611e:	2b00      	cmp	r3, #0
 8006120:	d004      	beq.n	800612c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	3318      	adds	r3, #24
 8006126:	4618      	mov	r0, r3
 8006128:	f7fe ffb8 	bl	800509c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006130:	4b25      	ldr	r3, [pc, #148]	; (80061c8 <xTaskIncrementTick+0x168>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	429a      	cmp	r2, r3
 8006136:	d903      	bls.n	8006140 <xTaskIncrementTick+0xe0>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	4a22      	ldr	r2, [pc, #136]	; (80061c8 <xTaskIncrementTick+0x168>)
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4a1f      	ldr	r2, [pc, #124]	; (80061cc <xTaskIncrementTick+0x16c>)
 800614e:	441a      	add	r2, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	3304      	adds	r3, #4
 8006154:	4619      	mov	r1, r3
 8006156:	4610      	mov	r0, r2
 8006158:	f7fe ff45 	bl	8004fe6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006160:	4b1b      	ldr	r3, [pc, #108]	; (80061d0 <xTaskIncrementTick+0x170>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006166:	429a      	cmp	r2, r3
 8006168:	d3b3      	bcc.n	80060d2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800616a:	2301      	movs	r3, #1
 800616c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800616e:	e7b0      	b.n	80060d2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006170:	4b17      	ldr	r3, [pc, #92]	; (80061d0 <xTaskIncrementTick+0x170>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006176:	4915      	ldr	r1, [pc, #84]	; (80061cc <xTaskIncrementTick+0x16c>)
 8006178:	4613      	mov	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	440b      	add	r3, r1
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d907      	bls.n	8006198 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006188:	2301      	movs	r3, #1
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	e004      	b.n	8006198 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800618e:	4b11      	ldr	r3, [pc, #68]	; (80061d4 <xTaskIncrementTick+0x174>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3301      	adds	r3, #1
 8006194:	4a0f      	ldr	r2, [pc, #60]	; (80061d4 <xTaskIncrementTick+0x174>)
 8006196:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006198:	4b0f      	ldr	r3, [pc, #60]	; (80061d8 <xTaskIncrementTick+0x178>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d001      	beq.n	80061a4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80061a0:	2301      	movs	r3, #1
 80061a2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80061a4:	697b      	ldr	r3, [r7, #20]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	20000c38 	.word	0x20000c38
 80061b4:	20000c14 	.word	0x20000c14
 80061b8:	20000bc8 	.word	0x20000bc8
 80061bc:	20000bcc 	.word	0x20000bcc
 80061c0:	20000c28 	.word	0x20000c28
 80061c4:	20000c30 	.word	0x20000c30
 80061c8:	20000c18 	.word	0x20000c18
 80061cc:	20000740 	.word	0x20000740
 80061d0:	2000073c 	.word	0x2000073c
 80061d4:	20000c20 	.word	0x20000c20
 80061d8:	20000c24 	.word	0x20000c24

080061dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061e2:	4b27      	ldr	r3, [pc, #156]	; (8006280 <vTaskSwitchContext+0xa4>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061ea:	4b26      	ldr	r3, [pc, #152]	; (8006284 <vTaskSwitchContext+0xa8>)
 80061ec:	2201      	movs	r2, #1
 80061ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061f0:	e040      	b.n	8006274 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80061f2:	4b24      	ldr	r3, [pc, #144]	; (8006284 <vTaskSwitchContext+0xa8>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80061f8:	4b23      	ldr	r3, [pc, #140]	; (8006288 <vTaskSwitchContext+0xac>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	60fb      	str	r3, [r7, #12]
 80061fe:	e00f      	b.n	8006220 <vTaskSwitchContext+0x44>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d109      	bne.n	800621a <vTaskSwitchContext+0x3e>
 8006206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	607b      	str	r3, [r7, #4]
 8006218:	e7fe      	b.n	8006218 <vTaskSwitchContext+0x3c>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	3b01      	subs	r3, #1
 800621e:	60fb      	str	r3, [r7, #12]
 8006220:	491a      	ldr	r1, [pc, #104]	; (800628c <vTaskSwitchContext+0xb0>)
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	4613      	mov	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	440b      	add	r3, r1
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d0e5      	beq.n	8006200 <vTaskSwitchContext+0x24>
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	4613      	mov	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4a13      	ldr	r2, [pc, #76]	; (800628c <vTaskSwitchContext+0xb0>)
 8006240:	4413      	add	r3, r2
 8006242:	60bb      	str	r3, [r7, #8]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	605a      	str	r2, [r3, #4]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	3308      	adds	r3, #8
 8006256:	429a      	cmp	r2, r3
 8006258:	d104      	bne.n	8006264 <vTaskSwitchContext+0x88>
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	605a      	str	r2, [r3, #4]
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	4a09      	ldr	r2, [pc, #36]	; (8006290 <vTaskSwitchContext+0xb4>)
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	4a06      	ldr	r2, [pc, #24]	; (8006288 <vTaskSwitchContext+0xac>)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6013      	str	r3, [r2, #0]
}
 8006274:	bf00      	nop
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	bc80      	pop	{r7}
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	20000c38 	.word	0x20000c38
 8006284:	20000c24 	.word	0x20000c24
 8006288:	20000c18 	.word	0x20000c18
 800628c:	20000740 	.word	0x20000740
 8006290:	2000073c 	.word	0x2000073c

08006294 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d109      	bne.n	80062b8 <vTaskPlaceOnEventList+0x24>
 80062a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a8:	f383 8811 	msr	BASEPRI, r3
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	e7fe      	b.n	80062b6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062b8:	4b07      	ldr	r3, [pc, #28]	; (80062d8 <vTaskPlaceOnEventList+0x44>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3318      	adds	r3, #24
 80062be:	4619      	mov	r1, r3
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7fe feb3 	bl	800502c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062c6:	2101      	movs	r1, #1
 80062c8:	6838      	ldr	r0, [r7, #0]
 80062ca:	f000 fa75 	bl	80067b8 <prvAddCurrentTaskToDelayedList>
}
 80062ce:	bf00      	nop
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	2000073c 	.word	0x2000073c

080062dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d109      	bne.n	8006302 <vTaskPlaceOnEventListRestricted+0x26>
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	617b      	str	r3, [r7, #20]
 8006300:	e7fe      	b.n	8006300 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006302:	4b0a      	ldr	r3, [pc, #40]	; (800632c <vTaskPlaceOnEventListRestricted+0x50>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3318      	adds	r3, #24
 8006308:	4619      	mov	r1, r3
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f7fe fe6b 	bl	8004fe6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d002      	beq.n	800631c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006316:	f04f 33ff 	mov.w	r3, #4294967295
 800631a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800631c:	6879      	ldr	r1, [r7, #4]
 800631e:	68b8      	ldr	r0, [r7, #8]
 8006320:	f000 fa4a 	bl	80067b8 <prvAddCurrentTaskToDelayedList>
	}
 8006324:	bf00      	nop
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	2000073c 	.word	0x2000073c

08006330 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d109      	bne.n	800635a <xTaskRemoveFromEventList+0x2a>
 8006346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	e7fe      	b.n	8006358 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	3318      	adds	r3, #24
 800635e:	4618      	mov	r0, r3
 8006360:	f7fe fe9c 	bl	800509c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006364:	4b1d      	ldr	r3, [pc, #116]	; (80063dc <xTaskRemoveFromEventList+0xac>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d11d      	bne.n	80063a8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	3304      	adds	r3, #4
 8006370:	4618      	mov	r0, r3
 8006372:	f7fe fe93 	bl	800509c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800637a:	4b19      	ldr	r3, [pc, #100]	; (80063e0 <xTaskRemoveFromEventList+0xb0>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	429a      	cmp	r2, r3
 8006380:	d903      	bls.n	800638a <xTaskRemoveFromEventList+0x5a>
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006386:	4a16      	ldr	r2, [pc, #88]	; (80063e0 <xTaskRemoveFromEventList+0xb0>)
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638e:	4613      	mov	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4a13      	ldr	r2, [pc, #76]	; (80063e4 <xTaskRemoveFromEventList+0xb4>)
 8006398:	441a      	add	r2, r3
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	3304      	adds	r3, #4
 800639e:	4619      	mov	r1, r3
 80063a0:	4610      	mov	r0, r2
 80063a2:	f7fe fe20 	bl	8004fe6 <vListInsertEnd>
 80063a6:	e005      	b.n	80063b4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	3318      	adds	r3, #24
 80063ac:	4619      	mov	r1, r3
 80063ae:	480e      	ldr	r0, [pc, #56]	; (80063e8 <xTaskRemoveFromEventList+0xb8>)
 80063b0:	f7fe fe19 	bl	8004fe6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b8:	4b0c      	ldr	r3, [pc, #48]	; (80063ec <xTaskRemoveFromEventList+0xbc>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063be:	429a      	cmp	r2, r3
 80063c0:	d905      	bls.n	80063ce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063c2:	2301      	movs	r3, #1
 80063c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063c6:	4b0a      	ldr	r3, [pc, #40]	; (80063f0 <xTaskRemoveFromEventList+0xc0>)
 80063c8:	2201      	movs	r2, #1
 80063ca:	601a      	str	r2, [r3, #0]
 80063cc:	e001      	b.n	80063d2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80063ce:	2300      	movs	r3, #0
 80063d0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80063d2:	697b      	ldr	r3, [r7, #20]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3718      	adds	r7, #24
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	20000c38 	.word	0x20000c38
 80063e0:	20000c18 	.word	0x20000c18
 80063e4:	20000740 	.word	0x20000740
 80063e8:	20000bd0 	.word	0x20000bd0
 80063ec:	2000073c 	.word	0x2000073c
 80063f0:	20000c24 	.word	0x20000c24

080063f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80063fc:	4b06      	ldr	r3, [pc, #24]	; (8006418 <vTaskInternalSetTimeOutState+0x24>)
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006404:	4b05      	ldr	r3, [pc, #20]	; (800641c <vTaskInternalSetTimeOutState+0x28>)
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	605a      	str	r2, [r3, #4]
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	bc80      	pop	{r7}
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	20000c28 	.word	0x20000c28
 800641c:	20000c14 	.word	0x20000c14

08006420 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b088      	sub	sp, #32
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d109      	bne.n	8006444 <xTaskCheckForTimeOut+0x24>
 8006430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006434:	f383 8811 	msr	BASEPRI, r3
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	613b      	str	r3, [r7, #16]
 8006442:	e7fe      	b.n	8006442 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d109      	bne.n	800645e <xTaskCheckForTimeOut+0x3e>
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	60fb      	str	r3, [r7, #12]
 800645c:	e7fe      	b.n	800645c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800645e:	f000 fdf3 	bl	8007048 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006462:	4b1d      	ldr	r3, [pc, #116]	; (80064d8 <xTaskCheckForTimeOut+0xb8>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647a:	d102      	bne.n	8006482 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800647c:	2300      	movs	r3, #0
 800647e:	61fb      	str	r3, [r7, #28]
 8006480:	e023      	b.n	80064ca <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	4b15      	ldr	r3, [pc, #84]	; (80064dc <xTaskCheckForTimeOut+0xbc>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	429a      	cmp	r2, r3
 800648c:	d007      	beq.n	800649e <xTaskCheckForTimeOut+0x7e>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	429a      	cmp	r2, r3
 8006496:	d302      	bcc.n	800649e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006498:	2301      	movs	r3, #1
 800649a:	61fb      	str	r3, [r7, #28]
 800649c:	e015      	b.n	80064ca <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d20b      	bcs.n	80064c0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	1ad2      	subs	r2, r2, r3
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff ff9d 	bl	80063f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064ba:	2300      	movs	r3, #0
 80064bc:	61fb      	str	r3, [r7, #28]
 80064be:	e004      	b.n	80064ca <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80064c6:	2301      	movs	r3, #1
 80064c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80064ca:	f000 fdeb 	bl	80070a4 <vPortExitCritical>

	return xReturn;
 80064ce:	69fb      	ldr	r3, [r7, #28]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3720      	adds	r7, #32
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	20000c14 	.word	0x20000c14
 80064dc:	20000c28 	.word	0x20000c28

080064e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80064e0:	b480      	push	{r7}
 80064e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80064e4:	4b03      	ldr	r3, [pc, #12]	; (80064f4 <vTaskMissedYield+0x14>)
 80064e6:	2201      	movs	r2, #1
 80064e8:	601a      	str	r2, [r3, #0]
}
 80064ea:	bf00      	nop
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bc80      	pop	{r7}
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	20000c24 	.word	0x20000c24

080064f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006500:	f000 f852 	bl	80065a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006504:	4b06      	ldr	r3, [pc, #24]	; (8006520 <prvIdleTask+0x28>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d9f9      	bls.n	8006500 <prvIdleTask+0x8>
			{
				taskYIELD();
 800650c:	4b05      	ldr	r3, [pc, #20]	; (8006524 <prvIdleTask+0x2c>)
 800650e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800651c:	e7f0      	b.n	8006500 <prvIdleTask+0x8>
 800651e:	bf00      	nop
 8006520:	20000740 	.word	0x20000740
 8006524:	e000ed04 	.word	0xe000ed04

08006528 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800652e:	2300      	movs	r3, #0
 8006530:	607b      	str	r3, [r7, #4]
 8006532:	e00c      	b.n	800654e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	4613      	mov	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4a12      	ldr	r2, [pc, #72]	; (8006588 <prvInitialiseTaskLists+0x60>)
 8006540:	4413      	add	r3, r2
 8006542:	4618      	mov	r0, r3
 8006544:	f7fe fd24 	bl	8004f90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	3301      	adds	r3, #1
 800654c:	607b      	str	r3, [r7, #4]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b37      	cmp	r3, #55	; 0x37
 8006552:	d9ef      	bls.n	8006534 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006554:	480d      	ldr	r0, [pc, #52]	; (800658c <prvInitialiseTaskLists+0x64>)
 8006556:	f7fe fd1b 	bl	8004f90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800655a:	480d      	ldr	r0, [pc, #52]	; (8006590 <prvInitialiseTaskLists+0x68>)
 800655c:	f7fe fd18 	bl	8004f90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006560:	480c      	ldr	r0, [pc, #48]	; (8006594 <prvInitialiseTaskLists+0x6c>)
 8006562:	f7fe fd15 	bl	8004f90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006566:	480c      	ldr	r0, [pc, #48]	; (8006598 <prvInitialiseTaskLists+0x70>)
 8006568:	f7fe fd12 	bl	8004f90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800656c:	480b      	ldr	r0, [pc, #44]	; (800659c <prvInitialiseTaskLists+0x74>)
 800656e:	f7fe fd0f 	bl	8004f90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006572:	4b0b      	ldr	r3, [pc, #44]	; (80065a0 <prvInitialiseTaskLists+0x78>)
 8006574:	4a05      	ldr	r2, [pc, #20]	; (800658c <prvInitialiseTaskLists+0x64>)
 8006576:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006578:	4b0a      	ldr	r3, [pc, #40]	; (80065a4 <prvInitialiseTaskLists+0x7c>)
 800657a:	4a05      	ldr	r2, [pc, #20]	; (8006590 <prvInitialiseTaskLists+0x68>)
 800657c:	601a      	str	r2, [r3, #0]
}
 800657e:	bf00      	nop
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	20000740 	.word	0x20000740
 800658c:	20000ba0 	.word	0x20000ba0
 8006590:	20000bb4 	.word	0x20000bb4
 8006594:	20000bd0 	.word	0x20000bd0
 8006598:	20000be4 	.word	0x20000be4
 800659c:	20000bfc 	.word	0x20000bfc
 80065a0:	20000bc8 	.word	0x20000bc8
 80065a4:	20000bcc 	.word	0x20000bcc

080065a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065ae:	e019      	b.n	80065e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80065b0:	f000 fd4a 	bl	8007048 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80065b4:	4b0f      	ldr	r3, [pc, #60]	; (80065f4 <prvCheckTasksWaitingTermination+0x4c>)
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3304      	adds	r3, #4
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7fe fd6b 	bl	800509c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065c6:	4b0c      	ldr	r3, [pc, #48]	; (80065f8 <prvCheckTasksWaitingTermination+0x50>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3b01      	subs	r3, #1
 80065cc:	4a0a      	ldr	r2, [pc, #40]	; (80065f8 <prvCheckTasksWaitingTermination+0x50>)
 80065ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065d0:	4b0a      	ldr	r3, [pc, #40]	; (80065fc <prvCheckTasksWaitingTermination+0x54>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3b01      	subs	r3, #1
 80065d6:	4a09      	ldr	r2, [pc, #36]	; (80065fc <prvCheckTasksWaitingTermination+0x54>)
 80065d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80065da:	f000 fd63 	bl	80070a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f80e 	bl	8006600 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065e4:	4b05      	ldr	r3, [pc, #20]	; (80065fc <prvCheckTasksWaitingTermination+0x54>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1e1      	bne.n	80065b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80065ec:	bf00      	nop
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	20000be4 	.word	0x20000be4
 80065f8:	20000c10 	.word	0x20000c10
 80065fc:	20000bf8 	.word	0x20000bf8

08006600 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800660e:	2b00      	cmp	r3, #0
 8006610:	d108      	bne.n	8006624 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006616:	4618      	mov	r0, r3
 8006618:	f000 fece 	bl	80073b8 <vPortFree>
				vPortFree( pxTCB );
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fecb 	bl	80073b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006622:	e017      	b.n	8006654 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800662a:	2b01      	cmp	r3, #1
 800662c:	d103      	bne.n	8006636 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fec2 	bl	80073b8 <vPortFree>
	}
 8006634:	e00e      	b.n	8006654 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800663c:	2b02      	cmp	r3, #2
 800663e:	d009      	beq.n	8006654 <prvDeleteTCB+0x54>
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	e7fe      	b.n	8006652 <prvDeleteTCB+0x52>
	}
 8006654:	bf00      	nop
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006662:	4b0e      	ldr	r3, [pc, #56]	; (800669c <prvResetNextTaskUnblockTime+0x40>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <prvResetNextTaskUnblockTime+0x14>
 800666c:	2301      	movs	r3, #1
 800666e:	e000      	b.n	8006672 <prvResetNextTaskUnblockTime+0x16>
 8006670:	2300      	movs	r3, #0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d004      	beq.n	8006680 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006676:	4b0a      	ldr	r3, [pc, #40]	; (80066a0 <prvResetNextTaskUnblockTime+0x44>)
 8006678:	f04f 32ff 	mov.w	r2, #4294967295
 800667c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800667e:	e008      	b.n	8006692 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006680:	4b06      	ldr	r3, [pc, #24]	; (800669c <prvResetNextTaskUnblockTime+0x40>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	4a04      	ldr	r2, [pc, #16]	; (80066a0 <prvResetNextTaskUnblockTime+0x44>)
 8006690:	6013      	str	r3, [r2, #0]
}
 8006692:	bf00      	nop
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	bc80      	pop	{r7}
 800669a:	4770      	bx	lr
 800669c:	20000bc8 	.word	0x20000bc8
 80066a0:	20000c30 	.word	0x20000c30

080066a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066aa:	4b0b      	ldr	r3, [pc, #44]	; (80066d8 <xTaskGetSchedulerState+0x34>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d102      	bne.n	80066b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066b2:	2301      	movs	r3, #1
 80066b4:	607b      	str	r3, [r7, #4]
 80066b6:	e008      	b.n	80066ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066b8:	4b08      	ldr	r3, [pc, #32]	; (80066dc <xTaskGetSchedulerState+0x38>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d102      	bne.n	80066c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80066c0:	2302      	movs	r3, #2
 80066c2:	607b      	str	r3, [r7, #4]
 80066c4:	e001      	b.n	80066ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80066c6:	2300      	movs	r3, #0
 80066c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80066ca:	687b      	ldr	r3, [r7, #4]
	}
 80066cc:	4618      	mov	r0, r3
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bc80      	pop	{r7}
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	20000c1c 	.word	0x20000c1c
 80066dc:	20000c38 	.word	0x20000c38

080066e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80066ec:	2300      	movs	r3, #0
 80066ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d054      	beq.n	80067a0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80066f6:	4b2d      	ldr	r3, [pc, #180]	; (80067ac <xTaskPriorityDisinherit+0xcc>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d009      	beq.n	8006714 <xTaskPriorityDisinherit+0x34>
 8006700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	e7fe      	b.n	8006712 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006718:	2b00      	cmp	r3, #0
 800671a:	d109      	bne.n	8006730 <xTaskPriorityDisinherit+0x50>
 800671c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006720:	f383 8811 	msr	BASEPRI, r3
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	60bb      	str	r3, [r7, #8]
 800672e:	e7fe      	b.n	800672e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006734:	1e5a      	subs	r2, r3, #1
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006742:	429a      	cmp	r2, r3
 8006744:	d02c      	beq.n	80067a0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800674a:	2b00      	cmp	r3, #0
 800674c:	d128      	bne.n	80067a0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	3304      	adds	r3, #4
 8006752:	4618      	mov	r0, r3
 8006754:	f7fe fca2 	bl	800509c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006764:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006770:	4b0f      	ldr	r3, [pc, #60]	; (80067b0 <xTaskPriorityDisinherit+0xd0>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	429a      	cmp	r2, r3
 8006776:	d903      	bls.n	8006780 <xTaskPriorityDisinherit+0xa0>
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677c:	4a0c      	ldr	r2, [pc, #48]	; (80067b0 <xTaskPriorityDisinherit+0xd0>)
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006784:	4613      	mov	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4a09      	ldr	r2, [pc, #36]	; (80067b4 <xTaskPriorityDisinherit+0xd4>)
 800678e:	441a      	add	r2, r3
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	3304      	adds	r3, #4
 8006794:	4619      	mov	r1, r3
 8006796:	4610      	mov	r0, r2
 8006798:	f7fe fc25 	bl	8004fe6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800679c:	2301      	movs	r3, #1
 800679e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067a0:	697b      	ldr	r3, [r7, #20]
	}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3718      	adds	r7, #24
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	2000073c 	.word	0x2000073c
 80067b0:	20000c18 	.word	0x20000c18
 80067b4:	20000740 	.word	0x20000740

080067b8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067c2:	4b21      	ldr	r3, [pc, #132]	; (8006848 <prvAddCurrentTaskToDelayedList+0x90>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067c8:	4b20      	ldr	r3, [pc, #128]	; (800684c <prvAddCurrentTaskToDelayedList+0x94>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	3304      	adds	r3, #4
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fe fc64 	bl	800509c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067da:	d10a      	bne.n	80067f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d007      	beq.n	80067f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067e2:	4b1a      	ldr	r3, [pc, #104]	; (800684c <prvAddCurrentTaskToDelayedList+0x94>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	3304      	adds	r3, #4
 80067e8:	4619      	mov	r1, r3
 80067ea:	4819      	ldr	r0, [pc, #100]	; (8006850 <prvAddCurrentTaskToDelayedList+0x98>)
 80067ec:	f7fe fbfb 	bl	8004fe6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80067f0:	e026      	b.n	8006840 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4413      	add	r3, r2
 80067f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067fa:	4b14      	ldr	r3, [pc, #80]	; (800684c <prvAddCurrentTaskToDelayedList+0x94>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	429a      	cmp	r2, r3
 8006808:	d209      	bcs.n	800681e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800680a:	4b12      	ldr	r3, [pc, #72]	; (8006854 <prvAddCurrentTaskToDelayedList+0x9c>)
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	4b0f      	ldr	r3, [pc, #60]	; (800684c <prvAddCurrentTaskToDelayedList+0x94>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3304      	adds	r3, #4
 8006814:	4619      	mov	r1, r3
 8006816:	4610      	mov	r0, r2
 8006818:	f7fe fc08 	bl	800502c <vListInsert>
}
 800681c:	e010      	b.n	8006840 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800681e:	4b0e      	ldr	r3, [pc, #56]	; (8006858 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	4b0a      	ldr	r3, [pc, #40]	; (800684c <prvAddCurrentTaskToDelayedList+0x94>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3304      	adds	r3, #4
 8006828:	4619      	mov	r1, r3
 800682a:	4610      	mov	r0, r2
 800682c:	f7fe fbfe 	bl	800502c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006830:	4b0a      	ldr	r3, [pc, #40]	; (800685c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	429a      	cmp	r2, r3
 8006838:	d202      	bcs.n	8006840 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800683a:	4a08      	ldr	r2, [pc, #32]	; (800685c <prvAddCurrentTaskToDelayedList+0xa4>)
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	6013      	str	r3, [r2, #0]
}
 8006840:	bf00      	nop
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	20000c14 	.word	0x20000c14
 800684c:	2000073c 	.word	0x2000073c
 8006850:	20000bfc 	.word	0x20000bfc
 8006854:	20000bcc 	.word	0x20000bcc
 8006858:	20000bc8 	.word	0x20000bc8
 800685c:	20000c30 	.word	0x20000c30

08006860 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b08a      	sub	sp, #40	; 0x28
 8006864:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006866:	2300      	movs	r3, #0
 8006868:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800686a:	f000 fac3 	bl	8006df4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800686e:	4b1c      	ldr	r3, [pc, #112]	; (80068e0 <xTimerCreateTimerTask+0x80>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d021      	beq.n	80068ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006876:	2300      	movs	r3, #0
 8006878:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800687a:	2300      	movs	r3, #0
 800687c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800687e:	1d3a      	adds	r2, r7, #4
 8006880:	f107 0108 	add.w	r1, r7, #8
 8006884:	f107 030c 	add.w	r3, r7, #12
 8006888:	4618      	mov	r0, r3
 800688a:	f7fe fb67 	bl	8004f5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800688e:	6879      	ldr	r1, [r7, #4]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	9202      	str	r2, [sp, #8]
 8006896:	9301      	str	r3, [sp, #4]
 8006898:	2302      	movs	r3, #2
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	2300      	movs	r3, #0
 800689e:	460a      	mov	r2, r1
 80068a0:	4910      	ldr	r1, [pc, #64]	; (80068e4 <xTimerCreateTimerTask+0x84>)
 80068a2:	4811      	ldr	r0, [pc, #68]	; (80068e8 <xTimerCreateTimerTask+0x88>)
 80068a4:	f7ff f8f8 	bl	8005a98 <xTaskCreateStatic>
 80068a8:	4602      	mov	r2, r0
 80068aa:	4b10      	ldr	r3, [pc, #64]	; (80068ec <xTimerCreateTimerTask+0x8c>)
 80068ac:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80068ae:	4b0f      	ldr	r3, [pc, #60]	; (80068ec <xTimerCreateTimerTask+0x8c>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80068b6:	2301      	movs	r3, #1
 80068b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d109      	bne.n	80068d4 <xTimerCreateTimerTask+0x74>
 80068c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	613b      	str	r3, [r7, #16]
 80068d2:	e7fe      	b.n	80068d2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80068d4:	697b      	ldr	r3, [r7, #20]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3718      	adds	r7, #24
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	20000c6c 	.word	0x20000c6c
 80068e4:	080076fc 	.word	0x080076fc
 80068e8:	08006a09 	.word	0x08006a09
 80068ec:	20000c70 	.word	0x20000c70

080068f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b08a      	sub	sp, #40	; 0x28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
 80068fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80068fe:	2300      	movs	r3, #0
 8006900:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d109      	bne.n	800691c <xTimerGenericCommand+0x2c>
 8006908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690c:	f383 8811 	msr	BASEPRI, r3
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	623b      	str	r3, [r7, #32]
 800691a:	e7fe      	b.n	800691a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800691c:	4b19      	ldr	r3, [pc, #100]	; (8006984 <xTimerGenericCommand+0x94>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d02a      	beq.n	800697a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2b05      	cmp	r3, #5
 8006934:	dc18      	bgt.n	8006968 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006936:	f7ff feb5 	bl	80066a4 <xTaskGetSchedulerState>
 800693a:	4603      	mov	r3, r0
 800693c:	2b02      	cmp	r3, #2
 800693e:	d109      	bne.n	8006954 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006940:	4b10      	ldr	r3, [pc, #64]	; (8006984 <xTimerGenericCommand+0x94>)
 8006942:	6818      	ldr	r0, [r3, #0]
 8006944:	f107 0110 	add.w	r1, r7, #16
 8006948:	2300      	movs	r3, #0
 800694a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800694c:	f7fe fcce 	bl	80052ec <xQueueGenericSend>
 8006950:	6278      	str	r0, [r7, #36]	; 0x24
 8006952:	e012      	b.n	800697a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006954:	4b0b      	ldr	r3, [pc, #44]	; (8006984 <xTimerGenericCommand+0x94>)
 8006956:	6818      	ldr	r0, [r3, #0]
 8006958:	f107 0110 	add.w	r1, r7, #16
 800695c:	2300      	movs	r3, #0
 800695e:	2200      	movs	r2, #0
 8006960:	f7fe fcc4 	bl	80052ec <xQueueGenericSend>
 8006964:	6278      	str	r0, [r7, #36]	; 0x24
 8006966:	e008      	b.n	800697a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006968:	4b06      	ldr	r3, [pc, #24]	; (8006984 <xTimerGenericCommand+0x94>)
 800696a:	6818      	ldr	r0, [r3, #0]
 800696c:	f107 0110 	add.w	r1, r7, #16
 8006970:	2300      	movs	r3, #0
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	f7fe fdb4 	bl	80054e0 <xQueueGenericSendFromISR>
 8006978:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800697c:	4618      	mov	r0, r3
 800697e:	3728      	adds	r7, #40	; 0x28
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	20000c6c 	.word	0x20000c6c

08006988 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b088      	sub	sp, #32
 800698c:	af02      	add	r7, sp, #8
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006992:	4b1c      	ldr	r3, [pc, #112]	; (8006a04 <prvProcessExpiredTimer+0x7c>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	3304      	adds	r3, #4
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7fe fb7b 	bl	800509c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d121      	bne.n	80069f2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	699a      	ldr	r2, [r3, #24]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	18d1      	adds	r1, r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	6978      	ldr	r0, [r7, #20]
 80069bc:	f000 f8c8 	bl	8006b50 <prvInsertTimerInActiveList>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d015      	beq.n	80069f2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069c6:	2300      	movs	r3, #0
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	2300      	movs	r3, #0
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	2100      	movs	r1, #0
 80069d0:	6978      	ldr	r0, [r7, #20]
 80069d2:	f7ff ff8d 	bl	80068f0 <xTimerGenericCommand>
 80069d6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d109      	bne.n	80069f2 <prvProcessExpiredTimer+0x6a>
 80069de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	e7fe      	b.n	80069f0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f6:	6978      	ldr	r0, [r7, #20]
 80069f8:	4798      	blx	r3
}
 80069fa:	bf00      	nop
 80069fc:	3718      	adds	r7, #24
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	20000c64 	.word	0x20000c64

08006a08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a10:	f107 0308 	add.w	r3, r7, #8
 8006a14:	4618      	mov	r0, r3
 8006a16:	f000 f857 	bl	8006ac8 <prvGetNextExpireTime>
 8006a1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4619      	mov	r1, r3
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f000 f803 	bl	8006a2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a26:	f000 f8d5 	bl	8006bd4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a2a:	e7f1      	b.n	8006a10 <prvTimerTask+0x8>

08006a2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a36:	f7ff fa5b 	bl	8005ef0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a3a:	f107 0308 	add.w	r3, r7, #8
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 f866 	bl	8006b10 <prvSampleTimeNow>
 8006a44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d130      	bne.n	8006aae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10a      	bne.n	8006a68 <prvProcessTimerOrBlockTask+0x3c>
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d806      	bhi.n	8006a68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a5a:	f7ff fa57 	bl	8005f0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a5e:	68f9      	ldr	r1, [r7, #12]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f7ff ff91 	bl	8006988 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a66:	e024      	b.n	8006ab2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d008      	beq.n	8006a80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a6e:	4b13      	ldr	r3, [pc, #76]	; (8006abc <prvProcessTimerOrBlockTask+0x90>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	bf0c      	ite	eq
 8006a78:	2301      	moveq	r3, #1
 8006a7a:	2300      	movne	r3, #0
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a80:	4b0f      	ldr	r3, [pc, #60]	; (8006ac0 <prvProcessTimerOrBlockTask+0x94>)
 8006a82:	6818      	ldr	r0, [r3, #0]
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	f7fe ffcf 	bl	8005a30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a92:	f7ff fa3b 	bl	8005f0c <xTaskResumeAll>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a9c:	4b09      	ldr	r3, [pc, #36]	; (8006ac4 <prvProcessTimerOrBlockTask+0x98>)
 8006a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	f3bf 8f6f 	isb	sy
}
 8006aac:	e001      	b.n	8006ab2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006aae:	f7ff fa2d 	bl	8005f0c <xTaskResumeAll>
}
 8006ab2:	bf00      	nop
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20000c68 	.word	0x20000c68
 8006ac0:	20000c6c 	.word	0x20000c6c
 8006ac4:	e000ed04 	.word	0xe000ed04

08006ac8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ad0:	4b0e      	ldr	r3, [pc, #56]	; (8006b0c <prvGetNextExpireTime+0x44>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	bf0c      	ite	eq
 8006ada:	2301      	moveq	r3, #1
 8006adc:	2300      	movne	r3, #0
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d105      	bne.n	8006afa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006aee:	4b07      	ldr	r3, [pc, #28]	; (8006b0c <prvGetNextExpireTime+0x44>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	e001      	b.n	8006afe <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006afe:	68fb      	ldr	r3, [r7, #12]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bc80      	pop	{r7}
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	20000c64 	.word	0x20000c64

08006b10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b18:	f7ff fa94 	bl	8006044 <xTaskGetTickCount>
 8006b1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b1e:	4b0b      	ldr	r3, [pc, #44]	; (8006b4c <prvSampleTimeNow+0x3c>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d205      	bcs.n	8006b34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b28:	f000 f904 	bl	8006d34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	e002      	b.n	8006b3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b3a:	4a04      	ldr	r2, [pc, #16]	; (8006b4c <prvSampleTimeNow+0x3c>)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b40:	68fb      	ldr	r3, [r7, #12]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20000c74 	.word	0x20000c74

08006b50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
 8006b5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d812      	bhi.n	8006b9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	1ad2      	subs	r2, r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d302      	bcc.n	8006b8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b84:	2301      	movs	r3, #1
 8006b86:	617b      	str	r3, [r7, #20]
 8006b88:	e01b      	b.n	8006bc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b8a:	4b10      	ldr	r3, [pc, #64]	; (8006bcc <prvInsertTimerInActiveList+0x7c>)
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3304      	adds	r3, #4
 8006b92:	4619      	mov	r1, r3
 8006b94:	4610      	mov	r0, r2
 8006b96:	f7fe fa49 	bl	800502c <vListInsert>
 8006b9a:	e012      	b.n	8006bc2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d206      	bcs.n	8006bb2 <prvInsertTimerInActiveList+0x62>
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d302      	bcc.n	8006bb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006bac:	2301      	movs	r3, #1
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	e007      	b.n	8006bc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bb2:	4b07      	ldr	r3, [pc, #28]	; (8006bd0 <prvInsertTimerInActiveList+0x80>)
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3304      	adds	r3, #4
 8006bba:	4619      	mov	r1, r3
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	f7fe fa35 	bl	800502c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006bc2:	697b      	ldr	r3, [r7, #20]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3718      	adds	r7, #24
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	20000c68 	.word	0x20000c68
 8006bd0:	20000c64 	.word	0x20000c64

08006bd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b08e      	sub	sp, #56	; 0x38
 8006bd8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006bda:	e099      	b.n	8006d10 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	da17      	bge.n	8006c12 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006be2:	1d3b      	adds	r3, r7, #4
 8006be4:	3304      	adds	r3, #4
 8006be6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d109      	bne.n	8006c02 <prvProcessReceivedCommands+0x2e>
 8006bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	61fb      	str	r3, [r7, #28]
 8006c00:	e7fe      	b.n	8006c00 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c08:	6850      	ldr	r0, [r2, #4]
 8006c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c0c:	6892      	ldr	r2, [r2, #8]
 8006c0e:	4611      	mov	r1, r2
 8006c10:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	db7a      	blt.n	8006d0e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1e:	695b      	ldr	r3, [r3, #20]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d004      	beq.n	8006c2e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c26:	3304      	adds	r3, #4
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7fe fa37 	bl	800509c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c2e:	463b      	mov	r3, r7
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7ff ff6d 	bl	8006b10 <prvSampleTimeNow>
 8006c36:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b09      	cmp	r3, #9
 8006c3c:	d868      	bhi.n	8006d10 <prvProcessReceivedCommands+0x13c>
 8006c3e:	a201      	add	r2, pc, #4	; (adr r2, 8006c44 <prvProcessReceivedCommands+0x70>)
 8006c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c44:	08006c6d 	.word	0x08006c6d
 8006c48:	08006c6d 	.word	0x08006c6d
 8006c4c:	08006c6d 	.word	0x08006c6d
 8006c50:	08006d11 	.word	0x08006d11
 8006c54:	08006cc7 	.word	0x08006cc7
 8006c58:	08006cfd 	.word	0x08006cfd
 8006c5c:	08006c6d 	.word	0x08006c6d
 8006c60:	08006c6d 	.word	0x08006c6d
 8006c64:	08006d11 	.word	0x08006d11
 8006c68:	08006cc7 	.word	0x08006cc7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	18d1      	adds	r1, r2, r3
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c7a:	f7ff ff69 	bl	8006b50 <prvInsertTimerInActiveList>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d045      	beq.n	8006d10 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c8a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d13d      	bne.n	8006d10 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	441a      	add	r2, r3
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ca6:	f7ff fe23 	bl	80068f0 <xTimerGenericCommand>
 8006caa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d12e      	bne.n	8006d10 <prvProcessReceivedCommands+0x13c>
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	61bb      	str	r3, [r7, #24]
 8006cc4:	e7fe      	b.n	8006cc4 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d109      	bne.n	8006ce8 <prvProcessReceivedCommands+0x114>
 8006cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd8:	f383 8811 	msr	BASEPRI, r3
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	617b      	str	r3, [r7, #20]
 8006ce6:	e7fe      	b.n	8006ce6 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cea:	699a      	ldr	r2, [r3, #24]
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	18d1      	adds	r1, r2, r3
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cf6:	f7ff ff2b 	bl	8006b50 <prvInsertTimerInActiveList>
					break;
 8006cfa:	e009      	b.n	8006d10 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d104      	bne.n	8006d10 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8006d06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d08:	f000 fb56 	bl	80073b8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d0c:	e000      	b.n	8006d10 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006d0e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d10:	4b07      	ldr	r3, [pc, #28]	; (8006d30 <prvProcessReceivedCommands+0x15c>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	1d39      	adds	r1, r7, #4
 8006d16:	2200      	movs	r2, #0
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7fe fc75 	bl	8005608 <xQueueReceive>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f47f af5b 	bne.w	8006bdc <prvProcessReceivedCommands+0x8>
	}
}
 8006d26:	bf00      	nop
 8006d28:	3730      	adds	r7, #48	; 0x30
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20000c6c 	.word	0x20000c6c

08006d34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b088      	sub	sp, #32
 8006d38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d3a:	e044      	b.n	8006dc6 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d3c:	4b2b      	ldr	r3, [pc, #172]	; (8006dec <prvSwitchTimerLists+0xb8>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d46:	4b29      	ldr	r3, [pc, #164]	; (8006dec <prvSwitchTimerLists+0xb8>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	3304      	adds	r3, #4
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7fe f9a1 	bl	800509c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	69db      	ldr	r3, [r3, #28]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d12d      	bne.n	8006dc6 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	4413      	add	r3, r2
 8006d72:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d90e      	bls.n	8006d9a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d88:	4b18      	ldr	r3, [pc, #96]	; (8006dec <prvSwitchTimerLists+0xb8>)
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	3304      	adds	r3, #4
 8006d90:	4619      	mov	r1, r3
 8006d92:	4610      	mov	r0, r2
 8006d94:	f7fe f94a 	bl	800502c <vListInsert>
 8006d98:	e015      	b.n	8006dc6 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	2300      	movs	r3, #0
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	2100      	movs	r1, #0
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f7ff fda3 	bl	80068f0 <xTimerGenericCommand>
 8006daa:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d109      	bne.n	8006dc6 <prvSwitchTimerLists+0x92>
 8006db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db6:	f383 8811 	msr	BASEPRI, r3
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	603b      	str	r3, [r7, #0]
 8006dc4:	e7fe      	b.n	8006dc4 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dc6:	4b09      	ldr	r3, [pc, #36]	; (8006dec <prvSwitchTimerLists+0xb8>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1b5      	bne.n	8006d3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006dd0:	4b06      	ldr	r3, [pc, #24]	; (8006dec <prvSwitchTimerLists+0xb8>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006dd6:	4b06      	ldr	r3, [pc, #24]	; (8006df0 <prvSwitchTimerLists+0xbc>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a04      	ldr	r2, [pc, #16]	; (8006dec <prvSwitchTimerLists+0xb8>)
 8006ddc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006dde:	4a04      	ldr	r2, [pc, #16]	; (8006df0 <prvSwitchTimerLists+0xbc>)
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	6013      	str	r3, [r2, #0]
}
 8006de4:	bf00      	nop
 8006de6:	3718      	adds	r7, #24
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	20000c64 	.word	0x20000c64
 8006df0:	20000c68 	.word	0x20000c68

08006df4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006dfa:	f000 f925 	bl	8007048 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006dfe:	4b15      	ldr	r3, [pc, #84]	; (8006e54 <prvCheckForValidListAndQueue+0x60>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d120      	bne.n	8006e48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e06:	4814      	ldr	r0, [pc, #80]	; (8006e58 <prvCheckForValidListAndQueue+0x64>)
 8006e08:	f7fe f8c2 	bl	8004f90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e0c:	4813      	ldr	r0, [pc, #76]	; (8006e5c <prvCheckForValidListAndQueue+0x68>)
 8006e0e:	f7fe f8bf 	bl	8004f90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e12:	4b13      	ldr	r3, [pc, #76]	; (8006e60 <prvCheckForValidListAndQueue+0x6c>)
 8006e14:	4a10      	ldr	r2, [pc, #64]	; (8006e58 <prvCheckForValidListAndQueue+0x64>)
 8006e16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e18:	4b12      	ldr	r3, [pc, #72]	; (8006e64 <prvCheckForValidListAndQueue+0x70>)
 8006e1a:	4a10      	ldr	r2, [pc, #64]	; (8006e5c <prvCheckForValidListAndQueue+0x68>)
 8006e1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e1e:	2300      	movs	r3, #0
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	4b11      	ldr	r3, [pc, #68]	; (8006e68 <prvCheckForValidListAndQueue+0x74>)
 8006e24:	4a11      	ldr	r2, [pc, #68]	; (8006e6c <prvCheckForValidListAndQueue+0x78>)
 8006e26:	2110      	movs	r1, #16
 8006e28:	200a      	movs	r0, #10
 8006e2a:	f7fe f9c9 	bl	80051c0 <xQueueGenericCreateStatic>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	4b08      	ldr	r3, [pc, #32]	; (8006e54 <prvCheckForValidListAndQueue+0x60>)
 8006e32:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e34:	4b07      	ldr	r3, [pc, #28]	; (8006e54 <prvCheckForValidListAndQueue+0x60>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d005      	beq.n	8006e48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e3c:	4b05      	ldr	r3, [pc, #20]	; (8006e54 <prvCheckForValidListAndQueue+0x60>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	490b      	ldr	r1, [pc, #44]	; (8006e70 <prvCheckForValidListAndQueue+0x7c>)
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7fe fdcc 	bl	80059e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e48:	f000 f92c 	bl	80070a4 <vPortExitCritical>
}
 8006e4c:	bf00      	nop
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	20000c6c 	.word	0x20000c6c
 8006e58:	20000c3c 	.word	0x20000c3c
 8006e5c:	20000c50 	.word	0x20000c50
 8006e60:	20000c64 	.word	0x20000c64
 8006e64:	20000c68 	.word	0x20000c68
 8006e68:	20000d18 	.word	0x20000d18
 8006e6c:	20000c78 	.word	0x20000c78
 8006e70:	08007704 	.word	0x08007704

08006e74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	3b04      	subs	r3, #4
 8006e84:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3b04      	subs	r3, #4
 8006e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f023 0201 	bic.w	r2, r3, #1
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3b04      	subs	r3, #4
 8006ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ea4:	4a08      	ldr	r2, [pc, #32]	; (8006ec8 <pxPortInitialiseStack+0x54>)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	3b14      	subs	r3, #20
 8006eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	3b20      	subs	r3, #32
 8006eba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bc80      	pop	{r7}
 8006ec6:	4770      	bx	lr
 8006ec8:	08006ecd 	.word	0x08006ecd

08006ecc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ed6:	4b10      	ldr	r3, [pc, #64]	; (8006f18 <prvTaskExitError+0x4c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ede:	d009      	beq.n	8006ef4 <prvTaskExitError+0x28>
 8006ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	60fb      	str	r3, [r7, #12]
 8006ef2:	e7fe      	b.n	8006ef2 <prvTaskExitError+0x26>
 8006ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f06:	bf00      	nop
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d0fc      	beq.n	8006f08 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f0e:	bf00      	nop
 8006f10:	3714      	adds	r7, #20
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bc80      	pop	{r7}
 8006f16:	4770      	bx	lr
 8006f18:	20000060 	.word	0x20000060
 8006f1c:	00000000 	.word	0x00000000

08006f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f20:	4b07      	ldr	r3, [pc, #28]	; (8006f40 <pxCurrentTCBConst2>)
 8006f22:	6819      	ldr	r1, [r3, #0]
 8006f24:	6808      	ldr	r0, [r1, #0]
 8006f26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006f2a:	f380 8809 	msr	PSP, r0
 8006f2e:	f3bf 8f6f 	isb	sy
 8006f32:	f04f 0000 	mov.w	r0, #0
 8006f36:	f380 8811 	msr	BASEPRI, r0
 8006f3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006f3e:	4770      	bx	lr

08006f40 <pxCurrentTCBConst2>:
 8006f40:	2000073c 	.word	0x2000073c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f44:	bf00      	nop
 8006f46:	bf00      	nop

08006f48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006f48:	4806      	ldr	r0, [pc, #24]	; (8006f64 <prvPortStartFirstTask+0x1c>)
 8006f4a:	6800      	ldr	r0, [r0, #0]
 8006f4c:	6800      	ldr	r0, [r0, #0]
 8006f4e:	f380 8808 	msr	MSP, r0
 8006f52:	b662      	cpsie	i
 8006f54:	b661      	cpsie	f
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	df00      	svc	0
 8006f60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f62:	bf00      	nop
 8006f64:	e000ed08 	.word	0xe000ed08

08006f68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f6e:	4b31      	ldr	r3, [pc, #196]	; (8007034 <xPortStartScheduler+0xcc>)
 8006f70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	22ff      	movs	r2, #255	; 0xff
 8006f7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f88:	78fb      	ldrb	r3, [r7, #3]
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f90:	b2da      	uxtb	r2, r3
 8006f92:	4b29      	ldr	r3, [pc, #164]	; (8007038 <xPortStartScheduler+0xd0>)
 8006f94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f96:	4b29      	ldr	r3, [pc, #164]	; (800703c <xPortStartScheduler+0xd4>)
 8006f98:	2207      	movs	r2, #7
 8006f9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f9c:	e009      	b.n	8006fb2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006f9e:	4b27      	ldr	r3, [pc, #156]	; (800703c <xPortStartScheduler+0xd4>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	4a25      	ldr	r2, [pc, #148]	; (800703c <xPortStartScheduler+0xd4>)
 8006fa6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006fa8:	78fb      	ldrb	r3, [r7, #3]
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fb2:	78fb      	ldrb	r3, [r7, #3]
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fba:	2b80      	cmp	r3, #128	; 0x80
 8006fbc:	d0ef      	beq.n	8006f9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006fbe:	4b1f      	ldr	r3, [pc, #124]	; (800703c <xPortStartScheduler+0xd4>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f1c3 0307 	rsb	r3, r3, #7
 8006fc6:	2b04      	cmp	r3, #4
 8006fc8:	d009      	beq.n	8006fde <xPortStartScheduler+0x76>
 8006fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	60bb      	str	r3, [r7, #8]
 8006fdc:	e7fe      	b.n	8006fdc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006fde:	4b17      	ldr	r3, [pc, #92]	; (800703c <xPortStartScheduler+0xd4>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	021b      	lsls	r3, r3, #8
 8006fe4:	4a15      	ldr	r2, [pc, #84]	; (800703c <xPortStartScheduler+0xd4>)
 8006fe6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006fe8:	4b14      	ldr	r3, [pc, #80]	; (800703c <xPortStartScheduler+0xd4>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ff0:	4a12      	ldr	r2, [pc, #72]	; (800703c <xPortStartScheduler+0xd4>)
 8006ff2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ffc:	4b10      	ldr	r3, [pc, #64]	; (8007040 <xPortStartScheduler+0xd8>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a0f      	ldr	r2, [pc, #60]	; (8007040 <xPortStartScheduler+0xd8>)
 8007002:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007006:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007008:	4b0d      	ldr	r3, [pc, #52]	; (8007040 <xPortStartScheduler+0xd8>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a0c      	ldr	r2, [pc, #48]	; (8007040 <xPortStartScheduler+0xd8>)
 800700e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007012:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007014:	f000 f8b0 	bl	8007178 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007018:	4b0a      	ldr	r3, [pc, #40]	; (8007044 <xPortStartScheduler+0xdc>)
 800701a:	2200      	movs	r2, #0
 800701c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800701e:	f7ff ff93 	bl	8006f48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007022:	f7ff f8db 	bl	80061dc <vTaskSwitchContext>
	prvTaskExitError();
 8007026:	f7ff ff51 	bl	8006ecc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	e000e400 	.word	0xe000e400
 8007038:	20000d68 	.word	0x20000d68
 800703c:	20000d6c 	.word	0x20000d6c
 8007040:	e000ed20 	.word	0xe000ed20
 8007044:	20000060 	.word	0x20000060

08007048 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007060:	4b0e      	ldr	r3, [pc, #56]	; (800709c <vPortEnterCritical+0x54>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3301      	adds	r3, #1
 8007066:	4a0d      	ldr	r2, [pc, #52]	; (800709c <vPortEnterCritical+0x54>)
 8007068:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800706a:	4b0c      	ldr	r3, [pc, #48]	; (800709c <vPortEnterCritical+0x54>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d10e      	bne.n	8007090 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007072:	4b0b      	ldr	r3, [pc, #44]	; (80070a0 <vPortEnterCritical+0x58>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b00      	cmp	r3, #0
 800707a:	d009      	beq.n	8007090 <vPortEnterCritical+0x48>
 800707c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007080:	f383 8811 	msr	BASEPRI, r3
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	603b      	str	r3, [r7, #0]
 800708e:	e7fe      	b.n	800708e <vPortEnterCritical+0x46>
	}
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	bc80      	pop	{r7}
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	20000060 	.word	0x20000060
 80070a0:	e000ed04 	.word	0xe000ed04

080070a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80070aa:	4b10      	ldr	r3, [pc, #64]	; (80070ec <vPortExitCritical+0x48>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d109      	bne.n	80070c6 <vPortExitCritical+0x22>
 80070b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	607b      	str	r3, [r7, #4]
 80070c4:	e7fe      	b.n	80070c4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80070c6:	4b09      	ldr	r3, [pc, #36]	; (80070ec <vPortExitCritical+0x48>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	4a07      	ldr	r2, [pc, #28]	; (80070ec <vPortExitCritical+0x48>)
 80070ce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80070d0:	4b06      	ldr	r3, [pc, #24]	; (80070ec <vPortExitCritical+0x48>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d104      	bne.n	80070e2 <vPortExitCritical+0x3e>
 80070d8:	2300      	movs	r3, #0
 80070da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80070e2:	bf00      	nop
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bc80      	pop	{r7}
 80070ea:	4770      	bx	lr
 80070ec:	20000060 	.word	0x20000060

080070f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80070f0:	f3ef 8009 	mrs	r0, PSP
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	4b0d      	ldr	r3, [pc, #52]	; (8007130 <pxCurrentTCBConst>)
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007100:	6010      	str	r0, [r2, #0]
 8007102:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007106:	f04f 0050 	mov.w	r0, #80	; 0x50
 800710a:	f380 8811 	msr	BASEPRI, r0
 800710e:	f7ff f865 	bl	80061dc <vTaskSwitchContext>
 8007112:	f04f 0000 	mov.w	r0, #0
 8007116:	f380 8811 	msr	BASEPRI, r0
 800711a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800711e:	6819      	ldr	r1, [r3, #0]
 8007120:	6808      	ldr	r0, [r1, #0]
 8007122:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007126:	f380 8809 	msr	PSP, r0
 800712a:	f3bf 8f6f 	isb	sy
 800712e:	4770      	bx	lr

08007130 <pxCurrentTCBConst>:
 8007130:	2000073c 	.word	0x2000073c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007134:	bf00      	nop
 8007136:	bf00      	nop

08007138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
	__asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007150:	f7fe ff86 	bl	8006060 <xTaskIncrementTick>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800715a:	4b06      	ldr	r3, [pc, #24]	; (8007174 <SysTick_Handler+0x3c>)
 800715c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007160:	601a      	str	r2, [r3, #0]
 8007162:	2300      	movs	r3, #0
 8007164:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800716c:	bf00      	nop
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	e000ed04 	.word	0xe000ed04

08007178 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007178:	b480      	push	{r7}
 800717a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800717c:	4b0a      	ldr	r3, [pc, #40]	; (80071a8 <vPortSetupTimerInterrupt+0x30>)
 800717e:	2200      	movs	r2, #0
 8007180:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007182:	4b0a      	ldr	r3, [pc, #40]	; (80071ac <vPortSetupTimerInterrupt+0x34>)
 8007184:	2200      	movs	r2, #0
 8007186:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007188:	4b09      	ldr	r3, [pc, #36]	; (80071b0 <vPortSetupTimerInterrupt+0x38>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a09      	ldr	r2, [pc, #36]	; (80071b4 <vPortSetupTimerInterrupt+0x3c>)
 800718e:	fba2 2303 	umull	r2, r3, r2, r3
 8007192:	099b      	lsrs	r3, r3, #6
 8007194:	4a08      	ldr	r2, [pc, #32]	; (80071b8 <vPortSetupTimerInterrupt+0x40>)
 8007196:	3b01      	subs	r3, #1
 8007198:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800719a:	4b03      	ldr	r3, [pc, #12]	; (80071a8 <vPortSetupTimerInterrupt+0x30>)
 800719c:	2207      	movs	r2, #7
 800719e:	601a      	str	r2, [r3, #0]
}
 80071a0:	bf00      	nop
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bc80      	pop	{r7}
 80071a6:	4770      	bx	lr
 80071a8:	e000e010 	.word	0xe000e010
 80071ac:	e000e018 	.word	0xe000e018
 80071b0:	20000054 	.word	0x20000054
 80071b4:	10624dd3 	.word	0x10624dd3
 80071b8:	e000e014 	.word	0xe000e014

080071bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80071c2:	f3ef 8305 	mrs	r3, IPSR
 80071c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2b0f      	cmp	r3, #15
 80071cc:	d913      	bls.n	80071f6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80071ce:	4a15      	ldr	r2, [pc, #84]	; (8007224 <vPortValidateInterruptPriority+0x68>)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	4413      	add	r3, r2
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80071d8:	4b13      	ldr	r3, [pc, #76]	; (8007228 <vPortValidateInterruptPriority+0x6c>)
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	7afa      	ldrb	r2, [r7, #11]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d209      	bcs.n	80071f6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80071e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e6:	f383 8811 	msr	BASEPRI, r3
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	607b      	str	r3, [r7, #4]
 80071f4:	e7fe      	b.n	80071f4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80071f6:	4b0d      	ldr	r3, [pc, #52]	; (800722c <vPortValidateInterruptPriority+0x70>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80071fe:	4b0c      	ldr	r3, [pc, #48]	; (8007230 <vPortValidateInterruptPriority+0x74>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	429a      	cmp	r2, r3
 8007204:	d909      	bls.n	800721a <vPortValidateInterruptPriority+0x5e>
 8007206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	603b      	str	r3, [r7, #0]
 8007218:	e7fe      	b.n	8007218 <vPortValidateInterruptPriority+0x5c>
	}
 800721a:	bf00      	nop
 800721c:	3714      	adds	r7, #20
 800721e:	46bd      	mov	sp, r7
 8007220:	bc80      	pop	{r7}
 8007222:	4770      	bx	lr
 8007224:	e000e3f0 	.word	0xe000e3f0
 8007228:	20000d68 	.word	0x20000d68
 800722c:	e000ed0c 	.word	0xe000ed0c
 8007230:	20000d6c 	.word	0x20000d6c

08007234 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b08a      	sub	sp, #40	; 0x28
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800723c:	2300      	movs	r3, #0
 800723e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007240:	f7fe fe56 	bl	8005ef0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007244:	4b57      	ldr	r3, [pc, #348]	; (80073a4 <pvPortMalloc+0x170>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800724c:	f000 f90c 	bl	8007468 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007250:	4b55      	ldr	r3, [pc, #340]	; (80073a8 <pvPortMalloc+0x174>)
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4013      	ands	r3, r2
 8007258:	2b00      	cmp	r3, #0
 800725a:	f040 808c 	bne.w	8007376 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d01c      	beq.n	800729e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007264:	2208      	movs	r2, #8
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4413      	add	r3, r2
 800726a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f003 0307 	and.w	r3, r3, #7
 8007272:	2b00      	cmp	r3, #0
 8007274:	d013      	beq.n	800729e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f023 0307 	bic.w	r3, r3, #7
 800727c:	3308      	adds	r3, #8
 800727e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f003 0307 	and.w	r3, r3, #7
 8007286:	2b00      	cmp	r3, #0
 8007288:	d009      	beq.n	800729e <pvPortMalloc+0x6a>
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	617b      	str	r3, [r7, #20]
 800729c:	e7fe      	b.n	800729c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d068      	beq.n	8007376 <pvPortMalloc+0x142>
 80072a4:	4b41      	ldr	r3, [pc, #260]	; (80073ac <pvPortMalloc+0x178>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d863      	bhi.n	8007376 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80072ae:	4b40      	ldr	r3, [pc, #256]	; (80073b0 <pvPortMalloc+0x17c>)
 80072b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80072b2:	4b3f      	ldr	r3, [pc, #252]	; (80073b0 <pvPortMalloc+0x17c>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072b8:	e004      	b.n	80072c4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80072be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d903      	bls.n	80072d6 <pvPortMalloc+0xa2>
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1f1      	bne.n	80072ba <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80072d6:	4b33      	ldr	r3, [pc, #204]	; (80073a4 <pvPortMalloc+0x170>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072dc:	429a      	cmp	r2, r3
 80072de:	d04a      	beq.n	8007376 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2208      	movs	r2, #8
 80072e6:	4413      	add	r3, r2
 80072e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80072ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80072f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	1ad2      	subs	r2, r2, r3
 80072fa:	2308      	movs	r3, #8
 80072fc:	005b      	lsls	r3, r3, #1
 80072fe:	429a      	cmp	r2, r3
 8007300:	d91e      	bls.n	8007340 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4413      	add	r3, r2
 8007308:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	f003 0307 	and.w	r3, r3, #7
 8007310:	2b00      	cmp	r3, #0
 8007312:	d009      	beq.n	8007328 <pvPortMalloc+0xf4>
 8007314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007318:	f383 8811 	msr	BASEPRI, r3
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	613b      	str	r3, [r7, #16]
 8007326:	e7fe      	b.n	8007326 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	1ad2      	subs	r2, r2, r3
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800733a:	69b8      	ldr	r0, [r7, #24]
 800733c:	f000 f8f6 	bl	800752c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007340:	4b1a      	ldr	r3, [pc, #104]	; (80073ac <pvPortMalloc+0x178>)
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	4a18      	ldr	r2, [pc, #96]	; (80073ac <pvPortMalloc+0x178>)
 800734c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800734e:	4b17      	ldr	r3, [pc, #92]	; (80073ac <pvPortMalloc+0x178>)
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	4b18      	ldr	r3, [pc, #96]	; (80073b4 <pvPortMalloc+0x180>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	429a      	cmp	r2, r3
 8007358:	d203      	bcs.n	8007362 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800735a:	4b14      	ldr	r3, [pc, #80]	; (80073ac <pvPortMalloc+0x178>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a15      	ldr	r2, [pc, #84]	; (80073b4 <pvPortMalloc+0x180>)
 8007360:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	685a      	ldr	r2, [r3, #4]
 8007366:	4b10      	ldr	r3, [pc, #64]	; (80073a8 <pvPortMalloc+0x174>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	431a      	orrs	r2, r3
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007376:	f7fe fdc9 	bl	8005f0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	f003 0307 	and.w	r3, r3, #7
 8007380:	2b00      	cmp	r3, #0
 8007382:	d009      	beq.n	8007398 <pvPortMalloc+0x164>
 8007384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	60fb      	str	r3, [r7, #12]
 8007396:	e7fe      	b.n	8007396 <pvPortMalloc+0x162>
	return pvReturn;
 8007398:	69fb      	ldr	r3, [r7, #28]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3728      	adds	r7, #40	; 0x28
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	20001978 	.word	0x20001978
 80073a8:	20001984 	.word	0x20001984
 80073ac:	2000197c 	.word	0x2000197c
 80073b0:	20001970 	.word	0x20001970
 80073b4:	20001980 	.word	0x20001980

080073b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b086      	sub	sp, #24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d046      	beq.n	8007458 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80073ca:	2308      	movs	r3, #8
 80073cc:	425b      	negs	r3, r3
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	4413      	add	r3, r2
 80073d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	4b20      	ldr	r3, [pc, #128]	; (8007460 <vPortFree+0xa8>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4013      	ands	r3, r2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d109      	bne.n	80073fa <vPortFree+0x42>
 80073e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ea:	f383 8811 	msr	BASEPRI, r3
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	f3bf 8f4f 	dsb	sy
 80073f6:	60fb      	str	r3, [r7, #12]
 80073f8:	e7fe      	b.n	80073f8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d009      	beq.n	8007416 <vPortFree+0x5e>
 8007402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	60bb      	str	r3, [r7, #8]
 8007414:	e7fe      	b.n	8007414 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	4b11      	ldr	r3, [pc, #68]	; (8007460 <vPortFree+0xa8>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4013      	ands	r3, r2
 8007420:	2b00      	cmp	r3, #0
 8007422:	d019      	beq.n	8007458 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d115      	bne.n	8007458 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	4b0b      	ldr	r3, [pc, #44]	; (8007460 <vPortFree+0xa8>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	43db      	mvns	r3, r3
 8007436:	401a      	ands	r2, r3
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800743c:	f7fe fd58 	bl	8005ef0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	685a      	ldr	r2, [r3, #4]
 8007444:	4b07      	ldr	r3, [pc, #28]	; (8007464 <vPortFree+0xac>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4413      	add	r3, r2
 800744a:	4a06      	ldr	r2, [pc, #24]	; (8007464 <vPortFree+0xac>)
 800744c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800744e:	6938      	ldr	r0, [r7, #16]
 8007450:	f000 f86c 	bl	800752c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007454:	f7fe fd5a 	bl	8005f0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007458:	bf00      	nop
 800745a:	3718      	adds	r7, #24
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	20001984 	.word	0x20001984
 8007464:	2000197c 	.word	0x2000197c

08007468 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800746e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007472:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007474:	4b27      	ldr	r3, [pc, #156]	; (8007514 <prvHeapInit+0xac>)
 8007476:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f003 0307 	and.w	r3, r3, #7
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00c      	beq.n	800749c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	3307      	adds	r3, #7
 8007486:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f023 0307 	bic.w	r3, r3, #7
 800748e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	4a1f      	ldr	r2, [pc, #124]	; (8007514 <prvHeapInit+0xac>)
 8007498:	4413      	add	r3, r2
 800749a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80074a0:	4a1d      	ldr	r2, [pc, #116]	; (8007518 <prvHeapInit+0xb0>)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80074a6:	4b1c      	ldr	r3, [pc, #112]	; (8007518 <prvHeapInit+0xb0>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	4413      	add	r3, r2
 80074b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80074b4:	2208      	movs	r2, #8
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	1a9b      	subs	r3, r3, r2
 80074ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f023 0307 	bic.w	r3, r3, #7
 80074c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	4a15      	ldr	r2, [pc, #84]	; (800751c <prvHeapInit+0xb4>)
 80074c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80074ca:	4b14      	ldr	r3, [pc, #80]	; (800751c <prvHeapInit+0xb4>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2200      	movs	r2, #0
 80074d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80074d2:	4b12      	ldr	r3, [pc, #72]	; (800751c <prvHeapInit+0xb4>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2200      	movs	r2, #0
 80074d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	1ad2      	subs	r2, r2, r3
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80074e8:	4b0c      	ldr	r3, [pc, #48]	; (800751c <prvHeapInit+0xb4>)
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	4a0a      	ldr	r2, [pc, #40]	; (8007520 <prvHeapInit+0xb8>)
 80074f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	4a09      	ldr	r2, [pc, #36]	; (8007524 <prvHeapInit+0xbc>)
 80074fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007500:	4b09      	ldr	r3, [pc, #36]	; (8007528 <prvHeapInit+0xc0>)
 8007502:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007506:	601a      	str	r2, [r3, #0]
}
 8007508:	bf00      	nop
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	bc80      	pop	{r7}
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	20000d70 	.word	0x20000d70
 8007518:	20001970 	.word	0x20001970
 800751c:	20001978 	.word	0x20001978
 8007520:	20001980 	.word	0x20001980
 8007524:	2000197c 	.word	0x2000197c
 8007528:	20001984 	.word	0x20001984

0800752c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007534:	4b27      	ldr	r3, [pc, #156]	; (80075d4 <prvInsertBlockIntoFreeList+0xa8>)
 8007536:	60fb      	str	r3, [r7, #12]
 8007538:	e002      	b.n	8007540 <prvInsertBlockIntoFreeList+0x14>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	429a      	cmp	r2, r3
 8007548:	d8f7      	bhi.n	800753a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	4413      	add	r3, r2
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	429a      	cmp	r2, r3
 800755a:	d108      	bne.n	800756e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	685a      	ldr	r2, [r3, #4]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	441a      	add	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	68ba      	ldr	r2, [r7, #8]
 8007578:	441a      	add	r2, r3
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	429a      	cmp	r2, r3
 8007580:	d118      	bne.n	80075b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	4b14      	ldr	r3, [pc, #80]	; (80075d8 <prvInsertBlockIntoFreeList+0xac>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	429a      	cmp	r2, r3
 800758c:	d00d      	beq.n	80075aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685a      	ldr	r2, [r3, #4]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	441a      	add	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	601a      	str	r2, [r3, #0]
 80075a8:	e008      	b.n	80075bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80075aa:	4b0b      	ldr	r3, [pc, #44]	; (80075d8 <prvInsertBlockIntoFreeList+0xac>)
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	e003      	b.n	80075bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d002      	beq.n	80075ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075ca:	bf00      	nop
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bc80      	pop	{r7}
 80075d2:	4770      	bx	lr
 80075d4:	20001970 	.word	0x20001970
 80075d8:	20001978 	.word	0x20001978

080075dc <__libc_init_array>:
 80075dc:	b570      	push	{r4, r5, r6, lr}
 80075de:	2500      	movs	r5, #0
 80075e0:	4e0c      	ldr	r6, [pc, #48]	; (8007614 <__libc_init_array+0x38>)
 80075e2:	4c0d      	ldr	r4, [pc, #52]	; (8007618 <__libc_init_array+0x3c>)
 80075e4:	1ba4      	subs	r4, r4, r6
 80075e6:	10a4      	asrs	r4, r4, #2
 80075e8:	42a5      	cmp	r5, r4
 80075ea:	d109      	bne.n	8007600 <__libc_init_array+0x24>
 80075ec:	f000 f82e 	bl	800764c <_init>
 80075f0:	2500      	movs	r5, #0
 80075f2:	4e0a      	ldr	r6, [pc, #40]	; (800761c <__libc_init_array+0x40>)
 80075f4:	4c0a      	ldr	r4, [pc, #40]	; (8007620 <__libc_init_array+0x44>)
 80075f6:	1ba4      	subs	r4, r4, r6
 80075f8:	10a4      	asrs	r4, r4, #2
 80075fa:	42a5      	cmp	r5, r4
 80075fc:	d105      	bne.n	800760a <__libc_init_array+0x2e>
 80075fe:	bd70      	pop	{r4, r5, r6, pc}
 8007600:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007604:	4798      	blx	r3
 8007606:	3501      	adds	r5, #1
 8007608:	e7ee      	b.n	80075e8 <__libc_init_array+0xc>
 800760a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800760e:	4798      	blx	r3
 8007610:	3501      	adds	r5, #1
 8007612:	e7f2      	b.n	80075fa <__libc_init_array+0x1e>
 8007614:	08007754 	.word	0x08007754
 8007618:	08007754 	.word	0x08007754
 800761c:	08007754 	.word	0x08007754
 8007620:	08007758 	.word	0x08007758

08007624 <memcpy>:
 8007624:	b510      	push	{r4, lr}
 8007626:	1e43      	subs	r3, r0, #1
 8007628:	440a      	add	r2, r1
 800762a:	4291      	cmp	r1, r2
 800762c:	d100      	bne.n	8007630 <memcpy+0xc>
 800762e:	bd10      	pop	{r4, pc}
 8007630:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007634:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007638:	e7f7      	b.n	800762a <memcpy+0x6>

0800763a <memset>:
 800763a:	4603      	mov	r3, r0
 800763c:	4402      	add	r2, r0
 800763e:	4293      	cmp	r3, r2
 8007640:	d100      	bne.n	8007644 <memset+0xa>
 8007642:	4770      	bx	lr
 8007644:	f803 1b01 	strb.w	r1, [r3], #1
 8007648:	e7f9      	b.n	800763e <memset+0x4>
	...

0800764c <_init>:
 800764c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764e:	bf00      	nop
 8007650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007652:	bc08      	pop	{r3}
 8007654:	469e      	mov	lr, r3
 8007656:	4770      	bx	lr

08007658 <_fini>:
 8007658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765a:	bf00      	nop
 800765c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800765e:	bc08      	pop	{r3}
 8007660:	469e      	mov	lr, r3
 8007662:	4770      	bx	lr
