
Automotive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006420  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08006560  08006560  00016560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006808  08006808  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  08006808  08006808  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006808  08006808  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006808  08006808  00016808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800680c  0800680c  0001680c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08006810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b80  200000c8  080068d8  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c48  080068d8  00021c48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fad8  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004518  00000000  00000000  0003fbc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001898  00000000  00000000  000440e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015d0  00000000  00000000  00045980  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c793  00000000  00000000  00046f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017f3e  00000000  00000000  000636e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a9318  00000000  00000000  0007b621  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00124939  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061a8  00000000  00000000  001249b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000c8 	.word	0x200000c8
 800015c:	00000000 	.word	0x00000000
 8000160:	08006548 	.word	0x08006548

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000cc 	.word	0x200000cc
 800017c:	08006548 	.word	0x08006548

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <h_bridge_init>:
 *  Created on: Mar 28, 2021
 *      Author: Arkadiusz
 */
#include "h_bridge.h"

bool h_bridge_init(void) {
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0
	;
	return true;
 80001a8:	2301      	movs	r3, #1
}
 80001aa:	4618      	mov	r0, r3
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bc80      	pop	{r7}
 80001b0:	4770      	bx	lr
	...

080001b4 <ble_init>:

/**
 *
 * @return true when initialized
 */
bool ble_init(void) {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0

	//	close
	//	HAL_GPIO_WritePin(OUT_BLE_EN_GPIO_Port, OUT_BLE_EN_Pin, GPIO_PIN_SET);
	//	turn on serial communication
	//	HAL_GPIO_WritePin(OUT_BLE_EN_GPIO_Port, OUT_BLE_EN_Pin, GPIO_PIN_RESET);
	ble_turn_off_transmittion;
 80001ba:	2201      	movs	r2, #1
 80001bc:	2110      	movs	r1, #16
 80001be:	480d      	ldr	r0, [pc, #52]	; (80001f4 <ble_init+0x40>)
 80001c0:	f001 fd4c 	bl	8001c5c <HAL_GPIO_WritePin>
	ble_turn_on_transmittion;
 80001c4:	2200      	movs	r2, #0
 80001c6:	2110      	movs	r1, #16
 80001c8:	480a      	ldr	r0, [pc, #40]	; (80001f4 <ble_init+0x40>)
 80001ca:	f001 fd47 	bl	8001c5c <HAL_GPIO_WritePin>

	bool status = ble_test_command();
 80001ce:	f000 f813 	bl	80001f8 <ble_test_command>
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]
	ble_turn_off_transmittion;
 80001d6:	2201      	movs	r2, #1
 80001d8:	2110      	movs	r1, #16
 80001da:	4806      	ldr	r0, [pc, #24]	; (80001f4 <ble_init+0x40>)
 80001dc:	f001 fd3e 	bl	8001c5c <HAL_GPIO_WritePin>

	if (status)
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d001      	beq.n	80001ea <ble_init+0x36>
		return true;
 80001e6:	2301      	movs	r3, #1
 80001e8:	e000      	b.n	80001ec <ble_init+0x38>
	else
		return false;
 80001ea:	2300      	movs	r3, #0

}
 80001ec:	4618      	mov	r0, r3
 80001ee:	3708      	adds	r7, #8
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	40020800 	.word	0x40020800

080001f8 <ble_test_command>:

/**
 *
 * @return true otherwise false if not OK
 */
bool ble_test_command(void) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0

//	const char *OK = (char*) malloc(sizeof(char)*)

	char *pData = (char*) malloc(sizeof(char) * 4);
 80001fe:	2004      	movs	r0, #4
 8000200:	f006 f8c6 	bl	8006390 <malloc>
 8000204:	4603      	mov	r3, r0
 8000206:	607b      	str	r3, [r7, #4]

//	char *strcpy (char* strTo, const char* strFrom);

	strcpy(pData, "AT\r");
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	4a2d      	ldr	r2, [pc, #180]	; (80002c0 <ble_test_command+0xc8>)
 800020c:	6810      	ldr	r0, [r2, #0]
 800020e:	6018      	str	r0, [r3, #0]

	ble_turn_on_transmittion;
 8000210:	2200      	movs	r2, #0
 8000212:	2110      	movs	r1, #16
 8000214:	482b      	ldr	r0, [pc, #172]	; (80002c4 <ble_test_command+0xcc>)
 8000216:	f001 fd21 	bl	8001c5c <HAL_GPIO_WritePin>
	if (HAL_UART_Transmit(&huart3, (uint8_t*) pData, strlen(pData),
 800021a:	6878      	ldr	r0, [r7, #4]
 800021c:	f7ff ffba 	bl	8000194 <strlen>
 8000220:	4603      	mov	r3, r0
 8000222:	b29a      	uxth	r2, r3
 8000224:	f04f 33ff 	mov.w	r3, #4294967295
 8000228:	6879      	ldr	r1, [r7, #4]
 800022a:	4827      	ldr	r0, [pc, #156]	; (80002c8 <ble_test_command+0xd0>)
 800022c:	f003 f834 	bl	8003298 <HAL_UART_Transmit>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d009      	beq.n	800024a <ble_test_command+0x52>
	HAL_MAX_DELAY) != HAL_OK) {
		ble_turn_off_transmittion;
 8000236:	2201      	movs	r2, #1
 8000238:	2110      	movs	r1, #16
 800023a:	4822      	ldr	r0, [pc, #136]	; (80002c4 <ble_test_command+0xcc>)
 800023c:	f001 fd0e 	bl	8001c5c <HAL_GPIO_WritePin>
		free(pData);
 8000240:	6878      	ldr	r0, [r7, #4]
 8000242:	f006 f8ad 	bl	80063a0 <free>
		return false;
 8000246:	2300      	movs	r3, #0
 8000248:	e036      	b.n	80002b8 <ble_test_command+0xc0>
	}

	ble_turn_off_transmittion;
 800024a:	2201      	movs	r2, #1
 800024c:	2110      	movs	r1, #16
 800024e:	481d      	ldr	r0, [pc, #116]	; (80002c4 <ble_test_command+0xcc>)
 8000250:	f001 fd04 	bl	8001c5c <HAL_GPIO_WritePin>

	ble_turn_on_transmittion;
 8000254:	2200      	movs	r2, #0
 8000256:	2110      	movs	r1, #16
 8000258:	481a      	ldr	r0, [pc, #104]	; (80002c4 <ble_test_command+0xcc>)
 800025a:	f001 fcff 	bl	8001c5c <HAL_GPIO_WritePin>

	if (HAL_UART_Receive(&huart3, (uint8_t*) pData, strlen(pData),
 800025e:	6878      	ldr	r0, [r7, #4]
 8000260:	f7ff ff98 	bl	8000194 <strlen>
 8000264:	4603      	mov	r3, r0
 8000266:	b29a      	uxth	r2, r3
 8000268:	f04f 33ff 	mov.w	r3, #4294967295
 800026c:	6879      	ldr	r1, [r7, #4]
 800026e:	4816      	ldr	r0, [pc, #88]	; (80002c8 <ble_test_command+0xd0>)
 8000270:	f003 f8ab 	bl	80033ca <HAL_UART_Receive>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d009      	beq.n	800028e <ble_test_command+0x96>
	HAL_MAX_DELAY) != HAL_OK) {
		ble_turn_off_transmittion;
 800027a:	2201      	movs	r2, #1
 800027c:	2110      	movs	r1, #16
 800027e:	4811      	ldr	r0, [pc, #68]	; (80002c4 <ble_test_command+0xcc>)
 8000280:	f001 fcec 	bl	8001c5c <HAL_GPIO_WritePin>
		free(pData);
 8000284:	6878      	ldr	r0, [r7, #4]
 8000286:	f006 f88b 	bl	80063a0 <free>
		return false;
 800028a:	2300      	movs	r3, #0
 800028c:	e014      	b.n	80002b8 <ble_test_command+0xc0>
	}

	ble_turn_off_transmittion;
 800028e:	2201      	movs	r2, #1
 8000290:	2110      	movs	r1, #16
 8000292:	480c      	ldr	r0, [pc, #48]	; (80002c4 <ble_test_command+0xcc>)
 8000294:	f001 fce2 	bl	8001c5c <HAL_GPIO_WritePin>

	if (strcmp(pData, its_OK) == 0) {
 8000298:	490c      	ldr	r1, [pc, #48]	; (80002cc <ble_test_command+0xd4>)
 800029a:	6878      	ldr	r0, [r7, #4]
 800029c:	f7ff ff70 	bl	8000180 <strcmp>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d104      	bne.n	80002b0 <ble_test_command+0xb8>
		free(pData);
 80002a6:	6878      	ldr	r0, [r7, #4]
 80002a8:	f006 f87a 	bl	80063a0 <free>
		return true;
 80002ac:	2301      	movs	r3, #1
 80002ae:	e003      	b.n	80002b8 <ble_test_command+0xc0>
	} else {
		free(pData);
 80002b0:	6878      	ldr	r0, [r7, #4]
 80002b2:	f006 f875 	bl	80063a0 <free>
		return false;
 80002b6:	2300      	movs	r3, #0
	}

}
 80002b8:	4618      	mov	r0, r3
 80002ba:	3708      	adds	r7, #8
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	08006560 	.word	0x08006560
 80002c4:	40020800 	.word	0x40020800
 80002c8:	20001bc0 	.word	0x20001bc0
 80002cc:	08006728 	.word	0x08006728

080002d0 <eeprom_init>:
 *      Author: Arkadiusz
 */

#include "eeprom.h"

bool eeprom_init(void) {
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
	;
	return true;
 80002d4:	2301      	movs	r3, #1
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr

080002de <hall_init>:
 *  Created on: Mar 28, 2021
 *      Author: Arkadiusz
 */

#include "hall.h"
bool hall_init(void) {
 80002de:	b480      	push	{r7}
 80002e0:	af00      	add	r7, sp, #0
	;
	return true;
 80002e2:	2301      	movs	r3, #1
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr

080002ec <magnetometer_init>:
 *
 *  Created on: Mar 28, 2021
 *      Author: Arkadiusz
 */
#include "magnetometer.h"
bool magnetometer_init(void) {
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
	;
	return true;
 80002f0:	2301      	movs	r3, #1
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr

080002fa <proximity_init>:
 *  Created on: Mar 28, 2021
 *      Author: Arkadiusz
 */

#include "proximity.h"
bool proximity_init(void) {
 80002fa:	b480      	push	{r7}
 80002fc:	af00      	add	r7, sp, #0
	;
	return true;
 80002fe:	2301      	movs	r3, #1
}
 8000300:	4618      	mov	r0, r3
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr

08000308 <optocoupler_init>:
 *  Created on: Mar 28, 2021
 *      Author: Arkadiusz
 */

#include "optocoupler.h"
bool optocoupler_init(void) {
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
	;
	return true;
 800030c:	2301      	movs	r3, #1
}
 800030e:	4618      	mov	r0, r3
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr
	...

08000318 <device_init>:

#include "device_init.h"
#include "stdint.h"


void device_init(void) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0

	uint16_t successCnt = 0;
 800031e:	2300      	movs	r3, #0
 8000320:	80fb      	strh	r3, [r7, #6]
	uint16_t modsToInit = 0;
 8000322:	2300      	movs	r3, #0
 8000324:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < mod_N; i++) {
 8000326:	2300      	movs	r3, #0
 8000328:	807b      	strh	r3, [r7, #2]
 800032a:	e01f      	b.n	800036c <device_init+0x54>
		if (modules_cfg[i].active == true) {
 800032c:	887a      	ldrh	r2, [r7, #2]
 800032e:	4915      	ldr	r1, [pc, #84]	; (8000384 <device_init+0x6c>)
 8000330:	4613      	mov	r3, r2
 8000332:	005b      	lsls	r3, r3, #1
 8000334:	4413      	add	r3, r2
 8000336:	009b      	lsls	r3, r3, #2
 8000338:	440b      	add	r3, r1
 800033a:	3308      	adds	r3, #8
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d00e      	beq.n	8000360 <device_init+0x48>

			if (modules_cfg[i].init_function() == true) {
 8000342:	887a      	ldrh	r2, [r7, #2]
 8000344:	490f      	ldr	r1, [pc, #60]	; (8000384 <device_init+0x6c>)
 8000346:	4613      	mov	r3, r2
 8000348:	005b      	lsls	r3, r3, #1
 800034a:	4413      	add	r3, r2
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	440b      	add	r3, r1
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4798      	blx	r3
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d002      	beq.n	8000360 <device_init+0x48>
				successCnt++;
 800035a:	88fb      	ldrh	r3, [r7, #6]
 800035c:	3301      	adds	r3, #1
 800035e:	80fb      	strh	r3, [r7, #6]
			}
		}

		modsToInit++;
 8000360:	88bb      	ldrh	r3, [r7, #4]
 8000362:	3301      	adds	r3, #1
 8000364:	80bb      	strh	r3, [r7, #4]
	for (uint16_t i = 0; i < mod_N; i++) {
 8000366:	887b      	ldrh	r3, [r7, #2]
 8000368:	3301      	adds	r3, #1
 800036a:	807b      	strh	r3, [r7, #2]
 800036c:	887b      	ldrh	r3, [r7, #2]
 800036e:	2b06      	cmp	r3, #6
 8000370:	d9dc      	bls.n	800032c <device_init+0x14>
	}

	if (modsToInit != successCnt) {
 8000372:	88ba      	ldrh	r2, [r7, #4]
 8000374:	88fb      	ldrh	r3, [r7, #6]
 8000376:	429a      	cmp	r2, r3
 8000378:	d000      	beq.n	800037c <device_init+0x64>
		// some kind of error
		while (1)
 800037a:	e7fe      	b.n	800037a <device_init+0x62>
			; //TODO: call some error handler
	}

}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000000 	.word	0x20000000

08000388 <rt_init>:
TaskHandle_t rt_tasks[rt_task_N];
QueueHandle_t rt_queues[rt_queue_N];
EventGroupHandle_t rt_evgroups[rt_evgroup_N];
TimerHandle_t rt_timers[rt_timer_N];

void rt_init(void) {
 8000388:	b5b0      	push	{r4, r5, r7, lr}
 800038a:	b08a      	sub	sp, #40	; 0x28
 800038c:	af02      	add	r7, sp, #8

	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 800038e:	2300      	movs	r3, #0
 8000390:	77fb      	strb	r3, [r7, #31]
 8000392:	e02c      	b.n	80003ee <rt_init+0x66>
		rt_task_def_t const *def = rt_task_def + task;
 8000394:	7ffa      	ldrb	r2, [r7, #31]
 8000396:	4613      	mov	r3, r2
 8000398:	009b      	lsls	r3, r3, #2
 800039a:	4413      	add	r3, r2
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	461a      	mov	r2, r3
 80003a0:	4b47      	ldr	r3, [pc, #284]	; (80004c0 <rt_init+0x138>)
 80003a2:	4413      	add	r3, r2
 80003a4:	607b      	str	r3, [r7, #4]
		TaskHandle_t *handle = rt_tasks + task;
 80003a6:	7ffb      	ldrb	r3, [r7, #31]
 80003a8:	009b      	lsls	r3, r3, #2
 80003aa:	4a46      	ldr	r2, [pc, #280]	; (80004c4 <rt_init+0x13c>)
 80003ac:	4413      	add	r3, r2
 80003ae:	603b      	str	r3, [r7, #0]
		if (def->active) {
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	7c9b      	ldrb	r3, [r3, #18]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d014      	beq.n	80003e2 <rt_init+0x5a>
			if (xTaskCreate(def->pvTaskCode, def->pcName, def->usStackDepth,
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6818      	ldr	r0, [r3, #0]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	6859      	ldr	r1, [r3, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	8a1c      	ldrh	r4, [r3, #16]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	689d      	ldr	r5, [r3, #8]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	68db      	ldr	r3, [r3, #12]
 80003cc:	683a      	ldr	r2, [r7, #0]
 80003ce:	9201      	str	r2, [sp, #4]
 80003d0:	9300      	str	r3, [sp, #0]
 80003d2:	462b      	mov	r3, r5
 80003d4:	4622      	mov	r2, r4
 80003d6:	f004 fa14 	bl	8004802 <xTaskCreate>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d003      	beq.n	80003e8 <rt_init+0x60>
					def->pvParameters, def->uxPriority, handle) != pdPASS) {
//				error :-(
				while (1)
 80003e0:	e7fe      	b.n	80003e0 <rt_init+0x58>
					;
			}
		} else {
			*handle = 0;
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 80003e8:	7ffb      	ldrb	r3, [r7, #31]
 80003ea:	3301      	adds	r3, #1
 80003ec:	77fb      	strb	r3, [r7, #31]
 80003ee:	7ffb      	ldrb	r3, [r7, #31]
 80003f0:	2b04      	cmp	r3, #4
 80003f2:	d9cf      	bls.n	8000394 <rt_init+0xc>
		}
	}

	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 80003f4:	2300      	movs	r3, #0
 80003f6:	77bb      	strb	r3, [r7, #30]
 80003f8:	e01c      	b.n	8000434 <rt_init+0xac>
		rt_queue_def_t const *def = rt_queue_def + queue;
 80003fa:	7fbb      	ldrb	r3, [r7, #30]
 80003fc:	00db      	lsls	r3, r3, #3
 80003fe:	4a32      	ldr	r2, [pc, #200]	; (80004c8 <rt_init+0x140>)
 8000400:	4413      	add	r3, r2
 8000402:	60fb      	str	r3, [r7, #12]
		QueueHandle_t *handle = rt_queues + queue;
 8000404:	7fbb      	ldrb	r3, [r7, #30]
 8000406:	009b      	lsls	r3, r3, #2
 8000408:	4a30      	ldr	r2, [pc, #192]	; (80004cc <rt_init+0x144>)
 800040a:	4413      	add	r3, r2
 800040c:	60bb      	str	r3, [r7, #8]

		if ((*handle = xQueueCreate(def->uxQueueLength, def->uxItemSize))
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	6818      	ldr	r0, [r3, #0]
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	2200      	movs	r2, #0
 8000418:	4619      	mov	r1, r3
 800041a:	f003 fd63 	bl	8003ee4 <xQueueGenericCreate>
 800041e:	4602      	mov	r2, r0
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d100      	bne.n	800042e <rt_init+0xa6>
				== 0) {
			while (1)
 800042c:	e7fe      	b.n	800042c <rt_init+0xa4>
	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 800042e:	7fbb      	ldrb	r3, [r7, #30]
 8000430:	3301      	adds	r3, #1
 8000432:	77bb      	strb	r3, [r7, #30]
 8000434:	7fbb      	ldrb	r3, [r7, #30]
 8000436:	2b01      	cmp	r3, #1
 8000438:	d9df      	bls.n	80003fa <rt_init+0x72>
				;
		}
	}

	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 800043a:	2300      	movs	r3, #0
 800043c:	777b      	strb	r3, [r7, #29]
 800043e:	e020      	b.n	8000482 <rt_init+0xfa>
		rt_timer_def_t const *def = rt_timer_def + timer;
 8000440:	7f7b      	ldrb	r3, [r7, #29]
 8000442:	011b      	lsls	r3, r3, #4
 8000444:	4a22      	ldr	r2, [pc, #136]	; (80004d0 <rt_init+0x148>)
 8000446:	4413      	add	r3, r2
 8000448:	617b      	str	r3, [r7, #20]
		TimerHandle_t *handle = rt_timers + timer;
 800044a:	7f7b      	ldrb	r3, [r7, #29]
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	4a21      	ldr	r2, [pc, #132]	; (80004d4 <rt_init+0x14c>)
 8000450:	4413      	add	r3, r2
 8000452:	613b      	str	r3, [r7, #16]

		if ((*handle = xTimerCreate(def->pcTimerName, def->xTimerPeriodInTicks,
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	6818      	ldr	r0, [r3, #0]
 8000458:	697b      	ldr	r3, [r7, #20]
 800045a:	6859      	ldr	r1, [r3, #4]
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	689a      	ldr	r2, [r3, #8]
 8000460:	697b      	ldr	r3, [r7, #20]
 8000462:	68db      	ldr	r3, [r3, #12]
 8000464:	9300      	str	r3, [sp, #0]
 8000466:	2300      	movs	r3, #0
 8000468:	f005 f89e 	bl	80055a8 <xTimerCreate>
 800046c:	4602      	mov	r2, r0
 800046e:	693b      	ldr	r3, [r7, #16]
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	693b      	ldr	r3, [r7, #16]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d100      	bne.n	800047c <rt_init+0xf4>
				def->uxAutoReload, NULL, def->pxCallbackFunction)) == 0)
			while (1)
 800047a:	e7fe      	b.n	800047a <rt_init+0xf2>
	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 800047c:	7f7b      	ldrb	r3, [r7, #29]
 800047e:	3301      	adds	r3, #1
 8000480:	777b      	strb	r3, [r7, #29]
 8000482:	7f7b      	ldrb	r3, [r7, #29]
 8000484:	2b01      	cmp	r3, #1
 8000486:	d9db      	bls.n	8000440 <rt_init+0xb8>
				;
	}

	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 8000488:	2300      	movs	r3, #0
 800048a:	773b      	strb	r3, [r7, #28]
 800048c:	e011      	b.n	80004b2 <rt_init+0x12a>
			evgroup++) {
		EventGroupHandle_t *handle = rt_evgroups + evgroup;
 800048e:	7f3b      	ldrb	r3, [r7, #28]
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	4a11      	ldr	r2, [pc, #68]	; (80004d8 <rt_init+0x150>)
 8000494:	4413      	add	r3, r2
 8000496:	61bb      	str	r3, [r7, #24]

		if ((*handle = xEventGroupCreate()) == 0) {
 8000498:	f003 fb80 	bl	8003b9c <xEventGroupCreate>
 800049c:	4602      	mov	r2, r0
 800049e:	69bb      	ldr	r3, [r7, #24]
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	69bb      	ldr	r3, [r7, #24]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d100      	bne.n	80004ac <rt_init+0x124>
			while (1)
 80004aa:	e7fe      	b.n	80004aa <rt_init+0x122>
			evgroup++) {
 80004ac:	7f3b      	ldrb	r3, [r7, #28]
 80004ae:	3301      	adds	r3, #1
 80004b0:	773b      	strb	r3, [r7, #28]
	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 80004b2:	7f3b      	ldrb	r3, [r7, #28]
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d9ea      	bls.n	800048e <rt_init+0x106>
				;
		}
	}

}
 80004b8:	bf00      	nop
 80004ba:	3720      	adds	r7, #32
 80004bc:	46bd      	mov	sp, r7
 80004be:	bdb0      	pop	{r4, r5, r7, pc}
 80004c0:	0800672c 	.word	0x0800672c
 80004c4:	200019f8 	.word	0x200019f8
 80004c8:	08006790 	.word	0x08006790
 80004cc:	20001a1c 	.word	0x20001a1c
 80004d0:	080067a0 	.word	0x080067a0
 80004d4:	20001a0c 	.word	0x20001a0c
 80004d8:	20001a14 	.word	0x20001a14

080004dc <task_ble>:
 *      Author: Arkadiusz
 */

//#include "task_ble.h"

void task_ble(void *pvParameters) {
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 80004e4:	e7fe      	b.n	80004e4 <task_ble+0x8>

080004e6 <task_eyes>:
 *      Author: Arkadiusz
 */

//#include "task_eyes.h"

void task_eyes(void *pvParameters) {
 80004e6:	b480      	push	{r7}
 80004e8:	b083      	sub	sp, #12
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 80004ee:	e7fe      	b.n	80004ee <task_eyes+0x8>

080004f0 <task_memory>:
 *      Author: Arkadiusz
 */

//#include "task_memory.h"

void task_memory(void *pvParameters) {
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 80004f8:	e7fe      	b.n	80004f8 <task_memory+0x8>

080004fa <task_sensors>:
 *      Author: Arkadiusz
 */

//#include "task_sensors.h"

void task_sensors(void *pvParameters) {
 80004fa:	b480      	push	{r7}
 80004fc:	b083      	sub	sp, #12
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 8000502:	e7fe      	b.n	8000502 <task_sensors+0x8>

08000504 <task_state_machine>:
 *      Author: Arkadiusz
 */

//#include "task_state_machine.h"

void task_state_machine(void *pvParameters) {
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 800050c:	e7fe      	b.n	800050c <task_state_machine+0x8>
	...

08000510 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000520:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <MX_ADC_Init+0xa8>)
 8000522:	4a26      	ldr	r2, [pc, #152]	; (80005bc <MX_ADC_Init+0xac>)
 8000524:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000526:	4b24      	ldr	r3, [pc, #144]	; (80005b8 <MX_ADC_Init+0xa8>)
 8000528:	2200      	movs	r2, #0
 800052a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800052c:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <MX_ADC_Init+0xa8>)
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000532:	4b21      	ldr	r3, [pc, #132]	; (80005b8 <MX_ADC_Init+0xa8>)
 8000534:	2200      	movs	r2, #0
 8000536:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000538:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <MX_ADC_Init+0xa8>)
 800053a:	2200      	movs	r2, #0
 800053c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800053e:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <MX_ADC_Init+0xa8>)
 8000540:	2200      	movs	r2, #0
 8000542:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000544:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <MX_ADC_Init+0xa8>)
 8000546:	2200      	movs	r2, #0
 8000548:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800054a:	4b1b      	ldr	r3, [pc, #108]	; (80005b8 <MX_ADC_Init+0xa8>)
 800054c:	2200      	movs	r2, #0
 800054e:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000550:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <MX_ADC_Init+0xa8>)
 8000552:	2200      	movs	r2, #0
 8000554:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000556:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <MX_ADC_Init+0xa8>)
 8000558:	2200      	movs	r2, #0
 800055a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 800055e:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <MX_ADC_Init+0xa8>)
 8000560:	2201      	movs	r2, #1
 8000562:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000564:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <MX_ADC_Init+0xa8>)
 8000566:	2200      	movs	r2, #0
 8000568:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <MX_ADC_Init+0xa8>)
 800056e:	2210      	movs	r2, #16
 8000570:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000572:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <MX_ADC_Init+0xa8>)
 8000574:	2200      	movs	r2, #0
 8000576:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <MX_ADC_Init+0xa8>)
 800057a:	2200      	movs	r2, #0
 800057c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000580:	480d      	ldr	r0, [pc, #52]	; (80005b8 <MX_ADC_Init+0xa8>)
 8000582:	f000 fe4b 	bl	800121c <HAL_ADC_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 800058c:	f000 fa96 	bl	8000abc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000590:	2301      	movs	r3, #1
 8000592:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000594:	2301      	movs	r3, #1
 8000596:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	4619      	mov	r1, r3
 80005a0:	4805      	ldr	r0, [pc, #20]	; (80005b8 <MX_ADC_Init+0xa8>)
 80005a2:	f000 ff81 	bl	80014a8 <HAL_ADC_ConfigChannel>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 80005ac:	f000 fa86 	bl	8000abc <Error_Handler>
  }

}
 80005b0:	bf00      	nop
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20001a24 	.word	0x20001a24
 80005bc:	40012400 	.word	0x40012400

080005c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08c      	sub	sp, #48	; 0x30
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c8:	f107 031c 	add.w	r3, r7, #28
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a2d      	ldr	r2, [pc, #180]	; (8000694 <HAL_ADC_MspInit+0xd4>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d154      	bne.n	800068c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005e2:	4b2d      	ldr	r3, [pc, #180]	; (8000698 <HAL_ADC_MspInit+0xd8>)
 80005e4:	6a1b      	ldr	r3, [r3, #32]
 80005e6:	4a2c      	ldr	r2, [pc, #176]	; (8000698 <HAL_ADC_MspInit+0xd8>)
 80005e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ec:	6213      	str	r3, [r2, #32]
 80005ee:	4b2a      	ldr	r3, [pc, #168]	; (8000698 <HAL_ADC_MspInit+0xd8>)
 80005f0:	6a1b      	ldr	r3, [r3, #32]
 80005f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005f6:	61bb      	str	r3, [r7, #24]
 80005f8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	4b27      	ldr	r3, [pc, #156]	; (8000698 <HAL_ADC_MspInit+0xd8>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a26      	ldr	r2, [pc, #152]	; (8000698 <HAL_ADC_MspInit+0xd8>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b24      	ldr	r3, [pc, #144]	; (8000698 <HAL_ADC_MspInit+0xd8>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	4b21      	ldr	r3, [pc, #132]	; (8000698 <HAL_ADC_MspInit+0xd8>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	4a20      	ldr	r2, [pc, #128]	; (8000698 <HAL_ADC_MspInit+0xd8>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	61d3      	str	r3, [r2, #28]
 800061e:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <HAL_ADC_MspInit+0xd8>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800062a:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <HAL_ADC_MspInit+0xd8>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	4a1a      	ldr	r2, [pc, #104]	; (8000698 <HAL_ADC_MspInit+0xd8>)
 8000630:	f043 0302 	orr.w	r3, r3, #2
 8000634:	61d3      	str	r3, [r2, #28]
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <HAL_ADC_MspInit+0xd8>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	f003 0302 	and.w	r3, r3, #2
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA7     ------> ADC_IN7
    PB15     ------> ADC_IN21 
    */
    GPIO_InitStruct.Pin = ADC_BATTERY_VOLTAGE_Pin;
 8000642:	2301      	movs	r3, #1
 8000644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000646:	2303      	movs	r3, #3
 8000648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_BATTERY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 800064e:	f107 031c 	add.w	r3, r7, #28
 8000652:	4619      	mov	r1, r3
 8000654:	4811      	ldr	r0, [pc, #68]	; (800069c <HAL_ADC_MspInit+0xdc>)
 8000656:	f001 f973 	bl	8001940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_PHOTO_BACK_Pin|ADC_OPTO_LEFT_Pin|ADC_PHOTO_FRONT_Pin;
 800065a:	2386      	movs	r3, #134	; 0x86
 800065c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800065e:	2303      	movs	r3, #3
 8000660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	4619      	mov	r1, r3
 800066c:	480c      	ldr	r0, [pc, #48]	; (80006a0 <HAL_ADC_MspInit+0xe0>)
 800066e:	f001 f967 	bl	8001940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_OPTO_RIGHT_Pin;
 8000672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000678:	2303      	movs	r3, #3
 800067a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_OPTO_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	4619      	mov	r1, r3
 8000686:	4807      	ldr	r0, [pc, #28]	; (80006a4 <HAL_ADC_MspInit+0xe4>)
 8000688:	f001 f95a 	bl	8001940 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800068c:	bf00      	nop
 800068e:	3730      	adds	r7, #48	; 0x30
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40012400 	.word	0x40012400
 8000698:	40023800 	.word	0x40023800
 800069c:	40020800 	.word	0x40020800
 80006a0:	40020000 	.word	0x40020000
 80006a4:	40020400 	.word	0x40020400

080006a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006ac:	4a05      	ldr	r2, [pc, #20]	; (80006c4 <MX_FREERTOS_Init+0x1c>)
 80006ae:	2100      	movs	r1, #0
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_FREERTOS_Init+0x20>)
 80006b2:	f003 f969 	bl	8003988 <osThreadNew>
 80006b6:	4602      	mov	r2, r0
 80006b8:	4b04      	ldr	r3, [pc, #16]	; (80006cc <MX_FREERTOS_Init+0x24>)
 80006ba:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  rt_init();
 80006bc:	f7ff fe64 	bl	8000388 <rt_init>
  /* USER CODE END RTOS_THREADS */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	080067c0 	.word	0x080067c0
 80006c8:	080006d1 	.word	0x080006d1
 80006cc:	20001a78 	.word	0x20001a78

080006d0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006d8:	2001      	movs	r0, #1
 80006da:	f003 f9ff 	bl	8003adc <osDelay>
 80006de:	e7fb      	b.n	80006d8 <StartDefaultTask+0x8>

080006e0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	4b72      	ldr	r3, [pc, #456]	; (80008c0 <MX_GPIO_Init+0x1e0>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	4a71      	ldr	r2, [pc, #452]	; (80008c0 <MX_GPIO_Init+0x1e0>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	61d3      	str	r3, [r2, #28]
 8000702:	4b6f      	ldr	r3, [pc, #444]	; (80008c0 <MX_GPIO_Init+0x1e0>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070e:	4b6c      	ldr	r3, [pc, #432]	; (80008c0 <MX_GPIO_Init+0x1e0>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	4a6b      	ldr	r2, [pc, #428]	; (80008c0 <MX_GPIO_Init+0x1e0>)
 8000714:	f043 0320 	orr.w	r3, r3, #32
 8000718:	61d3      	str	r3, [r2, #28]
 800071a:	4b69      	ldr	r3, [pc, #420]	; (80008c0 <MX_GPIO_Init+0x1e0>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	f003 0320 	and.w	r3, r3, #32
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b66      	ldr	r3, [pc, #408]	; (80008c0 <MX_GPIO_Init+0x1e0>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	4a65      	ldr	r2, [pc, #404]	; (80008c0 <MX_GPIO_Init+0x1e0>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	61d3      	str	r3, [r2, #28]
 8000732:	4b63      	ldr	r3, [pc, #396]	; (80008c0 <MX_GPIO_Init+0x1e0>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b60      	ldr	r3, [pc, #384]	; (80008c0 <MX_GPIO_Init+0x1e0>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	4a5f      	ldr	r2, [pc, #380]	; (80008c0 <MX_GPIO_Init+0x1e0>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	61d3      	str	r3, [r2, #28]
 800074a:	4b5d      	ldr	r3, [pc, #372]	; (80008c0 <MX_GPIO_Init+0x1e0>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000756:	4b5a      	ldr	r3, [pc, #360]	; (80008c0 <MX_GPIO_Init+0x1e0>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	4a59      	ldr	r2, [pc, #356]	; (80008c0 <MX_GPIO_Init+0x1e0>)
 800075c:	f043 0308 	orr.w	r3, r3, #8
 8000760:	61d3      	str	r3, [r2, #28]
 8000762:	4b57      	ldr	r3, [pc, #348]	; (80008c0 <MX_GPIO_Init+0x1e0>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	f003 0308 	and.w	r3, r3, #8
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_INa_ENGINE_LEFT_Pin|OUT_INnb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_TEST_Pin 
 800076e:	2200      	movs	r2, #0
 8000770:	f640 616e 	movw	r1, #3694	; 0xe6e
 8000774:	4853      	ldr	r0, [pc, #332]	; (80008c4 <MX_GPIO_Init+0x1e4>)
 8000776:	f001 fa71 	bl	8001c5c <HAL_GPIO_WritePin>
                          |OUT_ULTRASOUND_TRIG_Pin|OUT_INb_RIGHT_Pin|OUT_LED1_Pin|OUT_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 800077a:	2200      	movs	r2, #0
 800077c:	f248 7108 	movw	r1, #34568	; 0x8708
 8000780:	4851      	ldr	r0, [pc, #324]	; (80008c8 <MX_GPIO_Init+0x1e8>)
 8000782:	f001 fa6b 	bl	8001c5c <HAL_GPIO_WritePin>
                          |OUT_LED0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_BLE_EN_GPIO_Port, OUT_BLE_EN_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	2110      	movs	r1, #16
 800078a:	484e      	ldr	r0, [pc, #312]	; (80008c4 <MX_GPIO_Init+0x1e4>)
 800078c:	f001 fa66 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12;
 8000790:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000796:	2303      	movs	r3, #3
 8000798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	4619      	mov	r1, r3
 80007a4:	4847      	ldr	r0, [pc, #284]	; (80008c4 <MX_GPIO_Init+0x1e4>)
 80007a6:	f001 f8cb 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = OUT_INa_ENGINE_LEFT_Pin|OUT_INnb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_EN_Pin 
 80007aa:	f640 637e 	movw	r3, #3710	; 0xe7e
 80007ae:	617b      	str	r3, [r7, #20]
                          |OUT_BLE_TEST_Pin|OUT_ULTRASOUND_TRIG_Pin|OUT_INb_RIGHT_Pin|OUT_LED1_Pin 
                          |OUT_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	4840      	ldr	r0, [pc, #256]	; (80008c4 <MX_GPIO_Init+0x1e4>)
 80007c4:	f001 f8bc 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 80007c8:	f248 7308 	movw	r3, #34568	; 0x8708
 80007cc:	617b      	str	r3, [r7, #20]
                          |OUT_LED0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	4839      	ldr	r0, [pc, #228]	; (80008c8 <MX_GPIO_Init+0x1e8>)
 80007e2:	f001 f8ad 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 80007e6:	f241 0370 	movw	r3, #4208	; 0x1070
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ec:	2303      	movs	r3, #3
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	4833      	ldr	r0, [pc, #204]	; (80008c8 <MX_GPIO_Init+0x1e8>)
 80007fc:	f001 f8a0 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IRQ_BLE_Pin|IRQ_ULTRASOUND_ECHO_Pin;
 8000800:	2303      	movs	r3, #3
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000804:	4b31      	ldr	r3, [pc, #196]	; (80008cc <MX_GPIO_Init+0x1ec>)
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	482f      	ldr	r0, [pc, #188]	; (80008d0 <MX_GPIO_Init+0x1f0>)
 8000814:	f001 f894 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB3 PB4 
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 8000818:	f242 333c 	movw	r3, #9020	; 0x233c
 800081c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800081e:	2303      	movs	r3, #3
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	4828      	ldr	r0, [pc, #160]	; (80008d0 <MX_GPIO_Init+0x1f0>)
 800082e:	f001 f887 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_RIGHT_Pin;
 8000832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	4822      	ldr	r0, [pc, #136]	; (80008d0 <MX_GPIO_Init+0x1f0>)
 8000848:	f001 f87a 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_HALL_FRONT_Pin;
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN_HALL_FRONT_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	4819      	ldr	r0, [pc, #100]	; (80008c4 <MX_GPIO_Init+0x1e4>)
 8000860:	f001 f86e 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_RIGHTA11_Pin;
 8000864:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_RIGHTA11_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	4813      	ldr	r0, [pc, #76]	; (80008c8 <MX_GPIO_Init+0x1e8>)
 800087a:	f001 f861 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800087e:	2304      	movs	r3, #4
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000882:	2303      	movs	r3, #3
 8000884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	4810      	ldr	r0, [pc, #64]	; (80008d4 <MX_GPIO_Init+0x1f4>)
 8000892:	f001 f855 	bl	8001940 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2105      	movs	r1, #5
 800089a:	2006      	movs	r0, #6
 800089c:	f001 f825 	bl	80018ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008a0:	2006      	movs	r0, #6
 80008a2:	f001 f83e 	bl	8001922 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2105      	movs	r1, #5
 80008aa:	2007      	movs	r0, #7
 80008ac:	f001 f81d 	bl	80018ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80008b0:	2007      	movs	r0, #7
 80008b2:	f001 f836 	bl	8001922 <HAL_NVIC_EnableIRQ>

}
 80008b6:	bf00      	nop
 80008b8:	3728      	adds	r7, #40	; 0x28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020800 	.word	0x40020800
 80008c8:	40020000 	.word	0x40020000
 80008cc:	10110000 	.word	0x10110000
 80008d0:	40020400 	.word	0x40020400
 80008d4:	40020c00 	.word	0x40020c00

080008d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_I2C1_Init+0x50>)
 80008de:	4a13      	ldr	r2, [pc, #76]	; (800092c <MX_I2C1_Init+0x54>)
 80008e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_I2C1_Init+0x50>)
 80008e4:	4a12      	ldr	r2, [pc, #72]	; (8000930 <MX_I2C1_Init+0x58>)
 80008e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_I2C1_Init+0x50>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_I2C1_Init+0x50>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_I2C1_Init+0x50>)
 80008f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <MX_I2C1_Init+0x50>)
 80008fe:	2200      	movs	r2, #0
 8000900:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_I2C1_Init+0x50>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <MX_I2C1_Init+0x50>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_I2C1_Init+0x50>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_I2C1_Init+0x50>)
 8000916:	f001 f9db 	bl	8001cd0 <HAL_I2C_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000920:	f000 f8cc 	bl	8000abc <Error_Handler>
  }

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20001a7c 	.word	0x20001a7c
 800092c:	40005400 	.word	0x40005400
 8000930:	000186a0 	.word	0x000186a0

08000934 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <HAL_I2C_MspInit+0x7c>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d127      	bne.n	80009a6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <HAL_I2C_MspInit+0x80>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	4a16      	ldr	r2, [pc, #88]	; (80009b4 <HAL_I2C_MspInit+0x80>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	61d3      	str	r3, [r2, #28]
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <HAL_I2C_MspInit+0x80>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800096e:	23c0      	movs	r3, #192	; 0xc0
 8000970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000972:	2312      	movs	r3, #18
 8000974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000976:	2301      	movs	r3, #1
 8000978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097a:	2303      	movs	r3, #3
 800097c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800097e:	2304      	movs	r3, #4
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	480b      	ldr	r0, [pc, #44]	; (80009b8 <HAL_I2C_MspInit+0x84>)
 800098a:	f000 ffd9 	bl	8001940 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <HAL_I2C_MspInit+0x80>)
 8000990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000992:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <HAL_I2C_MspInit+0x80>)
 8000994:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000998:	6253      	str	r3, [r2, #36]	; 0x24
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_I2C_MspInit+0x80>)
 800099c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800099e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009a6:	bf00      	nop
 80009a8:	3728      	adds	r7, #40	; 0x28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40005400 	.word	0x40005400
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020400 	.word	0x40020400

080009bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c0:	f000 fbf7 	bl	80011b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c4:	f000 f818 	bl	80009f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c8:	f7ff fe8a 	bl	80006e0 <MX_GPIO_Init>
  MX_ADC_Init();
 80009cc:	f7ff fda0 	bl	8000510 <MX_ADC_Init>
  MX_I2C1_Init();
 80009d0:	f7ff ff82 	bl	80008d8 <MX_I2C1_Init>
  MX_TIM2_Init();
 80009d4:	f000 f992 	bl	8000cfc <MX_TIM2_Init>
  MX_TIM3_Init();
 80009d8:	f000 f9e4 	bl	8000da4 <MX_TIM3_Init>
  MX_TIM9_Init();
 80009dc:	f000 fa38 	bl	8000e50 <MX_TIM9_Init>
  MX_USART3_UART_Init();
 80009e0:	f000 fb54 	bl	800108c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	device_init();
 80009e4:	f7ff fc98 	bl	8000318 <device_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80009e8:	f002 ff68 	bl	80038bc <osKernelInitialize>
  MX_FREERTOS_Init(); 
 80009ec:	f7ff fe5c 	bl	80006a8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80009f0:	f002 ff96 	bl	8003920 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80009f4:	e7fe      	b.n	80009f4 <main+0x38>
	...

080009f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b092      	sub	sp, #72	; 0x48
 80009fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	2234      	movs	r2, #52	; 0x34
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f005 fcdd 	bl	80063c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <SystemClock_Config+0x9c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000a22:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <SystemClock_Config+0x9c>)
 8000a24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a28:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a32:	2301      	movs	r3, #1
 8000a34:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a36:	2310      	movs	r3, #16
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000a44:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000a48:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000a4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a4e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4618      	mov	r0, r3
 8000a56:	f001 fa63 	bl	8001f20 <HAL_RCC_OscConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000a60:	f000 f82c 	bl	8000abc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a64:	230f      	movs	r3, #15
 8000a66:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a78:	463b      	mov	r3, r7
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f001 fd7f 	bl	8002580 <HAL_RCC_ClockConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a88:	f000 f818 	bl	8000abc <Error_Handler>
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	3748      	adds	r7, #72	; 0x48
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40007000 	.word	0x40007000

08000a98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d101      	bne.n	8000aae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aaa:	f000 fb9b 	bl	80011e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40000c00 	.word	0x40000c00

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <HAL_MspInit+0x64>)
 8000ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad2:	4a16      	ldr	r2, [pc, #88]	; (8000b2c <HAL_MspInit+0x64>)
 8000ad4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad8:	6253      	str	r3, [r2, #36]	; 0x24
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <HAL_MspInit+0x64>)
 8000adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ade:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <HAL_MspInit+0x64>)
 8000ae8:	6a1b      	ldr	r3, [r3, #32]
 8000aea:	4a10      	ldr	r2, [pc, #64]	; (8000b2c <HAL_MspInit+0x64>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6213      	str	r3, [r2, #32]
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <HAL_MspInit+0x64>)
 8000af4:	6a1b      	ldr	r3, [r3, #32]
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <HAL_MspInit+0x64>)
 8000b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <HAL_MspInit+0x64>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6253      	str	r3, [r2, #36]	; 0x24
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <HAL_MspInit+0x64>)
 8000b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	210f      	movs	r1, #15
 8000b1a:	f06f 0001 	mvn.w	r0, #1
 8000b1e:	f000 fee4 	bl	80018ea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800

08000b30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	; 0x30
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8000b40:	2200      	movs	r2, #0
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	202e      	movs	r0, #46	; 0x2e
 8000b46:	f000 fed0 	bl	80018ea <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8000b4a:	202e      	movs	r0, #46	; 0x2e
 8000b4c:	f000 fee9 	bl	8001922 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000b50:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <HAL_InitTick+0x9c>)
 8000b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b54:	4a1d      	ldr	r2, [pc, #116]	; (8000bcc <HAL_InitTick+0x9c>)
 8000b56:	f043 0308 	orr.w	r3, r3, #8
 8000b5a:	6253      	str	r3, [r2, #36]	; 0x24
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <HAL_InitTick+0x9c>)
 8000b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b60:	f003 0308 	and.w	r3, r3, #8
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b68:	f107 0210 	add.w	r2, r7, #16
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4611      	mov	r1, r2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f001 fec2 	bl	80028fc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b78:	f001 fe98 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8000b7c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b80:	4a13      	ldr	r2, [pc, #76]	; (8000bd0 <HAL_InitTick+0xa0>)
 8000b82:	fba2 2303 	umull	r2, r3, r2, r3
 8000b86:	0c9b      	lsrs	r3, r3, #18
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <HAL_InitTick+0xa4>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <HAL_InitTick+0xa8>)
 8000b90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <HAL_InitTick+0xa4>)
 8000b94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b98:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000b9a:	4a0e      	ldr	r2, [pc, #56]	; (8000bd4 <HAL_InitTick+0xa4>)
 8000b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b9e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <HAL_InitTick+0xa4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <HAL_InitTick+0xa4>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000bac:	4809      	ldr	r0, [pc, #36]	; (8000bd4 <HAL_InitTick+0xa4>)
 8000bae:	f001 ff35 	bl	8002a1c <HAL_TIM_Base_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d104      	bne.n	8000bc2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000bb8:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <HAL_InitTick+0xa4>)
 8000bba:	f001 ff63 	bl	8002a84 <HAL_TIM_Base_Start_IT>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	e000      	b.n	8000bc4 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3730      	adds	r7, #48	; 0x30
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	431bde83 	.word	0x431bde83
 8000bd4:	20001ad0 	.word	0x20001ad0
 8000bd8:	40000c00 	.word	0x40000c00

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <HardFault_Handler+0x4>

08000bee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <MemManage_Handler+0x4>

08000bf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <BusFault_Handler+0x4>

08000bfa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <UsageFault_Handler+0x4>

08000c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c10:	2001      	movs	r0, #1
 8000c12:	f001 f83b 	bl	8001c8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000c1e:	2002      	movs	r0, #2
 8000c20:	f001 f834 	bl	8001c8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <TIM5_IRQHandler+0x10>)
 8000c2e:	f001 ff77 	bl	8002b20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20001ad0 	.word	0x20001ad0

08000c3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <_sbrk+0x50>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x16>
		heap_end = &end;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <_sbrk+0x50>)
 8000c4e:	4a10      	ldr	r2, [pc, #64]	; (8000c90 <_sbrk+0x54>)
 8000c50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <_sbrk+0x50>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <_sbrk+0x50>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4413      	add	r3, r2
 8000c60:	466a      	mov	r2, sp
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d907      	bls.n	8000c76 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c66:	f005 fb69 	bl	800633c <__errno>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	230c      	movs	r3, #12
 8000c6e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295
 8000c74:	e006      	b.n	8000c84 <_sbrk+0x48>
	}

	heap_end += incr;
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <_sbrk+0x50>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a03      	ldr	r2, [pc, #12]	; (8000c8c <_sbrk+0x50>)
 8000c80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200000e4 	.word	0x200000e4
 8000c90:	20001c48 	.word	0x20001c48

08000c94 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <SystemInit+0x5c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a14      	ldr	r2, [pc, #80]	; (8000cf0 <SystemInit+0x5c>)
 8000c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca2:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <SystemInit+0x5c>)
 8000ca6:	689a      	ldr	r2, [r3, #8]
 8000ca8:	4911      	ldr	r1, [pc, #68]	; (8000cf0 <SystemInit+0x5c>)
 8000caa:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <SystemInit+0x60>)
 8000cac:	4013      	ands	r3, r2
 8000cae:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <SystemInit+0x5c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <SystemInit+0x5c>)
 8000cb6:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000cba:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000cbe:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <SystemInit+0x5c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <SystemInit+0x5c>)
 8000cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cca:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <SystemInit+0x5c>)
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <SystemInit+0x5c>)
 8000cd2:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000cd6:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <SystemInit+0x5c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <SystemInit+0x64>)
 8000ce0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ce4:	609a      	str	r2, [r3, #8]
#endif
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	88ffc00c 	.word	0x88ffc00c
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d02:	f107 0310 	add.w	r3, r7, #16
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8000d18:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <MX_TIM2_Init+0xa4>)
 8000d1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d20:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <MX_TIM2_Init+0xa4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d26:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <MX_TIM2_Init+0xa4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000d2c:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <MX_TIM2_Init+0xa4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d32:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <MX_TIM2_Init+0xa4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d38:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <MX_TIM2_Init+0xa4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d3e:	4818      	ldr	r0, [pc, #96]	; (8000da0 <MX_TIM2_Init+0xa4>)
 8000d40:	f001 fec3 	bl	8002aca <HAL_TIM_PWM_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000d4a:	f7ff feb7 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d56:	f107 0310 	add.w	r3, r7, #16
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4810      	ldr	r0, [pc, #64]	; (8000da0 <MX_TIM2_Init+0xa4>)
 8000d5e:	f002 fa0a 	bl	8003176 <HAL_TIMEx_MasterConfigSynchronization>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d68:	f7ff fea8 	bl	8000abc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d6c:	2360      	movs	r3, #96	; 0x60
 8000d6e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4619      	mov	r1, r3
 8000d82:	4807      	ldr	r0, [pc, #28]	; (8000da0 <MX_TIM2_Init+0xa4>)
 8000d84:	f001 ffa8 	bl	8002cd8 <HAL_TIM_PWM_ConfigChannel>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d8e:	f7ff fe95 	bl	8000abc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000d92:	4803      	ldr	r0, [pc, #12]	; (8000da0 <MX_TIM2_Init+0xa4>)
 8000d94:	f000 f8f6 	bl	8000f84 <HAL_TIM_MspPostInit>

}
 8000d98:	bf00      	nop
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20001b84 	.word	0x20001b84

08000da4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000daa:	f107 0310 	add.w	r3, r7, #16
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db4:	463b      	mov	r3, r7
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8000dc0:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <MX_TIM3_Init+0xa4>)
 8000dc2:	4a22      	ldr	r2, [pc, #136]	; (8000e4c <MX_TIM3_Init+0xa8>)
 8000dc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000dc6:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <MX_TIM3_Init+0xa4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <MX_TIM3_Init+0xa4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <MX_TIM3_Init+0xa4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <MX_TIM3_Init+0xa4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <MX_TIM3_Init+0xa4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000de4:	4818      	ldr	r0, [pc, #96]	; (8000e48 <MX_TIM3_Init+0xa4>)
 8000de6:	f001 fe70 	bl	8002aca <HAL_TIM_PWM_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000df0:	f7ff fe64 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df4:	2300      	movs	r3, #0
 8000df6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dfc:	f107 0310 	add.w	r3, r7, #16
 8000e00:	4619      	mov	r1, r3
 8000e02:	4811      	ldr	r0, [pc, #68]	; (8000e48 <MX_TIM3_Init+0xa4>)
 8000e04:	f002 f9b7 	bl	8003176 <HAL_TIMEx_MasterConfigSynchronization>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e0e:	f7ff fe55 	bl	8000abc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e12:	2360      	movs	r3, #96	; 0x60
 8000e14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e22:	463b      	mov	r3, r7
 8000e24:	2208      	movs	r2, #8
 8000e26:	4619      	mov	r1, r3
 8000e28:	4807      	ldr	r0, [pc, #28]	; (8000e48 <MX_TIM3_Init+0xa4>)
 8000e2a:	f001 ff55 	bl	8002cd8 <HAL_TIM_PWM_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e34:	f7ff fe42 	bl	8000abc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000e38:	4803      	ldr	r0, [pc, #12]	; (8000e48 <MX_TIM3_Init+0xa4>)
 8000e3a:	f000 f8a3 	bl	8000f84 <HAL_TIM_MspPostInit>

}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20001b0c 	.word	0x20001b0c
 8000e4c:	40000400 	.word	0x40000400

08000e50 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e56:	f107 0310 	add.w	r3, r7, #16
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e60:	463b      	mov	r3, r7
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8000e6c:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <MX_TIM9_Init+0xa4>)
 8000e6e:	4a22      	ldr	r2, [pc, #136]	; (8000ef8 <MX_TIM9_Init+0xa8>)
 8000e70:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000e72:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <MX_TIM9_Init+0xa4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <MX_TIM9_Init+0xa4>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0;
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <MX_TIM9_Init+0xa4>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <MX_TIM9_Init+0xa4>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <MX_TIM9_Init+0xa4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000e90:	4818      	ldr	r0, [pc, #96]	; (8000ef4 <MX_TIM9_Init+0xa4>)
 8000e92:	f001 fe1a 	bl	8002aca <HAL_TIM_PWM_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 8000e9c:	f7ff fe0e 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	4619      	mov	r1, r3
 8000eae:	4811      	ldr	r0, [pc, #68]	; (8000ef4 <MX_TIM9_Init+0xa4>)
 8000eb0:	f002 f961 	bl	8003176 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM9_Init+0x6e>
  {
    Error_Handler();
 8000eba:	f7ff fdff 	bl	8000abc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ebe:	2360      	movs	r3, #96	; 0x60
 8000ec0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ece:	463b      	mov	r3, r7
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <MX_TIM9_Init+0xa4>)
 8000ed6:	f001 feff 	bl	8002cd8 <HAL_TIM_PWM_ConfigChannel>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM9_Init+0x94>
  {
    Error_Handler();
 8000ee0:	f7ff fdec 	bl	8000abc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 8000ee4:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <MX_TIM9_Init+0xa4>)
 8000ee6:	f000 f84d 	bl	8000f84 <HAL_TIM_MspPostInit>

}
 8000eea:	bf00      	nop
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20001b48 	.word	0x20001b48
 8000ef8:	40010800 	.word	0x40010800

08000efc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f0c:	d10c      	bne.n	8000f28 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <HAL_TIM_PWM_MspInit+0x7c>)
 8000f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f12:	4a19      	ldr	r2, [pc, #100]	; (8000f78 <HAL_TIM_PWM_MspInit+0x7c>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6253      	str	r3, [r2, #36]	; 0x24
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <HAL_TIM_PWM_MspInit+0x7c>)
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8000f26:	e022      	b.n	8000f6e <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a13      	ldr	r2, [pc, #76]	; (8000f7c <HAL_TIM_PWM_MspInit+0x80>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d10c      	bne.n	8000f4c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <HAL_TIM_PWM_MspInit+0x7c>)
 8000f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f36:	4a10      	ldr	r2, [pc, #64]	; (8000f78 <HAL_TIM_PWM_MspInit+0x7c>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	6253      	str	r3, [r2, #36]	; 0x24
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_TIM_PWM_MspInit+0x7c>)
 8000f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
}
 8000f4a:	e010      	b.n	8000f6e <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM9)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <HAL_TIM_PWM_MspInit+0x84>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d10b      	bne.n	8000f6e <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_TIM_PWM_MspInit+0x7c>)
 8000f58:	6a1b      	ldr	r3, [r3, #32]
 8000f5a:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_TIM_PWM_MspInit+0x7c>)
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	6213      	str	r3, [r2, #32]
 8000f62:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <HAL_TIM_PWM_MspInit+0x7c>)
 8000f64:	6a1b      	ldr	r3, [r3, #32]
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
}
 8000f6e:	bf00      	nop
 8000f70:	371c      	adds	r7, #28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40000400 	.word	0x40000400
 8000f80:	40010800 	.word	0x40010800

08000f84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fa4:	d11c      	bne.n	8000fe0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	4b33      	ldr	r3, [pc, #204]	; (8001074 <HAL_TIM_MspPostInit+0xf0>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	4a32      	ldr	r2, [pc, #200]	; (8001074 <HAL_TIM_MspPostInit+0xf0>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	61d3      	str	r3, [r2, #28]
 8000fb2:	4b30      	ldr	r3, [pc, #192]	; (8001074 <HAL_TIM_MspPostInit+0xf0>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0-WKUP1     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PWM_ENGINE_LEFT_Pin;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_LEFT_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4827      	ldr	r0, [pc, #156]	; (8001078 <HAL_TIM_MspPostInit+0xf4>)
 8000fda:	f000 fcb1 	bl	8001940 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8000fde:	e044      	b.n	800106a <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a25      	ldr	r2, [pc, #148]	; (800107c <HAL_TIM_MspPostInit+0xf8>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d11d      	bne.n	8001026 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fea:	4b22      	ldr	r3, [pc, #136]	; (8001074 <HAL_TIM_MspPostInit+0xf0>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	4a21      	ldr	r2, [pc, #132]	; (8001074 <HAL_TIM_MspPostInit+0xf0>)
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	61d3      	str	r3, [r2, #28]
 8000ff6:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <HAL_TIM_MspPostInit+0xf0>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	f003 0304 	and.w	r3, r3, #4
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_ENGINE_RIGHT_Pin;
 8001002:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001014:	2302      	movs	r3, #2
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	4619      	mov	r1, r3
 800101e:	4818      	ldr	r0, [pc, #96]	; (8001080 <HAL_TIM_MspPostInit+0xfc>)
 8001020:	f000 fc8e 	bl	8001940 <HAL_GPIO_Init>
}
 8001024:	e021      	b.n	800106a <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM9)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a16      	ldr	r2, [pc, #88]	; (8001084 <HAL_TIM_MspPostInit+0x100>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d11c      	bne.n	800106a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <HAL_TIM_MspPostInit+0xf0>)
 8001032:	69db      	ldr	r3, [r3, #28]
 8001034:	4a0f      	ldr	r2, [pc, #60]	; (8001074 <HAL_TIM_MspPostInit+0xf0>)
 8001036:	f043 0302 	orr.w	r3, r3, #2
 800103a:	61d3      	str	r3, [r2, #28]
 800103c:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <HAL_TIM_MspPostInit+0xf0>)
 800103e:	69db      	ldr	r3, [r3, #28]
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 8001048:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800104c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800105a:	2303      	movs	r3, #3
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	4808      	ldr	r0, [pc, #32]	; (8001088 <HAL_TIM_MspPostInit+0x104>)
 8001066:	f000 fc6b 	bl	8001940 <HAL_GPIO_Init>
}
 800106a:	bf00      	nop
 800106c:	3728      	adds	r7, #40	; 0x28
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800
 8001078:	40020000 	.word	0x40020000
 800107c:	40000400 	.word	0x40000400
 8001080:	40020800 	.word	0x40020800
 8001084:	40010800 	.word	0x40010800
 8001088:	40020400 	.word	0x40020400

0800108c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 8001092:	4a12      	ldr	r2, [pc, #72]	; (80010dc <MX_USART3_UART_Init+0x50>)
 8001094:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 8001098:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800109c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 80010b2:	220c      	movs	r2, #12
 80010b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_USART3_UART_Init+0x4c>)
 80010c4:	f002 f89b 	bl	80031fe <HAL_UART_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010ce:	f7ff fcf5 	bl	8000abc <Error_Handler>
  }

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20001bc0 	.word	0x20001bc0
 80010dc:	40004800 	.word	0x40004800

080010e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a17      	ldr	r2, [pc, #92]	; (800115c <HAL_UART_MspInit+0x7c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d128      	bne.n	8001154 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <HAL_UART_MspInit+0x80>)
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	4a16      	ldr	r2, [pc, #88]	; (8001160 <HAL_UART_MspInit+0x80>)
 8001108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800110c:	6253      	str	r3, [r2, #36]	; 0x24
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <HAL_UART_MspInit+0x80>)
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <HAL_UART_MspInit+0x80>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	4a10      	ldr	r2, [pc, #64]	; (8001160 <HAL_UART_MspInit+0x80>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	61d3      	str	r3, [r2, #28]
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_UART_MspInit+0x80>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001132:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001144:	2307      	movs	r3, #7
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <HAL_UART_MspInit+0x84>)
 8001150:	f000 fbf6 	bl	8001940 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001154:	bf00      	nop
 8001156:	3728      	adds	r7, #40	; 0x28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40004800 	.word	0x40004800
 8001160:	40023800 	.word	0x40023800
 8001164:	40020400 	.word	0x40020400

08001168 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001168:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800116a:	e003      	b.n	8001174 <LoopCopyDataInit>

0800116c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800116e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001170:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001172:	3104      	adds	r1, #4

08001174 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001174:	480a      	ldr	r0, [pc, #40]	; (80011a0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001178:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800117a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800117c:	d3f6      	bcc.n	800116c <CopyDataInit>
  ldr r2, =_sbss
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001180:	e002      	b.n	8001188 <LoopFillZerobss>

08001182 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001184:	f842 3b04 	str.w	r3, [r2], #4

08001188 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <LoopFillZerobss+0x24>)
  cmp r2, r3
 800118a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800118c:	d3f9      	bcc.n	8001182 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800118e:	f7ff fd81 	bl	8000c94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001192:	f005 f8d9 	bl	8006348 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001196:	f7ff fc11 	bl	80009bc <main>
  bx lr
 800119a:	4770      	bx	lr
  ldr r3, =_sidata
 800119c:	08006810 	.word	0x08006810
  ldr r0, =_sdata
 80011a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80011a4:	200000c8 	.word	0x200000c8
  ldr r2, =_sbss
 80011a8:	200000c8 	.word	0x200000c8
  ldr r3, = _ebss
 80011ac:	20001c48 	.word	0x20001c48

080011b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC1_IRQHandler>

080011b2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011bc:	2003      	movs	r0, #3
 80011be:	f000 fb89 	bl	80018d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011c2:	2000      	movs	r0, #0
 80011c4:	f7ff fcb4 	bl	8000b30 <HAL_InitTick>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d002      	beq.n	80011d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	e001      	b.n	80011d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011d4:	f7ff fc78 	bl	8000ac8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011d8:	79fb      	ldrb	r3, [r7, #7]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <HAL_IncTick+0x1c>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_IncTick+0x20>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4413      	add	r3, r2
 80011f2:	4a03      	ldr	r2, [pc, #12]	; (8001200 <HAL_IncTick+0x1c>)
 80011f4:	6013      	str	r3, [r2, #0]
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20001c00 	.word	0x20001c00
 8001204:	2000005c 	.word	0x2000005c

08001208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b02      	ldr	r3, [pc, #8]	; (8001218 <HAL_GetTick+0x10>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	20001c00 	.word	0x20001c00

0800121c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08e      	sub	sp, #56	; 0x38
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d101      	bne.n	800123c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e127      	b.n	800148c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	2b00      	cmp	r3, #0
 8001248:	d115      	bne.n	8001276 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001258:	4b8e      	ldr	r3, [pc, #568]	; (8001494 <HAL_ADC_Init+0x278>)
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	4a8d      	ldr	r2, [pc, #564]	; (8001494 <HAL_ADC_Init+0x278>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6213      	str	r3, [r2, #32]
 8001264:	4b8b      	ldr	r3, [pc, #556]	; (8001494 <HAL_ADC_Init+0x278>)
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff f9a5 	bl	80005c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	f003 0310 	and.w	r3, r3, #16
 800127e:	2b00      	cmp	r3, #0
 8001280:	f040 80ff 	bne.w	8001482 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001288:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800128c:	f023 0302 	bic.w	r3, r3, #2
 8001290:	f043 0202 	orr.w	r2, r3, #2
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001298:	4b7f      	ldr	r3, [pc, #508]	; (8001498 <HAL_ADC_Init+0x27c>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	497c      	ldr	r1, [pc, #496]	; (8001498 <HAL_ADC_Init+0x27c>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80012b2:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012ba:	4619      	mov	r1, r3
 80012bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012c0:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c2:	6a3b      	ldr	r3, [r7, #32]
 80012c4:	fa93 f3a3 	rbit	r3, r3
 80012c8:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fab3 f383 	clz	r3, r3
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80012d6:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80012dc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012e4:	4619      	mov	r1, r3
 80012e6:	2302      	movs	r3, #2
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ec:	fa93 f3a3 	rbit	r3, r3
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	fab3 f383 	clz	r3, r3
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80012fe:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001302:	4313      	orrs	r3, r2
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130a:	2b10      	cmp	r3, #16
 800130c:	d007      	beq.n	800131e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001316:	4313      	orrs	r3, r2
 8001318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800131a:	4313      	orrs	r3, r2
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001328:	2b40      	cmp	r3, #64	; 0x40
 800132a:	d04f      	beq.n	80013cc <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001332:	4313      	orrs	r3, r2
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800133e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6912      	ldr	r2, [r2, #16]
 8001344:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001348:	d003      	beq.n	8001352 <HAL_ADC_Init+0x136>
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	6912      	ldr	r2, [r2, #16]
 800134e:	2a01      	cmp	r2, #1
 8001350:	d102      	bne.n	8001358 <HAL_ADC_Init+0x13c>
 8001352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001356:	e000      	b.n	800135a <HAL_ADC_Init+0x13e>
 8001358:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800135a:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800135c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800135e:	4313      	orrs	r3, r2
 8001360:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001368:	2b01      	cmp	r3, #1
 800136a:	d125      	bne.n	80013b8 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001372:	2b00      	cmp	r3, #0
 8001374:	d114      	bne.n	80013a0 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	3b01      	subs	r3, #1
 800137c:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001380:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	fa92 f2a2 	rbit	r2, r2
 8001388:	617a      	str	r2, [r7, #20]
  return result;
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	fab2 f282 	clz	r2, r2
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	4093      	lsls	r3, r2
 8001394:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800139a:	4313      	orrs	r3, r2
 800139c:	633b      	str	r3, [r7, #48]	; 0x30
 800139e:	e00b      	b.n	80013b8 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a4:	f043 0220 	orr.w	r2, r3, #32
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013b0:	f043 0201 	orr.w	r2, r3, #1
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	4b37      	ldr	r3, [pc, #220]	; (800149c <HAL_ADC_Init+0x280>)
 80013c0:	4013      	ands	r3, r2
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6812      	ldr	r2, [r2, #0]
 80013c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80013c8:	430b      	orrs	r3, r1
 80013ca:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	4b33      	ldr	r3, [pc, #204]	; (80014a0 <HAL_ADC_Init+0x284>)
 80013d4:	4013      	ands	r3, r2
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	6812      	ldr	r2, [r2, #0]
 80013da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013dc:	430b      	orrs	r3, r1
 80013de:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013e8:	d003      	beq.n	80013f2 <HAL_ADC_Init+0x1d6>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d119      	bne.n	8001426 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f8:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001400:	3b01      	subs	r3, #1
 8001402:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001406:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	fa92 f2a2 	rbit	r2, r2
 800140e:	60fa      	str	r2, [r7, #12]
  return result;
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	fab2 f282 	clz	r2, r2
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	fa03 f202 	lsl.w	r2, r3, r2
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	430a      	orrs	r2, r1
 8001422:	631a      	str	r2, [r3, #48]	; 0x30
 8001424:	e007      	b.n	8001436 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001434:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_ADC_Init+0x288>)
 800143e:	4013      	ands	r3, r2
 8001440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001442:	429a      	cmp	r2, r3
 8001444:	d10b      	bne.n	800145e <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001450:	f023 0303 	bic.w	r3, r3, #3
 8001454:	f043 0201 	orr.w	r2, r3, #1
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	64da      	str	r2, [r3, #76]	; 0x4c
 800145c:	e014      	b.n	8001488 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	f023 0312 	bic.w	r3, r3, #18
 8001466:	f043 0210 	orr.w	r2, r3, #16
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001472:	f043 0201 	orr.w	r2, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001480:	e002      	b.n	8001488 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001488:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800148c:	4618      	mov	r0, r3
 800148e:	3738      	adds	r7, #56	; 0x38
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40023800 	.word	0x40023800
 8001498:	40012700 	.word	0x40012700
 800149c:	fcfc16ff 	.word	0xfcfc16ff
 80014a0:	c0fff189 	.word	0xc0fff189
 80014a4:	bf80fffe 	.word	0xbf80fffe

080014a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x20>
 80014c4:	2302      	movs	r3, #2
 80014c6:	e14f      	b.n	8001768 <HAL_ADC_ConfigChannel+0x2c0>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b06      	cmp	r3, #6
 80014d6:	d81c      	bhi.n	8001512 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	3b05      	subs	r3, #5
 80014ea:	221f      	movs	r2, #31
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	4019      	ands	r1, r3
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	3b05      	subs	r3, #5
 8001504:	fa00 f203 	lsl.w	r2, r0, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	641a      	str	r2, [r3, #64]	; 0x40
 8001510:	e07e      	b.n	8001610 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b0c      	cmp	r3, #12
 8001518:	d81c      	bhi.n	8001554 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	3b23      	subs	r3, #35	; 0x23
 800152c:	221f      	movs	r2, #31
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	4019      	ands	r1, r3
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	6818      	ldr	r0, [r3, #0]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	3b23      	subs	r3, #35	; 0x23
 8001546:	fa00 f203 	lsl.w	r2, r0, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	63da      	str	r2, [r3, #60]	; 0x3c
 8001552:	e05d      	b.n	8001610 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b12      	cmp	r3, #18
 800155a:	d81c      	bhi.n	8001596 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	3b41      	subs	r3, #65	; 0x41
 800156e:	221f      	movs	r2, #31
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	4019      	ands	r1, r3
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	6818      	ldr	r0, [r3, #0]
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	3b41      	subs	r3, #65	; 0x41
 8001588:	fa00 f203 	lsl.w	r2, r0, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	639a      	str	r2, [r3, #56]	; 0x38
 8001594:	e03c      	b.n	8001610 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b18      	cmp	r3, #24
 800159c:	d81c      	bhi.n	80015d8 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	3b5f      	subs	r3, #95	; 0x5f
 80015b0:	221f      	movs	r2, #31
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	4019      	ands	r1, r3
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	3b5f      	subs	r3, #95	; 0x5f
 80015ca:	fa00 f203 	lsl.w	r2, r0, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	635a      	str	r2, [r3, #52]	; 0x34
 80015d6:	e01b      	b.n	8001610 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	3b7d      	subs	r3, #125	; 0x7d
 80015ea:	221f      	movs	r2, #31
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	4019      	ands	r1, r3
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	6818      	ldr	r0, [r3, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	3b7d      	subs	r3, #125	; 0x7d
 8001604:	fa00 f203 	lsl.w	r2, r0, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b09      	cmp	r3, #9
 8001616:	d81a      	bhi.n	800164e <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6959      	ldr	r1, [r3, #20]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	2207      	movs	r2, #7
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	4019      	ands	r1, r3
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	6898      	ldr	r0, [r3, #8]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	fa00 f203 	lsl.w	r2, r0, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	615a      	str	r2, [r3, #20]
 800164c:	e05d      	b.n	800170a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b13      	cmp	r3, #19
 8001654:	d81c      	bhi.n	8001690 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6919      	ldr	r1, [r3, #16]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4613      	mov	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	3b1e      	subs	r3, #30
 8001668:	2207      	movs	r2, #7
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	4019      	ands	r1, r3
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	6898      	ldr	r0, [r3, #8]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	4613      	mov	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4413      	add	r3, r2
 8001680:	3b1e      	subs	r3, #30
 8001682:	fa00 f203 	lsl.w	r2, r0, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	430a      	orrs	r2, r1
 800168c:	611a      	str	r2, [r3, #16]
 800168e:	e03c      	b.n	800170a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b1d      	cmp	r3, #29
 8001696:	d81c      	bhi.n	80016d2 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68d9      	ldr	r1, [r3, #12]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	4613      	mov	r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4413      	add	r3, r2
 80016a8:	3b3c      	subs	r3, #60	; 0x3c
 80016aa:	2207      	movs	r2, #7
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	4019      	ands	r1, r3
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	6898      	ldr	r0, [r3, #8]
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4613      	mov	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	4413      	add	r3, r2
 80016c2:	3b3c      	subs	r3, #60	; 0x3c
 80016c4:	fa00 f203 	lsl.w	r2, r0, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	e01b      	b.n	800170a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	4413      	add	r3, r2
 80016e2:	3b5a      	subs	r3, #90	; 0x5a
 80016e4:	2207      	movs	r2, #7
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	4019      	ands	r1, r3
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	6898      	ldr	r0, [r3, #8]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4613      	mov	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	3b5a      	subs	r3, #90	; 0x5a
 80016fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b10      	cmp	r3, #16
 8001710:	d003      	beq.n	800171a <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001716:	2b11      	cmp	r3, #17
 8001718:	d121      	bne.n	800175e <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800171a:	4b16      	ldr	r3, [pc, #88]	; (8001774 <HAL_ADC_ConfigChannel+0x2cc>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d11b      	bne.n	800175e <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001726:	4b13      	ldr	r3, [pc, #76]	; (8001774 <HAL_ADC_ConfigChannel+0x2cc>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	4a12      	ldr	r2, [pc, #72]	; (8001774 <HAL_ADC_ConfigChannel+0x2cc>)
 800172c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001730:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b10      	cmp	r3, #16
 8001738:	d111      	bne.n	800175e <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <HAL_ADC_ConfigChannel+0x2d0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a0f      	ldr	r2, [pc, #60]	; (800177c <HAL_ADC_ConfigChannel+0x2d4>)
 8001740:	fba2 2303 	umull	r2, r3, r2, r3
 8001744:	0c9a      	lsrs	r2, r3, #18
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001750:	e002      	b.n	8001758 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	3b01      	subs	r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f9      	bne.n	8001752 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40012700 	.word	0x40012700
 8001778:	20000054 	.word	0x20000054
 800177c:	431bde83 	.word	0x431bde83

08001780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800179c:	4013      	ands	r3, r2
 800179e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b2:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	60d3      	str	r3, [r2, #12]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	f003 0307 	and.w	r3, r3, #7
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db0b      	blt.n	800180e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	f003 021f 	and.w	r2, r3, #31
 80017fc:	4906      	ldr	r1, [pc, #24]	; (8001818 <__NVIC_EnableIRQ+0x34>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	2001      	movs	r0, #1
 8001806:	fa00 f202 	lsl.w	r2, r0, r2
 800180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	e000e100 	.word	0xe000e100

0800181c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	6039      	str	r1, [r7, #0]
 8001826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	2b00      	cmp	r3, #0
 800182e:	db0a      	blt.n	8001846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	b2da      	uxtb	r2, r3
 8001834:	490c      	ldr	r1, [pc, #48]	; (8001868 <__NVIC_SetPriority+0x4c>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	0112      	lsls	r2, r2, #4
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	440b      	add	r3, r1
 8001840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001844:	e00a      	b.n	800185c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4908      	ldr	r1, [pc, #32]	; (800186c <__NVIC_SetPriority+0x50>)
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	3b04      	subs	r3, #4
 8001854:	0112      	lsls	r2, r2, #4
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	440b      	add	r3, r1
 800185a:	761a      	strb	r2, [r3, #24]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000e100 	.word	0xe000e100
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	; 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f1c3 0307 	rsb	r3, r3, #7
 800188a:	2b04      	cmp	r3, #4
 800188c:	bf28      	it	cs
 800188e:	2304      	movcs	r3, #4
 8001890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3304      	adds	r3, #4
 8001896:	2b06      	cmp	r3, #6
 8001898:	d902      	bls.n	80018a0 <NVIC_EncodePriority+0x30>
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3b03      	subs	r3, #3
 800189e:	e000      	b.n	80018a2 <NVIC_EncodePriority+0x32>
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	f04f 32ff 	mov.w	r2, #4294967295
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43da      	mvns	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	401a      	ands	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b8:	f04f 31ff 	mov.w	r1, #4294967295
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	43d9      	mvns	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	4313      	orrs	r3, r2
         );
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3724      	adds	r7, #36	; 0x24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff ff4f 	bl	8001780 <__NVIC_SetPriorityGrouping>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
 80018f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018fc:	f7ff ff64 	bl	80017c8 <__NVIC_GetPriorityGrouping>
 8001900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	6978      	ldr	r0, [r7, #20]
 8001908:	f7ff ffb2 	bl	8001870 <NVIC_EncodePriority>
 800190c:	4602      	mov	r2, r0
 800190e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff81 	bl	800181c <__NVIC_SetPriority>
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff57 	bl	80017e4 <__NVIC_EnableIRQ>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001940:	b480      	push	{r7}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001956:	e160      	b.n	8001c1a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	2101      	movs	r1, #1
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	fa01 f303 	lsl.w	r3, r1, r3
 8001964:	4013      	ands	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 8152 	beq.w	8001c14 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b02      	cmp	r3, #2
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x40>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b12      	cmp	r3, #18
 800197e:	d123      	bne.n	80019c8 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	08da      	lsrs	r2, r3, #3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3208      	adds	r2, #8
 8001988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	220f      	movs	r2, #15
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	691a      	ldr	r2, [r3, #16]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	08da      	lsrs	r2, r3, #3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3208      	adds	r2, #8
 80019c2:	6939      	ldr	r1, [r7, #16]
 80019c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	2203      	movs	r2, #3
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0203 	and.w	r2, r3, #3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d00b      	beq.n	8001a1c <HAL_GPIO_Init+0xdc>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d007      	beq.n	8001a1c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a10:	2b11      	cmp	r3, #17
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b12      	cmp	r3, #18
 8001a1a:	d130      	bne.n	8001a7e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	2203      	movs	r2, #3
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001a52:	2201      	movs	r2, #1
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	091b      	lsrs	r3, r3, #4
 8001a68:	f003 0201 	and.w	r2, r3, #1
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	2203      	movs	r2, #3
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 80ac 	beq.w	8001c14 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001abc:	4b5d      	ldr	r3, [pc, #372]	; (8001c34 <HAL_GPIO_Init+0x2f4>)
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	4a5c      	ldr	r2, [pc, #368]	; (8001c34 <HAL_GPIO_Init+0x2f4>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6213      	str	r3, [r2, #32]
 8001ac8:	4b5a      	ldr	r3, [pc, #360]	; (8001c34 <HAL_GPIO_Init+0x2f4>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8001ad4:	4a58      	ldr	r2, [pc, #352]	; (8001c38 <HAL_GPIO_Init+0x2f8>)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	089b      	lsrs	r3, r3, #2
 8001ada:	3302      	adds	r3, #2
 8001adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	220f      	movs	r2, #15
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a50      	ldr	r2, [pc, #320]	; (8001c3c <HAL_GPIO_Init+0x2fc>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d025      	beq.n	8001b4c <HAL_GPIO_Init+0x20c>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a4f      	ldr	r2, [pc, #316]	; (8001c40 <HAL_GPIO_Init+0x300>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d01f      	beq.n	8001b48 <HAL_GPIO_Init+0x208>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a4e      	ldr	r2, [pc, #312]	; (8001c44 <HAL_GPIO_Init+0x304>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d019      	beq.n	8001b44 <HAL_GPIO_Init+0x204>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a4d      	ldr	r2, [pc, #308]	; (8001c48 <HAL_GPIO_Init+0x308>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d013      	beq.n	8001b40 <HAL_GPIO_Init+0x200>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a4c      	ldr	r2, [pc, #304]	; (8001c4c <HAL_GPIO_Init+0x30c>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d00d      	beq.n	8001b3c <HAL_GPIO_Init+0x1fc>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a4b      	ldr	r2, [pc, #300]	; (8001c50 <HAL_GPIO_Init+0x310>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d007      	beq.n	8001b38 <HAL_GPIO_Init+0x1f8>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a4a      	ldr	r2, [pc, #296]	; (8001c54 <HAL_GPIO_Init+0x314>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d101      	bne.n	8001b34 <HAL_GPIO_Init+0x1f4>
 8001b30:	2306      	movs	r3, #6
 8001b32:	e00c      	b.n	8001b4e <HAL_GPIO_Init+0x20e>
 8001b34:	2307      	movs	r3, #7
 8001b36:	e00a      	b.n	8001b4e <HAL_GPIO_Init+0x20e>
 8001b38:	2305      	movs	r3, #5
 8001b3a:	e008      	b.n	8001b4e <HAL_GPIO_Init+0x20e>
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	e006      	b.n	8001b4e <HAL_GPIO_Init+0x20e>
 8001b40:	2303      	movs	r3, #3
 8001b42:	e004      	b.n	8001b4e <HAL_GPIO_Init+0x20e>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e002      	b.n	8001b4e <HAL_GPIO_Init+0x20e>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <HAL_GPIO_Init+0x20e>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	f002 0203 	and.w	r2, r2, #3
 8001b54:	0092      	lsls	r2, r2, #2
 8001b56:	4093      	lsls	r3, r2
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b5e:	4936      	ldr	r1, [pc, #216]	; (8001c38 <HAL_GPIO_Init+0x2f8>)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	089b      	lsrs	r3, r3, #2
 8001b64:	3302      	adds	r3, #2
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b6c:	4b3a      	ldr	r3, [pc, #232]	; (8001c58 <HAL_GPIO_Init+0x318>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b90:	4a31      	ldr	r2, [pc, #196]	; (8001c58 <HAL_GPIO_Init+0x318>)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b96:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HAL_GPIO_Init+0x318>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bba:	4a27      	ldr	r2, [pc, #156]	; (8001c58 <HAL_GPIO_Init+0x318>)
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bc0:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <HAL_GPIO_Init+0x318>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001be4:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <HAL_GPIO_Init+0x318>)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bea:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <HAL_GPIO_Init+0x318>)
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c0e:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <HAL_GPIO_Init+0x318>)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3301      	adds	r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	fa22 f303 	lsr.w	r3, r2, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f47f ae97 	bne.w	8001958 <HAL_GPIO_Init+0x18>
  } 
}
 8001c2a:	bf00      	nop
 8001c2c:	371c      	adds	r7, #28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40010000 	.word	0x40010000
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	40020400 	.word	0x40020400
 8001c44:	40020800 	.word	0x40020800
 8001c48:	40020c00 	.word	0x40020c00
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40021400 	.word	0x40021400
 8001c54:	40021800 	.word	0x40021800
 8001c58:	40010400 	.word	0x40010400

08001c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c6c:	787b      	ldrb	r3, [r7, #1]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001c78:	e003      	b.n	8001c82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001c7a:	887b      	ldrh	r3, [r7, #2]
 8001c7c:	041a      	lsls	r2, r3, #16
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	619a      	str	r2, [r3, #24]
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001c96:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c98:	695a      	ldr	r2, [r3, #20]
 8001c9a:	88fb      	ldrh	r3, [r7, #6]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d006      	beq.n	8001cb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ca2:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ca4:	88fb      	ldrh	r3, [r7, #6]
 8001ca6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 f806 	bl	8001cbc <HAL_GPIO_EXTI_Callback>
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40010400 	.word	0x40010400

08001cbc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e10f      	b.n	8001f02 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d106      	bne.n	8001cfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7fe fe1c 	bl	8000934 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2224      	movs	r2, #36	; 0x24
 8001d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0201 	bic.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d14:	f000 fdca 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8001d18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	4a7b      	ldr	r2, [pc, #492]	; (8001f0c <HAL_I2C_Init+0x23c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d807      	bhi.n	8001d34 <HAL_I2C_Init+0x64>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4a7a      	ldr	r2, [pc, #488]	; (8001f10 <HAL_I2C_Init+0x240>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	bf94      	ite	ls
 8001d2c:	2301      	movls	r3, #1
 8001d2e:	2300      	movhi	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	e006      	b.n	8001d42 <HAL_I2C_Init+0x72>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4a77      	ldr	r2, [pc, #476]	; (8001f14 <HAL_I2C_Init+0x244>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	bf94      	ite	ls
 8001d3c:	2301      	movls	r3, #1
 8001d3e:	2300      	movhi	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e0db      	b.n	8001f02 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4a72      	ldr	r2, [pc, #456]	; (8001f18 <HAL_I2C_Init+0x248>)
 8001d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d52:	0c9b      	lsrs	r3, r3, #18
 8001d54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68ba      	ldr	r2, [r7, #8]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	4a64      	ldr	r2, [pc, #400]	; (8001f0c <HAL_I2C_Init+0x23c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d802      	bhi.n	8001d84 <HAL_I2C_Init+0xb4>
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	3301      	adds	r3, #1
 8001d82:	e009      	b.n	8001d98 <HAL_I2C_Init+0xc8>
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d8a:	fb02 f303 	mul.w	r3, r2, r3
 8001d8e:	4a63      	ldr	r2, [pc, #396]	; (8001f1c <HAL_I2C_Init+0x24c>)
 8001d90:	fba2 2303 	umull	r2, r3, r2, r3
 8001d94:	099b      	lsrs	r3, r3, #6
 8001d96:	3301      	adds	r3, #1
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	430b      	orrs	r3, r1
 8001d9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001daa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4956      	ldr	r1, [pc, #344]	; (8001f0c <HAL_I2C_Init+0x23c>)
 8001db4:	428b      	cmp	r3, r1
 8001db6:	d80d      	bhi.n	8001dd4 <HAL_I2C_Init+0x104>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	1e59      	subs	r1, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	bf38      	it	cc
 8001dd0:	2304      	movcc	r3, #4
 8001dd2:	e04f      	b.n	8001e74 <HAL_I2C_Init+0x1a4>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d111      	bne.n	8001e00 <HAL_I2C_Init+0x130>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	1e58      	subs	r0, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6859      	ldr	r1, [r3, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	440b      	add	r3, r1
 8001dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dee:	3301      	adds	r3, #1
 8001df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	bf0c      	ite	eq
 8001df8:	2301      	moveq	r3, #1
 8001dfa:	2300      	movne	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	e012      	b.n	8001e26 <HAL_I2C_Init+0x156>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	1e58      	subs	r0, r3, #1
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6859      	ldr	r1, [r3, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	0099      	lsls	r1, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e16:	3301      	adds	r3, #1
 8001e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf0c      	ite	eq
 8001e20:	2301      	moveq	r3, #1
 8001e22:	2300      	movne	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_I2C_Init+0x15e>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e022      	b.n	8001e74 <HAL_I2C_Init+0x1a4>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10e      	bne.n	8001e54 <HAL_I2C_Init+0x184>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	1e58      	subs	r0, r3, #1
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6859      	ldr	r1, [r3, #4]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	440b      	add	r3, r1
 8001e44:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e48:	3301      	adds	r3, #1
 8001e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e52:	e00f      	b.n	8001e74 <HAL_I2C_Init+0x1a4>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1e58      	subs	r0, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6859      	ldr	r1, [r3, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	0099      	lsls	r1, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	6809      	ldr	r1, [r1, #0]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69da      	ldr	r2, [r3, #28]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ea2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6911      	ldr	r1, [r2, #16]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	68d2      	ldr	r2, [r2, #12]
 8001eae:	4311      	orrs	r1, r2
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695a      	ldr	r2, [r3, #20]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0201 	orr.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2220      	movs	r2, #32
 8001eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	000186a0 	.word	0x000186a0
 8001f10:	001e847f 	.word	0x001e847f
 8001f14:	003d08ff 	.word	0x003d08ff
 8001f18:	431bde83 	.word	0x431bde83
 8001f1c:	10624dd3 	.word	0x10624dd3

08001f20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e31d      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f32:	4b94      	ldr	r3, [pc, #592]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f3c:	4b91      	ldr	r3, [pc, #580]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f44:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d07b      	beq.n	800204a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d006      	beq.n	8001f66 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	2b0c      	cmp	r3, #12
 8001f5c:	d10f      	bne.n	8001f7e <HAL_RCC_OscConfig+0x5e>
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f64:	d10b      	bne.n	8001f7e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f66:	4b87      	ldr	r3, [pc, #540]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d06a      	beq.n	8002048 <HAL_RCC_OscConfig+0x128>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d166      	bne.n	8002048 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e2f7      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d106      	bne.n	8001f94 <HAL_RCC_OscConfig+0x74>
 8001f86:	4b7f      	ldr	r3, [pc, #508]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a7e      	ldr	r2, [pc, #504]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e02d      	b.n	8001ff0 <HAL_RCC_OscConfig+0xd0>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10c      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x96>
 8001f9c:	4b79      	ldr	r3, [pc, #484]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a78      	ldr	r2, [pc, #480]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa6:	6013      	str	r3, [r2, #0]
 8001fa8:	4b76      	ldr	r3, [pc, #472]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a75      	ldr	r2, [pc, #468]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	e01c      	b.n	8001ff0 <HAL_RCC_OscConfig+0xd0>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b05      	cmp	r3, #5
 8001fbc:	d10c      	bne.n	8001fd8 <HAL_RCC_OscConfig+0xb8>
 8001fbe:	4b71      	ldr	r3, [pc, #452]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a70      	ldr	r2, [pc, #448]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	4b6e      	ldr	r3, [pc, #440]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a6d      	ldr	r2, [pc, #436]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	e00b      	b.n	8001ff0 <HAL_RCC_OscConfig+0xd0>
 8001fd8:	4b6a      	ldr	r3, [pc, #424]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a69      	ldr	r2, [pc, #420]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	4b67      	ldr	r3, [pc, #412]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a66      	ldr	r2, [pc, #408]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8001fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d013      	beq.n	8002020 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7ff f906 	bl	8001208 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002000:	f7ff f902 	bl	8001208 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b64      	cmp	r3, #100	; 0x64
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e2ad      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002012:	4b5c      	ldr	r3, [pc, #368]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f0      	beq.n	8002000 <HAL_RCC_OscConfig+0xe0>
 800201e:	e014      	b.n	800204a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002020:	f7ff f8f2 	bl	8001208 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002028:	f7ff f8ee 	bl	8001208 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b64      	cmp	r3, #100	; 0x64
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e299      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800203a:	4b52      	ldr	r3, [pc, #328]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x108>
 8002046:	e000      	b.n	800204a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d05a      	beq.n	800210c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	2b04      	cmp	r3, #4
 800205a:	d005      	beq.n	8002068 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	2b0c      	cmp	r3, #12
 8002060:	d119      	bne.n	8002096 <HAL_RCC_OscConfig+0x176>
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d116      	bne.n	8002096 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002068:	4b46      	ldr	r3, [pc, #280]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_RCC_OscConfig+0x160>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d001      	beq.n	8002080 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e276      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002080:	4b40      	ldr	r3, [pc, #256]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	493d      	ldr	r1, [pc, #244]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8002090:	4313      	orrs	r3, r2
 8002092:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002094:	e03a      	b.n	800210c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d020      	beq.n	80020e0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800209e:	4b3a      	ldr	r3, [pc, #232]	; (8002188 <HAL_RCC_OscConfig+0x268>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7ff f8b0 	bl	8001208 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ac:	f7ff f8ac 	bl	8001208 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e257      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020be:	4b31      	ldr	r3, [pc, #196]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ca:	4b2e      	ldr	r3, [pc, #184]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	492a      	ldr	r1, [pc, #168]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	604b      	str	r3, [r1, #4]
 80020de:	e015      	b.n	800210c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020e0:	4b29      	ldr	r3, [pc, #164]	; (8002188 <HAL_RCC_OscConfig+0x268>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e6:	f7ff f88f 	bl	8001208 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ee:	f7ff f88b 	bl	8001208 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e236      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002100:	4b20      	ldr	r3, [pc, #128]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1f0      	bne.n	80020ee <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 80b8 	beq.w	800228a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d170      	bne.n	8002202 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002120:	4b18      	ldr	r3, [pc, #96]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_OscConfig+0x218>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e21a      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1a      	ldr	r2, [r3, #32]
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002144:	429a      	cmp	r2, r3
 8002146:	d921      	bls.n	800218c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	4618      	mov	r0, r3
 800214e:	f000 fc05 	bl	800295c <RCC_SetFlashLatencyFromMSIRange>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e208      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4906      	ldr	r1, [pc, #24]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 800216a:	4313      	orrs	r3, r2
 800216c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	061b      	lsls	r3, r3, #24
 800217c:	4901      	ldr	r1, [pc, #4]	; (8002184 <HAL_RCC_OscConfig+0x264>)
 800217e:	4313      	orrs	r3, r2
 8002180:	604b      	str	r3, [r1, #4]
 8002182:	e020      	b.n	80021c6 <HAL_RCC_OscConfig+0x2a6>
 8002184:	40023800 	.word	0x40023800
 8002188:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800218c:	4ba4      	ldr	r3, [pc, #656]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	49a1      	ldr	r1, [pc, #644]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800219e:	4ba0      	ldr	r3, [pc, #640]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	061b      	lsls	r3, r3, #24
 80021ac:	499c      	ldr	r1, [pc, #624]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 fbd0 	bl	800295c <RCC_SetFlashLatencyFromMSIRange>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e1d3      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	0b5b      	lsrs	r3, r3, #13
 80021cc:	3301      	adds	r3, #1
 80021ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80021d6:	4a92      	ldr	r2, [pc, #584]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 80021d8:	6892      	ldr	r2, [r2, #8]
 80021da:	0912      	lsrs	r2, r2, #4
 80021dc:	f002 020f 	and.w	r2, r2, #15
 80021e0:	4990      	ldr	r1, [pc, #576]	; (8002424 <HAL_RCC_OscConfig+0x504>)
 80021e2:	5c8a      	ldrb	r2, [r1, r2]
 80021e4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021e6:	4a90      	ldr	r2, [pc, #576]	; (8002428 <HAL_RCC_OscConfig+0x508>)
 80021e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021ea:	4b90      	ldr	r3, [pc, #576]	; (800242c <HAL_RCC_OscConfig+0x50c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe fc9e 	bl	8000b30 <HAL_InitTick>
 80021f4:	4603      	mov	r3, r0
 80021f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d045      	beq.n	800228a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	e1b5      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d029      	beq.n	800225e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800220a:	4b89      	ldr	r3, [pc, #548]	; (8002430 <HAL_RCC_OscConfig+0x510>)
 800220c:	2201      	movs	r2, #1
 800220e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7fe fffa 	bl	8001208 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002218:	f7fe fff6 	bl	8001208 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e1a1      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800222a:	4b7d      	ldr	r3, [pc, #500]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002236:	4b7a      	ldr	r3, [pc, #488]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4977      	ldr	r1, [pc, #476]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002248:	4b75      	ldr	r3, [pc, #468]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	061b      	lsls	r3, r3, #24
 8002256:	4972      	ldr	r1, [pc, #456]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]
 800225c:	e015      	b.n	800228a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800225e:	4b74      	ldr	r3, [pc, #464]	; (8002430 <HAL_RCC_OscConfig+0x510>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7fe ffd0 	bl	8001208 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800226c:	f7fe ffcc 	bl	8001208 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e177      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800227e:	4b68      	ldr	r3, [pc, #416]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d030      	beq.n	80022f8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d016      	beq.n	80022cc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800229e:	4b65      	ldr	r3, [pc, #404]	; (8002434 <HAL_RCC_OscConfig+0x514>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a4:	f7fe ffb0 	bl	8001208 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ac:	f7fe ffac 	bl	8001208 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e157      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022be:	4b58      	ldr	r3, [pc, #352]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 80022c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x38c>
 80022ca:	e015      	b.n	80022f8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022cc:	4b59      	ldr	r3, [pc, #356]	; (8002434 <HAL_RCC_OscConfig+0x514>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d2:	f7fe ff99 	bl	8001208 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022da:	f7fe ff95 	bl	8001208 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e140      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022ec:	4b4c      	ldr	r3, [pc, #304]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 80022ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f0      	bne.n	80022da <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80b5 	beq.w	8002470 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002306:	2300      	movs	r3, #0
 8002308:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800230a:	4b45      	ldr	r3, [pc, #276]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10d      	bne.n	8002332 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002316:	4b42      	ldr	r3, [pc, #264]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	4a41      	ldr	r2, [pc, #260]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 800231c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002320:	6253      	str	r3, [r2, #36]	; 0x24
 8002322:	4b3f      	ldr	r3, [pc, #252]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800232e:	2301      	movs	r3, #1
 8002330:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002332:	4b41      	ldr	r3, [pc, #260]	; (8002438 <HAL_RCC_OscConfig+0x518>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233a:	2b00      	cmp	r3, #0
 800233c:	d118      	bne.n	8002370 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800233e:	4b3e      	ldr	r3, [pc, #248]	; (8002438 <HAL_RCC_OscConfig+0x518>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a3d      	ldr	r2, [pc, #244]	; (8002438 <HAL_RCC_OscConfig+0x518>)
 8002344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800234a:	f7fe ff5d 	bl	8001208 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002352:	f7fe ff59 	bl	8001208 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b64      	cmp	r3, #100	; 0x64
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e104      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002364:	4b34      	ldr	r3, [pc, #208]	; (8002438 <HAL_RCC_OscConfig+0x518>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d106      	bne.n	8002386 <HAL_RCC_OscConfig+0x466>
 8002378:	4b29      	ldr	r3, [pc, #164]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 800237a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237c:	4a28      	ldr	r2, [pc, #160]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 800237e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002382:	6353      	str	r3, [r2, #52]	; 0x34
 8002384:	e02d      	b.n	80023e2 <HAL_RCC_OscConfig+0x4c2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x488>
 800238e:	4b24      	ldr	r3, [pc, #144]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 8002390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002392:	4a23      	ldr	r2, [pc, #140]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 8002394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002398:	6353      	str	r3, [r2, #52]	; 0x34
 800239a:	4b21      	ldr	r3, [pc, #132]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 800239c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239e:	4a20      	ldr	r2, [pc, #128]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 80023a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023a4:	6353      	str	r3, [r2, #52]	; 0x34
 80023a6:	e01c      	b.n	80023e2 <HAL_RCC_OscConfig+0x4c2>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b05      	cmp	r3, #5
 80023ae:	d10c      	bne.n	80023ca <HAL_RCC_OscConfig+0x4aa>
 80023b0:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 80023b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b4:	4a1a      	ldr	r2, [pc, #104]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 80023b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ba:	6353      	str	r3, [r2, #52]	; 0x34
 80023bc:	4b18      	ldr	r3, [pc, #96]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 80023be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c0:	4a17      	ldr	r2, [pc, #92]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 80023c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c6:	6353      	str	r3, [r2, #52]	; 0x34
 80023c8:	e00b      	b.n	80023e2 <HAL_RCC_OscConfig+0x4c2>
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 80023cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ce:	4a14      	ldr	r2, [pc, #80]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 80023d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023d4:	6353      	str	r3, [r2, #52]	; 0x34
 80023d6:	4b12      	ldr	r3, [pc, #72]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 80023d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023da:	4a11      	ldr	r2, [pc, #68]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 80023dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023e0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d015      	beq.n	8002416 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ea:	f7fe ff0d 	bl	8001208 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023f0:	e00a      	b.n	8002408 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f2:	f7fe ff09 	bl	8001208 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002400:	4293      	cmp	r3, r2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e0b2      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <HAL_RCC_OscConfig+0x500>)
 800240a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800240c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0ee      	beq.n	80023f2 <HAL_RCC_OscConfig+0x4d2>
 8002414:	e023      	b.n	800245e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002416:	f7fe fef7 	bl	8001208 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800241c:	e019      	b.n	8002452 <HAL_RCC_OscConfig+0x532>
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800
 8002424:	080067f0 	.word	0x080067f0
 8002428:	20000054 	.word	0x20000054
 800242c:	20000058 	.word	0x20000058
 8002430:	42470020 	.word	0x42470020
 8002434:	42470680 	.word	0x42470680
 8002438:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800243c:	f7fe fee4 	bl	8001208 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	; 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e08d      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002452:	4b49      	ldr	r3, [pc, #292]	; (8002578 <HAL_RCC_OscConfig+0x658>)
 8002454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1ee      	bne.n	800243c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800245e:	7ffb      	ldrb	r3, [r7, #31]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d105      	bne.n	8002470 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002464:	4b44      	ldr	r3, [pc, #272]	; (8002578 <HAL_RCC_OscConfig+0x658>)
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	4a43      	ldr	r2, [pc, #268]	; (8002578 <HAL_RCC_OscConfig+0x658>)
 800246a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800246e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	2b00      	cmp	r3, #0
 8002476:	d079      	beq.n	800256c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2b0c      	cmp	r3, #12
 800247c:	d056      	beq.n	800252c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	2b02      	cmp	r3, #2
 8002484:	d13b      	bne.n	80024fe <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002486:	4b3d      	ldr	r3, [pc, #244]	; (800257c <HAL_RCC_OscConfig+0x65c>)
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248c:	f7fe febc 	bl	8001208 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002494:	f7fe feb8 	bl	8001208 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e063      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024a6:	4b34      	ldr	r3, [pc, #208]	; (8002578 <HAL_RCC_OscConfig+0x658>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024b2:	4b31      	ldr	r3, [pc, #196]	; (8002578 <HAL_RCC_OscConfig+0x658>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c2:	4319      	orrs	r1, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	430b      	orrs	r3, r1
 80024ca:	492b      	ldr	r1, [pc, #172]	; (8002578 <HAL_RCC_OscConfig+0x658>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d0:	4b2a      	ldr	r3, [pc, #168]	; (800257c <HAL_RCC_OscConfig+0x65c>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d6:	f7fe fe97 	bl	8001208 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024de:	f7fe fe93 	bl	8001208 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e03e      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024f0:	4b21      	ldr	r3, [pc, #132]	; (8002578 <HAL_RCC_OscConfig+0x658>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x5be>
 80024fc:	e036      	b.n	800256c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fe:	4b1f      	ldr	r3, [pc, #124]	; (800257c <HAL_RCC_OscConfig+0x65c>)
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7fe fe80 	bl	8001208 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800250c:	f7fe fe7c 	bl	8001208 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e027      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800251e:	4b16      	ldr	r3, [pc, #88]	; (8002578 <HAL_RCC_OscConfig+0x658>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0x5ec>
 800252a:	e01f      	b.n	800256c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e01a      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <HAL_RCC_OscConfig+0x658>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002548:	429a      	cmp	r2, r3
 800254a:	d10d      	bne.n	8002568 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	429a      	cmp	r2, r3
 8002558:	d106      	bne.n	8002568 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002564:	429a      	cmp	r2, r3
 8002566:	d001      	beq.n	800256c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3720      	adds	r7, #32
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40023800 	.word	0x40023800
 800257c:	42470060 	.word	0x42470060

08002580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e11a      	b.n	80027ca <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002594:	4b8f      	ldr	r3, [pc, #572]	; (80027d4 <HAL_RCC_ClockConfig+0x254>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d919      	bls.n	80025d6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d105      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x34>
 80025a8:	4b8a      	ldr	r3, [pc, #552]	; (80027d4 <HAL_RCC_ClockConfig+0x254>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a89      	ldr	r2, [pc, #548]	; (80027d4 <HAL_RCC_ClockConfig+0x254>)
 80025ae:	f043 0304 	orr.w	r3, r3, #4
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	4b87      	ldr	r3, [pc, #540]	; (80027d4 <HAL_RCC_ClockConfig+0x254>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f023 0201 	bic.w	r2, r3, #1
 80025bc:	4985      	ldr	r1, [pc, #532]	; (80027d4 <HAL_RCC_ClockConfig+0x254>)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c4:	4b83      	ldr	r3, [pc, #524]	; (80027d4 <HAL_RCC_ClockConfig+0x254>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d001      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e0f9      	b.n	80027ca <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d008      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e2:	4b7d      	ldr	r3, [pc, #500]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	497a      	ldr	r1, [pc, #488]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 808e 	beq.w	800271e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d107      	bne.n	800261a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800260a:	4b73      	ldr	r3, [pc, #460]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d121      	bne.n	800265a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e0d7      	b.n	80027ca <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b03      	cmp	r3, #3
 8002620:	d107      	bne.n	8002632 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002622:	4b6d      	ldr	r3, [pc, #436]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d115      	bne.n	800265a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e0cb      	b.n	80027ca <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d107      	bne.n	800264a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800263a:	4b67      	ldr	r3, [pc, #412]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d109      	bne.n	800265a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e0bf      	b.n	80027ca <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800264a:	4b63      	ldr	r3, [pc, #396]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e0b7      	b.n	80027ca <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800265a:	4b5f      	ldr	r3, [pc, #380]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f023 0203 	bic.w	r2, r3, #3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	495c      	ldr	r1, [pc, #368]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 8002668:	4313      	orrs	r3, r2
 800266a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800266c:	f7fe fdcc 	bl	8001208 <HAL_GetTick>
 8002670:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d112      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800267a:	e00a      	b.n	8002692 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800267c:	f7fe fdc4 	bl	8001208 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	f241 3288 	movw	r2, #5000	; 0x1388
 800268a:	4293      	cmp	r3, r2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e09b      	b.n	80027ca <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002692:	4b51      	ldr	r3, [pc, #324]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b08      	cmp	r3, #8
 800269c:	d1ee      	bne.n	800267c <HAL_RCC_ClockConfig+0xfc>
 800269e:	e03e      	b.n	800271e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d112      	bne.n	80026ce <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026a8:	e00a      	b.n	80026c0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026aa:	f7fe fdad 	bl	8001208 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e084      	b.n	80027ca <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026c0:	4b45      	ldr	r3, [pc, #276]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 030c 	and.w	r3, r3, #12
 80026c8:	2b0c      	cmp	r3, #12
 80026ca:	d1ee      	bne.n	80026aa <HAL_RCC_ClockConfig+0x12a>
 80026cc:	e027      	b.n	800271e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d11d      	bne.n	8002712 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026d6:	e00a      	b.n	80026ee <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d8:	f7fe fd96 	bl	8001208 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e06d      	b.n	80027ca <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026ee:	4b3a      	ldr	r3, [pc, #232]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d1ee      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x158>
 80026fa:	e010      	b.n	800271e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026fc:	f7fe fd84 	bl	8001208 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	; 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e05b      	b.n	80027ca <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002712:	4b31      	ldr	r3, [pc, #196]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1ee      	bne.n	80026fc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800271e:	4b2d      	ldr	r3, [pc, #180]	; (80027d4 <HAL_RCC_ClockConfig+0x254>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d219      	bcs.n	8002760 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d105      	bne.n	800273e <HAL_RCC_ClockConfig+0x1be>
 8002732:	4b28      	ldr	r3, [pc, #160]	; (80027d4 <HAL_RCC_ClockConfig+0x254>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a27      	ldr	r2, [pc, #156]	; (80027d4 <HAL_RCC_ClockConfig+0x254>)
 8002738:	f043 0304 	orr.w	r3, r3, #4
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <HAL_RCC_ClockConfig+0x254>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 0201 	bic.w	r2, r3, #1
 8002746:	4923      	ldr	r1, [pc, #140]	; (80027d4 <HAL_RCC_ClockConfig+0x254>)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800274e:	4b21      	ldr	r3, [pc, #132]	; (80027d4 <HAL_RCC_ClockConfig+0x254>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d001      	beq.n	8002760 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e034      	b.n	80027ca <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800276c:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4917      	ldr	r1, [pc, #92]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 800277a:	4313      	orrs	r3, r2
 800277c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b00      	cmp	r3, #0
 8002788:	d009      	beq.n	800279e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800278a:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	490f      	ldr	r1, [pc, #60]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 800279a:	4313      	orrs	r3, r2
 800279c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800279e:	f000 f823 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 80027a2:	4601      	mov	r1, r0
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <HAL_RCC_ClockConfig+0x258>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	091b      	lsrs	r3, r3, #4
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	4a0b      	ldr	r2, [pc, #44]	; (80027dc <HAL_RCC_ClockConfig+0x25c>)
 80027b0:	5cd3      	ldrb	r3, [r2, r3]
 80027b2:	fa21 f303 	lsr.w	r3, r1, r3
 80027b6:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <HAL_RCC_ClockConfig+0x260>)
 80027b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027ba:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <HAL_RCC_ClockConfig+0x264>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe f9b6 	bl	8000b30 <HAL_InitTick>
 80027c4:	4603      	mov	r3, r0
 80027c6:	72fb      	strb	r3, [r7, #11]

  return status;
 80027c8:	7afb      	ldrb	r3, [r7, #11]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40023c00 	.word	0x40023c00
 80027d8:	40023800 	.word	0x40023800
 80027dc:	080067f0 	.word	0x080067f0
 80027e0:	20000054 	.word	0x20000054
 80027e4:	20000058 	.word	0x20000058

080027e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80027ee:	4b26      	ldr	r3, [pc, #152]	; (8002888 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d006      	beq.n	800280c <HAL_RCC_GetSysClockFreq+0x24>
 80027fe:	2b0c      	cmp	r3, #12
 8002800:	d007      	beq.n	8002812 <HAL_RCC_GetSysClockFreq+0x2a>
 8002802:	2b04      	cmp	r3, #4
 8002804:	d12c      	bne.n	8002860 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002806:	4b21      	ldr	r3, [pc, #132]	; (800288c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002808:	613b      	str	r3, [r7, #16]
      break;
 800280a:	e037      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800280c:	4b20      	ldr	r3, [pc, #128]	; (8002890 <HAL_RCC_GetSysClockFreq+0xa8>)
 800280e:	613b      	str	r3, [r7, #16]
      break;
 8002810:	e034      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	0c9b      	lsrs	r3, r3, #18
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	4a1e      	ldr	r2, [pc, #120]	; (8002894 <HAL_RCC_GetSysClockFreq+0xac>)
 800281c:	5cd3      	ldrb	r3, [r2, r3]
 800281e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	0d9b      	lsrs	r3, r3, #22
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	3301      	adds	r3, #1
 800282a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800282c:	4b16      	ldr	r3, [pc, #88]	; (8002888 <HAL_RCC_GetSysClockFreq+0xa0>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4a15      	ldr	r2, [pc, #84]	; (8002890 <HAL_RCC_GetSysClockFreq+0xa8>)
 800283c:	fb02 f203 	mul.w	r2, r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	fbb2 f3f3 	udiv	r3, r2, r3
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	e007      	b.n	800285a <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	4a0f      	ldr	r2, [pc, #60]	; (800288c <HAL_RCC_GetSysClockFreq+0xa4>)
 800284e:	fb02 f203 	mul.w	r2, r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	fbb2 f3f3 	udiv	r3, r2, r3
 8002858:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	613b      	str	r3, [r7, #16]
      break;
 800285e:	e00d      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	0b5b      	lsrs	r3, r3, #13
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	3301      	adds	r3, #1
 8002870:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	613b      	str	r3, [r7, #16]
      break;
 800287a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800287c:	693b      	ldr	r3, [r7, #16]
}
 800287e:	4618      	mov	r0, r3
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	40023800 	.word	0x40023800
 800288c:	00f42400 	.word	0x00f42400
 8002890:	007a1200 	.word	0x007a1200
 8002894:	080067e4 	.word	0x080067e4

08002898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800289c:	4b02      	ldr	r3, [pc, #8]	; (80028a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800289e:	681b      	ldr	r3, [r3, #0]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	20000054 	.word	0x20000054

080028ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028b0:	f7ff fff2 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 80028b4:	4601      	mov	r1, r0
 80028b6:	4b05      	ldr	r3, [pc, #20]	; (80028cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	0a1b      	lsrs	r3, r3, #8
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	4a03      	ldr	r2, [pc, #12]	; (80028d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028c2:	5cd3      	ldrb	r3, [r2, r3]
 80028c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40023800 	.word	0x40023800
 80028d0:	08006800 	.word	0x08006800

080028d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028d8:	f7ff ffde 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 80028dc:	4601      	mov	r1, r0
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	0adb      	lsrs	r3, r3, #11
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4a03      	ldr	r2, [pc, #12]	; (80028f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ea:	5cd3      	ldrb	r3, [r2, r3]
 80028ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40023800 	.word	0x40023800
 80028f8:	08006800 	.word	0x08006800

080028fc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	220f      	movs	r2, #15
 800290a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800290c:	4b11      	ldr	r3, [pc, #68]	; (8002954 <HAL_RCC_GetClockConfig+0x58>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 0203 	and.w	r2, r3, #3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002918:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <HAL_RCC_GetClockConfig+0x58>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <HAL_RCC_GetClockConfig+0x58>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002930:	4b08      	ldr	r3, [pc, #32]	; (8002954 <HAL_RCC_GetClockConfig+0x58>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	08db      	lsrs	r3, r3, #3
 8002936:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <HAL_RCC_GetClockConfig+0x5c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0201 	and.w	r2, r3, #1
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	601a      	str	r2, [r3, #0]
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr
 8002954:	40023800 	.word	0x40023800
 8002958:	40023c00 	.word	0x40023c00

0800295c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800295c:	b480      	push	{r7}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002964:	2300      	movs	r3, #0
 8002966:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002968:	4b29      	ldr	r3, [pc, #164]	; (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d12c      	bne.n	80029ce <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002974:	4b26      	ldr	r3, [pc, #152]	; (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002980:	4b24      	ldr	r3, [pc, #144]	; (8002a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	e016      	b.n	80029ba <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298c:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	4a1f      	ldr	r2, [pc, #124]	; (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002996:	6253      	str	r3, [r2, #36]	; 0x24
 8002998:	4b1d      	ldr	r3, [pc, #116]	; (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80029a4:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80029ac:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ae:	4b18      	ldr	r3, [pc, #96]	; (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	4a17      	ldr	r2, [pc, #92]	; (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80029b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029b8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80029c0:	d105      	bne.n	80029ce <RCC_SetFlashLatencyFromMSIRange+0x72>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80029c8:	d101      	bne.n	80029ce <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80029ca:	2301      	movs	r3, #1
 80029cc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d105      	bne.n	80029e0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80029d4:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0f      	ldr	r2, [pc, #60]	; (8002a18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029da:	f043 0304 	orr.w	r3, r3, #4
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f023 0201 	bic.w	r2, r3, #1
 80029e8:	490b      	ldr	r1, [pc, #44]	; (8002a18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d001      	beq.n	8002a02 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	371c      	adds	r7, #28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40007000 	.word	0x40007000
 8002a18:	40023c00 	.word	0x40023c00

08002a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e01d      	b.n	8002a6a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f815 	bl	8002a72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3304      	adds	r3, #4
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	f000 fa26 	bl	8002eac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2b06      	cmp	r3, #6
 8002aac:	d007      	beq.n	8002abe <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 0201 	orr.w	r2, r2, #1
 8002abc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr

08002aca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e01d      	b.n	8002b18 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d106      	bne.n	8002af6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7fe fa03 	bl	8000efc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2202      	movs	r2, #2
 8002afa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3304      	adds	r3, #4
 8002b06:	4619      	mov	r1, r3
 8002b08:	4610      	mov	r0, r2
 8002b0a:	f000 f9cf 	bl	8002eac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d122      	bne.n	8002b7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d11b      	bne.n	8002b7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0202 	mvn.w	r2, #2
 8002b4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f987 	bl	8002e76 <HAL_TIM_IC_CaptureCallback>
 8002b68:	e005      	b.n	8002b76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f97a 	bl	8002e64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f989 	bl	8002e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d122      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d11b      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0204 	mvn.w	r2, #4
 8002ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f95d 	bl	8002e76 <HAL_TIM_IC_CaptureCallback>
 8002bbc:	e005      	b.n	8002bca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f950 	bl	8002e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f95f 	bl	8002e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d122      	bne.n	8002c24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d11b      	bne.n	8002c24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f06f 0208 	mvn.w	r2, #8
 8002bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f933 	bl	8002e76 <HAL_TIM_IC_CaptureCallback>
 8002c10:	e005      	b.n	8002c1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f926 	bl	8002e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f935 	bl	8002e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f003 0310 	and.w	r3, r3, #16
 8002c2e:	2b10      	cmp	r3, #16
 8002c30:	d122      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	2b10      	cmp	r3, #16
 8002c3e:	d11b      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0210 	mvn.w	r2, #16
 8002c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2208      	movs	r2, #8
 8002c4e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f909 	bl	8002e76 <HAL_TIM_IC_CaptureCallback>
 8002c64:	e005      	b.n	8002c72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f8fc 	bl	8002e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f90b 	bl	8002e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d10e      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d107      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0201 	mvn.w	r2, #1
 8002c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7fd fefa 	bl	8000a98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cae:	2b40      	cmp	r3, #64	; 0x40
 8002cb0:	d10e      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cbc:	2b40      	cmp	r3, #64	; 0x40
 8002cbe:	d107      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f8e5 	bl	8002e9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cd0:	bf00      	nop
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e0b4      	b.n	8002e5c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b0c      	cmp	r3, #12
 8002d06:	f200 809f 	bhi.w	8002e48 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002d0a:	a201      	add	r2, pc, #4	; (adr r2, 8002d10 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d10:	08002d45 	.word	0x08002d45
 8002d14:	08002e49 	.word	0x08002e49
 8002d18:	08002e49 	.word	0x08002e49
 8002d1c:	08002e49 	.word	0x08002e49
 8002d20:	08002d85 	.word	0x08002d85
 8002d24:	08002e49 	.word	0x08002e49
 8002d28:	08002e49 	.word	0x08002e49
 8002d2c:	08002e49 	.word	0x08002e49
 8002d30:	08002dc7 	.word	0x08002dc7
 8002d34:	08002e49 	.word	0x08002e49
 8002d38:	08002e49 	.word	0x08002e49
 8002d3c:	08002e49 	.word	0x08002e49
 8002d40:	08002e07 	.word	0x08002e07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68b9      	ldr	r1, [r7, #8]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 f91e 	bl	8002f8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699a      	ldr	r2, [r3, #24]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0208 	orr.w	r2, r2, #8
 8002d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699a      	ldr	r2, [r3, #24]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0204 	bic.w	r2, r2, #4
 8002d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6999      	ldr	r1, [r3, #24]
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	619a      	str	r2, [r3, #24]
      break;
 8002d82:	e062      	b.n	8002e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 f93a 	bl	8003004 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699a      	ldr	r2, [r3, #24]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6999      	ldr	r1, [r3, #24]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	021a      	lsls	r2, r3, #8
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	619a      	str	r2, [r3, #24]
      break;
 8002dc4:	e041      	b.n	8002e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68b9      	ldr	r1, [r7, #8]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 f957 	bl	8003080 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	69da      	ldr	r2, [r3, #28]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f042 0208 	orr.w	r2, r2, #8
 8002de0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	69da      	ldr	r2, [r3, #28]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0204 	bic.w	r2, r2, #4
 8002df0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69d9      	ldr	r1, [r3, #28]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	61da      	str	r2, [r3, #28]
      break;
 8002e04:	e021      	b.n	8002e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 f974 	bl	80030fa <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69da      	ldr	r2, [r3, #28]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69da      	ldr	r2, [r3, #28]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	69d9      	ldr	r1, [r3, #28]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	021a      	lsls	r2, r3, #8
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	61da      	str	r2, [r3, #28]
      break;
 8002e46:	e000      	b.n	8002e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002e48:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr

08002e76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr

08002e9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec2:	d00f      	beq.n	8002ee4 <TIM_Base_SetConfig+0x38>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a2b      	ldr	r2, [pc, #172]	; (8002f74 <TIM_Base_SetConfig+0xc8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00b      	beq.n	8002ee4 <TIM_Base_SetConfig+0x38>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a2a      	ldr	r2, [pc, #168]	; (8002f78 <TIM_Base_SetConfig+0xcc>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d007      	beq.n	8002ee4 <TIM_Base_SetConfig+0x38>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a29      	ldr	r2, [pc, #164]	; (8002f7c <TIM_Base_SetConfig+0xd0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d003      	beq.n	8002ee4 <TIM_Base_SetConfig+0x38>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a28      	ldr	r2, [pc, #160]	; (8002f80 <TIM_Base_SetConfig+0xd4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d108      	bne.n	8002ef6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efc:	d017      	beq.n	8002f2e <TIM_Base_SetConfig+0x82>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a1c      	ldr	r2, [pc, #112]	; (8002f74 <TIM_Base_SetConfig+0xc8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d013      	beq.n	8002f2e <TIM_Base_SetConfig+0x82>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a1b      	ldr	r2, [pc, #108]	; (8002f78 <TIM_Base_SetConfig+0xcc>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00f      	beq.n	8002f2e <TIM_Base_SetConfig+0x82>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a1a      	ldr	r2, [pc, #104]	; (8002f7c <TIM_Base_SetConfig+0xd0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00b      	beq.n	8002f2e <TIM_Base_SetConfig+0x82>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a19      	ldr	r2, [pc, #100]	; (8002f80 <TIM_Base_SetConfig+0xd4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d007      	beq.n	8002f2e <TIM_Base_SetConfig+0x82>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a18      	ldr	r2, [pc, #96]	; (8002f84 <TIM_Base_SetConfig+0xd8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d003      	beq.n	8002f2e <TIM_Base_SetConfig+0x82>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a17      	ldr	r2, [pc, #92]	; (8002f88 <TIM_Base_SetConfig+0xdc>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d108      	bne.n	8002f40 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	615a      	str	r2, [r3, #20]
}
 8002f6a:	bf00      	nop
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	40000400 	.word	0x40000400
 8002f78:	40000800 	.word	0x40000800
 8002f7c:	40000c00 	.word	0x40000c00
 8002f80:	40010800 	.word	0x40010800
 8002f84:	40010c00 	.word	0x40010c00
 8002f88:	40011000 	.word	0x40011000

08002f8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	f023 0201 	bic.w	r2, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f023 0303 	bic.w	r3, r3, #3
 8002fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f023 0302 	bic.w	r3, r3, #2
 8002fd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	621a      	str	r2, [r3, #32]
}
 8002ffa:	bf00      	nop
 8002ffc:	371c      	adds	r7, #28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr

08003004 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	f023 0210 	bic.w	r2, r3, #16
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800303a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4313      	orrs	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f023 0320 	bic.w	r3, r3, #32
 800304e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	4313      	orrs	r3, r2
 800305a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	621a      	str	r2, [r3, #32]
}
 8003076:	bf00      	nop
 8003078:	371c      	adds	r7, #28
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr

08003080 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0303 	bic.w	r3, r3, #3
 80030b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	021b      	lsls	r3, r3, #8
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	621a      	str	r2, [r3, #32]
}
 80030f0:	bf00      	nop
 80030f2:	371c      	adds	r7, #28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr

080030fa <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b087      	sub	sp, #28
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
 8003102:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003128:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003130:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	021b      	lsls	r3, r3, #8
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	031b      	lsls	r3, r3, #12
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	4313      	orrs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	621a      	str	r2, [r3, #32]
}
 800316c:	bf00      	nop
 800316e:	371c      	adds	r7, #28
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003176:	b480      	push	{r7}
 8003178:	b085      	sub	sp, #20
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800318a:	2302      	movs	r3, #2
 800318c:	e032      	b.n	80031f4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2202      	movs	r2, #2
 800319a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031c6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e03f      	b.n	8003290 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d106      	bne.n	800322a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7fd ff5b 	bl	80010e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2224      	movs	r2, #36	; 0x24
 800322e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003240:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f9b2 	bl	80035ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003256:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003266:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003276:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2220      	movs	r2, #32
 8003282:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2220      	movs	r2, #32
 800328a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af02      	add	r7, sp, #8
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	4613      	mov	r3, r2
 80032a6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b20      	cmp	r3, #32
 80032b6:	f040 8083 	bne.w	80033c0 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <HAL_UART_Transmit+0x2e>
 80032c0:	88fb      	ldrh	r3, [r7, #6]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e07b      	b.n	80033c2 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_UART_Transmit+0x40>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e074      	b.n	80033c2 <HAL_UART_Transmit+0x12a>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2221      	movs	r2, #33	; 0x21
 80032ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80032ee:	f7fd ff8b 	bl	8001208 <HAL_GetTick>
 80032f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	88fa      	ldrh	r2, [r7, #6]
 80032f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	88fa      	ldrh	r2, [r7, #6]
 80032fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003300:	e042      	b.n	8003388 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003318:	d122      	bne.n	8003360 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2200      	movs	r2, #0
 8003322:	2180      	movs	r1, #128	; 0x80
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f8f6 	bl	8003516 <UART_WaitOnFlagUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e046      	b.n	80033c2 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003346:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d103      	bne.n	8003358 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	3302      	adds	r3, #2
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	e017      	b.n	8003388 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	3301      	adds	r3, #1
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	e013      	b.n	8003388 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	2200      	movs	r2, #0
 8003368:	2180      	movs	r1, #128	; 0x80
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 f8d3 	bl	8003516 <UART_WaitOnFlagUntilTimeout>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e023      	b.n	80033c2 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	60ba      	str	r2, [r7, #8]
 8003380:	781a      	ldrb	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1b7      	bne.n	8003302 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2200      	movs	r2, #0
 800339a:	2140      	movs	r1, #64	; 0x40
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 f8ba 	bl	8003516 <UART_WaitOnFlagUntilTimeout>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e00a      	b.n	80033c2 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	e000      	b.n	80033c2 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80033c0:	2302      	movs	r3, #2
  }
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b088      	sub	sp, #32
 80033ce:	af02      	add	r7, sp, #8
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	603b      	str	r3, [r7, #0]
 80033d6:	4613      	mov	r3, r2
 80033d8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b20      	cmp	r3, #32
 80033e8:	f040 8090 	bne.w	800350c <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HAL_UART_Receive+0x2e>
 80033f2:	88fb      	ldrh	r3, [r7, #6]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e088      	b.n	800350e <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <HAL_UART_Receive+0x40>
 8003406:	2302      	movs	r3, #2
 8003408:	e081      	b.n	800350e <HAL_UART_Receive+0x144>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2222      	movs	r2, #34	; 0x22
 800341c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003420:	f7fd fef2 	bl	8001208 <HAL_GetTick>
 8003424:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	88fa      	ldrh	r2, [r7, #6]
 800342a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	88fa      	ldrh	r2, [r7, #6]
 8003430:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003432:	e05c      	b.n	80034ee <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003438:	b29b      	uxth	r3, r3
 800343a:	3b01      	subs	r3, #1
 800343c:	b29a      	uxth	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800344a:	d12b      	bne.n	80034a4 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2200      	movs	r2, #0
 8003454:	2120      	movs	r1, #32
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f85d 	bl	8003516 <UART_WaitOnFlagUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e053      	b.n	800350e <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10c      	bne.n	800348c <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	b29b      	uxth	r3, r3
 800347a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800347e:	b29a      	uxth	r2, r3
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	3302      	adds	r3, #2
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	e030      	b.n	80034ee <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	b29b      	uxth	r3, r3
 8003494:	b2db      	uxtb	r3, r3
 8003496:	b29a      	uxth	r2, r3
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	3301      	adds	r3, #1
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	e024      	b.n	80034ee <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2200      	movs	r2, #0
 80034ac:	2120      	movs	r1, #32
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 f831 	bl	8003516 <UART_WaitOnFlagUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e027      	b.n	800350e <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d108      	bne.n	80034d8 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6859      	ldr	r1, [r3, #4]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	60ba      	str	r2, [r7, #8]
 80034d2:	b2ca      	uxtb	r2, r1
 80034d4:	701a      	strb	r2, [r3, #0]
 80034d6:	e00a      	b.n	80034ee <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	1c59      	adds	r1, r3, #1
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d19d      	bne.n	8003434 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	e000      	b.n	800350e <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800350c:	2302      	movs	r3, #2
  }
}
 800350e:	4618      	mov	r0, r3
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	603b      	str	r3, [r7, #0]
 8003522:	4613      	mov	r3, r2
 8003524:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003526:	e02c      	b.n	8003582 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352e:	d028      	beq.n	8003582 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d007      	beq.n	8003546 <UART_WaitOnFlagUntilTimeout+0x30>
 8003536:	f7fd fe67 	bl	8001208 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	429a      	cmp	r2, r3
 8003544:	d21d      	bcs.n	8003582 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003554:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695a      	ldr	r2, [r3, #20]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0201 	bic.w	r2, r2, #1
 8003564:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e00f      	b.n	80035a2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4013      	ands	r3, r2
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	429a      	cmp	r2, r3
 8003590:	bf0c      	ite	eq
 8003592:	2301      	moveq	r3, #1
 8003594:	2300      	movne	r3, #0
 8003596:	b2db      	uxtb	r3, r3
 8003598:	461a      	mov	r2, r3
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	429a      	cmp	r2, r3
 800359e:	d0c3      	beq.n	8003528 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80035ec:	f023 030c 	bic.w	r3, r3, #12
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6812      	ldr	r2, [r2, #0]
 80035f4:	68f9      	ldr	r1, [r7, #12]
 80035f6:	430b      	orrs	r3, r1
 80035f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699a      	ldr	r2, [r3, #24]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003618:	f040 80a5 	bne.w	8003766 <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4aa4      	ldr	r2, [pc, #656]	; (80038b4 <UART_SetConfig+0x308>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d14f      	bne.n	80036c6 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003626:	f7ff f955 	bl	80028d4 <HAL_RCC_GetPCLK2Freq>
 800362a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	009a      	lsls	r2, r3, #2
 8003636:	441a      	add	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003642:	4a9d      	ldr	r2, [pc, #628]	; (80038b8 <UART_SetConfig+0x30c>)
 8003644:	fba2 2303 	umull	r2, r3, r2, r3
 8003648:	095b      	lsrs	r3, r3, #5
 800364a:	0119      	lsls	r1, r3, #4
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	009a      	lsls	r2, r3, #2
 8003656:	441a      	add	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003662:	4b95      	ldr	r3, [pc, #596]	; (80038b8 <UART_SetConfig+0x30c>)
 8003664:	fba3 0302 	umull	r0, r3, r3, r2
 8003668:	095b      	lsrs	r3, r3, #5
 800366a:	2064      	movs	r0, #100	; 0x64
 800366c:	fb00 f303 	mul.w	r3, r0, r3
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	3332      	adds	r3, #50	; 0x32
 8003676:	4a90      	ldr	r2, [pc, #576]	; (80038b8 <UART_SetConfig+0x30c>)
 8003678:	fba2 2303 	umull	r2, r3, r2, r3
 800367c:	095b      	lsrs	r3, r3, #5
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003684:	4419      	add	r1, r3
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	009a      	lsls	r2, r3, #2
 8003690:	441a      	add	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	fbb2 f2f3 	udiv	r2, r2, r3
 800369c:	4b86      	ldr	r3, [pc, #536]	; (80038b8 <UART_SetConfig+0x30c>)
 800369e:	fba3 0302 	umull	r0, r3, r3, r2
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	2064      	movs	r0, #100	; 0x64
 80036a6:	fb00 f303 	mul.w	r3, r0, r3
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	3332      	adds	r3, #50	; 0x32
 80036b0:	4a81      	ldr	r2, [pc, #516]	; (80038b8 <UART_SetConfig+0x30c>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	095b      	lsrs	r3, r3, #5
 80036b8:	f003 0207 	and.w	r2, r3, #7
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	440a      	add	r2, r1
 80036c2:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80036c4:	e0f1      	b.n	80038aa <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 80036c6:	f7ff f8f1 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 80036ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	009a      	lsls	r2, r3, #2
 80036d6:	441a      	add	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e2:	4a75      	ldr	r2, [pc, #468]	; (80038b8 <UART_SetConfig+0x30c>)
 80036e4:	fba2 2303 	umull	r2, r3, r2, r3
 80036e8:	095b      	lsrs	r3, r3, #5
 80036ea:	0119      	lsls	r1, r3, #4
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	009a      	lsls	r2, r3, #2
 80036f6:	441a      	add	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003702:	4b6d      	ldr	r3, [pc, #436]	; (80038b8 <UART_SetConfig+0x30c>)
 8003704:	fba3 0302 	umull	r0, r3, r3, r2
 8003708:	095b      	lsrs	r3, r3, #5
 800370a:	2064      	movs	r0, #100	; 0x64
 800370c:	fb00 f303 	mul.w	r3, r0, r3
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	3332      	adds	r3, #50	; 0x32
 8003716:	4a68      	ldr	r2, [pc, #416]	; (80038b8 <UART_SetConfig+0x30c>)
 8003718:	fba2 2303 	umull	r2, r3, r2, r3
 800371c:	095b      	lsrs	r3, r3, #5
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003724:	4419      	add	r1, r3
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	009a      	lsls	r2, r3, #2
 8003730:	441a      	add	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	fbb2 f2f3 	udiv	r2, r2, r3
 800373c:	4b5e      	ldr	r3, [pc, #376]	; (80038b8 <UART_SetConfig+0x30c>)
 800373e:	fba3 0302 	umull	r0, r3, r3, r2
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	2064      	movs	r0, #100	; 0x64
 8003746:	fb00 f303 	mul.w	r3, r0, r3
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	3332      	adds	r3, #50	; 0x32
 8003750:	4a59      	ldr	r2, [pc, #356]	; (80038b8 <UART_SetConfig+0x30c>)
 8003752:	fba2 2303 	umull	r2, r3, r2, r3
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	f003 0207 	and.w	r2, r3, #7
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	440a      	add	r2, r1
 8003762:	609a      	str	r2, [r3, #8]
}
 8003764:	e0a1      	b.n	80038aa <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a52      	ldr	r2, [pc, #328]	; (80038b4 <UART_SetConfig+0x308>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d14e      	bne.n	800380e <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003770:	f7ff f8b0 	bl	80028d4 <HAL_RCC_GetPCLK2Freq>
 8003774:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	009a      	lsls	r2, r3, #2
 8003780:	441a      	add	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	fbb2 f3f3 	udiv	r3, r2, r3
 800378c:	4a4a      	ldr	r2, [pc, #296]	; (80038b8 <UART_SetConfig+0x30c>)
 800378e:	fba2 2303 	umull	r2, r3, r2, r3
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	0119      	lsls	r1, r3, #4
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	009a      	lsls	r2, r3, #2
 80037a0:	441a      	add	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80037ac:	4b42      	ldr	r3, [pc, #264]	; (80038b8 <UART_SetConfig+0x30c>)
 80037ae:	fba3 0302 	umull	r0, r3, r3, r2
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	2064      	movs	r0, #100	; 0x64
 80037b6:	fb00 f303 	mul.w	r3, r0, r3
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	3332      	adds	r3, #50	; 0x32
 80037c0:	4a3d      	ldr	r2, [pc, #244]	; (80038b8 <UART_SetConfig+0x30c>)
 80037c2:	fba2 2303 	umull	r2, r3, r2, r3
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037cc:	4419      	add	r1, r3
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	009a      	lsls	r2, r3, #2
 80037d8:	441a      	add	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80037e4:	4b34      	ldr	r3, [pc, #208]	; (80038b8 <UART_SetConfig+0x30c>)
 80037e6:	fba3 0302 	umull	r0, r3, r3, r2
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	2064      	movs	r0, #100	; 0x64
 80037ee:	fb00 f303 	mul.w	r3, r0, r3
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	3332      	adds	r3, #50	; 0x32
 80037f8:	4a2f      	ldr	r2, [pc, #188]	; (80038b8 <UART_SetConfig+0x30c>)
 80037fa:	fba2 2303 	umull	r2, r3, r2, r3
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	f003 020f 	and.w	r2, r3, #15
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	440a      	add	r2, r1
 800380a:	609a      	str	r2, [r3, #8]
}
 800380c:	e04d      	b.n	80038aa <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 800380e:	f7ff f84d 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8003812:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	4613      	mov	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	009a      	lsls	r2, r3, #2
 800381e:	441a      	add	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	fbb2 f3f3 	udiv	r3, r2, r3
 800382a:	4a23      	ldr	r2, [pc, #140]	; (80038b8 <UART_SetConfig+0x30c>)
 800382c:	fba2 2303 	umull	r2, r3, r2, r3
 8003830:	095b      	lsrs	r3, r3, #5
 8003832:	0119      	lsls	r1, r3, #4
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	4613      	mov	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	009a      	lsls	r2, r3, #2
 800383e:	441a      	add	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	fbb2 f2f3 	udiv	r2, r2, r3
 800384a:	4b1b      	ldr	r3, [pc, #108]	; (80038b8 <UART_SetConfig+0x30c>)
 800384c:	fba3 0302 	umull	r0, r3, r3, r2
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	2064      	movs	r0, #100	; 0x64
 8003854:	fb00 f303 	mul.w	r3, r0, r3
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	3332      	adds	r3, #50	; 0x32
 800385e:	4a16      	ldr	r2, [pc, #88]	; (80038b8 <UART_SetConfig+0x30c>)
 8003860:	fba2 2303 	umull	r2, r3, r2, r3
 8003864:	095b      	lsrs	r3, r3, #5
 8003866:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800386a:	4419      	add	r1, r3
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	009a      	lsls	r2, r3, #2
 8003876:	441a      	add	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003882:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <UART_SetConfig+0x30c>)
 8003884:	fba3 0302 	umull	r0, r3, r3, r2
 8003888:	095b      	lsrs	r3, r3, #5
 800388a:	2064      	movs	r0, #100	; 0x64
 800388c:	fb00 f303 	mul.w	r3, r0, r3
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	011b      	lsls	r3, r3, #4
 8003894:	3332      	adds	r3, #50	; 0x32
 8003896:	4a08      	ldr	r2, [pc, #32]	; (80038b8 <UART_SetConfig+0x30c>)
 8003898:	fba2 2303 	umull	r2, r3, r2, r3
 800389c:	095b      	lsrs	r3, r3, #5
 800389e:	f003 020f 	and.w	r2, r3, #15
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	440a      	add	r2, r1
 80038a8:	609a      	str	r2, [r3, #8]
}
 80038aa:	bf00      	nop
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40013800 	.word	0x40013800
 80038b8:	51eb851f 	.word	0x51eb851f

080038bc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038c2:	f3ef 8305 	mrs	r3, IPSR
 80038c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80038c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10f      	bne.n	80038ee <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ce:	f3ef 8310 	mrs	r3, PRIMASK
 80038d2:	607b      	str	r3, [r7, #4]
  return(result);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <osKernelInitialize+0x32>
 80038da:	4b10      	ldr	r3, [pc, #64]	; (800391c <osKernelInitialize+0x60>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d109      	bne.n	80038f6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80038e2:	f3ef 8311 	mrs	r3, BASEPRI
 80038e6:	603b      	str	r3, [r7, #0]
  return(result);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80038ee:	f06f 0305 	mvn.w	r3, #5
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	e00c      	b.n	8003910 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80038f6:	4b09      	ldr	r3, [pc, #36]	; (800391c <osKernelInitialize+0x60>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d105      	bne.n	800390a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80038fe:	4b07      	ldr	r3, [pc, #28]	; (800391c <osKernelInitialize+0x60>)
 8003900:	2201      	movs	r2, #1
 8003902:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003904:	2300      	movs	r3, #0
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	e002      	b.n	8003910 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800390a:	f04f 33ff 	mov.w	r3, #4294967295
 800390e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003910:	68fb      	ldr	r3, [r7, #12]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr
 800391c:	200000e8 	.word	0x200000e8

08003920 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003926:	f3ef 8305 	mrs	r3, IPSR
 800392a:	60bb      	str	r3, [r7, #8]
  return(result);
 800392c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10f      	bne.n	8003952 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003932:	f3ef 8310 	mrs	r3, PRIMASK
 8003936:	607b      	str	r3, [r7, #4]
  return(result);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <osKernelStart+0x32>
 800393e:	4b11      	ldr	r3, [pc, #68]	; (8003984 <osKernelStart+0x64>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d109      	bne.n	800395a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003946:	f3ef 8311 	mrs	r3, BASEPRI
 800394a:	603b      	str	r3, [r7, #0]
  return(result);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003952:	f06f 0305 	mvn.w	r3, #5
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	e00e      	b.n	8003978 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800395a:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <osKernelStart+0x64>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d107      	bne.n	8003972 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003962:	4b08      	ldr	r3, [pc, #32]	; (8003984 <osKernelStart+0x64>)
 8003964:	2202      	movs	r2, #2
 8003966:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003968:	f001 f8ba 	bl	8004ae0 <vTaskStartScheduler>
      stat = osOK;
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	e002      	b.n	8003978 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003972:	f04f 33ff 	mov.w	r3, #4294967295
 8003976:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003978:	68fb      	ldr	r3, [r7, #12]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	200000e8 	.word	0x200000e8

08003988 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003988:	b580      	push	{r7, lr}
 800398a:	b092      	sub	sp, #72	; 0x48
 800398c:	af04      	add	r7, sp, #16
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003998:	f3ef 8305 	mrs	r3, IPSR
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f040 8094 	bne.w	8003ace <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039a6:	f3ef 8310 	mrs	r3, PRIMASK
 80039aa:	623b      	str	r3, [r7, #32]
  return(result);
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f040 808d 	bne.w	8003ace <osThreadNew+0x146>
 80039b4:	4b48      	ldr	r3, [pc, #288]	; (8003ad8 <osThreadNew+0x150>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d106      	bne.n	80039ca <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80039bc:	f3ef 8311 	mrs	r3, BASEPRI
 80039c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f040 8082 	bne.w	8003ace <osThreadNew+0x146>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d07e      	beq.n	8003ace <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80039d0:	2380      	movs	r3, #128	; 0x80
 80039d2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80039d4:	2318      	movs	r3, #24
 80039d6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80039d8:	2300      	movs	r3, #0
 80039da:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80039dc:	f107 031b 	add.w	r3, r7, #27
 80039e0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80039e2:	f04f 33ff 	mov.w	r3, #4294967295
 80039e6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d045      	beq.n	8003a7a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <osThreadNew+0x74>
        name = attr->name;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <osThreadNew+0x9a>
 8003a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a12:	2b38      	cmp	r3, #56	; 0x38
 8003a14:	d805      	bhi.n	8003a22 <osThreadNew+0x9a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <osThreadNew+0x9e>
        return (NULL);
 8003a22:	2300      	movs	r3, #0
 8003a24:	e054      	b.n	8003ad0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	089b      	lsrs	r3, r3, #2
 8003a34:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00e      	beq.n	8003a5c <osThreadNew+0xd4>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	2b5b      	cmp	r3, #91	; 0x5b
 8003a44:	d90a      	bls.n	8003a5c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d006      	beq.n	8003a5c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <osThreadNew+0xd4>
        mem = 1;
 8003a56:	2301      	movs	r3, #1
 8003a58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a5a:	e010      	b.n	8003a7e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10c      	bne.n	8003a7e <osThreadNew+0xf6>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d108      	bne.n	8003a7e <osThreadNew+0xf6>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d104      	bne.n	8003a7e <osThreadNew+0xf6>
          mem = 0;
 8003a74:	2300      	movs	r3, #0
 8003a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a78:	e001      	b.n	8003a7e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d110      	bne.n	8003aa6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a8c:	9202      	str	r2, [sp, #8]
 8003a8e:	9301      	str	r3, [sp, #4]
 8003a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a98:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 fe58 	bl	8004750 <xTaskCreateStatic>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	e013      	b.n	8003ace <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d110      	bne.n	8003ace <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	f107 0314 	add.w	r3, r7, #20
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 fe9f 	bl	8004802 <xTaskCreate>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d001      	beq.n	8003ace <osThreadNew+0x146>
          hTask = NULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003ace:	697b      	ldr	r3, [r7, #20]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3738      	adds	r7, #56	; 0x38
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	200000e8 	.word	0x200000e8

08003adc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ae4:	f3ef 8305 	mrs	r3, IPSR
 8003ae8:	613b      	str	r3, [r7, #16]
  return(result);
 8003aea:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10f      	bne.n	8003b10 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af0:	f3ef 8310 	mrs	r3, PRIMASK
 8003af4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d109      	bne.n	8003b10 <osDelay+0x34>
 8003afc:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <osDelay+0x58>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d109      	bne.n	8003b18 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b04:	f3ef 8311 	mrs	r3, BASEPRI
 8003b08:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <osDelay+0x3c>
    stat = osErrorISR;
 8003b10:	f06f 0305 	mvn.w	r3, #5
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	e007      	b.n	8003b28 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 ffa8 	bl	8004a78 <vTaskDelay>
    }
  }

  return (stat);
 8003b28:	697b      	ldr	r3, [r7, #20]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	200000e8 	.word	0x200000e8

08003b38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4a06      	ldr	r2, [pc, #24]	; (8003b60 <vApplicationGetIdleTaskMemory+0x28>)
 8003b48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	4a05      	ldr	r2, [pc, #20]	; (8003b64 <vApplicationGetIdleTaskMemory+0x2c>)
 8003b4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2280      	movs	r2, #128	; 0x80
 8003b54:	601a      	str	r2, [r3, #0]
}
 8003b56:	bf00      	nop
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr
 8003b60:	200000ec 	.word	0x200000ec
 8003b64:	20000148 	.word	0x20000148

08003b68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4a07      	ldr	r2, [pc, #28]	; (8003b94 <vApplicationGetTimerTaskMemory+0x2c>)
 8003b78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4a06      	ldr	r2, [pc, #24]	; (8003b98 <vApplicationGetTimerTaskMemory+0x30>)
 8003b7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b86:	601a      	str	r2, [r3, #0]
}
 8003b88:	bf00      	nop
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	20000348 	.word	0x20000348
 8003b98:	200003a4 	.word	0x200003a4

08003b9c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8003ba2:	2020      	movs	r0, #32
 8003ba4:	f002 f9f6 	bl	8005f94 <pvPortMalloc>
 8003ba8:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 f808 	bl	8003bd0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8003bc6:	687b      	ldr	r3, [r7, #4]
	}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f103 0208 	add.w	r2, r3, #8
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f04f 32ff 	mov.w	r2, #4294967295
 8003be8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f103 0208 	add.w	r2, r3, #8
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f103 0208 	add.w	r2, r3, #8
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr

08003c0e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr

08003c26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c26:	b480      	push	{r7}
 8003c28:	b085      	sub	sp, #20
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	601a      	str	r2, [r3, #0]
}
 8003c62:	bf00      	nop
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr

08003c6c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c82:	d103      	bne.n	8003c8c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	e00c      	b.n	8003ca6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3308      	adds	r3, #8
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	e002      	b.n	8003c9a <vListInsert+0x2e>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d2f6      	bcs.n	8003c94 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	601a      	str	r2, [r3, #0]
}
 8003cd2:	bf00      	nop
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr

08003cdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6892      	ldr	r2, [r2, #8]
 8003cf2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6852      	ldr	r2, [r2, #4]
 8003cfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d103      	bne.n	8003d10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	1e5a      	subs	r2, r3, #1
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr
	...

08003d30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d109      	bne.n	8003d58 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	e7fe      	b.n	8003d56 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003d58:	f002 f826 	bl	8005da8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d64:	68f9      	ldr	r1, [r7, #12]
 8003d66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	441a      	add	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	68f9      	ldr	r1, [r7, #12]
 8003d8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d8e:	fb01 f303 	mul.w	r3, r1, r3
 8003d92:	441a      	add	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	22ff      	movs	r2, #255	; 0xff
 8003d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	22ff      	movs	r2, #255	; 0xff
 8003da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d114      	bne.n	8003dd8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d01a      	beq.n	8003dec <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3310      	adds	r3, #16
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f001 f914 	bl	8004fe8 <xTaskRemoveFromEventList>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d012      	beq.n	8003dec <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	; (8003dfc <xQueueGenericReset+0xcc>)
 8003dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	e009      	b.n	8003dec <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	3310      	adds	r3, #16
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff fef7 	bl	8003bd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	3324      	adds	r3, #36	; 0x24
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff fef2 	bl	8003bd0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003dec:	f002 f80a 	bl	8005e04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003df0:	2301      	movs	r3, #1
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	e000ed04 	.word	0xe000ed04

08003e00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08e      	sub	sp, #56	; 0x38
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d109      	bne.n	8003e28 <xQueueGenericCreateStatic+0x28>
 8003e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e18:	f383 8811 	msr	BASEPRI, r3
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e26:	e7fe      	b.n	8003e26 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d109      	bne.n	8003e42 <xQueueGenericCreateStatic+0x42>
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e40:	e7fe      	b.n	8003e40 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <xQueueGenericCreateStatic+0x4e>
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <xQueueGenericCreateStatic+0x52>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <xQueueGenericCreateStatic+0x54>
 8003e52:	2300      	movs	r3, #0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d109      	bne.n	8003e6c <xQueueGenericCreateStatic+0x6c>
 8003e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	623b      	str	r3, [r7, #32]
 8003e6a:	e7fe      	b.n	8003e6a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d102      	bne.n	8003e78 <xQueueGenericCreateStatic+0x78>
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <xQueueGenericCreateStatic+0x7c>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <xQueueGenericCreateStatic+0x7e>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d109      	bne.n	8003e96 <xQueueGenericCreateStatic+0x96>
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	61fb      	str	r3, [r7, #28]
 8003e94:	e7fe      	b.n	8003e94 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e96:	2350      	movs	r3, #80	; 0x50
 8003e98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2b50      	cmp	r3, #80	; 0x50
 8003e9e:	d009      	beq.n	8003eb4 <xQueueGenericCreateStatic+0xb4>
 8003ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	e7fe      	b.n	8003eb2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00d      	beq.n	8003eda <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ec6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	68b9      	ldr	r1, [r7, #8]
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 f842 	bl	8003f5e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3730      	adds	r7, #48	; 0x30
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08a      	sub	sp, #40	; 0x28
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d109      	bne.n	8003f0c <xQueueGenericCreate+0x28>
 8003ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efc:	f383 8811 	msr	BASEPRI, r3
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	613b      	str	r3, [r7, #16]
 8003f0a:	e7fe      	b.n	8003f0a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d102      	bne.n	8003f18 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
 8003f16:	e004      	b.n	8003f22 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	fb02 f303 	mul.w	r3, r2, r3
 8003f20:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	3350      	adds	r3, #80	; 0x50
 8003f26:	4618      	mov	r0, r3
 8003f28:	f002 f834 	bl	8005f94 <pvPortMalloc>
 8003f2c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00f      	beq.n	8003f54 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	3350      	adds	r3, #80	; 0x50
 8003f38:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f42:	79fa      	ldrb	r2, [r7, #7]
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	68b9      	ldr	r1, [r7, #8]
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 f805 	bl	8003f5e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003f54:	69bb      	ldr	r3, [r7, #24]
	}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3720      	adds	r7, #32
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b084      	sub	sp, #16
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]
 8003f6a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d103      	bne.n	8003f7a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	e002      	b.n	8003f80 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	69b8      	ldr	r0, [r7, #24]
 8003f90:	f7ff fece 	bl	8003d30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	78fa      	ldrb	r2, [r7, #3]
 8003f98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08e      	sub	sp, #56	; 0x38
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d109      	bne.n	8003fd4 <xQueueGenericSend+0x30>
 8003fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fd2:	e7fe      	b.n	8003fd2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d103      	bne.n	8003fe2 <xQueueGenericSend+0x3e>
 8003fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <xQueueGenericSend+0x42>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <xQueueGenericSend+0x44>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d109      	bne.n	8004000 <xQueueGenericSend+0x5c>
 8003fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ffe:	e7fe      	b.n	8003ffe <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	2b02      	cmp	r3, #2
 8004004:	d103      	bne.n	800400e <xQueueGenericSend+0x6a>
 8004006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <xQueueGenericSend+0x6e>
 800400e:	2301      	movs	r3, #1
 8004010:	e000      	b.n	8004014 <xQueueGenericSend+0x70>
 8004012:	2300      	movs	r3, #0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d109      	bne.n	800402c <xQueueGenericSend+0x88>
 8004018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	623b      	str	r3, [r7, #32]
 800402a:	e7fe      	b.n	800402a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800402c:	f001 f996 	bl	800535c <xTaskGetSchedulerState>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d102      	bne.n	800403c <xQueueGenericSend+0x98>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <xQueueGenericSend+0x9c>
 800403c:	2301      	movs	r3, #1
 800403e:	e000      	b.n	8004042 <xQueueGenericSend+0x9e>
 8004040:	2300      	movs	r3, #0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d109      	bne.n	800405a <xQueueGenericSend+0xb6>
 8004046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404a:	f383 8811 	msr	BASEPRI, r3
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	61fb      	str	r3, [r7, #28]
 8004058:	e7fe      	b.n	8004058 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800405a:	f001 fea5 	bl	8005da8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800405e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004066:	429a      	cmp	r2, r3
 8004068:	d302      	bcc.n	8004070 <xQueueGenericSend+0xcc>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2b02      	cmp	r3, #2
 800406e:	d129      	bne.n	80040c4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	68b9      	ldr	r1, [r7, #8]
 8004074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004076:	f000 f9ff 	bl	8004478 <prvCopyDataToQueue>
 800407a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800407c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	2b00      	cmp	r3, #0
 8004082:	d010      	beq.n	80040a6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004086:	3324      	adds	r3, #36	; 0x24
 8004088:	4618      	mov	r0, r3
 800408a:	f000 ffad 	bl	8004fe8 <xTaskRemoveFromEventList>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d013      	beq.n	80040bc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004094:	4b3f      	ldr	r3, [pc, #252]	; (8004194 <xQueueGenericSend+0x1f0>)
 8004096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	f3bf 8f6f 	isb	sy
 80040a4:	e00a      	b.n	80040bc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80040a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d007      	beq.n	80040bc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80040ac:	4b39      	ldr	r3, [pc, #228]	; (8004194 <xQueueGenericSend+0x1f0>)
 80040ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	f3bf 8f4f 	dsb	sy
 80040b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80040bc:	f001 fea2 	bl	8005e04 <vPortExitCritical>
				return pdPASS;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e063      	b.n	800418c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d103      	bne.n	80040d2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040ca:	f001 fe9b 	bl	8005e04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	e05c      	b.n	800418c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d106      	bne.n	80040e6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040d8:	f107 0314 	add.w	r3, r7, #20
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 ffe5 	bl	80050ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040e2:	2301      	movs	r3, #1
 80040e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040e6:	f001 fe8d 	bl	8005e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040ea:	f000 fd5d 	bl	8004ba8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040ee:	f001 fe5b 	bl	8005da8 <vPortEnterCritical>
 80040f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040f8:	b25b      	sxtb	r3, r3
 80040fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fe:	d103      	bne.n	8004108 <xQueueGenericSend+0x164>
 8004100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800410e:	b25b      	sxtb	r3, r3
 8004110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004114:	d103      	bne.n	800411e <xQueueGenericSend+0x17a>
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800411e:	f001 fe71 	bl	8005e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004122:	1d3a      	adds	r2, r7, #4
 8004124:	f107 0314 	add.w	r3, r7, #20
 8004128:	4611      	mov	r1, r2
 800412a:	4618      	mov	r0, r3
 800412c:	f000 ffd4 	bl	80050d8 <xTaskCheckForTimeOut>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d124      	bne.n	8004180 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004136:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004138:	f000 fa96 	bl	8004668 <prvIsQueueFull>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d018      	beq.n	8004174 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004144:	3310      	adds	r3, #16
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	4611      	mov	r1, r2
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fefe 	bl	8004f4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004152:	f000 fa21 	bl	8004598 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004156:	f000 fd35 	bl	8004bc4 <xTaskResumeAll>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	f47f af7c 	bne.w	800405a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004162:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <xQueueGenericSend+0x1f0>)
 8004164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	e772      	b.n	800405a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004176:	f000 fa0f 	bl	8004598 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800417a:	f000 fd23 	bl	8004bc4 <xTaskResumeAll>
 800417e:	e76c      	b.n	800405a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004180:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004182:	f000 fa09 	bl	8004598 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004186:	f000 fd1d 	bl	8004bc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800418a:	2300      	movs	r3, #0
		}
	}
}
 800418c:	4618      	mov	r0, r3
 800418e:	3738      	adds	r7, #56	; 0x38
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	e000ed04 	.word	0xe000ed04

08004198 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08e      	sub	sp, #56	; 0x38
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d109      	bne.n	80041c4 <xQueueGenericSendFromISR+0x2c>
 80041b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
 80041c2:	e7fe      	b.n	80041c2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d103      	bne.n	80041d2 <xQueueGenericSendFromISR+0x3a>
 80041ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <xQueueGenericSendFromISR+0x3e>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <xQueueGenericSendFromISR+0x40>
 80041d6:	2300      	movs	r3, #0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d109      	bne.n	80041f0 <xQueueGenericSendFromISR+0x58>
 80041dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	623b      	str	r3, [r7, #32]
 80041ee:	e7fe      	b.n	80041ee <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d103      	bne.n	80041fe <xQueueGenericSendFromISR+0x66>
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <xQueueGenericSendFromISR+0x6a>
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <xQueueGenericSendFromISR+0x6c>
 8004202:	2300      	movs	r3, #0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d109      	bne.n	800421c <xQueueGenericSendFromISR+0x84>
 8004208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420c:	f383 8811 	msr	BASEPRI, r3
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	61fb      	str	r3, [r7, #28]
 800421a:	e7fe      	b.n	800421a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800421c:	f001 fe7e 	bl	8005f1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004220:	f3ef 8211 	mrs	r2, BASEPRI
 8004224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	61ba      	str	r2, [r7, #24]
 8004236:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004238:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800423a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800423c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004244:	429a      	cmp	r2, r3
 8004246:	d302      	bcc.n	800424e <xQueueGenericSendFromISR+0xb6>
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d12c      	bne.n	80042a8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004250:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004254:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	68b9      	ldr	r1, [r7, #8]
 800425c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800425e:	f000 f90b 	bl	8004478 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004262:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426a:	d112      	bne.n	8004292 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	2b00      	cmp	r3, #0
 8004272:	d016      	beq.n	80042a2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004276:	3324      	adds	r3, #36	; 0x24
 8004278:	4618      	mov	r0, r3
 800427a:	f000 feb5 	bl	8004fe8 <xTaskRemoveFromEventList>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00e      	beq.n	80042a2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00b      	beq.n	80042a2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	e007      	b.n	80042a2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004292:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004296:	3301      	adds	r3, #1
 8004298:	b2db      	uxtb	r3, r3
 800429a:	b25a      	sxtb	r2, r3
 800429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80042a2:	2301      	movs	r3, #1
 80042a4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80042a6:	e001      	b.n	80042ac <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	637b      	str	r3, [r7, #52]	; 0x34
 80042ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ae:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3738      	adds	r7, #56	; 0x38
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08c      	sub	sp, #48	; 0x30
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80042cc:	2300      	movs	r3, #0
 80042ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80042d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d109      	bne.n	80042ee <xQueueReceive+0x2e>
	__asm volatile
 80042da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	623b      	str	r3, [r7, #32]
 80042ec:	e7fe      	b.n	80042ec <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d103      	bne.n	80042fc <xQueueReceive+0x3c>
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <xQueueReceive+0x40>
 80042fc:	2301      	movs	r3, #1
 80042fe:	e000      	b.n	8004302 <xQueueReceive+0x42>
 8004300:	2300      	movs	r3, #0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d109      	bne.n	800431a <xQueueReceive+0x5a>
 8004306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	61fb      	str	r3, [r7, #28]
 8004318:	e7fe      	b.n	8004318 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800431a:	f001 f81f 	bl	800535c <xTaskGetSchedulerState>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d102      	bne.n	800432a <xQueueReceive+0x6a>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <xQueueReceive+0x6e>
 800432a:	2301      	movs	r3, #1
 800432c:	e000      	b.n	8004330 <xQueueReceive+0x70>
 800432e:	2300      	movs	r3, #0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d109      	bne.n	8004348 <xQueueReceive+0x88>
 8004334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	61bb      	str	r3, [r7, #24]
 8004346:	e7fe      	b.n	8004346 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004348:	f001 fd2e 	bl	8005da8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	2b00      	cmp	r3, #0
 8004356:	d01f      	beq.n	8004398 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004358:	68b9      	ldr	r1, [r7, #8]
 800435a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800435c:	f000 f8f6 	bl	800454c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	1e5a      	subs	r2, r3, #1
 8004364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004366:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00f      	beq.n	8004390 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004372:	3310      	adds	r3, #16
 8004374:	4618      	mov	r0, r3
 8004376:	f000 fe37 	bl	8004fe8 <xTaskRemoveFromEventList>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d007      	beq.n	8004390 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004380:	4b3c      	ldr	r3, [pc, #240]	; (8004474 <xQueueReceive+0x1b4>)
 8004382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004390:	f001 fd38 	bl	8005e04 <vPortExitCritical>
				return pdPASS;
 8004394:	2301      	movs	r3, #1
 8004396:	e069      	b.n	800446c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d103      	bne.n	80043a6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800439e:	f001 fd31 	bl	8005e04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043a2:	2300      	movs	r3, #0
 80043a4:	e062      	b.n	800446c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d106      	bne.n	80043ba <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043ac:	f107 0310 	add.w	r3, r7, #16
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 fe7b 	bl	80050ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043b6:	2301      	movs	r3, #1
 80043b8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043ba:	f001 fd23 	bl	8005e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043be:	f000 fbf3 	bl	8004ba8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043c2:	f001 fcf1 	bl	8005da8 <vPortEnterCritical>
 80043c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043cc:	b25b      	sxtb	r3, r3
 80043ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d2:	d103      	bne.n	80043dc <xQueueReceive+0x11c>
 80043d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043e2:	b25b      	sxtb	r3, r3
 80043e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e8:	d103      	bne.n	80043f2 <xQueueReceive+0x132>
 80043ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043f2:	f001 fd07 	bl	8005e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043f6:	1d3a      	adds	r2, r7, #4
 80043f8:	f107 0310 	add.w	r3, r7, #16
 80043fc:	4611      	mov	r1, r2
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fe6a 	bl	80050d8 <xTaskCheckForTimeOut>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d123      	bne.n	8004452 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800440a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800440c:	f000 f916 	bl	800463c <prvIsQueueEmpty>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d017      	beq.n	8004446 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	3324      	adds	r3, #36	; 0x24
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	4611      	mov	r1, r2
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fd94 	bl	8004f4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004426:	f000 f8b7 	bl	8004598 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800442a:	f000 fbcb 	bl	8004bc4 <xTaskResumeAll>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d189      	bne.n	8004348 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004434:	4b0f      	ldr	r3, [pc, #60]	; (8004474 <xQueueReceive+0x1b4>)
 8004436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	e780      	b.n	8004348 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004448:	f000 f8a6 	bl	8004598 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800444c:	f000 fbba 	bl	8004bc4 <xTaskResumeAll>
 8004450:	e77a      	b.n	8004348 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004454:	f000 f8a0 	bl	8004598 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004458:	f000 fbb4 	bl	8004bc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800445c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800445e:	f000 f8ed 	bl	800463c <prvIsQueueEmpty>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	f43f af6f 	beq.w	8004348 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800446a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800446c:	4618      	mov	r0, r3
 800446e:	3730      	adds	r7, #48	; 0x30
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	e000ed04 	.word	0xe000ed04

08004478 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10d      	bne.n	80044b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d14d      	bne.n	800453a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 ff78 	bl	8005398 <xTaskPriorityDisinherit>
 80044a8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	605a      	str	r2, [r3, #4]
 80044b0:	e043      	b.n	800453a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d119      	bne.n	80044ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6898      	ldr	r0, [r3, #8]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c0:	461a      	mov	r2, r3
 80044c2:	68b9      	ldr	r1, [r7, #8]
 80044c4:	f001 ff74 	bl	80063b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	441a      	add	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d32b      	bcc.n	800453a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	609a      	str	r2, [r3, #8]
 80044ea:	e026      	b.n	800453a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	68d8      	ldr	r0, [r3, #12]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f4:	461a      	mov	r2, r3
 80044f6:	68b9      	ldr	r1, [r7, #8]
 80044f8:	f001 ff5a 	bl	80063b0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	425b      	negs	r3, r3
 8004506:	441a      	add	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	429a      	cmp	r2, r3
 8004516:	d207      	bcs.n	8004528 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	425b      	negs	r3, r3
 8004522:	441a      	add	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b02      	cmp	r3, #2
 800452c:	d105      	bne.n	800453a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	3b01      	subs	r3, #1
 8004538:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004542:	697b      	ldr	r3, [r7, #20]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	2b00      	cmp	r3, #0
 800455c:	d018      	beq.n	8004590 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	441a      	add	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	429a      	cmp	r2, r3
 8004576:	d303      	bcc.n	8004580 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68d9      	ldr	r1, [r3, #12]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	461a      	mov	r2, r3
 800458a:	6838      	ldr	r0, [r7, #0]
 800458c:	f001 ff10 	bl	80063b0 <memcpy>
	}
}
 8004590:	bf00      	nop
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80045a0:	f001 fc02 	bl	8005da8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045ac:	e011      	b.n	80045d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d012      	beq.n	80045dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	3324      	adds	r3, #36	; 0x24
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fd14 	bl	8004fe8 <xTaskRemoveFromEventList>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80045c6:	f000 fde7 	bl	8005198 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	dce9      	bgt.n	80045ae <prvUnlockQueue+0x16>
 80045da:	e000      	b.n	80045de <prvUnlockQueue+0x46>
					break;
 80045dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	22ff      	movs	r2, #255	; 0xff
 80045e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80045e6:	f001 fc0d 	bl	8005e04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80045ea:	f001 fbdd 	bl	8005da8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045f6:	e011      	b.n	800461c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d012      	beq.n	8004626 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3310      	adds	r3, #16
 8004604:	4618      	mov	r0, r3
 8004606:	f000 fcef 	bl	8004fe8 <xTaskRemoveFromEventList>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004610:	f000 fdc2 	bl	8005198 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004614:	7bbb      	ldrb	r3, [r7, #14]
 8004616:	3b01      	subs	r3, #1
 8004618:	b2db      	uxtb	r3, r3
 800461a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800461c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004620:	2b00      	cmp	r3, #0
 8004622:	dce9      	bgt.n	80045f8 <prvUnlockQueue+0x60>
 8004624:	e000      	b.n	8004628 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004626:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	22ff      	movs	r2, #255	; 0xff
 800462c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004630:	f001 fbe8 	bl	8005e04 <vPortExitCritical>
}
 8004634:	bf00      	nop
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004644:	f001 fbb0 	bl	8005da8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	2b00      	cmp	r3, #0
 800464e:	d102      	bne.n	8004656 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004650:	2301      	movs	r3, #1
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	e001      	b.n	800465a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004656:	2300      	movs	r3, #0
 8004658:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800465a:	f001 fbd3 	bl	8005e04 <vPortExitCritical>

	return xReturn;
 800465e:	68fb      	ldr	r3, [r7, #12]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004670:	f001 fb9a 	bl	8005da8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467c:	429a      	cmp	r2, r3
 800467e:	d102      	bne.n	8004686 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004680:	2301      	movs	r3, #1
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	e001      	b.n	800468a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800468a:	f001 fbbb 	bl	8005e04 <vPortExitCritical>

	return xReturn;
 800468e:	68fb      	ldr	r3, [r7, #12]
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	e014      	b.n	80046d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80046a8:	4a0e      	ldr	r2, [pc, #56]	; (80046e4 <vQueueAddToRegistry+0x4c>)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10b      	bne.n	80046cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80046b4:	490b      	ldr	r1, [pc, #44]	; (80046e4 <vQueueAddToRegistry+0x4c>)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80046be:	4a09      	ldr	r2, [pc, #36]	; (80046e4 <vQueueAddToRegistry+0x4c>)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	4413      	add	r3, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80046ca:	e005      	b.n	80046d8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	3301      	adds	r3, #1
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b07      	cmp	r3, #7
 80046d6:	d9e7      	bls.n	80046a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80046d8:	bf00      	nop
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	bc80      	pop	{r7}
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	20001c04 	.word	0x20001c04

080046e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80046f8:	f001 fb56 	bl	8005da8 <vPortEnterCritical>
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004702:	b25b      	sxtb	r3, r3
 8004704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004708:	d103      	bne.n	8004712 <vQueueWaitForMessageRestricted+0x2a>
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004718:	b25b      	sxtb	r3, r3
 800471a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471e:	d103      	bne.n	8004728 <vQueueWaitForMessageRestricted+0x40>
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004728:	f001 fb6c 	bl	8005e04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	2b00      	cmp	r3, #0
 8004732:	d106      	bne.n	8004742 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	3324      	adds	r3, #36	; 0x24
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	68b9      	ldr	r1, [r7, #8]
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fc29 	bl	8004f94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004742:	6978      	ldr	r0, [r7, #20]
 8004744:	f7ff ff28 	bl	8004598 <prvUnlockQueue>
	}
 8004748:	bf00      	nop
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004750:	b580      	push	{r7, lr}
 8004752:	b08e      	sub	sp, #56	; 0x38
 8004754:	af04      	add	r7, sp, #16
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
 800475c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800475e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004760:	2b00      	cmp	r3, #0
 8004762:	d109      	bne.n	8004778 <xTaskCreateStatic+0x28>
 8004764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004768:	f383 8811 	msr	BASEPRI, r3
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	623b      	str	r3, [r7, #32]
 8004776:	e7fe      	b.n	8004776 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477a:	2b00      	cmp	r3, #0
 800477c:	d109      	bne.n	8004792 <xTaskCreateStatic+0x42>
 800477e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	61fb      	str	r3, [r7, #28]
 8004790:	e7fe      	b.n	8004790 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004792:	235c      	movs	r3, #92	; 0x5c
 8004794:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	2b5c      	cmp	r3, #92	; 0x5c
 800479a:	d009      	beq.n	80047b0 <xTaskCreateStatic+0x60>
 800479c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a0:	f383 8811 	msr	BASEPRI, r3
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	61bb      	str	r3, [r7, #24]
 80047ae:	e7fe      	b.n	80047ae <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80047b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d01e      	beq.n	80047f4 <xTaskCreateStatic+0xa4>
 80047b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01b      	beq.n	80047f4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	2202      	movs	r2, #2
 80047ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80047ce:	2300      	movs	r3, #0
 80047d0:	9303      	str	r3, [sp, #12]
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	9302      	str	r3, [sp, #8]
 80047d6:	f107 0314 	add.w	r3, r7, #20
 80047da:	9301      	str	r3, [sp, #4]
 80047dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	68b9      	ldr	r1, [r7, #8]
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 f850 	bl	800488c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047ee:	f000 f8d3 	bl	8004998 <prvAddNewTaskToReadyList>
 80047f2:	e001      	b.n	80047f8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80047f8:	697b      	ldr	r3, [r7, #20]
	}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3728      	adds	r7, #40	; 0x28
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004802:	b580      	push	{r7, lr}
 8004804:	b08c      	sub	sp, #48	; 0x30
 8004806:	af04      	add	r7, sp, #16
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	603b      	str	r3, [r7, #0]
 800480e:	4613      	mov	r3, r2
 8004810:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004812:	88fb      	ldrh	r3, [r7, #6]
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4618      	mov	r0, r3
 8004818:	f001 fbbc 	bl	8005f94 <pvPortMalloc>
 800481c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00e      	beq.n	8004842 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004824:	205c      	movs	r0, #92	; 0x5c
 8004826:	f001 fbb5 	bl	8005f94 <pvPortMalloc>
 800482a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	631a      	str	r2, [r3, #48]	; 0x30
 8004838:	e005      	b.n	8004846 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800483a:	6978      	ldr	r0, [r7, #20]
 800483c:	f001 fc6c 	bl	8006118 <vPortFree>
 8004840:	e001      	b.n	8004846 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004842:	2300      	movs	r3, #0
 8004844:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d017      	beq.n	800487c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004854:	88fa      	ldrh	r2, [r7, #6]
 8004856:	2300      	movs	r3, #0
 8004858:	9303      	str	r3, [sp, #12]
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	9302      	str	r3, [sp, #8]
 800485e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004860:	9301      	str	r3, [sp, #4]
 8004862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	68b9      	ldr	r1, [r7, #8]
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 f80e 	bl	800488c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004870:	69f8      	ldr	r0, [r7, #28]
 8004872:	f000 f891 	bl	8004998 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004876:	2301      	movs	r3, #1
 8004878:	61bb      	str	r3, [r7, #24]
 800487a:	e002      	b.n	8004882 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800487c:	f04f 33ff 	mov.w	r3, #4294967295
 8004880:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004882:	69bb      	ldr	r3, [r7, #24]
	}
 8004884:	4618      	mov	r0, r3
 8004886:	3720      	adds	r7, #32
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800489a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	461a      	mov	r2, r3
 80048a4:	21a5      	movs	r1, #165	; 0xa5
 80048a6:	f001 fd8e 	bl	80063c6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80048aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80048b4:	3b01      	subs	r3, #1
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	f023 0307 	bic.w	r3, r3, #7
 80048c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d009      	beq.n	80048e2 <prvInitialiseNewTask+0x56>
 80048ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	617b      	str	r3, [r7, #20]
 80048e0:	e7fe      	b.n	80048e0 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048e2:	2300      	movs	r3, #0
 80048e4:	61fb      	str	r3, [r7, #28]
 80048e6:	e012      	b.n	800490e <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	4413      	add	r3, r2
 80048ee:	7819      	ldrb	r1, [r3, #0]
 80048f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	4413      	add	r3, r2
 80048f6:	3334      	adds	r3, #52	; 0x34
 80048f8:	460a      	mov	r2, r1
 80048fa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	4413      	add	r3, r2
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d006      	beq.n	8004916 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	3301      	adds	r3, #1
 800490c:	61fb      	str	r3, [r7, #28]
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	2b0f      	cmp	r3, #15
 8004912:	d9e9      	bls.n	80048e8 <prvInitialiseNewTask+0x5c>
 8004914:	e000      	b.n	8004918 <prvInitialiseNewTask+0x8c>
		{
			break;
 8004916:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004922:	2b37      	cmp	r3, #55	; 0x37
 8004924:	d901      	bls.n	800492a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004926:	2337      	movs	r3, #55	; 0x37
 8004928:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800492e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004934:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004938:	2200      	movs	r2, #0
 800493a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800493c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493e:	3304      	adds	r3, #4
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff f964 	bl	8003c0e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004948:	3318      	adds	r3, #24
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff f95f 	bl	8003c0e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004954:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004958:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004964:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	2200      	movs	r2, #0
 800496a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800496c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496e:	2200      	movs	r2, #0
 8004970:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	68f9      	ldr	r1, [r7, #12]
 8004978:	69b8      	ldr	r0, [r7, #24]
 800497a:	f001 f929 	bl	8005bd0 <pxPortInitialiseStack>
 800497e:	4602      	mov	r2, r0
 8004980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004982:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800498a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800498e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004990:	bf00      	nop
 8004992:	3720      	adds	r7, #32
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80049a0:	f001 fa02 	bl	8005da8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80049a4:	4b2d      	ldr	r3, [pc, #180]	; (8004a5c <prvAddNewTaskToReadyList+0xc4>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3301      	adds	r3, #1
 80049aa:	4a2c      	ldr	r2, [pc, #176]	; (8004a5c <prvAddNewTaskToReadyList+0xc4>)
 80049ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80049ae:	4b2c      	ldr	r3, [pc, #176]	; (8004a60 <prvAddNewTaskToReadyList+0xc8>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d109      	bne.n	80049ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80049b6:	4a2a      	ldr	r2, [pc, #168]	; (8004a60 <prvAddNewTaskToReadyList+0xc8>)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80049bc:	4b27      	ldr	r3, [pc, #156]	; (8004a5c <prvAddNewTaskToReadyList+0xc4>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d110      	bne.n	80049e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80049c4:	f000 fc0c 	bl	80051e0 <prvInitialiseTaskLists>
 80049c8:	e00d      	b.n	80049e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80049ca:	4b26      	ldr	r3, [pc, #152]	; (8004a64 <prvAddNewTaskToReadyList+0xcc>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049d2:	4b23      	ldr	r3, [pc, #140]	; (8004a60 <prvAddNewTaskToReadyList+0xc8>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049dc:	429a      	cmp	r2, r3
 80049de:	d802      	bhi.n	80049e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049e0:	4a1f      	ldr	r2, [pc, #124]	; (8004a60 <prvAddNewTaskToReadyList+0xc8>)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049e6:	4b20      	ldr	r3, [pc, #128]	; (8004a68 <prvAddNewTaskToReadyList+0xd0>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	3301      	adds	r3, #1
 80049ec:	4a1e      	ldr	r2, [pc, #120]	; (8004a68 <prvAddNewTaskToReadyList+0xd0>)
 80049ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80049f0:	4b1d      	ldr	r3, [pc, #116]	; (8004a68 <prvAddNewTaskToReadyList+0xd0>)
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fc:	4b1b      	ldr	r3, [pc, #108]	; (8004a6c <prvAddNewTaskToReadyList+0xd4>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d903      	bls.n	8004a0c <prvAddNewTaskToReadyList+0x74>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	4a18      	ldr	r2, [pc, #96]	; (8004a6c <prvAddNewTaskToReadyList+0xd4>)
 8004a0a:	6013      	str	r3, [r2, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a10:	4613      	mov	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4a15      	ldr	r2, [pc, #84]	; (8004a70 <prvAddNewTaskToReadyList+0xd8>)
 8004a1a:	441a      	add	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3304      	adds	r3, #4
 8004a20:	4619      	mov	r1, r3
 8004a22:	4610      	mov	r0, r2
 8004a24:	f7ff f8ff 	bl	8003c26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a28:	f001 f9ec 	bl	8005e04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a2c:	4b0d      	ldr	r3, [pc, #52]	; (8004a64 <prvAddNewTaskToReadyList+0xcc>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00e      	beq.n	8004a52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a34:	4b0a      	ldr	r3, [pc, #40]	; (8004a60 <prvAddNewTaskToReadyList+0xc8>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d207      	bcs.n	8004a52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a42:	4b0c      	ldr	r3, [pc, #48]	; (8004a74 <prvAddNewTaskToReadyList+0xdc>)
 8004a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a52:	bf00      	nop
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20000c78 	.word	0x20000c78
 8004a60:	200007a4 	.word	0x200007a4
 8004a64:	20000c84 	.word	0x20000c84
 8004a68:	20000c94 	.word	0x20000c94
 8004a6c:	20000c80 	.word	0x20000c80
 8004a70:	200007a8 	.word	0x200007a8
 8004a74:	e000ed04 	.word	0xe000ed04

08004a78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a80:	2300      	movs	r3, #0
 8004a82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d016      	beq.n	8004ab8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a8a:	4b13      	ldr	r3, [pc, #76]	; (8004ad8 <vTaskDelay+0x60>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d009      	beq.n	8004aa6 <vTaskDelay+0x2e>
 8004a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	60bb      	str	r3, [r7, #8]
 8004aa4:	e7fe      	b.n	8004aa4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004aa6:	f000 f87f 	bl	8004ba8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004aaa:	2100      	movs	r1, #0
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 fcdf 	bl	8005470 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ab2:	f000 f887 	bl	8004bc4 <xTaskResumeAll>
 8004ab6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d107      	bne.n	8004ace <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004abe:	4b07      	ldr	r3, [pc, #28]	; (8004adc <vTaskDelay+0x64>)
 8004ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ace:	bf00      	nop
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20000ca0 	.word	0x20000ca0
 8004adc:	e000ed04 	.word	0xe000ed04

08004ae0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b08a      	sub	sp, #40	; 0x28
 8004ae4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004aee:	463a      	mov	r2, r7
 8004af0:	1d39      	adds	r1, r7, #4
 8004af2:	f107 0308 	add.w	r3, r7, #8
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff f81e 	bl	8003b38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004afc:	6839      	ldr	r1, [r7, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	9202      	str	r2, [sp, #8]
 8004b04:	9301      	str	r3, [sp, #4]
 8004b06:	2300      	movs	r3, #0
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	460a      	mov	r2, r1
 8004b0e:	4920      	ldr	r1, [pc, #128]	; (8004b90 <vTaskStartScheduler+0xb0>)
 8004b10:	4820      	ldr	r0, [pc, #128]	; (8004b94 <vTaskStartScheduler+0xb4>)
 8004b12:	f7ff fe1d 	bl	8004750 <xTaskCreateStatic>
 8004b16:	4602      	mov	r2, r0
 8004b18:	4b1f      	ldr	r3, [pc, #124]	; (8004b98 <vTaskStartScheduler+0xb8>)
 8004b1a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b1c:	4b1e      	ldr	r3, [pc, #120]	; (8004b98 <vTaskStartScheduler+0xb8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b24:	2301      	movs	r3, #1
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	e001      	b.n	8004b2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d102      	bne.n	8004b3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004b34:	f000 fcf0 	bl	8005518 <xTimerCreateTimerTask>
 8004b38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d115      	bne.n	8004b6c <vTaskStartScheduler+0x8c>
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b52:	4b12      	ldr	r3, [pc, #72]	; (8004b9c <vTaskStartScheduler+0xbc>)
 8004b54:	f04f 32ff 	mov.w	r2, #4294967295
 8004b58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b5a:	4b11      	ldr	r3, [pc, #68]	; (8004ba0 <vTaskStartScheduler+0xc0>)
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004b60:	4b10      	ldr	r3, [pc, #64]	; (8004ba4 <vTaskStartScheduler+0xc4>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b66:	f001 f8af 	bl	8005cc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b6a:	e00d      	b.n	8004b88 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b72:	d109      	bne.n	8004b88 <vTaskStartScheduler+0xa8>
 8004b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	e7fe      	b.n	8004b86 <vTaskStartScheduler+0xa6>
}
 8004b88:	bf00      	nop
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	08006710 	.word	0x08006710
 8004b94:	080051b1 	.word	0x080051b1
 8004b98:	20000c9c 	.word	0x20000c9c
 8004b9c:	20000c98 	.word	0x20000c98
 8004ba0:	20000c84 	.word	0x20000c84
 8004ba4:	20000c7c 	.word	0x20000c7c

08004ba8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004bac:	4b04      	ldr	r3, [pc, #16]	; (8004bc0 <vTaskSuspendAll+0x18>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	4a03      	ldr	r2, [pc, #12]	; (8004bc0 <vTaskSuspendAll+0x18>)
 8004bb4:	6013      	str	r3, [r2, #0]
}
 8004bb6:	bf00      	nop
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bc80      	pop	{r7}
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	20000ca0 	.word	0x20000ca0

08004bc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004bd2:	4b41      	ldr	r3, [pc, #260]	; (8004cd8 <xTaskResumeAll+0x114>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d109      	bne.n	8004bee <xTaskResumeAll+0x2a>
 8004bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	603b      	str	r3, [r7, #0]
 8004bec:	e7fe      	b.n	8004bec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004bee:	f001 f8db 	bl	8005da8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004bf2:	4b39      	ldr	r3, [pc, #228]	; (8004cd8 <xTaskResumeAll+0x114>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	4a37      	ldr	r2, [pc, #220]	; (8004cd8 <xTaskResumeAll+0x114>)
 8004bfa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bfc:	4b36      	ldr	r3, [pc, #216]	; (8004cd8 <xTaskResumeAll+0x114>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d162      	bne.n	8004cca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c04:	4b35      	ldr	r3, [pc, #212]	; (8004cdc <xTaskResumeAll+0x118>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d05e      	beq.n	8004cca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c0c:	e02f      	b.n	8004c6e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004c0e:	4b34      	ldr	r3, [pc, #208]	; (8004ce0 <xTaskResumeAll+0x11c>)
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	3318      	adds	r3, #24
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff f85e 	bl	8003cdc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	3304      	adds	r3, #4
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff f859 	bl	8003cdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2e:	4b2d      	ldr	r3, [pc, #180]	; (8004ce4 <xTaskResumeAll+0x120>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d903      	bls.n	8004c3e <xTaskResumeAll+0x7a>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3a:	4a2a      	ldr	r2, [pc, #168]	; (8004ce4 <xTaskResumeAll+0x120>)
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c42:	4613      	mov	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4a27      	ldr	r2, [pc, #156]	; (8004ce8 <xTaskResumeAll+0x124>)
 8004c4c:	441a      	add	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	3304      	adds	r3, #4
 8004c52:	4619      	mov	r1, r3
 8004c54:	4610      	mov	r0, r2
 8004c56:	f7fe ffe6 	bl	8003c26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c5e:	4b23      	ldr	r3, [pc, #140]	; (8004cec <xTaskResumeAll+0x128>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d302      	bcc.n	8004c6e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004c68:	4b21      	ldr	r3, [pc, #132]	; (8004cf0 <xTaskResumeAll+0x12c>)
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c6e:	4b1c      	ldr	r3, [pc, #112]	; (8004ce0 <xTaskResumeAll+0x11c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1cb      	bne.n	8004c0e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c7c:	f000 fb4a 	bl	8005314 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004c80:	4b1c      	ldr	r3, [pc, #112]	; (8004cf4 <xTaskResumeAll+0x130>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d010      	beq.n	8004cae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c8c:	f000 f844 	bl	8004d18 <xTaskIncrementTick>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d002      	beq.n	8004c9c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004c96:	4b16      	ldr	r3, [pc, #88]	; (8004cf0 <xTaskResumeAll+0x12c>)
 8004c98:	2201      	movs	r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1f1      	bne.n	8004c8c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004ca8:	4b12      	ldr	r3, [pc, #72]	; (8004cf4 <xTaskResumeAll+0x130>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004cae:	4b10      	ldr	r3, [pc, #64]	; (8004cf0 <xTaskResumeAll+0x12c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d009      	beq.n	8004cca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004cba:	4b0f      	ldr	r3, [pc, #60]	; (8004cf8 <xTaskResumeAll+0x134>)
 8004cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cca:	f001 f89b 	bl	8005e04 <vPortExitCritical>

	return xAlreadyYielded;
 8004cce:	68bb      	ldr	r3, [r7, #8]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	20000ca0 	.word	0x20000ca0
 8004cdc:	20000c78 	.word	0x20000c78
 8004ce0:	20000c38 	.word	0x20000c38
 8004ce4:	20000c80 	.word	0x20000c80
 8004ce8:	200007a8 	.word	0x200007a8
 8004cec:	200007a4 	.word	0x200007a4
 8004cf0:	20000c8c 	.word	0x20000c8c
 8004cf4:	20000c88 	.word	0x20000c88
 8004cf8:	e000ed04 	.word	0xe000ed04

08004cfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004d02:	4b04      	ldr	r3, [pc, #16]	; (8004d14 <xTaskGetTickCount+0x18>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004d08:	687b      	ldr	r3, [r7, #4]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr
 8004d14:	20000c7c 	.word	0x20000c7c

08004d18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d22:	4b51      	ldr	r3, [pc, #324]	; (8004e68 <xTaskIncrementTick+0x150>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f040 808d 	bne.w	8004e46 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d2c:	4b4f      	ldr	r3, [pc, #316]	; (8004e6c <xTaskIncrementTick+0x154>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3301      	adds	r3, #1
 8004d32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d34:	4a4d      	ldr	r2, [pc, #308]	; (8004e6c <xTaskIncrementTick+0x154>)
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d11f      	bne.n	8004d80 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d40:	4b4b      	ldr	r3, [pc, #300]	; (8004e70 <xTaskIncrementTick+0x158>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <xTaskIncrementTick+0x46>
 8004d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	603b      	str	r3, [r7, #0]
 8004d5c:	e7fe      	b.n	8004d5c <xTaskIncrementTick+0x44>
 8004d5e:	4b44      	ldr	r3, [pc, #272]	; (8004e70 <xTaskIncrementTick+0x158>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	4b43      	ldr	r3, [pc, #268]	; (8004e74 <xTaskIncrementTick+0x15c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a41      	ldr	r2, [pc, #260]	; (8004e70 <xTaskIncrementTick+0x158>)
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	4a41      	ldr	r2, [pc, #260]	; (8004e74 <xTaskIncrementTick+0x15c>)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6013      	str	r3, [r2, #0]
 8004d72:	4b41      	ldr	r3, [pc, #260]	; (8004e78 <xTaskIncrementTick+0x160>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3301      	adds	r3, #1
 8004d78:	4a3f      	ldr	r2, [pc, #252]	; (8004e78 <xTaskIncrementTick+0x160>)
 8004d7a:	6013      	str	r3, [r2, #0]
 8004d7c:	f000 faca 	bl	8005314 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d80:	4b3e      	ldr	r3, [pc, #248]	; (8004e7c <xTaskIncrementTick+0x164>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d34e      	bcc.n	8004e28 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d8a:	4b39      	ldr	r3, [pc, #228]	; (8004e70 <xTaskIncrementTick+0x158>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <xTaskIncrementTick+0x80>
 8004d94:	2301      	movs	r3, #1
 8004d96:	e000      	b.n	8004d9a <xTaskIncrementTick+0x82>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d004      	beq.n	8004da8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d9e:	4b37      	ldr	r3, [pc, #220]	; (8004e7c <xTaskIncrementTick+0x164>)
 8004da0:	f04f 32ff 	mov.w	r2, #4294967295
 8004da4:	601a      	str	r2, [r3, #0]
					break;
 8004da6:	e03f      	b.n	8004e28 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004da8:	4b31      	ldr	r3, [pc, #196]	; (8004e70 <xTaskIncrementTick+0x158>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d203      	bcs.n	8004dc8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004dc0:	4a2e      	ldr	r2, [pc, #184]	; (8004e7c <xTaskIncrementTick+0x164>)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6013      	str	r3, [r2, #0]
						break;
 8004dc6:	e02f      	b.n	8004e28 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fe ff85 	bl	8003cdc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d004      	beq.n	8004de4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	3318      	adds	r3, #24
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fe ff7c 	bl	8003cdc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de8:	4b25      	ldr	r3, [pc, #148]	; (8004e80 <xTaskIncrementTick+0x168>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d903      	bls.n	8004df8 <xTaskIncrementTick+0xe0>
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	4a22      	ldr	r2, [pc, #136]	; (8004e80 <xTaskIncrementTick+0x168>)
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4a1f      	ldr	r2, [pc, #124]	; (8004e84 <xTaskIncrementTick+0x16c>)
 8004e06:	441a      	add	r2, r3
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4610      	mov	r0, r2
 8004e10:	f7fe ff09 	bl	8003c26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e18:	4b1b      	ldr	r3, [pc, #108]	; (8004e88 <xTaskIncrementTick+0x170>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d3b3      	bcc.n	8004d8a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004e22:	2301      	movs	r3, #1
 8004e24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e26:	e7b0      	b.n	8004d8a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e28:	4b17      	ldr	r3, [pc, #92]	; (8004e88 <xTaskIncrementTick+0x170>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e2e:	4915      	ldr	r1, [pc, #84]	; (8004e84 <xTaskIncrementTick+0x16c>)
 8004e30:	4613      	mov	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	440b      	add	r3, r1
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d907      	bls.n	8004e50 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004e40:	2301      	movs	r3, #1
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	e004      	b.n	8004e50 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004e46:	4b11      	ldr	r3, [pc, #68]	; (8004e8c <xTaskIncrementTick+0x174>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	4a0f      	ldr	r2, [pc, #60]	; (8004e8c <xTaskIncrementTick+0x174>)
 8004e4e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004e50:	4b0f      	ldr	r3, [pc, #60]	; (8004e90 <xTaskIncrementTick+0x178>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d001      	beq.n	8004e5c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004e5c:	697b      	ldr	r3, [r7, #20]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3718      	adds	r7, #24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	20000ca0 	.word	0x20000ca0
 8004e6c:	20000c7c 	.word	0x20000c7c
 8004e70:	20000c30 	.word	0x20000c30
 8004e74:	20000c34 	.word	0x20000c34
 8004e78:	20000c90 	.word	0x20000c90
 8004e7c:	20000c98 	.word	0x20000c98
 8004e80:	20000c80 	.word	0x20000c80
 8004e84:	200007a8 	.word	0x200007a8
 8004e88:	200007a4 	.word	0x200007a4
 8004e8c:	20000c88 	.word	0x20000c88
 8004e90:	20000c8c 	.word	0x20000c8c

08004e94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e9a:	4b27      	ldr	r3, [pc, #156]	; (8004f38 <vTaskSwitchContext+0xa4>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ea2:	4b26      	ldr	r3, [pc, #152]	; (8004f3c <vTaskSwitchContext+0xa8>)
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ea8:	e040      	b.n	8004f2c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004eaa:	4b24      	ldr	r3, [pc, #144]	; (8004f3c <vTaskSwitchContext+0xa8>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004eb0:	4b23      	ldr	r3, [pc, #140]	; (8004f40 <vTaskSwitchContext+0xac>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	e00f      	b.n	8004ed8 <vTaskSwitchContext+0x44>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d109      	bne.n	8004ed2 <vTaskSwitchContext+0x3e>
 8004ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	607b      	str	r3, [r7, #4]
 8004ed0:	e7fe      	b.n	8004ed0 <vTaskSwitchContext+0x3c>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	491a      	ldr	r1, [pc, #104]	; (8004f44 <vTaskSwitchContext+0xb0>)
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4613      	mov	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0e5      	beq.n	8004eb8 <vTaskSwitchContext+0x24>
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4a13      	ldr	r2, [pc, #76]	; (8004f44 <vTaskSwitchContext+0xb0>)
 8004ef8:	4413      	add	r3, r2
 8004efa:	60bb      	str	r3, [r7, #8]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	605a      	str	r2, [r3, #4]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d104      	bne.n	8004f1c <vTaskSwitchContext+0x88>
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	605a      	str	r2, [r3, #4]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	4a09      	ldr	r2, [pc, #36]	; (8004f48 <vTaskSwitchContext+0xb4>)
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	4a06      	ldr	r2, [pc, #24]	; (8004f40 <vTaskSwitchContext+0xac>)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6013      	str	r3, [r2, #0]
}
 8004f2c:	bf00      	nop
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bc80      	pop	{r7}
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	20000ca0 	.word	0x20000ca0
 8004f3c:	20000c8c 	.word	0x20000c8c
 8004f40:	20000c80 	.word	0x20000c80
 8004f44:	200007a8 	.word	0x200007a8
 8004f48:	200007a4 	.word	0x200007a4

08004f4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d109      	bne.n	8004f70 <vTaskPlaceOnEventList+0x24>
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	60fb      	str	r3, [r7, #12]
 8004f6e:	e7fe      	b.n	8004f6e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f70:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <vTaskPlaceOnEventList+0x44>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3318      	adds	r3, #24
 8004f76:	4619      	mov	r1, r3
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7fe fe77 	bl	8003c6c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f7e:	2101      	movs	r1, #1
 8004f80:	6838      	ldr	r0, [r7, #0]
 8004f82:	f000 fa75 	bl	8005470 <prvAddCurrentTaskToDelayedList>
}
 8004f86:	bf00      	nop
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	200007a4 	.word	0x200007a4

08004f94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d109      	bne.n	8004fba <vTaskPlaceOnEventListRestricted+0x26>
 8004fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	617b      	str	r3, [r7, #20]
 8004fb8:	e7fe      	b.n	8004fb8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fba:	4b0a      	ldr	r3, [pc, #40]	; (8004fe4 <vTaskPlaceOnEventListRestricted+0x50>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	3318      	adds	r3, #24
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f7fe fe2f 	bl	8003c26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004fce:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004fd4:	6879      	ldr	r1, [r7, #4]
 8004fd6:	68b8      	ldr	r0, [r7, #8]
 8004fd8:	f000 fa4a 	bl	8005470 <prvAddCurrentTaskToDelayedList>
	}
 8004fdc:	bf00      	nop
 8004fde:	3718      	adds	r7, #24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	200007a4 	.word	0x200007a4

08004fe8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d109      	bne.n	8005012 <xTaskRemoveFromEventList+0x2a>
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	e7fe      	b.n	8005010 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	3318      	adds	r3, #24
 8005016:	4618      	mov	r0, r3
 8005018:	f7fe fe60 	bl	8003cdc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800501c:	4b1d      	ldr	r3, [pc, #116]	; (8005094 <xTaskRemoveFromEventList+0xac>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d11d      	bne.n	8005060 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	3304      	adds	r3, #4
 8005028:	4618      	mov	r0, r3
 800502a:	f7fe fe57 	bl	8003cdc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005032:	4b19      	ldr	r3, [pc, #100]	; (8005098 <xTaskRemoveFromEventList+0xb0>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d903      	bls.n	8005042 <xTaskRemoveFromEventList+0x5a>
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503e:	4a16      	ldr	r2, [pc, #88]	; (8005098 <xTaskRemoveFromEventList+0xb0>)
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005046:	4613      	mov	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4a13      	ldr	r2, [pc, #76]	; (800509c <xTaskRemoveFromEventList+0xb4>)
 8005050:	441a      	add	r2, r3
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	3304      	adds	r3, #4
 8005056:	4619      	mov	r1, r3
 8005058:	4610      	mov	r0, r2
 800505a:	f7fe fde4 	bl	8003c26 <vListInsertEnd>
 800505e:	e005      	b.n	800506c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	3318      	adds	r3, #24
 8005064:	4619      	mov	r1, r3
 8005066:	480e      	ldr	r0, [pc, #56]	; (80050a0 <xTaskRemoveFromEventList+0xb8>)
 8005068:	f7fe fddd 	bl	8003c26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005070:	4b0c      	ldr	r3, [pc, #48]	; (80050a4 <xTaskRemoveFromEventList+0xbc>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005076:	429a      	cmp	r2, r3
 8005078:	d905      	bls.n	8005086 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800507a:	2301      	movs	r3, #1
 800507c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800507e:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <xTaskRemoveFromEventList+0xc0>)
 8005080:	2201      	movs	r2, #1
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	e001      	b.n	800508a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005086:	2300      	movs	r3, #0
 8005088:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800508a:	697b      	ldr	r3, [r7, #20]
}
 800508c:	4618      	mov	r0, r3
 800508e:	3718      	adds	r7, #24
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	20000ca0 	.word	0x20000ca0
 8005098:	20000c80 	.word	0x20000c80
 800509c:	200007a8 	.word	0x200007a8
 80050a0:	20000c38 	.word	0x20000c38
 80050a4:	200007a4 	.word	0x200007a4
 80050a8:	20000c8c 	.word	0x20000c8c

080050ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050b4:	4b06      	ldr	r3, [pc, #24]	; (80050d0 <vTaskInternalSetTimeOutState+0x24>)
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050bc:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <vTaskInternalSetTimeOutState+0x28>)
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	605a      	str	r2, [r3, #4]
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bc80      	pop	{r7}
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	20000c90 	.word	0x20000c90
 80050d4:	20000c7c 	.word	0x20000c7c

080050d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b088      	sub	sp, #32
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d109      	bne.n	80050fc <xTaskCheckForTimeOut+0x24>
 80050e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ec:	f383 8811 	msr	BASEPRI, r3
 80050f0:	f3bf 8f6f 	isb	sy
 80050f4:	f3bf 8f4f 	dsb	sy
 80050f8:	613b      	str	r3, [r7, #16]
 80050fa:	e7fe      	b.n	80050fa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d109      	bne.n	8005116 <xTaskCheckForTimeOut+0x3e>
 8005102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	e7fe      	b.n	8005114 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005116:	f000 fe47 	bl	8005da8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800511a:	4b1d      	ldr	r3, [pc, #116]	; (8005190 <xTaskCheckForTimeOut+0xb8>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005132:	d102      	bne.n	800513a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005134:	2300      	movs	r3, #0
 8005136:	61fb      	str	r3, [r7, #28]
 8005138:	e023      	b.n	8005182 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	4b15      	ldr	r3, [pc, #84]	; (8005194 <xTaskCheckForTimeOut+0xbc>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d007      	beq.n	8005156 <xTaskCheckForTimeOut+0x7e>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	429a      	cmp	r2, r3
 800514e:	d302      	bcc.n	8005156 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005150:	2301      	movs	r3, #1
 8005152:	61fb      	str	r3, [r7, #28]
 8005154:	e015      	b.n	8005182 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	429a      	cmp	r2, r3
 800515e:	d20b      	bcs.n	8005178 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	1ad2      	subs	r2, r2, r3
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7ff ff9d 	bl	80050ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005172:	2300      	movs	r3, #0
 8005174:	61fb      	str	r3, [r7, #28]
 8005176:	e004      	b.n	8005182 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	2200      	movs	r2, #0
 800517c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800517e:	2301      	movs	r3, #1
 8005180:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005182:	f000 fe3f 	bl	8005e04 <vPortExitCritical>

	return xReturn;
 8005186:	69fb      	ldr	r3, [r7, #28]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3720      	adds	r7, #32
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	20000c7c 	.word	0x20000c7c
 8005194:	20000c90 	.word	0x20000c90

08005198 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800519c:	4b03      	ldr	r3, [pc, #12]	; (80051ac <vTaskMissedYield+0x14>)
 800519e:	2201      	movs	r2, #1
 80051a0:	601a      	str	r2, [r3, #0]
}
 80051a2:	bf00      	nop
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bc80      	pop	{r7}
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	20000c8c 	.word	0x20000c8c

080051b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80051b8:	f000 f852 	bl	8005260 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051bc:	4b06      	ldr	r3, [pc, #24]	; (80051d8 <prvIdleTask+0x28>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d9f9      	bls.n	80051b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80051c4:	4b05      	ldr	r3, [pc, #20]	; (80051dc <prvIdleTask+0x2c>)
 80051c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80051d4:	e7f0      	b.n	80051b8 <prvIdleTask+0x8>
 80051d6:	bf00      	nop
 80051d8:	200007a8 	.word	0x200007a8
 80051dc:	e000ed04 	.word	0xe000ed04

080051e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051e6:	2300      	movs	r3, #0
 80051e8:	607b      	str	r3, [r7, #4]
 80051ea:	e00c      	b.n	8005206 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	4613      	mov	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4a12      	ldr	r2, [pc, #72]	; (8005240 <prvInitialiseTaskLists+0x60>)
 80051f8:	4413      	add	r3, r2
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fe fce8 	bl	8003bd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3301      	adds	r3, #1
 8005204:	607b      	str	r3, [r7, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b37      	cmp	r3, #55	; 0x37
 800520a:	d9ef      	bls.n	80051ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800520c:	480d      	ldr	r0, [pc, #52]	; (8005244 <prvInitialiseTaskLists+0x64>)
 800520e:	f7fe fcdf 	bl	8003bd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005212:	480d      	ldr	r0, [pc, #52]	; (8005248 <prvInitialiseTaskLists+0x68>)
 8005214:	f7fe fcdc 	bl	8003bd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005218:	480c      	ldr	r0, [pc, #48]	; (800524c <prvInitialiseTaskLists+0x6c>)
 800521a:	f7fe fcd9 	bl	8003bd0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800521e:	480c      	ldr	r0, [pc, #48]	; (8005250 <prvInitialiseTaskLists+0x70>)
 8005220:	f7fe fcd6 	bl	8003bd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005224:	480b      	ldr	r0, [pc, #44]	; (8005254 <prvInitialiseTaskLists+0x74>)
 8005226:	f7fe fcd3 	bl	8003bd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800522a:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <prvInitialiseTaskLists+0x78>)
 800522c:	4a05      	ldr	r2, [pc, #20]	; (8005244 <prvInitialiseTaskLists+0x64>)
 800522e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005230:	4b0a      	ldr	r3, [pc, #40]	; (800525c <prvInitialiseTaskLists+0x7c>)
 8005232:	4a05      	ldr	r2, [pc, #20]	; (8005248 <prvInitialiseTaskLists+0x68>)
 8005234:	601a      	str	r2, [r3, #0]
}
 8005236:	bf00      	nop
 8005238:	3708      	adds	r7, #8
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	200007a8 	.word	0x200007a8
 8005244:	20000c08 	.word	0x20000c08
 8005248:	20000c1c 	.word	0x20000c1c
 800524c:	20000c38 	.word	0x20000c38
 8005250:	20000c4c 	.word	0x20000c4c
 8005254:	20000c64 	.word	0x20000c64
 8005258:	20000c30 	.word	0x20000c30
 800525c:	20000c34 	.word	0x20000c34

08005260 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005266:	e019      	b.n	800529c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005268:	f000 fd9e 	bl	8005da8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800526c:	4b0f      	ldr	r3, [pc, #60]	; (80052ac <prvCheckTasksWaitingTermination+0x4c>)
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3304      	adds	r3, #4
 8005278:	4618      	mov	r0, r3
 800527a:	f7fe fd2f 	bl	8003cdc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800527e:	4b0c      	ldr	r3, [pc, #48]	; (80052b0 <prvCheckTasksWaitingTermination+0x50>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3b01      	subs	r3, #1
 8005284:	4a0a      	ldr	r2, [pc, #40]	; (80052b0 <prvCheckTasksWaitingTermination+0x50>)
 8005286:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005288:	4b0a      	ldr	r3, [pc, #40]	; (80052b4 <prvCheckTasksWaitingTermination+0x54>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3b01      	subs	r3, #1
 800528e:	4a09      	ldr	r2, [pc, #36]	; (80052b4 <prvCheckTasksWaitingTermination+0x54>)
 8005290:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005292:	f000 fdb7 	bl	8005e04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f80e 	bl	80052b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800529c:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <prvCheckTasksWaitingTermination+0x54>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1e1      	bne.n	8005268 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80052a4:	bf00      	nop
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	20000c4c 	.word	0x20000c4c
 80052b0:	20000c78 	.word	0x20000c78
 80052b4:	20000c60 	.word	0x20000c60

080052b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d108      	bne.n	80052dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 ff22 	bl	8006118 <vPortFree>
				vPortFree( pxTCB );
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 ff1f 	bl	8006118 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80052da:	e017      	b.n	800530c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d103      	bne.n	80052ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 ff16 	bl	8006118 <vPortFree>
	}
 80052ec:	e00e      	b.n	800530c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d009      	beq.n	800530c <prvDeleteTCB+0x54>
 80052f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	f3bf 8f6f 	isb	sy
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	e7fe      	b.n	800530a <prvDeleteTCB+0x52>
	}
 800530c:	bf00      	nop
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800531a:	4b0e      	ldr	r3, [pc, #56]	; (8005354 <prvResetNextTaskUnblockTime+0x40>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <prvResetNextTaskUnblockTime+0x14>
 8005324:	2301      	movs	r3, #1
 8005326:	e000      	b.n	800532a <prvResetNextTaskUnblockTime+0x16>
 8005328:	2300      	movs	r3, #0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d004      	beq.n	8005338 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800532e:	4b0a      	ldr	r3, [pc, #40]	; (8005358 <prvResetNextTaskUnblockTime+0x44>)
 8005330:	f04f 32ff 	mov.w	r2, #4294967295
 8005334:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005336:	e008      	b.n	800534a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005338:	4b06      	ldr	r3, [pc, #24]	; (8005354 <prvResetNextTaskUnblockTime+0x40>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	4a04      	ldr	r2, [pc, #16]	; (8005358 <prvResetNextTaskUnblockTime+0x44>)
 8005348:	6013      	str	r3, [r2, #0]
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	bc80      	pop	{r7}
 8005352:	4770      	bx	lr
 8005354:	20000c30 	.word	0x20000c30
 8005358:	20000c98 	.word	0x20000c98

0800535c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005362:	4b0b      	ldr	r3, [pc, #44]	; (8005390 <xTaskGetSchedulerState+0x34>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d102      	bne.n	8005370 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800536a:	2301      	movs	r3, #1
 800536c:	607b      	str	r3, [r7, #4]
 800536e:	e008      	b.n	8005382 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005370:	4b08      	ldr	r3, [pc, #32]	; (8005394 <xTaskGetSchedulerState+0x38>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d102      	bne.n	800537e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005378:	2302      	movs	r3, #2
 800537a:	607b      	str	r3, [r7, #4]
 800537c:	e001      	b.n	8005382 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800537e:	2300      	movs	r3, #0
 8005380:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005382:	687b      	ldr	r3, [r7, #4]
	}
 8005384:	4618      	mov	r0, r3
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	bc80      	pop	{r7}
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	20000c84 	.word	0x20000c84
 8005394:	20000ca0 	.word	0x20000ca0

08005398 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80053a4:	2300      	movs	r3, #0
 80053a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d054      	beq.n	8005458 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80053ae:	4b2d      	ldr	r3, [pc, #180]	; (8005464 <xTaskPriorityDisinherit+0xcc>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d009      	beq.n	80053cc <xTaskPriorityDisinherit+0x34>
 80053b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	60fb      	str	r3, [r7, #12]
 80053ca:	e7fe      	b.n	80053ca <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d109      	bne.n	80053e8 <xTaskPriorityDisinherit+0x50>
 80053d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	60bb      	str	r3, [r7, #8]
 80053e6:	e7fe      	b.n	80053e6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ec:	1e5a      	subs	r2, r3, #1
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d02c      	beq.n	8005458 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005402:	2b00      	cmp	r3, #0
 8005404:	d128      	bne.n	8005458 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	3304      	adds	r3, #4
 800540a:	4618      	mov	r0, r3
 800540c:	f7fe fc66 	bl	8003cdc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005428:	4b0f      	ldr	r3, [pc, #60]	; (8005468 <xTaskPriorityDisinherit+0xd0>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	d903      	bls.n	8005438 <xTaskPriorityDisinherit+0xa0>
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005434:	4a0c      	ldr	r2, [pc, #48]	; (8005468 <xTaskPriorityDisinherit+0xd0>)
 8005436:	6013      	str	r3, [r2, #0]
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800543c:	4613      	mov	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4a09      	ldr	r2, [pc, #36]	; (800546c <xTaskPriorityDisinherit+0xd4>)
 8005446:	441a      	add	r2, r3
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	3304      	adds	r3, #4
 800544c:	4619      	mov	r1, r3
 800544e:	4610      	mov	r0, r2
 8005450:	f7fe fbe9 	bl	8003c26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005454:	2301      	movs	r3, #1
 8005456:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005458:	697b      	ldr	r3, [r7, #20]
	}
 800545a:	4618      	mov	r0, r3
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	200007a4 	.word	0x200007a4
 8005468:	20000c80 	.word	0x20000c80
 800546c:	200007a8 	.word	0x200007a8

08005470 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800547a:	4b21      	ldr	r3, [pc, #132]	; (8005500 <prvAddCurrentTaskToDelayedList+0x90>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005480:	4b20      	ldr	r3, [pc, #128]	; (8005504 <prvAddCurrentTaskToDelayedList+0x94>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3304      	adds	r3, #4
 8005486:	4618      	mov	r0, r3
 8005488:	f7fe fc28 	bl	8003cdc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005492:	d10a      	bne.n	80054aa <prvAddCurrentTaskToDelayedList+0x3a>
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d007      	beq.n	80054aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800549a:	4b1a      	ldr	r3, [pc, #104]	; (8005504 <prvAddCurrentTaskToDelayedList+0x94>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3304      	adds	r3, #4
 80054a0:	4619      	mov	r1, r3
 80054a2:	4819      	ldr	r0, [pc, #100]	; (8005508 <prvAddCurrentTaskToDelayedList+0x98>)
 80054a4:	f7fe fbbf 	bl	8003c26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054a8:	e026      	b.n	80054f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4413      	add	r3, r2
 80054b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054b2:	4b14      	ldr	r3, [pc, #80]	; (8005504 <prvAddCurrentTaskToDelayedList+0x94>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d209      	bcs.n	80054d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054c2:	4b12      	ldr	r3, [pc, #72]	; (800550c <prvAddCurrentTaskToDelayedList+0x9c>)
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	4b0f      	ldr	r3, [pc, #60]	; (8005504 <prvAddCurrentTaskToDelayedList+0x94>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3304      	adds	r3, #4
 80054cc:	4619      	mov	r1, r3
 80054ce:	4610      	mov	r0, r2
 80054d0:	f7fe fbcc 	bl	8003c6c <vListInsert>
}
 80054d4:	e010      	b.n	80054f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054d6:	4b0e      	ldr	r3, [pc, #56]	; (8005510 <prvAddCurrentTaskToDelayedList+0xa0>)
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	4b0a      	ldr	r3, [pc, #40]	; (8005504 <prvAddCurrentTaskToDelayedList+0x94>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3304      	adds	r3, #4
 80054e0:	4619      	mov	r1, r3
 80054e2:	4610      	mov	r0, r2
 80054e4:	f7fe fbc2 	bl	8003c6c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80054e8:	4b0a      	ldr	r3, [pc, #40]	; (8005514 <prvAddCurrentTaskToDelayedList+0xa4>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d202      	bcs.n	80054f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80054f2:	4a08      	ldr	r2, [pc, #32]	; (8005514 <prvAddCurrentTaskToDelayedList+0xa4>)
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	6013      	str	r3, [r2, #0]
}
 80054f8:	bf00      	nop
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	20000c7c 	.word	0x20000c7c
 8005504:	200007a4 	.word	0x200007a4
 8005508:	20000c64 	.word	0x20000c64
 800550c:	20000c34 	.word	0x20000c34
 8005510:	20000c30 	.word	0x20000c30
 8005514:	20000c98 	.word	0x20000c98

08005518 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b08a      	sub	sp, #40	; 0x28
 800551c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800551e:	2300      	movs	r3, #0
 8005520:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005522:	f000 fb15 	bl	8005b50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005526:	4b1c      	ldr	r3, [pc, #112]	; (8005598 <xTimerCreateTimerTask+0x80>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d021      	beq.n	8005572 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800552e:	2300      	movs	r3, #0
 8005530:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005532:	2300      	movs	r3, #0
 8005534:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005536:	1d3a      	adds	r2, r7, #4
 8005538:	f107 0108 	add.w	r1, r7, #8
 800553c:	f107 030c 	add.w	r3, r7, #12
 8005540:	4618      	mov	r0, r3
 8005542:	f7fe fb11 	bl	8003b68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	9202      	str	r2, [sp, #8]
 800554e:	9301      	str	r3, [sp, #4]
 8005550:	2302      	movs	r3, #2
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	2300      	movs	r3, #0
 8005556:	460a      	mov	r2, r1
 8005558:	4910      	ldr	r1, [pc, #64]	; (800559c <xTimerCreateTimerTask+0x84>)
 800555a:	4811      	ldr	r0, [pc, #68]	; (80055a0 <xTimerCreateTimerTask+0x88>)
 800555c:	f7ff f8f8 	bl	8004750 <xTaskCreateStatic>
 8005560:	4602      	mov	r2, r0
 8005562:	4b10      	ldr	r3, [pc, #64]	; (80055a4 <xTimerCreateTimerTask+0x8c>)
 8005564:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005566:	4b0f      	ldr	r3, [pc, #60]	; (80055a4 <xTimerCreateTimerTask+0x8c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800556e:	2301      	movs	r3, #1
 8005570:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d109      	bne.n	800558c <xTimerCreateTimerTask+0x74>
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	613b      	str	r3, [r7, #16]
 800558a:	e7fe      	b.n	800558a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800558c:	697b      	ldr	r3, [r7, #20]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	20000cd4 	.word	0x20000cd4
 800559c:	08006718 	.word	0x08006718
 80055a0:	08005765 	.word	0x08005765
 80055a4:	20000cd8 	.word	0x20000cd8

080055a8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b088      	sub	sp, #32
 80055ac:	af02      	add	r7, sp, #8
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80055b6:	2030      	movs	r0, #48	; 0x30
 80055b8:	f000 fcec 	bl	8005f94 <pvPortMalloc>
 80055bc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00d      	beq.n	80055e0 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	9301      	str	r3, [sp, #4]
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	68b9      	ldr	r1, [r7, #8]
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 f809 	bl	80055ea <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80055e0:	697b      	ldr	r3, [r7, #20]
	}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3718      	adds	r7, #24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b086      	sub	sp, #24
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	60f8      	str	r0, [r7, #12]
 80055f2:	60b9      	str	r1, [r7, #8]
 80055f4:	607a      	str	r2, [r7, #4]
 80055f6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d109      	bne.n	8005612 <prvInitialiseNewTimer+0x28>
 80055fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	e7fe      	b.n	8005610 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	2b00      	cmp	r3, #0
 8005616:	d015      	beq.n	8005644 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005618:	f000 fa9a 	bl	8005b50 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	6a3a      	ldr	r2, [r7, #32]
 8005638:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	3304      	adds	r3, #4
 800563e:	4618      	mov	r0, r3
 8005640:	f7fe fae5 	bl	8003c0e <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005644:	bf00      	nop
 8005646:	3718      	adds	r7, #24
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b08a      	sub	sp, #40	; 0x28
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
 8005658:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800565a:	2300      	movs	r3, #0
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d109      	bne.n	8005678 <xTimerGenericCommand+0x2c>
 8005664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	623b      	str	r3, [r7, #32]
 8005676:	e7fe      	b.n	8005676 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005678:	4b19      	ldr	r3, [pc, #100]	; (80056e0 <xTimerGenericCommand+0x94>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d02a      	beq.n	80056d6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	2b05      	cmp	r3, #5
 8005690:	dc18      	bgt.n	80056c4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005692:	f7ff fe63 	bl	800535c <xTaskGetSchedulerState>
 8005696:	4603      	mov	r3, r0
 8005698:	2b02      	cmp	r3, #2
 800569a:	d109      	bne.n	80056b0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800569c:	4b10      	ldr	r3, [pc, #64]	; (80056e0 <xTimerGenericCommand+0x94>)
 800569e:	6818      	ldr	r0, [r3, #0]
 80056a0:	f107 0110 	add.w	r1, r7, #16
 80056a4:	2300      	movs	r3, #0
 80056a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056a8:	f7fe fc7c 	bl	8003fa4 <xQueueGenericSend>
 80056ac:	6278      	str	r0, [r7, #36]	; 0x24
 80056ae:	e012      	b.n	80056d6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80056b0:	4b0b      	ldr	r3, [pc, #44]	; (80056e0 <xTimerGenericCommand+0x94>)
 80056b2:	6818      	ldr	r0, [r3, #0]
 80056b4:	f107 0110 	add.w	r1, r7, #16
 80056b8:	2300      	movs	r3, #0
 80056ba:	2200      	movs	r2, #0
 80056bc:	f7fe fc72 	bl	8003fa4 <xQueueGenericSend>
 80056c0:	6278      	str	r0, [r7, #36]	; 0x24
 80056c2:	e008      	b.n	80056d6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80056c4:	4b06      	ldr	r3, [pc, #24]	; (80056e0 <xTimerGenericCommand+0x94>)
 80056c6:	6818      	ldr	r0, [r3, #0]
 80056c8:	f107 0110 	add.w	r1, r7, #16
 80056cc:	2300      	movs	r3, #0
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	f7fe fd62 	bl	8004198 <xQueueGenericSendFromISR>
 80056d4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3728      	adds	r7, #40	; 0x28
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	20000cd4 	.word	0x20000cd4

080056e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b088      	sub	sp, #32
 80056e8:	af02      	add	r7, sp, #8
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056ee:	4b1c      	ldr	r3, [pc, #112]	; (8005760 <prvProcessExpiredTimer+0x7c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	3304      	adds	r3, #4
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7fe faed 	bl	8003cdc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d121      	bne.n	800574e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	699a      	ldr	r2, [r3, #24]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	18d1      	adds	r1, r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	6978      	ldr	r0, [r7, #20]
 8005718:	f000 f8c8 	bl	80058ac <prvInsertTimerInActiveList>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d015      	beq.n	800574e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005722:	2300      	movs	r3, #0
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	2300      	movs	r3, #0
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	2100      	movs	r1, #0
 800572c:	6978      	ldr	r0, [r7, #20]
 800572e:	f7ff ff8d 	bl	800564c <xTimerGenericCommand>
 8005732:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d109      	bne.n	800574e <prvProcessExpiredTimer+0x6a>
 800573a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	e7fe      	b.n	800574c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	6978      	ldr	r0, [r7, #20]
 8005754:	4798      	blx	r3
}
 8005756:	bf00      	nop
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000ccc 	.word	0x20000ccc

08005764 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800576c:	f107 0308 	add.w	r3, r7, #8
 8005770:	4618      	mov	r0, r3
 8005772:	f000 f857 	bl	8005824 <prvGetNextExpireTime>
 8005776:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	4619      	mov	r1, r3
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 f803 	bl	8005788 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005782:	f000 f8d5 	bl	8005930 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005786:	e7f1      	b.n	800576c <prvTimerTask+0x8>

08005788 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005792:	f7ff fa09 	bl	8004ba8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005796:	f107 0308 	add.w	r3, r7, #8
 800579a:	4618      	mov	r0, r3
 800579c:	f000 f866 	bl	800586c <prvSampleTimeNow>
 80057a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d130      	bne.n	800580a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10a      	bne.n	80057c4 <prvProcessTimerOrBlockTask+0x3c>
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d806      	bhi.n	80057c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80057b6:	f7ff fa05 	bl	8004bc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80057ba:	68f9      	ldr	r1, [r7, #12]
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f7ff ff91 	bl	80056e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80057c2:	e024      	b.n	800580e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d008      	beq.n	80057dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80057ca:	4b13      	ldr	r3, [pc, #76]	; (8005818 <prvProcessTimerOrBlockTask+0x90>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	bf0c      	ite	eq
 80057d4:	2301      	moveq	r3, #1
 80057d6:	2300      	movne	r3, #0
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80057dc:	4b0f      	ldr	r3, [pc, #60]	; (800581c <prvProcessTimerOrBlockTask+0x94>)
 80057de:	6818      	ldr	r0, [r3, #0]
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	4619      	mov	r1, r3
 80057ea:	f7fe ff7d 	bl	80046e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80057ee:	f7ff f9e9 	bl	8004bc4 <xTaskResumeAll>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10a      	bne.n	800580e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80057f8:	4b09      	ldr	r3, [pc, #36]	; (8005820 <prvProcessTimerOrBlockTask+0x98>)
 80057fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	f3bf 8f6f 	isb	sy
}
 8005808:	e001      	b.n	800580e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800580a:	f7ff f9db 	bl	8004bc4 <xTaskResumeAll>
}
 800580e:	bf00      	nop
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	20000cd0 	.word	0x20000cd0
 800581c:	20000cd4 	.word	0x20000cd4
 8005820:	e000ed04 	.word	0xe000ed04

08005824 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800582c:	4b0e      	ldr	r3, [pc, #56]	; (8005868 <prvGetNextExpireTime+0x44>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	bf0c      	ite	eq
 8005836:	2301      	moveq	r3, #1
 8005838:	2300      	movne	r3, #0
 800583a:	b2db      	uxtb	r3, r3
 800583c:	461a      	mov	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d105      	bne.n	8005856 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800584a:	4b07      	ldr	r3, [pc, #28]	; (8005868 <prvGetNextExpireTime+0x44>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	e001      	b.n	800585a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800585a:	68fb      	ldr	r3, [r7, #12]
}
 800585c:	4618      	mov	r0, r3
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	bc80      	pop	{r7}
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	20000ccc 	.word	0x20000ccc

0800586c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005874:	f7ff fa42 	bl	8004cfc <xTaskGetTickCount>
 8005878:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800587a:	4b0b      	ldr	r3, [pc, #44]	; (80058a8 <prvSampleTimeNow+0x3c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	429a      	cmp	r2, r3
 8005882:	d205      	bcs.n	8005890 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005884:	f000 f904 	bl	8005a90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	e002      	b.n	8005896 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005896:	4a04      	ldr	r2, [pc, #16]	; (80058a8 <prvSampleTimeNow+0x3c>)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800589c:	68fb      	ldr	r3, [r7, #12]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	20000cdc 	.word	0x20000cdc

080058ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80058ba:	2300      	movs	r3, #0
 80058bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d812      	bhi.n	80058f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	1ad2      	subs	r2, r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d302      	bcc.n	80058e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80058e0:	2301      	movs	r3, #1
 80058e2:	617b      	str	r3, [r7, #20]
 80058e4:	e01b      	b.n	800591e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80058e6:	4b10      	ldr	r3, [pc, #64]	; (8005928 <prvInsertTimerInActiveList+0x7c>)
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	3304      	adds	r3, #4
 80058ee:	4619      	mov	r1, r3
 80058f0:	4610      	mov	r0, r2
 80058f2:	f7fe f9bb 	bl	8003c6c <vListInsert>
 80058f6:	e012      	b.n	800591e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d206      	bcs.n	800590e <prvInsertTimerInActiveList+0x62>
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	429a      	cmp	r2, r3
 8005906:	d302      	bcc.n	800590e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005908:	2301      	movs	r3, #1
 800590a:	617b      	str	r3, [r7, #20]
 800590c:	e007      	b.n	800591e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800590e:	4b07      	ldr	r3, [pc, #28]	; (800592c <prvInsertTimerInActiveList+0x80>)
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	3304      	adds	r3, #4
 8005916:	4619      	mov	r1, r3
 8005918:	4610      	mov	r0, r2
 800591a:	f7fe f9a7 	bl	8003c6c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800591e:	697b      	ldr	r3, [r7, #20]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3718      	adds	r7, #24
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	20000cd0 	.word	0x20000cd0
 800592c:	20000ccc 	.word	0x20000ccc

08005930 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08e      	sub	sp, #56	; 0x38
 8005934:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005936:	e099      	b.n	8005a6c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	da17      	bge.n	800596e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800593e:	1d3b      	adds	r3, r7, #4
 8005940:	3304      	adds	r3, #4
 8005942:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005946:	2b00      	cmp	r3, #0
 8005948:	d109      	bne.n	800595e <prvProcessReceivedCommands+0x2e>
 800594a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	61fb      	str	r3, [r7, #28]
 800595c:	e7fe      	b.n	800595c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800595e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005964:	6850      	ldr	r0, [r2, #4]
 8005966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005968:	6892      	ldr	r2, [r2, #8]
 800596a:	4611      	mov	r1, r2
 800596c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	db7a      	blt.n	8005a6a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d004      	beq.n	800598a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	3304      	adds	r3, #4
 8005984:	4618      	mov	r0, r3
 8005986:	f7fe f9a9 	bl	8003cdc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800598a:	463b      	mov	r3, r7
 800598c:	4618      	mov	r0, r3
 800598e:	f7ff ff6d 	bl	800586c <prvSampleTimeNow>
 8005992:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b09      	cmp	r3, #9
 8005998:	d868      	bhi.n	8005a6c <prvProcessReceivedCommands+0x13c>
 800599a:	a201      	add	r2, pc, #4	; (adr r2, 80059a0 <prvProcessReceivedCommands+0x70>)
 800599c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a0:	080059c9 	.word	0x080059c9
 80059a4:	080059c9 	.word	0x080059c9
 80059a8:	080059c9 	.word	0x080059c9
 80059ac:	08005a6d 	.word	0x08005a6d
 80059b0:	08005a23 	.word	0x08005a23
 80059b4:	08005a59 	.word	0x08005a59
 80059b8:	080059c9 	.word	0x080059c9
 80059bc:	080059c9 	.word	0x080059c9
 80059c0:	08005a6d 	.word	0x08005a6d
 80059c4:	08005a23 	.word	0x08005a23
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	18d1      	adds	r1, r2, r3
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059d6:	f7ff ff69 	bl	80058ac <prvInsertTimerInActiveList>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d045      	beq.n	8005a6c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059e6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d13d      	bne.n	8005a6c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	441a      	add	r2, r3
 80059f8:	2300      	movs	r3, #0
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	2300      	movs	r3, #0
 80059fe:	2100      	movs	r1, #0
 8005a00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a02:	f7ff fe23 	bl	800564c <xTimerGenericCommand>
 8005a06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d12e      	bne.n	8005a6c <prvProcessReceivedCommands+0x13c>
 8005a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	61bb      	str	r3, [r7, #24]
 8005a20:	e7fe      	b.n	8005a20 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a26:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d109      	bne.n	8005a44 <prvProcessReceivedCommands+0x114>
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	617b      	str	r3, [r7, #20]
 8005a42:	e7fe      	b.n	8005a42 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a46:	699a      	ldr	r2, [r3, #24]
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	18d1      	adds	r1, r2, r3
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a52:	f7ff ff2b 	bl	80058ac <prvInsertTimerInActiveList>
					break;
 8005a56:	e009      	b.n	8005a6c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d104      	bne.n	8005a6c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8005a62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a64:	f000 fb58 	bl	8006118 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005a68:	e000      	b.n	8005a6c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005a6a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a6c:	4b07      	ldr	r3, [pc, #28]	; (8005a8c <prvProcessReceivedCommands+0x15c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	1d39      	adds	r1, r7, #4
 8005a72:	2200      	movs	r2, #0
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fe fc23 	bl	80042c0 <xQueueReceive>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f47f af5b 	bne.w	8005938 <prvProcessReceivedCommands+0x8>
	}
}
 8005a82:	bf00      	nop
 8005a84:	3730      	adds	r7, #48	; 0x30
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	20000cd4 	.word	0x20000cd4

08005a90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b088      	sub	sp, #32
 8005a94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a96:	e044      	b.n	8005b22 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a98:	4b2b      	ldr	r3, [pc, #172]	; (8005b48 <prvSwitchTimerLists+0xb8>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005aa2:	4b29      	ldr	r3, [pc, #164]	; (8005b48 <prvSwitchTimerLists+0xb8>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	3304      	adds	r3, #4
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7fe f913 	bl	8003cdc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d12d      	bne.n	8005b22 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	4413      	add	r3, r2
 8005ace:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d90e      	bls.n	8005af6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ae4:	4b18      	ldr	r3, [pc, #96]	; (8005b48 <prvSwitchTimerLists+0xb8>)
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	3304      	adds	r3, #4
 8005aec:	4619      	mov	r1, r3
 8005aee:	4610      	mov	r0, r2
 8005af0:	f7fe f8bc 	bl	8003c6c <vListInsert>
 8005af4:	e015      	b.n	8005b22 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005af6:	2300      	movs	r3, #0
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	2300      	movs	r3, #0
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	2100      	movs	r1, #0
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f7ff fda3 	bl	800564c <xTimerGenericCommand>
 8005b06:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d109      	bne.n	8005b22 <prvSwitchTimerLists+0x92>
 8005b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	603b      	str	r3, [r7, #0]
 8005b20:	e7fe      	b.n	8005b20 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b22:	4b09      	ldr	r3, [pc, #36]	; (8005b48 <prvSwitchTimerLists+0xb8>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1b5      	bne.n	8005a98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005b2c:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <prvSwitchTimerLists+0xb8>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005b32:	4b06      	ldr	r3, [pc, #24]	; (8005b4c <prvSwitchTimerLists+0xbc>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a04      	ldr	r2, [pc, #16]	; (8005b48 <prvSwitchTimerLists+0xb8>)
 8005b38:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005b3a:	4a04      	ldr	r2, [pc, #16]	; (8005b4c <prvSwitchTimerLists+0xbc>)
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	6013      	str	r3, [r2, #0]
}
 8005b40:	bf00      	nop
 8005b42:	3718      	adds	r7, #24
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	20000ccc 	.word	0x20000ccc
 8005b4c:	20000cd0 	.word	0x20000cd0

08005b50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005b56:	f000 f927 	bl	8005da8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005b5a:	4b15      	ldr	r3, [pc, #84]	; (8005bb0 <prvCheckForValidListAndQueue+0x60>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d120      	bne.n	8005ba4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005b62:	4814      	ldr	r0, [pc, #80]	; (8005bb4 <prvCheckForValidListAndQueue+0x64>)
 8005b64:	f7fe f834 	bl	8003bd0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005b68:	4813      	ldr	r0, [pc, #76]	; (8005bb8 <prvCheckForValidListAndQueue+0x68>)
 8005b6a:	f7fe f831 	bl	8003bd0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005b6e:	4b13      	ldr	r3, [pc, #76]	; (8005bbc <prvCheckForValidListAndQueue+0x6c>)
 8005b70:	4a10      	ldr	r2, [pc, #64]	; (8005bb4 <prvCheckForValidListAndQueue+0x64>)
 8005b72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005b74:	4b12      	ldr	r3, [pc, #72]	; (8005bc0 <prvCheckForValidListAndQueue+0x70>)
 8005b76:	4a10      	ldr	r2, [pc, #64]	; (8005bb8 <prvCheckForValidListAndQueue+0x68>)
 8005b78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	4b11      	ldr	r3, [pc, #68]	; (8005bc4 <prvCheckForValidListAndQueue+0x74>)
 8005b80:	4a11      	ldr	r2, [pc, #68]	; (8005bc8 <prvCheckForValidListAndQueue+0x78>)
 8005b82:	2110      	movs	r1, #16
 8005b84:	200a      	movs	r0, #10
 8005b86:	f7fe f93b 	bl	8003e00 <xQueueGenericCreateStatic>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	4b08      	ldr	r3, [pc, #32]	; (8005bb0 <prvCheckForValidListAndQueue+0x60>)
 8005b8e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005b90:	4b07      	ldr	r3, [pc, #28]	; (8005bb0 <prvCheckForValidListAndQueue+0x60>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d005      	beq.n	8005ba4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005b98:	4b05      	ldr	r3, [pc, #20]	; (8005bb0 <prvCheckForValidListAndQueue+0x60>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	490b      	ldr	r1, [pc, #44]	; (8005bcc <prvCheckForValidListAndQueue+0x7c>)
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fe fd7a 	bl	8004698 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ba4:	f000 f92e 	bl	8005e04 <vPortExitCritical>
}
 8005ba8:	bf00      	nop
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	20000cd4 	.word	0x20000cd4
 8005bb4:	20000ca4 	.word	0x20000ca4
 8005bb8:	20000cb8 	.word	0x20000cb8
 8005bbc:	20000ccc 	.word	0x20000ccc
 8005bc0:	20000cd0 	.word	0x20000cd0
 8005bc4:	20000d80 	.word	0x20000d80
 8005bc8:	20000ce0 	.word	0x20000ce0
 8005bcc:	08006720 	.word	0x08006720

08005bd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3b04      	subs	r3, #4
 8005be0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005be8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	3b04      	subs	r3, #4
 8005bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f023 0201 	bic.w	r2, r3, #1
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	3b04      	subs	r3, #4
 8005bfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c00:	4a08      	ldr	r2, [pc, #32]	; (8005c24 <pxPortInitialiseStack+0x54>)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	3b14      	subs	r3, #20
 8005c0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	3b20      	subs	r3, #32
 8005c16:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c18:	68fb      	ldr	r3, [r7, #12]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bc80      	pop	{r7}
 8005c22:	4770      	bx	lr
 8005c24:	08005c29 	.word	0x08005c29

08005c28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c32:	4b10      	ldr	r3, [pc, #64]	; (8005c74 <prvTaskExitError+0x4c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3a:	d009      	beq.n	8005c50 <prvTaskExitError+0x28>
 8005c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	e7fe      	b.n	8005c4e <prvTaskExitError+0x26>
 8005c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c54:	f383 8811 	msr	BASEPRI, r3
 8005c58:	f3bf 8f6f 	isb	sy
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c62:	bf00      	nop
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0fc      	beq.n	8005c64 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c6a:	bf00      	nop
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr
 8005c74:	20000060 	.word	0x20000060
	...

08005c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c80:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <pxCurrentTCBConst2>)
 8005c82:	6819      	ldr	r1, [r3, #0]
 8005c84:	6808      	ldr	r0, [r1, #0]
 8005c86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005c8a:	f380 8809 	msr	PSP, r0
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f04f 0000 	mov.w	r0, #0
 8005c96:	f380 8811 	msr	BASEPRI, r0
 8005c9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005c9e:	4770      	bx	lr

08005ca0 <pxCurrentTCBConst2>:
 8005ca0:	200007a4 	.word	0x200007a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ca4:	bf00      	nop
 8005ca6:	bf00      	nop

08005ca8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005ca8:	4806      	ldr	r0, [pc, #24]	; (8005cc4 <prvPortStartFirstTask+0x1c>)
 8005caa:	6800      	ldr	r0, [r0, #0]
 8005cac:	6800      	ldr	r0, [r0, #0]
 8005cae:	f380 8808 	msr	MSP, r0
 8005cb2:	b662      	cpsie	i
 8005cb4:	b661      	cpsie	f
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	df00      	svc	0
 8005cc0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005cc2:	bf00      	nop
 8005cc4:	e000ed08 	.word	0xe000ed08

08005cc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005cce:	4b31      	ldr	r3, [pc, #196]	; (8005d94 <xPortStartScheduler+0xcc>)
 8005cd0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	22ff      	movs	r2, #255	; 0xff
 8005cde:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ce8:	78fb      	ldrb	r3, [r7, #3]
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	4b29      	ldr	r3, [pc, #164]	; (8005d98 <xPortStartScheduler+0xd0>)
 8005cf4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005cf6:	4b29      	ldr	r3, [pc, #164]	; (8005d9c <xPortStartScheduler+0xd4>)
 8005cf8:	2207      	movs	r2, #7
 8005cfa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cfc:	e009      	b.n	8005d12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005cfe:	4b27      	ldr	r3, [pc, #156]	; (8005d9c <xPortStartScheduler+0xd4>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	3b01      	subs	r3, #1
 8005d04:	4a25      	ldr	r2, [pc, #148]	; (8005d9c <xPortStartScheduler+0xd4>)
 8005d06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d12:	78fb      	ldrb	r3, [r7, #3]
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d1a:	2b80      	cmp	r3, #128	; 0x80
 8005d1c:	d0ef      	beq.n	8005cfe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d1e:	4b1f      	ldr	r3, [pc, #124]	; (8005d9c <xPortStartScheduler+0xd4>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f1c3 0307 	rsb	r3, r3, #7
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d009      	beq.n	8005d3e <xPortStartScheduler+0x76>
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	60bb      	str	r3, [r7, #8]
 8005d3c:	e7fe      	b.n	8005d3c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d3e:	4b17      	ldr	r3, [pc, #92]	; (8005d9c <xPortStartScheduler+0xd4>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	021b      	lsls	r3, r3, #8
 8005d44:	4a15      	ldr	r2, [pc, #84]	; (8005d9c <xPortStartScheduler+0xd4>)
 8005d46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d48:	4b14      	ldr	r3, [pc, #80]	; (8005d9c <xPortStartScheduler+0xd4>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d50:	4a12      	ldr	r2, [pc, #72]	; (8005d9c <xPortStartScheduler+0xd4>)
 8005d52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d5c:	4b10      	ldr	r3, [pc, #64]	; (8005da0 <xPortStartScheduler+0xd8>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a0f      	ldr	r2, [pc, #60]	; (8005da0 <xPortStartScheduler+0xd8>)
 8005d62:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d68:	4b0d      	ldr	r3, [pc, #52]	; (8005da0 <xPortStartScheduler+0xd8>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a0c      	ldr	r2, [pc, #48]	; (8005da0 <xPortStartScheduler+0xd8>)
 8005d6e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d74:	f000 f8b0 	bl	8005ed8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d78:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <xPortStartScheduler+0xdc>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d7e:	f7ff ff93 	bl	8005ca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d82:	f7ff f887 	bl	8004e94 <vTaskSwitchContext>
	prvTaskExitError();
 8005d86:	f7ff ff4f 	bl	8005c28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	e000e400 	.word	0xe000e400
 8005d98:	20000dd0 	.word	0x20000dd0
 8005d9c:	20000dd4 	.word	0x20000dd4
 8005da0:	e000ed20 	.word	0xe000ed20
 8005da4:	20000060 	.word	0x20000060

08005da8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005dc0:	4b0e      	ldr	r3, [pc, #56]	; (8005dfc <vPortEnterCritical+0x54>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	4a0d      	ldr	r2, [pc, #52]	; (8005dfc <vPortEnterCritical+0x54>)
 8005dc8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005dca:	4b0c      	ldr	r3, [pc, #48]	; (8005dfc <vPortEnterCritical+0x54>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d10e      	bne.n	8005df0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005dd2:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <vPortEnterCritical+0x58>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d009      	beq.n	8005df0 <vPortEnterCritical+0x48>
 8005ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	603b      	str	r3, [r7, #0]
 8005dee:	e7fe      	b.n	8005dee <vPortEnterCritical+0x46>
	}
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bc80      	pop	{r7}
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	20000060 	.word	0x20000060
 8005e00:	e000ed04 	.word	0xe000ed04

08005e04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e0a:	4b10      	ldr	r3, [pc, #64]	; (8005e4c <vPortExitCritical+0x48>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d109      	bne.n	8005e26 <vPortExitCritical+0x22>
 8005e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	607b      	str	r3, [r7, #4]
 8005e24:	e7fe      	b.n	8005e24 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005e26:	4b09      	ldr	r3, [pc, #36]	; (8005e4c <vPortExitCritical+0x48>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	4a07      	ldr	r2, [pc, #28]	; (8005e4c <vPortExitCritical+0x48>)
 8005e2e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e30:	4b06      	ldr	r3, [pc, #24]	; (8005e4c <vPortExitCritical+0x48>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d104      	bne.n	8005e42 <vPortExitCritical+0x3e>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e42:	bf00      	nop
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bc80      	pop	{r7}
 8005e4a:	4770      	bx	lr
 8005e4c:	20000060 	.word	0x20000060

08005e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e50:	f3ef 8009 	mrs	r0, PSP
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	4b0d      	ldr	r3, [pc, #52]	; (8005e90 <pxCurrentTCBConst>)
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005e60:	6010      	str	r0, [r2, #0]
 8005e62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005e66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e6a:	f380 8811 	msr	BASEPRI, r0
 8005e6e:	f7ff f811 	bl	8004e94 <vTaskSwitchContext>
 8005e72:	f04f 0000 	mov.w	r0, #0
 8005e76:	f380 8811 	msr	BASEPRI, r0
 8005e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005e7e:	6819      	ldr	r1, [r3, #0]
 8005e80:	6808      	ldr	r0, [r1, #0]
 8005e82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005e86:	f380 8809 	msr	PSP, r0
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	4770      	bx	lr

08005e90 <pxCurrentTCBConst>:
 8005e90:	200007a4 	.word	0x200007a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop

08005e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005eb0:	f7fe ff32 	bl	8004d18 <xTaskIncrementTick>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005eba:	4b06      	ldr	r3, [pc, #24]	; (8005ed4 <SysTick_Handler+0x3c>)
 8005ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ecc:	bf00      	nop
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	e000ed04 	.word	0xe000ed04

08005ed8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005edc:	4b0a      	ldr	r3, [pc, #40]	; (8005f08 <vPortSetupTimerInterrupt+0x30>)
 8005ede:	2200      	movs	r2, #0
 8005ee0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ee2:	4b0a      	ldr	r3, [pc, #40]	; (8005f0c <vPortSetupTimerInterrupt+0x34>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ee8:	4b09      	ldr	r3, [pc, #36]	; (8005f10 <vPortSetupTimerInterrupt+0x38>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a09      	ldr	r2, [pc, #36]	; (8005f14 <vPortSetupTimerInterrupt+0x3c>)
 8005eee:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef2:	099b      	lsrs	r3, r3, #6
 8005ef4:	4a08      	ldr	r2, [pc, #32]	; (8005f18 <vPortSetupTimerInterrupt+0x40>)
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005efa:	4b03      	ldr	r3, [pc, #12]	; (8005f08 <vPortSetupTimerInterrupt+0x30>)
 8005efc:	2207      	movs	r2, #7
 8005efe:	601a      	str	r2, [r3, #0]
}
 8005f00:	bf00      	nop
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bc80      	pop	{r7}
 8005f06:	4770      	bx	lr
 8005f08:	e000e010 	.word	0xe000e010
 8005f0c:	e000e018 	.word	0xe000e018
 8005f10:	20000054 	.word	0x20000054
 8005f14:	10624dd3 	.word	0x10624dd3
 8005f18:	e000e014 	.word	0xe000e014

08005f1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f22:	f3ef 8305 	mrs	r3, IPSR
 8005f26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2b0f      	cmp	r3, #15
 8005f2c:	d913      	bls.n	8005f56 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f2e:	4a15      	ldr	r2, [pc, #84]	; (8005f84 <vPortValidateInterruptPriority+0x68>)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4413      	add	r3, r2
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f38:	4b13      	ldr	r3, [pc, #76]	; (8005f88 <vPortValidateInterruptPriority+0x6c>)
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	7afa      	ldrb	r2, [r7, #11]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d209      	bcs.n	8005f56 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	607b      	str	r3, [r7, #4]
 8005f54:	e7fe      	b.n	8005f54 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f56:	4b0d      	ldr	r3, [pc, #52]	; (8005f8c <vPortValidateInterruptPriority+0x70>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f5e:	4b0c      	ldr	r3, [pc, #48]	; (8005f90 <vPortValidateInterruptPriority+0x74>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d909      	bls.n	8005f7a <vPortValidateInterruptPriority+0x5e>
 8005f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6a:	f383 8811 	msr	BASEPRI, r3
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	e7fe      	b.n	8005f78 <vPortValidateInterruptPriority+0x5c>
	}
 8005f7a:	bf00      	nop
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bc80      	pop	{r7}
 8005f82:	4770      	bx	lr
 8005f84:	e000e3f0 	.word	0xe000e3f0
 8005f88:	20000dd0 	.word	0x20000dd0
 8005f8c:	e000ed0c 	.word	0xe000ed0c
 8005f90:	20000dd4 	.word	0x20000dd4

08005f94 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b08a      	sub	sp, #40	; 0x28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005fa0:	f7fe fe02 	bl	8004ba8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fa4:	4b57      	ldr	r3, [pc, #348]	; (8006104 <pvPortMalloc+0x170>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fac:	f000 f90c 	bl	80061c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fb0:	4b55      	ldr	r3, [pc, #340]	; (8006108 <pvPortMalloc+0x174>)
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f040 808c 	bne.w	80060d6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d01c      	beq.n	8005ffe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005fc4:	2208      	movs	r2, #8
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4413      	add	r3, r2
 8005fca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f003 0307 	and.w	r3, r3, #7
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d013      	beq.n	8005ffe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f023 0307 	bic.w	r3, r3, #7
 8005fdc:	3308      	adds	r3, #8
 8005fde:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f003 0307 	and.w	r3, r3, #7
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d009      	beq.n	8005ffe <pvPortMalloc+0x6a>
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	e7fe      	b.n	8005ffc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d068      	beq.n	80060d6 <pvPortMalloc+0x142>
 8006004:	4b41      	ldr	r3, [pc, #260]	; (800610c <pvPortMalloc+0x178>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	429a      	cmp	r2, r3
 800600c:	d863      	bhi.n	80060d6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800600e:	4b40      	ldr	r3, [pc, #256]	; (8006110 <pvPortMalloc+0x17c>)
 8006010:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006012:	4b3f      	ldr	r3, [pc, #252]	; (8006110 <pvPortMalloc+0x17c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006018:	e004      	b.n	8006024 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	429a      	cmp	r2, r3
 800602c:	d903      	bls.n	8006036 <pvPortMalloc+0xa2>
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1f1      	bne.n	800601a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006036:	4b33      	ldr	r3, [pc, #204]	; (8006104 <pvPortMalloc+0x170>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800603c:	429a      	cmp	r2, r3
 800603e:	d04a      	beq.n	80060d6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2208      	movs	r2, #8
 8006046:	4413      	add	r3, r2
 8006048:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	1ad2      	subs	r2, r2, r3
 800605a:	2308      	movs	r3, #8
 800605c:	005b      	lsls	r3, r3, #1
 800605e:	429a      	cmp	r2, r3
 8006060:	d91e      	bls.n	80060a0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4413      	add	r3, r2
 8006068:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	2b00      	cmp	r3, #0
 8006072:	d009      	beq.n	8006088 <pvPortMalloc+0xf4>
 8006074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006078:	f383 8811 	msr	BASEPRI, r3
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	613b      	str	r3, [r7, #16]
 8006086:	e7fe      	b.n	8006086 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	1ad2      	subs	r2, r2, r3
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800609a:	69b8      	ldr	r0, [r7, #24]
 800609c:	f000 f8f6 	bl	800628c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060a0:	4b1a      	ldr	r3, [pc, #104]	; (800610c <pvPortMalloc+0x178>)
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	4a18      	ldr	r2, [pc, #96]	; (800610c <pvPortMalloc+0x178>)
 80060ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060ae:	4b17      	ldr	r3, [pc, #92]	; (800610c <pvPortMalloc+0x178>)
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	4b18      	ldr	r3, [pc, #96]	; (8006114 <pvPortMalloc+0x180>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d203      	bcs.n	80060c2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060ba:	4b14      	ldr	r3, [pc, #80]	; (800610c <pvPortMalloc+0x178>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a15      	ldr	r2, [pc, #84]	; (8006114 <pvPortMalloc+0x180>)
 80060c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	4b10      	ldr	r3, [pc, #64]	; (8006108 <pvPortMalloc+0x174>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	431a      	orrs	r2, r3
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060d6:	f7fe fd75 	bl	8004bc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	f003 0307 	and.w	r3, r3, #7
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d009      	beq.n	80060f8 <pvPortMalloc+0x164>
 80060e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e8:	f383 8811 	msr	BASEPRI, r3
 80060ec:	f3bf 8f6f 	isb	sy
 80060f0:	f3bf 8f4f 	dsb	sy
 80060f4:	60fb      	str	r3, [r7, #12]
 80060f6:	e7fe      	b.n	80060f6 <pvPortMalloc+0x162>
	return pvReturn;
 80060f8:	69fb      	ldr	r3, [r7, #28]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3728      	adds	r7, #40	; 0x28
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	200019e0 	.word	0x200019e0
 8006108:	200019ec 	.word	0x200019ec
 800610c:	200019e4 	.word	0x200019e4
 8006110:	200019d8 	.word	0x200019d8
 8006114:	200019e8 	.word	0x200019e8

08006118 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d046      	beq.n	80061b8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800612a:	2308      	movs	r3, #8
 800612c:	425b      	negs	r3, r3
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	4413      	add	r3, r2
 8006132:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	4b20      	ldr	r3, [pc, #128]	; (80061c0 <vPortFree+0xa8>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4013      	ands	r3, r2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d109      	bne.n	800615a <vPortFree+0x42>
 8006146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614a:	f383 8811 	msr	BASEPRI, r3
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	60fb      	str	r3, [r7, #12]
 8006158:	e7fe      	b.n	8006158 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d009      	beq.n	8006176 <vPortFree+0x5e>
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	60bb      	str	r3, [r7, #8]
 8006174:	e7fe      	b.n	8006174 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	4b11      	ldr	r3, [pc, #68]	; (80061c0 <vPortFree+0xa8>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4013      	ands	r3, r2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d019      	beq.n	80061b8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d115      	bne.n	80061b8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	4b0b      	ldr	r3, [pc, #44]	; (80061c0 <vPortFree+0xa8>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	43db      	mvns	r3, r3
 8006196:	401a      	ands	r2, r3
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800619c:	f7fe fd04 	bl	8004ba8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	4b07      	ldr	r3, [pc, #28]	; (80061c4 <vPortFree+0xac>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4413      	add	r3, r2
 80061aa:	4a06      	ldr	r2, [pc, #24]	; (80061c4 <vPortFree+0xac>)
 80061ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061ae:	6938      	ldr	r0, [r7, #16]
 80061b0:	f000 f86c 	bl	800628c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80061b4:	f7fe fd06 	bl	8004bc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061b8:	bf00      	nop
 80061ba:	3718      	adds	r7, #24
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	200019ec 	.word	0x200019ec
 80061c4:	200019e4 	.word	0x200019e4

080061c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80061d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061d4:	4b27      	ldr	r3, [pc, #156]	; (8006274 <prvHeapInit+0xac>)
 80061d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f003 0307 	and.w	r3, r3, #7
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00c      	beq.n	80061fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	3307      	adds	r3, #7
 80061e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0307 	bic.w	r3, r3, #7
 80061ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	4a1f      	ldr	r2, [pc, #124]	; (8006274 <prvHeapInit+0xac>)
 80061f8:	4413      	add	r3, r2
 80061fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006200:	4a1d      	ldr	r2, [pc, #116]	; (8006278 <prvHeapInit+0xb0>)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006206:	4b1c      	ldr	r3, [pc, #112]	; (8006278 <prvHeapInit+0xb0>)
 8006208:	2200      	movs	r2, #0
 800620a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	4413      	add	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006214:	2208      	movs	r2, #8
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	1a9b      	subs	r3, r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f023 0307 	bic.w	r3, r3, #7
 8006222:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4a15      	ldr	r2, [pc, #84]	; (800627c <prvHeapInit+0xb4>)
 8006228:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800622a:	4b14      	ldr	r3, [pc, #80]	; (800627c <prvHeapInit+0xb4>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2200      	movs	r2, #0
 8006230:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006232:	4b12      	ldr	r3, [pc, #72]	; (800627c <prvHeapInit+0xb4>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2200      	movs	r2, #0
 8006238:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	1ad2      	subs	r2, r2, r3
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006248:	4b0c      	ldr	r3, [pc, #48]	; (800627c <prvHeapInit+0xb4>)
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	4a0a      	ldr	r2, [pc, #40]	; (8006280 <prvHeapInit+0xb8>)
 8006256:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	4a09      	ldr	r2, [pc, #36]	; (8006284 <prvHeapInit+0xbc>)
 800625e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006260:	4b09      	ldr	r3, [pc, #36]	; (8006288 <prvHeapInit+0xc0>)
 8006262:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006266:	601a      	str	r2, [r3, #0]
}
 8006268:	bf00      	nop
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	bc80      	pop	{r7}
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	20000dd8 	.word	0x20000dd8
 8006278:	200019d8 	.word	0x200019d8
 800627c:	200019e0 	.word	0x200019e0
 8006280:	200019e8 	.word	0x200019e8
 8006284:	200019e4 	.word	0x200019e4
 8006288:	200019ec 	.word	0x200019ec

0800628c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006294:	4b27      	ldr	r3, [pc, #156]	; (8006334 <prvInsertBlockIntoFreeList+0xa8>)
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	e002      	b.n	80062a0 <prvInsertBlockIntoFreeList+0x14>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d8f7      	bhi.n	800629a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	4413      	add	r3, r2
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d108      	bne.n	80062ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	441a      	add	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	441a      	add	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d118      	bne.n	8006314 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	4b14      	ldr	r3, [pc, #80]	; (8006338 <prvInsertBlockIntoFreeList+0xac>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d00d      	beq.n	800630a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	441a      	add	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	e008      	b.n	800631c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800630a:	4b0b      	ldr	r3, [pc, #44]	; (8006338 <prvInsertBlockIntoFreeList+0xac>)
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	e003      	b.n	800631c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	429a      	cmp	r2, r3
 8006322:	d002      	beq.n	800632a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800632a:	bf00      	nop
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	bc80      	pop	{r7}
 8006332:	4770      	bx	lr
 8006334:	200019d8 	.word	0x200019d8
 8006338:	200019e0 	.word	0x200019e0

0800633c <__errno>:
 800633c:	4b01      	ldr	r3, [pc, #4]	; (8006344 <__errno+0x8>)
 800633e:	6818      	ldr	r0, [r3, #0]
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	20000064 	.word	0x20000064

08006348 <__libc_init_array>:
 8006348:	b570      	push	{r4, r5, r6, lr}
 800634a:	2500      	movs	r5, #0
 800634c:	4e0c      	ldr	r6, [pc, #48]	; (8006380 <__libc_init_array+0x38>)
 800634e:	4c0d      	ldr	r4, [pc, #52]	; (8006384 <__libc_init_array+0x3c>)
 8006350:	1ba4      	subs	r4, r4, r6
 8006352:	10a4      	asrs	r4, r4, #2
 8006354:	42a5      	cmp	r5, r4
 8006356:	d109      	bne.n	800636c <__libc_init_array+0x24>
 8006358:	f000 f8f6 	bl	8006548 <_init>
 800635c:	2500      	movs	r5, #0
 800635e:	4e0a      	ldr	r6, [pc, #40]	; (8006388 <__libc_init_array+0x40>)
 8006360:	4c0a      	ldr	r4, [pc, #40]	; (800638c <__libc_init_array+0x44>)
 8006362:	1ba4      	subs	r4, r4, r6
 8006364:	10a4      	asrs	r4, r4, #2
 8006366:	42a5      	cmp	r5, r4
 8006368:	d105      	bne.n	8006376 <__libc_init_array+0x2e>
 800636a:	bd70      	pop	{r4, r5, r6, pc}
 800636c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006370:	4798      	blx	r3
 8006372:	3501      	adds	r5, #1
 8006374:	e7ee      	b.n	8006354 <__libc_init_array+0xc>
 8006376:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800637a:	4798      	blx	r3
 800637c:	3501      	adds	r5, #1
 800637e:	e7f2      	b.n	8006366 <__libc_init_array+0x1e>
 8006380:	08006808 	.word	0x08006808
 8006384:	08006808 	.word	0x08006808
 8006388:	08006808 	.word	0x08006808
 800638c:	0800680c 	.word	0x0800680c

08006390 <malloc>:
 8006390:	4b02      	ldr	r3, [pc, #8]	; (800639c <malloc+0xc>)
 8006392:	4601      	mov	r1, r0
 8006394:	6818      	ldr	r0, [r3, #0]
 8006396:	f000 b86b 	b.w	8006470 <_malloc_r>
 800639a:	bf00      	nop
 800639c:	20000064 	.word	0x20000064

080063a0 <free>:
 80063a0:	4b02      	ldr	r3, [pc, #8]	; (80063ac <free+0xc>)
 80063a2:	4601      	mov	r1, r0
 80063a4:	6818      	ldr	r0, [r3, #0]
 80063a6:	f000 b817 	b.w	80063d8 <_free_r>
 80063aa:	bf00      	nop
 80063ac:	20000064 	.word	0x20000064

080063b0 <memcpy>:
 80063b0:	b510      	push	{r4, lr}
 80063b2:	1e43      	subs	r3, r0, #1
 80063b4:	440a      	add	r2, r1
 80063b6:	4291      	cmp	r1, r2
 80063b8:	d100      	bne.n	80063bc <memcpy+0xc>
 80063ba:	bd10      	pop	{r4, pc}
 80063bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063c4:	e7f7      	b.n	80063b6 <memcpy+0x6>

080063c6 <memset>:
 80063c6:	4603      	mov	r3, r0
 80063c8:	4402      	add	r2, r0
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d100      	bne.n	80063d0 <memset+0xa>
 80063ce:	4770      	bx	lr
 80063d0:	f803 1b01 	strb.w	r1, [r3], #1
 80063d4:	e7f9      	b.n	80063ca <memset+0x4>
	...

080063d8 <_free_r>:
 80063d8:	b538      	push	{r3, r4, r5, lr}
 80063da:	4605      	mov	r5, r0
 80063dc:	2900      	cmp	r1, #0
 80063de:	d043      	beq.n	8006468 <_free_r+0x90>
 80063e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063e4:	1f0c      	subs	r4, r1, #4
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	bfb8      	it	lt
 80063ea:	18e4      	addlt	r4, r4, r3
 80063ec:	f000 f8aa 	bl	8006544 <__malloc_lock>
 80063f0:	4a1e      	ldr	r2, [pc, #120]	; (800646c <_free_r+0x94>)
 80063f2:	6813      	ldr	r3, [r2, #0]
 80063f4:	4610      	mov	r0, r2
 80063f6:	b933      	cbnz	r3, 8006406 <_free_r+0x2e>
 80063f8:	6063      	str	r3, [r4, #4]
 80063fa:	6014      	str	r4, [r2, #0]
 80063fc:	4628      	mov	r0, r5
 80063fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006402:	f000 b8a0 	b.w	8006546 <__malloc_unlock>
 8006406:	42a3      	cmp	r3, r4
 8006408:	d90b      	bls.n	8006422 <_free_r+0x4a>
 800640a:	6821      	ldr	r1, [r4, #0]
 800640c:	1862      	adds	r2, r4, r1
 800640e:	4293      	cmp	r3, r2
 8006410:	bf01      	itttt	eq
 8006412:	681a      	ldreq	r2, [r3, #0]
 8006414:	685b      	ldreq	r3, [r3, #4]
 8006416:	1852      	addeq	r2, r2, r1
 8006418:	6022      	streq	r2, [r4, #0]
 800641a:	6063      	str	r3, [r4, #4]
 800641c:	6004      	str	r4, [r0, #0]
 800641e:	e7ed      	b.n	80063fc <_free_r+0x24>
 8006420:	4613      	mov	r3, r2
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	b10a      	cbz	r2, 800642a <_free_r+0x52>
 8006426:	42a2      	cmp	r2, r4
 8006428:	d9fa      	bls.n	8006420 <_free_r+0x48>
 800642a:	6819      	ldr	r1, [r3, #0]
 800642c:	1858      	adds	r0, r3, r1
 800642e:	42a0      	cmp	r0, r4
 8006430:	d10b      	bne.n	800644a <_free_r+0x72>
 8006432:	6820      	ldr	r0, [r4, #0]
 8006434:	4401      	add	r1, r0
 8006436:	1858      	adds	r0, r3, r1
 8006438:	4282      	cmp	r2, r0
 800643a:	6019      	str	r1, [r3, #0]
 800643c:	d1de      	bne.n	80063fc <_free_r+0x24>
 800643e:	6810      	ldr	r0, [r2, #0]
 8006440:	6852      	ldr	r2, [r2, #4]
 8006442:	4401      	add	r1, r0
 8006444:	6019      	str	r1, [r3, #0]
 8006446:	605a      	str	r2, [r3, #4]
 8006448:	e7d8      	b.n	80063fc <_free_r+0x24>
 800644a:	d902      	bls.n	8006452 <_free_r+0x7a>
 800644c:	230c      	movs	r3, #12
 800644e:	602b      	str	r3, [r5, #0]
 8006450:	e7d4      	b.n	80063fc <_free_r+0x24>
 8006452:	6820      	ldr	r0, [r4, #0]
 8006454:	1821      	adds	r1, r4, r0
 8006456:	428a      	cmp	r2, r1
 8006458:	bf01      	itttt	eq
 800645a:	6811      	ldreq	r1, [r2, #0]
 800645c:	6852      	ldreq	r2, [r2, #4]
 800645e:	1809      	addeq	r1, r1, r0
 8006460:	6021      	streq	r1, [r4, #0]
 8006462:	6062      	str	r2, [r4, #4]
 8006464:	605c      	str	r4, [r3, #4]
 8006466:	e7c9      	b.n	80063fc <_free_r+0x24>
 8006468:	bd38      	pop	{r3, r4, r5, pc}
 800646a:	bf00      	nop
 800646c:	200019f0 	.word	0x200019f0

08006470 <_malloc_r>:
 8006470:	b570      	push	{r4, r5, r6, lr}
 8006472:	1ccd      	adds	r5, r1, #3
 8006474:	f025 0503 	bic.w	r5, r5, #3
 8006478:	3508      	adds	r5, #8
 800647a:	2d0c      	cmp	r5, #12
 800647c:	bf38      	it	cc
 800647e:	250c      	movcc	r5, #12
 8006480:	2d00      	cmp	r5, #0
 8006482:	4606      	mov	r6, r0
 8006484:	db01      	blt.n	800648a <_malloc_r+0x1a>
 8006486:	42a9      	cmp	r1, r5
 8006488:	d903      	bls.n	8006492 <_malloc_r+0x22>
 800648a:	230c      	movs	r3, #12
 800648c:	6033      	str	r3, [r6, #0]
 800648e:	2000      	movs	r0, #0
 8006490:	bd70      	pop	{r4, r5, r6, pc}
 8006492:	f000 f857 	bl	8006544 <__malloc_lock>
 8006496:	4a21      	ldr	r2, [pc, #132]	; (800651c <_malloc_r+0xac>)
 8006498:	6814      	ldr	r4, [r2, #0]
 800649a:	4621      	mov	r1, r4
 800649c:	b991      	cbnz	r1, 80064c4 <_malloc_r+0x54>
 800649e:	4c20      	ldr	r4, [pc, #128]	; (8006520 <_malloc_r+0xb0>)
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	b91b      	cbnz	r3, 80064ac <_malloc_r+0x3c>
 80064a4:	4630      	mov	r0, r6
 80064a6:	f000 f83d 	bl	8006524 <_sbrk_r>
 80064aa:	6020      	str	r0, [r4, #0]
 80064ac:	4629      	mov	r1, r5
 80064ae:	4630      	mov	r0, r6
 80064b0:	f000 f838 	bl	8006524 <_sbrk_r>
 80064b4:	1c43      	adds	r3, r0, #1
 80064b6:	d124      	bne.n	8006502 <_malloc_r+0x92>
 80064b8:	230c      	movs	r3, #12
 80064ba:	4630      	mov	r0, r6
 80064bc:	6033      	str	r3, [r6, #0]
 80064be:	f000 f842 	bl	8006546 <__malloc_unlock>
 80064c2:	e7e4      	b.n	800648e <_malloc_r+0x1e>
 80064c4:	680b      	ldr	r3, [r1, #0]
 80064c6:	1b5b      	subs	r3, r3, r5
 80064c8:	d418      	bmi.n	80064fc <_malloc_r+0x8c>
 80064ca:	2b0b      	cmp	r3, #11
 80064cc:	d90f      	bls.n	80064ee <_malloc_r+0x7e>
 80064ce:	600b      	str	r3, [r1, #0]
 80064d0:	18cc      	adds	r4, r1, r3
 80064d2:	50cd      	str	r5, [r1, r3]
 80064d4:	4630      	mov	r0, r6
 80064d6:	f000 f836 	bl	8006546 <__malloc_unlock>
 80064da:	f104 000b 	add.w	r0, r4, #11
 80064de:	1d23      	adds	r3, r4, #4
 80064e0:	f020 0007 	bic.w	r0, r0, #7
 80064e4:	1ac3      	subs	r3, r0, r3
 80064e6:	d0d3      	beq.n	8006490 <_malloc_r+0x20>
 80064e8:	425a      	negs	r2, r3
 80064ea:	50e2      	str	r2, [r4, r3]
 80064ec:	e7d0      	b.n	8006490 <_malloc_r+0x20>
 80064ee:	684b      	ldr	r3, [r1, #4]
 80064f0:	428c      	cmp	r4, r1
 80064f2:	bf16      	itet	ne
 80064f4:	6063      	strne	r3, [r4, #4]
 80064f6:	6013      	streq	r3, [r2, #0]
 80064f8:	460c      	movne	r4, r1
 80064fa:	e7eb      	b.n	80064d4 <_malloc_r+0x64>
 80064fc:	460c      	mov	r4, r1
 80064fe:	6849      	ldr	r1, [r1, #4]
 8006500:	e7cc      	b.n	800649c <_malloc_r+0x2c>
 8006502:	1cc4      	adds	r4, r0, #3
 8006504:	f024 0403 	bic.w	r4, r4, #3
 8006508:	42a0      	cmp	r0, r4
 800650a:	d005      	beq.n	8006518 <_malloc_r+0xa8>
 800650c:	1a21      	subs	r1, r4, r0
 800650e:	4630      	mov	r0, r6
 8006510:	f000 f808 	bl	8006524 <_sbrk_r>
 8006514:	3001      	adds	r0, #1
 8006516:	d0cf      	beq.n	80064b8 <_malloc_r+0x48>
 8006518:	6025      	str	r5, [r4, #0]
 800651a:	e7db      	b.n	80064d4 <_malloc_r+0x64>
 800651c:	200019f0 	.word	0x200019f0
 8006520:	200019f4 	.word	0x200019f4

08006524 <_sbrk_r>:
 8006524:	b538      	push	{r3, r4, r5, lr}
 8006526:	2300      	movs	r3, #0
 8006528:	4c05      	ldr	r4, [pc, #20]	; (8006540 <_sbrk_r+0x1c>)
 800652a:	4605      	mov	r5, r0
 800652c:	4608      	mov	r0, r1
 800652e:	6023      	str	r3, [r4, #0]
 8006530:	f7fa fb84 	bl	8000c3c <_sbrk>
 8006534:	1c43      	adds	r3, r0, #1
 8006536:	d102      	bne.n	800653e <_sbrk_r+0x1a>
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	b103      	cbz	r3, 800653e <_sbrk_r+0x1a>
 800653c:	602b      	str	r3, [r5, #0]
 800653e:	bd38      	pop	{r3, r4, r5, pc}
 8006540:	20001c44 	.word	0x20001c44

08006544 <__malloc_lock>:
 8006544:	4770      	bx	lr

08006546 <__malloc_unlock>:
 8006546:	4770      	bx	lr

08006548 <_init>:
 8006548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654a:	bf00      	nop
 800654c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800654e:	bc08      	pop	{r3}
 8006550:	469e      	mov	lr, r3
 8006552:	4770      	bx	lr

08006554 <_fini>:
 8006554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006556:	bf00      	nop
 8006558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800655a:	bc08      	pop	{r3}
 800655c:	469e      	mov	lr, r3
 800655e:	4770      	bx	lr
