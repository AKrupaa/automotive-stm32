
Automotive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005df0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08005f30  08005f30  00015f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006124  08006124  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006124  08006124  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006124  08006124  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006124  08006124  00016124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006128  08006128  00016128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800612c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006fc  20000010  0800613c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000070c  0800613c  0002070c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000200e8  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004113  00000000  00000000  00040121  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001580  00000000  00000000  00044238  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013a8  00000000  00000000  000457b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cc13  00000000  00000000  00046b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017b63  00000000  00000000  00063773  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a7d85  00000000  00000000  0007b2d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012305b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000572c  00000000  00000000  001230d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	08005f18 	.word	0x08005f18

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	08005f18 	.word	0x08005f18

08000180 <h_bridge_init>:
//#define RIGHT_PWM_HANDLER htim3
//#define RIGHT_PWM_CHANNEL
//#define SERVO_PWM_HANDLER htim2
//#define LEFT_PWM_HANDLER htim9
//htim3 RIGHT ENGINE
bool h_bridge_init(void) {
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
	;

//	htim2->Instance->CCR1
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000184:	2108      	movs	r1, #8
 8000186:	4803      	ldr	r0, [pc, #12]	; (8000194 <h_bridge_init+0x14>)
 8000188:	f003 fbbc 	bl	8003904 <HAL_TIM_PWM_Start>
//	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

//	htim9.Instance->CCR2 = 0;
//	htim3.Instance->CCR3 = 0;
	return true;
 800018c:	2301      	movs	r3, #1
}
 800018e:	4618      	mov	r0, r3
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	20000614 	.word	0x20000614

08000198 <ble_receive_data>:
	}
	ble_turn_off_transmittion;
	return true;
}

bool ble_receive_data(char *pData) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
	ble_turn_on_transmittion;
 80001a0:	2200      	movs	r2, #0
 80001a2:	2110      	movs	r1, #16
 80001a4:	480e      	ldr	r0, [pc, #56]	; (80001e0 <ble_receive_data+0x48>)
 80001a6:	f002 f891 	bl	80022cc <HAL_GPIO_WritePin>
	if (HAL_UART_Receive(&huart3, (uint8_t*) pData, MAX_SIZE, 100)
 80001aa:	2364      	movs	r3, #100	; 0x64
 80001ac:	2220      	movs	r2, #32
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	480c      	ldr	r0, [pc, #48]	; (80001e4 <ble_receive_data+0x4c>)
 80001b2:	f004 fd7d 	bl	8004cb0 <HAL_UART_Receive>
 80001b6:	4603      	mov	r3, r0
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d006      	beq.n	80001ca <ble_receive_data+0x32>
			!= HAL_OK) {
		ble_turn_off_transmittion;
 80001bc:	2201      	movs	r2, #1
 80001be:	2110      	movs	r1, #16
 80001c0:	4807      	ldr	r0, [pc, #28]	; (80001e0 <ble_receive_data+0x48>)
 80001c2:	f002 f883 	bl	80022cc <HAL_GPIO_WritePin>
		return false;
 80001c6:	2300      	movs	r3, #0
 80001c8:	e005      	b.n	80001d6 <ble_receive_data+0x3e>
	}
	ble_turn_off_transmittion;
 80001ca:	2201      	movs	r2, #1
 80001cc:	2110      	movs	r1, #16
 80001ce:	4804      	ldr	r0, [pc, #16]	; (80001e0 <ble_receive_data+0x48>)
 80001d0:	f002 f87c 	bl	80022cc <HAL_GPIO_WritePin>
	return true;
 80001d4:	2301      	movs	r3, #1
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	3708      	adds	r7, #8
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	40020800 	.word	0x40020800
 80001e4:	200006c8 	.word	0x200006c8

080001e8 <device_init>:

#include "device_init.h"
#include "stdint.h"


void device_init(void) {
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0

	uint16_t successCnt = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	80fb      	strh	r3, [r7, #6]
	uint16_t modsToInit = 0;
 80001f2:	2300      	movs	r3, #0
 80001f4:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < /*mod_N*/mod_0; i++) {
 80001f6:	2300      	movs	r3, #0
 80001f8:	807b      	strh	r3, [r7, #2]
 80001fa:	bf00      	nop
		}

		modsToInit++;
	}

	if (modsToInit != successCnt) {
 80001fc:	88ba      	ldrh	r2, [r7, #4]
 80001fe:	88fb      	ldrh	r3, [r7, #6]
 8000200:	429a      	cmp	r2, r3
 8000202:	d000      	beq.n	8000206 <device_init+0x1e>
		// some kind of error
		while (1)
 8000204:	e7fe      	b.n	8000204 <device_init+0x1c>
			; //TODO: call some error handler
	}

}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr

08000210 <rt_evbit_set_from_ISR>:
	EventBits_t msk = (1u << bit);
	EventGroupHandle_t Evh = rt_evgroups[Ev];
	xEventGroupSetBits(Evh, msk);
}

void rt_evbit_set_from_ISR(rt_evgroup_t Ev, uint32_t bit) {
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 800021c:	2201      	movs	r2, #1
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	fa02 f303 	lsl.w	r3, r2, r3
 8000224:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	4a06      	ldr	r2, [pc, #24]	; (8000244 <rt_evbit_set_from_ISR+0x34>)
 800022a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800022e:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBitsFromISR(Evh, msk, pdFALSE);
 8000230:	2200      	movs	r2, #0
 8000232:	68f9      	ldr	r1, [r7, #12]
 8000234:	68b8      	ldr	r0, [r7, #8]
 8000236:	f005 f889 	bl	800534c <xEventGroupSetBitsFromISR>
	portYIELD_FROM_ISR(pdFALSE);
}
 800023a:	bf00      	nop
 800023c:	3710      	adds	r7, #16
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	2000051c 	.word	0x2000051c

08000248 <rt_enqueue_ISR>:
	}

	return false;
}

bool rt_enqueue_ISR(rt_queue_t Q, void const *bf) {
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	6039      	str	r1, [r7, #0]
 8000252:	71fb      	strb	r3, [r7, #7]
//  assert(Q < rt_queue_N);

	QueueHandle_t Qh = rt_queues[Q];
 8000254:	79fb      	ldrb	r3, [r7, #7]
 8000256:	4a0b      	ldr	r2, [pc, #44]	; (8000284 <rt_enqueue_ISR+0x3c>)
 8000258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800025c:	60fb      	str	r3, [r7, #12]
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 800025e:	2300      	movs	r3, #0
 8000260:	60bb      	str	r3, [r7, #8]
	if (xQueueSendToBackFromISR(Qh, bf, &xHigherPriorityTaskWoken) == pdPASS) {
 8000262:	f107 0208 	add.w	r2, r7, #8
 8000266:	2300      	movs	r3, #0
 8000268:	6839      	ldr	r1, [r7, #0]
 800026a:	68f8      	ldr	r0, [r7, #12]
 800026c:	f005 f8ce 	bl	800540c <xQueueGenericSendFromISR>
 8000270:	4603      	mov	r3, r0
 8000272:	2b01      	cmp	r3, #1
 8000274:	d101      	bne.n	800027a <rt_enqueue_ISR+0x32>
		return true;
 8000276:	2301      	movs	r3, #1
 8000278:	e000      	b.n	800027c <rt_enqueue_ISR+0x34>
	}

	return false;
 800027a:	2300      	movs	r3, #0
}
 800027c:	4618      	mov	r0, r3
 800027e:	3710      	adds	r7, #16
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000528 	.word	0x20000528

08000288 <HAL_GPIO_EXTI_Callback>:
bool ultrasound_was = false;
bool ultrasound_done = false;
extern char ble_pData[MAX_SIZE];

// interrupt pin callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000288:	b580      	push	{r7, lr}
 800028a:	b08c      	sub	sp, #48	; 0x30
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	80fb      	strh	r3, [r7, #6]
//	IRQ_ULTRASOUND_ECHO_Pin
	if (GPIO_Pin & IRQ_ULTRASOUND_ECHO_Pin) {
 8000292:	88fb      	ldrh	r3, [r7, #6]
 8000294:	f003 0302 	and.w	r3, r3, #2
 8000298:	2b00      	cmp	r3, #0
 800029a:	d01e      	beq.n	80002da <HAL_GPIO_EXTI_Callback+0x52>

		if (ultrasound_was == false) {
 800029c:	4b20      	ldr	r3, [pc, #128]	; (8000320 <HAL_GPIO_EXTI_Callback+0x98>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	f083 0301 	eor.w	r3, r3, #1
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d008      	beq.n	80002bc <HAL_GPIO_EXTI_Callback+0x34>
			ultrasound_time = HAL_GetTick();
 80002aa:	f000 ff25 	bl	80010f8 <HAL_GetTick>
 80002ae:	4602      	mov	r2, r0
 80002b0:	4b1c      	ldr	r3, [pc, #112]	; (8000324 <HAL_GPIO_EXTI_Callback+0x9c>)
 80002b2:	601a      	str	r2, [r3, #0]
			ultrasound_was = true;
 80002b4:	4b1a      	ldr	r3, [pc, #104]	; (8000320 <HAL_GPIO_EXTI_Callback+0x98>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	701a      	strb	r2, [r3, #0]
 80002ba:	e00e      	b.n	80002da <HAL_GPIO_EXTI_Callback+0x52>
		} else {
			ultrasound_time = HAL_GetTick() - ultrasound_time;
 80002bc:	f000 ff1c 	bl	80010f8 <HAL_GetTick>
 80002c0:	4602      	mov	r2, r0
 80002c2:	4b18      	ldr	r3, [pc, #96]	; (8000324 <HAL_GPIO_EXTI_Callback+0x9c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	1ad3      	subs	r3, r2, r3
 80002c8:	4a16      	ldr	r2, [pc, #88]	; (8000324 <HAL_GPIO_EXTI_Callback+0x9c>)
 80002ca:	6013      	str	r3, [r2, #0]
			ultrasound_was = false;
 80002cc:	4b14      	ldr	r3, [pc, #80]	; (8000320 <HAL_GPIO_EXTI_Callback+0x98>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	701a      	strb	r2, [r3, #0]
			rt_evbit_set_from_ISR(rt_evgroup_sensors,
 80002d2:	2100      	movs	r1, #0
 80002d4:	2000      	movs	r0, #0
 80002d6:	f7ff ff9b 	bl	8000210 <rt_evbit_set_from_ISR>
//			ultrasound_done = true;
		}
	}

//	BLE INTERRUPT -> SOMETHING IS RECEIVED
	if (GPIO_Pin & IRQ_BLE_Pin) {
 80002da:	88fb      	ldrh	r3, [r7, #6]
 80002dc:	f003 0301 	and.w	r3, r3, #1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d019      	beq.n	8000318 <HAL_GPIO_EXTI_Callback+0x90>
//		rt_evbit_set_from_ISR(rt_evgroup_ble, evgroup_ble_evbit_received);
		ble_receive_data(ble_pData);
 80002e4:	4810      	ldr	r0, [pc, #64]	; (8000328 <HAL_GPIO_EXTI_Callback+0xa0>)
 80002e6:	f7ff ff57 	bl	8000198 <ble_receive_data>
		xQueueBleData ble_queue = { 0 };
 80002ea:	f107 030c 	add.w	r3, r7, #12
 80002ee:	2221      	movs	r2, #33	; 0x21
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f005 fdf3 	bl	8005ede <memset>
		strncpy(ble_queue.value, ble_pData, MAX_SIZE);
 80002f8:	f107 030c 	add.w	r3, r7, #12
 80002fc:	2220      	movs	r2, #32
 80002fe:	490a      	ldr	r1, [pc, #40]	; (8000328 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000300:	4618      	mov	r0, r3
 8000302:	f005 fdf4 	bl	8005eee <strncpy>
		ble_queue.info = ble_received;
 8000306:	2300      	movs	r3, #0
 8000308:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

		rt_enqueue_ISR(rt_queue_ble, &ble_queue);
 800030c:	f107 030c 	add.w	r3, r7, #12
 8000310:	4619      	mov	r1, r3
 8000312:	2000      	movs	r0, #0
 8000314:	f7ff ff98 	bl	8000248 <rt_enqueue_ISR>
//		memset(ble_pData, 0, MAX_SIZE);
	}
}
 8000318:	bf00      	nop
 800031a:	3730      	adds	r7, #48	; 0x30
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000030 	.word	0x20000030
 8000324:	2000002c 	.word	0x2000002c
 8000328:	200004e0 	.word	0x200004e0

0800032c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	605a      	str	r2, [r3, #4]
 800033a:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 800033c:	4b25      	ldr	r3, [pc, #148]	; (80003d4 <MX_ADC_Init+0xa8>)
 800033e:	4a26      	ldr	r2, [pc, #152]	; (80003d8 <MX_ADC_Init+0xac>)
 8000340:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000342:	4b24      	ldr	r3, [pc, #144]	; (80003d4 <MX_ADC_Init+0xa8>)
 8000344:	2200      	movs	r2, #0
 8000346:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000348:	4b22      	ldr	r3, [pc, #136]	; (80003d4 <MX_ADC_Init+0xa8>)
 800034a:	2200      	movs	r2, #0
 800034c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800034e:	4b21      	ldr	r3, [pc, #132]	; (80003d4 <MX_ADC_Init+0xa8>)
 8000350:	2200      	movs	r2, #0
 8000352:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000354:	4b1f      	ldr	r3, [pc, #124]	; (80003d4 <MX_ADC_Init+0xa8>)
 8000356:	2200      	movs	r2, #0
 8000358:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800035a:	4b1e      	ldr	r3, [pc, #120]	; (80003d4 <MX_ADC_Init+0xa8>)
 800035c:	2200      	movs	r2, #0
 800035e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000360:	4b1c      	ldr	r3, [pc, #112]	; (80003d4 <MX_ADC_Init+0xa8>)
 8000362:	2200      	movs	r2, #0
 8000364:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000366:	4b1b      	ldr	r3, [pc, #108]	; (80003d4 <MX_ADC_Init+0xa8>)
 8000368:	2200      	movs	r2, #0
 800036a:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 800036c:	4b19      	ldr	r3, [pc, #100]	; (80003d4 <MX_ADC_Init+0xa8>)
 800036e:	2200      	movs	r2, #0
 8000370:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000372:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <MX_ADC_Init+0xa8>)
 8000374:	2200      	movs	r2, #0
 8000376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 800037a:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <MX_ADC_Init+0xa8>)
 800037c:	2201      	movs	r2, #1
 800037e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000380:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <MX_ADC_Init+0xa8>)
 8000382:	2200      	movs	r2, #0
 8000384:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <MX_ADC_Init+0xa8>)
 800038a:	2210      	movs	r2, #16
 800038c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800038e:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <MX_ADC_Init+0xa8>)
 8000390:	2200      	movs	r2, #0
 8000392:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000394:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <MX_ADC_Init+0xa8>)
 8000396:	2200      	movs	r2, #0
 8000398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800039c:	480d      	ldr	r0, [pc, #52]	; (80003d4 <MX_ADC_Init+0xa8>)
 800039e:	f000 fed7 	bl	8001150 <HAL_ADC_Init>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_ADC_Init+0x80>
  {
    Error_Handler();
 80003a8:	f000 fac6 	bl	8000938 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003ac:	2301      	movs	r3, #1
 80003ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003b0:	2301      	movs	r3, #1
 80003b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 80003b4:	2300      	movs	r3, #0
 80003b6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	4619      	mov	r1, r3
 80003bc:	4805      	ldr	r0, [pc, #20]	; (80003d4 <MX_ADC_Init+0xa8>)
 80003be:	f001 f96b 	bl	8001698 <HAL_ADC_ConfigChannel>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 80003c8:	f000 fab6 	bl	8000938 <Error_Handler>
  }

}
 80003cc:	bf00      	nop
 80003ce:	3710      	adds	r7, #16
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	20000530 	.word	0x20000530
 80003d8:	40012400 	.word	0x40012400

080003dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b08c      	sub	sp, #48	; 0x30
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e4:	f107 031c 	add.w	r3, r7, #28
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]
 80003f0:	60da      	str	r2, [r3, #12]
 80003f2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a2d      	ldr	r2, [pc, #180]	; (80004b0 <HAL_ADC_MspInit+0xd4>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d154      	bne.n	80004a8 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80003fe:	4b2d      	ldr	r3, [pc, #180]	; (80004b4 <HAL_ADC_MspInit+0xd8>)
 8000400:	6a1b      	ldr	r3, [r3, #32]
 8000402:	4a2c      	ldr	r2, [pc, #176]	; (80004b4 <HAL_ADC_MspInit+0xd8>)
 8000404:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000408:	6213      	str	r3, [r2, #32]
 800040a:	4b2a      	ldr	r3, [pc, #168]	; (80004b4 <HAL_ADC_MspInit+0xd8>)
 800040c:	6a1b      	ldr	r3, [r3, #32]
 800040e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000412:	61bb      	str	r3, [r7, #24]
 8000414:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000416:	4b27      	ldr	r3, [pc, #156]	; (80004b4 <HAL_ADC_MspInit+0xd8>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	4a26      	ldr	r2, [pc, #152]	; (80004b4 <HAL_ADC_MspInit+0xd8>)
 800041c:	f043 0304 	orr.w	r3, r3, #4
 8000420:	61d3      	str	r3, [r2, #28]
 8000422:	4b24      	ldr	r3, [pc, #144]	; (80004b4 <HAL_ADC_MspInit+0xd8>)
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	f003 0304 	and.w	r3, r3, #4
 800042a:	617b      	str	r3, [r7, #20]
 800042c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800042e:	4b21      	ldr	r3, [pc, #132]	; (80004b4 <HAL_ADC_MspInit+0xd8>)
 8000430:	69db      	ldr	r3, [r3, #28]
 8000432:	4a20      	ldr	r2, [pc, #128]	; (80004b4 <HAL_ADC_MspInit+0xd8>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	61d3      	str	r3, [r2, #28]
 800043a:	4b1e      	ldr	r3, [pc, #120]	; (80004b4 <HAL_ADC_MspInit+0xd8>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	613b      	str	r3, [r7, #16]
 8000444:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000446:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <HAL_ADC_MspInit+0xd8>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	4a1a      	ldr	r2, [pc, #104]	; (80004b4 <HAL_ADC_MspInit+0xd8>)
 800044c:	f043 0302 	orr.w	r3, r3, #2
 8000450:	61d3      	str	r3, [r2, #28]
 8000452:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <HAL_ADC_MspInit+0xd8>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	f003 0302 	and.w	r3, r3, #2
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA7     ------> ADC_IN7
    PB15     ------> ADC_IN21 
    */
    GPIO_InitStruct.Pin = ADC_BATTERY_VOLTAGE_Pin;
 800045e:	2301      	movs	r3, #1
 8000460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000462:	2303      	movs	r3, #3
 8000464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_BATTERY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 800046a:	f107 031c 	add.w	r3, r7, #28
 800046e:	4619      	mov	r1, r3
 8000470:	4811      	ldr	r0, [pc, #68]	; (80004b8 <HAL_ADC_MspInit+0xdc>)
 8000472:	f001 fcb9 	bl	8001de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_PHOTO_BACK_Pin|ADC_OPTO_LEFT_Pin|ADC_PHOTO_FRONT_Pin;
 8000476:	2386      	movs	r3, #134	; 0x86
 8000478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800047a:	2303      	movs	r3, #3
 800047c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047e:	2300      	movs	r3, #0
 8000480:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000482:	f107 031c 	add.w	r3, r7, #28
 8000486:	4619      	mov	r1, r3
 8000488:	480c      	ldr	r0, [pc, #48]	; (80004bc <HAL_ADC_MspInit+0xe0>)
 800048a:	f001 fcad 	bl	8001de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_OPTO_RIGHT_Pin;
 800048e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000494:	2303      	movs	r3, #3
 8000496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	2300      	movs	r3, #0
 800049a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_OPTO_RIGHT_GPIO_Port, &GPIO_InitStruct);
 800049c:	f107 031c 	add.w	r3, r7, #28
 80004a0:	4619      	mov	r1, r3
 80004a2:	4807      	ldr	r0, [pc, #28]	; (80004c0 <HAL_ADC_MspInit+0xe4>)
 80004a4:	f001 fca0 	bl	8001de8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80004a8:	bf00      	nop
 80004aa:	3730      	adds	r7, #48	; 0x30
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40012400 	.word	0x40012400
 80004b4:	40023800 	.word	0x40023800
 80004b8:	40020800 	.word	0x40020800
 80004bc:	40020000 	.word	0x40020000
 80004c0:	40020400 	.word	0x40020400

080004c4 <vApplicationTickHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08a      	sub	sp, #40	; 0x28
 80004e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ea:	f107 0314 	add.w	r3, r7, #20
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]
 80004f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fa:	4b72      	ldr	r3, [pc, #456]	; (80006c4 <MX_GPIO_Init+0x1e0>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	4a71      	ldr	r2, [pc, #452]	; (80006c4 <MX_GPIO_Init+0x1e0>)
 8000500:	f043 0304 	orr.w	r3, r3, #4
 8000504:	61d3      	str	r3, [r2, #28]
 8000506:	4b6f      	ldr	r3, [pc, #444]	; (80006c4 <MX_GPIO_Init+0x1e0>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	f003 0304 	and.w	r3, r3, #4
 800050e:	613b      	str	r3, [r7, #16]
 8000510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000512:	4b6c      	ldr	r3, [pc, #432]	; (80006c4 <MX_GPIO_Init+0x1e0>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	4a6b      	ldr	r2, [pc, #428]	; (80006c4 <MX_GPIO_Init+0x1e0>)
 8000518:	f043 0320 	orr.w	r3, r3, #32
 800051c:	61d3      	str	r3, [r2, #28]
 800051e:	4b69      	ldr	r3, [pc, #420]	; (80006c4 <MX_GPIO_Init+0x1e0>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	f003 0320 	and.w	r3, r3, #32
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b66      	ldr	r3, [pc, #408]	; (80006c4 <MX_GPIO_Init+0x1e0>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	4a65      	ldr	r2, [pc, #404]	; (80006c4 <MX_GPIO_Init+0x1e0>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	61d3      	str	r3, [r2, #28]
 8000536:	4b63      	ldr	r3, [pc, #396]	; (80006c4 <MX_GPIO_Init+0x1e0>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000542:	4b60      	ldr	r3, [pc, #384]	; (80006c4 <MX_GPIO_Init+0x1e0>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	4a5f      	ldr	r2, [pc, #380]	; (80006c4 <MX_GPIO_Init+0x1e0>)
 8000548:	f043 0302 	orr.w	r3, r3, #2
 800054c:	61d3      	str	r3, [r2, #28]
 800054e:	4b5d      	ldr	r3, [pc, #372]	; (80006c4 <MX_GPIO_Init+0x1e0>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	f003 0302 	and.w	r3, r3, #2
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800055a:	4b5a      	ldr	r3, [pc, #360]	; (80006c4 <MX_GPIO_Init+0x1e0>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	4a59      	ldr	r2, [pc, #356]	; (80006c4 <MX_GPIO_Init+0x1e0>)
 8000560:	f043 0308 	orr.w	r3, r3, #8
 8000564:	61d3      	str	r3, [r2, #28]
 8000566:	4b57      	ldr	r3, [pc, #348]	; (80006c4 <MX_GPIO_Init+0x1e0>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	f003 0308 	and.w	r3, r3, #8
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_INa_ENGINE_LEFT_Pin|OUT_INnb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_TEST_Pin 
 8000572:	2200      	movs	r2, #0
 8000574:	f640 616e 	movw	r1, #3694	; 0xe6e
 8000578:	4853      	ldr	r0, [pc, #332]	; (80006c8 <MX_GPIO_Init+0x1e4>)
 800057a:	f001 fea7 	bl	80022cc <HAL_GPIO_WritePin>
                          |OUT_ULTRASOUND_TRIG_Pin|OUT_INb_RIGHT_Pin|OUT_LED1_Pin|OUT_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 800057e:	2200      	movs	r2, #0
 8000580:	f248 7108 	movw	r1, #34568	; 0x8708
 8000584:	4851      	ldr	r0, [pc, #324]	; (80006cc <MX_GPIO_Init+0x1e8>)
 8000586:	f001 fea1 	bl	80022cc <HAL_GPIO_WritePin>
                          |OUT_LED0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_BLE_EN_GPIO_Port, OUT_BLE_EN_Pin, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	2110      	movs	r1, #16
 800058e:	484e      	ldr	r0, [pc, #312]	; (80006c8 <MX_GPIO_Init+0x1e4>)
 8000590:	f001 fe9c 	bl	80022cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12;
 8000594:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800059a:	2303      	movs	r3, #3
 800059c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	4619      	mov	r1, r3
 80005a8:	4847      	ldr	r0, [pc, #284]	; (80006c8 <MX_GPIO_Init+0x1e4>)
 80005aa:	f001 fc1d 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = OUT_INa_ENGINE_LEFT_Pin|OUT_INnb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_EN_Pin 
 80005ae:	f640 637e 	movw	r3, #3710	; 0xe7e
 80005b2:	617b      	str	r3, [r7, #20]
                          |OUT_BLE_TEST_Pin|OUT_ULTRASOUND_TRIG_Pin|OUT_INb_RIGHT_Pin|OUT_LED1_Pin 
                          |OUT_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005bc:	2300      	movs	r3, #0
 80005be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4619      	mov	r1, r3
 80005c6:	4840      	ldr	r0, [pc, #256]	; (80006c8 <MX_GPIO_Init+0x1e4>)
 80005c8:	f001 fc0e 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 80005cc:	f248 7308 	movw	r3, #34568	; 0x8708
 80005d0:	617b      	str	r3, [r7, #20]
                          |OUT_LED0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2300      	movs	r3, #0
 80005dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	4619      	mov	r1, r3
 80005e4:	4839      	ldr	r0, [pc, #228]	; (80006cc <MX_GPIO_Init+0x1e8>)
 80005e6:	f001 fbff 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 80005ea:	f241 0370 	movw	r3, #4208	; 0x1070
 80005ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005f0:	2303      	movs	r3, #3
 80005f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4619      	mov	r1, r3
 80005fe:	4833      	ldr	r0, [pc, #204]	; (80006cc <MX_GPIO_Init+0x1e8>)
 8000600:	f001 fbf2 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IRQ_BLE_Pin|IRQ_ULTRASOUND_ECHO_Pin;
 8000604:	2303      	movs	r3, #3
 8000606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000608:	4b31      	ldr	r3, [pc, #196]	; (80006d0 <MX_GPIO_Init+0x1ec>)
 800060a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	4619      	mov	r1, r3
 8000616:	482f      	ldr	r0, [pc, #188]	; (80006d4 <MX_GPIO_Init+0x1f0>)
 8000618:	f001 fbe6 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB3 PB4 
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 800061c:	f242 333c 	movw	r3, #9020	; 0x233c
 8000620:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000622:	2303      	movs	r3, #3
 8000624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	4828      	ldr	r0, [pc, #160]	; (80006d4 <MX_GPIO_Init+0x1f0>)
 8000632:	f001 fbd9 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_LEFT_Pin;
 8000636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_LEFT_GPIO_Port, &GPIO_InitStruct);
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4619      	mov	r1, r3
 800064a:	4822      	ldr	r0, [pc, #136]	; (80006d4 <MX_GPIO_Init+0x1f0>)
 800064c:	f001 fbcc 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_HALL_FRONT_Pin;
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN_HALL_FRONT_GPIO_Port, &GPIO_InitStruct);
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4619      	mov	r1, r3
 8000662:	4819      	ldr	r0, [pc, #100]	; (80006c8 <MX_GPIO_Init+0x1e4>)
 8000664:	f001 fbc0 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_RIGHT_Pin;
 8000668:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066e:	2300      	movs	r3, #0
 8000670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	4813      	ldr	r0, [pc, #76]	; (80006cc <MX_GPIO_Init+0x1e8>)
 800067e:	f001 fbb3 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000682:	2304      	movs	r3, #4
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000686:	2303      	movs	r3, #3
 8000688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4619      	mov	r1, r3
 8000694:	4810      	ldr	r0, [pc, #64]	; (80006d8 <MX_GPIO_Init+0x1f4>)
 8000696:	f001 fba7 	bl	8001de8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2105      	movs	r1, #5
 800069e:	2006      	movs	r0, #6
 80006a0:	f001 fb5e 	bl	8001d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006a4:	2006      	movs	r0, #6
 80006a6:	f001 fb87 	bl	8001db8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2105      	movs	r1, #5
 80006ae:	2007      	movs	r0, #7
 80006b0:	f001 fb56 	bl	8001d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80006b4:	2007      	movs	r0, #7
 80006b6:	f001 fb7f 	bl	8001db8 <HAL_NVIC_EnableIRQ>

}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	; 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40020800 	.word	0x40020800
 80006cc:	40020000 	.word	0x40020000
 80006d0:	10110000 	.word	0x10110000
 80006d4:	40020400 	.word	0x40020400
 80006d8:	40020c00 	.word	0x40020c00

080006dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_I2C1_Init+0x50>)
 80006e2:	4a13      	ldr	r2, [pc, #76]	; (8000730 <MX_I2C1_Init+0x54>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_I2C1_Init+0x50>)
 80006e8:	4a12      	ldr	r2, [pc, #72]	; (8000734 <MX_I2C1_Init+0x58>)
 80006ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_I2C1_Init+0x50>)
 80006fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_I2C1_Init+0x50>)
 800071a:	f001 fe21 	bl	8002360 <HAL_I2C_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000724:	f000 f908 	bl	8000938 <Error_Handler>
  }

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000584 	.word	0x20000584
 8000730:	40005400 	.word	0x40005400
 8000734:	000186a0 	.word	0x000186a0

08000738 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a17      	ldr	r2, [pc, #92]	; (80007b4 <HAL_I2C_MspInit+0x7c>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d127      	bne.n	80007aa <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <HAL_I2C_MspInit+0x80>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	4a16      	ldr	r2, [pc, #88]	; (80007b8 <HAL_I2C_MspInit+0x80>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	61d3      	str	r3, [r2, #28]
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <HAL_I2C_MspInit+0x80>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000772:	23c0      	movs	r3, #192	; 0xc0
 8000774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000776:	2312      	movs	r3, #18
 8000778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800077a:	2301      	movs	r3, #1
 800077c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077e:	2303      	movs	r3, #3
 8000780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000782:	2304      	movs	r3, #4
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	480b      	ldr	r0, [pc, #44]	; (80007bc <HAL_I2C_MspInit+0x84>)
 800078e:	f001 fb2b 	bl	8001de8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_I2C_MspInit+0x80>)
 8000794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000796:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <HAL_I2C_MspInit+0x80>)
 8000798:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800079c:	6253      	str	r3, [r2, #36]	; 0x24
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_I2C_MspInit+0x80>)
 80007a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007aa:	bf00      	nop
 80007ac:	3728      	adds	r7, #40	; 0x28
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40005400 	.word	0x40005400
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40020400 	.word	0x40020400

080007c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007c6:	f000 fc6c 	bl	80010a2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007ca:	f000 f853 	bl	8000874 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007ce:	f7ff fe89 	bl	80004e4 <MX_GPIO_Init>
	MX_ADC_Init();
 80007d2:	f7ff fdab 	bl	800032c <MX_ADC_Init>
	MX_I2C1_Init();
 80007d6:	f7ff ff81 	bl	80006dc <MX_I2C1_Init>
	MX_TIM2_Init();
 80007da:	f000 f9ab 	bl	8000b34 <MX_TIM2_Init>
	MX_TIM3_Init();
 80007de:	f000 fa1d 	bl	8000c1c <MX_TIM3_Init>
	MX_TIM9_Init();
 80007e2:	f000 fa8f 	bl	8000d04 <MX_TIM9_Init>
	MX_USART3_UART_Init();
 80007e6:	f000 fbc9 	bl	8000f7c <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	// lewy silnik
	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 80007ea:	2201      	movs	r2, #1
 80007ec:	2102      	movs	r1, #2
 80007ee:	481d      	ldr	r0, [pc, #116]	; (8000864 <main+0xa4>)
 80007f0:	f001 fd6c 	bl	80022cc <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(OUT_INnb_ENGINE_LEFT_GPIO_Port, OUT_INnb_ENGINE_LEFT_Pin,
 80007f4:	2200      	movs	r2, #0
 80007f6:	2104      	movs	r1, #4
 80007f8:	481a      	ldr	r0, [pc, #104]	; (8000864 <main+0xa4>)
 80007fa:	f001 fd67 	bl	80022cc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80007fe:	2100      	movs	r1, #0
 8000800:	4819      	ldr	r0, [pc, #100]	; (8000868 <main+0xa8>)
 8000802:	f003 f87f 	bl	8003904 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <main+0xa8>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2200      	movs	r2, #0
 800080c:	635a      	str	r2, [r3, #52]	; 0x34

	// prawy silnik
	device_init();
 800080e:	f7ff fceb 	bl	80001e8 <device_init>
	h_bridge_init();
 8000812:	f7ff fcb5 	bl	8000180 <h_bridge_init>
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port,
 8000816:	2201      	movs	r2, #1
 8000818:	2100      	movs	r1, #0
 800081a:	4814      	ldr	r0, [pc, #80]	; (800086c <main+0xac>)
 800081c:	f001 fd56 	bl	80022cc <HAL_GPIO_WritePin>
			OUT_INa_ENGINE_RIGHT_GPIO_Port, GPIO_PIN_SET);
	HAL_GPIO_WritePin(OUT_INb_RIGHT_GPIO_Port, OUT_INb_RIGHT_Pin,
 8000820:	2200      	movs	r2, #0
 8000822:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000826:	480f      	ldr	r0, [pc, #60]	; (8000864 <main+0xa4>)
 8000828:	f001 fd50 	bl	80022cc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800082c:	2108      	movs	r1, #8
 800082e:	4810      	ldr	r0, [pc, #64]	; (8000870 <main+0xb0>)
 8000830:	f003 f868 	bl	8003904 <HAL_TIM_PWM_Start>

	while (1) {
		for (int i = 0; i < 10000; i++) {
 8000834:	2300      	movs	r3, #0
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	e00d      	b.n	8000856 <main+0x96>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, i);
 800083a:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <main+0xb0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(100);
 8000842:	2064      	movs	r0, #100	; 0x64
 8000844:	f000 fc62 	bl	800110c <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <main+0xa8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	635a      	str	r2, [r3, #52]	; 0x34
		for (int i = 0; i < 10000; i++) {
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3301      	adds	r3, #1
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f242 720f 	movw	r2, #9999	; 0x270f
 800085c:	4293      	cmp	r3, r2
 800085e:	ddec      	ble.n	800083a <main+0x7a>
 8000860:	e7e8      	b.n	8000834 <main+0x74>
 8000862:	bf00      	nop
 8000864:	40020800 	.word	0x40020800
 8000868:	2000068c 	.word	0x2000068c
 800086c:	40020000 	.word	0x40020000
 8000870:	20000614 	.word	0x20000614

08000874 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b092      	sub	sp, #72	; 0x48
 8000878:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	2234      	movs	r2, #52	; 0x34
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f005 fb2b 	bl	8005ede <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000888:	463b      	mov	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000896:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <SystemClock_Config+0x9c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800089e:	4a1c      	ldr	r2, [pc, #112]	; (8000910 <SystemClock_Config+0x9c>)
 80008a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008a4:	6013      	str	r3, [r2, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80008a6:	2303      	movs	r3, #3
 80008a8:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ae:	2301      	movs	r3, #1
 80008b0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b2:	2310      	movs	r3, #16
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b6:	2302      	movs	r3, #2
 80008b8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008be:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80008c0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80008c4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80008c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ca:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4618      	mov	r0, r3
 80008d2:	f001 feef 	bl	80026b4 <HAL_RCC_OscConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x6c>
		Error_Handler();
 80008dc:	f000 f82c 	bl	8000938 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008e0:	230f      	movs	r3, #15
 80008e2:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e4:	2303      	movs	r3, #3
 80008e6:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80008f4:	463b      	mov	r3, r7
 80008f6:	2101      	movs	r1, #1
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 fb59 	bl	8002fb0 <HAL_RCC_ClockConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0x94>
		Error_Handler();
 8000904:	f000 f818 	bl	8000938 <Error_Handler>
	}
}
 8000908:	bf00      	nop
 800090a:	3748      	adds	r7, #72	; 0x48
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40007000 	.word	0x40007000

08000914 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a04      	ldr	r2, [pc, #16]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d101      	bne.n	800092a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000926:	f000 fbd5 	bl	80010d4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40000c00 	.word	0x40000c00

08000938 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <assert_failed>:
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line) {
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <HAL_MspInit+0x64>)
 8000960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000962:	4a16      	ldr	r2, [pc, #88]	; (80009bc <HAL_MspInit+0x64>)
 8000964:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000968:	6253      	str	r3, [r2, #36]	; 0x24
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <HAL_MspInit+0x64>)
 800096c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <HAL_MspInit+0x64>)
 8000978:	6a1b      	ldr	r3, [r3, #32]
 800097a:	4a10      	ldr	r2, [pc, #64]	; (80009bc <HAL_MspInit+0x64>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6213      	str	r3, [r2, #32]
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <HAL_MspInit+0x64>)
 8000984:	6a1b      	ldr	r3, [r3, #32]
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <HAL_MspInit+0x64>)
 8000990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <HAL_MspInit+0x64>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000998:	6253      	str	r3, [r2, #36]	; 0x24
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <HAL_MspInit+0x64>)
 800099c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800099e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	210f      	movs	r1, #15
 80009aa:	f06f 0001 	mvn.w	r0, #1
 80009ae:	f001 f9d7 	bl	8001d60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800

080009c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08c      	sub	sp, #48	; 0x30
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 80009d0:	2200      	movs	r2, #0
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	202e      	movs	r0, #46	; 0x2e
 80009d6:	f001 f9c3 	bl	8001d60 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 80009da:	202e      	movs	r0, #46	; 0x2e
 80009dc:	f001 f9ec 	bl	8001db8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80009e0:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <HAL_InitTick+0x9c>)
 80009e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e4:	4a1d      	ldr	r2, [pc, #116]	; (8000a5c <HAL_InitTick+0x9c>)
 80009e6:	f043 0308 	orr.w	r3, r3, #8
 80009ea:	6253      	str	r3, [r2, #36]	; 0x24
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <HAL_InitTick+0x9c>)
 80009ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f0:	f003 0308 	and.w	r3, r3, #8
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f8:	f107 0210 	add.w	r2, r7, #16
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4611      	mov	r1, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f002 fd1c 	bl	8003440 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a08:	f002 fcf2 	bl	80033f0 <HAL_RCC_GetPCLK1Freq>
 8000a0c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a10:	4a13      	ldr	r2, [pc, #76]	; (8000a60 <HAL_InitTick+0xa0>)
 8000a12:	fba2 2303 	umull	r2, r3, r2, r3
 8000a16:	0c9b      	lsrs	r3, r3, #18
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <HAL_InitTick+0xa8>)
 8000a20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a28:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000a2a:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a2e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a3e:	f002 fda1 	bl	8003584 <HAL_TIM_Base_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d104      	bne.n	8000a52 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000a48:	4806      	ldr	r0, [pc, #24]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a4a:	f002 fe43 	bl	80036d4 <HAL_TIM_Base_Start_IT>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	e000      	b.n	8000a54 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3730      	adds	r7, #48	; 0x30
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	431bde83 	.word	0x431bde83
 8000a64:	200005d8 	.word	0x200005d8
 8000a68:	40000c00 	.word	0x40000c00

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr

08000a78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <HardFault_Handler+0x4>

08000a7e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <MemManage_Handler+0x4>

08000a84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <BusFault_Handler+0x4>

08000a8a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <UsageFault_Handler+0x4>

08000a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f001 fc45 	bl	8002330 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f001 fc3e 	bl	8002330 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000abc:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <TIM5_IRQHandler+0x10>)
 8000abe:	f002 ffb5 	bl	8003a2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200005d8 	.word	0x200005d8

08000acc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000ad0:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <SystemInit+0x5c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a14      	ldr	r2, [pc, #80]	; (8000b28 <SystemInit+0x5c>)
 8000ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ada:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <SystemInit+0x5c>)
 8000ade:	689a      	ldr	r2, [r3, #8]
 8000ae0:	4911      	ldr	r1, [pc, #68]	; (8000b28 <SystemInit+0x5c>)
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <SystemInit+0x60>)
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <SystemInit+0x5c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a0e      	ldr	r2, [pc, #56]	; (8000b28 <SystemInit+0x5c>)
 8000aee:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000af2:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000af6:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <SystemInit+0x5c>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <SystemInit+0x5c>)
 8000afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b02:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <SystemInit+0x5c>)
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <SystemInit+0x5c>)
 8000b0a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000b0e:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <SystemInit+0x5c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <SystemInit+0x64>)
 8000b18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b1c:	609a      	str	r2, [r3, #8]
#endif
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	88ffc00c 	.word	0x88ffc00c
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3a:	f107 0318 	add.w	r3, r7, #24
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b52:	463b      	mov	r3, r7
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8000b5e:	4b2e      	ldr	r3, [pc, #184]	; (8000c18 <MX_TIM2_Init+0xe4>)
 8000b60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b66:	4b2c      	ldr	r3, [pc, #176]	; (8000c18 <MX_TIM2_Init+0xe4>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6c:	4b2a      	ldr	r3, [pc, #168]	; (8000c18 <MX_TIM2_Init+0xe4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3199;
 8000b72:	4b29      	ldr	r3, [pc, #164]	; (8000c18 <MX_TIM2_Init+0xe4>)
 8000b74:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000b78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7a:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <MX_TIM2_Init+0xe4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b80:	4b25      	ldr	r3, [pc, #148]	; (8000c18 <MX_TIM2_Init+0xe4>)
 8000b82:	2280      	movs	r2, #128	; 0x80
 8000b84:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b86:	4824      	ldr	r0, [pc, #144]	; (8000c18 <MX_TIM2_Init+0xe4>)
 8000b88:	f002 fcfc 	bl	8003584 <HAL_TIM_Base_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000b92:	f7ff fed1 	bl	8000938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b9a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b9c:	f107 0318 	add.w	r3, r7, #24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	481d      	ldr	r0, [pc, #116]	; (8000c18 <MX_TIM2_Init+0xe4>)
 8000ba4:	f003 f9ae 	bl	8003f04 <HAL_TIM_ConfigClockSource>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000bae:	f7ff fec3 	bl	8000938 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bb2:	4819      	ldr	r0, [pc, #100]	; (8000c18 <MX_TIM2_Init+0xe4>)
 8000bb4:	f002 fdf4 	bl	80037a0 <HAL_TIM_PWM_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bbe:	f7ff febb 	bl	8000938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bca:	f107 0310 	add.w	r3, r7, #16
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4811      	ldr	r0, [pc, #68]	; (8000c18 <MX_TIM2_Init+0xe4>)
 8000bd2:	f003 ff0f 	bl	80049f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000bdc:	f7ff feac 	bl	8000938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be0:	2360      	movs	r3, #96	; 0x60
 8000be2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1599;
 8000be4:	f240 633f 	movw	r3, #1599	; 0x63f
 8000be8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4807      	ldr	r0, [pc, #28]	; (8000c18 <MX_TIM2_Init+0xe4>)
 8000bfa:	f002 fff3 	bl	8003be4 <HAL_TIM_PWM_ConfigChannel>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000c04:	f7ff fe98 	bl	8000938 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000c08:	4803      	ldr	r0, [pc, #12]	; (8000c18 <MX_TIM2_Init+0xe4>)
 8000c0a:	f000 f933 	bl	8000e74 <HAL_TIM_MspPostInit>

}
 8000c0e:	bf00      	nop
 8000c10:	3728      	adds	r7, #40	; 0x28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	2000068c 	.word	0x2000068c

08000c1c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c22:	f107 0318 	add.w	r3, r7, #24
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8000c46:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <MX_TIM3_Init+0xe0>)
 8000c48:	4a2d      	ldr	r2, [pc, #180]	; (8000d00 <MX_TIM3_Init+0xe4>)
 8000c4a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c4c:	4b2b      	ldr	r3, [pc, #172]	; (8000cfc <MX_TIM3_Init+0xe0>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c52:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <MX_TIM3_Init+0xe0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3199;
 8000c58:	4b28      	ldr	r3, [pc, #160]	; (8000cfc <MX_TIM3_Init+0xe0>)
 8000c5a:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000c5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c60:	4b26      	ldr	r3, [pc, #152]	; (8000cfc <MX_TIM3_Init+0xe0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c66:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <MX_TIM3_Init+0xe0>)
 8000c68:	2280      	movs	r2, #128	; 0x80
 8000c6a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c6c:	4823      	ldr	r0, [pc, #140]	; (8000cfc <MX_TIM3_Init+0xe0>)
 8000c6e:	f002 fc89 	bl	8003584 <HAL_TIM_Base_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000c78:	f7ff fe5e 	bl	8000938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c80:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c82:	f107 0318 	add.w	r3, r7, #24
 8000c86:	4619      	mov	r1, r3
 8000c88:	481c      	ldr	r0, [pc, #112]	; (8000cfc <MX_TIM3_Init+0xe0>)
 8000c8a:	f003 f93b 	bl	8003f04 <HAL_TIM_ConfigClockSource>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000c94:	f7ff fe50 	bl	8000938 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c98:	4818      	ldr	r0, [pc, #96]	; (8000cfc <MX_TIM3_Init+0xe0>)
 8000c9a:	f002 fd81 	bl	80037a0 <HAL_TIM_PWM_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ca4:	f7ff fe48 	bl	8000938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4811      	ldr	r0, [pc, #68]	; (8000cfc <MX_TIM3_Init+0xe0>)
 8000cb8:	f003 fe9c 	bl	80049f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000cc2:	f7ff fe39 	bl	8000938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cc6:	2360      	movs	r3, #96	; 0x60
 8000cc8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8000cca:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000cce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cd8:	463b      	mov	r3, r7
 8000cda:	2208      	movs	r2, #8
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4807      	ldr	r0, [pc, #28]	; (8000cfc <MX_TIM3_Init+0xe0>)
 8000ce0:	f002 ff80 	bl	8003be4 <HAL_TIM_PWM_ConfigChannel>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8000cea:	f7ff fe25 	bl	8000938 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000cee:	4803      	ldr	r0, [pc, #12]	; (8000cfc <MX_TIM3_Init+0xe0>)
 8000cf0:	f000 f8c0 	bl	8000e74 <HAL_TIM_MspPostInit>

}
 8000cf4:	bf00      	nop
 8000cf6:	3728      	adds	r7, #40	; 0x28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000614 	.word	0x20000614
 8000d00:	40000400 	.word	0x40000400

08000d04 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d0a:	f107 0318 	add.w	r3, r7, #24
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d22:	463b      	mov	r3, r7
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <MX_TIM9_Init+0xe0>)
 8000d30:	4a2d      	ldr	r2, [pc, #180]	; (8000de8 <MX_TIM9_Init+0xe4>)
 8000d32:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 32768;
 8000d34:	4b2b      	ldr	r3, [pc, #172]	; (8000de4 <MX_TIM9_Init+0xe0>)
 8000d36:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d3a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3c:	4b29      	ldr	r3, [pc, #164]	; (8000de4 <MX_TIM9_Init+0xe0>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 19;
 8000d42:	4b28      	ldr	r3, [pc, #160]	; (8000de4 <MX_TIM9_Init+0xe0>)
 8000d44:	2213      	movs	r2, #19
 8000d46:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d48:	4b26      	ldr	r3, [pc, #152]	; (8000de4 <MX_TIM9_Init+0xe0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d4e:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <MX_TIM9_Init+0xe0>)
 8000d50:	2280      	movs	r2, #128	; 0x80
 8000d52:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000d54:	4823      	ldr	r0, [pc, #140]	; (8000de4 <MX_TIM9_Init+0xe0>)
 8000d56:	f002 fc15 	bl	8003584 <HAL_TIM_Base_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 8000d60:	f7ff fdea 	bl	8000938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d68:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000d6a:	f107 0318 	add.w	r3, r7, #24
 8000d6e:	4619      	mov	r1, r3
 8000d70:	481c      	ldr	r0, [pc, #112]	; (8000de4 <MX_TIM9_Init+0xe0>)
 8000d72:	f003 f8c7 	bl	8003f04 <HAL_TIM_ConfigClockSource>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM9_Init+0x7c>
  {
    Error_Handler();
 8000d7c:	f7ff fddc 	bl	8000938 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000d80:	4818      	ldr	r0, [pc, #96]	; (8000de4 <MX_TIM9_Init+0xe0>)
 8000d82:	f002 fd0d 	bl	80037a0 <HAL_TIM_PWM_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM9_Init+0x8c>
  {
    Error_Handler();
 8000d8c:	f7ff fdd4 	bl	8000938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d90:	2300      	movs	r3, #0
 8000d92:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4811      	ldr	r0, [pc, #68]	; (8000de4 <MX_TIM9_Init+0xe0>)
 8000da0:	f003 fe28 	bl	80049f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM9_Init+0xaa>
  {
    Error_Handler();
 8000daa:	f7ff fdc5 	bl	8000938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dae:	2360      	movs	r3, #96	; 0x60
 8000db0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8000db2:	230a      	movs	r3, #10
 8000db4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4807      	ldr	r0, [pc, #28]	; (8000de4 <MX_TIM9_Init+0xe0>)
 8000dc6:	f002 ff0d 	bl	8003be4 <HAL_TIM_PWM_ConfigChannel>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM9_Init+0xd0>
  {
    Error_Handler();
 8000dd0:	f7ff fdb2 	bl	8000938 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 8000dd4:	4803      	ldr	r0, [pc, #12]	; (8000de4 <MX_TIM9_Init+0xe0>)
 8000dd6:	f000 f84d 	bl	8000e74 <HAL_TIM_MspPostInit>

}
 8000dda:	bf00      	nop
 8000ddc:	3728      	adds	r7, #40	; 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000650 	.word	0x20000650
 8000de8:	40010800 	.word	0x40010800

08000dec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b087      	sub	sp, #28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dfc:	d10c      	bne.n	8000e18 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <HAL_TIM_Base_MspInit+0x7c>)
 8000e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e02:	4a19      	ldr	r2, [pc, #100]	; (8000e68 <HAL_TIM_Base_MspInit+0x7c>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6253      	str	r3, [r2, #36]	; 0x24
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <HAL_TIM_Base_MspInit+0x7c>)
 8000e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8000e16:	e022      	b.n	8000e5e <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a13      	ldr	r2, [pc, #76]	; (8000e6c <HAL_TIM_Base_MspInit+0x80>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d10c      	bne.n	8000e3c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_TIM_Base_MspInit+0x7c>)
 8000e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e26:	4a10      	ldr	r2, [pc, #64]	; (8000e68 <HAL_TIM_Base_MspInit+0x7c>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	6253      	str	r3, [r2, #36]	; 0x24
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <HAL_TIM_Base_MspInit+0x7c>)
 8000e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
}
 8000e3a:	e010      	b.n	8000e5e <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM9)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <HAL_TIM_Base_MspInit+0x84>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d10b      	bne.n	8000e5e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_TIM_Base_MspInit+0x7c>)
 8000e48:	6a1b      	ldr	r3, [r3, #32]
 8000e4a:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <HAL_TIM_Base_MspInit+0x7c>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	6213      	str	r3, [r2, #32]
 8000e52:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <HAL_TIM_Base_MspInit+0x7c>)
 8000e54:	6a1b      	ldr	r3, [r3, #32]
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
}
 8000e5e:	bf00      	nop
 8000e60:	371c      	adds	r7, #28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40000400 	.word	0x40000400
 8000e70:	40010800 	.word	0x40010800

08000e74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	; 0x28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e94:	d11c      	bne.n	8000ed0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	4b33      	ldr	r3, [pc, #204]	; (8000f64 <HAL_TIM_MspPostInit+0xf0>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	4a32      	ldr	r2, [pc, #200]	; (8000f64 <HAL_TIM_MspPostInit+0xf0>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	61d3      	str	r3, [r2, #28]
 8000ea2:	4b30      	ldr	r3, [pc, #192]	; (8000f64 <HAL_TIM_MspPostInit+0xf0>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0-WKUP1     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PWM_ENGINE_LEFT_Pin;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_LEFT_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4827      	ldr	r0, [pc, #156]	; (8000f68 <HAL_TIM_MspPostInit+0xf4>)
 8000eca:	f000 ff8d 	bl	8001de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8000ece:	e044      	b.n	8000f5a <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a25      	ldr	r2, [pc, #148]	; (8000f6c <HAL_TIM_MspPostInit+0xf8>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d11d      	bne.n	8000f16 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eda:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <HAL_TIM_MspPostInit+0xf0>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	4a21      	ldr	r2, [pc, #132]	; (8000f64 <HAL_TIM_MspPostInit+0xf0>)
 8000ee0:	f043 0304 	orr.w	r3, r3, #4
 8000ee4:	61d3      	str	r3, [r2, #28]
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <HAL_TIM_MspPostInit+0xf0>)
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	f003 0304 	and.w	r3, r3, #4
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_ENGINE_RIGHT_Pin;
 8000ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f04:	2302      	movs	r3, #2
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4818      	ldr	r0, [pc, #96]	; (8000f70 <HAL_TIM_MspPostInit+0xfc>)
 8000f10:	f000 ff6a 	bl	8001de8 <HAL_GPIO_Init>
}
 8000f14:	e021      	b.n	8000f5a <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM9)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a16      	ldr	r2, [pc, #88]	; (8000f74 <HAL_TIM_MspPostInit+0x100>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d11c      	bne.n	8000f5a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f20:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <HAL_TIM_MspPostInit+0xf0>)
 8000f22:	69db      	ldr	r3, [r3, #28]
 8000f24:	4a0f      	ldr	r2, [pc, #60]	; (8000f64 <HAL_TIM_MspPostInit+0xf0>)
 8000f26:	f043 0302 	orr.w	r3, r3, #2
 8000f2a:	61d3      	str	r3, [r2, #28]
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <HAL_TIM_MspPostInit+0xf0>)
 8000f2e:	69db      	ldr	r3, [r3, #28]
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 8000f38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	4808      	ldr	r0, [pc, #32]	; (8000f78 <HAL_TIM_MspPostInit+0x104>)
 8000f56:	f000 ff47 	bl	8001de8 <HAL_GPIO_Init>
}
 8000f5a:	bf00      	nop
 8000f5c:	3728      	adds	r7, #40	; 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020000 	.word	0x40020000
 8000f6c:	40000400 	.word	0x40000400
 8000f70:	40020800 	.word	0x40020800
 8000f74:	40010800 	.word	0x40010800
 8000f78:	40020400 	.word	0x40020400

08000f7c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f82:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <MX_USART3_UART_Init+0x50>)
 8000f84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000fb4:	f003 fdb8 	bl	8004b28 <HAL_UART_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fbe:	f7ff fcbb 	bl	8000938 <Error_Handler>
  }

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200006c8 	.word	0x200006c8
 8000fcc:	40004800 	.word	0x40004800

08000fd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a17      	ldr	r2, [pc, #92]	; (800104c <HAL_UART_MspInit+0x7c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d128      	bne.n	8001044 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <HAL_UART_MspInit+0x80>)
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff6:	4a16      	ldr	r2, [pc, #88]	; (8001050 <HAL_UART_MspInit+0x80>)
 8000ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ffc:	6253      	str	r3, [r2, #36]	; 0x24
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_UART_MspInit+0x80>)
 8001000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_UART_MspInit+0x80>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <HAL_UART_MspInit+0x80>)
 8001010:	f043 0302 	orr.w	r3, r3, #2
 8001014:	61d3      	str	r3, [r2, #28]
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_UART_MspInit+0x80>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001022:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001034:	2307      	movs	r3, #7
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <HAL_UART_MspInit+0x84>)
 8001040:	f000 fed2 	bl	8001de8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	; 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40004800 	.word	0x40004800
 8001050:	40023800 	.word	0x40023800
 8001054:	40020400 	.word	0x40020400

08001058 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001058:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800105a:	e003      	b.n	8001064 <LoopCopyDataInit>

0800105c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800105e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001060:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001062:	3104      	adds	r1, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001064:	480a      	ldr	r0, [pc, #40]	; (8001090 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001068:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800106a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800106c:	d3f6      	bcc.n	800105c <CopyDataInit>
  ldr r2, =_sbss
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001070:	e002      	b.n	8001078 <LoopFillZerobss>

08001072 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001074:	f842 3b04 	str.w	r3, [r2], #4

08001078 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800107a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800107c:	d3f9      	bcc.n	8001072 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800107e:	f7ff fd25 	bl	8000acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001082:	f004 fefd 	bl	8005e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001086:	f7ff fb9b 	bl	80007c0 <main>
  bx lr
 800108a:	4770      	bx	lr
  ldr r3, =_sidata
 800108c:	0800612c 	.word	0x0800612c
  ldr r0, =_sdata
 8001090:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001094:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8001098:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 800109c:	2000070c 	.word	0x2000070c

080010a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010a0:	e7fe      	b.n	80010a0 <ADC1_IRQHandler>

080010a2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ac:	2003      	movs	r0, #3
 80010ae:	f000 fe37 	bl	8001d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010b2:	2000      	movs	r0, #0
 80010b4:	f7ff fc84 	bl	80009c0 <HAL_InitTick>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	71fb      	strb	r3, [r7, #7]
 80010c2:	e001      	b.n	80010c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010c4:	f7ff fc48 	bl	8000958 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010c8:	79fb      	ldrb	r3, [r7, #7]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HAL_IncTick+0x1c>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <HAL_IncTick+0x20>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4413      	add	r3, r2
 80010e2:	4a03      	ldr	r2, [pc, #12]	; (80010f0 <HAL_IncTick+0x1c>)
 80010e4:	6013      	str	r3, [r2, #0]
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000708 	.word	0x20000708
 80010f4:	20000008 	.word	0x20000008

080010f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b02      	ldr	r3, [pc, #8]	; (8001108 <HAL_GetTick+0x10>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	20000708 	.word	0x20000708

0800110c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001114:	f7ff fff0 	bl	80010f8 <HAL_GetTick>
 8001118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001124:	d004      	beq.n	8001130 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <HAL_Delay+0x40>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	4413      	add	r3, r2
 800112e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001130:	bf00      	nop
 8001132:	f7ff ffe1 	bl	80010f8 <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	429a      	cmp	r2, r3
 8001140:	d8f7      	bhi.n	8001132 <HAL_Delay+0x26>
  {
  }
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000008 	.word	0x20000008

08001150 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08e      	sub	sp, #56	; 0x38
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d101      	bne.n	8001170 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e282      	b.n	8001676 <HAL_ADC_Init+0x526>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a9d      	ldr	r2, [pc, #628]	; (80013ec <HAL_ADC_Init+0x29c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d004      	beq.n	8001184 <HAL_ADC_Init+0x34>
 800117a:	f240 11bd 	movw	r1, #445	; 0x1bd
 800117e:	489c      	ldr	r0, [pc, #624]	; (80013f0 <HAL_ADC_Init+0x2a0>)
 8001180:	f7ff fbe0 	bl	8000944 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00e      	beq.n	80011aa <HAL_ADC_Init+0x5a>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001194:	d009      	beq.n	80011aa <HAL_ADC_Init+0x5a>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800119e:	d004      	beq.n	80011aa <HAL_ADC_Init+0x5a>
 80011a0:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80011a4:	4892      	ldr	r0, [pc, #584]	; (80013f0 <HAL_ADC_Init+0x2a0>)
 80011a6:	f7ff fbcd 	bl	8000944 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d013      	beq.n	80011da <HAL_ADC_Init+0x8a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ba:	d00e      	beq.n	80011da <HAL_ADC_Init+0x8a>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80011c4:	d009      	beq.n	80011da <HAL_ADC_Init+0x8a>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80011ce:	d004      	beq.n	80011da <HAL_ADC_Init+0x8a>
 80011d0:	f240 11bf 	movw	r1, #447	; 0x1bf
 80011d4:	4886      	ldr	r0, [pc, #536]	; (80013f0 <HAL_ADC_Init+0x2a0>)
 80011d6:	f7ff fbb5 	bl	8000944 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d009      	beq.n	80011f6 <HAL_ADC_Init+0xa6>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011ea:	d004      	beq.n	80011f6 <HAL_ADC_Init+0xa6>
 80011ec:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80011f0:	487f      	ldr	r0, [pc, #508]	; (80013f0 <HAL_ADC_Init+0x2a0>)
 80011f2:	f7ff fba7 	bl	8000944 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d009      	beq.n	8001212 <HAL_ADC_Init+0xc2>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001206:	d004      	beq.n	8001212 <HAL_ADC_Init+0xc2>
 8001208:	f240 11c1 	movw	r1, #449	; 0x1c1
 800120c:	4878      	ldr	r0, [pc, #480]	; (80013f0 <HAL_ADC_Init+0x2a0>)
 800120e:	f7ff fb99 	bl	8000944 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800121a:	d008      	beq.n	800122e <HAL_ADC_Init+0xde>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d004      	beq.n	800122e <HAL_ADC_Init+0xde>
 8001224:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8001228:	4871      	ldr	r0, [pc, #452]	; (80013f0 <HAL_ADC_Init+0x2a0>)
 800122a:	f7ff fb8b 	bl	8000944 <assert_failed>
  assert_param(IS_ADC_AUTOWAIT(hadc->Init.LowPowerAutoWait));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d020      	beq.n	8001278 <HAL_ADC_Init+0x128>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	2b10      	cmp	r3, #16
 800123c:	d01c      	beq.n	8001278 <HAL_ADC_Init+0x128>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	2b20      	cmp	r3, #32
 8001244:	d018      	beq.n	8001278 <HAL_ADC_Init+0x128>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	2b30      	cmp	r3, #48	; 0x30
 800124c:	d014      	beq.n	8001278 <HAL_ADC_Init+0x128>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	2b40      	cmp	r3, #64	; 0x40
 8001254:	d010      	beq.n	8001278 <HAL_ADC_Init+0x128>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	2b50      	cmp	r3, #80	; 0x50
 800125c:	d00c      	beq.n	8001278 <HAL_ADC_Init+0x128>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	2b60      	cmp	r3, #96	; 0x60
 8001264:	d008      	beq.n	8001278 <HAL_ADC_Init+0x128>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	2b70      	cmp	r3, #112	; 0x70
 800126c:	d004      	beq.n	8001278 <HAL_ADC_Init+0x128>
 800126e:	f240 11c3 	movw	r1, #451	; 0x1c3
 8001272:	485f      	ldr	r0, [pc, #380]	; (80013f0 <HAL_ADC_Init+0x2a0>)
 8001274:	f7ff fb66 	bl	8000944 <assert_failed>
  assert_param(IS_ADC_AUTOPOWEROFF(hadc->Init.LowPowerAutoPowerOff));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69db      	ldr	r3, [r3, #28]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d013      	beq.n	80012a8 <HAL_ADC_Init+0x158>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001288:	d00e      	beq.n	80012a8 <HAL_ADC_Init+0x158>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001292:	d009      	beq.n	80012a8 <HAL_ADC_Init+0x158>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800129c:	d004      	beq.n	80012a8 <HAL_ADC_Init+0x158>
 800129e:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80012a2:	4853      	ldr	r0, [pc, #332]	; (80013f0 <HAL_ADC_Init+0x2a0>)
 80012a4:	f7ff fb4e 	bl	8000944 <assert_failed>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d008      	beq.n	80012c2 <HAL_ADC_Init+0x172>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	d004      	beq.n	80012c2 <HAL_ADC_Init+0x172>
 80012b8:	f240 11c5 	movw	r1, #453	; 0x1c5
 80012bc:	484c      	ldr	r0, [pc, #304]	; (80013f0 <HAL_ADC_Init+0x2a0>)
 80012be:	f7ff fb41 	bl	8000944 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d009      	beq.n	80012e0 <HAL_ADC_Init+0x190>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d004      	beq.n	80012e0 <HAL_ADC_Init+0x190>
 80012d6:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80012da:	4845      	ldr	r0, [pc, #276]	; (80013f0 <HAL_ADC_Init+0x2a0>)
 80012dc:	f7ff fb32 	bl	8000944 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80012e8:	d03e      	beq.n	8001368 <HAL_ADC_Init+0x218>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80012f2:	d039      	beq.n	8001368 <HAL_ADC_Init+0x218>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80012fc:	d034      	beq.n	8001368 <HAL_ADC_Init+0x218>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001302:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8001306:	d02f      	beq.n	8001368 <HAL_ADC_Init+0x218>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001310:	d02a      	beq.n	8001368 <HAL_ADC_Init+0x218>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001316:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800131a:	d025      	beq.n	8001368 <HAL_ADC_Init+0x218>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001320:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8001324:	d020      	beq.n	8001368 <HAL_ADC_Init+0x218>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800132a:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 800132e:	d01b      	beq.n	8001368 <HAL_ADC_Init+0x218>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001334:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001338:	d016      	beq.n	8001368 <HAL_ADC_Init+0x218>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800133e:	2b00      	cmp	r3, #0
 8001340:	d012      	beq.n	8001368 <HAL_ADC_Init+0x218>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001346:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800134a:	d00d      	beq.n	8001368 <HAL_ADC_Init+0x218>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001350:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8001354:	d008      	beq.n	8001368 <HAL_ADC_Init+0x218>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800135a:	2b10      	cmp	r3, #16
 800135c:	d004      	beq.n	8001368 <HAL_ADC_Init+0x218>
 800135e:	f240 11c7 	movw	r1, #455	; 0x1c7
 8001362:	4823      	ldr	r0, [pc, #140]	; (80013f0 <HAL_ADC_Init+0x2a0>)
 8001364:	f7ff faee 	bl	8000944 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800136e:	2b00      	cmp	r3, #0
 8001370:	d009      	beq.n	8001386 <HAL_ADC_Init+0x236>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001378:	2b01      	cmp	r3, #1
 800137a:	d004      	beq.n	8001386 <HAL_ADC_Init+0x236>
 800137c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8001380:	481b      	ldr	r0, [pc, #108]	; (80013f0 <HAL_ADC_Init+0x2a0>)
 8001382:	f7ff fadf 	bl	8000944 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d032      	beq.n	80013f4 <HAL_ADC_Init+0x2a4>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_ADC_Init+0x24e>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139a:	2b1c      	cmp	r3, #28
 800139c:	d904      	bls.n	80013a8 <HAL_ADC_Init+0x258>
 800139e:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80013a2:	4813      	ldr	r0, [pc, #76]	; (80013f0 <HAL_ADC_Init+0x2a0>)
 80013a4:	f7ff face 	bl	8000944 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d009      	beq.n	80013c6 <HAL_ADC_Init+0x276>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d004      	beq.n	80013c6 <HAL_ADC_Init+0x276>
 80013bc:	f240 11cd 	movw	r1, #461	; 0x1cd
 80013c0:	480b      	ldr	r0, [pc, #44]	; (80013f0 <HAL_ADC_Init+0x2a0>)
 80013c2:	f7ff fabf 	bl	8000944 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d011      	beq.n	80013f4 <HAL_ADC_Init+0x2a4>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_ADC_Init+0x290>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	2b08      	cmp	r3, #8
 80013de:	d909      	bls.n	80013f4 <HAL_ADC_Init+0x2a4>
 80013e0:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <HAL_ADC_Init+0x2a0>)
 80013e6:	f7ff faad 	bl	8000944 <assert_failed>
 80013ea:	e003      	b.n	80013f4 <HAL_ADC_Init+0x2a4>
 80013ec:	40012400 	.word	0x40012400
 80013f0:	08005f30 	.word	0x08005f30
    }
  }
      
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f8:	2b10      	cmp	r3, #16
 80013fa:	d017      	beq.n	800142c <HAL_ADC_Init+0x2dc>
  {
    assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001400:	2b00      	cmp	r3, #0
 8001402:	d013      	beq.n	800142c <HAL_ADC_Init+0x2dc>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001408:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800140c:	d00e      	beq.n	800142c <HAL_ADC_Init+0x2dc>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001412:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001416:	d009      	beq.n	800142c <HAL_ADC_Init+0x2dc>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001420:	d004      	beq.n	800142c <HAL_ADC_Init+0x2dc>
 8001422:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8001426:	4896      	ldr	r0, [pc, #600]	; (8001680 <HAL_ADC_Init+0x530>)
 8001428:	f7ff fa8c 	bl	8000944 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001430:	2b00      	cmp	r3, #0
 8001432:	d115      	bne.n	8001460 <HAL_ADC_Init+0x310>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	4b90      	ldr	r3, [pc, #576]	; (8001684 <HAL_ADC_Init+0x534>)
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	4a8f      	ldr	r2, [pc, #572]	; (8001684 <HAL_ADC_Init+0x534>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6213      	str	r3, [r2, #32]
 800144e:	4b8d      	ldr	r3, [pc, #564]	; (8001684 <HAL_ADC_Init+0x534>)
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7fe ffbe 	bl	80003dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001464:	f003 0310 	and.w	r3, r3, #16
 8001468:	2b00      	cmp	r3, #0
 800146a:	f040 80ff 	bne.w	800166c <HAL_ADC_Init+0x51c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001476:	f023 0302 	bic.w	r3, r3, #2
 800147a:	f043 0202 	orr.w	r2, r3, #2
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001482:	4b81      	ldr	r3, [pc, #516]	; (8001688 <HAL_ADC_Init+0x538>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	497e      	ldr	r1, [pc, #504]	; (8001688 <HAL_ADC_Init+0x538>)
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800149c:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014a4:	4619      	mov	r1, r3
 80014a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014aa:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	fa93 f3a3 	rbit	r3, r3
 80014b2:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	fab3 f383 	clz	r3, r3
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80014c0:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80014c6:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014ce:	4619      	mov	r1, r3
 80014d0:	2302      	movs	r3, #2
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d6:	fa93 f3a3 	rbit	r3, r3
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	fab3 f383 	clz	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80014e8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80014ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014ec:	4313      	orrs	r3, r2
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f4:	2b10      	cmp	r3, #16
 80014f6:	d007      	beq.n	8001508 <HAL_ADC_Init+0x3b8>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001500:	4313      	orrs	r3, r2
 8001502:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001504:	4313      	orrs	r3, r2
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001512:	2b40      	cmp	r3, #64	; 0x40
 8001514:	d04f      	beq.n	80015b6 <HAL_ADC_Init+0x466>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800151c:	4313      	orrs	r3, r2
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001528:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6912      	ldr	r2, [r2, #16]
 800152e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001532:	d003      	beq.n	800153c <HAL_ADC_Init+0x3ec>
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6912      	ldr	r2, [r2, #16]
 8001538:	2a01      	cmp	r2, #1
 800153a:	d102      	bne.n	8001542 <HAL_ADC_Init+0x3f2>
 800153c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001540:	e000      	b.n	8001544 <HAL_ADC_Init+0x3f4>
 8001542:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001544:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001548:	4313      	orrs	r3, r2
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001552:	2b01      	cmp	r3, #1
 8001554:	d125      	bne.n	80015a2 <HAL_ADC_Init+0x452>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800155c:	2b00      	cmp	r3, #0
 800155e:	d114      	bne.n	800158a <HAL_ADC_Init+0x43a>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001564:	3b01      	subs	r3, #1
 8001566:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800156a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	fa92 f2a2 	rbit	r2, r2
 8001572:	617a      	str	r2, [r7, #20]
  return result;
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	fab2 f282 	clz	r2, r2
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	4093      	lsls	r3, r2
 800157e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001584:	4313      	orrs	r3, r2
 8001586:	633b      	str	r3, [r7, #48]	; 0x30
 8001588:	e00b      	b.n	80015a2 <HAL_ADC_Init+0x452>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158e:	f043 0220 	orr.w	r2, r3, #32
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800159a:	f043 0201 	orr.w	r2, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	4b38      	ldr	r3, [pc, #224]	; (800168c <HAL_ADC_Init+0x53c>)
 80015aa:	4013      	ands	r3, r2
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015b2:	430b      	orrs	r3, r1
 80015b4:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	4b34      	ldr	r3, [pc, #208]	; (8001690 <HAL_ADC_Init+0x540>)
 80015be:	4013      	ands	r3, r2
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80015c6:	430b      	orrs	r3, r1
 80015c8:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015d2:	d003      	beq.n	80015dc <HAL_ADC_Init+0x48c>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d119      	bne.n	8001610 <HAL_ADC_Init+0x4c0>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ea:	3b01      	subs	r3, #1
 80015ec:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80015f0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	fa92 f2a2 	rbit	r2, r2
 80015f8:	60fa      	str	r2, [r7, #12]
  return result;
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	fab2 f282 	clz	r2, r2
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	fa03 f202 	lsl.w	r2, r3, r2
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	631a      	str	r2, [r3, #48]	; 0x30
 800160e:	e007      	b.n	8001620 <HAL_ADC_Init+0x4d0>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 800161e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <HAL_ADC_Init+0x544>)
 8001628:	4013      	ands	r3, r2
 800162a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800162c:	429a      	cmp	r2, r3
 800162e:	d10b      	bne.n	8001648 <HAL_ADC_Init+0x4f8>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	f023 0303 	bic.w	r3, r3, #3
 800163e:	f043 0201 	orr.w	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	64da      	str	r2, [r3, #76]	; 0x4c
 8001646:	e014      	b.n	8001672 <HAL_ADC_Init+0x522>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164c:	f023 0312 	bic.w	r3, r3, #18
 8001650:	f043 0210 	orr.w	r2, r3, #16
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800165c:	f043 0201 	orr.w	r2, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800166a:	e002      	b.n	8001672 <HAL_ADC_Init+0x522>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001672:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001676:	4618      	mov	r0, r3
 8001678:	3738      	adds	r7, #56	; 0x38
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	08005f30 	.word	0x08005f30
 8001684:	40023800 	.word	0x40023800
 8001688:	40012700 	.word	0x40012700
 800168c:	fcfc16ff 	.word	0xfcfc16ff
 8001690:	c0fff189 	.word	0xc0fff189
 8001694:	bf80fffe 	.word	0xbf80fffe

08001698 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a94      	ldr	r2, [pc, #592]	; (8001900 <HAL_ADC_ConfigChannel+0x268>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d004      	beq.n	80016be <HAL_ADC_ConfigChannel+0x26>
 80016b4:	f240 7191 	movw	r1, #1937	; 0x791
 80016b8:	4892      	ldr	r0, [pc, #584]	; (8001904 <HAL_ADC_ConfigChannel+0x26c>)
 80016ba:	f7ff f943 	bl	8000944 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 8081 	beq.w	80017ca <HAL_ADC_ConfigChannel+0x132>
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d07c      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d078      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d074      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d070      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b05      	cmp	r3, #5
 80016ee:	d06c      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b06      	cmp	r3, #6
 80016f6:	d068      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b07      	cmp	r3, #7
 80016fe:	d064      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b08      	cmp	r3, #8
 8001706:	d060      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b09      	cmp	r3, #9
 800170e:	d05c      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b0a      	cmp	r3, #10
 8001716:	d058      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b0b      	cmp	r3, #11
 800171e:	d054      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b0c      	cmp	r3, #12
 8001726:	d050      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b0d      	cmp	r3, #13
 800172e:	d04c      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b0e      	cmp	r3, #14
 8001736:	d048      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b0f      	cmp	r3, #15
 800173e:	d044      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b10      	cmp	r3, #16
 8001746:	d040      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b11      	cmp	r3, #17
 800174e:	d03c      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b12      	cmp	r3, #18
 8001756:	d038      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b13      	cmp	r3, #19
 800175e:	d034      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b14      	cmp	r3, #20
 8001766:	d030      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b15      	cmp	r3, #21
 800176e:	d02c      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b16      	cmp	r3, #22
 8001776:	d028      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b17      	cmp	r3, #23
 800177e:	d024      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b18      	cmp	r3, #24
 8001786:	d020      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b19      	cmp	r3, #25
 800178e:	d01c      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b1a      	cmp	r3, #26
 8001796:	d018      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b1b      	cmp	r3, #27
 800179e:	d014      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b1c      	cmp	r3, #28
 80017a6:	d010      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b1d      	cmp	r3, #29
 80017ae:	d00c      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b1e      	cmp	r3, #30
 80017b6:	d008      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b1f      	cmp	r3, #31
 80017be:	d004      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x132>
 80017c0:	f240 7192 	movw	r1, #1938	; 0x792
 80017c4:	484f      	ldr	r0, [pc, #316]	; (8001904 <HAL_ADC_ConfigChannel+0x26c>)
 80017c6:	f7ff f8bd 	bl	8000944 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d070      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d06c      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d068      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d064      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	d060      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d05c      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b07      	cmp	r3, #7
 8001800:	d058      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b08      	cmp	r3, #8
 8001808:	d054      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b09      	cmp	r3, #9
 8001810:	d050      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b0a      	cmp	r3, #10
 8001818:	d04c      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b0b      	cmp	r3, #11
 8001820:	d048      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b0c      	cmp	r3, #12
 8001828:	d044      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b0d      	cmp	r3, #13
 8001830:	d040      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b0e      	cmp	r3, #14
 8001838:	d03c      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b0f      	cmp	r3, #15
 8001840:	d038      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b10      	cmp	r3, #16
 8001848:	d034      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b11      	cmp	r3, #17
 8001850:	d030      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b12      	cmp	r3, #18
 8001858:	d02c      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b13      	cmp	r3, #19
 8001860:	d028      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b14      	cmp	r3, #20
 8001868:	d024      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b15      	cmp	r3, #21
 8001870:	d020      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b16      	cmp	r3, #22
 8001878:	d01c      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b17      	cmp	r3, #23
 8001880:	d018      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b18      	cmp	r3, #24
 8001888:	d014      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b19      	cmp	r3, #25
 8001890:	d010      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b1a      	cmp	r3, #26
 8001898:	d00c      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b1b      	cmp	r3, #27
 80018a0:	d008      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b1c      	cmp	r3, #28
 80018a8:	d004      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x21c>
 80018aa:	f240 7193 	movw	r1, #1939	; 0x793
 80018ae:	4815      	ldr	r0, [pc, #84]	; (8001904 <HAL_ADC_ConfigChannel+0x26c>)
 80018b0:	f7ff f848 	bl	8000944 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d025      	beq.n	8001908 <HAL_ADC_ConfigChannel+0x270>
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d021      	beq.n	8001908 <HAL_ADC_ConfigChannel+0x270>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d01d      	beq.n	8001908 <HAL_ADC_ConfigChannel+0x270>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b03      	cmp	r3, #3
 80018d2:	d019      	beq.n	8001908 <HAL_ADC_ConfigChannel+0x270>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b04      	cmp	r3, #4
 80018da:	d015      	beq.n	8001908 <HAL_ADC_ConfigChannel+0x270>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	d011      	beq.n	8001908 <HAL_ADC_ConfigChannel+0x270>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b06      	cmp	r3, #6
 80018ea:	d00d      	beq.n	8001908 <HAL_ADC_ConfigChannel+0x270>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b07      	cmp	r3, #7
 80018f2:	d009      	beq.n	8001908 <HAL_ADC_ConfigChannel+0x270>
 80018f4:	f240 7194 	movw	r1, #1940	; 0x794
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <HAL_ADC_ConfigChannel+0x26c>)
 80018fa:	f7ff f823 	bl	8000944 <assert_failed>
 80018fe:	e003      	b.n	8001908 <HAL_ADC_ConfigChannel+0x270>
 8001900:	40012400 	.word	0x40012400
 8001904:	08005f30 	.word	0x08005f30
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800190e:	2b01      	cmp	r3, #1
 8001910:	d101      	bne.n	8001916 <HAL_ADC_ConfigChannel+0x27e>
 8001912:	2302      	movs	r3, #2
 8001914:	e14f      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x51e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b06      	cmp	r3, #6
 8001924:	d81c      	bhi.n	8001960 <HAL_ADC_ConfigChannel+0x2c8>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	3b05      	subs	r3, #5
 8001938:	221f      	movs	r2, #31
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	4019      	ands	r1, r3
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	3b05      	subs	r3, #5
 8001952:	fa00 f203 	lsl.w	r2, r0, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	641a      	str	r2, [r3, #64]	; 0x40
 800195e:	e07e      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b0c      	cmp	r3, #12
 8001966:	d81c      	bhi.n	80019a2 <HAL_ADC_ConfigChannel+0x30a>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	3b23      	subs	r3, #35	; 0x23
 800197a:	221f      	movs	r2, #31
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	4019      	ands	r1, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	6818      	ldr	r0, [r3, #0]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	3b23      	subs	r3, #35	; 0x23
 8001994:	fa00 f203 	lsl.w	r2, r0, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	63da      	str	r2, [r3, #60]	; 0x3c
 80019a0:	e05d      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b12      	cmp	r3, #18
 80019a8:	d81c      	bhi.n	80019e4 <HAL_ADC_ConfigChannel+0x34c>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	3b41      	subs	r3, #65	; 0x41
 80019bc:	221f      	movs	r2, #31
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	4019      	ands	r1, r3
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	6818      	ldr	r0, [r3, #0]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	3b41      	subs	r3, #65	; 0x41
 80019d6:	fa00 f203 	lsl.w	r2, r0, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	430a      	orrs	r2, r1
 80019e0:	639a      	str	r2, [r3, #56]	; 0x38
 80019e2:	e03c      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b18      	cmp	r3, #24
 80019ea:	d81c      	bhi.n	8001a26 <HAL_ADC_ConfigChannel+0x38e>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	3b5f      	subs	r3, #95	; 0x5f
 80019fe:	221f      	movs	r2, #31
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	4019      	ands	r1, r3
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	3b5f      	subs	r3, #95	; 0x5f
 8001a18:	fa00 f203 	lsl.w	r2, r0, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	635a      	str	r2, [r3, #52]	; 0x34
 8001a24:	e01b      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	3b7d      	subs	r3, #125	; 0x7d
 8001a38:	221f      	movs	r2, #31
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	4019      	ands	r1, r3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	6818      	ldr	r0, [r3, #0]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	3b7d      	subs	r3, #125	; 0x7d
 8001a52:	fa00 f203 	lsl.w	r2, r0, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b09      	cmp	r3, #9
 8001a64:	d81a      	bhi.n	8001a9c <HAL_ADC_ConfigChannel+0x404>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6959      	ldr	r1, [r3, #20]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4613      	mov	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	2207      	movs	r2, #7
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	4019      	ands	r1, r3
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	6898      	ldr	r0, [r3, #8]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	615a      	str	r2, [r3, #20]
 8001a9a:	e05d      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b13      	cmp	r3, #19
 8001aa2:	d81c      	bhi.n	8001ade <HAL_ADC_ConfigChannel+0x446>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6919      	ldr	r1, [r3, #16]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3b1e      	subs	r3, #30
 8001ab6:	2207      	movs	r2, #7
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	4019      	ands	r1, r3
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	6898      	ldr	r0, [r3, #8]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4413      	add	r3, r2
 8001ace:	3b1e      	subs	r3, #30
 8001ad0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	611a      	str	r2, [r3, #16]
 8001adc:	e03c      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2b1d      	cmp	r3, #29
 8001ae4:	d81c      	bhi.n	8001b20 <HAL_ADC_ConfigChannel+0x488>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68d9      	ldr	r1, [r3, #12]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4613      	mov	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	3b3c      	subs	r3, #60	; 0x3c
 8001af8:	2207      	movs	r2, #7
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	4019      	ands	r1, r3
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	6898      	ldr	r0, [r3, #8]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	3b3c      	subs	r3, #60	; 0x3c
 8001b12:	fa00 f203 	lsl.w	r2, r0, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	e01b      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	3b5a      	subs	r3, #90	; 0x5a
 8001b32:	2207      	movs	r2, #7
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	4019      	ands	r1, r3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	6898      	ldr	r0, [r3, #8]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4613      	mov	r3, r2
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4413      	add	r3, r2
 8001b4a:	3b5a      	subs	r3, #90	; 0x5a
 8001b4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b10      	cmp	r3, #16
 8001b5e:	d003      	beq.n	8001b68 <HAL_ADC_ConfigChannel+0x4d0>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b64:	2b11      	cmp	r3, #17
 8001b66:	d121      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x514>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <HAL_ADC_ConfigChannel+0x528>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d11b      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x514>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_ADC_ConfigChannel+0x528>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	4a11      	ldr	r2, [pc, #68]	; (8001bc0 <HAL_ADC_ConfigChannel+0x528>)
 8001b7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b7e:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b10      	cmp	r3, #16
 8001b86:	d111      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x514>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001b88:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <HAL_ADC_ConfigChannel+0x52c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0e      	ldr	r2, [pc, #56]	; (8001bc8 <HAL_ADC_ConfigChannel+0x530>)
 8001b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b92:	0c9a      	lsrs	r2, r3, #18
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001b9e:	e002      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x50e>
          {
            wait_loop_index--;
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f9      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x508>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40012700 	.word	0x40012700
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	431bde83 	.word	0x431bde83

08001bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <__NVIC_SetPriorityGrouping+0x44>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be8:	4013      	ands	r3, r2
 8001bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfe:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <__NVIC_SetPriorityGrouping+0x44>)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	60d3      	str	r3, [r2, #12]
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c18:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <__NVIC_GetPriorityGrouping+0x18>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	f003 0307 	and.w	r3, r3, #7
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	db0b      	blt.n	8001c5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	f003 021f 	and.w	r2, r3, #31
 8001c48:	4906      	ldr	r1, [pc, #24]	; (8001c64 <__NVIC_EnableIRQ+0x34>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	095b      	lsrs	r3, r3, #5
 8001c50:	2001      	movs	r0, #1
 8001c52:	fa00 f202 	lsl.w	r2, r0, r2
 8001c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	e000e100 	.word	0xe000e100

08001c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	6039      	str	r1, [r7, #0]
 8001c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	db0a      	blt.n	8001c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	490c      	ldr	r1, [pc, #48]	; (8001cb4 <__NVIC_SetPriority+0x4c>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	0112      	lsls	r2, r2, #4
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c90:	e00a      	b.n	8001ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4908      	ldr	r1, [pc, #32]	; (8001cb8 <__NVIC_SetPriority+0x50>)
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	3b04      	subs	r3, #4
 8001ca0:	0112      	lsls	r2, r2, #4
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	761a      	strb	r2, [r3, #24]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000e100 	.word	0xe000e100
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f1c3 0307 	rsb	r3, r3, #7
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	bf28      	it	cs
 8001cda:	2304      	movcs	r3, #4
 8001cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	2b06      	cmp	r3, #6
 8001ce4:	d902      	bls.n	8001cec <NVIC_EncodePriority+0x30>
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3b03      	subs	r3, #3
 8001cea:	e000      	b.n	8001cee <NVIC_EncodePriority+0x32>
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	401a      	ands	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d04:	f04f 31ff 	mov.w	r1, #4294967295
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	43d9      	mvns	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	4313      	orrs	r3, r2
         );
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3724      	adds	r7, #36	; 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b07      	cmp	r3, #7
 8001d2c:	d00f      	beq.n	8001d4e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b06      	cmp	r3, #6
 8001d32:	d00c      	beq.n	8001d4e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b05      	cmp	r3, #5
 8001d38:	d009      	beq.n	8001d4e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d006      	beq.n	8001d4e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	d003      	beq.n	8001d4e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d46:	21ac      	movs	r1, #172	; 0xac
 8001d48:	4804      	ldr	r0, [pc, #16]	; (8001d5c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001d4a:	f7fe fdfb 	bl	8000944 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff ff3c 	bl	8001bcc <__NVIC_SetPriorityGrouping>
}
 8001d54:	bf00      	nop
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	08005f68 	.word	0x08005f68

08001d60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
 8001d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b0f      	cmp	r3, #15
 8001d76:	d903      	bls.n	8001d80 <HAL_NVIC_SetPriority+0x20>
 8001d78:	21c4      	movs	r1, #196	; 0xc4
 8001d7a:	480e      	ldr	r0, [pc, #56]	; (8001db4 <HAL_NVIC_SetPriority+0x54>)
 8001d7c:	f7fe fde2 	bl	8000944 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b0f      	cmp	r3, #15
 8001d84:	d903      	bls.n	8001d8e <HAL_NVIC_SetPriority+0x2e>
 8001d86:	21c5      	movs	r1, #197	; 0xc5
 8001d88:	480a      	ldr	r0, [pc, #40]	; (8001db4 <HAL_NVIC_SetPriority+0x54>)
 8001d8a:	f7fe fddb 	bl	8000944 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d8e:	f7ff ff41 	bl	8001c14 <__NVIC_GetPriorityGrouping>
 8001d92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	68b9      	ldr	r1, [r7, #8]
 8001d98:	6978      	ldr	r0, [r7, #20]
 8001d9a:	f7ff ff8f 	bl	8001cbc <NVIC_EncodePriority>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da4:	4611      	mov	r1, r2
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff ff5e 	bl	8001c68 <__NVIC_SetPriority>
}
 8001dac:	bf00      	nop
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	08005f68 	.word	0x08005f68

08001db8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	da03      	bge.n	8001dd2 <HAL_NVIC_EnableIRQ+0x1a>
 8001dca:	21d8      	movs	r1, #216	; 0xd8
 8001dcc:	4805      	ldr	r0, [pc, #20]	; (8001de4 <HAL_NVIC_EnableIRQ+0x2c>)
 8001dce:	f7fe fdb9 	bl	8000944 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff ff2a 	bl	8001c30 <__NVIC_EnableIRQ>
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	08005f68 	.word	0x08005f68

08001de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a3f      	ldr	r2, [pc, #252]	; (8001f00 <HAL_GPIO_Init+0x118>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d01f      	beq.n	8001e46 <HAL_GPIO_Init+0x5e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a3e      	ldr	r2, [pc, #248]	; (8001f04 <HAL_GPIO_Init+0x11c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d01b      	beq.n	8001e46 <HAL_GPIO_Init+0x5e>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a3d      	ldr	r2, [pc, #244]	; (8001f08 <HAL_GPIO_Init+0x120>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d017      	beq.n	8001e46 <HAL_GPIO_Init+0x5e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a3c      	ldr	r2, [pc, #240]	; (8001f0c <HAL_GPIO_Init+0x124>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d013      	beq.n	8001e46 <HAL_GPIO_Init+0x5e>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a3b      	ldr	r2, [pc, #236]	; (8001f10 <HAL_GPIO_Init+0x128>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00f      	beq.n	8001e46 <HAL_GPIO_Init+0x5e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a3a      	ldr	r2, [pc, #232]	; (8001f14 <HAL_GPIO_Init+0x12c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d00b      	beq.n	8001e46 <HAL_GPIO_Init+0x5e>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a39      	ldr	r2, [pc, #228]	; (8001f18 <HAL_GPIO_Init+0x130>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d007      	beq.n	8001e46 <HAL_GPIO_Init+0x5e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a38      	ldr	r2, [pc, #224]	; (8001f1c <HAL_GPIO_Init+0x134>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x5e>
 8001e3e:	21b9      	movs	r1, #185	; 0xb9
 8001e40:	4837      	ldr	r0, [pc, #220]	; (8001f20 <HAL_GPIO_Init+0x138>)
 8001e42:	f7fe fd7f 	bl	8000944 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <HAL_GPIO_Init+0x74>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	0c1b      	lsrs	r3, r3, #16
 8001e56:	041b      	lsls	r3, r3, #16
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x7c>
 8001e5c:	21ba      	movs	r1, #186	; 0xba
 8001e5e:	4830      	ldr	r0, [pc, #192]	; (8001f20 <HAL_GPIO_Init+0x138>)
 8001e60:	f7fe fd70 	bl	8000944 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d035      	beq.n	8001ed8 <HAL_GPIO_Init+0xf0>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d031      	beq.n	8001ed8 <HAL_GPIO_Init+0xf0>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b11      	cmp	r3, #17
 8001e7a:	d02d      	beq.n	8001ed8 <HAL_GPIO_Init+0xf0>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d029      	beq.n	8001ed8 <HAL_GPIO_Init+0xf0>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b12      	cmp	r3, #18
 8001e8a:	d025      	beq.n	8001ed8 <HAL_GPIO_Init+0xf0>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	4a24      	ldr	r2, [pc, #144]	; (8001f24 <HAL_GPIO_Init+0x13c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d020      	beq.n	8001ed8 <HAL_GPIO_Init+0xf0>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	4a23      	ldr	r2, [pc, #140]	; (8001f28 <HAL_GPIO_Init+0x140>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d01b      	beq.n	8001ed8 <HAL_GPIO_Init+0xf0>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	4a21      	ldr	r2, [pc, #132]	; (8001f2c <HAL_GPIO_Init+0x144>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d016      	beq.n	8001ed8 <HAL_GPIO_Init+0xf0>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	4a20      	ldr	r2, [pc, #128]	; (8001f30 <HAL_GPIO_Init+0x148>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d011      	beq.n	8001ed8 <HAL_GPIO_Init+0xf0>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	4a1e      	ldr	r2, [pc, #120]	; (8001f34 <HAL_GPIO_Init+0x14c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d00c      	beq.n	8001ed8 <HAL_GPIO_Init+0xf0>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	4a1d      	ldr	r2, [pc, #116]	; (8001f38 <HAL_GPIO_Init+0x150>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d007      	beq.n	8001ed8 <HAL_GPIO_Init+0xf0>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b03      	cmp	r3, #3
 8001ece:	d003      	beq.n	8001ed8 <HAL_GPIO_Init+0xf0>
 8001ed0:	21bb      	movs	r1, #187	; 0xbb
 8001ed2:	4813      	ldr	r0, [pc, #76]	; (8001f20 <HAL_GPIO_Init+0x138>)
 8001ed4:	f7fe fd36 	bl	8000944 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 81e4 	beq.w	80022aa <HAL_GPIO_Init+0x4c2>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	f000 81df 	beq.w	80022aa <HAL_GPIO_Init+0x4c2>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	f000 81da 	beq.w	80022aa <HAL_GPIO_Init+0x4c2>
 8001ef6:	21bc      	movs	r1, #188	; 0xbc
 8001ef8:	4809      	ldr	r0, [pc, #36]	; (8001f20 <HAL_GPIO_Init+0x138>)
 8001efa:	f7fe fd23 	bl	8000944 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001efe:	e1d4      	b.n	80022aa <HAL_GPIO_Init+0x4c2>
 8001f00:	40020000 	.word	0x40020000
 8001f04:	40020400 	.word	0x40020400
 8001f08:	40020800 	.word	0x40020800
 8001f0c:	40020c00 	.word	0x40020c00
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40021800 	.word	0x40021800
 8001f18:	40021c00 	.word	0x40021c00
 8001f1c:	40021400 	.word	0x40021400
 8001f20:	08005fa4 	.word	0x08005fa4
 8001f24:	10110000 	.word	0x10110000
 8001f28:	10210000 	.word	0x10210000
 8001f2c:	10310000 	.word	0x10310000
 8001f30:	10120000 	.word	0x10120000
 8001f34:	10220000 	.word	0x10220000
 8001f38:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	2101      	movs	r1, #1
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	fa01 f303 	lsl.w	r3, r1, r3
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 81a8 	beq.w	80022a4 <HAL_GPIO_Init+0x4bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d003      	beq.n	8001f64 <HAL_GPIO_Init+0x17c>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b12      	cmp	r3, #18
 8001f62:	d14f      	bne.n	8002004 <HAL_GPIO_Init+0x21c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a92      	ldr	r2, [pc, #584]	; (80021b0 <HAL_GPIO_Init+0x3c8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d01f      	beq.n	8001fac <HAL_GPIO_Init+0x1c4>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a91      	ldr	r2, [pc, #580]	; (80021b4 <HAL_GPIO_Init+0x3cc>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d01b      	beq.n	8001fac <HAL_GPIO_Init+0x1c4>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a90      	ldr	r2, [pc, #576]	; (80021b8 <HAL_GPIO_Init+0x3d0>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d017      	beq.n	8001fac <HAL_GPIO_Init+0x1c4>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a8f      	ldr	r2, [pc, #572]	; (80021bc <HAL_GPIO_Init+0x3d4>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d013      	beq.n	8001fac <HAL_GPIO_Init+0x1c4>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a8e      	ldr	r2, [pc, #568]	; (80021c0 <HAL_GPIO_Init+0x3d8>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d00f      	beq.n	8001fac <HAL_GPIO_Init+0x1c4>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a8d      	ldr	r2, [pc, #564]	; (80021c4 <HAL_GPIO_Init+0x3dc>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d00b      	beq.n	8001fac <HAL_GPIO_Init+0x1c4>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a8c      	ldr	r2, [pc, #560]	; (80021c8 <HAL_GPIO_Init+0x3e0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d007      	beq.n	8001fac <HAL_GPIO_Init+0x1c4>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a8b      	ldr	r2, [pc, #556]	; (80021cc <HAL_GPIO_Init+0x3e4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x1c4>
 8001fa4:	21cb      	movs	r1, #203	; 0xcb
 8001fa6:	488a      	ldr	r0, [pc, #552]	; (80021d0 <HAL_GPIO_Init+0x3e8>)
 8001fa8:	f7fe fccc 	bl	8000944 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	2b0f      	cmp	r3, #15
 8001fb2:	d903      	bls.n	8001fbc <HAL_GPIO_Init+0x1d4>
 8001fb4:	21cc      	movs	r1, #204	; 0xcc
 8001fb6:	4886      	ldr	r0, [pc, #536]	; (80021d0 <HAL_GPIO_Init+0x3e8>)
 8001fb8:	f7fe fcc4 	bl	8000944 <assert_failed>
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	08da      	lsrs	r2, r3, #3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3208      	adds	r2, #8
 8001fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	220f      	movs	r2, #15
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	08da      	lsrs	r2, r3, #3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3208      	adds	r2, #8
 8001ffe:	6939      	ldr	r1, [r7, #16]
 8002000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	2203      	movs	r2, #3
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 0203 	and.w	r2, r3, #3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d00b      	beq.n	8002058 <HAL_GPIO_Init+0x270>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b02      	cmp	r3, #2
 8002046:	d007      	beq.n	8002058 <HAL_GPIO_Init+0x270>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800204c:	2b11      	cmp	r3, #17
 800204e:	d003      	beq.n	8002058 <HAL_GPIO_Init+0x270>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b12      	cmp	r3, #18
 8002056:	d144      	bne.n	80020e2 <HAL_GPIO_Init+0x2fa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00f      	beq.n	8002080 <HAL_GPIO_Init+0x298>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d00b      	beq.n	8002080 <HAL_GPIO_Init+0x298>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d007      	beq.n	8002080 <HAL_GPIO_Init+0x298>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	2b03      	cmp	r3, #3
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_Init+0x298>
 8002078:	21e1      	movs	r1, #225	; 0xe1
 800207a:	4855      	ldr	r0, [pc, #340]	; (80021d0 <HAL_GPIO_Init+0x3e8>)
 800207c:	f7fe fc62 	bl	8000944 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4013      	ands	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80020b6:	2201      	movs	r2, #1
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4013      	ands	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	091b      	lsrs	r3, r3, #4
 80020cc:	f003 0201 	and.w	r2, r3, #1
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	2203      	movs	r2, #3
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 80c2 	beq.w	80022a4 <HAL_GPIO_Init+0x4bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002120:	4b2c      	ldr	r3, [pc, #176]	; (80021d4 <HAL_GPIO_Init+0x3ec>)
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	4a2b      	ldr	r2, [pc, #172]	; (80021d4 <HAL_GPIO_Init+0x3ec>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	6213      	str	r3, [r2, #32]
 800212c:	4b29      	ldr	r3, [pc, #164]	; (80021d4 <HAL_GPIO_Init+0x3ec>)
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8002138:	4a27      	ldr	r2, [pc, #156]	; (80021d8 <HAL_GPIO_Init+0x3f0>)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	089b      	lsrs	r3, r3, #2
 800213e:	3302      	adds	r3, #2
 8002140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002144:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	220f      	movs	r2, #15
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a14      	ldr	r2, [pc, #80]	; (80021b0 <HAL_GPIO_Init+0x3c8>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d03b      	beq.n	80021dc <HAL_GPIO_Init+0x3f4>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a13      	ldr	r2, [pc, #76]	; (80021b4 <HAL_GPIO_Init+0x3cc>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d01f      	beq.n	80021ac <HAL_GPIO_Init+0x3c4>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a12      	ldr	r2, [pc, #72]	; (80021b8 <HAL_GPIO_Init+0x3d0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d019      	beq.n	80021a8 <HAL_GPIO_Init+0x3c0>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a11      	ldr	r2, [pc, #68]	; (80021bc <HAL_GPIO_Init+0x3d4>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d013      	beq.n	80021a4 <HAL_GPIO_Init+0x3bc>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a10      	ldr	r2, [pc, #64]	; (80021c0 <HAL_GPIO_Init+0x3d8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d00d      	beq.n	80021a0 <HAL_GPIO_Init+0x3b8>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a11      	ldr	r2, [pc, #68]	; (80021cc <HAL_GPIO_Init+0x3e4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d007      	beq.n	800219c <HAL_GPIO_Init+0x3b4>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a0d      	ldr	r2, [pc, #52]	; (80021c4 <HAL_GPIO_Init+0x3dc>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d101      	bne.n	8002198 <HAL_GPIO_Init+0x3b0>
 8002194:	2306      	movs	r3, #6
 8002196:	e022      	b.n	80021de <HAL_GPIO_Init+0x3f6>
 8002198:	2307      	movs	r3, #7
 800219a:	e020      	b.n	80021de <HAL_GPIO_Init+0x3f6>
 800219c:	2305      	movs	r3, #5
 800219e:	e01e      	b.n	80021de <HAL_GPIO_Init+0x3f6>
 80021a0:	2304      	movs	r3, #4
 80021a2:	e01c      	b.n	80021de <HAL_GPIO_Init+0x3f6>
 80021a4:	2303      	movs	r3, #3
 80021a6:	e01a      	b.n	80021de <HAL_GPIO_Init+0x3f6>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e018      	b.n	80021de <HAL_GPIO_Init+0x3f6>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e016      	b.n	80021de <HAL_GPIO_Init+0x3f6>
 80021b0:	40020000 	.word	0x40020000
 80021b4:	40020400 	.word	0x40020400
 80021b8:	40020800 	.word	0x40020800
 80021bc:	40020c00 	.word	0x40020c00
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40021800 	.word	0x40021800
 80021c8:	40021c00 	.word	0x40021c00
 80021cc:	40021400 	.word	0x40021400
 80021d0:	08005fa4 	.word	0x08005fa4
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40010000 	.word	0x40010000
 80021dc:	2300      	movs	r3, #0
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	f002 0203 	and.w	r2, r2, #3
 80021e4:	0092      	lsls	r2, r2, #2
 80021e6:	4093      	lsls	r3, r2
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021ee:	4935      	ldr	r1, [pc, #212]	; (80022c4 <HAL_GPIO_Init+0x4dc>)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	089b      	lsrs	r3, r3, #2
 80021f4:	3302      	adds	r3, #2
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021fc:	4b32      	ldr	r3, [pc, #200]	; (80022c8 <HAL_GPIO_Init+0x4e0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	43db      	mvns	r3, r3
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x438>
        {
          SET_BIT(temp, iocurrent); 
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002220:	4a29      	ldr	r2, [pc, #164]	; (80022c8 <HAL_GPIO_Init+0x4e0>)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002226:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <HAL_GPIO_Init+0x4e0>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	43db      	mvns	r3, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4013      	ands	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x462>
        {
          SET_BIT(temp, iocurrent); 
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800224a:	4a1f      	ldr	r2, [pc, #124]	; (80022c8 <HAL_GPIO_Init+0x4e0>)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <HAL_GPIO_Init+0x4e0>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	43db      	mvns	r3, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4013      	ands	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x48c>
        {
          SET_BIT(temp, iocurrent); 
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002274:	4a14      	ldr	r2, [pc, #80]	; (80022c8 <HAL_GPIO_Init+0x4e0>)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800227a:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <HAL_GPIO_Init+0x4e0>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	43db      	mvns	r3, r3
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4013      	ands	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0x4b6>
        {
          SET_BIT(temp, iocurrent); 
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800229e:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <HAL_GPIO_Init+0x4e0>)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	3301      	adds	r3, #1
 80022a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	fa22 f303 	lsr.w	r3, r2, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f47f ae41 	bne.w	8001f3c <HAL_GPIO_Init+0x154>
  } 
}
 80022ba:	bf00      	nop
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40010000 	.word	0x40010000
 80022c8:	40010400 	.word	0x40010400

080022cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	807b      	strh	r3, [r7, #2]
 80022d8:	4613      	mov	r3, r2
 80022da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80022dc:	887b      	ldrh	r3, [r7, #2]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d004      	beq.n	80022ec <HAL_GPIO_WritePin+0x20>
 80022e2:	887b      	ldrh	r3, [r7, #2]
 80022e4:	0c1b      	lsrs	r3, r3, #16
 80022e6:	041b      	lsls	r3, r3, #16
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d004      	beq.n	80022f6 <HAL_GPIO_WritePin+0x2a>
 80022ec:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80022f0:	480e      	ldr	r0, [pc, #56]	; (800232c <HAL_GPIO_WritePin+0x60>)
 80022f2:	f7fe fb27 	bl	8000944 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80022f6:	787b      	ldrb	r3, [r7, #1]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d007      	beq.n	800230c <HAL_GPIO_WritePin+0x40>
 80022fc:	787b      	ldrb	r3, [r7, #1]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d004      	beq.n	800230c <HAL_GPIO_WritePin+0x40>
 8002302:	f240 11a5 	movw	r1, #421	; 0x1a5
 8002306:	4809      	ldr	r0, [pc, #36]	; (800232c <HAL_GPIO_WritePin+0x60>)
 8002308:	f7fe fb1c 	bl	8000944 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800230c:	787b      	ldrb	r3, [r7, #1]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002312:	887a      	ldrh	r2, [r7, #2]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002318:	e003      	b.n	8002322 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800231a:	887b      	ldrh	r3, [r7, #2]
 800231c:	041a      	lsls	r2, r3, #16
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	619a      	str	r2, [r3, #24]
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	08005fa4 	.word	0x08005fa4

08002330 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	4013      	ands	r3, r2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d006      	beq.n	8002354 <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002346:	4a05      	ldr	r2, [pc, #20]	; (800235c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	4618      	mov	r0, r3
 8002350:	f7fd ff9a 	bl	8000288 <HAL_GPIO_EXTI_Callback>
  }
}
 8002354:	bf00      	nop
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40010400 	.word	0x40010400

08002360 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e19b      	b.n	80026aa <HAL_I2C_Init+0x34a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a98      	ldr	r2, [pc, #608]	; (80025d8 <HAL_I2C_Init+0x278>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d009      	beq.n	8002390 <HAL_I2C_Init+0x30>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a96      	ldr	r2, [pc, #600]	; (80025dc <HAL_I2C_Init+0x27c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d004      	beq.n	8002390 <HAL_I2C_Init+0x30>
 8002386:	f240 11bb 	movw	r1, #443	; 0x1bb
 800238a:	4895      	ldr	r0, [pc, #596]	; (80025e0 <HAL_I2C_Init+0x280>)
 800238c:	f7fe fada 	bl	8000944 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d004      	beq.n	80023a2 <HAL_I2C_Init+0x42>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	4a91      	ldr	r2, [pc, #580]	; (80025e4 <HAL_I2C_Init+0x284>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d904      	bls.n	80023ac <HAL_I2C_Init+0x4c>
 80023a2:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80023a6:	488e      	ldr	r0, [pc, #568]	; (80025e0 <HAL_I2C_Init+0x280>)
 80023a8:	f7fe facc 	bl	8000944 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d009      	beq.n	80023c8 <HAL_I2C_Init+0x68>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023bc:	d004      	beq.n	80023c8 <HAL_I2C_Init+0x68>
 80023be:	f240 11bd 	movw	r1, #445	; 0x1bd
 80023c2:	4887      	ldr	r0, [pc, #540]	; (80025e0 <HAL_I2C_Init+0x280>)
 80023c4:	f7fe fabe 	bl	8000944 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023d0:	f023 0303 	bic.w	r3, r3, #3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d004      	beq.n	80023e2 <HAL_I2C_Init+0x82>
 80023d8:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80023dc:	4880      	ldr	r0, [pc, #512]	; (80025e0 <HAL_I2C_Init+0x280>)
 80023de:	f7fe fab1 	bl	8000944 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023ea:	d009      	beq.n	8002400 <HAL_I2C_Init+0xa0>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80023f4:	d004      	beq.n	8002400 <HAL_I2C_Init+0xa0>
 80023f6:	f240 11bf 	movw	r1, #447	; 0x1bf
 80023fa:	4879      	ldr	r0, [pc, #484]	; (80025e0 <HAL_I2C_Init+0x280>)
 80023fc:	f7fe faa2 	bl	8000944 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_I2C_Init+0xba>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d004      	beq.n	800241a <HAL_I2C_Init+0xba>
 8002410:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002414:	4872      	ldr	r0, [pc, #456]	; (80025e0 <HAL_I2C_Init+0x280>)
 8002416:	f7fe fa95 	bl	8000944 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002422:	2b00      	cmp	r3, #0
 8002424:	d004      	beq.n	8002430 <HAL_I2C_Init+0xd0>
 8002426:	f240 11c1 	movw	r1, #449	; 0x1c1
 800242a:	486d      	ldr	r0, [pc, #436]	; (80025e0 <HAL_I2C_Init+0x280>)
 800242c:	f7fe fa8a 	bl	8000944 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d008      	beq.n	800244a <HAL_I2C_Init+0xea>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	2b40      	cmp	r3, #64	; 0x40
 800243e:	d004      	beq.n	800244a <HAL_I2C_Init+0xea>
 8002440:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002444:	4866      	ldr	r0, [pc, #408]	; (80025e0 <HAL_I2C_Init+0x280>)
 8002446:	f7fe fa7d 	bl	8000944 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d008      	beq.n	8002464 <HAL_I2C_Init+0x104>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	2b80      	cmp	r3, #128	; 0x80
 8002458:	d004      	beq.n	8002464 <HAL_I2C_Init+0x104>
 800245a:	f240 11c3 	movw	r1, #451	; 0x1c3
 800245e:	4860      	ldr	r0, [pc, #384]	; (80025e0 <HAL_I2C_Init+0x280>)
 8002460:	f7fe fa70 	bl	8000944 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d106      	bne.n	800247e <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7fe f95d 	bl	8000738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2224      	movs	r2, #36	; 0x24
 8002482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0201 	bic.w	r2, r2, #1
 8002494:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002496:	f000 ffab 	bl	80033f0 <HAL_RCC_GetPCLK1Freq>
 800249a:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4a51      	ldr	r2, [pc, #324]	; (80025e8 <HAL_I2C_Init+0x288>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d807      	bhi.n	80024b6 <HAL_I2C_Init+0x156>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4a50      	ldr	r2, [pc, #320]	; (80025ec <HAL_I2C_Init+0x28c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	bf94      	ite	ls
 80024ae:	2301      	movls	r3, #1
 80024b0:	2300      	movhi	r3, #0
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	e006      	b.n	80024c4 <HAL_I2C_Init+0x164>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4a4d      	ldr	r2, [pc, #308]	; (80025f0 <HAL_I2C_Init+0x290>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	bf94      	ite	ls
 80024be:	2301      	movls	r3, #1
 80024c0:	2300      	movhi	r3, #0
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <HAL_I2C_Init+0x16c>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0ee      	b.n	80026aa <HAL_I2C_Init+0x34a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4a49      	ldr	r2, [pc, #292]	; (80025f4 <HAL_I2C_Init+0x294>)
 80024d0:	fba2 2303 	umull	r2, r3, r2, r3
 80024d4:	0c9b      	lsrs	r3, r3, #18
 80024d6:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	4a3b      	ldr	r2, [pc, #236]	; (80025e8 <HAL_I2C_Init+0x288>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d802      	bhi.n	8002506 <HAL_I2C_Init+0x1a6>
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	3301      	adds	r3, #1
 8002504:	e009      	b.n	800251a <HAL_I2C_Init+0x1ba>
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800250c:	fb02 f303 	mul.w	r3, r2, r3
 8002510:	4a39      	ldr	r2, [pc, #228]	; (80025f8 <HAL_I2C_Init+0x298>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	099b      	lsrs	r3, r3, #6
 8002518:	3301      	adds	r3, #1
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	430b      	orrs	r3, r1
 8002520:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800252c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	492c      	ldr	r1, [pc, #176]	; (80025e8 <HAL_I2C_Init+0x288>)
 8002536:	428b      	cmp	r3, r1
 8002538:	d80d      	bhi.n	8002556 <HAL_I2C_Init+0x1f6>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1e59      	subs	r1, r3, #1
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	fbb1 f3f3 	udiv	r3, r1, r3
 8002548:	3301      	adds	r3, #1
 800254a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800254e:	2b04      	cmp	r3, #4
 8002550:	bf38      	it	cc
 8002552:	2304      	movcc	r3, #4
 8002554:	e062      	b.n	800261c <HAL_I2C_Init+0x2bc>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d111      	bne.n	8002582 <HAL_I2C_Init+0x222>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1e58      	subs	r0, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6859      	ldr	r1, [r3, #4]
 8002566:	460b      	mov	r3, r1
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	440b      	add	r3, r1
 800256c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002570:	3301      	adds	r3, #1
 8002572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002576:	2b00      	cmp	r3, #0
 8002578:	bf0c      	ite	eq
 800257a:	2301      	moveq	r3, #1
 800257c:	2300      	movne	r3, #0
 800257e:	b2db      	uxtb	r3, r3
 8002580:	e012      	b.n	80025a8 <HAL_I2C_Init+0x248>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1e58      	subs	r0, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6859      	ldr	r1, [r3, #4]
 800258a:	460b      	mov	r3, r1
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	0099      	lsls	r1, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	fbb0 f3f3 	udiv	r3, r0, r3
 8002598:	3301      	adds	r3, #1
 800259a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800259e:	2b00      	cmp	r3, #0
 80025a0:	bf0c      	ite	eq
 80025a2:	2301      	moveq	r3, #1
 80025a4:	2300      	movne	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_I2C_Init+0x250>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e035      	b.n	800261c <HAL_I2C_Init+0x2bc>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d121      	bne.n	80025fc <HAL_I2C_Init+0x29c>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1e58      	subs	r0, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	440b      	add	r3, r1
 80025c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ca:	3301      	adds	r3, #1
 80025cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025d4:	e022      	b.n	800261c <HAL_I2C_Init+0x2bc>
 80025d6:	bf00      	nop
 80025d8:	40005400 	.word	0x40005400
 80025dc:	40005800 	.word	0x40005800
 80025e0:	08005fe0 	.word	0x08005fe0
 80025e4:	00061a80 	.word	0x00061a80
 80025e8:	000186a0 	.word	0x000186a0
 80025ec:	001e847f 	.word	0x001e847f
 80025f0:	003d08ff 	.word	0x003d08ff
 80025f4:	431bde83 	.word	0x431bde83
 80025f8:	10624dd3 	.word	0x10624dd3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	1e58      	subs	r0, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6859      	ldr	r1, [r3, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	0099      	lsls	r1, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002612:	3301      	adds	r3, #1
 8002614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002618:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	6809      	ldr	r1, [r1, #0]
 8002620:	4313      	orrs	r3, r2
 8002622:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69da      	ldr	r2, [r3, #28]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800264a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6911      	ldr	r1, [r2, #16]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68d2      	ldr	r2, [r2, #12]
 8002656:	4311      	orrs	r1, r2
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	430b      	orrs	r3, r1
 800265e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2220      	movs	r2, #32
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop

080026b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d102      	bne.n	80026c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	f000 bc6c 	b.w	8002fa0 <HAL_RCC_OscConfig+0x8ec>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d022      	beq.n	8002716 <HAL_RCC_OscConfig+0x62>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d11c      	bne.n	8002716 <HAL_RCC_OscConfig+0x62>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d116      	bne.n	8002716 <HAL_RCC_OscConfig+0x62>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d110      	bne.n	8002716 <HAL_RCC_OscConfig+0x62>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10a      	bne.n	8002716 <HAL_RCC_OscConfig+0x62>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0310 	and.w	r3, r3, #16
 8002708:	2b00      	cmp	r3, #0
 800270a:	d104      	bne.n	8002716 <HAL_RCC_OscConfig+0x62>
 800270c:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8002710:	4897      	ldr	r0, [pc, #604]	; (8002970 <HAL_RCC_OscConfig+0x2bc>)
 8002712:	f7fe f917 	bl	8000944 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002716:	4b97      	ldr	r3, [pc, #604]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002720:	4b94      	ldr	r3, [pc, #592]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002728:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 808e 	beq.w	8002854 <HAL_RCC_OscConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00c      	beq.n	800275a <HAL_RCC_OscConfig+0xa6>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d008      	beq.n	800275a <HAL_RCC_OscConfig+0xa6>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b05      	cmp	r3, #5
 800274e:	d004      	beq.n	800275a <HAL_RCC_OscConfig+0xa6>
 8002750:	f240 1159 	movw	r1, #345	; 0x159
 8002754:	4886      	ldr	r0, [pc, #536]	; (8002970 <HAL_RCC_OscConfig+0x2bc>)
 8002756:	f7fe f8f5 	bl	8000944 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	2b08      	cmp	r3, #8
 800275e:	d006      	beq.n	800276e <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	2b0c      	cmp	r3, #12
 8002764:	d110      	bne.n	8002788 <HAL_RCC_OscConfig+0xd4>
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800276c:	d10c      	bne.n	8002788 <HAL_RCC_OscConfig+0xd4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276e:	4b81      	ldr	r3, [pc, #516]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d06b      	beq.n	8002852 <HAL_RCC_OscConfig+0x19e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d167      	bne.n	8002852 <HAL_RCC_OscConfig+0x19e>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	f000 bc0c 	b.w	8002fa0 <HAL_RCC_OscConfig+0x8ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d106      	bne.n	800279e <HAL_RCC_OscConfig+0xea>
 8002790:	4b78      	ldr	r3, [pc, #480]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a77      	ldr	r2, [pc, #476]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 8002796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	e02d      	b.n	80027fa <HAL_RCC_OscConfig+0x146>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x10c>
 80027a6:	4b73      	ldr	r3, [pc, #460]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a72      	ldr	r2, [pc, #456]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 80027ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b70      	ldr	r3, [pc, #448]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a6f      	ldr	r2, [pc, #444]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 80027b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e01c      	b.n	80027fa <HAL_RCC_OscConfig+0x146>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b05      	cmp	r3, #5
 80027c6:	d10c      	bne.n	80027e2 <HAL_RCC_OscConfig+0x12e>
 80027c8:	4b6a      	ldr	r3, [pc, #424]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a69      	ldr	r2, [pc, #420]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 80027ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	4b67      	ldr	r3, [pc, #412]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a66      	ldr	r2, [pc, #408]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 80027da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	e00b      	b.n	80027fa <HAL_RCC_OscConfig+0x146>
 80027e2:	4b64      	ldr	r3, [pc, #400]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a63      	ldr	r2, [pc, #396]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 80027e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	4b61      	ldr	r3, [pc, #388]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a60      	ldr	r2, [pc, #384]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 80027f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d013      	beq.n	800282a <HAL_RCC_OscConfig+0x176>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002802:	f7fe fc79 	bl	80010f8 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x168>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800280a:	f7fe fc75 	bl	80010f8 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b64      	cmp	r3, #100	; 0x64
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x168>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e3c1      	b.n	8002fa0 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800281c:	4b55      	ldr	r3, [pc, #340]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x156>
 8002828:	e014      	b.n	8002854 <HAL_RCC_OscConfig+0x1a0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282a:	f7fe fc65 	bl	80010f8 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x190>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002832:	f7fe fc61 	bl	80010f8 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b64      	cmp	r3, #100	; 0x64
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e3ad      	b.n	8002fa0 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002844:	4b4b      	ldr	r3, [pc, #300]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1f0      	bne.n	8002832 <HAL_RCC_OscConfig+0x17e>
 8002850:	e000      	b.n	8002854 <HAL_RCC_OscConfig+0x1a0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002852:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d070      	beq.n	8002942 <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_RCC_OscConfig+0x1c6>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d004      	beq.n	800287a <HAL_RCC_OscConfig+0x1c6>
 8002870:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002874:	483e      	ldr	r0, [pc, #248]	; (8002970 <HAL_RCC_OscConfig+0x2bc>)
 8002876:	f7fe f865 	bl	8000944 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b1f      	cmp	r3, #31
 8002880:	d904      	bls.n	800288c <HAL_RCC_OscConfig+0x1d8>
 8002882:	f240 118d 	movw	r1, #397	; 0x18d
 8002886:	483a      	ldr	r0, [pc, #232]	; (8002970 <HAL_RCC_OscConfig+0x2bc>)
 8002888:	f7fe f85c 	bl	8000944 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2b04      	cmp	r3, #4
 8002890:	d005      	beq.n	800289e <HAL_RCC_OscConfig+0x1ea>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	2b0c      	cmp	r3, #12
 8002896:	d119      	bne.n	80028cc <HAL_RCC_OscConfig+0x218>
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d116      	bne.n	80028cc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289e:	4b35      	ldr	r3, [pc, #212]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <HAL_RCC_OscConfig+0x202>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d001      	beq.n	80028b6 <HAL_RCC_OscConfig+0x202>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e374      	b.n	8002fa0 <HAL_RCC_OscConfig+0x8ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b6:	4b2f      	ldr	r3, [pc, #188]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	021b      	lsls	r3, r3, #8
 80028c4:	492b      	ldr	r1, [pc, #172]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ca:	e03a      	b.n	8002942 <HAL_RCC_OscConfig+0x28e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d020      	beq.n	8002916 <HAL_RCC_OscConfig+0x262>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d4:	4b28      	ldr	r3, [pc, #160]	; (8002978 <HAL_RCC_OscConfig+0x2c4>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028da:	f7fe fc0d 	bl	80010f8 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x240>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e2:	f7fe fc09 	bl	80010f8 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x240>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e355      	b.n	8002fa0 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028f4:	4b1f      	ldr	r3, [pc, #124]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x22e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002900:	4b1c      	ldr	r3, [pc, #112]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	021b      	lsls	r3, r3, #8
 800290e:	4919      	ldr	r1, [pc, #100]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
 8002914:	e015      	b.n	8002942 <HAL_RCC_OscConfig+0x28e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002916:	4b18      	ldr	r3, [pc, #96]	; (8002978 <HAL_RCC_OscConfig+0x2c4>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7fe fbec 	bl	80010f8 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x282>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002924:	f7fe fbe8 	bl	80010f8 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x282>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e334      	b.n	8002fa0 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002936:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0310 	and.w	r3, r3, #16
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 8129 	beq.w	8002ba2 <HAL_RCC_OscConfig+0x4ee>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	2b00      	cmp	r3, #0
 8002954:	f040 80a4 	bne.w	8002aa0 <HAL_RCC_OscConfig+0x3ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <HAL_RCC_OscConfig+0x2c0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00b      	beq.n	800297c <HAL_RCC_OscConfig+0x2c8>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d107      	bne.n	800297c <HAL_RCC_OscConfig+0x2c8>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e317      	b.n	8002fa0 <HAL_RCC_OscConfig+0x8ec>
 8002970:	08006018 	.word	0x08006018
 8002974:	40023800 	.word	0x40023800
 8002978:	42470000 	.word	0x42470000
      }
      /* Otherwise, just the calibration and MSI range change are allowed */
      else
      {
       /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	2bff      	cmp	r3, #255	; 0xff
 8002982:	d904      	bls.n	800298e <HAL_RCC_OscConfig+0x2da>
 8002984:	f240 11d7 	movw	r1, #471	; 0x1d7
 8002988:	48a5      	ldr	r0, [pc, #660]	; (8002c20 <HAL_RCC_OscConfig+0x56c>)
 800298a:	f7fd ffdb 	bl	8000944 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d022      	beq.n	80029dc <HAL_RCC_OscConfig+0x328>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800299e:	d01d      	beq.n	80029dc <HAL_RCC_OscConfig+0x328>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029a8:	d018      	beq.n	80029dc <HAL_RCC_OscConfig+0x328>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80029b2:	d013      	beq.n	80029dc <HAL_RCC_OscConfig+0x328>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029bc:	d00e      	beq.n	80029dc <HAL_RCC_OscConfig+0x328>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80029c6:	d009      	beq.n	80029dc <HAL_RCC_OscConfig+0x328>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80029d0:	d004      	beq.n	80029dc <HAL_RCC_OscConfig+0x328>
 80029d2:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80029d6:	4892      	ldr	r0, [pc, #584]	; (8002c20 <HAL_RCC_OscConfig+0x56c>)
 80029d8:	f7fd ffb4 	bl	8000944 <assert_failed>

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1a      	ldr	r2, [r3, #32]
 80029e0:	4b90      	ldr	r3, [pc, #576]	; (8002c24 <HAL_RCC_OscConfig+0x570>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d91d      	bls.n	8002a28 <HAL_RCC_OscConfig+0x374>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 fd67 	bl	80034c4 <RCC_SetFlashLatencyFromMSIRange>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e2cf      	b.n	8002fa0 <HAL_RCC_OscConfig+0x8ec>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a00:	4b88      	ldr	r3, [pc, #544]	; (8002c24 <HAL_RCC_OscConfig+0x570>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	4985      	ldr	r1, [pc, #532]	; (8002c24 <HAL_RCC_OscConfig+0x570>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a12:	4b84      	ldr	r3, [pc, #528]	; (8002c24 <HAL_RCC_OscConfig+0x570>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	061b      	lsls	r3, r3, #24
 8002a20:	4980      	ldr	r1, [pc, #512]	; (8002c24 <HAL_RCC_OscConfig+0x570>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	604b      	str	r3, [r1, #4]
 8002a26:	e01c      	b.n	8002a62 <HAL_RCC_OscConfig+0x3ae>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a28:	4b7e      	ldr	r3, [pc, #504]	; (8002c24 <HAL_RCC_OscConfig+0x570>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	497b      	ldr	r1, [pc, #492]	; (8002c24 <HAL_RCC_OscConfig+0x570>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a3a:	4b7a      	ldr	r3, [pc, #488]	; (8002c24 <HAL_RCC_OscConfig+0x570>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	061b      	lsls	r3, r3, #24
 8002a48:	4976      	ldr	r1, [pc, #472]	; (8002c24 <HAL_RCC_OscConfig+0x570>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 fd36 	bl	80034c4 <RCC_SetFlashLatencyFromMSIRange>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e29e      	b.n	8002fa0 <HAL_RCC_OscConfig+0x8ec>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	0b5b      	lsrs	r3, r3, #13
 8002a68:	3301      	adds	r3, #1
 8002a6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002a72:	4a6c      	ldr	r2, [pc, #432]	; (8002c24 <HAL_RCC_OscConfig+0x570>)
 8002a74:	6892      	ldr	r2, [r2, #8]
 8002a76:	0912      	lsrs	r2, r2, #4
 8002a78:	f002 020f 	and.w	r2, r2, #15
 8002a7c:	496a      	ldr	r1, [pc, #424]	; (8002c28 <HAL_RCC_OscConfig+0x574>)
 8002a7e:	5c8a      	ldrb	r2, [r1, r2]
 8002a80:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a82:	4a6a      	ldr	r2, [pc, #424]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002a84:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a86:	4b6a      	ldr	r3, [pc, #424]	; (8002c30 <HAL_RCC_OscConfig+0x57c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fd ff98 	bl	80009c0 <HAL_InitTick>
 8002a90:	4603      	mov	r3, r0
 8002a92:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 8083 	beq.w	8002ba2 <HAL_RCC_OscConfig+0x4ee>
        {
          return status;
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	e27f      	b.n	8002fa0 <HAL_RCC_OscConfig+0x8ec>
      }
    }
    else
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d008      	beq.n	8002aba <HAL_RCC_OscConfig+0x406>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d004      	beq.n	8002aba <HAL_RCC_OscConfig+0x406>
 8002ab0:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002ab4:	485a      	ldr	r0, [pc, #360]	; (8002c20 <HAL_RCC_OscConfig+0x56c>)
 8002ab6:	f7fd ff45 	bl	8000944 <assert_failed>

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d059      	beq.n	8002b76 <HAL_RCC_OscConfig+0x4c2>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ac2:	4b5c      	ldr	r3, [pc, #368]	; (8002c34 <HAL_RCC_OscConfig+0x580>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fb16 	bl	80010f8 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ad0:	f7fe fb12 	bl	80010f8 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e25e      	b.n	8002fa0 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ae2:	4b50      	ldr	r3, [pc, #320]	; (8002c24 <HAL_RCC_OscConfig+0x570>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f0      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x41c>
          }
        }
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	2bff      	cmp	r3, #255	; 0xff
 8002af4:	d904      	bls.n	8002b00 <HAL_RCC_OscConfig+0x44c>
 8002af6:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8002afa:	4849      	ldr	r0, [pc, #292]	; (8002c20 <HAL_RCC_OscConfig+0x56c>)
 8002afc:	f7fd ff22 	bl	8000944 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d022      	beq.n	8002b4e <HAL_RCC_OscConfig+0x49a>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b10:	d01d      	beq.n	8002b4e <HAL_RCC_OscConfig+0x49a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b1a:	d018      	beq.n	8002b4e <HAL_RCC_OscConfig+0x49a>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002b24:	d013      	beq.n	8002b4e <HAL_RCC_OscConfig+0x49a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b2e:	d00e      	beq.n	8002b4e <HAL_RCC_OscConfig+0x49a>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002b38:	d009      	beq.n	8002b4e <HAL_RCC_OscConfig+0x49a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002b42:	d004      	beq.n	8002b4e <HAL_RCC_OscConfig+0x49a>
 8002b44:	f240 211d 	movw	r1, #541	; 0x21d
 8002b48:	4835      	ldr	r0, [pc, #212]	; (8002c20 <HAL_RCC_OscConfig+0x56c>)
 8002b4a:	f7fd fefb 	bl	8000944 <assert_failed>

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b4e:	4b35      	ldr	r3, [pc, #212]	; (8002c24 <HAL_RCC_OscConfig+0x570>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	4932      	ldr	r1, [pc, #200]	; (8002c24 <HAL_RCC_OscConfig+0x570>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b60:	4b30      	ldr	r3, [pc, #192]	; (8002c24 <HAL_RCC_OscConfig+0x570>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	061b      	lsls	r3, r3, #24
 8002b6e:	492d      	ldr	r1, [pc, #180]	; (8002c24 <HAL_RCC_OscConfig+0x570>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	604b      	str	r3, [r1, #4]
 8002b74:	e015      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4ee>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b76:	4b2f      	ldr	r3, [pc, #188]	; (8002c34 <HAL_RCC_OscConfig+0x580>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7fe fabc 	bl	80010f8 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b84:	f7fe fab8 	bl	80010f8 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e204      	b.n	8002fa0 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b96:	4b23      	ldr	r3, [pc, #140]	; (8002c24 <HAL_RCC_OscConfig+0x570>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d04c      	beq.n	8002c48 <HAL_RCC_OscConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d008      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x514>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d004      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x514>
 8002bbe:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8002bc2:	4817      	ldr	r0, [pc, #92]	; (8002c20 <HAL_RCC_OscConfig+0x56c>)
 8002bc4:	f7fd febe 	bl	8000944 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d016      	beq.n	8002bfe <HAL_RCC_OscConfig+0x54a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bd0:	4b19      	ldr	r3, [pc, #100]	; (8002c38 <HAL_RCC_OscConfig+0x584>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd6:	f7fe fa8f 	bl	80010f8 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bde:	f7fe fa8b 	bl	80010f8 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e1d7      	b.n	8002fa0 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bf0:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <HAL_RCC_OscConfig+0x570>)
 8002bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0f0      	beq.n	8002bde <HAL_RCC_OscConfig+0x52a>
 8002bfc:	e024      	b.n	8002c48 <HAL_RCC_OscConfig+0x594>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bfe:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <HAL_RCC_OscConfig+0x584>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c04:	f7fe fa78 	bl	80010f8 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c0a:	e017      	b.n	8002c3c <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c0c:	f7fe fa74 	bl	80010f8 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d910      	bls.n	8002c3c <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e1c0      	b.n	8002fa0 <HAL_RCC_OscConfig+0x8ec>
 8002c1e:	bf00      	nop
 8002c20:	08006018 	.word	0x08006018
 8002c24:	40023800 	.word	0x40023800
 8002c28:	0800610c 	.word	0x0800610c
 8002c2c:	20000000 	.word	0x20000000
 8002c30:	20000004 	.word	0x20000004
 8002c34:	42470020 	.word	0x42470020
 8002c38:	42470680 	.word	0x42470680
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c3c:	4ba2      	ldr	r3, [pc, #648]	; (8002ec8 <HAL_RCC_OscConfig+0x814>)
 8002c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1e1      	bne.n	8002c0c <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80b7 	beq.w	8002dc4 <HAL_RCC_OscConfig+0x710>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c56:	2300      	movs	r3, #0
 8002c58:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00c      	beq.n	8002c7c <HAL_RCC_OscConfig+0x5c8>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d008      	beq.n	8002c7c <HAL_RCC_OscConfig+0x5c8>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2b05      	cmp	r3, #5
 8002c70:	d004      	beq.n	8002c7c <HAL_RCC_OscConfig+0x5c8>
 8002c72:	f44f 711a 	mov.w	r1, #616	; 0x268
 8002c76:	4895      	ldr	r0, [pc, #596]	; (8002ecc <HAL_RCC_OscConfig+0x818>)
 8002c78:	f7fd fe64 	bl	8000944 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c7c:	4b92      	ldr	r3, [pc, #584]	; (8002ec8 <HAL_RCC_OscConfig+0x814>)
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10d      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x5f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c88:	4b8f      	ldr	r3, [pc, #572]	; (8002ec8 <HAL_RCC_OscConfig+0x814>)
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	4a8e      	ldr	r2, [pc, #568]	; (8002ec8 <HAL_RCC_OscConfig+0x814>)
 8002c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c92:	6253      	str	r3, [r2, #36]	; 0x24
 8002c94:	4b8c      	ldr	r3, [pc, #560]	; (8002ec8 <HAL_RCC_OscConfig+0x814>)
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca4:	4b8a      	ldr	r3, [pc, #552]	; (8002ed0 <HAL_RCC_OscConfig+0x81c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d118      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x62e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cb0:	4b87      	ldr	r3, [pc, #540]	; (8002ed0 <HAL_RCC_OscConfig+0x81c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a86      	ldr	r2, [pc, #536]	; (8002ed0 <HAL_RCC_OscConfig+0x81c>)
 8002cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cbc:	f7fe fa1c 	bl	80010f8 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x622>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc4:	f7fe fa18 	bl	80010f8 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b64      	cmp	r3, #100	; 0x64
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e164      	b.n	8002fa0 <HAL_RCC_OscConfig+0x8ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd6:	4b7e      	ldr	r3, [pc, #504]	; (8002ed0 <HAL_RCC_OscConfig+0x81c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d106      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x644>
 8002cea:	4b77      	ldr	r3, [pc, #476]	; (8002ec8 <HAL_RCC_OscConfig+0x814>)
 8002cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cee:	4a76      	ldr	r2, [pc, #472]	; (8002ec8 <HAL_RCC_OscConfig+0x814>)
 8002cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf4:	6353      	str	r3, [r2, #52]	; 0x34
 8002cf6:	e02d      	b.n	8002d54 <HAL_RCC_OscConfig+0x6a0>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10c      	bne.n	8002d1a <HAL_RCC_OscConfig+0x666>
 8002d00:	4b71      	ldr	r3, [pc, #452]	; (8002ec8 <HAL_RCC_OscConfig+0x814>)
 8002d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d04:	4a70      	ldr	r2, [pc, #448]	; (8002ec8 <HAL_RCC_OscConfig+0x814>)
 8002d06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d0a:	6353      	str	r3, [r2, #52]	; 0x34
 8002d0c:	4b6e      	ldr	r3, [pc, #440]	; (8002ec8 <HAL_RCC_OscConfig+0x814>)
 8002d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d10:	4a6d      	ldr	r2, [pc, #436]	; (8002ec8 <HAL_RCC_OscConfig+0x814>)
 8002d12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d16:	6353      	str	r3, [r2, #52]	; 0x34
 8002d18:	e01c      	b.n	8002d54 <HAL_RCC_OscConfig+0x6a0>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b05      	cmp	r3, #5
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x688>
 8002d22:	4b69      	ldr	r3, [pc, #420]	; (8002ec8 <HAL_RCC_OscConfig+0x814>)
 8002d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d26:	4a68      	ldr	r2, [pc, #416]	; (8002ec8 <HAL_RCC_OscConfig+0x814>)
 8002d28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d2c:	6353      	str	r3, [r2, #52]	; 0x34
 8002d2e:	4b66      	ldr	r3, [pc, #408]	; (8002ec8 <HAL_RCC_OscConfig+0x814>)
 8002d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d32:	4a65      	ldr	r2, [pc, #404]	; (8002ec8 <HAL_RCC_OscConfig+0x814>)
 8002d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d38:	6353      	str	r3, [r2, #52]	; 0x34
 8002d3a:	e00b      	b.n	8002d54 <HAL_RCC_OscConfig+0x6a0>
 8002d3c:	4b62      	ldr	r3, [pc, #392]	; (8002ec8 <HAL_RCC_OscConfig+0x814>)
 8002d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d40:	4a61      	ldr	r2, [pc, #388]	; (8002ec8 <HAL_RCC_OscConfig+0x814>)
 8002d42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d46:	6353      	str	r3, [r2, #52]	; 0x34
 8002d48:	4b5f      	ldr	r3, [pc, #380]	; (8002ec8 <HAL_RCC_OscConfig+0x814>)
 8002d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4c:	4a5e      	ldr	r2, [pc, #376]	; (8002ec8 <HAL_RCC_OscConfig+0x814>)
 8002d4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d52:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d015      	beq.n	8002d88 <HAL_RCC_OscConfig+0x6d4>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5c:	f7fe f9cc 	bl	80010f8 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d62:	e00a      	b.n	8002d7a <HAL_RCC_OscConfig+0x6c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d64:	f7fe f9c8 	bl	80010f8 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e112      	b.n	8002fa0 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d7a:	4b53      	ldr	r3, [pc, #332]	; (8002ec8 <HAL_RCC_OscConfig+0x814>)
 8002d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0ee      	beq.n	8002d64 <HAL_RCC_OscConfig+0x6b0>
 8002d86:	e014      	b.n	8002db2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d88:	f7fe f9b6 	bl	80010f8 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCC_OscConfig+0x6f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d90:	f7fe f9b2 	bl	80010f8 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x6f2>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e0fc      	b.n	8002fa0 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002da6:	4b48      	ldr	r3, [pc, #288]	; (8002ec8 <HAL_RCC_OscConfig+0x814>)
 8002da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1ee      	bne.n	8002d90 <HAL_RCC_OscConfig+0x6dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002db2:	7ffb      	ldrb	r3, [r7, #31]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d105      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x710>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db8:	4b43      	ldr	r3, [pc, #268]	; (8002ec8 <HAL_RCC_OscConfig+0x814>)
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	4a42      	ldr	r2, [pc, #264]	; (8002ec8 <HAL_RCC_OscConfig+0x814>)
 8002dbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc2:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00c      	beq.n	8002de6 <HAL_RCC_OscConfig+0x732>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d008      	beq.n	8002de6 <HAL_RCC_OscConfig+0x732>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d004      	beq.n	8002de6 <HAL_RCC_OscConfig+0x732>
 8002ddc:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8002de0:	483a      	ldr	r0, [pc, #232]	; (8002ecc <HAL_RCC_OscConfig+0x818>)
 8002de2:	f7fd fdaf 	bl	8000944 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 80d7 	beq.w	8002f9e <HAL_RCC_OscConfig+0x8ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	2b0c      	cmp	r3, #12
 8002df4:	f000 80b3 	beq.w	8002f5e <HAL_RCC_OscConfig+0x8aa>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	f040 8097 	bne.w	8002f30 <HAL_RCC_OscConfig+0x87c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d009      	beq.n	8002e1e <HAL_RCC_OscConfig+0x76a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e12:	d004      	beq.n	8002e1e <HAL_RCC_OscConfig+0x76a>
 8002e14:	f240 21b5 	movw	r1, #693	; 0x2b5
 8002e18:	482c      	ldr	r0, [pc, #176]	; (8002ecc <HAL_RCC_OscConfig+0x818>)
 8002e1a:	f7fd fd93 	bl	8000944 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d02c      	beq.n	8002e80 <HAL_RCC_OscConfig+0x7cc>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e2e:	d027      	beq.n	8002e80 <HAL_RCC_OscConfig+0x7cc>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e38:	d022      	beq.n	8002e80 <HAL_RCC_OscConfig+0x7cc>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e42:	d01d      	beq.n	8002e80 <HAL_RCC_OscConfig+0x7cc>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e4c:	d018      	beq.n	8002e80 <HAL_RCC_OscConfig+0x7cc>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002e56:	d013      	beq.n	8002e80 <HAL_RCC_OscConfig+0x7cc>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002e60:	d00e      	beq.n	8002e80 <HAL_RCC_OscConfig+0x7cc>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002e6a:	d009      	beq.n	8002e80 <HAL_RCC_OscConfig+0x7cc>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e74:	d004      	beq.n	8002e80 <HAL_RCC_OscConfig+0x7cc>
 8002e76:	f240 21b6 	movw	r1, #694	; 0x2b6
 8002e7a:	4814      	ldr	r0, [pc, #80]	; (8002ecc <HAL_RCC_OscConfig+0x818>)
 8002e7c:	f7fd fd62 	bl	8000944 <assert_failed>
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e88:	d00e      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x7f4>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e92:	d009      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x7f4>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e9c:	d004      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x7f4>
 8002e9e:	f240 21b7 	movw	r1, #695	; 0x2b7
 8002ea2:	480a      	ldr	r0, [pc, #40]	; (8002ecc <HAL_RCC_OscConfig+0x818>)
 8002ea4:	f7fd fd4e 	bl	8000944 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea8:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <HAL_RCC_OscConfig+0x820>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eae:	f7fe f923 	bl	80010f8 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eb4:	e010      	b.n	8002ed8 <HAL_RCC_OscConfig+0x824>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb6:	f7fe f91f 	bl	80010f8 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d909      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x824>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e06b      	b.n	8002fa0 <HAL_RCC_OscConfig+0x8ec>
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	08006018 	.word	0x08006018
 8002ed0:	40007000 	.word	0x40007000
 8002ed4:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ed8:	4b33      	ldr	r3, [pc, #204]	; (8002fa8 <HAL_RCC_OscConfig+0x8f4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1e8      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x802>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ee4:	4b30      	ldr	r3, [pc, #192]	; (8002fa8 <HAL_RCC_OscConfig+0x8f4>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef4:	4319      	orrs	r1, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	430b      	orrs	r3, r1
 8002efc:	492a      	ldr	r1, [pc, #168]	; (8002fa8 <HAL_RCC_OscConfig+0x8f4>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f02:	4b2a      	ldr	r3, [pc, #168]	; (8002fac <HAL_RCC_OscConfig+0x8f8>)
 8002f04:	2201      	movs	r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f08:	f7fe f8f6 	bl	80010f8 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x86e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f10:	f7fe f8f2 	bl	80010f8 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x86e>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e03e      	b.n	8002fa0 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f22:	4b21      	ldr	r3, [pc, #132]	; (8002fa8 <HAL_RCC_OscConfig+0x8f4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0x85c>
 8002f2e:	e036      	b.n	8002f9e <HAL_RCC_OscConfig+0x8ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f30:	4b1e      	ldr	r3, [pc, #120]	; (8002fac <HAL_RCC_OscConfig+0x8f8>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f36:	f7fe f8df 	bl	80010f8 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x89c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3e:	f7fe f8db 	bl	80010f8 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x89c>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e027      	b.n	8002fa0 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f50:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <HAL_RCC_OscConfig+0x8f4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1f0      	bne.n	8002f3e <HAL_RCC_OscConfig+0x88a>
 8002f5c:	e01f      	b.n	8002f9e <HAL_RCC_OscConfig+0x8ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_RCC_OscConfig+0x8b6>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e01a      	b.n	8002fa0 <HAL_RCC_OscConfig+0x8ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f6a:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <HAL_RCC_OscConfig+0x8f4>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d10d      	bne.n	8002f9a <HAL_RCC_OscConfig+0x8e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d106      	bne.n	8002f9a <HAL_RCC_OscConfig+0x8e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d001      	beq.n	8002f9e <HAL_RCC_OscConfig+0x8ea>
        {
          return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <HAL_RCC_OscConfig+0x8ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3720      	adds	r7, #32
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	42470060 	.word	0x42470060

08002fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e1a4      	b.n	800330e <HAL_RCC_ClockConfig+0x35e>
  }

  assert_param(IS_FLASH_LATENCY(FLatency));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d007      	beq.n	8002fda <HAL_RCC_ClockConfig+0x2a>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d004      	beq.n	8002fda <HAL_RCC_ClockConfig+0x2a>
 8002fd0:	f240 312a 	movw	r1, #810	; 0x32a
 8002fd4:	4893      	ldr	r0, [pc, #588]	; (8003224 <HAL_RCC_ClockConfig+0x274>)
 8002fd6:	f7fd fcb5 	bl	8000944 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fda:	4b93      	ldr	r3, [pc, #588]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d919      	bls.n	800301c <HAL_RCC_ClockConfig+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d105      	bne.n	8002ffa <HAL_RCC_ClockConfig+0x4a>
 8002fee:	4b8e      	ldr	r3, [pc, #568]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a8d      	ldr	r2, [pc, #564]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 8002ff4:	f043 0304 	orr.w	r3, r3, #4
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	4b8b      	ldr	r3, [pc, #556]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 0201 	bic.w	r2, r3, #1
 8003002:	4989      	ldr	r1, [pc, #548]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	4313      	orrs	r3, r2
 8003008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800300a:	4b87      	ldr	r3, [pc, #540]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d001      	beq.n	800301c <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e178      	b.n	800330e <HAL_RCC_ClockConfig+0x35e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d031      	beq.n	800308c <HAL_RCC_ClockConfig+0xdc>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d024      	beq.n	800307a <HAL_RCC_ClockConfig+0xca>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2b80      	cmp	r3, #128	; 0x80
 8003036:	d020      	beq.n	800307a <HAL_RCC_ClockConfig+0xca>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b90      	cmp	r3, #144	; 0x90
 800303e:	d01c      	beq.n	800307a <HAL_RCC_ClockConfig+0xca>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2ba0      	cmp	r3, #160	; 0xa0
 8003046:	d018      	beq.n	800307a <HAL_RCC_ClockConfig+0xca>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2bb0      	cmp	r3, #176	; 0xb0
 800304e:	d014      	beq.n	800307a <HAL_RCC_ClockConfig+0xca>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2bc0      	cmp	r3, #192	; 0xc0
 8003056:	d010      	beq.n	800307a <HAL_RCC_ClockConfig+0xca>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2bd0      	cmp	r3, #208	; 0xd0
 800305e:	d00c      	beq.n	800307a <HAL_RCC_ClockConfig+0xca>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2be0      	cmp	r3, #224	; 0xe0
 8003066:	d008      	beq.n	800307a <HAL_RCC_ClockConfig+0xca>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2bf0      	cmp	r3, #240	; 0xf0
 800306e:	d004      	beq.n	800307a <HAL_RCC_ClockConfig+0xca>
 8003070:	f240 3141 	movw	r1, #833	; 0x341
 8003074:	486b      	ldr	r0, [pc, #428]	; (8003224 <HAL_RCC_ClockConfig+0x274>)
 8003076:	f7fd fc65 	bl	8000944 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800307a:	4b6c      	ldr	r3, [pc, #432]	; (800322c <HAL_RCC_ClockConfig+0x27c>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	4969      	ldr	r1, [pc, #420]	; (800322c <HAL_RCC_ClockConfig+0x27c>)
 8003088:	4313      	orrs	r3, r2
 800308a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80a3 	beq.w	80031e0 <HAL_RCC_ClockConfig+0x230>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d010      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x114>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d00c      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x114>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d008      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x114>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d004      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x114>
 80030ba:	f44f 7152 	mov.w	r1, #840	; 0x348
 80030be:	4859      	ldr	r0, [pc, #356]	; (8003224 <HAL_RCC_ClockConfig+0x274>)
 80030c0:	f7fd fc40 	bl	8000944 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d107      	bne.n	80030dc <HAL_RCC_ClockConfig+0x12c>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030cc:	4b57      	ldr	r3, [pc, #348]	; (800322c <HAL_RCC_ClockConfig+0x27c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d121      	bne.n	800311c <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e118      	b.n	800330e <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d107      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x144>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030e4:	4b51      	ldr	r3, [pc, #324]	; (800322c <HAL_RCC_ClockConfig+0x27c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d115      	bne.n	800311c <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e10c      	b.n	800330e <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d107      	bne.n	800310c <HAL_RCC_ClockConfig+0x15c>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030fc:	4b4b      	ldr	r3, [pc, #300]	; (800322c <HAL_RCC_ClockConfig+0x27c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d109      	bne.n	800311c <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e100      	b.n	800330e <HAL_RCC_ClockConfig+0x35e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800310c:	4b47      	ldr	r3, [pc, #284]	; (800322c <HAL_RCC_ClockConfig+0x27c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0f8      	b.n	800330e <HAL_RCC_ClockConfig+0x35e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800311c:	4b43      	ldr	r3, [pc, #268]	; (800322c <HAL_RCC_ClockConfig+0x27c>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f023 0203 	bic.w	r2, r3, #3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	4940      	ldr	r1, [pc, #256]	; (800322c <HAL_RCC_ClockConfig+0x27c>)
 800312a:	4313      	orrs	r3, r2
 800312c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800312e:	f7fd ffe3 	bl	80010f8 <HAL_GetTick>
 8003132:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d112      	bne.n	8003162 <HAL_RCC_ClockConfig+0x1b2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800313c:	e00a      	b.n	8003154 <HAL_RCC_ClockConfig+0x1a4>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800313e:	f7fd ffdb 	bl	80010f8 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	f241 3288 	movw	r2, #5000	; 0x1388
 800314c:	4293      	cmp	r3, r2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_ClockConfig+0x1a4>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e0dc      	b.n	800330e <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003154:	4b35      	ldr	r3, [pc, #212]	; (800322c <HAL_RCC_ClockConfig+0x27c>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 030c 	and.w	r3, r3, #12
 800315c:	2b08      	cmp	r3, #8
 800315e:	d1ee      	bne.n	800313e <HAL_RCC_ClockConfig+0x18e>
 8003160:	e03e      	b.n	80031e0 <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b03      	cmp	r3, #3
 8003168:	d112      	bne.n	8003190 <HAL_RCC_ClockConfig+0x1e0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800316a:	e00a      	b.n	8003182 <HAL_RCC_ClockConfig+0x1d2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800316c:	f7fd ffc4 	bl	80010f8 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	f241 3288 	movw	r2, #5000	; 0x1388
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_ClockConfig+0x1d2>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e0c5      	b.n	800330e <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003182:	4b2a      	ldr	r3, [pc, #168]	; (800322c <HAL_RCC_ClockConfig+0x27c>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	2b0c      	cmp	r3, #12
 800318c:	d1ee      	bne.n	800316c <HAL_RCC_ClockConfig+0x1bc>
 800318e:	e027      	b.n	80031e0 <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d11d      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x224>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003198:	e00a      	b.n	80031b0 <HAL_RCC_ClockConfig+0x200>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800319a:	f7fd ffad 	bl	80010f8 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_ClockConfig+0x200>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e0ae      	b.n	800330e <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80031b0:	4b1e      	ldr	r3, [pc, #120]	; (800322c <HAL_RCC_ClockConfig+0x27c>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 030c 	and.w	r3, r3, #12
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d1ee      	bne.n	800319a <HAL_RCC_ClockConfig+0x1ea>
 80031bc:	e010      	b.n	80031e0 <HAL_RCC_ClockConfig+0x230>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031be:	f7fd ff9b 	bl	80010f8 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_ClockConfig+0x224>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e09c      	b.n	800330e <HAL_RCC_ClockConfig+0x35e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80031d4:	4b15      	ldr	r3, [pc, #84]	; (800322c <HAL_RCC_ClockConfig+0x27c>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 030c 	and.w	r3, r3, #12
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1ee      	bne.n	80031be <HAL_RCC_ClockConfig+0x20e>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031e0:	4b11      	ldr	r3, [pc, #68]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d220      	bcs.n	8003230 <HAL_RCC_ClockConfig+0x280>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d105      	bne.n	8003200 <HAL_RCC_ClockConfig+0x250>
 80031f4:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a0b      	ldr	r2, [pc, #44]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 80031fa:	f043 0304 	orr.w	r3, r3, #4
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	4b09      	ldr	r3, [pc, #36]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f023 0201 	bic.w	r2, r3, #1
 8003208:	4907      	ldr	r1, [pc, #28]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	4313      	orrs	r3, r2
 800320e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_RCC_ClockConfig+0x278>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d008      	beq.n	8003230 <HAL_RCC_ClockConfig+0x280>
    {
      return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e075      	b.n	800330e <HAL_RCC_ClockConfig+0x35e>
 8003222:	bf00      	nop
 8003224:	08006018 	.word	0x08006018
 8003228:	40023c00 	.word	0x40023c00
 800322c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d025      	beq.n	8003288 <HAL_RCC_ClockConfig+0x2d8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d018      	beq.n	8003276 <HAL_RCC_ClockConfig+0x2c6>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800324c:	d013      	beq.n	8003276 <HAL_RCC_ClockConfig+0x2c6>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003256:	d00e      	beq.n	8003276 <HAL_RCC_ClockConfig+0x2c6>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003260:	d009      	beq.n	8003276 <HAL_RCC_ClockConfig+0x2c6>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800326a:	d004      	beq.n	8003276 <HAL_RCC_ClockConfig+0x2c6>
 800326c:	f240 31ad 	movw	r1, #941	; 0x3ad
 8003270:	4829      	ldr	r0, [pc, #164]	; (8003318 <HAL_RCC_ClockConfig+0x368>)
 8003272:	f7fd fb67 	bl	8000944 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003276:	4b29      	ldr	r3, [pc, #164]	; (800331c <HAL_RCC_ClockConfig+0x36c>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	4926      	ldr	r1, [pc, #152]	; (800331c <HAL_RCC_ClockConfig+0x36c>)
 8003284:	4313      	orrs	r3, r2
 8003286:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	d026      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x332>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d018      	beq.n	80032ce <HAL_RCC_ClockConfig+0x31e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a4:	d013      	beq.n	80032ce <HAL_RCC_ClockConfig+0x31e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80032ae:	d00e      	beq.n	80032ce <HAL_RCC_ClockConfig+0x31e>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80032b8:	d009      	beq.n	80032ce <HAL_RCC_ClockConfig+0x31e>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032c2:	d004      	beq.n	80032ce <HAL_RCC_ClockConfig+0x31e>
 80032c4:	f44f 716d 	mov.w	r1, #948	; 0x3b4
 80032c8:	4813      	ldr	r0, [pc, #76]	; (8003318 <HAL_RCC_ClockConfig+0x368>)
 80032ca:	f7fd fb3b 	bl	8000944 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ce:	4b13      	ldr	r3, [pc, #76]	; (800331c <HAL_RCC_ClockConfig+0x36c>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	490f      	ldr	r1, [pc, #60]	; (800331c <HAL_RCC_ClockConfig+0x36c>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032e2:	f000 f823 	bl	800332c <HAL_RCC_GetSysClockFreq>
 80032e6:	4601      	mov	r1, r0
 80032e8:	4b0c      	ldr	r3, [pc, #48]	; (800331c <HAL_RCC_ClockConfig+0x36c>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	4a0b      	ldr	r2, [pc, #44]	; (8003320 <HAL_RCC_ClockConfig+0x370>)
 80032f4:	5cd3      	ldrb	r3, [r2, r3]
 80032f6:	fa21 f303 	lsr.w	r3, r1, r3
 80032fa:	4a0a      	ldr	r2, [pc, #40]	; (8003324 <HAL_RCC_ClockConfig+0x374>)
 80032fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032fe:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <HAL_RCC_ClockConfig+0x378>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7fd fb5c 	bl	80009c0 <HAL_InitTick>
 8003308:	4603      	mov	r3, r0
 800330a:	72fb      	strb	r3, [r7, #11]

  return status;
 800330c:	7afb      	ldrb	r3, [r7, #11]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	08006018 	.word	0x08006018
 800331c:	40023800 	.word	0x40023800
 8003320:	0800610c 	.word	0x0800610c
 8003324:	20000000 	.word	0x20000000
 8003328:	20000004 	.word	0x20000004

0800332c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003332:	4b26      	ldr	r3, [pc, #152]	; (80033cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f003 030c 	and.w	r3, r3, #12
 800333e:	2b08      	cmp	r3, #8
 8003340:	d006      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x24>
 8003342:	2b0c      	cmp	r3, #12
 8003344:	d007      	beq.n	8003356 <HAL_RCC_GetSysClockFreq+0x2a>
 8003346:	2b04      	cmp	r3, #4
 8003348:	d12c      	bne.n	80033a4 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800334a:	4b21      	ldr	r3, [pc, #132]	; (80033d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800334c:	613b      	str	r3, [r7, #16]
      break;
 800334e:	e037      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003350:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003352:	613b      	str	r3, [r7, #16]
      break;
 8003354:	e034      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	0c9b      	lsrs	r3, r3, #18
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	4a1e      	ldr	r2, [pc, #120]	; (80033d8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003360:	5cd3      	ldrb	r3, [r2, r3]
 8003362:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	0d9b      	lsrs	r3, r3, #22
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	3301      	adds	r3, #1
 800336e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003370:	4b16      	ldr	r3, [pc, #88]	; (80033cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4a15      	ldr	r2, [pc, #84]	; (80033d4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003380:	fb02 f203 	mul.w	r2, r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	fbb2 f3f3 	udiv	r3, r2, r3
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	e007      	b.n	800339e <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	4a0f      	ldr	r2, [pc, #60]	; (80033d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003392:	fb02 f203 	mul.w	r2, r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	fbb2 f3f3 	udiv	r3, r2, r3
 800339c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	613b      	str	r3, [r7, #16]
      break;
 80033a2:	e00d      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80033a4:	4b09      	ldr	r3, [pc, #36]	; (80033cc <HAL_RCC_GetSysClockFreq+0xa0>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	0b5b      	lsrs	r3, r3, #13
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	3301      	adds	r3, #1
 80033b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	613b      	str	r3, [r7, #16]
      break;
 80033be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033c0:	693b      	ldr	r3, [r7, #16]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	371c      	adds	r7, #28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr
 80033cc:	40023800 	.word	0x40023800
 80033d0:	00f42400 	.word	0x00f42400
 80033d4:	007a1200 	.word	0x007a1200
 80033d8:	08006100 	.word	0x08006100

080033dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e0:	4b02      	ldr	r3, [pc, #8]	; (80033ec <HAL_RCC_GetHCLKFreq+0x10>)
 80033e2:	681b      	ldr	r3, [r3, #0]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr
 80033ec:	20000000 	.word	0x20000000

080033f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033f4:	f7ff fff2 	bl	80033dc <HAL_RCC_GetHCLKFreq>
 80033f8:	4601      	mov	r1, r0
 80033fa:	4b05      	ldr	r3, [pc, #20]	; (8003410 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	0a1b      	lsrs	r3, r3, #8
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	4a03      	ldr	r2, [pc, #12]	; (8003414 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003406:	5cd3      	ldrb	r3, [r2, r3]
 8003408:	fa21 f303 	lsr.w	r3, r1, r3
}
 800340c:	4618      	mov	r0, r3
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40023800 	.word	0x40023800
 8003414:	0800611c 	.word	0x0800611c

08003418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800341c:	f7ff ffde 	bl	80033dc <HAL_RCC_GetHCLKFreq>
 8003420:	4601      	mov	r1, r0
 8003422:	4b05      	ldr	r3, [pc, #20]	; (8003438 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	0adb      	lsrs	r3, r3, #11
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	4a03      	ldr	r2, [pc, #12]	; (800343c <HAL_RCC_GetPCLK2Freq+0x24>)
 800342e:	5cd3      	ldrb	r3, [r2, r3]
 8003430:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003434:	4618      	mov	r0, r3
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40023800 	.word	0x40023800
 800343c:	0800611c 	.word	0x0800611c

08003440 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d104      	bne.n	800345a <HAL_RCC_GetClockConfig+0x1a>
 8003450:	f240 41fa 	movw	r1, #1274	; 0x4fa
 8003454:	4818      	ldr	r0, [pc, #96]	; (80034b8 <HAL_RCC_GetClockConfig+0x78>)
 8003456:	f7fd fa75 	bl	8000944 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d104      	bne.n	800346a <HAL_RCC_GetClockConfig+0x2a>
 8003460:	f240 41fb 	movw	r1, #1275	; 0x4fb
 8003464:	4814      	ldr	r0, [pc, #80]	; (80034b8 <HAL_RCC_GetClockConfig+0x78>)
 8003466:	f7fd fa6d 	bl	8000944 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	220f      	movs	r2, #15
 800346e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003470:	4b12      	ldr	r3, [pc, #72]	; (80034bc <HAL_RCC_GetClockConfig+0x7c>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 0203 	and.w	r2, r3, #3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800347c:	4b0f      	ldr	r3, [pc, #60]	; (80034bc <HAL_RCC_GetClockConfig+0x7c>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003488:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <HAL_RCC_GetClockConfig+0x7c>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003494:	4b09      	ldr	r3, [pc, #36]	; (80034bc <HAL_RCC_GetClockConfig+0x7c>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	08db      	lsrs	r3, r3, #3
 800349a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80034a2:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <HAL_RCC_GetClockConfig+0x80>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0201 	and.w	r2, r3, #1
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	601a      	str	r2, [r3, #0]
}
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	08006018 	.word	0x08006018
 80034bc:	40023800 	.word	0x40023800
 80034c0:	40023c00 	.word	0x40023c00

080034c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034cc:	2300      	movs	r3, #0
 80034ce:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80034d0:	4b29      	ldr	r3, [pc, #164]	; (8003578 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d12c      	bne.n	8003536 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034dc:	4b26      	ldr	r3, [pc, #152]	; (8003578 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80034e8:	4b24      	ldr	r3, [pc, #144]	; (800357c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	e016      	b.n	8003522 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034f4:	4b20      	ldr	r3, [pc, #128]	; (8003578 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	4a1f      	ldr	r2, [pc, #124]	; (8003578 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80034fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034fe:	6253      	str	r3, [r2, #36]	; 0x24
 8003500:	4b1d      	ldr	r3, [pc, #116]	; (8003578 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800350c:	4b1b      	ldr	r3, [pc, #108]	; (800357c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003514:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003516:	4b18      	ldr	r3, [pc, #96]	; (8003578 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	4a17      	ldr	r2, [pc, #92]	; (8003578 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800351c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003520:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003528:	d105      	bne.n	8003536 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003530:	d101      	bne.n	8003536 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003532:	2301      	movs	r3, #1
 8003534:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d105      	bne.n	8003548 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800353c:	4b10      	ldr	r3, [pc, #64]	; (8003580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0f      	ldr	r2, [pc, #60]	; (8003580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003542:	f043 0304 	orr.w	r3, r3, #4
 8003546:	6013      	str	r3, [r2, #0]
 8003548:	4b0d      	ldr	r3, [pc, #52]	; (8003580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f023 0201 	bic.w	r2, r3, #1
 8003550:	490b      	ldr	r1, [pc, #44]	; (8003580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003558:	4b09      	ldr	r3, [pc, #36]	; (8003580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	429a      	cmp	r2, r3
 8003564:	d001      	beq.n	800356a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40023800 	.word	0x40023800
 800357c:	40007000 	.word	0x40007000
 8003580:	40023c00 	.word	0x40023c00

08003584 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e088      	b.n	80036a8 <HAL_TIM_Base_Init+0x124>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359e:	d02c      	beq.n	80035fa <HAL_TIM_Base_Init+0x76>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a42      	ldr	r2, [pc, #264]	; (80036b0 <HAL_TIM_Base_Init+0x12c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d027      	beq.n	80035fa <HAL_TIM_Base_Init+0x76>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a41      	ldr	r2, [pc, #260]	; (80036b4 <HAL_TIM_Base_Init+0x130>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d022      	beq.n	80035fa <HAL_TIM_Base_Init+0x76>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a3f      	ldr	r2, [pc, #252]	; (80036b8 <HAL_TIM_Base_Init+0x134>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d01d      	beq.n	80035fa <HAL_TIM_Base_Init+0x76>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a3e      	ldr	r2, [pc, #248]	; (80036bc <HAL_TIM_Base_Init+0x138>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d018      	beq.n	80035fa <HAL_TIM_Base_Init+0x76>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a3c      	ldr	r2, [pc, #240]	; (80036c0 <HAL_TIM_Base_Init+0x13c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d013      	beq.n	80035fa <HAL_TIM_Base_Init+0x76>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a3b      	ldr	r2, [pc, #236]	; (80036c4 <HAL_TIM_Base_Init+0x140>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d00e      	beq.n	80035fa <HAL_TIM_Base_Init+0x76>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a39      	ldr	r2, [pc, #228]	; (80036c8 <HAL_TIM_Base_Init+0x144>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d009      	beq.n	80035fa <HAL_TIM_Base_Init+0x76>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a38      	ldr	r2, [pc, #224]	; (80036cc <HAL_TIM_Base_Init+0x148>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d004      	beq.n	80035fa <HAL_TIM_Base_Init+0x76>
 80035f0:	f240 110b 	movw	r1, #267	; 0x10b
 80035f4:	4836      	ldr	r0, [pc, #216]	; (80036d0 <HAL_TIM_Base_Init+0x14c>)
 80035f6:	f7fd f9a5 	bl	8000944 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d014      	beq.n	800362c <HAL_TIM_Base_Init+0xa8>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2b10      	cmp	r3, #16
 8003608:	d010      	beq.n	800362c <HAL_TIM_Base_Init+0xa8>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	2b20      	cmp	r3, #32
 8003610:	d00c      	beq.n	800362c <HAL_TIM_Base_Init+0xa8>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2b40      	cmp	r3, #64	; 0x40
 8003618:	d008      	beq.n	800362c <HAL_TIM_Base_Init+0xa8>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	2b60      	cmp	r3, #96	; 0x60
 8003620:	d004      	beq.n	800362c <HAL_TIM_Base_Init+0xa8>
 8003622:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8003626:	482a      	ldr	r0, [pc, #168]	; (80036d0 <HAL_TIM_Base_Init+0x14c>)
 8003628:	f7fd f98c 	bl	8000944 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00e      	beq.n	8003652 <HAL_TIM_Base_Init+0xce>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800363c:	d009      	beq.n	8003652 <HAL_TIM_Base_Init+0xce>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003646:	d004      	beq.n	8003652 <HAL_TIM_Base_Init+0xce>
 8003648:	f240 110d 	movw	r1, #269	; 0x10d
 800364c:	4820      	ldr	r0, [pc, #128]	; (80036d0 <HAL_TIM_Base_Init+0x14c>)
 800364e:	f7fd f979 	bl	8000944 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d008      	beq.n	800366c <HAL_TIM_Base_Init+0xe8>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	2b80      	cmp	r3, #128	; 0x80
 8003660:	d004      	beq.n	800366c <HAL_TIM_Base_Init+0xe8>
 8003662:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003666:	481a      	ldr	r0, [pc, #104]	; (80036d0 <HAL_TIM_Base_Init+0x14c>)
 8003668:	f7fd f96c 	bl	8000944 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d106      	bne.n	8003686 <HAL_TIM_Base_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7fd fbb3 	bl	8000dec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2202      	movs	r2, #2
 800368a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3304      	adds	r3, #4
 8003696:	4619      	mov	r1, r3
 8003698:	4610      	mov	r0, r2
 800369a:	f000 ff49 	bl	8004530 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40000400 	.word	0x40000400
 80036b4:	40000800 	.word	0x40000800
 80036b8:	40000c00 	.word	0x40000c00
 80036bc:	40001000 	.word	0x40001000
 80036c0:	40001400 	.word	0x40001400
 80036c4:	40010800 	.word	0x40010800
 80036c8:	40010c00 	.word	0x40010c00
 80036cc:	40011000 	.word	0x40011000
 80036d0:	08006050 	.word	0x08006050

080036d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e4:	d02c      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x6c>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a24      	ldr	r2, [pc, #144]	; (800377c <HAL_TIM_Base_Start_IT+0xa8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d027      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x6c>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a22      	ldr	r2, [pc, #136]	; (8003780 <HAL_TIM_Base_Start_IT+0xac>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d022      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x6c>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a21      	ldr	r2, [pc, #132]	; (8003784 <HAL_TIM_Base_Start_IT+0xb0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d01d      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x6c>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1f      	ldr	r2, [pc, #124]	; (8003788 <HAL_TIM_Base_Start_IT+0xb4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d018      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x6c>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1e      	ldr	r2, [pc, #120]	; (800378c <HAL_TIM_Base_Start_IT+0xb8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d013      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x6c>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a1c      	ldr	r2, [pc, #112]	; (8003790 <HAL_TIM_Base_Start_IT+0xbc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00e      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x6c>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a1b      	ldr	r2, [pc, #108]	; (8003794 <HAL_TIM_Base_Start_IT+0xc0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d009      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x6c>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a19      	ldr	r2, [pc, #100]	; (8003798 <HAL_TIM_Base_Start_IT+0xc4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d004      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x6c>
 8003736:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 800373a:	4818      	ldr	r0, [pc, #96]	; (800379c <HAL_TIM_Base_Start_IT+0xc8>)
 800373c:	f7fd f902 	bl	8000944 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b06      	cmp	r3, #6
 8003760:	d007      	beq.n	8003772 <HAL_TIM_Base_Start_IT+0x9e>
  {
    __HAL_TIM_ENABLE(htim);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0201 	orr.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40000400 	.word	0x40000400
 8003780:	40000800 	.word	0x40000800
 8003784:	40000c00 	.word	0x40000c00
 8003788:	40001000 	.word	0x40001000
 800378c:	40001400 	.word	0x40001400
 8003790:	40010800 	.word	0x40010800
 8003794:	40010c00 	.word	0x40010c00
 8003798:	40011000 	.word	0x40011000
 800379c:	08006050 	.word	0x08006050

080037a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e088      	b.n	80038c4 <HAL_TIM_PWM_Init+0x124>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ba:	d02c      	beq.n	8003816 <HAL_TIM_PWM_Init+0x76>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a42      	ldr	r2, [pc, #264]	; (80038cc <HAL_TIM_PWM_Init+0x12c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d027      	beq.n	8003816 <HAL_TIM_PWM_Init+0x76>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a41      	ldr	r2, [pc, #260]	; (80038d0 <HAL_TIM_PWM_Init+0x130>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d022      	beq.n	8003816 <HAL_TIM_PWM_Init+0x76>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a3f      	ldr	r2, [pc, #252]	; (80038d4 <HAL_TIM_PWM_Init+0x134>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d01d      	beq.n	8003816 <HAL_TIM_PWM_Init+0x76>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a3e      	ldr	r2, [pc, #248]	; (80038d8 <HAL_TIM_PWM_Init+0x138>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d018      	beq.n	8003816 <HAL_TIM_PWM_Init+0x76>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a3c      	ldr	r2, [pc, #240]	; (80038dc <HAL_TIM_PWM_Init+0x13c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d013      	beq.n	8003816 <HAL_TIM_PWM_Init+0x76>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a3b      	ldr	r2, [pc, #236]	; (80038e0 <HAL_TIM_PWM_Init+0x140>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00e      	beq.n	8003816 <HAL_TIM_PWM_Init+0x76>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a39      	ldr	r2, [pc, #228]	; (80038e4 <HAL_TIM_PWM_Init+0x144>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d009      	beq.n	8003816 <HAL_TIM_PWM_Init+0x76>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a38      	ldr	r2, [pc, #224]	; (80038e8 <HAL_TIM_PWM_Init+0x148>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d004      	beq.n	8003816 <HAL_TIM_PWM_Init+0x76>
 800380c:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8003810:	4836      	ldr	r0, [pc, #216]	; (80038ec <HAL_TIM_PWM_Init+0x14c>)
 8003812:	f7fd f897 	bl	8000944 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d014      	beq.n	8003848 <HAL_TIM_PWM_Init+0xa8>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2b10      	cmp	r3, #16
 8003824:	d010      	beq.n	8003848 <HAL_TIM_PWM_Init+0xa8>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	2b20      	cmp	r3, #32
 800382c:	d00c      	beq.n	8003848 <HAL_TIM_PWM_Init+0xa8>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b40      	cmp	r3, #64	; 0x40
 8003834:	d008      	beq.n	8003848 <HAL_TIM_PWM_Init+0xa8>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b60      	cmp	r3, #96	; 0x60
 800383c:	d004      	beq.n	8003848 <HAL_TIM_PWM_Init+0xa8>
 800383e:	f240 4171 	movw	r1, #1137	; 0x471
 8003842:	482a      	ldr	r0, [pc, #168]	; (80038ec <HAL_TIM_PWM_Init+0x14c>)
 8003844:	f7fd f87e 	bl	8000944 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00e      	beq.n	800386e <HAL_TIM_PWM_Init+0xce>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003858:	d009      	beq.n	800386e <HAL_TIM_PWM_Init+0xce>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003862:	d004      	beq.n	800386e <HAL_TIM_PWM_Init+0xce>
 8003864:	f240 4172 	movw	r1, #1138	; 0x472
 8003868:	4820      	ldr	r0, [pc, #128]	; (80038ec <HAL_TIM_PWM_Init+0x14c>)
 800386a:	f7fd f86b 	bl	8000944 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d008      	beq.n	8003888 <HAL_TIM_PWM_Init+0xe8>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	2b80      	cmp	r3, #128	; 0x80
 800387c:	d004      	beq.n	8003888 <HAL_TIM_PWM_Init+0xe8>
 800387e:	f240 4173 	movw	r1, #1139	; 0x473
 8003882:	481a      	ldr	r0, [pc, #104]	; (80038ec <HAL_TIM_PWM_Init+0x14c>)
 8003884:	f7fd f85e 	bl	8000944 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d106      	bne.n	80038a2 <HAL_TIM_PWM_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f827 	bl	80038f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2202      	movs	r2, #2
 80038a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3304      	adds	r3, #4
 80038b2:	4619      	mov	r1, r3
 80038b4:	4610      	mov	r0, r2
 80038b6:	f000 fe3b 	bl	8004530 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40000400 	.word	0x40000400
 80038d0:	40000800 	.word	0x40000800
 80038d4:	40000c00 	.word	0x40000c00
 80038d8:	40001000 	.word	0x40001000
 80038dc:	40001400 	.word	0x40001400
 80038e0:	40010800 	.word	0x40010800
 80038e4:	40010c00 	.word	0x40010c00
 80038e8:	40011000 	.word	0x40011000
 80038ec:	08006050 	.word	0x08006050

080038f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr
	...

08003904 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003916:	d10b      	bne.n	8003930 <HAL_TIM_PWM_Start+0x2c>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d05b      	beq.n	80039d6 <HAL_TIM_PWM_Start+0xd2>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b04      	cmp	r3, #4
 8003922:	d058      	beq.n	80039d6 <HAL_TIM_PWM_Start+0xd2>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	2b08      	cmp	r3, #8
 8003928:	d055      	beq.n	80039d6 <HAL_TIM_PWM_Start+0xd2>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b0c      	cmp	r3, #12
 800392e:	d052      	beq.n	80039d6 <HAL_TIM_PWM_Start+0xd2>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a36      	ldr	r2, [pc, #216]	; (8003a10 <HAL_TIM_PWM_Start+0x10c>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d10b      	bne.n	8003952 <HAL_TIM_PWM_Start+0x4e>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d04a      	beq.n	80039d6 <HAL_TIM_PWM_Start+0xd2>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b04      	cmp	r3, #4
 8003944:	d047      	beq.n	80039d6 <HAL_TIM_PWM_Start+0xd2>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b08      	cmp	r3, #8
 800394a:	d044      	beq.n	80039d6 <HAL_TIM_PWM_Start+0xd2>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b0c      	cmp	r3, #12
 8003950:	d041      	beq.n	80039d6 <HAL_TIM_PWM_Start+0xd2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a2f      	ldr	r2, [pc, #188]	; (8003a14 <HAL_TIM_PWM_Start+0x110>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d10b      	bne.n	8003974 <HAL_TIM_PWM_Start+0x70>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d039      	beq.n	80039d6 <HAL_TIM_PWM_Start+0xd2>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b04      	cmp	r3, #4
 8003966:	d036      	beq.n	80039d6 <HAL_TIM_PWM_Start+0xd2>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2b08      	cmp	r3, #8
 800396c:	d033      	beq.n	80039d6 <HAL_TIM_PWM_Start+0xd2>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b0c      	cmp	r3, #12
 8003972:	d030      	beq.n	80039d6 <HAL_TIM_PWM_Start+0xd2>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a27      	ldr	r2, [pc, #156]	; (8003a18 <HAL_TIM_PWM_Start+0x114>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d10b      	bne.n	8003996 <HAL_TIM_PWM_Start+0x92>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d028      	beq.n	80039d6 <HAL_TIM_PWM_Start+0xd2>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	2b04      	cmp	r3, #4
 8003988:	d025      	beq.n	80039d6 <HAL_TIM_PWM_Start+0xd2>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b08      	cmp	r3, #8
 800398e:	d022      	beq.n	80039d6 <HAL_TIM_PWM_Start+0xd2>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2b0c      	cmp	r3, #12
 8003994:	d01f      	beq.n	80039d6 <HAL_TIM_PWM_Start+0xd2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a20      	ldr	r2, [pc, #128]	; (8003a1c <HAL_TIM_PWM_Start+0x118>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d105      	bne.n	80039ac <HAL_TIM_PWM_Start+0xa8>
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d017      	beq.n	80039d6 <HAL_TIM_PWM_Start+0xd2>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d014      	beq.n	80039d6 <HAL_TIM_PWM_Start+0xd2>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a1b      	ldr	r2, [pc, #108]	; (8003a20 <HAL_TIM_PWM_Start+0x11c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d102      	bne.n	80039bc <HAL_TIM_PWM_Start+0xb8>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00c      	beq.n	80039d6 <HAL_TIM_PWM_Start+0xd2>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a18      	ldr	r2, [pc, #96]	; (8003a24 <HAL_TIM_PWM_Start+0x120>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d102      	bne.n	80039cc <HAL_TIM_PWM_Start+0xc8>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d004      	beq.n	80039d6 <HAL_TIM_PWM_Start+0xd2>
 80039cc:	f44f 619d 	mov.w	r1, #1256	; 0x4e8
 80039d0:	4815      	ldr	r0, [pc, #84]	; (8003a28 <HAL_TIM_PWM_Start+0x124>)
 80039d2:	f7fc ffb7 	bl	8000944 <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2201      	movs	r2, #1
 80039dc:	6839      	ldr	r1, [r7, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 ffa2 	bl	8004928 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2b06      	cmp	r3, #6
 80039f4:	d007      	beq.n	8003a06 <HAL_TIM_PWM_Start+0x102>
  {
    __HAL_TIM_ENABLE(htim);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f042 0201 	orr.w	r2, r2, #1
 8003a04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40000400 	.word	0x40000400
 8003a14:	40000800 	.word	0x40000800
 8003a18:	40000c00 	.word	0x40000c00
 8003a1c:	40010800 	.word	0x40010800
 8003a20:	40010c00 	.word	0x40010c00
 8003a24:	40011000 	.word	0x40011000
 8003a28:	08006050 	.word	0x08006050

08003a2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d122      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d11b      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0202 	mvn.w	r2, #2
 8003a58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fd43 	bl	80044fa <HAL_TIM_IC_CaptureCallback>
 8003a74:	e005      	b.n	8003a82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fd36 	bl	80044e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 fd45 	bl	800450c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d122      	bne.n	8003adc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d11b      	bne.n	8003adc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0204 	mvn.w	r2, #4
 8003aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fd19 	bl	80044fa <HAL_TIM_IC_CaptureCallback>
 8003ac8:	e005      	b.n	8003ad6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fd0c 	bl	80044e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 fd1b 	bl	800450c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d122      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0308 	and.w	r3, r3, #8
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	d11b      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0208 	mvn.w	r2, #8
 8003b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2204      	movs	r2, #4
 8003b06:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 fcef 	bl	80044fa <HAL_TIM_IC_CaptureCallback>
 8003b1c:	e005      	b.n	8003b2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fce2 	bl	80044e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 fcf1 	bl	800450c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0310 	and.w	r3, r3, #16
 8003b3a:	2b10      	cmp	r3, #16
 8003b3c:	d122      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	2b10      	cmp	r3, #16
 8003b4a:	d11b      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0210 	mvn.w	r2, #16
 8003b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2208      	movs	r2, #8
 8003b5a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fcc5 	bl	80044fa <HAL_TIM_IC_CaptureCallback>
 8003b70:	e005      	b.n	8003b7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fcb8 	bl	80044e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 fcc7 	bl	800450c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d10e      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d107      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0201 	mvn.w	r2, #1
 8003ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7fc feb2 	bl	8000914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bba:	2b40      	cmp	r3, #64	; 0x40
 8003bbc:	d10e      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc8:	2b40      	cmp	r3, #64	; 0x40
 8003bca:	d107      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 fca1 	bl	800451e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bdc:	bf00      	nop
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d010      	beq.n	8003c18 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d00d      	beq.n	8003c18 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d00a      	beq.n	8003c18 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b0c      	cmp	r3, #12
 8003c06:	d007      	beq.n	8003c18 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b3c      	cmp	r3, #60	; 0x3c
 8003c0c:	d004      	beq.n	8003c18 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003c0e:	f640 5169 	movw	r1, #3433	; 0xd69
 8003c12:	488d      	ldr	r0, [pc, #564]	; (8003e48 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003c14:	f7fc fe96 	bl	8000944 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b60      	cmp	r3, #96	; 0x60
 8003c1e:	d008      	beq.n	8003c32 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b70      	cmp	r3, #112	; 0x70
 8003c26:	d004      	beq.n	8003c32 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8003c28:	f640 516a 	movw	r1, #3434	; 0xd6a
 8003c2c:	4886      	ldr	r0, [pc, #536]	; (8003e48 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003c2e:	f7fc fe89 	bl	8000944 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d008      	beq.n	8003c4c <HAL_TIM_PWM_ConfigChannel+0x68>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d004      	beq.n	8003c4c <HAL_TIM_PWM_ConfigChannel+0x68>
 8003c42:	f640 516b 	movw	r1, #3435	; 0xd6b
 8003c46:	4880      	ldr	r0, [pc, #512]	; (8003e48 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003c48:	f7fc fe7c 	bl	8000944 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <HAL_TIM_PWM_ConfigChannel+0x82>
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d004      	beq.n	8003c66 <HAL_TIM_PWM_ConfigChannel+0x82>
 8003c5c:	f640 516c 	movw	r1, #3436	; 0xd6c
 8003c60:	4879      	ldr	r0, [pc, #484]	; (8003e48 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003c62:	f7fc fe6f 	bl	8000944 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_TIM_PWM_ConfigChannel+0x90>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e13b      	b.n	8003eec <HAL_TIM_PWM_ConfigChannel+0x308>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b0c      	cmp	r3, #12
 8003c88:	f200 8126 	bhi.w	8003ed8 <HAL_TIM_PWM_ConfigChannel+0x2f4>
 8003c8c:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <HAL_TIM_PWM_ConfigChannel+0xb0>)
 8003c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c92:	bf00      	nop
 8003c94:	08003cc9 	.word	0x08003cc9
 8003c98:	08003ed9 	.word	0x08003ed9
 8003c9c:	08003ed9 	.word	0x08003ed9
 8003ca0:	08003ed9 	.word	0x08003ed9
 8003ca4:	08003d59 	.word	0x08003d59
 8003ca8:	08003ed9 	.word	0x08003ed9
 8003cac:	08003ed9 	.word	0x08003ed9
 8003cb0:	08003ed9 	.word	0x08003ed9
 8003cb4:	08003dd7 	.word	0x08003dd7
 8003cb8:	08003ed9 	.word	0x08003ed9
 8003cbc:	08003ed9 	.word	0x08003ed9
 8003cc0:	08003ed9 	.word	0x08003ed9
 8003cc4:	08003e65 	.word	0x08003e65
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd0:	d022      	beq.n	8003d18 <HAL_TIM_PWM_ConfigChannel+0x134>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a5d      	ldr	r2, [pc, #372]	; (8003e4c <HAL_TIM_PWM_ConfigChannel+0x268>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d01d      	beq.n	8003d18 <HAL_TIM_PWM_ConfigChannel+0x134>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a5b      	ldr	r2, [pc, #364]	; (8003e50 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d018      	beq.n	8003d18 <HAL_TIM_PWM_ConfigChannel+0x134>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a5a      	ldr	r2, [pc, #360]	; (8003e54 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d013      	beq.n	8003d18 <HAL_TIM_PWM_ConfigChannel+0x134>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a58      	ldr	r2, [pc, #352]	; (8003e58 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d00e      	beq.n	8003d18 <HAL_TIM_PWM_ConfigChannel+0x134>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a57      	ldr	r2, [pc, #348]	; (8003e5c <HAL_TIM_PWM_ConfigChannel+0x278>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d009      	beq.n	8003d18 <HAL_TIM_PWM_ConfigChannel+0x134>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a55      	ldr	r2, [pc, #340]	; (8003e60 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d004      	beq.n	8003d18 <HAL_TIM_PWM_ConfigChannel+0x134>
 8003d0e:	f640 5178 	movw	r1, #3448	; 0xd78
 8003d12:	484d      	ldr	r0, [pc, #308]	; (8003e48 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003d14:	f7fc fe16 	bl	8000944 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fc76 	bl	8004610 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699a      	ldr	r2, [r3, #24]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0208 	orr.w	r2, r2, #8
 8003d32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699a      	ldr	r2, [r3, #24]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0204 	bic.w	r2, r2, #4
 8003d42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6999      	ldr	r1, [r3, #24]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	619a      	str	r2, [r3, #24]
      break;
 8003d56:	e0c0      	b.n	8003eda <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d60:	d018      	beq.n	8003d94 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a39      	ldr	r2, [pc, #228]	; (8003e4c <HAL_TIM_PWM_ConfigChannel+0x268>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d013      	beq.n	8003d94 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a37      	ldr	r2, [pc, #220]	; (8003e50 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00e      	beq.n	8003d94 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a36      	ldr	r2, [pc, #216]	; (8003e54 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d009      	beq.n	8003d94 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a34      	ldr	r2, [pc, #208]	; (8003e58 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d004      	beq.n	8003d94 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8003d8a:	f640 5189 	movw	r1, #3465	; 0xd89
 8003d8e:	482e      	ldr	r0, [pc, #184]	; (8003e48 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003d90:	f7fc fdd8 	bl	8000944 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68b9      	ldr	r1, [r7, #8]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fc74 	bl	8004688 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699a      	ldr	r2, [r3, #24]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699a      	ldr	r2, [r3, #24]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6999      	ldr	r1, [r3, #24]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	021a      	lsls	r2, r3, #8
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	619a      	str	r2, [r3, #24]
      break;
 8003dd4:	e081      	b.n	8003eda <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dde:	d013      	beq.n	8003e08 <HAL_TIM_PWM_ConfigChannel+0x224>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a19      	ldr	r2, [pc, #100]	; (8003e4c <HAL_TIM_PWM_ConfigChannel+0x268>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d00e      	beq.n	8003e08 <HAL_TIM_PWM_ConfigChannel+0x224>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a18      	ldr	r2, [pc, #96]	; (8003e50 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d009      	beq.n	8003e08 <HAL_TIM_PWM_ConfigChannel+0x224>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a16      	ldr	r2, [pc, #88]	; (8003e54 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d004      	beq.n	8003e08 <HAL_TIM_PWM_ConfigChannel+0x224>
 8003dfe:	f640 519a 	movw	r1, #3482	; 0xd9a
 8003e02:	4811      	ldr	r0, [pc, #68]	; (8003e48 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003e04:	f7fc fd9e 	bl	8000944 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68b9      	ldr	r1, [r7, #8]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fc78 	bl	8004704 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	69da      	ldr	r2, [r3, #28]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0208 	orr.w	r2, r2, #8
 8003e22:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69da      	ldr	r2, [r3, #28]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0204 	bic.w	r2, r2, #4
 8003e32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69d9      	ldr	r1, [r3, #28]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	61da      	str	r2, [r3, #28]
      break;
 8003e46:	e048      	b.n	8003eda <HAL_TIM_PWM_ConfigChannel+0x2f6>
 8003e48:	08006050 	.word	0x08006050
 8003e4c:	40000400 	.word	0x40000400
 8003e50:	40000800 	.word	0x40000800
 8003e54:	40000c00 	.word	0x40000c00
 8003e58:	40010800 	.word	0x40010800
 8003e5c:	40010c00 	.word	0x40010c00
 8003e60:	40011000 	.word	0x40011000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6c:	d013      	beq.n	8003e96 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a20      	ldr	r2, [pc, #128]	; (8003ef4 <HAL_TIM_PWM_ConfigChannel+0x310>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d00e      	beq.n	8003e96 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a1e      	ldr	r2, [pc, #120]	; (8003ef8 <HAL_TIM_PWM_ConfigChannel+0x314>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d009      	beq.n	8003e96 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a1d      	ldr	r2, [pc, #116]	; (8003efc <HAL_TIM_PWM_ConfigChannel+0x318>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d004      	beq.n	8003e96 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8003e8c:	f640 51ab 	movw	r1, #3499	; 0xdab
 8003e90:	481b      	ldr	r0, [pc, #108]	; (8003f00 <HAL_TIM_PWM_ConfigChannel+0x31c>)
 8003e92:	f7fc fd57 	bl	8000944 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68b9      	ldr	r1, [r7, #8]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 fc6e 	bl	800477e <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69da      	ldr	r2, [r3, #28]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69da      	ldr	r2, [r3, #28]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	69d9      	ldr	r1, [r3, #28]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	021a      	lsls	r2, r3, #8
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	61da      	str	r2, [r3, #28]
      break;
 8003ed6:	e000      	b.n	8003eda <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    default:
      break;
 8003ed8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40000400 	.word	0x40000400
 8003ef8:	40000800 	.word	0x40000800
 8003efc:	40000c00 	.word	0x40000c00
 8003f00:	08006050 	.word	0x08006050

08003f04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <HAL_TIM_ConfigClockSource+0x18>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	e2d7      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x5c8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f34:	d029      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x86>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f3e:	d024      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x86>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d020      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x86>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b10      	cmp	r3, #16
 8003f4e:	d01c      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x86>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b20      	cmp	r3, #32
 8003f56:	d018      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x86>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b30      	cmp	r3, #48	; 0x30
 8003f5e:	d014      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x86>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b40      	cmp	r3, #64	; 0x40
 8003f66:	d010      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x86>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b50      	cmp	r3, #80	; 0x50
 8003f6e:	d00c      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x86>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b60      	cmp	r3, #96	; 0x60
 8003f76:	d008      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x86>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b70      	cmp	r3, #112	; 0x70
 8003f7e:	d004      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x86>
 8003f80:	f241 01d0 	movw	r1, #4304	; 0x10d0
 8003f84:	4874      	ldr	r0, [pc, #464]	; (8004158 <HAL_TIM_ConfigClockSource+0x254>)
 8003f86:	f7fc fcdd 	bl	8000944 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f98:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fa0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b40      	cmp	r3, #64	; 0x40
 8003fb0:	f000 820a 	beq.w	80043c8 <HAL_TIM_ConfigClockSource+0x4c4>
 8003fb4:	2b40      	cmp	r3, #64	; 0x40
 8003fb6:	d80f      	bhi.n	8003fd8 <HAL_TIM_ConfigClockSource+0xd4>
 8003fb8:	2b10      	cmp	r3, #16
 8003fba:	f000 8256 	beq.w	800446a <HAL_TIM_ConfigClockSource+0x566>
 8003fbe:	2b10      	cmp	r3, #16
 8003fc0:	d803      	bhi.n	8003fca <HAL_TIM_ConfigClockSource+0xc6>
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 8251 	beq.w	800446a <HAL_TIM_ConfigClockSource+0x566>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003fc8:	e277      	b.n	80044ba <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	f000 824d 	beq.w	800446a <HAL_TIM_ConfigClockSource+0x566>
 8003fd0:	2b30      	cmp	r3, #48	; 0x30
 8003fd2:	f000 824a 	beq.w	800446a <HAL_TIM_ConfigClockSource+0x566>
      break;
 8003fd6:	e270      	b.n	80044ba <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 8003fd8:	2b70      	cmp	r3, #112	; 0x70
 8003fda:	d04c      	beq.n	8004076 <HAL_TIM_ConfigClockSource+0x172>
 8003fdc:	2b70      	cmp	r3, #112	; 0x70
 8003fde:	d806      	bhi.n	8003fee <HAL_TIM_ConfigClockSource+0xea>
 8003fe0:	2b50      	cmp	r3, #80	; 0x50
 8003fe2:	f000 8141 	beq.w	8004268 <HAL_TIM_ConfigClockSource+0x364>
 8003fe6:	2b60      	cmp	r3, #96	; 0x60
 8003fe8:	f000 818f 	beq.w	800430a <HAL_TIM_ConfigClockSource+0x406>
      break;
 8003fec:	e265      	b.n	80044ba <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 8003fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff2:	d004      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0xfa>
 8003ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff8:	f000 80c0 	beq.w	800417c <HAL_TIM_ConfigClockSource+0x278>
      break;
 8003ffc:	e25d      	b.n	80044ba <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004006:	f000 8257 	beq.w	80044b8 <HAL_TIM_ConfigClockSource+0x5b4>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a53      	ldr	r2, [pc, #332]	; (800415c <HAL_TIM_ConfigClockSource+0x258>)
 8004010:	4293      	cmp	r3, r2
 8004012:	f000 8251 	beq.w	80044b8 <HAL_TIM_ConfigClockSource+0x5b4>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a51      	ldr	r2, [pc, #324]	; (8004160 <HAL_TIM_ConfigClockSource+0x25c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	f000 824b 	beq.w	80044b8 <HAL_TIM_ConfigClockSource+0x5b4>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a4f      	ldr	r2, [pc, #316]	; (8004164 <HAL_TIM_ConfigClockSource+0x260>)
 8004028:	4293      	cmp	r3, r2
 800402a:	f000 8245 	beq.w	80044b8 <HAL_TIM_ConfigClockSource+0x5b4>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a4d      	ldr	r2, [pc, #308]	; (8004168 <HAL_TIM_ConfigClockSource+0x264>)
 8004034:	4293      	cmp	r3, r2
 8004036:	f000 823f 	beq.w	80044b8 <HAL_TIM_ConfigClockSource+0x5b4>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a4b      	ldr	r2, [pc, #300]	; (800416c <HAL_TIM_ConfigClockSource+0x268>)
 8004040:	4293      	cmp	r3, r2
 8004042:	f000 8239 	beq.w	80044b8 <HAL_TIM_ConfigClockSource+0x5b4>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a49      	ldr	r2, [pc, #292]	; (8004170 <HAL_TIM_ConfigClockSource+0x26c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	f000 8233 	beq.w	80044b8 <HAL_TIM_ConfigClockSource+0x5b4>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a47      	ldr	r2, [pc, #284]	; (8004174 <HAL_TIM_ConfigClockSource+0x270>)
 8004058:	4293      	cmp	r3, r2
 800405a:	f000 822d 	beq.w	80044b8 <HAL_TIM_ConfigClockSource+0x5b4>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a45      	ldr	r2, [pc, #276]	; (8004178 <HAL_TIM_ConfigClockSource+0x274>)
 8004064:	4293      	cmp	r3, r2
 8004066:	f000 8227 	beq.w	80044b8 <HAL_TIM_ConfigClockSource+0x5b4>
 800406a:	f241 01dc 	movw	r1, #4316	; 0x10dc
 800406e:	483a      	ldr	r0, [pc, #232]	; (8004158 <HAL_TIM_ConfigClockSource+0x254>)
 8004070:	f7fc fc68 	bl	8000944 <assert_failed>
      break;
 8004074:	e220      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x5b4>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800407e:	d018      	beq.n	80040b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a35      	ldr	r2, [pc, #212]	; (800415c <HAL_TIM_ConfigClockSource+0x258>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <HAL_TIM_ConfigClockSource+0x1ae>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a34      	ldr	r2, [pc, #208]	; (8004160 <HAL_TIM_ConfigClockSource+0x25c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00e      	beq.n	80040b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a32      	ldr	r2, [pc, #200]	; (8004164 <HAL_TIM_ConfigClockSource+0x260>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d009      	beq.n	80040b2 <HAL_TIM_ConfigClockSource+0x1ae>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a33      	ldr	r2, [pc, #204]	; (8004170 <HAL_TIM_ConfigClockSource+0x26c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d004      	beq.n	80040b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80040a8:	f241 01e3 	movw	r1, #4323	; 0x10e3
 80040ac:	482a      	ldr	r0, [pc, #168]	; (8004158 <HAL_TIM_ConfigClockSource+0x254>)
 80040ae:	f7fc fc49 	bl	8000944 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d013      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0x1de>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c2:	d00e      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0x1de>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040cc:	d009      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0x1de>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040d6:	d004      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0x1de>
 80040d8:	f241 01e6 	movw	r1, #4326	; 0x10e6
 80040dc:	481e      	ldr	r0, [pc, #120]	; (8004158 <HAL_TIM_ConfigClockSource+0x254>)
 80040de:	f7fc fc31 	bl	8000944 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ea:	d014      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0x212>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d010      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0x212>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00c      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0x212>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b02      	cmp	r3, #2
 8004102:	d008      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0x212>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2b0a      	cmp	r3, #10
 800410a:	d004      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0x212>
 800410c:	f241 01e7 	movw	r1, #4327	; 0x10e7
 8004110:	4811      	ldr	r0, [pc, #68]	; (8004158 <HAL_TIM_ConfigClockSource+0x254>)
 8004112:	f7fc fc17 	bl	8000944 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	2b0f      	cmp	r3, #15
 800411c:	d904      	bls.n	8004128 <HAL_TIM_ConfigClockSource+0x224>
 800411e:	f241 01e8 	movw	r1, #4328	; 0x10e8
 8004122:	480d      	ldr	r0, [pc, #52]	; (8004158 <HAL_TIM_ConfigClockSource+0x254>)
 8004124:	f7fc fc0e 	bl	8000944 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6818      	ldr	r0, [r3, #0]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	6899      	ldr	r1, [r3, #8]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f000 fbd6 	bl	80048e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800414a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	609a      	str	r2, [r3, #8]
      break;
 8004154:	e1b1      	b.n	80044ba <HAL_TIM_ConfigClockSource+0x5b6>
 8004156:	bf00      	nop
 8004158:	08006050 	.word	0x08006050
 800415c:	40000400 	.word	0x40000400
 8004160:	40000800 	.word	0x40000800
 8004164:	40000c00 	.word	0x40000c00
 8004168:	40001000 	.word	0x40001000
 800416c:	40001400 	.word	0x40001400
 8004170:	40010800 	.word	0x40010800
 8004174:	40010c00 	.word	0x40010c00
 8004178:	40011000 	.word	0x40011000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004184:	d022      	beq.n	80041cc <HAL_TIM_ConfigClockSource+0x2c8>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a88      	ldr	r2, [pc, #544]	; (80043ac <HAL_TIM_ConfigClockSource+0x4a8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d01d      	beq.n	80041cc <HAL_TIM_ConfigClockSource+0x2c8>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a86      	ldr	r2, [pc, #536]	; (80043b0 <HAL_TIM_ConfigClockSource+0x4ac>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d018      	beq.n	80041cc <HAL_TIM_ConfigClockSource+0x2c8>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a85      	ldr	r2, [pc, #532]	; (80043b4 <HAL_TIM_ConfigClockSource+0x4b0>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d013      	beq.n	80041cc <HAL_TIM_ConfigClockSource+0x2c8>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a83      	ldr	r2, [pc, #524]	; (80043b8 <HAL_TIM_ConfigClockSource+0x4b4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d00e      	beq.n	80041cc <HAL_TIM_ConfigClockSource+0x2c8>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a82      	ldr	r2, [pc, #520]	; (80043bc <HAL_TIM_ConfigClockSource+0x4b8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d009      	beq.n	80041cc <HAL_TIM_ConfigClockSource+0x2c8>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a80      	ldr	r2, [pc, #512]	; (80043c0 <HAL_TIM_ConfigClockSource+0x4bc>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d004      	beq.n	80041cc <HAL_TIM_ConfigClockSource+0x2c8>
 80041c2:	f241 01fb 	movw	r1, #4347	; 0x10fb
 80041c6:	487f      	ldr	r0, [pc, #508]	; (80043c4 <HAL_TIM_ConfigClockSource+0x4c0>)
 80041c8:	f7fc fbbc 	bl	8000944 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d013      	beq.n	80041fc <HAL_TIM_ConfigClockSource+0x2f8>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041dc:	d00e      	beq.n	80041fc <HAL_TIM_ConfigClockSource+0x2f8>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e6:	d009      	beq.n	80041fc <HAL_TIM_ConfigClockSource+0x2f8>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041f0:	d004      	beq.n	80041fc <HAL_TIM_ConfigClockSource+0x2f8>
 80041f2:	f241 01fe 	movw	r1, #4350	; 0x10fe
 80041f6:	4873      	ldr	r0, [pc, #460]	; (80043c4 <HAL_TIM_ConfigClockSource+0x4c0>)
 80041f8:	f7fc fba4 	bl	8000944 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004204:	d014      	beq.n	8004230 <HAL_TIM_ConfigClockSource+0x32c>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d010      	beq.n	8004230 <HAL_TIM_ConfigClockSource+0x32c>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00c      	beq.n	8004230 <HAL_TIM_ConfigClockSource+0x32c>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d008      	beq.n	8004230 <HAL_TIM_ConfigClockSource+0x32c>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b0a      	cmp	r3, #10
 8004224:	d004      	beq.n	8004230 <HAL_TIM_ConfigClockSource+0x32c>
 8004226:	f241 01ff 	movw	r1, #4351	; 0x10ff
 800422a:	4866      	ldr	r0, [pc, #408]	; (80043c4 <HAL_TIM_ConfigClockSource+0x4c0>)
 800422c:	f7fc fb8a 	bl	8000944 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	2b0f      	cmp	r3, #15
 8004236:	d904      	bls.n	8004242 <HAL_TIM_ConfigClockSource+0x33e>
 8004238:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 800423c:	4861      	ldr	r0, [pc, #388]	; (80043c4 <HAL_TIM_ConfigClockSource+0x4c0>)
 800423e:	f7fc fb81 	bl	8000944 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6818      	ldr	r0, [r3, #0]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	6899      	ldr	r1, [r3, #8]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f000 fb49 	bl	80048e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004264:	609a      	str	r2, [r3, #8]
      break;
 8004266:	e128      	b.n	80044ba <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004270:	d018      	beq.n	80042a4 <HAL_TIM_ConfigClockSource+0x3a0>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a4d      	ldr	r2, [pc, #308]	; (80043ac <HAL_TIM_ConfigClockSource+0x4a8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d013      	beq.n	80042a4 <HAL_TIM_ConfigClockSource+0x3a0>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a4b      	ldr	r2, [pc, #300]	; (80043b0 <HAL_TIM_ConfigClockSource+0x4ac>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00e      	beq.n	80042a4 <HAL_TIM_ConfigClockSource+0x3a0>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a4a      	ldr	r2, [pc, #296]	; (80043b4 <HAL_TIM_ConfigClockSource+0x4b0>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d009      	beq.n	80042a4 <HAL_TIM_ConfigClockSource+0x3a0>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a48      	ldr	r2, [pc, #288]	; (80043b8 <HAL_TIM_ConfigClockSource+0x4b4>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d004      	beq.n	80042a4 <HAL_TIM_ConfigClockSource+0x3a0>
 800429a:	f241 110f 	movw	r1, #4367	; 0x110f
 800429e:	4849      	ldr	r0, [pc, #292]	; (80043c4 <HAL_TIM_ConfigClockSource+0x4c0>)
 80042a0:	f7fc fb50 	bl	8000944 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ac:	d014      	beq.n	80042d8 <HAL_TIM_ConfigClockSource+0x3d4>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d010      	beq.n	80042d8 <HAL_TIM_ConfigClockSource+0x3d4>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00c      	beq.n	80042d8 <HAL_TIM_ConfigClockSource+0x3d4>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d008      	beq.n	80042d8 <HAL_TIM_ConfigClockSource+0x3d4>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b0a      	cmp	r3, #10
 80042cc:	d004      	beq.n	80042d8 <HAL_TIM_ConfigClockSource+0x3d4>
 80042ce:	f241 1112 	movw	r1, #4370	; 0x1112
 80042d2:	483c      	ldr	r0, [pc, #240]	; (80043c4 <HAL_TIM_ConfigClockSource+0x4c0>)
 80042d4:	f7fc fb36 	bl	8000944 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	2b0f      	cmp	r3, #15
 80042de:	d904      	bls.n	80042ea <HAL_TIM_ConfigClockSource+0x3e6>
 80042e0:	f241 1113 	movw	r1, #4371	; 0x1113
 80042e4:	4837      	ldr	r0, [pc, #220]	; (80043c4 <HAL_TIM_ConfigClockSource+0x4c0>)
 80042e6:	f7fc fb2d 	bl	8000944 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6818      	ldr	r0, [r3, #0]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	6859      	ldr	r1, [r3, #4]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	461a      	mov	r2, r3
 80042f8:	f000 fa7f 	bl	80047fa <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2150      	movs	r1, #80	; 0x50
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fad6 	bl	80048b4 <TIM_ITRx_SetConfig>
      break;
 8004308:	e0d7      	b.n	80044ba <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004312:	d018      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x442>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a24      	ldr	r2, [pc, #144]	; (80043ac <HAL_TIM_ConfigClockSource+0x4a8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d013      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x442>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a23      	ldr	r2, [pc, #140]	; (80043b0 <HAL_TIM_ConfigClockSource+0x4ac>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d00e      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x442>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a21      	ldr	r2, [pc, #132]	; (80043b4 <HAL_TIM_ConfigClockSource+0x4b0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d009      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x442>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a20      	ldr	r2, [pc, #128]	; (80043b8 <HAL_TIM_ConfigClockSource+0x4b4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d004      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x442>
 800433c:	f241 111f 	movw	r1, #4383	; 0x111f
 8004340:	4820      	ldr	r0, [pc, #128]	; (80043c4 <HAL_TIM_ConfigClockSource+0x4c0>)
 8004342:	f7fc faff 	bl	8000944 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800434e:	d014      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x476>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d010      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x476>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00c      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x476>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b02      	cmp	r3, #2
 8004366:	d008      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x476>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b0a      	cmp	r3, #10
 800436e:	d004      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x476>
 8004370:	f241 1122 	movw	r1, #4386	; 0x1122
 8004374:	4813      	ldr	r0, [pc, #76]	; (80043c4 <HAL_TIM_ConfigClockSource+0x4c0>)
 8004376:	f7fc fae5 	bl	8000944 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	2b0f      	cmp	r3, #15
 8004380:	d904      	bls.n	800438c <HAL_TIM_ConfigClockSource+0x488>
 8004382:	f241 1123 	movw	r1, #4387	; 0x1123
 8004386:	480f      	ldr	r0, [pc, #60]	; (80043c4 <HAL_TIM_ConfigClockSource+0x4c0>)
 8004388:	f7fc fadc 	bl	8000944 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6818      	ldr	r0, [r3, #0]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	6859      	ldr	r1, [r3, #4]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	461a      	mov	r2, r3
 800439a:	f000 fa5c 	bl	8004856 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2160      	movs	r1, #96	; 0x60
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fa85 	bl	80048b4 <TIM_ITRx_SetConfig>
      break;
 80043aa:	e086      	b.n	80044ba <HAL_TIM_ConfigClockSource+0x5b6>
 80043ac:	40000400 	.word	0x40000400
 80043b0:	40000800 	.word	0x40000800
 80043b4:	40000c00 	.word	0x40000c00
 80043b8:	40010800 	.word	0x40010800
 80043bc:	40010c00 	.word	0x40010c00
 80043c0:	40011000 	.word	0x40011000
 80043c4:	08006050 	.word	0x08006050
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d0:	d018      	beq.n	8004404 <HAL_TIM_ConfigClockSource+0x500>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a3f      	ldr	r2, [pc, #252]	; (80044d4 <HAL_TIM_ConfigClockSource+0x5d0>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d013      	beq.n	8004404 <HAL_TIM_ConfigClockSource+0x500>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a3d      	ldr	r2, [pc, #244]	; (80044d8 <HAL_TIM_ConfigClockSource+0x5d4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00e      	beq.n	8004404 <HAL_TIM_ConfigClockSource+0x500>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a3c      	ldr	r2, [pc, #240]	; (80044dc <HAL_TIM_ConfigClockSource+0x5d8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d009      	beq.n	8004404 <HAL_TIM_ConfigClockSource+0x500>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a3a      	ldr	r2, [pc, #232]	; (80044e0 <HAL_TIM_ConfigClockSource+0x5dc>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d004      	beq.n	8004404 <HAL_TIM_ConfigClockSource+0x500>
 80043fa:	f241 112f 	movw	r1, #4399	; 0x112f
 80043fe:	4839      	ldr	r0, [pc, #228]	; (80044e4 <HAL_TIM_ConfigClockSource+0x5e0>)
 8004400:	f7fc faa0 	bl	8000944 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800440c:	d014      	beq.n	8004438 <HAL_TIM_ConfigClockSource+0x534>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d010      	beq.n	8004438 <HAL_TIM_ConfigClockSource+0x534>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00c      	beq.n	8004438 <HAL_TIM_ConfigClockSource+0x534>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b02      	cmp	r3, #2
 8004424:	d008      	beq.n	8004438 <HAL_TIM_ConfigClockSource+0x534>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b0a      	cmp	r3, #10
 800442c:	d004      	beq.n	8004438 <HAL_TIM_ConfigClockSource+0x534>
 800442e:	f241 1132 	movw	r1, #4402	; 0x1132
 8004432:	482c      	ldr	r0, [pc, #176]	; (80044e4 <HAL_TIM_ConfigClockSource+0x5e0>)
 8004434:	f7fc fa86 	bl	8000944 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	2b0f      	cmp	r3, #15
 800443e:	d904      	bls.n	800444a <HAL_TIM_ConfigClockSource+0x546>
 8004440:	f241 1133 	movw	r1, #4403	; 0x1133
 8004444:	4827      	ldr	r0, [pc, #156]	; (80044e4 <HAL_TIM_ConfigClockSource+0x5e0>)
 8004446:	f7fc fa7d 	bl	8000944 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	6859      	ldr	r1, [r3, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	461a      	mov	r2, r3
 8004458:	f000 f9cf 	bl	80047fa <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2140      	movs	r1, #64	; 0x40
 8004462:	4618      	mov	r0, r3
 8004464:	f000 fa26 	bl	80048b4 <TIM_ITRx_SetConfig>
      break;
 8004468:	e027      	b.n	80044ba <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004472:	d018      	beq.n	80044a6 <HAL_TIM_ConfigClockSource+0x5a2>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a16      	ldr	r2, [pc, #88]	; (80044d4 <HAL_TIM_ConfigClockSource+0x5d0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d013      	beq.n	80044a6 <HAL_TIM_ConfigClockSource+0x5a2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a15      	ldr	r2, [pc, #84]	; (80044d8 <HAL_TIM_ConfigClockSource+0x5d4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d00e      	beq.n	80044a6 <HAL_TIM_ConfigClockSource+0x5a2>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a13      	ldr	r2, [pc, #76]	; (80044dc <HAL_TIM_ConfigClockSource+0x5d8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d009      	beq.n	80044a6 <HAL_TIM_ConfigClockSource+0x5a2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a12      	ldr	r2, [pc, #72]	; (80044e0 <HAL_TIM_ConfigClockSource+0x5dc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d004      	beq.n	80044a6 <HAL_TIM_ConfigClockSource+0x5a2>
 800449c:	f241 1142 	movw	r1, #4418	; 0x1142
 80044a0:	4810      	ldr	r0, [pc, #64]	; (80044e4 <HAL_TIM_ConfigClockSource+0x5e0>)
 80044a2:	f7fc fa4f 	bl	8000944 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4619      	mov	r1, r3
 80044b0:	4610      	mov	r0, r2
 80044b2:	f000 f9ff 	bl	80048b4 <TIM_ITRx_SetConfig>
      break;
 80044b6:	e000      	b.n	80044ba <HAL_TIM_ConfigClockSource+0x5b6>
      break;
 80044b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40000400 	.word	0x40000400
 80044d8:	40000800 	.word	0x40000800
 80044dc:	40000c00 	.word	0x40000c00
 80044e0:	40010800 	.word	0x40010800
 80044e4:	08006050 	.word	0x08006050

080044e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bc80      	pop	{r7}
 80044f8:	4770      	bx	lr

080044fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr

0800450c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	bc80      	pop	{r7}
 800451c:	4770      	bx	lr

0800451e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr

08004530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004546:	d00f      	beq.n	8004568 <TIM_Base_SetConfig+0x38>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a2b      	ldr	r2, [pc, #172]	; (80045f8 <TIM_Base_SetConfig+0xc8>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d00b      	beq.n	8004568 <TIM_Base_SetConfig+0x38>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a2a      	ldr	r2, [pc, #168]	; (80045fc <TIM_Base_SetConfig+0xcc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d007      	beq.n	8004568 <TIM_Base_SetConfig+0x38>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a29      	ldr	r2, [pc, #164]	; (8004600 <TIM_Base_SetConfig+0xd0>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d003      	beq.n	8004568 <TIM_Base_SetConfig+0x38>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a28      	ldr	r2, [pc, #160]	; (8004604 <TIM_Base_SetConfig+0xd4>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d108      	bne.n	800457a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004580:	d017      	beq.n	80045b2 <TIM_Base_SetConfig+0x82>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a1c      	ldr	r2, [pc, #112]	; (80045f8 <TIM_Base_SetConfig+0xc8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d013      	beq.n	80045b2 <TIM_Base_SetConfig+0x82>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a1b      	ldr	r2, [pc, #108]	; (80045fc <TIM_Base_SetConfig+0xcc>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d00f      	beq.n	80045b2 <TIM_Base_SetConfig+0x82>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a1a      	ldr	r2, [pc, #104]	; (8004600 <TIM_Base_SetConfig+0xd0>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d00b      	beq.n	80045b2 <TIM_Base_SetConfig+0x82>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a19      	ldr	r2, [pc, #100]	; (8004604 <TIM_Base_SetConfig+0xd4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d007      	beq.n	80045b2 <TIM_Base_SetConfig+0x82>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a18      	ldr	r2, [pc, #96]	; (8004608 <TIM_Base_SetConfig+0xd8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d003      	beq.n	80045b2 <TIM_Base_SetConfig+0x82>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a17      	ldr	r2, [pc, #92]	; (800460c <TIM_Base_SetConfig+0xdc>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d108      	bne.n	80045c4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	615a      	str	r2, [r3, #20]
}
 80045ee:	bf00      	nop
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bc80      	pop	{r7}
 80045f6:	4770      	bx	lr
 80045f8:	40000400 	.word	0x40000400
 80045fc:	40000800 	.word	0x40000800
 8004600:	40000c00 	.word	0x40000c00
 8004604:	40010800 	.word	0x40010800
 8004608:	40010c00 	.word	0x40010c00
 800460c:	40011000 	.word	0x40011000

08004610 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	f023 0201 	bic.w	r2, r3, #1
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0303 	bic.w	r3, r3, #3
 8004646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f023 0302 	bic.w	r3, r3, #2
 8004658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	621a      	str	r2, [r3, #32]
}
 800467e:	bf00      	nop
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr

08004688 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f023 0210 	bic.w	r2, r3, #16
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	021b      	lsls	r3, r3, #8
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f023 0320 	bic.w	r3, r3, #32
 80046d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	4313      	orrs	r3, r2
 80046de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	621a      	str	r2, [r3, #32]
}
 80046fa:	bf00      	nop
 80046fc:	371c      	adds	r7, #28
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr

08004704 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0303 	bic.w	r3, r3, #3
 800473a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800474c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	021b      	lsls	r3, r3, #8
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	4313      	orrs	r3, r2
 8004758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	621a      	str	r2, [r3, #32]
}
 8004774:	bf00      	nop
 8004776:	371c      	adds	r7, #28
 8004778:	46bd      	mov	sp, r7
 800477a:	bc80      	pop	{r7}
 800477c:	4770      	bx	lr

0800477e <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800477e:	b480      	push	{r7}
 8004780:	b087      	sub	sp, #28
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	021b      	lsls	r3, r3, #8
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	031b      	lsls	r3, r3, #12
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	621a      	str	r2, [r3, #32]
}
 80047f0:	bf00      	nop
 80047f2:	371c      	adds	r7, #28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr

080047fa <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b087      	sub	sp, #28
 80047fe:	af00      	add	r7, sp, #0
 8004800:	60f8      	str	r0, [r7, #12]
 8004802:	60b9      	str	r1, [r7, #8]
 8004804:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	f023 0201 	bic.w	r2, r3, #1
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004824:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	4313      	orrs	r3, r2
 800482e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f023 030a 	bic.w	r3, r3, #10
 8004836:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	621a      	str	r2, [r3, #32]
}
 800484c:	bf00      	nop
 800484e:	371c      	adds	r7, #28
 8004850:	46bd      	mov	sp, r7
 8004852:	bc80      	pop	{r7}
 8004854:	4770      	bx	lr

08004856 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004856:	b480      	push	{r7}
 8004858:	b087      	sub	sp, #28
 800485a:	af00      	add	r7, sp, #0
 800485c:	60f8      	str	r0, [r7, #12]
 800485e:	60b9      	str	r1, [r7, #8]
 8004860:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	f023 0210 	bic.w	r2, r3, #16
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004880:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	031b      	lsls	r3, r3, #12
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	4313      	orrs	r3, r2
 800488a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004892:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	621a      	str	r2, [r3, #32]
}
 80048aa:	bf00      	nop
 80048ac:	371c      	adds	r7, #28
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr

080048b4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f043 0307 	orr.w	r3, r3, #7
 80048d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	609a      	str	r2, [r3, #8]
}
 80048de:	bf00      	nop
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bc80      	pop	{r7}
 80048e6:	4770      	bx	lr

080048e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004902:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	021a      	lsls	r2, r3, #8
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	431a      	orrs	r2, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4313      	orrs	r3, r2
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	4313      	orrs	r3, r2
 8004914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	609a      	str	r2, [r3, #8]
}
 800491c:	bf00      	nop
 800491e:	371c      	adds	r7, #28
 8004920:	46bd      	mov	sp, r7
 8004922:	bc80      	pop	{r7}
 8004924:	4770      	bx	lr
	...

08004928 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493a:	d01c      	beq.n	8004976 <TIM_CCxChannelCmd+0x4e>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4a26      	ldr	r2, [pc, #152]	; (80049d8 <TIM_CCxChannelCmd+0xb0>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d018      	beq.n	8004976 <TIM_CCxChannelCmd+0x4e>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4a25      	ldr	r2, [pc, #148]	; (80049dc <TIM_CCxChannelCmd+0xb4>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d014      	beq.n	8004976 <TIM_CCxChannelCmd+0x4e>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4a24      	ldr	r2, [pc, #144]	; (80049e0 <TIM_CCxChannelCmd+0xb8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d010      	beq.n	8004976 <TIM_CCxChannelCmd+0x4e>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4a23      	ldr	r2, [pc, #140]	; (80049e4 <TIM_CCxChannelCmd+0xbc>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00c      	beq.n	8004976 <TIM_CCxChannelCmd+0x4e>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4a22      	ldr	r2, [pc, #136]	; (80049e8 <TIM_CCxChannelCmd+0xc0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d008      	beq.n	8004976 <TIM_CCxChannelCmd+0x4e>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4a21      	ldr	r2, [pc, #132]	; (80049ec <TIM_CCxChannelCmd+0xc4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d004      	beq.n	8004976 <TIM_CCxChannelCmd+0x4e>
 800496c:	f641 0169 	movw	r1, #6249	; 0x1869
 8004970:	481f      	ldr	r0, [pc, #124]	; (80049f0 <TIM_CCxChannelCmd+0xc8>)
 8004972:	f7fb ffe7 	bl	8000944 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d010      	beq.n	800499e <TIM_CCxChannelCmd+0x76>
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2b04      	cmp	r3, #4
 8004980:	d00d      	beq.n	800499e <TIM_CCxChannelCmd+0x76>
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b08      	cmp	r3, #8
 8004986:	d00a      	beq.n	800499e <TIM_CCxChannelCmd+0x76>
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b0c      	cmp	r3, #12
 800498c:	d007      	beq.n	800499e <TIM_CCxChannelCmd+0x76>
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2b3c      	cmp	r3, #60	; 0x3c
 8004992:	d004      	beq.n	800499e <TIM_CCxChannelCmd+0x76>
 8004994:	f641 016a 	movw	r1, #6250	; 0x186a
 8004998:	4815      	ldr	r0, [pc, #84]	; (80049f0 <TIM_CCxChannelCmd+0xc8>)
 800499a:	f7fb ffd3 	bl	8000944 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f003 031f 	and.w	r3, r3, #31
 80049a4:	2201      	movs	r2, #1
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6a1a      	ldr	r2, [r3, #32]
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	43db      	mvns	r3, r3
 80049b4:	401a      	ands	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6a1a      	ldr	r2, [r3, #32]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	f003 031f 	and.w	r3, r3, #31
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	fa01 f303 	lsl.w	r3, r1, r3
 80049ca:	431a      	orrs	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	621a      	str	r2, [r3, #32]
}
 80049d0:	bf00      	nop
 80049d2:	3718      	adds	r7, #24
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	40000400 	.word	0x40000400
 80049dc:	40000800 	.word	0x40000800
 80049e0:	40000c00 	.word	0x40000c00
 80049e4:	40010800 	.word	0x40010800
 80049e8:	40010c00 	.word	0x40010c00
 80049ec:	40011000 	.word	0x40011000
 80049f0:	08006050 	.word	0x08006050

080049f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a06:	d017      	beq.n	8004a38 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a41      	ldr	r2, [pc, #260]	; (8004b14 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d012      	beq.n	8004a38 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a40      	ldr	r2, [pc, #256]	; (8004b18 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00d      	beq.n	8004a38 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a3e      	ldr	r2, [pc, #248]	; (8004b1c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d008      	beq.n	8004a38 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a3d      	ldr	r2, [pc, #244]	; (8004b20 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d003      	beq.n	8004a38 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004a30:	215a      	movs	r1, #90	; 0x5a
 8004a32:	483c      	ldr	r0, [pc, #240]	; (8004b24 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8004a34:	f7fb ff86 	bl	8000944 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01f      	beq.n	8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b10      	cmp	r3, #16
 8004a46:	d01b      	beq.n	8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d017      	beq.n	8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b30      	cmp	r3, #48	; 0x30
 8004a56:	d013      	beq.n	8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b40      	cmp	r3, #64	; 0x40
 8004a5e:	d00f      	beq.n	8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b50      	cmp	r3, #80	; 0x50
 8004a66:	d00b      	beq.n	8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b60      	cmp	r3, #96	; 0x60
 8004a6e:	d007      	beq.n	8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b70      	cmp	r3, #112	; 0x70
 8004a76:	d003      	beq.n	8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004a78:	215b      	movs	r1, #91	; 0x5b
 8004a7a:	482a      	ldr	r0, [pc, #168]	; (8004b24 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8004a7c:	f7fb ff62 	bl	8000944 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2b80      	cmp	r3, #128	; 0x80
 8004a86:	d007      	beq.n	8004a98 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004a90:	215c      	movs	r1, #92	; 0x5c
 8004a92:	4824      	ldr	r0, [pc, #144]	; (8004b24 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8004a94:	f7fb ff56 	bl	8000944 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e032      	b.n	8004b0c <HAL_TIMEx_MasterConfigSynchronization+0x118>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004acc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ade:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40000400 	.word	0x40000400
 8004b18:	40000800 	.word	0x40000800
 8004b1c:	40000c00 	.word	0x40000c00
 8004b20:	40010800 	.word	0x40010800
 8004b24:	08006088 	.word	0x08006088

08004b28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e0aa      	b.n	8004c90 <HAL_UART_Init+0x168>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d02c      	beq.n	8004b9c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a54      	ldr	r2, [pc, #336]	; (8004c98 <HAL_UART_Init+0x170>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d00e      	beq.n	8004b6a <HAL_UART_Init+0x42>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a52      	ldr	r2, [pc, #328]	; (8004c9c <HAL_UART_Init+0x174>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d009      	beq.n	8004b6a <HAL_UART_Init+0x42>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a51      	ldr	r2, [pc, #324]	; (8004ca0 <HAL_UART_Init+0x178>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d004      	beq.n	8004b6a <HAL_UART_Init+0x42>
 8004b60:	f240 1145 	movw	r1, #325	; 0x145
 8004b64:	484f      	ldr	r0, [pc, #316]	; (8004ca4 <HAL_UART_Init+0x17c>)
 8004b66:	f7fb feed 	bl	8000944 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d032      	beq.n	8004bd8 <HAL_UART_Init+0xb0>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b7a:	d02d      	beq.n	8004bd8 <HAL_UART_Init+0xb0>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b84:	d028      	beq.n	8004bd8 <HAL_UART_Init+0xb0>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b8e:	d023      	beq.n	8004bd8 <HAL_UART_Init+0xb0>
 8004b90:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004b94:	4843      	ldr	r0, [pc, #268]	; (8004ca4 <HAL_UART_Init+0x17c>)
 8004b96:	f7fb fed5 	bl	8000944 <assert_failed>
 8004b9a:	e01d      	b.n	8004bd8 <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a3d      	ldr	r2, [pc, #244]	; (8004c98 <HAL_UART_Init+0x170>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d018      	beq.n	8004bd8 <HAL_UART_Init+0xb0>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a3c      	ldr	r2, [pc, #240]	; (8004c9c <HAL_UART_Init+0x174>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d013      	beq.n	8004bd8 <HAL_UART_Init+0xb0>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a3a      	ldr	r2, [pc, #232]	; (8004ca0 <HAL_UART_Init+0x178>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00e      	beq.n	8004bd8 <HAL_UART_Init+0xb0>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a3a      	ldr	r2, [pc, #232]	; (8004ca8 <HAL_UART_Init+0x180>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d009      	beq.n	8004bd8 <HAL_UART_Init+0xb0>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a38      	ldr	r2, [pc, #224]	; (8004cac <HAL_UART_Init+0x184>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <HAL_UART_Init+0xb0>
 8004bce:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004bd2:	4834      	ldr	r0, [pc, #208]	; (8004ca4 <HAL_UART_Init+0x17c>)
 8004bd4:	f7fb feb6 	bl	8000944 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d009      	beq.n	8004bf4 <HAL_UART_Init+0xcc>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be8:	d004      	beq.n	8004bf4 <HAL_UART_Init+0xcc>
 8004bea:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004bee:	482d      	ldr	r0, [pc, #180]	; (8004ca4 <HAL_UART_Init+0x17c>)
 8004bf0:	f7fb fea8 	bl	8000944 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d009      	beq.n	8004c10 <HAL_UART_Init+0xe8>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	69db      	ldr	r3, [r3, #28]
 8004c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c04:	d004      	beq.n	8004c10 <HAL_UART_Init+0xe8>
 8004c06:	f240 114d 	movw	r1, #333	; 0x14d
 8004c0a:	4826      	ldr	r0, [pc, #152]	; (8004ca4 <HAL_UART_Init+0x17c>)
 8004c0c:	f7fb fe9a 	bl	8000944 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d106      	bne.n	8004c2a <HAL_UART_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f7fc f9d3 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2224      	movs	r2, #36	; 0x24
 8004c2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c40:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f924 	bl	8004e90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	691a      	ldr	r2, [r3, #16]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c56:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	695a      	ldr	r2, [r3, #20]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c66:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c76:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	40013800 	.word	0x40013800
 8004c9c:	40004400 	.word	0x40004400
 8004ca0:	40004800 	.word	0x40004800
 8004ca4:	080060c4 	.word	0x080060c4
 8004ca8:	40004c00 	.word	0x40004c00
 8004cac:	40005000 	.word	0x40005000

08004cb0 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b088      	sub	sp, #32
 8004cb4:	af02      	add	r7, sp, #8
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	f040 8090 	bne.w	8004df2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <HAL_UART_Receive+0x2e>
 8004cd8:	88fb      	ldrh	r3, [r7, #6]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e088      	b.n	8004df4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <HAL_UART_Receive+0x40>
 8004cec:	2302      	movs	r3, #2
 8004cee:	e081      	b.n	8004df4 <HAL_UART_Receive+0x144>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2222      	movs	r2, #34	; 0x22
 8004d02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004d06:	f7fc f9f7 	bl	80010f8 <HAL_GetTick>
 8004d0a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	88fa      	ldrh	r2, [r7, #6]
 8004d10:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	88fa      	ldrh	r2, [r7, #6]
 8004d16:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004d18:	e05c      	b.n	8004dd4 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d30:	d12b      	bne.n	8004d8a <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	2120      	movs	r1, #32
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f85d 	bl	8004dfc <UART_WaitOnFlagUntilTimeout>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e053      	b.n	8004df4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10c      	bne.n	8004d72 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	3302      	adds	r3, #2
 8004d6e:	60bb      	str	r3, [r7, #8]
 8004d70:	e030      	b.n	8004dd4 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	3301      	adds	r3, #1
 8004d86:	60bb      	str	r3, [r7, #8]
 8004d88:	e024      	b.n	8004dd4 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2200      	movs	r2, #0
 8004d92:	2120      	movs	r1, #32
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 f831 	bl	8004dfc <UART_WaitOnFlagUntilTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e027      	b.n	8004df4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d108      	bne.n	8004dbe <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6859      	ldr	r1, [r3, #4]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	60ba      	str	r2, [r7, #8]
 8004db8:	b2ca      	uxtb	r2, r1
 8004dba:	701a      	strb	r2, [r3, #0]
 8004dbc:	e00a      	b.n	8004dd4 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	1c59      	adds	r1, r3, #1
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d19d      	bne.n	8004d1a <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	e000      	b.n	8004df4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004df2:	2302      	movs	r3, #2
  }
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	603b      	str	r3, [r7, #0]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e0c:	e02c      	b.n	8004e68 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e14:	d028      	beq.n	8004e68 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d007      	beq.n	8004e2c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e1c:	f7fc f96c 	bl	80010f8 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d21d      	bcs.n	8004e68 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e3a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695a      	ldr	r2, [r3, #20]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0201 	bic.w	r2, r2, #1
 8004e4a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e00f      	b.n	8004e88 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	4013      	ands	r3, r2
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	bf0c      	ite	eq
 8004e78:	2301      	moveq	r3, #1
 8004e7a:	2300      	movne	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	461a      	mov	r2, r3
 8004e80:	79fb      	ldrb	r3, [r7, #7]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d0c3      	beq.n	8004e0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	4ab2      	ldr	r2, [pc, #712]	; (8005168 <UART_SetConfig+0x2d8>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d904      	bls.n	8004eac <UART_SetConfig+0x1c>
 8004ea2:	f640 31e2 	movw	r1, #3042	; 0xbe2
 8004ea6:	48b1      	ldr	r0, [pc, #708]	; (800516c <UART_SetConfig+0x2dc>)
 8004ea8:	f7fb fd4c 	bl	8000944 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d009      	beq.n	8004ec8 <UART_SetConfig+0x38>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ebc:	d004      	beq.n	8004ec8 <UART_SetConfig+0x38>
 8004ebe:	f640 31e3 	movw	r1, #3043	; 0xbe3
 8004ec2:	48aa      	ldr	r0, [pc, #680]	; (800516c <UART_SetConfig+0x2dc>)
 8004ec4:	f7fb fd3e 	bl	8000944 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00e      	beq.n	8004eee <UART_SetConfig+0x5e>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed8:	d009      	beq.n	8004eee <UART_SetConfig+0x5e>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ee2:	d004      	beq.n	8004eee <UART_SetConfig+0x5e>
 8004ee4:	f640 31e4 	movw	r1, #3044	; 0xbe4
 8004ee8:	48a0      	ldr	r0, [pc, #640]	; (800516c <UART_SetConfig+0x2dc>)
 8004eea:	f7fb fd2b 	bl	8000944 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	695a      	ldr	r2, [r3, #20]
 8004ef2:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d103      	bne.n	8004f04 <UART_SetConfig+0x74>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d104      	bne.n	8004f0e <UART_SetConfig+0x7e>
 8004f04:	f640 31e5 	movw	r1, #3045	; 0xbe5
 8004f08:	4898      	ldr	r0, [pc, #608]	; (800516c <UART_SetConfig+0x2dc>)
 8004f0a:	f7fb fd1b 	bl	8000944 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68da      	ldr	r2, [r3, #12]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004f46:	f023 030c 	bic.w	r3, r3, #12
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6812      	ldr	r2, [r2, #0]
 8004f4e:	68f9      	ldr	r1, [r7, #12]
 8004f50:	430b      	orrs	r3, r1
 8004f52:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699a      	ldr	r2, [r3, #24]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f72:	f040 80a5 	bne.w	80050c0 <UART_SetConfig+0x230>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a7d      	ldr	r2, [pc, #500]	; (8005170 <UART_SetConfig+0x2e0>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d14f      	bne.n	8005020 <UART_SetConfig+0x190>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f80:	f7fe fa4a 	bl	8003418 <HAL_RCC_GetPCLK2Freq>
 8004f84:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009a      	lsls	r2, r3, #2
 8004f90:	441a      	add	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9c:	4a75      	ldr	r2, [pc, #468]	; (8005174 <UART_SetConfig+0x2e4>)
 8004f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa2:	095b      	lsrs	r3, r3, #5
 8004fa4:	0119      	lsls	r1, r3, #4
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	009a      	lsls	r2, r3, #2
 8004fb0:	441a      	add	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fbc:	4b6d      	ldr	r3, [pc, #436]	; (8005174 <UART_SetConfig+0x2e4>)
 8004fbe:	fba3 0302 	umull	r0, r3, r3, r2
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	2064      	movs	r0, #100	; 0x64
 8004fc6:	fb00 f303 	mul.w	r3, r0, r3
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	3332      	adds	r3, #50	; 0x32
 8004fd0:	4a68      	ldr	r2, [pc, #416]	; (8005174 <UART_SetConfig+0x2e4>)
 8004fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd6:	095b      	lsrs	r3, r3, #5
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fde:	4419      	add	r1, r3
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	009a      	lsls	r2, r3, #2
 8004fea:	441a      	add	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ff6:	4b5f      	ldr	r3, [pc, #380]	; (8005174 <UART_SetConfig+0x2e4>)
 8004ff8:	fba3 0302 	umull	r0, r3, r3, r2
 8004ffc:	095b      	lsrs	r3, r3, #5
 8004ffe:	2064      	movs	r0, #100	; 0x64
 8005000:	fb00 f303 	mul.w	r3, r0, r3
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	3332      	adds	r3, #50	; 0x32
 800500a:	4a5a      	ldr	r2, [pc, #360]	; (8005174 <UART_SetConfig+0x2e4>)
 800500c:	fba2 2303 	umull	r2, r3, r2, r3
 8005010:	095b      	lsrs	r3, r3, #5
 8005012:	f003 0207 	and.w	r2, r3, #7
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	440a      	add	r2, r1
 800501c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800501e:	e0f9      	b.n	8005214 <UART_SetConfig+0x384>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005020:	f7fe f9e6 	bl	80033f0 <HAL_RCC_GetPCLK1Freq>
 8005024:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	009a      	lsls	r2, r3, #2
 8005030:	441a      	add	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	fbb2 f3f3 	udiv	r3, r2, r3
 800503c:	4a4d      	ldr	r2, [pc, #308]	; (8005174 <UART_SetConfig+0x2e4>)
 800503e:	fba2 2303 	umull	r2, r3, r2, r3
 8005042:	095b      	lsrs	r3, r3, #5
 8005044:	0119      	lsls	r1, r3, #4
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	009a      	lsls	r2, r3, #2
 8005050:	441a      	add	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	fbb2 f2f3 	udiv	r2, r2, r3
 800505c:	4b45      	ldr	r3, [pc, #276]	; (8005174 <UART_SetConfig+0x2e4>)
 800505e:	fba3 0302 	umull	r0, r3, r3, r2
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	2064      	movs	r0, #100	; 0x64
 8005066:	fb00 f303 	mul.w	r3, r0, r3
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	3332      	adds	r3, #50	; 0x32
 8005070:	4a40      	ldr	r2, [pc, #256]	; (8005174 <UART_SetConfig+0x2e4>)
 8005072:	fba2 2303 	umull	r2, r3, r2, r3
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800507e:	4419      	add	r1, r3
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	009a      	lsls	r2, r3, #2
 800508a:	441a      	add	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	fbb2 f2f3 	udiv	r2, r2, r3
 8005096:	4b37      	ldr	r3, [pc, #220]	; (8005174 <UART_SetConfig+0x2e4>)
 8005098:	fba3 0302 	umull	r0, r3, r3, r2
 800509c:	095b      	lsrs	r3, r3, #5
 800509e:	2064      	movs	r0, #100	; 0x64
 80050a0:	fb00 f303 	mul.w	r3, r0, r3
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	3332      	adds	r3, #50	; 0x32
 80050aa:	4a32      	ldr	r2, [pc, #200]	; (8005174 <UART_SetConfig+0x2e4>)
 80050ac:	fba2 2303 	umull	r2, r3, r2, r3
 80050b0:	095b      	lsrs	r3, r3, #5
 80050b2:	f003 0207 	and.w	r2, r3, #7
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	440a      	add	r2, r1
 80050bc:	609a      	str	r2, [r3, #8]
}
 80050be:	e0a9      	b.n	8005214 <UART_SetConfig+0x384>
    if((huart->Instance == USART1))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a2a      	ldr	r2, [pc, #168]	; (8005170 <UART_SetConfig+0x2e0>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d156      	bne.n	8005178 <UART_SetConfig+0x2e8>
      pclk = HAL_RCC_GetPCLK2Freq();
 80050ca:	f7fe f9a5 	bl	8003418 <HAL_RCC_GetPCLK2Freq>
 80050ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	4613      	mov	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	009a      	lsls	r2, r3, #2
 80050da:	441a      	add	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e6:	4a23      	ldr	r2, [pc, #140]	; (8005174 <UART_SetConfig+0x2e4>)
 80050e8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ec:	095b      	lsrs	r3, r3, #5
 80050ee:	0119      	lsls	r1, r3, #4
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	4613      	mov	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	009a      	lsls	r2, r3, #2
 80050fa:	441a      	add	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	fbb2 f2f3 	udiv	r2, r2, r3
 8005106:	4b1b      	ldr	r3, [pc, #108]	; (8005174 <UART_SetConfig+0x2e4>)
 8005108:	fba3 0302 	umull	r0, r3, r3, r2
 800510c:	095b      	lsrs	r3, r3, #5
 800510e:	2064      	movs	r0, #100	; 0x64
 8005110:	fb00 f303 	mul.w	r3, r0, r3
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	011b      	lsls	r3, r3, #4
 8005118:	3332      	adds	r3, #50	; 0x32
 800511a:	4a16      	ldr	r2, [pc, #88]	; (8005174 <UART_SetConfig+0x2e4>)
 800511c:	fba2 2303 	umull	r2, r3, r2, r3
 8005120:	095b      	lsrs	r3, r3, #5
 8005122:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005126:	4419      	add	r1, r3
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	4613      	mov	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4413      	add	r3, r2
 8005130:	009a      	lsls	r2, r3, #2
 8005132:	441a      	add	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	fbb2 f2f3 	udiv	r2, r2, r3
 800513e:	4b0d      	ldr	r3, [pc, #52]	; (8005174 <UART_SetConfig+0x2e4>)
 8005140:	fba3 0302 	umull	r0, r3, r3, r2
 8005144:	095b      	lsrs	r3, r3, #5
 8005146:	2064      	movs	r0, #100	; 0x64
 8005148:	fb00 f303 	mul.w	r3, r0, r3
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	3332      	adds	r3, #50	; 0x32
 8005152:	4a08      	ldr	r2, [pc, #32]	; (8005174 <UART_SetConfig+0x2e4>)
 8005154:	fba2 2303 	umull	r2, r3, r2, r3
 8005158:	095b      	lsrs	r3, r3, #5
 800515a:	f003 020f 	and.w	r2, r3, #15
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	440a      	add	r2, r1
 8005164:	609a      	str	r2, [r3, #8]
}
 8005166:	e055      	b.n	8005214 <UART_SetConfig+0x384>
 8005168:	003d0900 	.word	0x003d0900
 800516c:	080060c4 	.word	0x080060c4
 8005170:	40013800 	.word	0x40013800
 8005174:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8005178:	f7fe f93a 	bl	80033f0 <HAL_RCC_GetPCLK1Freq>
 800517c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	4613      	mov	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	009a      	lsls	r2, r3, #2
 8005188:	441a      	add	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	fbb2 f3f3 	udiv	r3, r2, r3
 8005194:	4a21      	ldr	r2, [pc, #132]	; (800521c <UART_SetConfig+0x38c>)
 8005196:	fba2 2303 	umull	r2, r3, r2, r3
 800519a:	095b      	lsrs	r3, r3, #5
 800519c:	0119      	lsls	r1, r3, #4
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	4613      	mov	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	009a      	lsls	r2, r3, #2
 80051a8:	441a      	add	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80051b4:	4b19      	ldr	r3, [pc, #100]	; (800521c <UART_SetConfig+0x38c>)
 80051b6:	fba3 0302 	umull	r0, r3, r3, r2
 80051ba:	095b      	lsrs	r3, r3, #5
 80051bc:	2064      	movs	r0, #100	; 0x64
 80051be:	fb00 f303 	mul.w	r3, r0, r3
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	011b      	lsls	r3, r3, #4
 80051c6:	3332      	adds	r3, #50	; 0x32
 80051c8:	4a14      	ldr	r2, [pc, #80]	; (800521c <UART_SetConfig+0x38c>)
 80051ca:	fba2 2303 	umull	r2, r3, r2, r3
 80051ce:	095b      	lsrs	r3, r3, #5
 80051d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051d4:	4419      	add	r1, r3
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	4613      	mov	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	009a      	lsls	r2, r3, #2
 80051e0:	441a      	add	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80051ec:	4b0b      	ldr	r3, [pc, #44]	; (800521c <UART_SetConfig+0x38c>)
 80051ee:	fba3 0302 	umull	r0, r3, r3, r2
 80051f2:	095b      	lsrs	r3, r3, #5
 80051f4:	2064      	movs	r0, #100	; 0x64
 80051f6:	fb00 f303 	mul.w	r3, r0, r3
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	3332      	adds	r3, #50	; 0x32
 8005200:	4a06      	ldr	r2, [pc, #24]	; (800521c <UART_SetConfig+0x38c>)
 8005202:	fba2 2303 	umull	r2, r3, r2, r3
 8005206:	095b      	lsrs	r3, r3, #5
 8005208:	f003 020f 	and.w	r2, r3, #15
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	440a      	add	r2, r1
 8005212:	609a      	str	r2, [r3, #8]
}
 8005214:	bf00      	nop
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	51eb851f 	.word	0x51eb851f

08005220 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b08e      	sub	sp, #56	; 0x38
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800522a:	2300      	movs	r3, #0
 800522c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8005232:	2300      	movs	r3, #0
 8005234:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d109      	bne.n	8005250 <xEventGroupSetBits+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	613b      	str	r3, [r7, #16]
 800524e:	e7fe      	b.n	800524e <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d009      	beq.n	800526e <xEventGroupSetBits+0x4e>
 800525a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	e7fe      	b.n	800526c <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800526e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005270:	3304      	adds	r3, #4
 8005272:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	3308      	adds	r3, #8
 8005278:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800527a:	f000 f9c5 	bl	8005608 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	431a      	orrs	r2, r3
 800528c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005290:	e03c      	b.n	800530c <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800529e:	2300      	movs	r3, #0
 80052a0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80052a8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80052b0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d108      	bne.n	80052ce <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80052bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	4013      	ands	r3, r2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00b      	beq.n	80052e0 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 80052c8:	2301      	movs	r3, #1
 80052ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052cc:	e008      	b.n	80052e0 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80052ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	4013      	ands	r3, r2
 80052d6:	69ba      	ldr	r2, [r7, #24]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d101      	bne.n	80052e0 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80052dc:	2301      	movs	r3, #1
 80052de:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80052e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d010      	beq.n	8005308 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80052f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80052f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005300:	4619      	mov	r1, r3
 8005302:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005304:	f000 fbbe 	bl	8005a84 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800530c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	429a      	cmp	r2, r3
 8005312:	d1be      	bne.n	8005292 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	43db      	mvns	r3, r3
 800531c:	401a      	ands	r2, r3
 800531e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005320:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8005322:	f000 f97f 	bl	8005624 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005328:	681b      	ldr	r3, [r3, #0]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3738      	adds	r7, #56	; 0x38
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b082      	sub	sp, #8
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 800533c:	6839      	ldr	r1, [r7, #0]
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7ff ff6e 	bl	8005220 <xEventGroupSetBits>
}
 8005344:	bf00      	nop
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	68f9      	ldr	r1, [r7, #12]
 800535e:	4804      	ldr	r0, [pc, #16]	; (8005370 <xEventGroupSetBitsFromISR+0x24>)
 8005360:	f000 fc80 	bl	8005c64 <xTimerPendFunctionCallFromISR>
 8005364:	6178      	str	r0, [r7, #20]

		return xReturn;
 8005366:	697b      	ldr	r3, [r7, #20]
	}
 8005368:	4618      	mov	r0, r3
 800536a:	3718      	adds	r7, #24
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	08005333 	.word	0x08005333

08005374 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	1c5a      	adds	r2, r3, #1
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	601a      	str	r2, [r3, #0]
}
 80053b0:	bf00      	nop
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bc80      	pop	{r7}
 80053b8:	4770      	bx	lr

080053ba <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80053ba:	b480      	push	{r7}
 80053bc:	b085      	sub	sp, #20
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6892      	ldr	r2, [r2, #8]
 80053d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6852      	ldr	r2, [r2, #4]
 80053da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d103      	bne.n	80053ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	1e5a      	subs	r2, r3, #1
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	bc80      	pop	{r7}
 800540a:	4770      	bx	lr

0800540c <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b08e      	sub	sp, #56	; 0x38
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	2b00      	cmp	r3, #0
 8005422:	d109      	bne.n	8005438 <xQueueGenericSendFromISR+0x2c>
 8005424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
 8005436:	e7fe      	b.n	8005436 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d103      	bne.n	8005446 <xQueueGenericSendFromISR+0x3a>
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <xQueueGenericSendFromISR+0x3e>
 8005446:	2301      	movs	r3, #1
 8005448:	e000      	b.n	800544c <xQueueGenericSendFromISR+0x40>
 800544a:	2300      	movs	r3, #0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d109      	bne.n	8005464 <xQueueGenericSendFromISR+0x58>
 8005450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	623b      	str	r3, [r7, #32]
 8005462:	e7fe      	b.n	8005462 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d103      	bne.n	8005472 <xQueueGenericSendFromISR+0x66>
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546e:	2b01      	cmp	r3, #1
 8005470:	d101      	bne.n	8005476 <xQueueGenericSendFromISR+0x6a>
 8005472:	2301      	movs	r3, #1
 8005474:	e000      	b.n	8005478 <xQueueGenericSendFromISR+0x6c>
 8005476:	2300      	movs	r3, #0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d109      	bne.n	8005490 <xQueueGenericSendFromISR+0x84>
 800547c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	61fb      	str	r3, [r7, #28]
 800548e:	e7fe      	b.n	800548e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005490:	f000 fcba 	bl	8005e08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005494:	f3ef 8211 	mrs	r2, BASEPRI
 8005498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	61ba      	str	r2, [r7, #24]
 80054aa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80054ac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80054ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d302      	bcc.n	80054c2 <xQueueGenericSendFromISR+0xb6>
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d12c      	bne.n	800551c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80054c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054d2:	f000 f82f 	bl	8005534 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80054d6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80054da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054de:	d112      	bne.n	8005506 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d016      	beq.n	8005516 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ea:	3324      	adds	r3, #36	; 0x24
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 fa67 	bl	80059c0 <xTaskRemoveFromEventList>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00e      	beq.n	8005516 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00b      	beq.n	8005516 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	e007      	b.n	8005516 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005506:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800550a:	3301      	adds	r3, #1
 800550c:	b2db      	uxtb	r3, r3
 800550e:	b25a      	sxtb	r2, r3
 8005510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005516:	2301      	movs	r3, #1
 8005518:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800551a:	e001      	b.n	8005520 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800551c:	2300      	movs	r3, #0
 800551e:	637b      	str	r3, [r7, #52]	; 0x34
 8005520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005522:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800552a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800552c:	4618      	mov	r0, r3
 800552e:	3738      	adds	r7, #56	; 0x38
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005540:	2300      	movs	r3, #0
 8005542:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005548:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10d      	bne.n	800556e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d14d      	bne.n	80055f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fb14 	bl	8005b8c <xTaskPriorityDisinherit>
 8005564:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	605a      	str	r2, [r3, #4]
 800556c:	e043      	b.n	80055f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d119      	bne.n	80055a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6898      	ldr	r0, [r3, #8]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557c:	461a      	mov	r2, r3
 800557e:	68b9      	ldr	r1, [r7, #8]
 8005580:	f000 fca2 	bl	8005ec8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558c:	441a      	add	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	689a      	ldr	r2, [r3, #8]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	429a      	cmp	r2, r3
 800559c:	d32b      	bcc.n	80055f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	609a      	str	r2, [r3, #8]
 80055a6:	e026      	b.n	80055f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	68d8      	ldr	r0, [r3, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b0:	461a      	mov	r2, r3
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	f000 fc88 	bl	8005ec8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c0:	425b      	negs	r3, r3
 80055c2:	441a      	add	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	68da      	ldr	r2, [r3, #12]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d207      	bcs.n	80055e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055dc:	425b      	negs	r3, r3
 80055de:	441a      	add	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d105      	bne.n	80055f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80055fe:	697b      	ldr	r3, [r7, #20]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800560c:	4b04      	ldr	r3, [pc, #16]	; (8005620 <vTaskSuspendAll+0x18>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3301      	adds	r3, #1
 8005612:	4a03      	ldr	r2, [pc, #12]	; (8005620 <vTaskSuspendAll+0x18>)
 8005614:	6013      	str	r3, [r2, #0]
}
 8005616:	bf00      	nop
 8005618:	46bd      	mov	sp, r7
 800561a:	bc80      	pop	{r7}
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	200004d0 	.word	0x200004d0

08005624 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800562a:	2300      	movs	r3, #0
 800562c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800562e:	2300      	movs	r3, #0
 8005630:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005632:	4b41      	ldr	r3, [pc, #260]	; (8005738 <xTaskResumeAll+0x114>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d109      	bne.n	800564e <xTaskResumeAll+0x2a>
	__asm volatile
 800563a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	603b      	str	r3, [r7, #0]
 800564c:	e7fe      	b.n	800564c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800564e:	f000 fb43 	bl	8005cd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005652:	4b39      	ldr	r3, [pc, #228]	; (8005738 <xTaskResumeAll+0x114>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3b01      	subs	r3, #1
 8005658:	4a37      	ldr	r2, [pc, #220]	; (8005738 <xTaskResumeAll+0x114>)
 800565a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800565c:	4b36      	ldr	r3, [pc, #216]	; (8005738 <xTaskResumeAll+0x114>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d162      	bne.n	800572a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005664:	4b35      	ldr	r3, [pc, #212]	; (800573c <xTaskResumeAll+0x118>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d05e      	beq.n	800572a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800566c:	e02f      	b.n	80056ce <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800566e:	4b34      	ldr	r3, [pc, #208]	; (8005740 <xTaskResumeAll+0x11c>)
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	3318      	adds	r3, #24
 800567a:	4618      	mov	r0, r3
 800567c:	f7ff fe9d 	bl	80053ba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3304      	adds	r3, #4
 8005684:	4618      	mov	r0, r3
 8005686:	f7ff fe98 	bl	80053ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568e:	4b2d      	ldr	r3, [pc, #180]	; (8005744 <xTaskResumeAll+0x120>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d903      	bls.n	800569e <xTaskResumeAll+0x7a>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569a:	4a2a      	ldr	r2, [pc, #168]	; (8005744 <xTaskResumeAll+0x120>)
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a2:	4613      	mov	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4a27      	ldr	r2, [pc, #156]	; (8005748 <xTaskResumeAll+0x124>)
 80056ac:	441a      	add	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	3304      	adds	r3, #4
 80056b2:	4619      	mov	r1, r3
 80056b4:	4610      	mov	r0, r2
 80056b6:	f7ff fe5d 	bl	8005374 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056be:	4b23      	ldr	r3, [pc, #140]	; (800574c <xTaskResumeAll+0x128>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d302      	bcc.n	80056ce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80056c8:	4b21      	ldr	r3, [pc, #132]	; (8005750 <xTaskResumeAll+0x12c>)
 80056ca:	2201      	movs	r2, #1
 80056cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056ce:	4b1c      	ldr	r3, [pc, #112]	; (8005740 <xTaskResumeAll+0x11c>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1cb      	bne.n	800566e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056dc:	f000 fa32 	bl	8005b44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80056e0:	4b1c      	ldr	r3, [pc, #112]	; (8005754 <xTaskResumeAll+0x130>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d010      	beq.n	800570e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056ec:	f000 f836 	bl	800575c <xTaskIncrementTick>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80056f6:	4b16      	ldr	r3, [pc, #88]	; (8005750 <xTaskResumeAll+0x12c>)
 80056f8:	2201      	movs	r2, #1
 80056fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3b01      	subs	r3, #1
 8005700:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1f1      	bne.n	80056ec <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005708:	4b12      	ldr	r3, [pc, #72]	; (8005754 <xTaskResumeAll+0x130>)
 800570a:	2200      	movs	r2, #0
 800570c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800570e:	4b10      	ldr	r3, [pc, #64]	; (8005750 <xTaskResumeAll+0x12c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d009      	beq.n	800572a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005716:	2301      	movs	r3, #1
 8005718:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800571a:	4b0f      	ldr	r3, [pc, #60]	; (8005758 <xTaskResumeAll+0x134>)
 800571c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800572a:	f000 fb03 	bl	8005d34 <vPortExitCritical>

	return xAlreadyYielded;
 800572e:	68bb      	ldr	r3, [r7, #8]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	200004d0 	.word	0x200004d0
 800573c:	200004b4 	.word	0x200004b4
 8005740:	200004a0 	.word	0x200004a0
 8005744:	200004bc 	.word	0x200004bc
 8005748:	20000038 	.word	0x20000038
 800574c:	20000034 	.word	0x20000034
 8005750:	200004c4 	.word	0x200004c4
 8005754:	200004c0 	.word	0x200004c0
 8005758:	e000ed04 	.word	0xe000ed04

0800575c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005762:	2300      	movs	r3, #0
 8005764:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005766:	4b55      	ldr	r3, [pc, #340]	; (80058bc <xTaskIncrementTick+0x160>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	f040 8093 	bne.w	8005896 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005770:	4b53      	ldr	r3, [pc, #332]	; (80058c0 <xTaskIncrementTick+0x164>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3301      	adds	r3, #1
 8005776:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005778:	4a51      	ldr	r2, [pc, #324]	; (80058c0 <xTaskIncrementTick+0x164>)
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d11f      	bne.n	80057c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005784:	4b4f      	ldr	r3, [pc, #316]	; (80058c4 <xTaskIncrementTick+0x168>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d009      	beq.n	80057a2 <xTaskIncrementTick+0x46>
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	603b      	str	r3, [r7, #0]
 80057a0:	e7fe      	b.n	80057a0 <xTaskIncrementTick+0x44>
 80057a2:	4b48      	ldr	r3, [pc, #288]	; (80058c4 <xTaskIncrementTick+0x168>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	4b47      	ldr	r3, [pc, #284]	; (80058c8 <xTaskIncrementTick+0x16c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a45      	ldr	r2, [pc, #276]	; (80058c4 <xTaskIncrementTick+0x168>)
 80057ae:	6013      	str	r3, [r2, #0]
 80057b0:	4a45      	ldr	r2, [pc, #276]	; (80058c8 <xTaskIncrementTick+0x16c>)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	4b45      	ldr	r3, [pc, #276]	; (80058cc <xTaskIncrementTick+0x170>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3301      	adds	r3, #1
 80057bc:	4a43      	ldr	r2, [pc, #268]	; (80058cc <xTaskIncrementTick+0x170>)
 80057be:	6013      	str	r3, [r2, #0]
 80057c0:	f000 f9c0 	bl	8005b44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057c4:	4b42      	ldr	r3, [pc, #264]	; (80058d0 <xTaskIncrementTick+0x174>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d34e      	bcc.n	800586c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057ce:	4b3d      	ldr	r3, [pc, #244]	; (80058c4 <xTaskIncrementTick+0x168>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <xTaskIncrementTick+0x80>
 80057d8:	2301      	movs	r3, #1
 80057da:	e000      	b.n	80057de <xTaskIncrementTick+0x82>
 80057dc:	2300      	movs	r3, #0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d004      	beq.n	80057ec <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057e2:	4b3b      	ldr	r3, [pc, #236]	; (80058d0 <xTaskIncrementTick+0x174>)
 80057e4:	f04f 32ff 	mov.w	r2, #4294967295
 80057e8:	601a      	str	r2, [r3, #0]
					break;
 80057ea:	e03f      	b.n	800586c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80057ec:	4b35      	ldr	r3, [pc, #212]	; (80058c4 <xTaskIncrementTick+0x168>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	429a      	cmp	r2, r3
 8005802:	d203      	bcs.n	800580c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005804:	4a32      	ldr	r2, [pc, #200]	; (80058d0 <xTaskIncrementTick+0x174>)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6013      	str	r3, [r2, #0]
						break;
 800580a:	e02f      	b.n	800586c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	3304      	adds	r3, #4
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff fdd2 	bl	80053ba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581a:	2b00      	cmp	r3, #0
 800581c:	d004      	beq.n	8005828 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	3318      	adds	r3, #24
 8005822:	4618      	mov	r0, r3
 8005824:	f7ff fdc9 	bl	80053ba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800582c:	4b29      	ldr	r3, [pc, #164]	; (80058d4 <xTaskIncrementTick+0x178>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	429a      	cmp	r2, r3
 8005832:	d903      	bls.n	800583c <xTaskIncrementTick+0xe0>
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005838:	4a26      	ldr	r2, [pc, #152]	; (80058d4 <xTaskIncrementTick+0x178>)
 800583a:	6013      	str	r3, [r2, #0]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005840:	4613      	mov	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4413      	add	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4a23      	ldr	r2, [pc, #140]	; (80058d8 <xTaskIncrementTick+0x17c>)
 800584a:	441a      	add	r2, r3
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	3304      	adds	r3, #4
 8005850:	4619      	mov	r1, r3
 8005852:	4610      	mov	r0, r2
 8005854:	f7ff fd8e 	bl	8005374 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585c:	4b1f      	ldr	r3, [pc, #124]	; (80058dc <xTaskIncrementTick+0x180>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005862:	429a      	cmp	r2, r3
 8005864:	d3b3      	bcc.n	80057ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005866:	2301      	movs	r3, #1
 8005868:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800586a:	e7b0      	b.n	80057ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800586c:	4b1b      	ldr	r3, [pc, #108]	; (80058dc <xTaskIncrementTick+0x180>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005872:	4919      	ldr	r1, [pc, #100]	; (80058d8 <xTaskIncrementTick+0x17c>)
 8005874:	4613      	mov	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	440b      	add	r3, r1
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d901      	bls.n	8005888 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8005884:	2301      	movs	r3, #1
 8005886:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8005888:	4b15      	ldr	r3, [pc, #84]	; (80058e0 <xTaskIncrementTick+0x184>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d109      	bne.n	80058a4 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 8005890:	f7fa fe18 	bl	80004c4 <vApplicationTickHook>
 8005894:	e006      	b.n	80058a4 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005896:	4b12      	ldr	r3, [pc, #72]	; (80058e0 <xTaskIncrementTick+0x184>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3301      	adds	r3, #1
 800589c:	4a10      	ldr	r2, [pc, #64]	; (80058e0 <xTaskIncrementTick+0x184>)
 800589e:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80058a0:	f7fa fe10 	bl	80004c4 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80058a4:	4b0f      	ldr	r3, [pc, #60]	; (80058e4 <xTaskIncrementTick+0x188>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d001      	beq.n	80058b0 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 80058ac:	2301      	movs	r3, #1
 80058ae:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80058b0:	697b      	ldr	r3, [r7, #20]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	200004d0 	.word	0x200004d0
 80058c0:	200004b8 	.word	0x200004b8
 80058c4:	20000498 	.word	0x20000498
 80058c8:	2000049c 	.word	0x2000049c
 80058cc:	200004c8 	.word	0x200004c8
 80058d0:	200004cc 	.word	0x200004cc
 80058d4:	200004bc 	.word	0x200004bc
 80058d8:	20000038 	.word	0x20000038
 80058dc:	20000034 	.word	0x20000034
 80058e0:	200004c0 	.word	0x200004c0
 80058e4:	200004c4 	.word	0x200004c4

080058e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058ee:	4b2f      	ldr	r3, [pc, #188]	; (80059ac <vTaskSwitchContext+0xc4>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058f6:	4b2e      	ldr	r3, [pc, #184]	; (80059b0 <vTaskSwitchContext+0xc8>)
 80058f8:	2201      	movs	r2, #1
 80058fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058fc:	e051      	b.n	80059a2 <vTaskSwitchContext+0xba>
		xYieldPending = pdFALSE;
 80058fe:	4b2c      	ldr	r3, [pc, #176]	; (80059b0 <vTaskSwitchContext+0xc8>)
 8005900:	2200      	movs	r2, #0
 8005902:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8005904:	4b2b      	ldr	r3, [pc, #172]	; (80059b4 <vTaskSwitchContext+0xcc>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	4b2a      	ldr	r3, [pc, #168]	; (80059b4 <vTaskSwitchContext+0xcc>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005910:	429a      	cmp	r2, r3
 8005912:	d808      	bhi.n	8005926 <vTaskSwitchContext+0x3e>
 8005914:	4b27      	ldr	r3, [pc, #156]	; (80059b4 <vTaskSwitchContext+0xcc>)
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	4b26      	ldr	r3, [pc, #152]	; (80059b4 <vTaskSwitchContext+0xcc>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3334      	adds	r3, #52	; 0x34
 800591e:	4619      	mov	r1, r3
 8005920:	4610      	mov	r0, r2
 8005922:	f7fa fdd5 	bl	80004d0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005926:	4b24      	ldr	r3, [pc, #144]	; (80059b8 <vTaskSwitchContext+0xd0>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	e00f      	b.n	800594e <vTaskSwitchContext+0x66>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d109      	bne.n	8005948 <vTaskSwitchContext+0x60>
 8005934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	607b      	str	r3, [r7, #4]
 8005946:	e7fe      	b.n	8005946 <vTaskSwitchContext+0x5e>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	3b01      	subs	r3, #1
 800594c:	60fb      	str	r3, [r7, #12]
 800594e:	491b      	ldr	r1, [pc, #108]	; (80059bc <vTaskSwitchContext+0xd4>)
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	4613      	mov	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	440b      	add	r3, r1
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0e5      	beq.n	800592e <vTaskSwitchContext+0x46>
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4a13      	ldr	r2, [pc, #76]	; (80059bc <vTaskSwitchContext+0xd4>)
 800596e:	4413      	add	r3, r2
 8005970:	60bb      	str	r3, [r7, #8]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	605a      	str	r2, [r3, #4]
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	3308      	adds	r3, #8
 8005984:	429a      	cmp	r2, r3
 8005986:	d104      	bne.n	8005992 <vTaskSwitchContext+0xaa>
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	605a      	str	r2, [r3, #4]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	4a06      	ldr	r2, [pc, #24]	; (80059b4 <vTaskSwitchContext+0xcc>)
 800599a:	6013      	str	r3, [r2, #0]
 800599c:	4a06      	ldr	r2, [pc, #24]	; (80059b8 <vTaskSwitchContext+0xd0>)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6013      	str	r3, [r2, #0]
}
 80059a2:	bf00      	nop
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	200004d0 	.word	0x200004d0
 80059b0:	200004c4 	.word	0x200004c4
 80059b4:	20000034 	.word	0x20000034
 80059b8:	200004bc 	.word	0x200004bc
 80059bc:	20000038 	.word	0x20000038

080059c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d109      	bne.n	80059ea <xTaskRemoveFromEventList+0x2a>
 80059d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	e7fe      	b.n	80059e8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	3318      	adds	r3, #24
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7ff fce3 	bl	80053ba <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059f4:	4b1d      	ldr	r3, [pc, #116]	; (8005a6c <xTaskRemoveFromEventList+0xac>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d11d      	bne.n	8005a38 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	3304      	adds	r3, #4
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7ff fcda 	bl	80053ba <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a0a:	4b19      	ldr	r3, [pc, #100]	; (8005a70 <xTaskRemoveFromEventList+0xb0>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d903      	bls.n	8005a1a <xTaskRemoveFromEventList+0x5a>
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a16:	4a16      	ldr	r2, [pc, #88]	; (8005a70 <xTaskRemoveFromEventList+0xb0>)
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1e:	4613      	mov	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4a13      	ldr	r2, [pc, #76]	; (8005a74 <xTaskRemoveFromEventList+0xb4>)
 8005a28:	441a      	add	r2, r3
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	4619      	mov	r1, r3
 8005a30:	4610      	mov	r0, r2
 8005a32:	f7ff fc9f 	bl	8005374 <vListInsertEnd>
 8005a36:	e005      	b.n	8005a44 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	3318      	adds	r3, #24
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	480e      	ldr	r0, [pc, #56]	; (8005a78 <xTaskRemoveFromEventList+0xb8>)
 8005a40:	f7ff fc98 	bl	8005374 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a48:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <xTaskRemoveFromEventList+0xbc>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d905      	bls.n	8005a5e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a52:	2301      	movs	r3, #1
 8005a54:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a56:	4b0a      	ldr	r3, [pc, #40]	; (8005a80 <xTaskRemoveFromEventList+0xc0>)
 8005a58:	2201      	movs	r2, #1
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	e001      	b.n	8005a62 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005a62:	697b      	ldr	r3, [r7, #20]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3718      	adds	r7, #24
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	200004d0 	.word	0x200004d0
 8005a70:	200004bc 	.word	0x200004bc
 8005a74:	20000038 	.word	0x20000038
 8005a78:	200004a0 	.word	0x200004a0
 8005a7c:	20000034 	.word	0x20000034
 8005a80:	200004c4 	.word	0x200004c4

08005a84 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8005a8e:	4b28      	ldr	r3, [pc, #160]	; (8005b30 <vTaskRemoveFromUnorderedEventList+0xac>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d109      	bne.n	8005aaa <vTaskRemoveFromUnorderedEventList+0x26>
 8005a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9a:	f383 8811 	msr	BASEPRI, r3
 8005a9e:	f3bf 8f6f 	isb	sy
 8005aa2:	f3bf 8f4f 	dsb	sy
 8005aa6:	613b      	str	r3, [r7, #16]
 8005aa8:	e7fe      	b.n	8005aa8 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d109      	bne.n	8005ad4 <vTaskRemoveFromUnorderedEventList+0x50>
 8005ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	60fb      	str	r3, [r7, #12]
 8005ad2:	e7fe      	b.n	8005ad2 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7ff fc70 	bl	80053ba <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	3304      	adds	r3, #4
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7ff fc6b 	bl	80053ba <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae8:	4b12      	ldr	r3, [pc, #72]	; (8005b34 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d903      	bls.n	8005af8 <vTaskRemoveFromUnorderedEventList+0x74>
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af4:	4a0f      	ldr	r2, [pc, #60]	; (8005b34 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8005af6:	6013      	str	r3, [r2, #0]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afc:	4613      	mov	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4a0c      	ldr	r2, [pc, #48]	; (8005b38 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005b06:	441a      	add	r2, r3
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4610      	mov	r0, r2
 8005b10:	f7ff fc30 	bl	8005374 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b18:	4b08      	ldr	r3, [pc, #32]	; (8005b3c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d902      	bls.n	8005b28 <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8005b22:	4b07      	ldr	r3, [pc, #28]	; (8005b40 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005b24:	2201      	movs	r2, #1
 8005b26:	601a      	str	r2, [r3, #0]
	}
}
 8005b28:	bf00      	nop
 8005b2a:	3718      	adds	r7, #24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	200004d0 	.word	0x200004d0
 8005b34:	200004bc 	.word	0x200004bc
 8005b38:	20000038 	.word	0x20000038
 8005b3c:	20000034 	.word	0x20000034
 8005b40:	200004c4 	.word	0x200004c4

08005b44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b4a:	4b0e      	ldr	r3, [pc, #56]	; (8005b84 <prvResetNextTaskUnblockTime+0x40>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <prvResetNextTaskUnblockTime+0x14>
 8005b54:	2301      	movs	r3, #1
 8005b56:	e000      	b.n	8005b5a <prvResetNextTaskUnblockTime+0x16>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d004      	beq.n	8005b68 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b5e:	4b0a      	ldr	r3, [pc, #40]	; (8005b88 <prvResetNextTaskUnblockTime+0x44>)
 8005b60:	f04f 32ff 	mov.w	r2, #4294967295
 8005b64:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b66:	e008      	b.n	8005b7a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005b68:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <prvResetNextTaskUnblockTime+0x40>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	4a04      	ldr	r2, [pc, #16]	; (8005b88 <prvResetNextTaskUnblockTime+0x44>)
 8005b78:	6013      	str	r3, [r2, #0]
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bc80      	pop	{r7}
 8005b82:	4770      	bx	lr
 8005b84:	20000498 	.word	0x20000498
 8005b88:	200004cc 	.word	0x200004cc

08005b8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d054      	beq.n	8005c4c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005ba2:	4b2d      	ldr	r3, [pc, #180]	; (8005c58 <xTaskPriorityDisinherit+0xcc>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d009      	beq.n	8005bc0 <xTaskPriorityDisinherit+0x34>
 8005bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	60fb      	str	r3, [r7, #12]
 8005bbe:	e7fe      	b.n	8005bbe <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d109      	bne.n	8005bdc <xTaskPriorityDisinherit+0x50>
 8005bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bcc:	f383 8811 	msr	BASEPRI, r3
 8005bd0:	f3bf 8f6f 	isb	sy
 8005bd4:	f3bf 8f4f 	dsb	sy
 8005bd8:	60bb      	str	r3, [r7, #8]
 8005bda:	e7fe      	b.n	8005bda <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be0:	1e5a      	subs	r2, r3, #1
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d02c      	beq.n	8005c4c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d128      	bne.n	8005c4c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7ff fbdb 	bl	80053ba <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c1c:	4b0f      	ldr	r3, [pc, #60]	; (8005c5c <xTaskPriorityDisinherit+0xd0>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d903      	bls.n	8005c2c <xTaskPriorityDisinherit+0xa0>
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c28:	4a0c      	ldr	r2, [pc, #48]	; (8005c5c <xTaskPriorityDisinherit+0xd0>)
 8005c2a:	6013      	str	r3, [r2, #0]
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c30:	4613      	mov	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4a09      	ldr	r2, [pc, #36]	; (8005c60 <xTaskPriorityDisinherit+0xd4>)
 8005c3a:	441a      	add	r2, r3
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	3304      	adds	r3, #4
 8005c40:	4619      	mov	r1, r3
 8005c42:	4610      	mov	r0, r2
 8005c44:	f7ff fb96 	bl	8005374 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c4c:	697b      	ldr	r3, [r7, #20]
	}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	20000034 	.word	0x20000034
 8005c5c:	200004bc 	.word	0x200004bc
 8005c60:	20000038 	.word	0x20000038

08005c64 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b08a      	sub	sp, #40	; 0x28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8005c72:	f06f 0301 	mvn.w	r3, #1
 8005c76:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c84:	4b06      	ldr	r3, [pc, #24]	; (8005ca0 <xTimerPendFunctionCallFromISR+0x3c>)
 8005c86:	6818      	ldr	r0, [r3, #0]
 8005c88:	f107 0114 	add.w	r1, r7, #20
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	f7ff fbbc 	bl	800540c <xQueueGenericSendFromISR>
 8005c94:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3728      	adds	r7, #40	; 0x28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	200004d4 	.word	0x200004d4
	...

08005cb0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005cb0:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <pxCurrentTCBConst2>)
 8005cb2:	6819      	ldr	r1, [r3, #0]
 8005cb4:	6808      	ldr	r0, [r1, #0]
 8005cb6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005cba:	f380 8809 	msr	PSP, r0
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	f04f 0000 	mov.w	r0, #0
 8005cc6:	f380 8811 	msr	BASEPRI, r0
 8005cca:	f04e 0e0d 	orr.w	lr, lr, #13
 8005cce:	4770      	bx	lr

08005cd0 <pxCurrentTCBConst2>:
 8005cd0:	20000034 	.word	0x20000034
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005cd4:	bf00      	nop
 8005cd6:	bf00      	nop

08005cd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005cf0:	4b0e      	ldr	r3, [pc, #56]	; (8005d2c <vPortEnterCritical+0x54>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	4a0d      	ldr	r2, [pc, #52]	; (8005d2c <vPortEnterCritical+0x54>)
 8005cf8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005cfa:	4b0c      	ldr	r3, [pc, #48]	; (8005d2c <vPortEnterCritical+0x54>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d10e      	bne.n	8005d20 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d02:	4b0b      	ldr	r3, [pc, #44]	; (8005d30 <vPortEnterCritical+0x58>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d009      	beq.n	8005d20 <vPortEnterCritical+0x48>
 8005d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	603b      	str	r3, [r7, #0]
 8005d1e:	e7fe      	b.n	8005d1e <vPortEnterCritical+0x46>
	}
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bc80      	pop	{r7}
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	2000000c 	.word	0x2000000c
 8005d30:	e000ed04 	.word	0xe000ed04

08005d34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d3a:	4b10      	ldr	r3, [pc, #64]	; (8005d7c <vPortExitCritical+0x48>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d109      	bne.n	8005d56 <vPortExitCritical+0x22>
 8005d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	607b      	str	r3, [r7, #4]
 8005d54:	e7fe      	b.n	8005d54 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005d56:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <vPortExitCritical+0x48>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	4a07      	ldr	r2, [pc, #28]	; (8005d7c <vPortExitCritical+0x48>)
 8005d5e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d60:	4b06      	ldr	r3, [pc, #24]	; (8005d7c <vPortExitCritical+0x48>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d104      	bne.n	8005d72 <vPortExitCritical+0x3e>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d72:	bf00      	nop
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bc80      	pop	{r7}
 8005d7a:	4770      	bx	lr
 8005d7c:	2000000c 	.word	0x2000000c

08005d80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d80:	f3ef 8009 	mrs	r0, PSP
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	4b0d      	ldr	r3, [pc, #52]	; (8005dc0 <pxCurrentTCBConst>)
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005d90:	6010      	str	r0, [r2, #0]
 8005d92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005d96:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d9a:	f380 8811 	msr	BASEPRI, r0
 8005d9e:	f7ff fda3 	bl	80058e8 <vTaskSwitchContext>
 8005da2:	f04f 0000 	mov.w	r0, #0
 8005da6:	f380 8811 	msr	BASEPRI, r0
 8005daa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005dae:	6819      	ldr	r1, [r3, #0]
 8005db0:	6808      	ldr	r0, [r1, #0]
 8005db2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005db6:	f380 8809 	msr	PSP, r0
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	4770      	bx	lr

08005dc0 <pxCurrentTCBConst>:
 8005dc0:	20000034 	.word	0x20000034
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005dc4:	bf00      	nop
 8005dc6:	bf00      	nop

08005dc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8005dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005de0:	f7ff fcbc 	bl	800575c <xTaskIncrementTick>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005dea:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <SysTick_Handler+0x3c>)
 8005dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	2300      	movs	r3, #0
 8005df4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005dfc:	bf00      	nop
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	e000ed04 	.word	0xe000ed04

08005e08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e0e:	f3ef 8305 	mrs	r3, IPSR
 8005e12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2b0f      	cmp	r3, #15
 8005e18:	d913      	bls.n	8005e42 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e1a:	4a15      	ldr	r2, [pc, #84]	; (8005e70 <vPortValidateInterruptPriority+0x68>)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4413      	add	r3, r2
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e24:	4b13      	ldr	r3, [pc, #76]	; (8005e74 <vPortValidateInterruptPriority+0x6c>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	7afa      	ldrb	r2, [r7, #11]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d209      	bcs.n	8005e42 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	607b      	str	r3, [r7, #4]
 8005e40:	e7fe      	b.n	8005e40 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e42:	4b0d      	ldr	r3, [pc, #52]	; (8005e78 <vPortValidateInterruptPriority+0x70>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e4a:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <vPortValidateInterruptPriority+0x74>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d909      	bls.n	8005e66 <vPortValidateInterruptPriority+0x5e>
 8005e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	603b      	str	r3, [r7, #0]
 8005e64:	e7fe      	b.n	8005e64 <vPortValidateInterruptPriority+0x5c>
	}
 8005e66:	bf00      	nop
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bc80      	pop	{r7}
 8005e6e:	4770      	bx	lr
 8005e70:	e000e3f0 	.word	0xe000e3f0
 8005e74:	200004d8 	.word	0x200004d8
 8005e78:	e000ed0c 	.word	0xe000ed0c
 8005e7c:	200004dc 	.word	0x200004dc

08005e80 <__libc_init_array>:
 8005e80:	b570      	push	{r4, r5, r6, lr}
 8005e82:	2500      	movs	r5, #0
 8005e84:	4e0c      	ldr	r6, [pc, #48]	; (8005eb8 <__libc_init_array+0x38>)
 8005e86:	4c0d      	ldr	r4, [pc, #52]	; (8005ebc <__libc_init_array+0x3c>)
 8005e88:	1ba4      	subs	r4, r4, r6
 8005e8a:	10a4      	asrs	r4, r4, #2
 8005e8c:	42a5      	cmp	r5, r4
 8005e8e:	d109      	bne.n	8005ea4 <__libc_init_array+0x24>
 8005e90:	f000 f842 	bl	8005f18 <_init>
 8005e94:	2500      	movs	r5, #0
 8005e96:	4e0a      	ldr	r6, [pc, #40]	; (8005ec0 <__libc_init_array+0x40>)
 8005e98:	4c0a      	ldr	r4, [pc, #40]	; (8005ec4 <__libc_init_array+0x44>)
 8005e9a:	1ba4      	subs	r4, r4, r6
 8005e9c:	10a4      	asrs	r4, r4, #2
 8005e9e:	42a5      	cmp	r5, r4
 8005ea0:	d105      	bne.n	8005eae <__libc_init_array+0x2e>
 8005ea2:	bd70      	pop	{r4, r5, r6, pc}
 8005ea4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ea8:	4798      	blx	r3
 8005eaa:	3501      	adds	r5, #1
 8005eac:	e7ee      	b.n	8005e8c <__libc_init_array+0xc>
 8005eae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005eb2:	4798      	blx	r3
 8005eb4:	3501      	adds	r5, #1
 8005eb6:	e7f2      	b.n	8005e9e <__libc_init_array+0x1e>
 8005eb8:	08006124 	.word	0x08006124
 8005ebc:	08006124 	.word	0x08006124
 8005ec0:	08006124 	.word	0x08006124
 8005ec4:	08006128 	.word	0x08006128

08005ec8 <memcpy>:
 8005ec8:	b510      	push	{r4, lr}
 8005eca:	1e43      	subs	r3, r0, #1
 8005ecc:	440a      	add	r2, r1
 8005ece:	4291      	cmp	r1, r2
 8005ed0:	d100      	bne.n	8005ed4 <memcpy+0xc>
 8005ed2:	bd10      	pop	{r4, pc}
 8005ed4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ed8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005edc:	e7f7      	b.n	8005ece <memcpy+0x6>

08005ede <memset>:
 8005ede:	4603      	mov	r3, r0
 8005ee0:	4402      	add	r2, r0
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d100      	bne.n	8005ee8 <memset+0xa>
 8005ee6:	4770      	bx	lr
 8005ee8:	f803 1b01 	strb.w	r1, [r3], #1
 8005eec:	e7f9      	b.n	8005ee2 <memset+0x4>

08005eee <strncpy>:
 8005eee:	b570      	push	{r4, r5, r6, lr}
 8005ef0:	4604      	mov	r4, r0
 8005ef2:	3901      	subs	r1, #1
 8005ef4:	b902      	cbnz	r2, 8005ef8 <strncpy+0xa>
 8005ef6:	bd70      	pop	{r4, r5, r6, pc}
 8005ef8:	4623      	mov	r3, r4
 8005efa:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8005efe:	1e56      	subs	r6, r2, #1
 8005f00:	f803 5b01 	strb.w	r5, [r3], #1
 8005f04:	b92d      	cbnz	r5, 8005f12 <strncpy+0x24>
 8005f06:	4414      	add	r4, r2
 8005f08:	42a3      	cmp	r3, r4
 8005f0a:	d0f4      	beq.n	8005ef6 <strncpy+0x8>
 8005f0c:	f803 5b01 	strb.w	r5, [r3], #1
 8005f10:	e7fa      	b.n	8005f08 <strncpy+0x1a>
 8005f12:	461c      	mov	r4, r3
 8005f14:	4632      	mov	r2, r6
 8005f16:	e7ed      	b.n	8005ef4 <strncpy+0x6>

08005f18 <_init>:
 8005f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1a:	bf00      	nop
 8005f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f1e:	bc08      	pop	{r3}
 8005f20:	469e      	mov	lr, r3
 8005f22:	4770      	bx	lr

08005f24 <_fini>:
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f26:	bf00      	nop
 8005f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2a:	bc08      	pop	{r3}
 8005f2c:	469e      	mov	lr, r3
 8005f2e:	4770      	bx	lr
